# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_compliance_data_state import PatchComplianceDataState
from openapi_server import util


class PatchComplianceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, kbid: str=None, classification: str=None, severity: str=None, state: PatchComplianceDataState=None, installed_time: datetime=None, cve_ids: str=None):
        """PatchComplianceData - a model defined in OpenAPI

        :param title: The title of this PatchComplianceData.
        :param kbid: The kbid of this PatchComplianceData.
        :param classification: The classification of this PatchComplianceData.
        :param severity: The severity of this PatchComplianceData.
        :param state: The state of this PatchComplianceData.
        :param installed_time: The installed_time of this PatchComplianceData.
        :param cve_ids: The cve_ids of this PatchComplianceData.
        """
        self.openapi_types = {
            'title': str,
            'kbid': str,
            'classification': str,
            'severity': str,
            'state': PatchComplianceDataState,
            'installed_time': datetime,
            'cve_ids': str
        }

        self.attribute_map = {
            'title': 'Title',
            'kbid': 'KBId',
            'classification': 'Classification',
            'severity': 'Severity',
            'state': 'State',
            'installed_time': 'InstalledTime',
            'cve_ids': 'CVEIds'
        }

        self._title = title
        self._kbid = kbid
        self._classification = classification
        self._severity = severity
        self._state = state
        self._installed_time = installed_time
        self._cve_ids = cve_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchComplianceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchComplianceData of this PatchComplianceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this PatchComplianceData.


        :return: The title of this PatchComplianceData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PatchComplianceData.


        :param title: The title of this PatchComplianceData.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def kbid(self):
        """Gets the kbid of this PatchComplianceData.


        :return: The kbid of this PatchComplianceData.
        :rtype: str
        """
        return self._kbid

    @kbid.setter
    def kbid(self, kbid):
        """Sets the kbid of this PatchComplianceData.


        :param kbid: The kbid of this PatchComplianceData.
        :type kbid: str
        """
        if kbid is None:
            raise ValueError("Invalid value for `kbid`, must not be `None`")

        self._kbid = kbid

    @property
    def classification(self):
        """Gets the classification of this PatchComplianceData.


        :return: The classification of this PatchComplianceData.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this PatchComplianceData.


        :param classification: The classification of this PatchComplianceData.
        :type classification: str
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def severity(self):
        """Gets the severity of this PatchComplianceData.


        :return: The severity of this PatchComplianceData.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this PatchComplianceData.


        :param severity: The severity of this PatchComplianceData.
        :type severity: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def state(self):
        """Gets the state of this PatchComplianceData.


        :return: The state of this PatchComplianceData.
        :rtype: PatchComplianceDataState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PatchComplianceData.


        :param state: The state of this PatchComplianceData.
        :type state: PatchComplianceDataState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def installed_time(self):
        """Gets the installed_time of this PatchComplianceData.


        :return: The installed_time of this PatchComplianceData.
        :rtype: datetime
        """
        return self._installed_time

    @installed_time.setter
    def installed_time(self, installed_time):
        """Sets the installed_time of this PatchComplianceData.


        :param installed_time: The installed_time of this PatchComplianceData.
        :type installed_time: datetime
        """
        if installed_time is None:
            raise ValueError("Invalid value for `installed_time`, must not be `None`")

        self._installed_time = installed_time

    @property
    def cve_ids(self):
        """Gets the cve_ids of this PatchComplianceData.


        :return: The cve_ids of this PatchComplianceData.
        :rtype: str
        """
        return self._cve_ids

    @cve_ids.setter
    def cve_ids(self, cve_ids):
        """Sets the cve_ids of this PatchComplianceData.


        :param cve_ids: The cve_ids of this PatchComplianceData.
        :type cve_ids: str
        """

        self._cve_ids = cve_ids
