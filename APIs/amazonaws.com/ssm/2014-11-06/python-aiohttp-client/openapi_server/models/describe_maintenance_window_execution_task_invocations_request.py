# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeMaintenanceWindowExecutionTaskInvocationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, window_execution_id: str=None, task_id: str=None, filters: List=None, max_results: int=None, next_token: str=None):
        """DescribeMaintenanceWindowExecutionTaskInvocationsRequest - a model defined in OpenAPI

        :param window_execution_id: The window_execution_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :param task_id: The task_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :param filters: The filters of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :param max_results: The max_results of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :param next_token: The next_token of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        """
        self.openapi_types = {
            'window_execution_id': str,
            'task_id': str,
            'filters': List,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'window_execution_id': 'WindowExecutionId',
            'task_id': 'TaskId',
            'filters': 'Filters',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._window_execution_id = window_execution_id
        self._task_id = task_id
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeMaintenanceWindowExecutionTaskInvocationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeMaintenanceWindowExecutionTaskInvocationsRequest of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def window_execution_id(self):
        """Gets the window_execution_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :return: The window_execution_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :rtype: str
        """
        return self._window_execution_id

    @window_execution_id.setter
    def window_execution_id(self, window_execution_id):
        """Sets the window_execution_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :param window_execution_id: The window_execution_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :type window_execution_id: str
        """
        if window_execution_id is None:
            raise ValueError("Invalid value for `window_execution_id`, must not be `None`")

        self._window_execution_id = window_execution_id

    @property
    def task_id(self):
        """Gets the task_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :return: The task_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :param task_id: The task_id of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id

    @property
    def filters(self):
        """Gets the filters of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :return: The filters of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :param filters: The filters of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :type filters: List
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :return: The max_results of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :param max_results: The max_results of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :return: The next_token of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.


        :param next_token: The next_token of this DescribeMaintenanceWindowExecutionTaskInvocationsRequest.
        :type next_token: str
        """

        self._next_token = next_token
