# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_tier import ParameterTier
from openapi_server.models.parameter_type import ParameterType
from openapi_server import util


class PutParameterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, value: str=None, type: ParameterType=None, key_id: str=None, overwrite: bool=None, allowed_pattern: str=None, tags: List=None, tier: ParameterTier=None, policies: str=None, data_type: str=None):
        """PutParameterRequest - a model defined in OpenAPI

        :param name: The name of this PutParameterRequest.
        :param description: The description of this PutParameterRequest.
        :param value: The value of this PutParameterRequest.
        :param type: The type of this PutParameterRequest.
        :param key_id: The key_id of this PutParameterRequest.
        :param overwrite: The overwrite of this PutParameterRequest.
        :param allowed_pattern: The allowed_pattern of this PutParameterRequest.
        :param tags: The tags of this PutParameterRequest.
        :param tier: The tier of this PutParameterRequest.
        :param policies: The policies of this PutParameterRequest.
        :param data_type: The data_type of this PutParameterRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'value': str,
            'type': ParameterType,
            'key_id': str,
            'overwrite': bool,
            'allowed_pattern': str,
            'tags': List,
            'tier': ParameterTier,
            'policies': str,
            'data_type': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'value': 'Value',
            'type': 'Type',
            'key_id': 'KeyId',
            'overwrite': 'Overwrite',
            'allowed_pattern': 'AllowedPattern',
            'tags': 'Tags',
            'tier': 'Tier',
            'policies': 'Policies',
            'data_type': 'DataType'
        }

        self._name = name
        self._description = description
        self._value = value
        self._type = type
        self._key_id = key_id
        self._overwrite = overwrite
        self._allowed_pattern = allowed_pattern
        self._tags = tags
        self._tier = tier
        self._policies = policies
        self._data_type = data_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutParameterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutParameterRequest of this PutParameterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PutParameterRequest.


        :return: The name of this PutParameterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutParameterRequest.


        :param name: The name of this PutParameterRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this PutParameterRequest.


        :return: The description of this PutParameterRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutParameterRequest.


        :param description: The description of this PutParameterRequest.
        :type description: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this PutParameterRequest.


        :return: The value of this PutParameterRequest.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PutParameterRequest.


        :param value: The value of this PutParameterRequest.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def type(self):
        """Gets the type of this PutParameterRequest.


        :return: The type of this PutParameterRequest.
        :rtype: ParameterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PutParameterRequest.


        :param type: The type of this PutParameterRequest.
        :type type: ParameterType
        """

        self._type = type

    @property
    def key_id(self):
        """Gets the key_id of this PutParameterRequest.


        :return: The key_id of this PutParameterRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this PutParameterRequest.


        :param key_id: The key_id of this PutParameterRequest.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def overwrite(self):
        """Gets the overwrite of this PutParameterRequest.


        :return: The overwrite of this PutParameterRequest.
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this PutParameterRequest.


        :param overwrite: The overwrite of this PutParameterRequest.
        :type overwrite: bool
        """

        self._overwrite = overwrite

    @property
    def allowed_pattern(self):
        """Gets the allowed_pattern of this PutParameterRequest.


        :return: The allowed_pattern of this PutParameterRequest.
        :rtype: str
        """
        return self._allowed_pattern

    @allowed_pattern.setter
    def allowed_pattern(self, allowed_pattern):
        """Sets the allowed_pattern of this PutParameterRequest.


        :param allowed_pattern: The allowed_pattern of this PutParameterRequest.
        :type allowed_pattern: str
        """

        self._allowed_pattern = allowed_pattern

    @property
    def tags(self):
        """Gets the tags of this PutParameterRequest.


        :return: The tags of this PutParameterRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutParameterRequest.


        :param tags: The tags of this PutParameterRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def tier(self):
        """Gets the tier of this PutParameterRequest.


        :return: The tier of this PutParameterRequest.
        :rtype: ParameterTier
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this PutParameterRequest.


        :param tier: The tier of this PutParameterRequest.
        :type tier: ParameterTier
        """

        self._tier = tier

    @property
    def policies(self):
        """Gets the policies of this PutParameterRequest.


        :return: The policies of this PutParameterRequest.
        :rtype: str
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this PutParameterRequest.


        :param policies: The policies of this PutParameterRequest.
        :type policies: str
        """

        self._policies = policies

    @property
    def data_type(self):
        """Gets the data_type of this PutParameterRequest.


        :return: The data_type of this PutParameterRequest.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this PutParameterRequest.


        :param data_type: The data_type of this PutParameterRequest.
        :type data_type: str
        """

        self._data_type = data_type
