# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryItemSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_name: str=None, version: str=None, attributes: List=None, display_name: str=None):
        """InventoryItemSchema - a model defined in OpenAPI

        :param type_name: The type_name of this InventoryItemSchema.
        :param version: The version of this InventoryItemSchema.
        :param attributes: The attributes of this InventoryItemSchema.
        :param display_name: The display_name of this InventoryItemSchema.
        """
        self.openapi_types = {
            'type_name': str,
            'version': str,
            'attributes': List,
            'display_name': str
        }

        self.attribute_map = {
            'type_name': 'TypeName',
            'version': 'Version',
            'attributes': 'Attributes',
            'display_name': 'DisplayName'
        }

        self._type_name = type_name
        self._version = version
        self._attributes = attributes
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryItemSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryItemSchema of this InventoryItemSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_name(self):
        """Gets the type_name of this InventoryItemSchema.


        :return: The type_name of this InventoryItemSchema.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this InventoryItemSchema.


        :param type_name: The type_name of this InventoryItemSchema.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name

    @property
    def version(self):
        """Gets the version of this InventoryItemSchema.


        :return: The version of this InventoryItemSchema.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InventoryItemSchema.


        :param version: The version of this InventoryItemSchema.
        :type version: str
        """

        self._version = version

    @property
    def attributes(self):
        """Gets the attributes of this InventoryItemSchema.


        :return: The attributes of this InventoryItemSchema.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InventoryItemSchema.


        :param attributes: The attributes of this InventoryItemSchema.
        :type attributes: List
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def display_name(self):
        """Gets the display_name of this InventoryItemSchema.


        :return: The display_name of this InventoryItemSchema.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InventoryItemSchema.


        :param display_name: The display_name of this InventoryItemSchema.
        :type display_name: str
        """

        self._display_name = display_name
