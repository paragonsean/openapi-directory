# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_information_filter_key import InstanceInformationFilterKey
from openapi_server import util


class InstanceInformationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: InstanceInformationFilterKey=None, value_set: List=None):
        """InstanceInformationFilter - a model defined in OpenAPI

        :param key: The key of this InstanceInformationFilter.
        :param value_set: The value_set of this InstanceInformationFilter.
        """
        self.openapi_types = {
            'key': InstanceInformationFilterKey,
            'value_set': List
        }

        self.attribute_map = {
            'key': 'key',
            'value_set': 'valueSet'
        }

        self._key = key
        self._value_set = value_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceInformationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceInformationFilter of this InstanceInformationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this InstanceInformationFilter.


        :return: The key of this InstanceInformationFilter.
        :rtype: InstanceInformationFilterKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InstanceInformationFilter.


        :param key: The key of this InstanceInformationFilter.
        :type key: InstanceInformationFilterKey
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def value_set(self):
        """Gets the value_set of this InstanceInformationFilter.


        :return: The value_set of this InstanceInformationFilter.
        :rtype: List
        """
        return self._value_set

    @value_set.setter
    def value_set(self, value_set):
        """Sets the value_set of this InstanceInformationFilter.


        :param value_set: The value_set of this InstanceInformationFilter.
        :type value_set: List
        """
        if value_set is None:
            raise ValueError("Invalid value for `value_set`, must not be `None`")

        self._value_set = value_set
