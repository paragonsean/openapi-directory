# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_hash_type import AttachmentHashType
from openapi_server import util


class AttachmentContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, size: int=None, hash: str=None, hash_type: AttachmentHashType=None, url: str=None):
        """AttachmentContent - a model defined in OpenAPI

        :param name: The name of this AttachmentContent.
        :param size: The size of this AttachmentContent.
        :param hash: The hash of this AttachmentContent.
        :param hash_type: The hash_type of this AttachmentContent.
        :param url: The url of this AttachmentContent.
        """
        self.openapi_types = {
            'name': str,
            'size': int,
            'hash': str,
            'hash_type': AttachmentHashType,
            'url': str
        }

        self.attribute_map = {
            'name': 'Name',
            'size': 'Size',
            'hash': 'Hash',
            'hash_type': 'HashType',
            'url': 'Url'
        }

        self._name = name
        self._size = size
        self._hash = hash
        self._hash_type = hash_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachmentContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachmentContent of this AttachmentContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AttachmentContent.


        :return: The name of this AttachmentContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentContent.


        :param name: The name of this AttachmentContent.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this AttachmentContent.


        :return: The size of this AttachmentContent.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AttachmentContent.


        :param size: The size of this AttachmentContent.
        :type size: int
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this AttachmentContent.


        :return: The hash of this AttachmentContent.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this AttachmentContent.


        :param hash: The hash of this AttachmentContent.
        :type hash: str
        """

        self._hash = hash

    @property
    def hash_type(self):
        """Gets the hash_type of this AttachmentContent.


        :return: The hash_type of this AttachmentContent.
        :rtype: AttachmentHashType
        """
        return self._hash_type

    @hash_type.setter
    def hash_type(self, hash_type):
        """Sets the hash_type of this AttachmentContent.


        :param hash_type: The hash_type of this AttachmentContent.
        :type hash_type: AttachmentHashType
        """

        self._hash_type = hash_type

    @property
    def url(self):
        """Gets the url of this AttachmentContent.


        :return: The url of this AttachmentContent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AttachmentContent.


        :param url: The url of this AttachmentContent.
        :type url: str
        """

        self._url = url
