# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Activation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_id: str=None, description: str=None, default_instance_name: str=None, iam_role: str=None, registration_limit: int=None, registrations_count: int=None, expiration_date: datetime=None, expired: bool=None, created_date: datetime=None, tags: List=None):
        """Activation - a model defined in OpenAPI

        :param activation_id: The activation_id of this Activation.
        :param description: The description of this Activation.
        :param default_instance_name: The default_instance_name of this Activation.
        :param iam_role: The iam_role of this Activation.
        :param registration_limit: The registration_limit of this Activation.
        :param registrations_count: The registrations_count of this Activation.
        :param expiration_date: The expiration_date of this Activation.
        :param expired: The expired of this Activation.
        :param created_date: The created_date of this Activation.
        :param tags: The tags of this Activation.
        """
        self.openapi_types = {
            'activation_id': str,
            'description': str,
            'default_instance_name': str,
            'iam_role': str,
            'registration_limit': int,
            'registrations_count': int,
            'expiration_date': datetime,
            'expired': bool,
            'created_date': datetime,
            'tags': List
        }

        self.attribute_map = {
            'activation_id': 'ActivationId',
            'description': 'Description',
            'default_instance_name': 'DefaultInstanceName',
            'iam_role': 'IamRole',
            'registration_limit': 'RegistrationLimit',
            'registrations_count': 'RegistrationsCount',
            'expiration_date': 'ExpirationDate',
            'expired': 'Expired',
            'created_date': 'CreatedDate',
            'tags': 'Tags'
        }

        self._activation_id = activation_id
        self._description = description
        self._default_instance_name = default_instance_name
        self._iam_role = iam_role
        self._registration_limit = registration_limit
        self._registrations_count = registrations_count
        self._expiration_date = expiration_date
        self._expired = expired
        self._created_date = created_date
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activation of this Activation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_id(self):
        """Gets the activation_id of this Activation.


        :return: The activation_id of this Activation.
        :rtype: str
        """
        return self._activation_id

    @activation_id.setter
    def activation_id(self, activation_id):
        """Sets the activation_id of this Activation.


        :param activation_id: The activation_id of this Activation.
        :type activation_id: str
        """

        self._activation_id = activation_id

    @property
    def description(self):
        """Gets the description of this Activation.


        :return: The description of this Activation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Activation.


        :param description: The description of this Activation.
        :type description: str
        """

        self._description = description

    @property
    def default_instance_name(self):
        """Gets the default_instance_name of this Activation.


        :return: The default_instance_name of this Activation.
        :rtype: str
        """
        return self._default_instance_name

    @default_instance_name.setter
    def default_instance_name(self, default_instance_name):
        """Sets the default_instance_name of this Activation.


        :param default_instance_name: The default_instance_name of this Activation.
        :type default_instance_name: str
        """

        self._default_instance_name = default_instance_name

    @property
    def iam_role(self):
        """Gets the iam_role of this Activation.


        :return: The iam_role of this Activation.
        :rtype: str
        """
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        """Sets the iam_role of this Activation.


        :param iam_role: The iam_role of this Activation.
        :type iam_role: str
        """

        self._iam_role = iam_role

    @property
    def registration_limit(self):
        """Gets the registration_limit of this Activation.


        :return: The registration_limit of this Activation.
        :rtype: int
        """
        return self._registration_limit

    @registration_limit.setter
    def registration_limit(self, registration_limit):
        """Sets the registration_limit of this Activation.


        :param registration_limit: The registration_limit of this Activation.
        :type registration_limit: int
        """

        self._registration_limit = registration_limit

    @property
    def registrations_count(self):
        """Gets the registrations_count of this Activation.


        :return: The registrations_count of this Activation.
        :rtype: int
        """
        return self._registrations_count

    @registrations_count.setter
    def registrations_count(self, registrations_count):
        """Sets the registrations_count of this Activation.


        :param registrations_count: The registrations_count of this Activation.
        :type registrations_count: int
        """

        self._registrations_count = registrations_count

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Activation.


        :return: The expiration_date of this Activation.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Activation.


        :param expiration_date: The expiration_date of this Activation.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def expired(self):
        """Gets the expired of this Activation.


        :return: The expired of this Activation.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Activation.


        :param expired: The expired of this Activation.
        :type expired: bool
        """

        self._expired = expired

    @property
    def created_date(self):
        """Gets the created_date of this Activation.


        :return: The created_date of this Activation.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Activation.


        :param created_date: The created_date of this Activation.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def tags(self):
        """Gets the tags of this Activation.


        :return: The tags of this Activation.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Activation.


        :param tags: The tags of this Activation.
        :type tags: List
        """

        self._tags = tags
