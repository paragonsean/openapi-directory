# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeletePatchBaselineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baseline_id: str=None):
        """DeletePatchBaselineRequest - a model defined in OpenAPI

        :param baseline_id: The baseline_id of this DeletePatchBaselineRequest.
        """
        self.openapi_types = {
            'baseline_id': str
        }

        self.attribute_map = {
            'baseline_id': 'BaselineId'
        }

        self._baseline_id = baseline_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePatchBaselineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePatchBaselineRequest of this DeletePatchBaselineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baseline_id(self):
        """Gets the baseline_id of this DeletePatchBaselineRequest.


        :return: The baseline_id of this DeletePatchBaselineRequest.
        :rtype: str
        """
        return self._baseline_id

    @baseline_id.setter
    def baseline_id(self, baseline_id):
        """Sets the baseline_id of this DeletePatchBaselineRequest.


        :param baseline_id: The baseline_id of this DeletePatchBaselineRequest.
        :type baseline_id: str
        """
        if baseline_id is None:
            raise ValueError("Invalid value for `baseline_id`, must not be `None`")

        self._baseline_id = baseline_id
