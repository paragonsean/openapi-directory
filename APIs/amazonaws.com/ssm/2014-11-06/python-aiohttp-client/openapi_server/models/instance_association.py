# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_id: str=None, instance_id: str=None, content: str=None, association_version: str=None):
        """InstanceAssociation - a model defined in OpenAPI

        :param association_id: The association_id of this InstanceAssociation.
        :param instance_id: The instance_id of this InstanceAssociation.
        :param content: The content of this InstanceAssociation.
        :param association_version: The association_version of this InstanceAssociation.
        """
        self.openapi_types = {
            'association_id': str,
            'instance_id': str,
            'content': str,
            'association_version': str
        }

        self.attribute_map = {
            'association_id': 'AssociationId',
            'instance_id': 'InstanceId',
            'content': 'Content',
            'association_version': 'AssociationVersion'
        }

        self._association_id = association_id
        self._instance_id = instance_id
        self._content = content
        self._association_version = association_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceAssociation of this InstanceAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_id(self):
        """Gets the association_id of this InstanceAssociation.


        :return: The association_id of this InstanceAssociation.
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this InstanceAssociation.


        :param association_id: The association_id of this InstanceAssociation.
        :type association_id: str
        """

        self._association_id = association_id

    @property
    def instance_id(self):
        """Gets the instance_id of this InstanceAssociation.


        :return: The instance_id of this InstanceAssociation.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this InstanceAssociation.


        :param instance_id: The instance_id of this InstanceAssociation.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def content(self):
        """Gets the content of this InstanceAssociation.


        :return: The content of this InstanceAssociation.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InstanceAssociation.


        :param content: The content of this InstanceAssociation.
        :type content: str
        """

        self._content = content

    @property
    def association_version(self):
        """Gets the association_version of this InstanceAssociation.


        :return: The association_version of this InstanceAssociation.
        :rtype: str
        """
        return self._association_version

    @association_version.setter
    def association_version(self, association_version):
        """Sets the association_version of this InstanceAssociation.


        :param association_version: The association_version of this InstanceAssociation.
        :type association_version: str
        """

        self._association_version = association_version
