# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetParametersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, names: List=None, with_decryption: bool=None):
        """GetParametersRequest - a model defined in OpenAPI

        :param names: The names of this GetParametersRequest.
        :param with_decryption: The with_decryption of this GetParametersRequest.
        """
        self.openapi_types = {
            'names': List,
            'with_decryption': bool
        }

        self.attribute_map = {
            'names': 'Names',
            'with_decryption': 'WithDecryption'
        }

        self._names = names
        self._with_decryption = with_decryption

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetParametersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetParametersRequest of this GetParametersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def names(self):
        """Gets the names of this GetParametersRequest.


        :return: The names of this GetParametersRequest.
        :rtype: List
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this GetParametersRequest.


        :param names: The names of this GetParametersRequest.
        :type names: List
        """
        if names is None:
            raise ValueError("Invalid value for `names`, must not be `None`")

        self._names = names

    @property
    def with_decryption(self):
        """Gets the with_decryption of this GetParametersRequest.


        :return: The with_decryption of this GetParametersRequest.
        :rtype: bool
        """
        return self._with_decryption

    @with_decryption.setter
    def with_decryption(self, with_decryption):
        """Sets the with_decryption of this GetParametersRequest.


        :param with_decryption: The with_decryption of this GetParametersRequest.
        :type with_decryption: bool
        """

        self._with_decryption = with_decryption
