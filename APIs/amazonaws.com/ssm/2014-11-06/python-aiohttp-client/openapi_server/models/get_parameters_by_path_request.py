# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetParametersByPathRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, recursive: bool=None, parameter_filters: List=None, with_decryption: bool=None, max_results: int=None, next_token: str=None):
        """GetParametersByPathRequest - a model defined in OpenAPI

        :param path: The path of this GetParametersByPathRequest.
        :param recursive: The recursive of this GetParametersByPathRequest.
        :param parameter_filters: The parameter_filters of this GetParametersByPathRequest.
        :param with_decryption: The with_decryption of this GetParametersByPathRequest.
        :param max_results: The max_results of this GetParametersByPathRequest.
        :param next_token: The next_token of this GetParametersByPathRequest.
        """
        self.openapi_types = {
            'path': str,
            'recursive': bool,
            'parameter_filters': List,
            'with_decryption': bool,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'path': 'Path',
            'recursive': 'Recursive',
            'parameter_filters': 'ParameterFilters',
            'with_decryption': 'WithDecryption',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._path = path
        self._recursive = recursive
        self._parameter_filters = parameter_filters
        self._with_decryption = with_decryption
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetParametersByPathRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetParametersByPathRequest of this GetParametersByPathRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this GetParametersByPathRequest.


        :return: The path of this GetParametersByPathRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GetParametersByPathRequest.


        :param path: The path of this GetParametersByPathRequest.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def recursive(self):
        """Gets the recursive of this GetParametersByPathRequest.


        :return: The recursive of this GetParametersByPathRequest.
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this GetParametersByPathRequest.


        :param recursive: The recursive of this GetParametersByPathRequest.
        :type recursive: bool
        """

        self._recursive = recursive

    @property
    def parameter_filters(self):
        """Gets the parameter_filters of this GetParametersByPathRequest.


        :return: The parameter_filters of this GetParametersByPathRequest.
        :rtype: List
        """
        return self._parameter_filters

    @parameter_filters.setter
    def parameter_filters(self, parameter_filters):
        """Sets the parameter_filters of this GetParametersByPathRequest.


        :param parameter_filters: The parameter_filters of this GetParametersByPathRequest.
        :type parameter_filters: List
        """

        self._parameter_filters = parameter_filters

    @property
    def with_decryption(self):
        """Gets the with_decryption of this GetParametersByPathRequest.


        :return: The with_decryption of this GetParametersByPathRequest.
        :rtype: bool
        """
        return self._with_decryption

    @with_decryption.setter
    def with_decryption(self, with_decryption):
        """Sets the with_decryption of this GetParametersByPathRequest.


        :param with_decryption: The with_decryption of this GetParametersByPathRequest.
        :type with_decryption: bool
        """

        self._with_decryption = with_decryption

    @property
    def max_results(self):
        """Gets the max_results of this GetParametersByPathRequest.


        :return: The max_results of this GetParametersByPathRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetParametersByPathRequest.


        :param max_results: The max_results of this GetParametersByPathRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetParametersByPathRequest.


        :return: The next_token of this GetParametersByPathRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetParametersByPathRequest.


        :param next_token: The next_token of this GetParametersByPathRequest.
        :type next_token: str
        """

        self._next_token = next_token
