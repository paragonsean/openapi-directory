# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_hash_type import DocumentHashType
from openapi_server.models.send_command_request_alarm_configuration import SendCommandRequestAlarmConfiguration
from openapi_server.models.send_command_request_cloud_watch_output_config import SendCommandRequestCloudWatchOutputConfig
from openapi_server.models.send_command_request_notification_config import SendCommandRequestNotificationConfig
from openapi_server import util


class SendCommandRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_ids: List=None, targets: List=None, document_name: str=None, document_version: str=None, document_hash: str=None, document_hash_type: DocumentHashType=None, timeout_seconds: int=None, comment: str=None, parameters: Dict=None, output_s3_region: str=None, output_s3_bucket_name: str=None, output_s3_key_prefix: str=None, max_concurrency: str=None, max_errors: str=None, service_role_arn: str=None, notification_config: SendCommandRequestNotificationConfig=None, cloud_watch_output_config: SendCommandRequestCloudWatchOutputConfig=None, alarm_configuration: SendCommandRequestAlarmConfiguration=None):
        """SendCommandRequest - a model defined in OpenAPI

        :param instance_ids: The instance_ids of this SendCommandRequest.
        :param targets: The targets of this SendCommandRequest.
        :param document_name: The document_name of this SendCommandRequest.
        :param document_version: The document_version of this SendCommandRequest.
        :param document_hash: The document_hash of this SendCommandRequest.
        :param document_hash_type: The document_hash_type of this SendCommandRequest.
        :param timeout_seconds: The timeout_seconds of this SendCommandRequest.
        :param comment: The comment of this SendCommandRequest.
        :param parameters: The parameters of this SendCommandRequest.
        :param output_s3_region: The output_s3_region of this SendCommandRequest.
        :param output_s3_bucket_name: The output_s3_bucket_name of this SendCommandRequest.
        :param output_s3_key_prefix: The output_s3_key_prefix of this SendCommandRequest.
        :param max_concurrency: The max_concurrency of this SendCommandRequest.
        :param max_errors: The max_errors of this SendCommandRequest.
        :param service_role_arn: The service_role_arn of this SendCommandRequest.
        :param notification_config: The notification_config of this SendCommandRequest.
        :param cloud_watch_output_config: The cloud_watch_output_config of this SendCommandRequest.
        :param alarm_configuration: The alarm_configuration of this SendCommandRequest.
        """
        self.openapi_types = {
            'instance_ids': List,
            'targets': List,
            'document_name': str,
            'document_version': str,
            'document_hash': str,
            'document_hash_type': DocumentHashType,
            'timeout_seconds': int,
            'comment': str,
            'parameters': Dict,
            'output_s3_region': str,
            'output_s3_bucket_name': str,
            'output_s3_key_prefix': str,
            'max_concurrency': str,
            'max_errors': str,
            'service_role_arn': str,
            'notification_config': SendCommandRequestNotificationConfig,
            'cloud_watch_output_config': SendCommandRequestCloudWatchOutputConfig,
            'alarm_configuration': SendCommandRequestAlarmConfiguration
        }

        self.attribute_map = {
            'instance_ids': 'InstanceIds',
            'targets': 'Targets',
            'document_name': 'DocumentName',
            'document_version': 'DocumentVersion',
            'document_hash': 'DocumentHash',
            'document_hash_type': 'DocumentHashType',
            'timeout_seconds': 'TimeoutSeconds',
            'comment': 'Comment',
            'parameters': 'Parameters',
            'output_s3_region': 'OutputS3Region',
            'output_s3_bucket_name': 'OutputS3BucketName',
            'output_s3_key_prefix': 'OutputS3KeyPrefix',
            'max_concurrency': 'MaxConcurrency',
            'max_errors': 'MaxErrors',
            'service_role_arn': 'ServiceRoleArn',
            'notification_config': 'NotificationConfig',
            'cloud_watch_output_config': 'CloudWatchOutputConfig',
            'alarm_configuration': 'AlarmConfiguration'
        }

        self._instance_ids = instance_ids
        self._targets = targets
        self._document_name = document_name
        self._document_version = document_version
        self._document_hash = document_hash
        self._document_hash_type = document_hash_type
        self._timeout_seconds = timeout_seconds
        self._comment = comment
        self._parameters = parameters
        self._output_s3_region = output_s3_region
        self._output_s3_bucket_name = output_s3_bucket_name
        self._output_s3_key_prefix = output_s3_key_prefix
        self._max_concurrency = max_concurrency
        self._max_errors = max_errors
        self._service_role_arn = service_role_arn
        self._notification_config = notification_config
        self._cloud_watch_output_config = cloud_watch_output_config
        self._alarm_configuration = alarm_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendCommandRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendCommandRequest of this SendCommandRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_ids(self):
        """Gets the instance_ids of this SendCommandRequest.


        :return: The instance_ids of this SendCommandRequest.
        :rtype: List
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this SendCommandRequest.


        :param instance_ids: The instance_ids of this SendCommandRequest.
        :type instance_ids: List
        """

        self._instance_ids = instance_ids

    @property
    def targets(self):
        """Gets the targets of this SendCommandRequest.


        :return: The targets of this SendCommandRequest.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this SendCommandRequest.


        :param targets: The targets of this SendCommandRequest.
        :type targets: List
        """

        self._targets = targets

    @property
    def document_name(self):
        """Gets the document_name of this SendCommandRequest.


        :return: The document_name of this SendCommandRequest.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this SendCommandRequest.


        :param document_name: The document_name of this SendCommandRequest.
        :type document_name: str
        """
        if document_name is None:
            raise ValueError("Invalid value for `document_name`, must not be `None`")

        self._document_name = document_name

    @property
    def document_version(self):
        """Gets the document_version of this SendCommandRequest.


        :return: The document_version of this SendCommandRequest.
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this SendCommandRequest.


        :param document_version: The document_version of this SendCommandRequest.
        :type document_version: str
        """

        self._document_version = document_version

    @property
    def document_hash(self):
        """Gets the document_hash of this SendCommandRequest.


        :return: The document_hash of this SendCommandRequest.
        :rtype: str
        """
        return self._document_hash

    @document_hash.setter
    def document_hash(self, document_hash):
        """Sets the document_hash of this SendCommandRequest.


        :param document_hash: The document_hash of this SendCommandRequest.
        :type document_hash: str
        """

        self._document_hash = document_hash

    @property
    def document_hash_type(self):
        """Gets the document_hash_type of this SendCommandRequest.


        :return: The document_hash_type of this SendCommandRequest.
        :rtype: DocumentHashType
        """
        return self._document_hash_type

    @document_hash_type.setter
    def document_hash_type(self, document_hash_type):
        """Sets the document_hash_type of this SendCommandRequest.


        :param document_hash_type: The document_hash_type of this SendCommandRequest.
        :type document_hash_type: DocumentHashType
        """

        self._document_hash_type = document_hash_type

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this SendCommandRequest.


        :return: The timeout_seconds of this SendCommandRequest.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this SendCommandRequest.


        :param timeout_seconds: The timeout_seconds of this SendCommandRequest.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def comment(self):
        """Gets the comment of this SendCommandRequest.


        :return: The comment of this SendCommandRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SendCommandRequest.


        :param comment: The comment of this SendCommandRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def parameters(self):
        """Gets the parameters of this SendCommandRequest.


        :return: The parameters of this SendCommandRequest.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SendCommandRequest.


        :param parameters: The parameters of this SendCommandRequest.
        :type parameters: Dict
        """

        self._parameters = parameters

    @property
    def output_s3_region(self):
        """Gets the output_s3_region of this SendCommandRequest.


        :return: The output_s3_region of this SendCommandRequest.
        :rtype: str
        """
        return self._output_s3_region

    @output_s3_region.setter
    def output_s3_region(self, output_s3_region):
        """Sets the output_s3_region of this SendCommandRequest.


        :param output_s3_region: The output_s3_region of this SendCommandRequest.
        :type output_s3_region: str
        """

        self._output_s3_region = output_s3_region

    @property
    def output_s3_bucket_name(self):
        """Gets the output_s3_bucket_name of this SendCommandRequest.


        :return: The output_s3_bucket_name of this SendCommandRequest.
        :rtype: str
        """
        return self._output_s3_bucket_name

    @output_s3_bucket_name.setter
    def output_s3_bucket_name(self, output_s3_bucket_name):
        """Sets the output_s3_bucket_name of this SendCommandRequest.


        :param output_s3_bucket_name: The output_s3_bucket_name of this SendCommandRequest.
        :type output_s3_bucket_name: str
        """

        self._output_s3_bucket_name = output_s3_bucket_name

    @property
    def output_s3_key_prefix(self):
        """Gets the output_s3_key_prefix of this SendCommandRequest.


        :return: The output_s3_key_prefix of this SendCommandRequest.
        :rtype: str
        """
        return self._output_s3_key_prefix

    @output_s3_key_prefix.setter
    def output_s3_key_prefix(self, output_s3_key_prefix):
        """Sets the output_s3_key_prefix of this SendCommandRequest.


        :param output_s3_key_prefix: The output_s3_key_prefix of this SendCommandRequest.
        :type output_s3_key_prefix: str
        """

        self._output_s3_key_prefix = output_s3_key_prefix

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this SendCommandRequest.


        :return: The max_concurrency of this SendCommandRequest.
        :rtype: str
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this SendCommandRequest.


        :param max_concurrency: The max_concurrency of this SendCommandRequest.
        :type max_concurrency: str
        """

        self._max_concurrency = max_concurrency

    @property
    def max_errors(self):
        """Gets the max_errors of this SendCommandRequest.


        :return: The max_errors of this SendCommandRequest.
        :rtype: str
        """
        return self._max_errors

    @max_errors.setter
    def max_errors(self, max_errors):
        """Sets the max_errors of this SendCommandRequest.


        :param max_errors: The max_errors of this SendCommandRequest.
        :type max_errors: str
        """

        self._max_errors = max_errors

    @property
    def service_role_arn(self):
        """Gets the service_role_arn of this SendCommandRequest.


        :return: The service_role_arn of this SendCommandRequest.
        :rtype: str
        """
        return self._service_role_arn

    @service_role_arn.setter
    def service_role_arn(self, service_role_arn):
        """Sets the service_role_arn of this SendCommandRequest.


        :param service_role_arn: The service_role_arn of this SendCommandRequest.
        :type service_role_arn: str
        """

        self._service_role_arn = service_role_arn

    @property
    def notification_config(self):
        """Gets the notification_config of this SendCommandRequest.


        :return: The notification_config of this SendCommandRequest.
        :rtype: SendCommandRequestNotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this SendCommandRequest.


        :param notification_config: The notification_config of this SendCommandRequest.
        :type notification_config: SendCommandRequestNotificationConfig
        """

        self._notification_config = notification_config

    @property
    def cloud_watch_output_config(self):
        """Gets the cloud_watch_output_config of this SendCommandRequest.


        :return: The cloud_watch_output_config of this SendCommandRequest.
        :rtype: SendCommandRequestCloudWatchOutputConfig
        """
        return self._cloud_watch_output_config

    @cloud_watch_output_config.setter
    def cloud_watch_output_config(self, cloud_watch_output_config):
        """Sets the cloud_watch_output_config of this SendCommandRequest.


        :param cloud_watch_output_config: The cloud_watch_output_config of this SendCommandRequest.
        :type cloud_watch_output_config: SendCommandRequestCloudWatchOutputConfig
        """

        self._cloud_watch_output_config = cloud_watch_output_config

    @property
    def alarm_configuration(self):
        """Gets the alarm_configuration of this SendCommandRequest.


        :return: The alarm_configuration of this SendCommandRequest.
        :rtype: SendCommandRequestAlarmConfiguration
        """
        return self._alarm_configuration

    @alarm_configuration.setter
    def alarm_configuration(self, alarm_configuration):
        """Sets the alarm_configuration of this SendCommandRequest.


        :param alarm_configuration: The alarm_configuration of this SendCommandRequest.
        :type alarm_configuration: SendCommandRequestAlarmConfiguration
        """

        self._alarm_configuration = alarm_configuration
