# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_format import DocumentFormat
from openapi_server import util


class UpdateDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, attachments: List=None, name: str=None, display_name: str=None, version_name: str=None, document_version: str=None, document_format: DocumentFormat=None, target_type: str=None):
        """UpdateDocumentRequest - a model defined in OpenAPI

        :param content: The content of this UpdateDocumentRequest.
        :param attachments: The attachments of this UpdateDocumentRequest.
        :param name: The name of this UpdateDocumentRequest.
        :param display_name: The display_name of this UpdateDocumentRequest.
        :param version_name: The version_name of this UpdateDocumentRequest.
        :param document_version: The document_version of this UpdateDocumentRequest.
        :param document_format: The document_format of this UpdateDocumentRequest.
        :param target_type: The target_type of this UpdateDocumentRequest.
        """
        self.openapi_types = {
            'content': str,
            'attachments': List,
            'name': str,
            'display_name': str,
            'version_name': str,
            'document_version': str,
            'document_format': DocumentFormat,
            'target_type': str
        }

        self.attribute_map = {
            'content': 'Content',
            'attachments': 'Attachments',
            'name': 'Name',
            'display_name': 'DisplayName',
            'version_name': 'VersionName',
            'document_version': 'DocumentVersion',
            'document_format': 'DocumentFormat',
            'target_type': 'TargetType'
        }

        self._content = content
        self._attachments = attachments
        self._name = name
        self._display_name = display_name
        self._version_name = version_name
        self._document_version = document_version
        self._document_format = document_format
        self._target_type = target_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDocumentRequest of this UpdateDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this UpdateDocumentRequest.


        :return: The content of this UpdateDocumentRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this UpdateDocumentRequest.


        :param content: The content of this UpdateDocumentRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def attachments(self):
        """Gets the attachments of this UpdateDocumentRequest.


        :return: The attachments of this UpdateDocumentRequest.
        :rtype: List
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this UpdateDocumentRequest.


        :param attachments: The attachments of this UpdateDocumentRequest.
        :type attachments: List
        """

        self._attachments = attachments

    @property
    def name(self):
        """Gets the name of this UpdateDocumentRequest.


        :return: The name of this UpdateDocumentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateDocumentRequest.


        :param name: The name of this UpdateDocumentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this UpdateDocumentRequest.


        :return: The display_name of this UpdateDocumentRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateDocumentRequest.


        :param display_name: The display_name of this UpdateDocumentRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def version_name(self):
        """Gets the version_name of this UpdateDocumentRequest.


        :return: The version_name of this UpdateDocumentRequest.
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this UpdateDocumentRequest.


        :param version_name: The version_name of this UpdateDocumentRequest.
        :type version_name: str
        """

        self._version_name = version_name

    @property
    def document_version(self):
        """Gets the document_version of this UpdateDocumentRequest.


        :return: The document_version of this UpdateDocumentRequest.
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this UpdateDocumentRequest.


        :param document_version: The document_version of this UpdateDocumentRequest.
        :type document_version: str
        """

        self._document_version = document_version

    @property
    def document_format(self):
        """Gets the document_format of this UpdateDocumentRequest.


        :return: The document_format of this UpdateDocumentRequest.
        :rtype: DocumentFormat
        """
        return self._document_format

    @document_format.setter
    def document_format(self, document_format):
        """Sets the document_format of this UpdateDocumentRequest.


        :param document_format: The document_format of this UpdateDocumentRequest.
        :type document_format: DocumentFormat
        """

        self._document_format = document_format

    @property
    def target_type(self):
        """Gets the target_type of this UpdateDocumentRequest.


        :return: The target_type of this UpdateDocumentRequest.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this UpdateDocumentRequest.


        :param target_type: The target_type of this UpdateDocumentRequest.
        :type target_type: str
        """

        self._target_type = target_type
