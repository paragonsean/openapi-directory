# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_review_action import DocumentReviewAction
from openapi_server import util


class UpdateDocumentMetadataRequestDocumentReviews(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: DocumentReviewAction=None, comment: List=None):
        """UpdateDocumentMetadataRequestDocumentReviews - a model defined in OpenAPI

        :param action: The action of this UpdateDocumentMetadataRequestDocumentReviews.
        :param comment: The comment of this UpdateDocumentMetadataRequestDocumentReviews.
        """
        self.openapi_types = {
            'action': DocumentReviewAction,
            'comment': List
        }

        self.attribute_map = {
            'action': 'Action',
            'comment': 'Comment'
        }

        self._action = action
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDocumentMetadataRequestDocumentReviews':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDocumentMetadataRequest_DocumentReviews of this UpdateDocumentMetadataRequestDocumentReviews.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this UpdateDocumentMetadataRequestDocumentReviews.


        :return: The action of this UpdateDocumentMetadataRequestDocumentReviews.
        :rtype: DocumentReviewAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateDocumentMetadataRequestDocumentReviews.


        :param action: The action of this UpdateDocumentMetadataRequestDocumentReviews.
        :type action: DocumentReviewAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def comment(self):
        """Gets the comment of this UpdateDocumentMetadataRequestDocumentReviews.


        :return: The comment of this UpdateDocumentMetadataRequestDocumentReviews.
        :rtype: List
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateDocumentMetadataRequestDocumentReviews.


        :param comment: The comment of this UpdateDocumentMetadataRequestDocumentReviews.
        :type comment: List
        """

        self._comment = comment
