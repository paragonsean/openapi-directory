# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_operation_type import PatchOperationType
from openapi_server.models.reboot_option import RebootOption
from openapi_server import util


class InstancePatchState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, patch_group: str=None, baseline_id: str=None, snapshot_id: str=None, install_override_list: str=None, owner_information: str=None, installed_count: int=None, installed_other_count: int=None, installed_pending_reboot_count: int=None, installed_rejected_count: int=None, missing_count: int=None, failed_count: int=None, unreported_not_applicable_count: int=None, not_applicable_count: int=None, operation_start_time: datetime=None, operation_end_time: datetime=None, operation: PatchOperationType=None, last_no_reboot_install_operation_time: datetime=None, reboot_option: RebootOption=None, critical_non_compliant_count: int=None, security_non_compliant_count: int=None, other_non_compliant_count: int=None):
        """InstancePatchState - a model defined in OpenAPI

        :param instance_id: The instance_id of this InstancePatchState.
        :param patch_group: The patch_group of this InstancePatchState.
        :param baseline_id: The baseline_id of this InstancePatchState.
        :param snapshot_id: The snapshot_id of this InstancePatchState.
        :param install_override_list: The install_override_list of this InstancePatchState.
        :param owner_information: The owner_information of this InstancePatchState.
        :param installed_count: The installed_count of this InstancePatchState.
        :param installed_other_count: The installed_other_count of this InstancePatchState.
        :param installed_pending_reboot_count: The installed_pending_reboot_count of this InstancePatchState.
        :param installed_rejected_count: The installed_rejected_count of this InstancePatchState.
        :param missing_count: The missing_count of this InstancePatchState.
        :param failed_count: The failed_count of this InstancePatchState.
        :param unreported_not_applicable_count: The unreported_not_applicable_count of this InstancePatchState.
        :param not_applicable_count: The not_applicable_count of this InstancePatchState.
        :param operation_start_time: The operation_start_time of this InstancePatchState.
        :param operation_end_time: The operation_end_time of this InstancePatchState.
        :param operation: The operation of this InstancePatchState.
        :param last_no_reboot_install_operation_time: The last_no_reboot_install_operation_time of this InstancePatchState.
        :param reboot_option: The reboot_option of this InstancePatchState.
        :param critical_non_compliant_count: The critical_non_compliant_count of this InstancePatchState.
        :param security_non_compliant_count: The security_non_compliant_count of this InstancePatchState.
        :param other_non_compliant_count: The other_non_compliant_count of this InstancePatchState.
        """
        self.openapi_types = {
            'instance_id': str,
            'patch_group': str,
            'baseline_id': str,
            'snapshot_id': str,
            'install_override_list': str,
            'owner_information': str,
            'installed_count': int,
            'installed_other_count': int,
            'installed_pending_reboot_count': int,
            'installed_rejected_count': int,
            'missing_count': int,
            'failed_count': int,
            'unreported_not_applicable_count': int,
            'not_applicable_count': int,
            'operation_start_time': datetime,
            'operation_end_time': datetime,
            'operation': PatchOperationType,
            'last_no_reboot_install_operation_time': datetime,
            'reboot_option': RebootOption,
            'critical_non_compliant_count': int,
            'security_non_compliant_count': int,
            'other_non_compliant_count': int
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'patch_group': 'PatchGroup',
            'baseline_id': 'BaselineId',
            'snapshot_id': 'SnapshotId',
            'install_override_list': 'InstallOverrideList',
            'owner_information': 'OwnerInformation',
            'installed_count': 'InstalledCount',
            'installed_other_count': 'InstalledOtherCount',
            'installed_pending_reboot_count': 'InstalledPendingRebootCount',
            'installed_rejected_count': 'InstalledRejectedCount',
            'missing_count': 'MissingCount',
            'failed_count': 'FailedCount',
            'unreported_not_applicable_count': 'UnreportedNotApplicableCount',
            'not_applicable_count': 'NotApplicableCount',
            'operation_start_time': 'OperationStartTime',
            'operation_end_time': 'OperationEndTime',
            'operation': 'Operation',
            'last_no_reboot_install_operation_time': 'LastNoRebootInstallOperationTime',
            'reboot_option': 'RebootOption',
            'critical_non_compliant_count': 'CriticalNonCompliantCount',
            'security_non_compliant_count': 'SecurityNonCompliantCount',
            'other_non_compliant_count': 'OtherNonCompliantCount'
        }

        self._instance_id = instance_id
        self._patch_group = patch_group
        self._baseline_id = baseline_id
        self._snapshot_id = snapshot_id
        self._install_override_list = install_override_list
        self._owner_information = owner_information
        self._installed_count = installed_count
        self._installed_other_count = installed_other_count
        self._installed_pending_reboot_count = installed_pending_reboot_count
        self._installed_rejected_count = installed_rejected_count
        self._missing_count = missing_count
        self._failed_count = failed_count
        self._unreported_not_applicable_count = unreported_not_applicable_count
        self._not_applicable_count = not_applicable_count
        self._operation_start_time = operation_start_time
        self._operation_end_time = operation_end_time
        self._operation = operation
        self._last_no_reboot_install_operation_time = last_no_reboot_install_operation_time
        self._reboot_option = reboot_option
        self._critical_non_compliant_count = critical_non_compliant_count
        self._security_non_compliant_count = security_non_compliant_count
        self._other_non_compliant_count = other_non_compliant_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancePatchState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancePatchState of this InstancePatchState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this InstancePatchState.


        :return: The instance_id of this InstancePatchState.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this InstancePatchState.


        :param instance_id: The instance_id of this InstancePatchState.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def patch_group(self):
        """Gets the patch_group of this InstancePatchState.


        :return: The patch_group of this InstancePatchState.
        :rtype: str
        """
        return self._patch_group

    @patch_group.setter
    def patch_group(self, patch_group):
        """Sets the patch_group of this InstancePatchState.


        :param patch_group: The patch_group of this InstancePatchState.
        :type patch_group: str
        """
        if patch_group is None:
            raise ValueError("Invalid value for `patch_group`, must not be `None`")

        self._patch_group = patch_group

    @property
    def baseline_id(self):
        """Gets the baseline_id of this InstancePatchState.


        :return: The baseline_id of this InstancePatchState.
        :rtype: str
        """
        return self._baseline_id

    @baseline_id.setter
    def baseline_id(self, baseline_id):
        """Sets the baseline_id of this InstancePatchState.


        :param baseline_id: The baseline_id of this InstancePatchState.
        :type baseline_id: str
        """
        if baseline_id is None:
            raise ValueError("Invalid value for `baseline_id`, must not be `None`")

        self._baseline_id = baseline_id

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this InstancePatchState.


        :return: The snapshot_id of this InstancePatchState.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this InstancePatchState.


        :param snapshot_id: The snapshot_id of this InstancePatchState.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def install_override_list(self):
        """Gets the install_override_list of this InstancePatchState.


        :return: The install_override_list of this InstancePatchState.
        :rtype: str
        """
        return self._install_override_list

    @install_override_list.setter
    def install_override_list(self, install_override_list):
        """Sets the install_override_list of this InstancePatchState.


        :param install_override_list: The install_override_list of this InstancePatchState.
        :type install_override_list: str
        """

        self._install_override_list = install_override_list

    @property
    def owner_information(self):
        """Gets the owner_information of this InstancePatchState.


        :return: The owner_information of this InstancePatchState.
        :rtype: str
        """
        return self._owner_information

    @owner_information.setter
    def owner_information(self, owner_information):
        """Sets the owner_information of this InstancePatchState.


        :param owner_information: The owner_information of this InstancePatchState.
        :type owner_information: str
        """

        self._owner_information = owner_information

    @property
    def installed_count(self):
        """Gets the installed_count of this InstancePatchState.


        :return: The installed_count of this InstancePatchState.
        :rtype: int
        """
        return self._installed_count

    @installed_count.setter
    def installed_count(self, installed_count):
        """Sets the installed_count of this InstancePatchState.


        :param installed_count: The installed_count of this InstancePatchState.
        :type installed_count: int
        """

        self._installed_count = installed_count

    @property
    def installed_other_count(self):
        """Gets the installed_other_count of this InstancePatchState.


        :return: The installed_other_count of this InstancePatchState.
        :rtype: int
        """
        return self._installed_other_count

    @installed_other_count.setter
    def installed_other_count(self, installed_other_count):
        """Sets the installed_other_count of this InstancePatchState.


        :param installed_other_count: The installed_other_count of this InstancePatchState.
        :type installed_other_count: int
        """

        self._installed_other_count = installed_other_count

    @property
    def installed_pending_reboot_count(self):
        """Gets the installed_pending_reboot_count of this InstancePatchState.


        :return: The installed_pending_reboot_count of this InstancePatchState.
        :rtype: int
        """
        return self._installed_pending_reboot_count

    @installed_pending_reboot_count.setter
    def installed_pending_reboot_count(self, installed_pending_reboot_count):
        """Sets the installed_pending_reboot_count of this InstancePatchState.


        :param installed_pending_reboot_count: The installed_pending_reboot_count of this InstancePatchState.
        :type installed_pending_reboot_count: int
        """

        self._installed_pending_reboot_count = installed_pending_reboot_count

    @property
    def installed_rejected_count(self):
        """Gets the installed_rejected_count of this InstancePatchState.


        :return: The installed_rejected_count of this InstancePatchState.
        :rtype: int
        """
        return self._installed_rejected_count

    @installed_rejected_count.setter
    def installed_rejected_count(self, installed_rejected_count):
        """Sets the installed_rejected_count of this InstancePatchState.


        :param installed_rejected_count: The installed_rejected_count of this InstancePatchState.
        :type installed_rejected_count: int
        """

        self._installed_rejected_count = installed_rejected_count

    @property
    def missing_count(self):
        """Gets the missing_count of this InstancePatchState.


        :return: The missing_count of this InstancePatchState.
        :rtype: int
        """
        return self._missing_count

    @missing_count.setter
    def missing_count(self, missing_count):
        """Sets the missing_count of this InstancePatchState.


        :param missing_count: The missing_count of this InstancePatchState.
        :type missing_count: int
        """

        self._missing_count = missing_count

    @property
    def failed_count(self):
        """Gets the failed_count of this InstancePatchState.


        :return: The failed_count of this InstancePatchState.
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this InstancePatchState.


        :param failed_count: The failed_count of this InstancePatchState.
        :type failed_count: int
        """

        self._failed_count = failed_count

    @property
    def unreported_not_applicable_count(self):
        """Gets the unreported_not_applicable_count of this InstancePatchState.


        :return: The unreported_not_applicable_count of this InstancePatchState.
        :rtype: int
        """
        return self._unreported_not_applicable_count

    @unreported_not_applicable_count.setter
    def unreported_not_applicable_count(self, unreported_not_applicable_count):
        """Sets the unreported_not_applicable_count of this InstancePatchState.


        :param unreported_not_applicable_count: The unreported_not_applicable_count of this InstancePatchState.
        :type unreported_not_applicable_count: int
        """

        self._unreported_not_applicable_count = unreported_not_applicable_count

    @property
    def not_applicable_count(self):
        """Gets the not_applicable_count of this InstancePatchState.


        :return: The not_applicable_count of this InstancePatchState.
        :rtype: int
        """
        return self._not_applicable_count

    @not_applicable_count.setter
    def not_applicable_count(self, not_applicable_count):
        """Sets the not_applicable_count of this InstancePatchState.


        :param not_applicable_count: The not_applicable_count of this InstancePatchState.
        :type not_applicable_count: int
        """

        self._not_applicable_count = not_applicable_count

    @property
    def operation_start_time(self):
        """Gets the operation_start_time of this InstancePatchState.


        :return: The operation_start_time of this InstancePatchState.
        :rtype: datetime
        """
        return self._operation_start_time

    @operation_start_time.setter
    def operation_start_time(self, operation_start_time):
        """Sets the operation_start_time of this InstancePatchState.


        :param operation_start_time: The operation_start_time of this InstancePatchState.
        :type operation_start_time: datetime
        """
        if operation_start_time is None:
            raise ValueError("Invalid value for `operation_start_time`, must not be `None`")

        self._operation_start_time = operation_start_time

    @property
    def operation_end_time(self):
        """Gets the operation_end_time of this InstancePatchState.


        :return: The operation_end_time of this InstancePatchState.
        :rtype: datetime
        """
        return self._operation_end_time

    @operation_end_time.setter
    def operation_end_time(self, operation_end_time):
        """Sets the operation_end_time of this InstancePatchState.


        :param operation_end_time: The operation_end_time of this InstancePatchState.
        :type operation_end_time: datetime
        """
        if operation_end_time is None:
            raise ValueError("Invalid value for `operation_end_time`, must not be `None`")

        self._operation_end_time = operation_end_time

    @property
    def operation(self):
        """Gets the operation of this InstancePatchState.


        :return: The operation of this InstancePatchState.
        :rtype: PatchOperationType
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this InstancePatchState.


        :param operation: The operation of this InstancePatchState.
        :type operation: PatchOperationType
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def last_no_reboot_install_operation_time(self):
        """Gets the last_no_reboot_install_operation_time of this InstancePatchState.


        :return: The last_no_reboot_install_operation_time of this InstancePatchState.
        :rtype: datetime
        """
        return self._last_no_reboot_install_operation_time

    @last_no_reboot_install_operation_time.setter
    def last_no_reboot_install_operation_time(self, last_no_reboot_install_operation_time):
        """Sets the last_no_reboot_install_operation_time of this InstancePatchState.


        :param last_no_reboot_install_operation_time: The last_no_reboot_install_operation_time of this InstancePatchState.
        :type last_no_reboot_install_operation_time: datetime
        """

        self._last_no_reboot_install_operation_time = last_no_reboot_install_operation_time

    @property
    def reboot_option(self):
        """Gets the reboot_option of this InstancePatchState.


        :return: The reboot_option of this InstancePatchState.
        :rtype: RebootOption
        """
        return self._reboot_option

    @reboot_option.setter
    def reboot_option(self, reboot_option):
        """Sets the reboot_option of this InstancePatchState.


        :param reboot_option: The reboot_option of this InstancePatchState.
        :type reboot_option: RebootOption
        """

        self._reboot_option = reboot_option

    @property
    def critical_non_compliant_count(self):
        """Gets the critical_non_compliant_count of this InstancePatchState.


        :return: The critical_non_compliant_count of this InstancePatchState.
        :rtype: int
        """
        return self._critical_non_compliant_count

    @critical_non_compliant_count.setter
    def critical_non_compliant_count(self, critical_non_compliant_count):
        """Sets the critical_non_compliant_count of this InstancePatchState.


        :param critical_non_compliant_count: The critical_non_compliant_count of this InstancePatchState.
        :type critical_non_compliant_count: int
        """

        self._critical_non_compliant_count = critical_non_compliant_count

    @property
    def security_non_compliant_count(self):
        """Gets the security_non_compliant_count of this InstancePatchState.


        :return: The security_non_compliant_count of this InstancePatchState.
        :rtype: int
        """
        return self._security_non_compliant_count

    @security_non_compliant_count.setter
    def security_non_compliant_count(self, security_non_compliant_count):
        """Sets the security_non_compliant_count of this InstancePatchState.


        :param security_non_compliant_count: The security_non_compliant_count of this InstancePatchState.
        :type security_non_compliant_count: int
        """

        self._security_non_compliant_count = security_non_compliant_count

    @property
    def other_non_compliant_count(self):
        """Gets the other_non_compliant_count of this InstancePatchState.


        :return: The other_non_compliant_count of this InstancePatchState.
        :rtype: int
        """
        return self._other_non_compliant_count

    @other_non_compliant_count.setter
    def other_non_compliant_count(self, other_non_compliant_count):
        """Sets the other_non_compliant_count of this InstancePatchState.


        :param other_non_compliant_count: The other_non_compliant_count of this InstancePatchState.
        :type other_non_compliant_count: int
        """

        self._other_non_compliant_count = other_non_compliant_count
