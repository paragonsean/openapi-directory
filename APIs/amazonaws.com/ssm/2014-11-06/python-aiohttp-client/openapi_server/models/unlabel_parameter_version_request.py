# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnlabelParameterVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parameter_version: int=None, labels: List=None):
        """UnlabelParameterVersionRequest - a model defined in OpenAPI

        :param name: The name of this UnlabelParameterVersionRequest.
        :param parameter_version: The parameter_version of this UnlabelParameterVersionRequest.
        :param labels: The labels of this UnlabelParameterVersionRequest.
        """
        self.openapi_types = {
            'name': str,
            'parameter_version': int,
            'labels': List
        }

        self.attribute_map = {
            'name': 'Name',
            'parameter_version': 'ParameterVersion',
            'labels': 'Labels'
        }

        self._name = name
        self._parameter_version = parameter_version
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnlabelParameterVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnlabelParameterVersionRequest of this UnlabelParameterVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UnlabelParameterVersionRequest.


        :return: The name of this UnlabelParameterVersionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UnlabelParameterVersionRequest.


        :param name: The name of this UnlabelParameterVersionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameter_version(self):
        """Gets the parameter_version of this UnlabelParameterVersionRequest.


        :return: The parameter_version of this UnlabelParameterVersionRequest.
        :rtype: int
        """
        return self._parameter_version

    @parameter_version.setter
    def parameter_version(self, parameter_version):
        """Sets the parameter_version of this UnlabelParameterVersionRequest.


        :param parameter_version: The parameter_version of this UnlabelParameterVersionRequest.
        :type parameter_version: int
        """
        if parameter_version is None:
            raise ValueError("Invalid value for `parameter_version`, must not be `None`")

        self._parameter_version = parameter_version

    @property
    def labels(self):
        """Gets the labels of this UnlabelParameterVersionRequest.


        :return: The labels of this UnlabelParameterVersionRequest.
        :rtype: List
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this UnlabelParameterVersionRequest.


        :param labels: The labels of this UnlabelParameterVersionRequest.
        :type labels: List
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels
