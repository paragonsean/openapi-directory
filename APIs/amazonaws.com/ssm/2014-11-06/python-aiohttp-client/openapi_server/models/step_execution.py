# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_execution_status import AutomationExecutionStatus
from openapi_server.models.step_execution_failure_details import StepExecutionFailureDetails
from openapi_server.models.step_execution_target_location import StepExecutionTargetLocation
from openapi_server import util


class StepExecution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, step_name: str=None, action: str=None, timeout_seconds: int=None, on_failure: str=None, max_attempts: int=None, execution_start_time: datetime=None, execution_end_time: datetime=None, step_status: AutomationExecutionStatus=None, response_code: str=None, inputs: Dict=None, outputs: Dict=None, response: str=None, failure_message: str=None, failure_details: StepExecutionFailureDetails=None, step_execution_id: str=None, overridden_parameters: Dict=None, is_end: bool=None, next_step: str=None, is_critical: bool=None, valid_next_steps: List=None, targets: List=None, target_location: StepExecutionTargetLocation=None, triggered_alarms: List=None):
        """StepExecution - a model defined in OpenAPI

        :param step_name: The step_name of this StepExecution.
        :param action: The action of this StepExecution.
        :param timeout_seconds: The timeout_seconds of this StepExecution.
        :param on_failure: The on_failure of this StepExecution.
        :param max_attempts: The max_attempts of this StepExecution.
        :param execution_start_time: The execution_start_time of this StepExecution.
        :param execution_end_time: The execution_end_time of this StepExecution.
        :param step_status: The step_status of this StepExecution.
        :param response_code: The response_code of this StepExecution.
        :param inputs: The inputs of this StepExecution.
        :param outputs: The outputs of this StepExecution.
        :param response: The response of this StepExecution.
        :param failure_message: The failure_message of this StepExecution.
        :param failure_details: The failure_details of this StepExecution.
        :param step_execution_id: The step_execution_id of this StepExecution.
        :param overridden_parameters: The overridden_parameters of this StepExecution.
        :param is_end: The is_end of this StepExecution.
        :param next_step: The next_step of this StepExecution.
        :param is_critical: The is_critical of this StepExecution.
        :param valid_next_steps: The valid_next_steps of this StepExecution.
        :param targets: The targets of this StepExecution.
        :param target_location: The target_location of this StepExecution.
        :param triggered_alarms: The triggered_alarms of this StepExecution.
        """
        self.openapi_types = {
            'step_name': str,
            'action': str,
            'timeout_seconds': int,
            'on_failure': str,
            'max_attempts': int,
            'execution_start_time': datetime,
            'execution_end_time': datetime,
            'step_status': AutomationExecutionStatus,
            'response_code': str,
            'inputs': Dict,
            'outputs': Dict,
            'response': str,
            'failure_message': str,
            'failure_details': StepExecutionFailureDetails,
            'step_execution_id': str,
            'overridden_parameters': Dict,
            'is_end': bool,
            'next_step': str,
            'is_critical': bool,
            'valid_next_steps': List,
            'targets': List,
            'target_location': StepExecutionTargetLocation,
            'triggered_alarms': List
        }

        self.attribute_map = {
            'step_name': 'StepName',
            'action': 'Action',
            'timeout_seconds': 'TimeoutSeconds',
            'on_failure': 'OnFailure',
            'max_attempts': 'MaxAttempts',
            'execution_start_time': 'ExecutionStartTime',
            'execution_end_time': 'ExecutionEndTime',
            'step_status': 'StepStatus',
            'response_code': 'ResponseCode',
            'inputs': 'Inputs',
            'outputs': 'Outputs',
            'response': 'Response',
            'failure_message': 'FailureMessage',
            'failure_details': 'FailureDetails',
            'step_execution_id': 'StepExecutionId',
            'overridden_parameters': 'OverriddenParameters',
            'is_end': 'IsEnd',
            'next_step': 'NextStep',
            'is_critical': 'IsCritical',
            'valid_next_steps': 'ValidNextSteps',
            'targets': 'Targets',
            'target_location': 'TargetLocation',
            'triggered_alarms': 'TriggeredAlarms'
        }

        self._step_name = step_name
        self._action = action
        self._timeout_seconds = timeout_seconds
        self._on_failure = on_failure
        self._max_attempts = max_attempts
        self._execution_start_time = execution_start_time
        self._execution_end_time = execution_end_time
        self._step_status = step_status
        self._response_code = response_code
        self._inputs = inputs
        self._outputs = outputs
        self._response = response
        self._failure_message = failure_message
        self._failure_details = failure_details
        self._step_execution_id = step_execution_id
        self._overridden_parameters = overridden_parameters
        self._is_end = is_end
        self._next_step = next_step
        self._is_critical = is_critical
        self._valid_next_steps = valid_next_steps
        self._targets = targets
        self._target_location = target_location
        self._triggered_alarms = triggered_alarms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepExecution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StepExecution of this StepExecution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def step_name(self):
        """Gets the step_name of this StepExecution.


        :return: The step_name of this StepExecution.
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this StepExecution.


        :param step_name: The step_name of this StepExecution.
        :type step_name: str
        """

        self._step_name = step_name

    @property
    def action(self):
        """Gets the action of this StepExecution.


        :return: The action of this StepExecution.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this StepExecution.


        :param action: The action of this StepExecution.
        :type action: str
        """

        self._action = action

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this StepExecution.


        :return: The timeout_seconds of this StepExecution.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this StepExecution.


        :param timeout_seconds: The timeout_seconds of this StepExecution.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def on_failure(self):
        """Gets the on_failure of this StepExecution.


        :return: The on_failure of this StepExecution.
        :rtype: str
        """
        return self._on_failure

    @on_failure.setter
    def on_failure(self, on_failure):
        """Sets the on_failure of this StepExecution.


        :param on_failure: The on_failure of this StepExecution.
        :type on_failure: str
        """

        self._on_failure = on_failure

    @property
    def max_attempts(self):
        """Gets the max_attempts of this StepExecution.


        :return: The max_attempts of this StepExecution.
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this StepExecution.


        :param max_attempts: The max_attempts of this StepExecution.
        :type max_attempts: int
        """

        self._max_attempts = max_attempts

    @property
    def execution_start_time(self):
        """Gets the execution_start_time of this StepExecution.


        :return: The execution_start_time of this StepExecution.
        :rtype: datetime
        """
        return self._execution_start_time

    @execution_start_time.setter
    def execution_start_time(self, execution_start_time):
        """Sets the execution_start_time of this StepExecution.


        :param execution_start_time: The execution_start_time of this StepExecution.
        :type execution_start_time: datetime
        """

        self._execution_start_time = execution_start_time

    @property
    def execution_end_time(self):
        """Gets the execution_end_time of this StepExecution.


        :return: The execution_end_time of this StepExecution.
        :rtype: datetime
        """
        return self._execution_end_time

    @execution_end_time.setter
    def execution_end_time(self, execution_end_time):
        """Sets the execution_end_time of this StepExecution.


        :param execution_end_time: The execution_end_time of this StepExecution.
        :type execution_end_time: datetime
        """

        self._execution_end_time = execution_end_time

    @property
    def step_status(self):
        """Gets the step_status of this StepExecution.


        :return: The step_status of this StepExecution.
        :rtype: AutomationExecutionStatus
        """
        return self._step_status

    @step_status.setter
    def step_status(self, step_status):
        """Sets the step_status of this StepExecution.


        :param step_status: The step_status of this StepExecution.
        :type step_status: AutomationExecutionStatus
        """

        self._step_status = step_status

    @property
    def response_code(self):
        """Gets the response_code of this StepExecution.


        :return: The response_code of this StepExecution.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this StepExecution.


        :param response_code: The response_code of this StepExecution.
        :type response_code: str
        """

        self._response_code = response_code

    @property
    def inputs(self):
        """Gets the inputs of this StepExecution.


        :return: The inputs of this StepExecution.
        :rtype: Dict
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this StepExecution.


        :param inputs: The inputs of this StepExecution.
        :type inputs: Dict
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this StepExecution.


        :return: The outputs of this StepExecution.
        :rtype: Dict
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this StepExecution.


        :param outputs: The outputs of this StepExecution.
        :type outputs: Dict
        """

        self._outputs = outputs

    @property
    def response(self):
        """Gets the response of this StepExecution.


        :return: The response of this StepExecution.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this StepExecution.


        :param response: The response of this StepExecution.
        :type response: str
        """

        self._response = response

    @property
    def failure_message(self):
        """Gets the failure_message of this StepExecution.


        :return: The failure_message of this StepExecution.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this StepExecution.


        :param failure_message: The failure_message of this StepExecution.
        :type failure_message: str
        """

        self._failure_message = failure_message

    @property
    def failure_details(self):
        """Gets the failure_details of this StepExecution.


        :return: The failure_details of this StepExecution.
        :rtype: StepExecutionFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this StepExecution.


        :param failure_details: The failure_details of this StepExecution.
        :type failure_details: StepExecutionFailureDetails
        """

        self._failure_details = failure_details

    @property
    def step_execution_id(self):
        """Gets the step_execution_id of this StepExecution.


        :return: The step_execution_id of this StepExecution.
        :rtype: str
        """
        return self._step_execution_id

    @step_execution_id.setter
    def step_execution_id(self, step_execution_id):
        """Sets the step_execution_id of this StepExecution.


        :param step_execution_id: The step_execution_id of this StepExecution.
        :type step_execution_id: str
        """

        self._step_execution_id = step_execution_id

    @property
    def overridden_parameters(self):
        """Gets the overridden_parameters of this StepExecution.


        :return: The overridden_parameters of this StepExecution.
        :rtype: Dict
        """
        return self._overridden_parameters

    @overridden_parameters.setter
    def overridden_parameters(self, overridden_parameters):
        """Sets the overridden_parameters of this StepExecution.


        :param overridden_parameters: The overridden_parameters of this StepExecution.
        :type overridden_parameters: Dict
        """

        self._overridden_parameters = overridden_parameters

    @property
    def is_end(self):
        """Gets the is_end of this StepExecution.


        :return: The is_end of this StepExecution.
        :rtype: bool
        """
        return self._is_end

    @is_end.setter
    def is_end(self, is_end):
        """Sets the is_end of this StepExecution.


        :param is_end: The is_end of this StepExecution.
        :type is_end: bool
        """

        self._is_end = is_end

    @property
    def next_step(self):
        """Gets the next_step of this StepExecution.


        :return: The next_step of this StepExecution.
        :rtype: str
        """
        return self._next_step

    @next_step.setter
    def next_step(self, next_step):
        """Sets the next_step of this StepExecution.


        :param next_step: The next_step of this StepExecution.
        :type next_step: str
        """

        self._next_step = next_step

    @property
    def is_critical(self):
        """Gets the is_critical of this StepExecution.


        :return: The is_critical of this StepExecution.
        :rtype: bool
        """
        return self._is_critical

    @is_critical.setter
    def is_critical(self, is_critical):
        """Sets the is_critical of this StepExecution.


        :param is_critical: The is_critical of this StepExecution.
        :type is_critical: bool
        """

        self._is_critical = is_critical

    @property
    def valid_next_steps(self):
        """Gets the valid_next_steps of this StepExecution.


        :return: The valid_next_steps of this StepExecution.
        :rtype: List
        """
        return self._valid_next_steps

    @valid_next_steps.setter
    def valid_next_steps(self, valid_next_steps):
        """Sets the valid_next_steps of this StepExecution.


        :param valid_next_steps: The valid_next_steps of this StepExecution.
        :type valid_next_steps: List
        """

        self._valid_next_steps = valid_next_steps

    @property
    def targets(self):
        """Gets the targets of this StepExecution.


        :return: The targets of this StepExecution.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this StepExecution.


        :param targets: The targets of this StepExecution.
        :type targets: List
        """

        self._targets = targets

    @property
    def target_location(self):
        """Gets the target_location of this StepExecution.


        :return: The target_location of this StepExecution.
        :rtype: StepExecutionTargetLocation
        """
        return self._target_location

    @target_location.setter
    def target_location(self, target_location):
        """Sets the target_location of this StepExecution.


        :param target_location: The target_location of this StepExecution.
        :type target_location: StepExecutionTargetLocation
        """

        self._target_location = target_location

    @property
    def triggered_alarms(self):
        """Gets the triggered_alarms of this StepExecution.


        :return: The triggered_alarms of this StepExecution.
        :rtype: List
        """
        return self._triggered_alarms

    @triggered_alarms.setter
    def triggered_alarms(self, triggered_alarms):
        """Sets the triggered_alarms of this StepExecution.


        :param triggered_alarms: The triggered_alarms of this StepExecution.
        :type triggered_alarms: List
        """

        self._triggered_alarms = triggered_alarms
