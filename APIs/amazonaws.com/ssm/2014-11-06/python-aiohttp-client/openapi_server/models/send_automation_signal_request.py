# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signal_type import SignalType
from openapi_server import util


class SendAutomationSignalRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation_execution_id: str=None, signal_type: SignalType=None, payload: Dict=None):
        """SendAutomationSignalRequest - a model defined in OpenAPI

        :param automation_execution_id: The automation_execution_id of this SendAutomationSignalRequest.
        :param signal_type: The signal_type of this SendAutomationSignalRequest.
        :param payload: The payload of this SendAutomationSignalRequest.
        """
        self.openapi_types = {
            'automation_execution_id': str,
            'signal_type': SignalType,
            'payload': Dict
        }

        self.attribute_map = {
            'automation_execution_id': 'AutomationExecutionId',
            'signal_type': 'SignalType',
            'payload': 'Payload'
        }

        self._automation_execution_id = automation_execution_id
        self._signal_type = signal_type
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendAutomationSignalRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendAutomationSignalRequest of this SendAutomationSignalRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation_execution_id(self):
        """Gets the automation_execution_id of this SendAutomationSignalRequest.


        :return: The automation_execution_id of this SendAutomationSignalRequest.
        :rtype: str
        """
        return self._automation_execution_id

    @automation_execution_id.setter
    def automation_execution_id(self, automation_execution_id):
        """Sets the automation_execution_id of this SendAutomationSignalRequest.


        :param automation_execution_id: The automation_execution_id of this SendAutomationSignalRequest.
        :type automation_execution_id: str
        """
        if automation_execution_id is None:
            raise ValueError("Invalid value for `automation_execution_id`, must not be `None`")

        self._automation_execution_id = automation_execution_id

    @property
    def signal_type(self):
        """Gets the signal_type of this SendAutomationSignalRequest.


        :return: The signal_type of this SendAutomationSignalRequest.
        :rtype: SignalType
        """
        return self._signal_type

    @signal_type.setter
    def signal_type(self, signal_type):
        """Sets the signal_type of this SendAutomationSignalRequest.


        :param signal_type: The signal_type of this SendAutomationSignalRequest.
        :type signal_type: SignalType
        """
        if signal_type is None:
            raise ValueError("Invalid value for `signal_type`, must not be `None`")

        self._signal_type = signal_type

    @property
    def payload(self):
        """Gets the payload of this SendAutomationSignalRequest.


        :return: The payload of this SendAutomationSignalRequest.
        :rtype: Dict
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SendAutomationSignalRequest.


        :param payload: The payload of this SendAutomationSignalRequest.
        :type payload: Dict
        """

        self._payload = payload
