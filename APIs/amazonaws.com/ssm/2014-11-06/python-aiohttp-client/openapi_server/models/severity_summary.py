# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SeveritySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, critical_count: int=None, high_count: int=None, medium_count: int=None, low_count: int=None, informational_count: int=None, unspecified_count: int=None):
        """SeveritySummary - a model defined in OpenAPI

        :param critical_count: The critical_count of this SeveritySummary.
        :param high_count: The high_count of this SeveritySummary.
        :param medium_count: The medium_count of this SeveritySummary.
        :param low_count: The low_count of this SeveritySummary.
        :param informational_count: The informational_count of this SeveritySummary.
        :param unspecified_count: The unspecified_count of this SeveritySummary.
        """
        self.openapi_types = {
            'critical_count': int,
            'high_count': int,
            'medium_count': int,
            'low_count': int,
            'informational_count': int,
            'unspecified_count': int
        }

        self.attribute_map = {
            'critical_count': 'CriticalCount',
            'high_count': 'HighCount',
            'medium_count': 'MediumCount',
            'low_count': 'LowCount',
            'informational_count': 'InformationalCount',
            'unspecified_count': 'UnspecifiedCount'
        }

        self._critical_count = critical_count
        self._high_count = high_count
        self._medium_count = medium_count
        self._low_count = low_count
        self._informational_count = informational_count
        self._unspecified_count = unspecified_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeveritySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeveritySummary of this SeveritySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def critical_count(self):
        """Gets the critical_count of this SeveritySummary.


        :return: The critical_count of this SeveritySummary.
        :rtype: int
        """
        return self._critical_count

    @critical_count.setter
    def critical_count(self, critical_count):
        """Sets the critical_count of this SeveritySummary.


        :param critical_count: The critical_count of this SeveritySummary.
        :type critical_count: int
        """

        self._critical_count = critical_count

    @property
    def high_count(self):
        """Gets the high_count of this SeveritySummary.


        :return: The high_count of this SeveritySummary.
        :rtype: int
        """
        return self._high_count

    @high_count.setter
    def high_count(self, high_count):
        """Sets the high_count of this SeveritySummary.


        :param high_count: The high_count of this SeveritySummary.
        :type high_count: int
        """

        self._high_count = high_count

    @property
    def medium_count(self):
        """Gets the medium_count of this SeveritySummary.


        :return: The medium_count of this SeveritySummary.
        :rtype: int
        """
        return self._medium_count

    @medium_count.setter
    def medium_count(self, medium_count):
        """Sets the medium_count of this SeveritySummary.


        :param medium_count: The medium_count of this SeveritySummary.
        :type medium_count: int
        """

        self._medium_count = medium_count

    @property
    def low_count(self):
        """Gets the low_count of this SeveritySummary.


        :return: The low_count of this SeveritySummary.
        :rtype: int
        """
        return self._low_count

    @low_count.setter
    def low_count(self, low_count):
        """Sets the low_count of this SeveritySummary.


        :param low_count: The low_count of this SeveritySummary.
        :type low_count: int
        """

        self._low_count = low_count

    @property
    def informational_count(self):
        """Gets the informational_count of this SeveritySummary.


        :return: The informational_count of this SeveritySummary.
        :rtype: int
        """
        return self._informational_count

    @informational_count.setter
    def informational_count(self, informational_count):
        """Sets the informational_count of this SeveritySummary.


        :param informational_count: The informational_count of this SeveritySummary.
        :type informational_count: int
        """

        self._informational_count = informational_count

    @property
    def unspecified_count(self):
        """Gets the unspecified_count of this SeveritySummary.


        :return: The unspecified_count of this SeveritySummary.
        :rtype: int
        """
        return self._unspecified_count

    @unspecified_count.setter
    def unspecified_count(self, unspecified_count):
        """Sets the unspecified_count of this SeveritySummary.


        :param unspecified_count: The unspecified_count of this SeveritySummary.
        :type unspecified_count: int
        """

        self._unspecified_count = unspecified_count
