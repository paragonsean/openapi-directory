/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PatchComplianceDataState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the state of a patch on a particular managed node as it relates to the patch baseline used to patch the node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchComplianceData {
  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_KB_ID = "KBId";
  @SerializedName(SERIALIZED_NAME_KB_ID)
  private String kbId;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "Classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_SEVERITY = "Severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PatchComplianceDataState state;

  public static final String SERIALIZED_NAME_INSTALLED_TIME = "InstalledTime";
  @SerializedName(SERIALIZED_NAME_INSTALLED_TIME)
  private OffsetDateTime installedTime;

  public static final String SERIALIZED_NAME_CV_E_IDS = "CVEIds";
  @SerializedName(SERIALIZED_NAME_CV_E_IDS)
  private String cvEIds;

  public PatchComplianceData() {
  }

  public PatchComplianceData title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PatchComplianceData kbId(String kbId) {
    this.kbId = kbId;
    return this;
  }

  /**
   * Get kbId
   * @return kbId
   */
  @javax.annotation.Nonnull
  public String getKbId() {
    return kbId;
  }

  public void setKbId(String kbId) {
    this.kbId = kbId;
  }


  public PatchComplianceData classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nonnull
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public PatchComplianceData severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nonnull
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public PatchComplianceData state(PatchComplianceDataState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public PatchComplianceDataState getState() {
    return state;
  }

  public void setState(PatchComplianceDataState state) {
    this.state = state;
  }


  public PatchComplianceData installedTime(OffsetDateTime installedTime) {
    this.installedTime = installedTime;
    return this;
  }

  /**
   * Get installedTime
   * @return installedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getInstalledTime() {
    return installedTime;
  }

  public void setInstalledTime(OffsetDateTime installedTime) {
    this.installedTime = installedTime;
  }


  public PatchComplianceData cvEIds(String cvEIds) {
    this.cvEIds = cvEIds;
    return this;
  }

  /**
   * Get cvEIds
   * @return cvEIds
   */
  @javax.annotation.Nullable
  public String getCvEIds() {
    return cvEIds;
  }

  public void setCvEIds(String cvEIds) {
    this.cvEIds = cvEIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchComplianceData patchComplianceData = (PatchComplianceData) o;
    return Objects.equals(this.title, patchComplianceData.title) &&
        Objects.equals(this.kbId, patchComplianceData.kbId) &&
        Objects.equals(this.classification, patchComplianceData.classification) &&
        Objects.equals(this.severity, patchComplianceData.severity) &&
        Objects.equals(this.state, patchComplianceData.state) &&
        Objects.equals(this.installedTime, patchComplianceData.installedTime) &&
        Objects.equals(this.cvEIds, patchComplianceData.cvEIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, kbId, classification, severity, state, installedTime, cvEIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchComplianceData {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    kbId: ").append(toIndentedString(kbId)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    installedTime: ").append(toIndentedString(installedTime)).append("\n");
    sb.append("    cvEIds: ").append(toIndentedString(cvEIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Title");
    openapiFields.add("KBId");
    openapiFields.add("Classification");
    openapiFields.add("Severity");
    openapiFields.add("State");
    openapiFields.add("InstalledTime");
    openapiFields.add("CVEIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("KBId");
    openapiRequiredFields.add("Classification");
    openapiRequiredFields.add("Severity");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("InstalledTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchComplianceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchComplianceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchComplianceData is not found in the empty JSON string", PatchComplianceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchComplianceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchComplianceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatchComplianceData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Title`
      String.validateJsonElement(jsonObj.get("Title"));
      // validate the required field `KBId`
      String.validateJsonElement(jsonObj.get("KBId"));
      // validate the required field `Classification`
      String.validateJsonElement(jsonObj.get("Classification"));
      // validate the required field `Severity`
      String.validateJsonElement(jsonObj.get("Severity"));
      // validate the required field `State`
      PatchComplianceDataState.validateJsonElement(jsonObj.get("State"));
      // validate the required field `InstalledTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("InstalledTime"));
      // validate the optional field `CVEIds`
      if (jsonObj.get("CVEIds") != null && !jsonObj.get("CVEIds").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CVEIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchComplianceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchComplianceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchComplianceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchComplianceData.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchComplianceData>() {
           @Override
           public void write(JsonWriter out, PatchComplianceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchComplianceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchComplianceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchComplianceData
   * @throws IOException if the JSON string is invalid with respect to PatchComplianceData
   */
  public static PatchComplianceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchComplianceData.class);
  }

  /**
   * Convert an instance of PatchComplianceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

