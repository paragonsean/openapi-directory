/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommandCloudWatchOutputConfig;
import org.openapitools.client.model.CommandInvocationNotificationConfig;
import org.openapitools.client.model.CommandInvocationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An invocation is a copy of a command sent to a specific managed node. A command can apply to one or more managed nodes. A command invocation applies to one managed node. For example, if a user runs &lt;code&gt;SendCommand&lt;/code&gt; against three managed nodes, then a command invocation is created for each requested managed node ID. A command invocation returns status and detail information about a command you ran. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommandInvocation {
  public static final String SERIALIZED_NAME_COMMAND_ID = "CommandId";
  @SerializedName(SERIALIZED_NAME_COMMAND_ID)
  private String commandId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "InstanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "DocumentName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "DocumentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_REQUESTED_DATE_TIME = "RequestedDateTime";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATE_TIME)
  private OffsetDateTime requestedDateTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CommandInvocationStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "StatusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public static final String SERIALIZED_NAME_TRACE_OUTPUT = "TraceOutput";
  @SerializedName(SERIALIZED_NAME_TRACE_OUTPUT)
  private String traceOutput;

  public static final String SERIALIZED_NAME_STANDARD_OUTPUT_URL = "StandardOutputUrl";
  @SerializedName(SERIALIZED_NAME_STANDARD_OUTPUT_URL)
  private String standardOutputUrl;

  public static final String SERIALIZED_NAME_STANDARD_ERROR_URL = "StandardErrorUrl";
  @SerializedName(SERIALIZED_NAME_STANDARD_ERROR_URL)
  private String standardErrorUrl;

  public static final String SERIALIZED_NAME_COMMAND_PLUGINS = "CommandPlugins";
  @SerializedName(SERIALIZED_NAME_COMMAND_PLUGINS)
  private List commandPlugins;

  public static final String SERIALIZED_NAME_SERVICE_ROLE = "ServiceRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE)
  private String serviceRole;

  public static final String SERIALIZED_NAME_NOTIFICATION_CONFIG = "NotificationConfig";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CONFIG)
  private CommandInvocationNotificationConfig notificationConfig;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_OUTPUT_CONFIG = "CloudWatchOutputConfig";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_OUTPUT_CONFIG)
  private CommandCloudWatchOutputConfig cloudWatchOutputConfig;

  public CommandInvocation() {
  }

  public CommandInvocation commandId(String commandId) {
    this.commandId = commandId;
    return this;
  }

  /**
   * Get commandId
   * @return commandId
   */
  @javax.annotation.Nullable
  public String getCommandId() {
    return commandId;
  }

  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }


  public CommandInvocation instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public CommandInvocation instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Get instanceName
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public CommandInvocation comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public CommandInvocation documentName(String documentName) {
    this.documentName = documentName;
    return this;
  }

  /**
   * Get documentName
   * @return documentName
   */
  @javax.annotation.Nullable
  public String getDocumentName() {
    return documentName;
  }

  public void setDocumentName(String documentName) {
    this.documentName = documentName;
  }


  public CommandInvocation documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public CommandInvocation requestedDateTime(OffsetDateTime requestedDateTime) {
    this.requestedDateTime = requestedDateTime;
    return this;
  }

  /**
   * Get requestedDateTime
   * @return requestedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestedDateTime() {
    return requestedDateTime;
  }

  public void setRequestedDateTime(OffsetDateTime requestedDateTime) {
    this.requestedDateTime = requestedDateTime;
  }


  public CommandInvocation status(CommandInvocationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CommandInvocationStatus getStatus() {
    return status;
  }

  public void setStatus(CommandInvocationStatus status) {
    this.status = status;
  }


  public CommandInvocation statusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  /**
   * Get statusDetails
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
  }


  public CommandInvocation traceOutput(String traceOutput) {
    this.traceOutput = traceOutput;
    return this;
  }

  /**
   * Get traceOutput
   * @return traceOutput
   */
  @javax.annotation.Nullable
  public String getTraceOutput() {
    return traceOutput;
  }

  public void setTraceOutput(String traceOutput) {
    this.traceOutput = traceOutput;
  }


  public CommandInvocation standardOutputUrl(String standardOutputUrl) {
    this.standardOutputUrl = standardOutputUrl;
    return this;
  }

  /**
   * Get standardOutputUrl
   * @return standardOutputUrl
   */
  @javax.annotation.Nullable
  public String getStandardOutputUrl() {
    return standardOutputUrl;
  }

  public void setStandardOutputUrl(String standardOutputUrl) {
    this.standardOutputUrl = standardOutputUrl;
  }


  public CommandInvocation standardErrorUrl(String standardErrorUrl) {
    this.standardErrorUrl = standardErrorUrl;
    return this;
  }

  /**
   * Get standardErrorUrl
   * @return standardErrorUrl
   */
  @javax.annotation.Nullable
  public String getStandardErrorUrl() {
    return standardErrorUrl;
  }

  public void setStandardErrorUrl(String standardErrorUrl) {
    this.standardErrorUrl = standardErrorUrl;
  }


  public CommandInvocation commandPlugins(List commandPlugins) {
    this.commandPlugins = commandPlugins;
    return this;
  }

  /**
   * Get commandPlugins
   * @return commandPlugins
   */
  @javax.annotation.Nullable
  public List getCommandPlugins() {
    return commandPlugins;
  }

  public void setCommandPlugins(List commandPlugins) {
    this.commandPlugins = commandPlugins;
  }


  public CommandInvocation serviceRole(String serviceRole) {
    this.serviceRole = serviceRole;
    return this;
  }

  /**
   * Get serviceRole
   * @return serviceRole
   */
  @javax.annotation.Nullable
  public String getServiceRole() {
    return serviceRole;
  }

  public void setServiceRole(String serviceRole) {
    this.serviceRole = serviceRole;
  }


  public CommandInvocation notificationConfig(CommandInvocationNotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
    return this;
  }

  /**
   * Get notificationConfig
   * @return notificationConfig
   */
  @javax.annotation.Nullable
  public CommandInvocationNotificationConfig getNotificationConfig() {
    return notificationConfig;
  }

  public void setNotificationConfig(CommandInvocationNotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
  }


  public CommandInvocation cloudWatchOutputConfig(CommandCloudWatchOutputConfig cloudWatchOutputConfig) {
    this.cloudWatchOutputConfig = cloudWatchOutputConfig;
    return this;
  }

  /**
   * Get cloudWatchOutputConfig
   * @return cloudWatchOutputConfig
   */
  @javax.annotation.Nullable
  public CommandCloudWatchOutputConfig getCloudWatchOutputConfig() {
    return cloudWatchOutputConfig;
  }

  public void setCloudWatchOutputConfig(CommandCloudWatchOutputConfig cloudWatchOutputConfig) {
    this.cloudWatchOutputConfig = cloudWatchOutputConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommandInvocation commandInvocation = (CommandInvocation) o;
    return Objects.equals(this.commandId, commandInvocation.commandId) &&
        Objects.equals(this.instanceId, commandInvocation.instanceId) &&
        Objects.equals(this.instanceName, commandInvocation.instanceName) &&
        Objects.equals(this.comment, commandInvocation.comment) &&
        Objects.equals(this.documentName, commandInvocation.documentName) &&
        Objects.equals(this.documentVersion, commandInvocation.documentVersion) &&
        Objects.equals(this.requestedDateTime, commandInvocation.requestedDateTime) &&
        Objects.equals(this.status, commandInvocation.status) &&
        Objects.equals(this.statusDetails, commandInvocation.statusDetails) &&
        Objects.equals(this.traceOutput, commandInvocation.traceOutput) &&
        Objects.equals(this.standardOutputUrl, commandInvocation.standardOutputUrl) &&
        Objects.equals(this.standardErrorUrl, commandInvocation.standardErrorUrl) &&
        Objects.equals(this.commandPlugins, commandInvocation.commandPlugins) &&
        Objects.equals(this.serviceRole, commandInvocation.serviceRole) &&
        Objects.equals(this.notificationConfig, commandInvocation.notificationConfig) &&
        Objects.equals(this.cloudWatchOutputConfig, commandInvocation.cloudWatchOutputConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandId, instanceId, instanceName, comment, documentName, documentVersion, requestedDateTime, status, statusDetails, traceOutput, standardOutputUrl, standardErrorUrl, commandPlugins, serviceRole, notificationConfig, cloudWatchOutputConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommandInvocation {\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    requestedDateTime: ").append(toIndentedString(requestedDateTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    traceOutput: ").append(toIndentedString(traceOutput)).append("\n");
    sb.append("    standardOutputUrl: ").append(toIndentedString(standardOutputUrl)).append("\n");
    sb.append("    standardErrorUrl: ").append(toIndentedString(standardErrorUrl)).append("\n");
    sb.append("    commandPlugins: ").append(toIndentedString(commandPlugins)).append("\n");
    sb.append("    serviceRole: ").append(toIndentedString(serviceRole)).append("\n");
    sb.append("    notificationConfig: ").append(toIndentedString(notificationConfig)).append("\n");
    sb.append("    cloudWatchOutputConfig: ").append(toIndentedString(cloudWatchOutputConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CommandId");
    openapiFields.add("InstanceId");
    openapiFields.add("InstanceName");
    openapiFields.add("Comment");
    openapiFields.add("DocumentName");
    openapiFields.add("DocumentVersion");
    openapiFields.add("RequestedDateTime");
    openapiFields.add("Status");
    openapiFields.add("StatusDetails");
    openapiFields.add("TraceOutput");
    openapiFields.add("StandardOutputUrl");
    openapiFields.add("StandardErrorUrl");
    openapiFields.add("CommandPlugins");
    openapiFields.add("ServiceRole");
    openapiFields.add("NotificationConfig");
    openapiFields.add("CloudWatchOutputConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommandInvocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommandInvocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommandInvocation is not found in the empty JSON string", CommandInvocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommandInvocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommandInvocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CommandId`
      if (jsonObj.get("CommandId") != null && !jsonObj.get("CommandId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CommandId"));
      }
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `InstanceName`
      if (jsonObj.get("InstanceName") != null && !jsonObj.get("InstanceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceName"));
      }
      // validate the optional field `Comment`
      if (jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Comment"));
      }
      // validate the optional field `DocumentName`
      if (jsonObj.get("DocumentName") != null && !jsonObj.get("DocumentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentName"));
      }
      // validate the optional field `DocumentVersion`
      if (jsonObj.get("DocumentVersion") != null && !jsonObj.get("DocumentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentVersion"));
      }
      // validate the optional field `RequestedDateTime`
      if (jsonObj.get("RequestedDateTime") != null && !jsonObj.get("RequestedDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RequestedDateTime"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        CommandInvocationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusDetails`
      if (jsonObj.get("StatusDetails") != null && !jsonObj.get("StatusDetails").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusDetails"));
      }
      // validate the optional field `TraceOutput`
      if (jsonObj.get("TraceOutput") != null && !jsonObj.get("TraceOutput").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TraceOutput"));
      }
      // validate the optional field `StandardOutputUrl`
      if (jsonObj.get("StandardOutputUrl") != null && !jsonObj.get("StandardOutputUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StandardOutputUrl"));
      }
      // validate the optional field `StandardErrorUrl`
      if (jsonObj.get("StandardErrorUrl") != null && !jsonObj.get("StandardErrorUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StandardErrorUrl"));
      }
      // validate the optional field `CommandPlugins`
      if (jsonObj.get("CommandPlugins") != null && !jsonObj.get("CommandPlugins").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CommandPlugins"));
      }
      // validate the optional field `ServiceRole`
      if (jsonObj.get("ServiceRole") != null && !jsonObj.get("ServiceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceRole"));
      }
      // validate the optional field `NotificationConfig`
      if (jsonObj.get("NotificationConfig") != null && !jsonObj.get("NotificationConfig").isJsonNull()) {
        CommandInvocationNotificationConfig.validateJsonElement(jsonObj.get("NotificationConfig"));
      }
      // validate the optional field `CloudWatchOutputConfig`
      if (jsonObj.get("CloudWatchOutputConfig") != null && !jsonObj.get("CloudWatchOutputConfig").isJsonNull()) {
        CommandCloudWatchOutputConfig.validateJsonElement(jsonObj.get("CloudWatchOutputConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommandInvocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommandInvocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommandInvocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommandInvocation.class));

       return (TypeAdapter<T>) new TypeAdapter<CommandInvocation>() {
           @Override
           public void write(JsonWriter out, CommandInvocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommandInvocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommandInvocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommandInvocation
   * @throws IOException if the JSON string is invalid with respect to CommandInvocation
   */
  public static CommandInvocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommandInvocation.class);
  }

  /**
   * Convert an instance of CommandInvocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

