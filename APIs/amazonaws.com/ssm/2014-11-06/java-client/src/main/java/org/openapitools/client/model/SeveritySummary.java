/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The number of managed nodes found for each patch severity level defined in the request filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SeveritySummary {
  public static final String SERIALIZED_NAME_CRITICAL_COUNT = "CriticalCount";
  @SerializedName(SERIALIZED_NAME_CRITICAL_COUNT)
  private Integer criticalCount;

  public static final String SERIALIZED_NAME_HIGH_COUNT = "HighCount";
  @SerializedName(SERIALIZED_NAME_HIGH_COUNT)
  private Integer highCount;

  public static final String SERIALIZED_NAME_MEDIUM_COUNT = "MediumCount";
  @SerializedName(SERIALIZED_NAME_MEDIUM_COUNT)
  private Integer mediumCount;

  public static final String SERIALIZED_NAME_LOW_COUNT = "LowCount";
  @SerializedName(SERIALIZED_NAME_LOW_COUNT)
  private Integer lowCount;

  public static final String SERIALIZED_NAME_INFORMATIONAL_COUNT = "InformationalCount";
  @SerializedName(SERIALIZED_NAME_INFORMATIONAL_COUNT)
  private Integer informationalCount;

  public static final String SERIALIZED_NAME_UNSPECIFIED_COUNT = "UnspecifiedCount";
  @SerializedName(SERIALIZED_NAME_UNSPECIFIED_COUNT)
  private Integer unspecifiedCount;

  public SeveritySummary() {
  }

  public SeveritySummary criticalCount(Integer criticalCount) {
    this.criticalCount = criticalCount;
    return this;
  }

  /**
   * Get criticalCount
   * @return criticalCount
   */
  @javax.annotation.Nullable
  public Integer getCriticalCount() {
    return criticalCount;
  }

  public void setCriticalCount(Integer criticalCount) {
    this.criticalCount = criticalCount;
  }


  public SeveritySummary highCount(Integer highCount) {
    this.highCount = highCount;
    return this;
  }

  /**
   * Get highCount
   * @return highCount
   */
  @javax.annotation.Nullable
  public Integer getHighCount() {
    return highCount;
  }

  public void setHighCount(Integer highCount) {
    this.highCount = highCount;
  }


  public SeveritySummary mediumCount(Integer mediumCount) {
    this.mediumCount = mediumCount;
    return this;
  }

  /**
   * Get mediumCount
   * @return mediumCount
   */
  @javax.annotation.Nullable
  public Integer getMediumCount() {
    return mediumCount;
  }

  public void setMediumCount(Integer mediumCount) {
    this.mediumCount = mediumCount;
  }


  public SeveritySummary lowCount(Integer lowCount) {
    this.lowCount = lowCount;
    return this;
  }

  /**
   * Get lowCount
   * @return lowCount
   */
  @javax.annotation.Nullable
  public Integer getLowCount() {
    return lowCount;
  }

  public void setLowCount(Integer lowCount) {
    this.lowCount = lowCount;
  }


  public SeveritySummary informationalCount(Integer informationalCount) {
    this.informationalCount = informationalCount;
    return this;
  }

  /**
   * Get informationalCount
   * @return informationalCount
   */
  @javax.annotation.Nullable
  public Integer getInformationalCount() {
    return informationalCount;
  }

  public void setInformationalCount(Integer informationalCount) {
    this.informationalCount = informationalCount;
  }


  public SeveritySummary unspecifiedCount(Integer unspecifiedCount) {
    this.unspecifiedCount = unspecifiedCount;
    return this;
  }

  /**
   * Get unspecifiedCount
   * @return unspecifiedCount
   */
  @javax.annotation.Nullable
  public Integer getUnspecifiedCount() {
    return unspecifiedCount;
  }

  public void setUnspecifiedCount(Integer unspecifiedCount) {
    this.unspecifiedCount = unspecifiedCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeveritySummary severitySummary = (SeveritySummary) o;
    return Objects.equals(this.criticalCount, severitySummary.criticalCount) &&
        Objects.equals(this.highCount, severitySummary.highCount) &&
        Objects.equals(this.mediumCount, severitySummary.mediumCount) &&
        Objects.equals(this.lowCount, severitySummary.lowCount) &&
        Objects.equals(this.informationalCount, severitySummary.informationalCount) &&
        Objects.equals(this.unspecifiedCount, severitySummary.unspecifiedCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criticalCount, highCount, mediumCount, lowCount, informationalCount, unspecifiedCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeveritySummary {\n");
    sb.append("    criticalCount: ").append(toIndentedString(criticalCount)).append("\n");
    sb.append("    highCount: ").append(toIndentedString(highCount)).append("\n");
    sb.append("    mediumCount: ").append(toIndentedString(mediumCount)).append("\n");
    sb.append("    lowCount: ").append(toIndentedString(lowCount)).append("\n");
    sb.append("    informationalCount: ").append(toIndentedString(informationalCount)).append("\n");
    sb.append("    unspecifiedCount: ").append(toIndentedString(unspecifiedCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CriticalCount");
    openapiFields.add("HighCount");
    openapiFields.add("MediumCount");
    openapiFields.add("LowCount");
    openapiFields.add("InformationalCount");
    openapiFields.add("UnspecifiedCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeveritySummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeveritySummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeveritySummary is not found in the empty JSON string", SeveritySummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeveritySummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeveritySummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CriticalCount`
      if (jsonObj.get("CriticalCount") != null && !jsonObj.get("CriticalCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CriticalCount"));
      }
      // validate the optional field `HighCount`
      if (jsonObj.get("HighCount") != null && !jsonObj.get("HighCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HighCount"));
      }
      // validate the optional field `MediumCount`
      if (jsonObj.get("MediumCount") != null && !jsonObj.get("MediumCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MediumCount"));
      }
      // validate the optional field `LowCount`
      if (jsonObj.get("LowCount") != null && !jsonObj.get("LowCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LowCount"));
      }
      // validate the optional field `InformationalCount`
      if (jsonObj.get("InformationalCount") != null && !jsonObj.get("InformationalCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InformationalCount"));
      }
      // validate the optional field `UnspecifiedCount`
      if (jsonObj.get("UnspecifiedCount") != null && !jsonObj.get("UnspecifiedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UnspecifiedCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeveritySummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeveritySummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeveritySummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeveritySummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SeveritySummary>() {
           @Override
           public void write(JsonWriter out, SeveritySummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeveritySummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeveritySummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeveritySummary
   * @throws IOException if the JSON string is invalid with respect to SeveritySummary
   */
  public static SeveritySummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeveritySummary.class);
  }

  /**
   * Convert an instance of SeveritySummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

