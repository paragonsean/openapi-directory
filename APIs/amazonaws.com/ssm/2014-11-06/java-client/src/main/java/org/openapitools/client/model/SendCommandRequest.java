/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DocumentHashType;
import org.openapitools.client.model.SendCommandRequestAlarmConfiguration;
import org.openapitools.client.model.SendCommandRequestCloudWatchOutputConfig;
import org.openapitools.client.model.SendCommandRequestNotificationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendCommandRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendCommandRequest {
  public static final String SERIALIZED_NAME_INSTANCE_IDS = "InstanceIds";
  @SerializedName(SERIALIZED_NAME_INSTANCE_IDS)
  private List instanceIds;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List targets;

  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "DocumentName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "DocumentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_DOCUMENT_HASH = "DocumentHash";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_HASH)
  private String documentHash;

  public static final String SERIALIZED_NAME_DOCUMENT_HASH_TYPE = "DocumentHashType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_HASH_TYPE)
  private DocumentHashType documentHashType;

  public static final String SERIALIZED_NAME_TIMEOUT_SECONDS = "TimeoutSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SECONDS)
  private Integer timeoutSeconds;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_OUTPUT_S3_REGION = "OutputS3Region";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_REGION)
  private String outputS3Region;

  public static final String SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME = "OutputS3BucketName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME)
  private String outputS3BucketName;

  public static final String SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX = "OutputS3KeyPrefix";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX)
  private String outputS3KeyPrefix;

  public static final String SERIALIZED_NAME_MAX_CONCURRENCY = "MaxConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENCY)
  private String maxConcurrency;

  public static final String SERIALIZED_NAME_MAX_ERRORS = "MaxErrors";
  @SerializedName(SERIALIZED_NAME_MAX_ERRORS)
  private String maxErrors;

  public static final String SERIALIZED_NAME_SERVICE_ROLE_ARN = "ServiceRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE_ARN)
  private String serviceRoleArn;

  public static final String SERIALIZED_NAME_NOTIFICATION_CONFIG = "NotificationConfig";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CONFIG)
  private SendCommandRequestNotificationConfig notificationConfig;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_OUTPUT_CONFIG = "CloudWatchOutputConfig";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_OUTPUT_CONFIG)
  private SendCommandRequestCloudWatchOutputConfig cloudWatchOutputConfig;

  public static final String SERIALIZED_NAME_ALARM_CONFIGURATION = "AlarmConfiguration";
  @SerializedName(SERIALIZED_NAME_ALARM_CONFIGURATION)
  private SendCommandRequestAlarmConfiguration alarmConfiguration;

  public SendCommandRequest() {
  }

  public SendCommandRequest instanceIds(List instanceIds) {
    this.instanceIds = instanceIds;
    return this;
  }

  /**
   * Get instanceIds
   * @return instanceIds
   */
  @javax.annotation.Nullable
  public List getInstanceIds() {
    return instanceIds;
  }

  public void setInstanceIds(List instanceIds) {
    this.instanceIds = instanceIds;
  }


  public SendCommandRequest targets(List targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List getTargets() {
    return targets;
  }

  public void setTargets(List targets) {
    this.targets = targets;
  }


  public SendCommandRequest documentName(String documentName) {
    this.documentName = documentName;
    return this;
  }

  /**
   * Get documentName
   * @return documentName
   */
  @javax.annotation.Nonnull
  public String getDocumentName() {
    return documentName;
  }

  public void setDocumentName(String documentName) {
    this.documentName = documentName;
  }


  public SendCommandRequest documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public SendCommandRequest documentHash(String documentHash) {
    this.documentHash = documentHash;
    return this;
  }

  /**
   * Get documentHash
   * @return documentHash
   */
  @javax.annotation.Nullable
  public String getDocumentHash() {
    return documentHash;
  }

  public void setDocumentHash(String documentHash) {
    this.documentHash = documentHash;
  }


  public SendCommandRequest documentHashType(DocumentHashType documentHashType) {
    this.documentHashType = documentHashType;
    return this;
  }

  /**
   * Get documentHashType
   * @return documentHashType
   */
  @javax.annotation.Nullable
  public DocumentHashType getDocumentHashType() {
    return documentHashType;
  }

  public void setDocumentHashType(DocumentHashType documentHashType) {
    this.documentHashType = documentHashType;
  }


  public SendCommandRequest timeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

  /**
   * Get timeoutSeconds
   * @return timeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }


  public SendCommandRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public SendCommandRequest parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public SendCommandRequest outputS3Region(String outputS3Region) {
    this.outputS3Region = outputS3Region;
    return this;
  }

  /**
   * Get outputS3Region
   * @return outputS3Region
   */
  @javax.annotation.Nullable
  public String getOutputS3Region() {
    return outputS3Region;
  }

  public void setOutputS3Region(String outputS3Region) {
    this.outputS3Region = outputS3Region;
  }


  public SendCommandRequest outputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
    return this;
  }

  /**
   * Get outputS3BucketName
   * @return outputS3BucketName
   */
  @javax.annotation.Nullable
  public String getOutputS3BucketName() {
    return outputS3BucketName;
  }

  public void setOutputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
  }


  public SendCommandRequest outputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
    return this;
  }

  /**
   * Get outputS3KeyPrefix
   * @return outputS3KeyPrefix
   */
  @javax.annotation.Nullable
  public String getOutputS3KeyPrefix() {
    return outputS3KeyPrefix;
  }

  public void setOutputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
  }


  public SendCommandRequest maxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
    return this;
  }

  /**
   * Get maxConcurrency
   * @return maxConcurrency
   */
  @javax.annotation.Nullable
  public String getMaxConcurrency() {
    return maxConcurrency;
  }

  public void setMaxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }


  public SendCommandRequest maxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
    return this;
  }

  /**
   * Get maxErrors
   * @return maxErrors
   */
  @javax.annotation.Nullable
  public String getMaxErrors() {
    return maxErrors;
  }

  public void setMaxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
  }


  public SendCommandRequest serviceRoleArn(String serviceRoleArn) {
    this.serviceRoleArn = serviceRoleArn;
    return this;
  }

  /**
   * Get serviceRoleArn
   * @return serviceRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceRoleArn() {
    return serviceRoleArn;
  }

  public void setServiceRoleArn(String serviceRoleArn) {
    this.serviceRoleArn = serviceRoleArn;
  }


  public SendCommandRequest notificationConfig(SendCommandRequestNotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
    return this;
  }

  /**
   * Get notificationConfig
   * @return notificationConfig
   */
  @javax.annotation.Nullable
  public SendCommandRequestNotificationConfig getNotificationConfig() {
    return notificationConfig;
  }

  public void setNotificationConfig(SendCommandRequestNotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
  }


  public SendCommandRequest cloudWatchOutputConfig(SendCommandRequestCloudWatchOutputConfig cloudWatchOutputConfig) {
    this.cloudWatchOutputConfig = cloudWatchOutputConfig;
    return this;
  }

  /**
   * Get cloudWatchOutputConfig
   * @return cloudWatchOutputConfig
   */
  @javax.annotation.Nullable
  public SendCommandRequestCloudWatchOutputConfig getCloudWatchOutputConfig() {
    return cloudWatchOutputConfig;
  }

  public void setCloudWatchOutputConfig(SendCommandRequestCloudWatchOutputConfig cloudWatchOutputConfig) {
    this.cloudWatchOutputConfig = cloudWatchOutputConfig;
  }


  public SendCommandRequest alarmConfiguration(SendCommandRequestAlarmConfiguration alarmConfiguration) {
    this.alarmConfiguration = alarmConfiguration;
    return this;
  }

  /**
   * Get alarmConfiguration
   * @return alarmConfiguration
   */
  @javax.annotation.Nullable
  public SendCommandRequestAlarmConfiguration getAlarmConfiguration() {
    return alarmConfiguration;
  }

  public void setAlarmConfiguration(SendCommandRequestAlarmConfiguration alarmConfiguration) {
    this.alarmConfiguration = alarmConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendCommandRequest sendCommandRequest = (SendCommandRequest) o;
    return Objects.equals(this.instanceIds, sendCommandRequest.instanceIds) &&
        Objects.equals(this.targets, sendCommandRequest.targets) &&
        Objects.equals(this.documentName, sendCommandRequest.documentName) &&
        Objects.equals(this.documentVersion, sendCommandRequest.documentVersion) &&
        Objects.equals(this.documentHash, sendCommandRequest.documentHash) &&
        Objects.equals(this.documentHashType, sendCommandRequest.documentHashType) &&
        Objects.equals(this.timeoutSeconds, sendCommandRequest.timeoutSeconds) &&
        Objects.equals(this.comment, sendCommandRequest.comment) &&
        Objects.equals(this.parameters, sendCommandRequest.parameters) &&
        Objects.equals(this.outputS3Region, sendCommandRequest.outputS3Region) &&
        Objects.equals(this.outputS3BucketName, sendCommandRequest.outputS3BucketName) &&
        Objects.equals(this.outputS3KeyPrefix, sendCommandRequest.outputS3KeyPrefix) &&
        Objects.equals(this.maxConcurrency, sendCommandRequest.maxConcurrency) &&
        Objects.equals(this.maxErrors, sendCommandRequest.maxErrors) &&
        Objects.equals(this.serviceRoleArn, sendCommandRequest.serviceRoleArn) &&
        Objects.equals(this.notificationConfig, sendCommandRequest.notificationConfig) &&
        Objects.equals(this.cloudWatchOutputConfig, sendCommandRequest.cloudWatchOutputConfig) &&
        Objects.equals(this.alarmConfiguration, sendCommandRequest.alarmConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceIds, targets, documentName, documentVersion, documentHash, documentHashType, timeoutSeconds, comment, parameters, outputS3Region, outputS3BucketName, outputS3KeyPrefix, maxConcurrency, maxErrors, serviceRoleArn, notificationConfig, cloudWatchOutputConfig, alarmConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendCommandRequest {\n");
    sb.append("    instanceIds: ").append(toIndentedString(instanceIds)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    documentHash: ").append(toIndentedString(documentHash)).append("\n");
    sb.append("    documentHashType: ").append(toIndentedString(documentHashType)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    outputS3Region: ").append(toIndentedString(outputS3Region)).append("\n");
    sb.append("    outputS3BucketName: ").append(toIndentedString(outputS3BucketName)).append("\n");
    sb.append("    outputS3KeyPrefix: ").append(toIndentedString(outputS3KeyPrefix)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    maxErrors: ").append(toIndentedString(maxErrors)).append("\n");
    sb.append("    serviceRoleArn: ").append(toIndentedString(serviceRoleArn)).append("\n");
    sb.append("    notificationConfig: ").append(toIndentedString(notificationConfig)).append("\n");
    sb.append("    cloudWatchOutputConfig: ").append(toIndentedString(cloudWatchOutputConfig)).append("\n");
    sb.append("    alarmConfiguration: ").append(toIndentedString(alarmConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceIds");
    openapiFields.add("Targets");
    openapiFields.add("DocumentName");
    openapiFields.add("DocumentVersion");
    openapiFields.add("DocumentHash");
    openapiFields.add("DocumentHashType");
    openapiFields.add("TimeoutSeconds");
    openapiFields.add("Comment");
    openapiFields.add("Parameters");
    openapiFields.add("OutputS3Region");
    openapiFields.add("OutputS3BucketName");
    openapiFields.add("OutputS3KeyPrefix");
    openapiFields.add("MaxConcurrency");
    openapiFields.add("MaxErrors");
    openapiFields.add("ServiceRoleArn");
    openapiFields.add("NotificationConfig");
    openapiFields.add("CloudWatchOutputConfig");
    openapiFields.add("AlarmConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendCommandRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendCommandRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendCommandRequest is not found in the empty JSON string", SendCommandRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendCommandRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendCommandRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendCommandRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InstanceIds`
      if (jsonObj.get("InstanceIds") != null && !jsonObj.get("InstanceIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InstanceIds"));
      }
      // validate the optional field `Targets`
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Targets"));
      }
      // validate the required field `DocumentName`
      String.validateJsonElement(jsonObj.get("DocumentName"));
      // validate the optional field `DocumentVersion`
      if (jsonObj.get("DocumentVersion") != null && !jsonObj.get("DocumentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentVersion"));
      }
      // validate the optional field `DocumentHash`
      if (jsonObj.get("DocumentHash") != null && !jsonObj.get("DocumentHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentHash"));
      }
      // validate the optional field `DocumentHashType`
      if (jsonObj.get("DocumentHashType") != null && !jsonObj.get("DocumentHashType").isJsonNull()) {
        DocumentHashType.validateJsonElement(jsonObj.get("DocumentHashType"));
      }
      // validate the optional field `TimeoutSeconds`
      if (jsonObj.get("TimeoutSeconds") != null && !jsonObj.get("TimeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeoutSeconds"));
      }
      // validate the optional field `Comment`
      if (jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Comment"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `OutputS3Region`
      if (jsonObj.get("OutputS3Region") != null && !jsonObj.get("OutputS3Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3Region"));
      }
      // validate the optional field `OutputS3BucketName`
      if (jsonObj.get("OutputS3BucketName") != null && !jsonObj.get("OutputS3BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3BucketName"));
      }
      // validate the optional field `OutputS3KeyPrefix`
      if (jsonObj.get("OutputS3KeyPrefix") != null && !jsonObj.get("OutputS3KeyPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3KeyPrefix"));
      }
      // validate the optional field `MaxConcurrency`
      if (jsonObj.get("MaxConcurrency") != null && !jsonObj.get("MaxConcurrency").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxConcurrency"));
      }
      // validate the optional field `MaxErrors`
      if (jsonObj.get("MaxErrors") != null && !jsonObj.get("MaxErrors").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxErrors"));
      }
      // validate the optional field `ServiceRoleArn`
      if (jsonObj.get("ServiceRoleArn") != null && !jsonObj.get("ServiceRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceRoleArn"));
      }
      // validate the optional field `NotificationConfig`
      if (jsonObj.get("NotificationConfig") != null && !jsonObj.get("NotificationConfig").isJsonNull()) {
        SendCommandRequestNotificationConfig.validateJsonElement(jsonObj.get("NotificationConfig"));
      }
      // validate the optional field `CloudWatchOutputConfig`
      if (jsonObj.get("CloudWatchOutputConfig") != null && !jsonObj.get("CloudWatchOutputConfig").isJsonNull()) {
        SendCommandRequestCloudWatchOutputConfig.validateJsonElement(jsonObj.get("CloudWatchOutputConfig"));
      }
      // validate the optional field `AlarmConfiguration`
      if (jsonObj.get("AlarmConfiguration") != null && !jsonObj.get("AlarmConfiguration").isJsonNull()) {
        SendCommandRequestAlarmConfiguration.validateJsonElement(jsonObj.get("AlarmConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendCommandRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendCommandRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendCommandRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendCommandRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendCommandRequest>() {
           @Override
           public void write(JsonWriter out, SendCommandRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendCommandRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendCommandRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendCommandRequest
   * @throws IOException if the JSON string is invalid with respect to SendCommandRequest
   */
  public static SendCommandRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendCommandRequest.class);
  }

  /**
   * Convert an instance of SendCommandRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

