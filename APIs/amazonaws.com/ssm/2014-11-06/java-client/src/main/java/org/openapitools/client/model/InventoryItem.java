/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information collected from managed nodes based on your inventory policy document
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryItem {
  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "SchemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_CAPTURE_TIME = "CaptureTime";
  @SerializedName(SERIALIZED_NAME_CAPTURE_TIME)
  private String captureTime;

  public static final String SERIALIZED_NAME_CONTENT_HASH = "ContentHash";
  @SerializedName(SERIALIZED_NAME_CONTENT_HASH)
  private String contentHash;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List content;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Map context;

  public InventoryItem() {
  }

  public InventoryItem typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nonnull
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public InventoryItem schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public InventoryItem captureTime(String captureTime) {
    this.captureTime = captureTime;
    return this;
  }

  /**
   * Get captureTime
   * @return captureTime
   */
  @javax.annotation.Nonnull
  public String getCaptureTime() {
    return captureTime;
  }

  public void setCaptureTime(String captureTime) {
    this.captureTime = captureTime;
  }


  public InventoryItem contentHash(String contentHash) {
    this.contentHash = contentHash;
    return this;
  }

  /**
   * Get contentHash
   * @return contentHash
   */
  @javax.annotation.Nullable
  public String getContentHash() {
    return contentHash;
  }

  public void setContentHash(String contentHash) {
    this.contentHash = contentHash;
  }


  public InventoryItem content(List content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public List getContent() {
    return content;
  }

  public void setContent(List content) {
    this.content = content;
  }


  public InventoryItem context(Map context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Map getContext() {
    return context;
  }

  public void setContext(Map context) {
    this.context = context;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryItem inventoryItem = (InventoryItem) o;
    return Objects.equals(this.typeName, inventoryItem.typeName) &&
        Objects.equals(this.schemaVersion, inventoryItem.schemaVersion) &&
        Objects.equals(this.captureTime, inventoryItem.captureTime) &&
        Objects.equals(this.contentHash, inventoryItem.contentHash) &&
        Objects.equals(this.content, inventoryItem.content) &&
        Objects.equals(this.context, inventoryItem.context);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeName, schemaVersion, captureTime, contentHash, content, context);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryItem {\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    captureTime: ").append(toIndentedString(captureTime)).append("\n");
    sb.append("    contentHash: ").append(toIndentedString(contentHash)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TypeName");
    openapiFields.add("SchemaVersion");
    openapiFields.add("CaptureTime");
    openapiFields.add("ContentHash");
    openapiFields.add("Content");
    openapiFields.add("Context");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TypeName");
    openapiRequiredFields.add("SchemaVersion");
    openapiRequiredFields.add("CaptureTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryItem is not found in the empty JSON string", InventoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InventoryItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TypeName`
      String.validateJsonElement(jsonObj.get("TypeName"));
      // validate the required field `SchemaVersion`
      String.validateJsonElement(jsonObj.get("SchemaVersion"));
      // validate the required field `CaptureTime`
      String.validateJsonElement(jsonObj.get("CaptureTime"));
      // validate the optional field `ContentHash`
      if (jsonObj.get("ContentHash") != null && !jsonObj.get("ContentHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentHash"));
      }
      // validate the optional field `Content`
      if (jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Content"));
      }
      // validate the optional field `Context`
      if (jsonObj.get("Context") != null && !jsonObj.get("Context").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Context"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryItem>() {
           @Override
           public void write(JsonWriter out, InventoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryItem
   * @throws IOException if the JSON string is invalid with respect to InventoryItem
   */
  public static InventoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryItem.class);
  }

  /**
   * Convert an instance of InventoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

