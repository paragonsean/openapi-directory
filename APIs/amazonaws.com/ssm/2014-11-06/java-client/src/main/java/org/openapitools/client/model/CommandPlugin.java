/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CommandPluginStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes plugin details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommandPlugin {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CommandPluginStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "StatusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "ResponseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private Integer responseCode;

  public static final String SERIALIZED_NAME_RESPONSE_START_DATE_TIME = "ResponseStartDateTime";
  @SerializedName(SERIALIZED_NAME_RESPONSE_START_DATE_TIME)
  private OffsetDateTime responseStartDateTime;

  public static final String SERIALIZED_NAME_RESPONSE_FINISH_DATE_TIME = "ResponseFinishDateTime";
  @SerializedName(SERIALIZED_NAME_RESPONSE_FINISH_DATE_TIME)
  private OffsetDateTime responseFinishDateTime;

  public static final String SERIALIZED_NAME_OUTPUT = "Output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private String output;

  public static final String SERIALIZED_NAME_STANDARD_OUTPUT_URL = "StandardOutputUrl";
  @SerializedName(SERIALIZED_NAME_STANDARD_OUTPUT_URL)
  private String standardOutputUrl;

  public static final String SERIALIZED_NAME_STANDARD_ERROR_URL = "StandardErrorUrl";
  @SerializedName(SERIALIZED_NAME_STANDARD_ERROR_URL)
  private String standardErrorUrl;

  public static final String SERIALIZED_NAME_OUTPUT_S3_REGION = "OutputS3Region";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_REGION)
  private String outputS3Region;

  public static final String SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME = "OutputS3BucketName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME)
  private String outputS3BucketName;

  public static final String SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX = "OutputS3KeyPrefix";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX)
  private String outputS3KeyPrefix;

  public CommandPlugin() {
  }

  public CommandPlugin name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CommandPlugin status(CommandPluginStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CommandPluginStatus getStatus() {
    return status;
  }

  public void setStatus(CommandPluginStatus status) {
    this.status = status;
  }


  public CommandPlugin statusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  /**
   * Get statusDetails
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
  }


  public CommandPlugin responseCode(Integer responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  /**
   * Get responseCode
   * @return responseCode
   */
  @javax.annotation.Nullable
  public Integer getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(Integer responseCode) {
    this.responseCode = responseCode;
  }


  public CommandPlugin responseStartDateTime(OffsetDateTime responseStartDateTime) {
    this.responseStartDateTime = responseStartDateTime;
    return this;
  }

  /**
   * Get responseStartDateTime
   * @return responseStartDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResponseStartDateTime() {
    return responseStartDateTime;
  }

  public void setResponseStartDateTime(OffsetDateTime responseStartDateTime) {
    this.responseStartDateTime = responseStartDateTime;
  }


  public CommandPlugin responseFinishDateTime(OffsetDateTime responseFinishDateTime) {
    this.responseFinishDateTime = responseFinishDateTime;
    return this;
  }

  /**
   * Get responseFinishDateTime
   * @return responseFinishDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResponseFinishDateTime() {
    return responseFinishDateTime;
  }

  public void setResponseFinishDateTime(OffsetDateTime responseFinishDateTime) {
    this.responseFinishDateTime = responseFinishDateTime;
  }


  public CommandPlugin output(String output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public String getOutput() {
    return output;
  }

  public void setOutput(String output) {
    this.output = output;
  }


  public CommandPlugin standardOutputUrl(String standardOutputUrl) {
    this.standardOutputUrl = standardOutputUrl;
    return this;
  }

  /**
   * Get standardOutputUrl
   * @return standardOutputUrl
   */
  @javax.annotation.Nullable
  public String getStandardOutputUrl() {
    return standardOutputUrl;
  }

  public void setStandardOutputUrl(String standardOutputUrl) {
    this.standardOutputUrl = standardOutputUrl;
  }


  public CommandPlugin standardErrorUrl(String standardErrorUrl) {
    this.standardErrorUrl = standardErrorUrl;
    return this;
  }

  /**
   * Get standardErrorUrl
   * @return standardErrorUrl
   */
  @javax.annotation.Nullable
  public String getStandardErrorUrl() {
    return standardErrorUrl;
  }

  public void setStandardErrorUrl(String standardErrorUrl) {
    this.standardErrorUrl = standardErrorUrl;
  }


  public CommandPlugin outputS3Region(String outputS3Region) {
    this.outputS3Region = outputS3Region;
    return this;
  }

  /**
   * Get outputS3Region
   * @return outputS3Region
   */
  @javax.annotation.Nullable
  public String getOutputS3Region() {
    return outputS3Region;
  }

  public void setOutputS3Region(String outputS3Region) {
    this.outputS3Region = outputS3Region;
  }


  public CommandPlugin outputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
    return this;
  }

  /**
   * Get outputS3BucketName
   * @return outputS3BucketName
   */
  @javax.annotation.Nullable
  public String getOutputS3BucketName() {
    return outputS3BucketName;
  }

  public void setOutputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
  }


  public CommandPlugin outputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
    return this;
  }

  /**
   * Get outputS3KeyPrefix
   * @return outputS3KeyPrefix
   */
  @javax.annotation.Nullable
  public String getOutputS3KeyPrefix() {
    return outputS3KeyPrefix;
  }

  public void setOutputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommandPlugin commandPlugin = (CommandPlugin) o;
    return Objects.equals(this.name, commandPlugin.name) &&
        Objects.equals(this.status, commandPlugin.status) &&
        Objects.equals(this.statusDetails, commandPlugin.statusDetails) &&
        Objects.equals(this.responseCode, commandPlugin.responseCode) &&
        Objects.equals(this.responseStartDateTime, commandPlugin.responseStartDateTime) &&
        Objects.equals(this.responseFinishDateTime, commandPlugin.responseFinishDateTime) &&
        Objects.equals(this.output, commandPlugin.output) &&
        Objects.equals(this.standardOutputUrl, commandPlugin.standardOutputUrl) &&
        Objects.equals(this.standardErrorUrl, commandPlugin.standardErrorUrl) &&
        Objects.equals(this.outputS3Region, commandPlugin.outputS3Region) &&
        Objects.equals(this.outputS3BucketName, commandPlugin.outputS3BucketName) &&
        Objects.equals(this.outputS3KeyPrefix, commandPlugin.outputS3KeyPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, status, statusDetails, responseCode, responseStartDateTime, responseFinishDateTime, output, standardOutputUrl, standardErrorUrl, outputS3Region, outputS3BucketName, outputS3KeyPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommandPlugin {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseStartDateTime: ").append(toIndentedString(responseStartDateTime)).append("\n");
    sb.append("    responseFinishDateTime: ").append(toIndentedString(responseFinishDateTime)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    standardOutputUrl: ").append(toIndentedString(standardOutputUrl)).append("\n");
    sb.append("    standardErrorUrl: ").append(toIndentedString(standardErrorUrl)).append("\n");
    sb.append("    outputS3Region: ").append(toIndentedString(outputS3Region)).append("\n");
    sb.append("    outputS3BucketName: ").append(toIndentedString(outputS3BucketName)).append("\n");
    sb.append("    outputS3KeyPrefix: ").append(toIndentedString(outputS3KeyPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("StatusDetails");
    openapiFields.add("ResponseCode");
    openapiFields.add("ResponseStartDateTime");
    openapiFields.add("ResponseFinishDateTime");
    openapiFields.add("Output");
    openapiFields.add("StandardOutputUrl");
    openapiFields.add("StandardErrorUrl");
    openapiFields.add("OutputS3Region");
    openapiFields.add("OutputS3BucketName");
    openapiFields.add("OutputS3KeyPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommandPlugin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommandPlugin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommandPlugin is not found in the empty JSON string", CommandPlugin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommandPlugin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommandPlugin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        CommandPluginStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusDetails`
      if (jsonObj.get("StatusDetails") != null && !jsonObj.get("StatusDetails").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusDetails"));
      }
      // validate the optional field `ResponseCode`
      if (jsonObj.get("ResponseCode") != null && !jsonObj.get("ResponseCode").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ResponseCode"));
      }
      // validate the optional field `ResponseStartDateTime`
      if (jsonObj.get("ResponseStartDateTime") != null && !jsonObj.get("ResponseStartDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ResponseStartDateTime"));
      }
      // validate the optional field `ResponseFinishDateTime`
      if (jsonObj.get("ResponseFinishDateTime") != null && !jsonObj.get("ResponseFinishDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ResponseFinishDateTime"));
      }
      // validate the optional field `Output`
      if (jsonObj.get("Output") != null && !jsonObj.get("Output").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Output"));
      }
      // validate the optional field `StandardOutputUrl`
      if (jsonObj.get("StandardOutputUrl") != null && !jsonObj.get("StandardOutputUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StandardOutputUrl"));
      }
      // validate the optional field `StandardErrorUrl`
      if (jsonObj.get("StandardErrorUrl") != null && !jsonObj.get("StandardErrorUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StandardErrorUrl"));
      }
      // validate the optional field `OutputS3Region`
      if (jsonObj.get("OutputS3Region") != null && !jsonObj.get("OutputS3Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3Region"));
      }
      // validate the optional field `OutputS3BucketName`
      if (jsonObj.get("OutputS3BucketName") != null && !jsonObj.get("OutputS3BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3BucketName"));
      }
      // validate the optional field `OutputS3KeyPrefix`
      if (jsonObj.get("OutputS3KeyPrefix") != null && !jsonObj.get("OutputS3KeyPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3KeyPrefix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommandPlugin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommandPlugin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommandPlugin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommandPlugin.class));

       return (TypeAdapter<T>) new TypeAdapter<CommandPlugin>() {
           @Override
           public void write(JsonWriter out, CommandPlugin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommandPlugin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommandPlugin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommandPlugin
   * @throws IOException if the JSON string is invalid with respect to CommandPlugin
   */
  public static CommandPlugin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommandPlugin.class);
  }

  /**
   * Convert an instance of CommandPlugin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

