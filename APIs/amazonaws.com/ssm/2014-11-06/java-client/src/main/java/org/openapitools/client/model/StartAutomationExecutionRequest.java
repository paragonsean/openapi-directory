/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ExecutionMode;
import org.openapitools.client.model.StartAutomationExecutionRequestAlarmConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartAutomationExecutionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartAutomationExecutionRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "DocumentName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "DocumentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ExecutionMode mode;

  public static final String SERIALIZED_NAME_TARGET_PARAMETER_NAME = "TargetParameterName";
  @SerializedName(SERIALIZED_NAME_TARGET_PARAMETER_NAME)
  private String targetParameterName;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List targets;

  public static final String SERIALIZED_NAME_TARGET_MAPS = "TargetMaps";
  @SerializedName(SERIALIZED_NAME_TARGET_MAPS)
  private List targetMaps;

  public static final String SERIALIZED_NAME_MAX_CONCURRENCY = "MaxConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENCY)
  private String maxConcurrency;

  public static final String SERIALIZED_NAME_MAX_ERRORS = "MaxErrors";
  @SerializedName(SERIALIZED_NAME_MAX_ERRORS)
  private String maxErrors;

  public static final String SERIALIZED_NAME_TARGET_LOCATIONS = "TargetLocations";
  @SerializedName(SERIALIZED_NAME_TARGET_LOCATIONS)
  private List targetLocations;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ALARM_CONFIGURATION = "AlarmConfiguration";
  @SerializedName(SERIALIZED_NAME_ALARM_CONFIGURATION)
  private StartAutomationExecutionRequestAlarmConfiguration alarmConfiguration;

  public StartAutomationExecutionRequest() {
  }

  public StartAutomationExecutionRequest documentName(String documentName) {
    this.documentName = documentName;
    return this;
  }

  /**
   * Get documentName
   * @return documentName
   */
  @javax.annotation.Nonnull
  public String getDocumentName() {
    return documentName;
  }

  public void setDocumentName(String documentName) {
    this.documentName = documentName;
  }


  public StartAutomationExecutionRequest documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public StartAutomationExecutionRequest parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public StartAutomationExecutionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartAutomationExecutionRequest mode(ExecutionMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ExecutionMode getMode() {
    return mode;
  }

  public void setMode(ExecutionMode mode) {
    this.mode = mode;
  }


  public StartAutomationExecutionRequest targetParameterName(String targetParameterName) {
    this.targetParameterName = targetParameterName;
    return this;
  }

  /**
   * Get targetParameterName
   * @return targetParameterName
   */
  @javax.annotation.Nullable
  public String getTargetParameterName() {
    return targetParameterName;
  }

  public void setTargetParameterName(String targetParameterName) {
    this.targetParameterName = targetParameterName;
  }


  public StartAutomationExecutionRequest targets(List targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List getTargets() {
    return targets;
  }

  public void setTargets(List targets) {
    this.targets = targets;
  }


  public StartAutomationExecutionRequest targetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
    return this;
  }

  /**
   * Get targetMaps
   * @return targetMaps
   */
  @javax.annotation.Nullable
  public List getTargetMaps() {
    return targetMaps;
  }

  public void setTargetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
  }


  public StartAutomationExecutionRequest maxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
    return this;
  }

  /**
   * Get maxConcurrency
   * @return maxConcurrency
   */
  @javax.annotation.Nullable
  public String getMaxConcurrency() {
    return maxConcurrency;
  }

  public void setMaxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }


  public StartAutomationExecutionRequest maxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
    return this;
  }

  /**
   * Get maxErrors
   * @return maxErrors
   */
  @javax.annotation.Nullable
  public String getMaxErrors() {
    return maxErrors;
  }

  public void setMaxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
  }


  public StartAutomationExecutionRequest targetLocations(List targetLocations) {
    this.targetLocations = targetLocations;
    return this;
  }

  /**
   * Get targetLocations
   * @return targetLocations
   */
  @javax.annotation.Nullable
  public List getTargetLocations() {
    return targetLocations;
  }

  public void setTargetLocations(List targetLocations) {
    this.targetLocations = targetLocations;
  }


  public StartAutomationExecutionRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public StartAutomationExecutionRequest alarmConfiguration(StartAutomationExecutionRequestAlarmConfiguration alarmConfiguration) {
    this.alarmConfiguration = alarmConfiguration;
    return this;
  }

  /**
   * Get alarmConfiguration
   * @return alarmConfiguration
   */
  @javax.annotation.Nullable
  public StartAutomationExecutionRequestAlarmConfiguration getAlarmConfiguration() {
    return alarmConfiguration;
  }

  public void setAlarmConfiguration(StartAutomationExecutionRequestAlarmConfiguration alarmConfiguration) {
    this.alarmConfiguration = alarmConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartAutomationExecutionRequest startAutomationExecutionRequest = (StartAutomationExecutionRequest) o;
    return Objects.equals(this.documentName, startAutomationExecutionRequest.documentName) &&
        Objects.equals(this.documentVersion, startAutomationExecutionRequest.documentVersion) &&
        Objects.equals(this.parameters, startAutomationExecutionRequest.parameters) &&
        Objects.equals(this.clientToken, startAutomationExecutionRequest.clientToken) &&
        Objects.equals(this.mode, startAutomationExecutionRequest.mode) &&
        Objects.equals(this.targetParameterName, startAutomationExecutionRequest.targetParameterName) &&
        Objects.equals(this.targets, startAutomationExecutionRequest.targets) &&
        Objects.equals(this.targetMaps, startAutomationExecutionRequest.targetMaps) &&
        Objects.equals(this.maxConcurrency, startAutomationExecutionRequest.maxConcurrency) &&
        Objects.equals(this.maxErrors, startAutomationExecutionRequest.maxErrors) &&
        Objects.equals(this.targetLocations, startAutomationExecutionRequest.targetLocations) &&
        Objects.equals(this.tags, startAutomationExecutionRequest.tags) &&
        Objects.equals(this.alarmConfiguration, startAutomationExecutionRequest.alarmConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentName, documentVersion, parameters, clientToken, mode, targetParameterName, targets, targetMaps, maxConcurrency, maxErrors, targetLocations, tags, alarmConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartAutomationExecutionRequest {\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    targetParameterName: ").append(toIndentedString(targetParameterName)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    targetMaps: ").append(toIndentedString(targetMaps)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    maxErrors: ").append(toIndentedString(maxErrors)).append("\n");
    sb.append("    targetLocations: ").append(toIndentedString(targetLocations)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    alarmConfiguration: ").append(toIndentedString(alarmConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentName");
    openapiFields.add("DocumentVersion");
    openapiFields.add("Parameters");
    openapiFields.add("ClientToken");
    openapiFields.add("Mode");
    openapiFields.add("TargetParameterName");
    openapiFields.add("Targets");
    openapiFields.add("TargetMaps");
    openapiFields.add("MaxConcurrency");
    openapiFields.add("MaxErrors");
    openapiFields.add("TargetLocations");
    openapiFields.add("Tags");
    openapiFields.add("AlarmConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartAutomationExecutionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartAutomationExecutionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartAutomationExecutionRequest is not found in the empty JSON string", StartAutomationExecutionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartAutomationExecutionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartAutomationExecutionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartAutomationExecutionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DocumentName`
      String.validateJsonElement(jsonObj.get("DocumentName"));
      // validate the optional field `DocumentVersion`
      if (jsonObj.get("DocumentVersion") != null && !jsonObj.get("DocumentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentVersion"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        ExecutionMode.validateJsonElement(jsonObj.get("Mode"));
      }
      // validate the optional field `TargetParameterName`
      if (jsonObj.get("TargetParameterName") != null && !jsonObj.get("TargetParameterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetParameterName"));
      }
      // validate the optional field `Targets`
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Targets"));
      }
      // validate the optional field `TargetMaps`
      if (jsonObj.get("TargetMaps") != null && !jsonObj.get("TargetMaps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetMaps"));
      }
      // validate the optional field `MaxConcurrency`
      if (jsonObj.get("MaxConcurrency") != null && !jsonObj.get("MaxConcurrency").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxConcurrency"));
      }
      // validate the optional field `MaxErrors`
      if (jsonObj.get("MaxErrors") != null && !jsonObj.get("MaxErrors").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxErrors"));
      }
      // validate the optional field `TargetLocations`
      if (jsonObj.get("TargetLocations") != null && !jsonObj.get("TargetLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetLocations"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `AlarmConfiguration`
      if (jsonObj.get("AlarmConfiguration") != null && !jsonObj.get("AlarmConfiguration").isJsonNull()) {
        StartAutomationExecutionRequestAlarmConfiguration.validateJsonElement(jsonObj.get("AlarmConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartAutomationExecutionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartAutomationExecutionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartAutomationExecutionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartAutomationExecutionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartAutomationExecutionRequest>() {
           @Override
           public void write(JsonWriter out, StartAutomationExecutionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartAutomationExecutionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartAutomationExecutionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartAutomationExecutionRequest
   * @throws IOException if the JSON string is invalid with respect to StartAutomationExecutionRequest
   */
  public static StartAutomationExecutionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartAutomationExecutionRequest.class);
  }

  /**
   * Convert an instance of StartAutomationExecutionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

