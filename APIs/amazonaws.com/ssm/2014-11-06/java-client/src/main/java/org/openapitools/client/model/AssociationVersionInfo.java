/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AssociationComplianceSeverity;
import org.openapitools.client.model.AssociationSyncCompliance;
import org.openapitools.client.model.AssociationVersionInfoOutputLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the association version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociationVersionInfo {
  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_ASSOCIATION_VERSION = "AssociationVersion";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_VERSION)
  private String associationVersion;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "DocumentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List targets;

  public static final String SERIALIZED_NAME_SCHEDULE_EXPRESSION = "ScheduleExpression";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EXPRESSION)
  private String scheduleExpression;

  public static final String SERIALIZED_NAME_OUTPUT_LOCATION = "OutputLocation";
  @SerializedName(SERIALIZED_NAME_OUTPUT_LOCATION)
  private AssociationVersionInfoOutputLocation outputLocation;

  public static final String SERIALIZED_NAME_ASSOCIATION_NAME = "AssociationName";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_NAME)
  private String associationName;

  public static final String SERIALIZED_NAME_MAX_ERRORS = "MaxErrors";
  @SerializedName(SERIALIZED_NAME_MAX_ERRORS)
  private String maxErrors;

  public static final String SERIALIZED_NAME_MAX_CONCURRENCY = "MaxConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENCY)
  private String maxConcurrency;

  public static final String SERIALIZED_NAME_COMPLIANCE_SEVERITY = "ComplianceSeverity";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_SEVERITY)
  private AssociationComplianceSeverity complianceSeverity;

  public static final String SERIALIZED_NAME_SYNC_COMPLIANCE = "SyncCompliance";
  @SerializedName(SERIALIZED_NAME_SYNC_COMPLIANCE)
  private AssociationSyncCompliance syncCompliance;

  public static final String SERIALIZED_NAME_APPLY_ONLY_AT_CRON_INTERVAL = "ApplyOnlyAtCronInterval";
  @SerializedName(SERIALIZED_NAME_APPLY_ONLY_AT_CRON_INTERVAL)
  private Boolean applyOnlyAtCronInterval;

  public static final String SERIALIZED_NAME_CALENDAR_NAMES = "CalendarNames";
  @SerializedName(SERIALIZED_NAME_CALENDAR_NAMES)
  private List calendarNames;

  public static final String SERIALIZED_NAME_TARGET_LOCATIONS = "TargetLocations";
  @SerializedName(SERIALIZED_NAME_TARGET_LOCATIONS)
  private List targetLocations;

  public static final String SERIALIZED_NAME_SCHEDULE_OFFSET = "ScheduleOffset";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_OFFSET)
  private Integer scheduleOffset;

  public static final String SERIALIZED_NAME_TARGET_MAPS = "TargetMaps";
  @SerializedName(SERIALIZED_NAME_TARGET_MAPS)
  private List targetMaps;

  public AssociationVersionInfo() {
  }

  public AssociationVersionInfo associationId(String associationId) {
    this.associationId = associationId;
    return this;
  }

  /**
   * Get associationId
   * @return associationId
   */
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }

  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public AssociationVersionInfo associationVersion(String associationVersion) {
    this.associationVersion = associationVersion;
    return this;
  }

  /**
   * Get associationVersion
   * @return associationVersion
   */
  @javax.annotation.Nullable
  public String getAssociationVersion() {
    return associationVersion;
  }

  public void setAssociationVersion(String associationVersion) {
    this.associationVersion = associationVersion;
  }


  public AssociationVersionInfo createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public AssociationVersionInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssociationVersionInfo documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public AssociationVersionInfo parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public AssociationVersionInfo targets(List targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List getTargets() {
    return targets;
  }

  public void setTargets(List targets) {
    this.targets = targets;
  }


  public AssociationVersionInfo scheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
    return this;
  }

  /**
   * Get scheduleExpression
   * @return scheduleExpression
   */
  @javax.annotation.Nullable
  public String getScheduleExpression() {
    return scheduleExpression;
  }

  public void setScheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
  }


  public AssociationVersionInfo outputLocation(AssociationVersionInfoOutputLocation outputLocation) {
    this.outputLocation = outputLocation;
    return this;
  }

  /**
   * Get outputLocation
   * @return outputLocation
   */
  @javax.annotation.Nullable
  public AssociationVersionInfoOutputLocation getOutputLocation() {
    return outputLocation;
  }

  public void setOutputLocation(AssociationVersionInfoOutputLocation outputLocation) {
    this.outputLocation = outputLocation;
  }


  public AssociationVersionInfo associationName(String associationName) {
    this.associationName = associationName;
    return this;
  }

  /**
   * Get associationName
   * @return associationName
   */
  @javax.annotation.Nullable
  public String getAssociationName() {
    return associationName;
  }

  public void setAssociationName(String associationName) {
    this.associationName = associationName;
  }


  public AssociationVersionInfo maxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
    return this;
  }

  /**
   * Get maxErrors
   * @return maxErrors
   */
  @javax.annotation.Nullable
  public String getMaxErrors() {
    return maxErrors;
  }

  public void setMaxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
  }


  public AssociationVersionInfo maxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
    return this;
  }

  /**
   * Get maxConcurrency
   * @return maxConcurrency
   */
  @javax.annotation.Nullable
  public String getMaxConcurrency() {
    return maxConcurrency;
  }

  public void setMaxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }


  public AssociationVersionInfo complianceSeverity(AssociationComplianceSeverity complianceSeverity) {
    this.complianceSeverity = complianceSeverity;
    return this;
  }

  /**
   * Get complianceSeverity
   * @return complianceSeverity
   */
  @javax.annotation.Nullable
  public AssociationComplianceSeverity getComplianceSeverity() {
    return complianceSeverity;
  }

  public void setComplianceSeverity(AssociationComplianceSeverity complianceSeverity) {
    this.complianceSeverity = complianceSeverity;
  }


  public AssociationVersionInfo syncCompliance(AssociationSyncCompliance syncCompliance) {
    this.syncCompliance = syncCompliance;
    return this;
  }

  /**
   * Get syncCompliance
   * @return syncCompliance
   */
  @javax.annotation.Nullable
  public AssociationSyncCompliance getSyncCompliance() {
    return syncCompliance;
  }

  public void setSyncCompliance(AssociationSyncCompliance syncCompliance) {
    this.syncCompliance = syncCompliance;
  }


  public AssociationVersionInfo applyOnlyAtCronInterval(Boolean applyOnlyAtCronInterval) {
    this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
    return this;
  }

  /**
   * Get applyOnlyAtCronInterval
   * @return applyOnlyAtCronInterval
   */
  @javax.annotation.Nullable
  public Boolean getApplyOnlyAtCronInterval() {
    return applyOnlyAtCronInterval;
  }

  public void setApplyOnlyAtCronInterval(Boolean applyOnlyAtCronInterval) {
    this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
  }


  public AssociationVersionInfo calendarNames(List calendarNames) {
    this.calendarNames = calendarNames;
    return this;
  }

  /**
   * Get calendarNames
   * @return calendarNames
   */
  @javax.annotation.Nullable
  public List getCalendarNames() {
    return calendarNames;
  }

  public void setCalendarNames(List calendarNames) {
    this.calendarNames = calendarNames;
  }


  public AssociationVersionInfo targetLocations(List targetLocations) {
    this.targetLocations = targetLocations;
    return this;
  }

  /**
   * Get targetLocations
   * @return targetLocations
   */
  @javax.annotation.Nullable
  public List getTargetLocations() {
    return targetLocations;
  }

  public void setTargetLocations(List targetLocations) {
    this.targetLocations = targetLocations;
  }


  public AssociationVersionInfo scheduleOffset(Integer scheduleOffset) {
    this.scheduleOffset = scheduleOffset;
    return this;
  }

  /**
   * Get scheduleOffset
   * @return scheduleOffset
   */
  @javax.annotation.Nullable
  public Integer getScheduleOffset() {
    return scheduleOffset;
  }

  public void setScheduleOffset(Integer scheduleOffset) {
    this.scheduleOffset = scheduleOffset;
  }


  public AssociationVersionInfo targetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
    return this;
  }

  /**
   * Get targetMaps
   * @return targetMaps
   */
  @javax.annotation.Nullable
  public List getTargetMaps() {
    return targetMaps;
  }

  public void setTargetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociationVersionInfo associationVersionInfo = (AssociationVersionInfo) o;
    return Objects.equals(this.associationId, associationVersionInfo.associationId) &&
        Objects.equals(this.associationVersion, associationVersionInfo.associationVersion) &&
        Objects.equals(this.createdDate, associationVersionInfo.createdDate) &&
        Objects.equals(this.name, associationVersionInfo.name) &&
        Objects.equals(this.documentVersion, associationVersionInfo.documentVersion) &&
        Objects.equals(this.parameters, associationVersionInfo.parameters) &&
        Objects.equals(this.targets, associationVersionInfo.targets) &&
        Objects.equals(this.scheduleExpression, associationVersionInfo.scheduleExpression) &&
        Objects.equals(this.outputLocation, associationVersionInfo.outputLocation) &&
        Objects.equals(this.associationName, associationVersionInfo.associationName) &&
        Objects.equals(this.maxErrors, associationVersionInfo.maxErrors) &&
        Objects.equals(this.maxConcurrency, associationVersionInfo.maxConcurrency) &&
        Objects.equals(this.complianceSeverity, associationVersionInfo.complianceSeverity) &&
        Objects.equals(this.syncCompliance, associationVersionInfo.syncCompliance) &&
        Objects.equals(this.applyOnlyAtCronInterval, associationVersionInfo.applyOnlyAtCronInterval) &&
        Objects.equals(this.calendarNames, associationVersionInfo.calendarNames) &&
        Objects.equals(this.targetLocations, associationVersionInfo.targetLocations) &&
        Objects.equals(this.scheduleOffset, associationVersionInfo.scheduleOffset) &&
        Objects.equals(this.targetMaps, associationVersionInfo.targetMaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associationId, associationVersion, createdDate, name, documentVersion, parameters, targets, scheduleExpression, outputLocation, associationName, maxErrors, maxConcurrency, complianceSeverity, syncCompliance, applyOnlyAtCronInterval, calendarNames, targetLocations, scheduleOffset, targetMaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociationVersionInfo {\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    associationVersion: ").append(toIndentedString(associationVersion)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    scheduleExpression: ").append(toIndentedString(scheduleExpression)).append("\n");
    sb.append("    outputLocation: ").append(toIndentedString(outputLocation)).append("\n");
    sb.append("    associationName: ").append(toIndentedString(associationName)).append("\n");
    sb.append("    maxErrors: ").append(toIndentedString(maxErrors)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    complianceSeverity: ").append(toIndentedString(complianceSeverity)).append("\n");
    sb.append("    syncCompliance: ").append(toIndentedString(syncCompliance)).append("\n");
    sb.append("    applyOnlyAtCronInterval: ").append(toIndentedString(applyOnlyAtCronInterval)).append("\n");
    sb.append("    calendarNames: ").append(toIndentedString(calendarNames)).append("\n");
    sb.append("    targetLocations: ").append(toIndentedString(targetLocations)).append("\n");
    sb.append("    scheduleOffset: ").append(toIndentedString(scheduleOffset)).append("\n");
    sb.append("    targetMaps: ").append(toIndentedString(targetMaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssociationId");
    openapiFields.add("AssociationVersion");
    openapiFields.add("CreatedDate");
    openapiFields.add("Name");
    openapiFields.add("DocumentVersion");
    openapiFields.add("Parameters");
    openapiFields.add("Targets");
    openapiFields.add("ScheduleExpression");
    openapiFields.add("OutputLocation");
    openapiFields.add("AssociationName");
    openapiFields.add("MaxErrors");
    openapiFields.add("MaxConcurrency");
    openapiFields.add("ComplianceSeverity");
    openapiFields.add("SyncCompliance");
    openapiFields.add("ApplyOnlyAtCronInterval");
    openapiFields.add("CalendarNames");
    openapiFields.add("TargetLocations");
    openapiFields.add("ScheduleOffset");
    openapiFields.add("TargetMaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociationVersionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociationVersionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociationVersionInfo is not found in the empty JSON string", AssociationVersionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociationVersionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociationVersionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssociationId`
      if (jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationId"));
      }
      // validate the optional field `AssociationVersion`
      if (jsonObj.get("AssociationVersion") != null && !jsonObj.get("AssociationVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationVersion"));
      }
      // validate the optional field `CreatedDate`
      if (jsonObj.get("CreatedDate") != null && !jsonObj.get("CreatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedDate"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `DocumentVersion`
      if (jsonObj.get("DocumentVersion") != null && !jsonObj.get("DocumentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentVersion"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `Targets`
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Targets"));
      }
      // validate the optional field `ScheduleExpression`
      if (jsonObj.get("ScheduleExpression") != null && !jsonObj.get("ScheduleExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ScheduleExpression"));
      }
      // validate the optional field `OutputLocation`
      if (jsonObj.get("OutputLocation") != null && !jsonObj.get("OutputLocation").isJsonNull()) {
        AssociationVersionInfoOutputLocation.validateJsonElement(jsonObj.get("OutputLocation"));
      }
      // validate the optional field `AssociationName`
      if (jsonObj.get("AssociationName") != null && !jsonObj.get("AssociationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationName"));
      }
      // validate the optional field `MaxErrors`
      if (jsonObj.get("MaxErrors") != null && !jsonObj.get("MaxErrors").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxErrors"));
      }
      // validate the optional field `MaxConcurrency`
      if (jsonObj.get("MaxConcurrency") != null && !jsonObj.get("MaxConcurrency").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxConcurrency"));
      }
      // validate the optional field `ComplianceSeverity`
      if (jsonObj.get("ComplianceSeverity") != null && !jsonObj.get("ComplianceSeverity").isJsonNull()) {
        AssociationComplianceSeverity.validateJsonElement(jsonObj.get("ComplianceSeverity"));
      }
      // validate the optional field `SyncCompliance`
      if (jsonObj.get("SyncCompliance") != null && !jsonObj.get("SyncCompliance").isJsonNull()) {
        AssociationSyncCompliance.validateJsonElement(jsonObj.get("SyncCompliance"));
      }
      // validate the optional field `ApplyOnlyAtCronInterval`
      if (jsonObj.get("ApplyOnlyAtCronInterval") != null && !jsonObj.get("ApplyOnlyAtCronInterval").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApplyOnlyAtCronInterval"));
      }
      // validate the optional field `CalendarNames`
      if (jsonObj.get("CalendarNames") != null && !jsonObj.get("CalendarNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CalendarNames"));
      }
      // validate the optional field `TargetLocations`
      if (jsonObj.get("TargetLocations") != null && !jsonObj.get("TargetLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetLocations"));
      }
      // validate the optional field `ScheduleOffset`
      if (jsonObj.get("ScheduleOffset") != null && !jsonObj.get("ScheduleOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ScheduleOffset"));
      }
      // validate the optional field `TargetMaps`
      if (jsonObj.get("TargetMaps") != null && !jsonObj.get("TargetMaps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetMaps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociationVersionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociationVersionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociationVersionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociationVersionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociationVersionInfo>() {
           @Override
           public void write(JsonWriter out, AssociationVersionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociationVersionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociationVersionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociationVersionInfo
   * @throws IOException if the JSON string is invalid with respect to AssociationVersionInfo
   */
  public static AssociationVersionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociationVersionInfo.class);
  }

  /**
   * Convert an instance of AssociationVersionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

