/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribePatchGroupStateResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribePatchGroupStateResult {
  public static final String SERIALIZED_NAME_INSTANCES = "Instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private Integer instances;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_PATCHES = "InstancesWithInstalledPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_PATCHES)
  private Integer instancesWithInstalledPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_OTHER_PATCHES = "InstancesWithInstalledOtherPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_OTHER_PATCHES)
  private Integer instancesWithInstalledOtherPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_PENDING_REBOOT_PATCHES = "InstancesWithInstalledPendingRebootPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_PENDING_REBOOT_PATCHES)
  private Integer instancesWithInstalledPendingRebootPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_REJECTED_PATCHES = "InstancesWithInstalledRejectedPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_INSTALLED_REJECTED_PATCHES)
  private Integer instancesWithInstalledRejectedPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_MISSING_PATCHES = "InstancesWithMissingPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_MISSING_PATCHES)
  private Integer instancesWithMissingPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_FAILED_PATCHES = "InstancesWithFailedPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_FAILED_PATCHES)
  private Integer instancesWithFailedPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_NOT_APPLICABLE_PATCHES = "InstancesWithNotApplicablePatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_NOT_APPLICABLE_PATCHES)
  private Integer instancesWithNotApplicablePatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_UNREPORTED_NOT_APPLICABLE_PATCHES = "InstancesWithUnreportedNotApplicablePatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_UNREPORTED_NOT_APPLICABLE_PATCHES)
  private Integer instancesWithUnreportedNotApplicablePatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_CRITICAL_NON_COMPLIANT_PATCHES = "InstancesWithCriticalNonCompliantPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_CRITICAL_NON_COMPLIANT_PATCHES)
  private Integer instancesWithCriticalNonCompliantPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_SECURITY_NON_COMPLIANT_PATCHES = "InstancesWithSecurityNonCompliantPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_SECURITY_NON_COMPLIANT_PATCHES)
  private Integer instancesWithSecurityNonCompliantPatches;

  public static final String SERIALIZED_NAME_INSTANCES_WITH_OTHER_NON_COMPLIANT_PATCHES = "InstancesWithOtherNonCompliantPatches";
  @SerializedName(SERIALIZED_NAME_INSTANCES_WITH_OTHER_NON_COMPLIANT_PATCHES)
  private Integer instancesWithOtherNonCompliantPatches;

  public DescribePatchGroupStateResult() {
  }

  public DescribePatchGroupStateResult instances(Integer instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Get instances
   * @return instances
   */
  @javax.annotation.Nullable
  public Integer getInstances() {
    return instances;
  }

  public void setInstances(Integer instances) {
    this.instances = instances;
  }


  public DescribePatchGroupStateResult instancesWithInstalledPatches(Integer instancesWithInstalledPatches) {
    this.instancesWithInstalledPatches = instancesWithInstalledPatches;
    return this;
  }

  /**
   * Get instancesWithInstalledPatches
   * @return instancesWithInstalledPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithInstalledPatches() {
    return instancesWithInstalledPatches;
  }

  public void setInstancesWithInstalledPatches(Integer instancesWithInstalledPatches) {
    this.instancesWithInstalledPatches = instancesWithInstalledPatches;
  }


  public DescribePatchGroupStateResult instancesWithInstalledOtherPatches(Integer instancesWithInstalledOtherPatches) {
    this.instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatches;
    return this;
  }

  /**
   * Get instancesWithInstalledOtherPatches
   * @return instancesWithInstalledOtherPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithInstalledOtherPatches() {
    return instancesWithInstalledOtherPatches;
  }

  public void setInstancesWithInstalledOtherPatches(Integer instancesWithInstalledOtherPatches) {
    this.instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatches;
  }


  public DescribePatchGroupStateResult instancesWithInstalledPendingRebootPatches(Integer instancesWithInstalledPendingRebootPatches) {
    this.instancesWithInstalledPendingRebootPatches = instancesWithInstalledPendingRebootPatches;
    return this;
  }

  /**
   * Get instancesWithInstalledPendingRebootPatches
   * @return instancesWithInstalledPendingRebootPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithInstalledPendingRebootPatches() {
    return instancesWithInstalledPendingRebootPatches;
  }

  public void setInstancesWithInstalledPendingRebootPatches(Integer instancesWithInstalledPendingRebootPatches) {
    this.instancesWithInstalledPendingRebootPatches = instancesWithInstalledPendingRebootPatches;
  }


  public DescribePatchGroupStateResult instancesWithInstalledRejectedPatches(Integer instancesWithInstalledRejectedPatches) {
    this.instancesWithInstalledRejectedPatches = instancesWithInstalledRejectedPatches;
    return this;
  }

  /**
   * Get instancesWithInstalledRejectedPatches
   * @return instancesWithInstalledRejectedPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithInstalledRejectedPatches() {
    return instancesWithInstalledRejectedPatches;
  }

  public void setInstancesWithInstalledRejectedPatches(Integer instancesWithInstalledRejectedPatches) {
    this.instancesWithInstalledRejectedPatches = instancesWithInstalledRejectedPatches;
  }


  public DescribePatchGroupStateResult instancesWithMissingPatches(Integer instancesWithMissingPatches) {
    this.instancesWithMissingPatches = instancesWithMissingPatches;
    return this;
  }

  /**
   * Get instancesWithMissingPatches
   * @return instancesWithMissingPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithMissingPatches() {
    return instancesWithMissingPatches;
  }

  public void setInstancesWithMissingPatches(Integer instancesWithMissingPatches) {
    this.instancesWithMissingPatches = instancesWithMissingPatches;
  }


  public DescribePatchGroupStateResult instancesWithFailedPatches(Integer instancesWithFailedPatches) {
    this.instancesWithFailedPatches = instancesWithFailedPatches;
    return this;
  }

  /**
   * Get instancesWithFailedPatches
   * @return instancesWithFailedPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithFailedPatches() {
    return instancesWithFailedPatches;
  }

  public void setInstancesWithFailedPatches(Integer instancesWithFailedPatches) {
    this.instancesWithFailedPatches = instancesWithFailedPatches;
  }


  public DescribePatchGroupStateResult instancesWithNotApplicablePatches(Integer instancesWithNotApplicablePatches) {
    this.instancesWithNotApplicablePatches = instancesWithNotApplicablePatches;
    return this;
  }

  /**
   * Get instancesWithNotApplicablePatches
   * @return instancesWithNotApplicablePatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithNotApplicablePatches() {
    return instancesWithNotApplicablePatches;
  }

  public void setInstancesWithNotApplicablePatches(Integer instancesWithNotApplicablePatches) {
    this.instancesWithNotApplicablePatches = instancesWithNotApplicablePatches;
  }


  public DescribePatchGroupStateResult instancesWithUnreportedNotApplicablePatches(Integer instancesWithUnreportedNotApplicablePatches) {
    this.instancesWithUnreportedNotApplicablePatches = instancesWithUnreportedNotApplicablePatches;
    return this;
  }

  /**
   * Get instancesWithUnreportedNotApplicablePatches
   * @return instancesWithUnreportedNotApplicablePatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithUnreportedNotApplicablePatches() {
    return instancesWithUnreportedNotApplicablePatches;
  }

  public void setInstancesWithUnreportedNotApplicablePatches(Integer instancesWithUnreportedNotApplicablePatches) {
    this.instancesWithUnreportedNotApplicablePatches = instancesWithUnreportedNotApplicablePatches;
  }


  public DescribePatchGroupStateResult instancesWithCriticalNonCompliantPatches(Integer instancesWithCriticalNonCompliantPatches) {
    this.instancesWithCriticalNonCompliantPatches = instancesWithCriticalNonCompliantPatches;
    return this;
  }

  /**
   * Get instancesWithCriticalNonCompliantPatches
   * @return instancesWithCriticalNonCompliantPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithCriticalNonCompliantPatches() {
    return instancesWithCriticalNonCompliantPatches;
  }

  public void setInstancesWithCriticalNonCompliantPatches(Integer instancesWithCriticalNonCompliantPatches) {
    this.instancesWithCriticalNonCompliantPatches = instancesWithCriticalNonCompliantPatches;
  }


  public DescribePatchGroupStateResult instancesWithSecurityNonCompliantPatches(Integer instancesWithSecurityNonCompliantPatches) {
    this.instancesWithSecurityNonCompliantPatches = instancesWithSecurityNonCompliantPatches;
    return this;
  }

  /**
   * Get instancesWithSecurityNonCompliantPatches
   * @return instancesWithSecurityNonCompliantPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithSecurityNonCompliantPatches() {
    return instancesWithSecurityNonCompliantPatches;
  }

  public void setInstancesWithSecurityNonCompliantPatches(Integer instancesWithSecurityNonCompliantPatches) {
    this.instancesWithSecurityNonCompliantPatches = instancesWithSecurityNonCompliantPatches;
  }


  public DescribePatchGroupStateResult instancesWithOtherNonCompliantPatches(Integer instancesWithOtherNonCompliantPatches) {
    this.instancesWithOtherNonCompliantPatches = instancesWithOtherNonCompliantPatches;
    return this;
  }

  /**
   * Get instancesWithOtherNonCompliantPatches
   * @return instancesWithOtherNonCompliantPatches
   */
  @javax.annotation.Nullable
  public Integer getInstancesWithOtherNonCompliantPatches() {
    return instancesWithOtherNonCompliantPatches;
  }

  public void setInstancesWithOtherNonCompliantPatches(Integer instancesWithOtherNonCompliantPatches) {
    this.instancesWithOtherNonCompliantPatches = instancesWithOtherNonCompliantPatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribePatchGroupStateResult describePatchGroupStateResult = (DescribePatchGroupStateResult) o;
    return Objects.equals(this.instances, describePatchGroupStateResult.instances) &&
        Objects.equals(this.instancesWithInstalledPatches, describePatchGroupStateResult.instancesWithInstalledPatches) &&
        Objects.equals(this.instancesWithInstalledOtherPatches, describePatchGroupStateResult.instancesWithInstalledOtherPatches) &&
        Objects.equals(this.instancesWithInstalledPendingRebootPatches, describePatchGroupStateResult.instancesWithInstalledPendingRebootPatches) &&
        Objects.equals(this.instancesWithInstalledRejectedPatches, describePatchGroupStateResult.instancesWithInstalledRejectedPatches) &&
        Objects.equals(this.instancesWithMissingPatches, describePatchGroupStateResult.instancesWithMissingPatches) &&
        Objects.equals(this.instancesWithFailedPatches, describePatchGroupStateResult.instancesWithFailedPatches) &&
        Objects.equals(this.instancesWithNotApplicablePatches, describePatchGroupStateResult.instancesWithNotApplicablePatches) &&
        Objects.equals(this.instancesWithUnreportedNotApplicablePatches, describePatchGroupStateResult.instancesWithUnreportedNotApplicablePatches) &&
        Objects.equals(this.instancesWithCriticalNonCompliantPatches, describePatchGroupStateResult.instancesWithCriticalNonCompliantPatches) &&
        Objects.equals(this.instancesWithSecurityNonCompliantPatches, describePatchGroupStateResult.instancesWithSecurityNonCompliantPatches) &&
        Objects.equals(this.instancesWithOtherNonCompliantPatches, describePatchGroupStateResult.instancesWithOtherNonCompliantPatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instances, instancesWithInstalledPatches, instancesWithInstalledOtherPatches, instancesWithInstalledPendingRebootPatches, instancesWithInstalledRejectedPatches, instancesWithMissingPatches, instancesWithFailedPatches, instancesWithNotApplicablePatches, instancesWithUnreportedNotApplicablePatches, instancesWithCriticalNonCompliantPatches, instancesWithSecurityNonCompliantPatches, instancesWithOtherNonCompliantPatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribePatchGroupStateResult {\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    instancesWithInstalledPatches: ").append(toIndentedString(instancesWithInstalledPatches)).append("\n");
    sb.append("    instancesWithInstalledOtherPatches: ").append(toIndentedString(instancesWithInstalledOtherPatches)).append("\n");
    sb.append("    instancesWithInstalledPendingRebootPatches: ").append(toIndentedString(instancesWithInstalledPendingRebootPatches)).append("\n");
    sb.append("    instancesWithInstalledRejectedPatches: ").append(toIndentedString(instancesWithInstalledRejectedPatches)).append("\n");
    sb.append("    instancesWithMissingPatches: ").append(toIndentedString(instancesWithMissingPatches)).append("\n");
    sb.append("    instancesWithFailedPatches: ").append(toIndentedString(instancesWithFailedPatches)).append("\n");
    sb.append("    instancesWithNotApplicablePatches: ").append(toIndentedString(instancesWithNotApplicablePatches)).append("\n");
    sb.append("    instancesWithUnreportedNotApplicablePatches: ").append(toIndentedString(instancesWithUnreportedNotApplicablePatches)).append("\n");
    sb.append("    instancesWithCriticalNonCompliantPatches: ").append(toIndentedString(instancesWithCriticalNonCompliantPatches)).append("\n");
    sb.append("    instancesWithSecurityNonCompliantPatches: ").append(toIndentedString(instancesWithSecurityNonCompliantPatches)).append("\n");
    sb.append("    instancesWithOtherNonCompliantPatches: ").append(toIndentedString(instancesWithOtherNonCompliantPatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Instances");
    openapiFields.add("InstancesWithInstalledPatches");
    openapiFields.add("InstancesWithInstalledOtherPatches");
    openapiFields.add("InstancesWithInstalledPendingRebootPatches");
    openapiFields.add("InstancesWithInstalledRejectedPatches");
    openapiFields.add("InstancesWithMissingPatches");
    openapiFields.add("InstancesWithFailedPatches");
    openapiFields.add("InstancesWithNotApplicablePatches");
    openapiFields.add("InstancesWithUnreportedNotApplicablePatches");
    openapiFields.add("InstancesWithCriticalNonCompliantPatches");
    openapiFields.add("InstancesWithSecurityNonCompliantPatches");
    openapiFields.add("InstancesWithOtherNonCompliantPatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribePatchGroupStateResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribePatchGroupStateResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribePatchGroupStateResult is not found in the empty JSON string", DescribePatchGroupStateResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribePatchGroupStateResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribePatchGroupStateResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Instances`
      if (jsonObj.get("Instances") != null && !jsonObj.get("Instances").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Instances"));
      }
      // validate the optional field `InstancesWithInstalledPatches`
      if (jsonObj.get("InstancesWithInstalledPatches") != null && !jsonObj.get("InstancesWithInstalledPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithInstalledPatches"));
      }
      // validate the optional field `InstancesWithInstalledOtherPatches`
      if (jsonObj.get("InstancesWithInstalledOtherPatches") != null && !jsonObj.get("InstancesWithInstalledOtherPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithInstalledOtherPatches"));
      }
      // validate the optional field `InstancesWithInstalledPendingRebootPatches`
      if (jsonObj.get("InstancesWithInstalledPendingRebootPatches") != null && !jsonObj.get("InstancesWithInstalledPendingRebootPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithInstalledPendingRebootPatches"));
      }
      // validate the optional field `InstancesWithInstalledRejectedPatches`
      if (jsonObj.get("InstancesWithInstalledRejectedPatches") != null && !jsonObj.get("InstancesWithInstalledRejectedPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithInstalledRejectedPatches"));
      }
      // validate the optional field `InstancesWithMissingPatches`
      if (jsonObj.get("InstancesWithMissingPatches") != null && !jsonObj.get("InstancesWithMissingPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithMissingPatches"));
      }
      // validate the optional field `InstancesWithFailedPatches`
      if (jsonObj.get("InstancesWithFailedPatches") != null && !jsonObj.get("InstancesWithFailedPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithFailedPatches"));
      }
      // validate the optional field `InstancesWithNotApplicablePatches`
      if (jsonObj.get("InstancesWithNotApplicablePatches") != null && !jsonObj.get("InstancesWithNotApplicablePatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithNotApplicablePatches"));
      }
      // validate the optional field `InstancesWithUnreportedNotApplicablePatches`
      if (jsonObj.get("InstancesWithUnreportedNotApplicablePatches") != null && !jsonObj.get("InstancesWithUnreportedNotApplicablePatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithUnreportedNotApplicablePatches"));
      }
      // validate the optional field `InstancesWithCriticalNonCompliantPatches`
      if (jsonObj.get("InstancesWithCriticalNonCompliantPatches") != null && !jsonObj.get("InstancesWithCriticalNonCompliantPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithCriticalNonCompliantPatches"));
      }
      // validate the optional field `InstancesWithSecurityNonCompliantPatches`
      if (jsonObj.get("InstancesWithSecurityNonCompliantPatches") != null && !jsonObj.get("InstancesWithSecurityNonCompliantPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithSecurityNonCompliantPatches"));
      }
      // validate the optional field `InstancesWithOtherNonCompliantPatches`
      if (jsonObj.get("InstancesWithOtherNonCompliantPatches") != null && !jsonObj.get("InstancesWithOtherNonCompliantPatches").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstancesWithOtherNonCompliantPatches"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribePatchGroupStateResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribePatchGroupStateResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribePatchGroupStateResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribePatchGroupStateResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribePatchGroupStateResult>() {
           @Override
           public void write(JsonWriter out, DescribePatchGroupStateResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribePatchGroupStateResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribePatchGroupStateResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribePatchGroupStateResult
   * @throws IOException if the JSON string is invalid with respect to DescribePatchGroupStateResult
   */
  public static DescribePatchGroupStateResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribePatchGroupStateResult.class);
  }

  /**
   * Convert an instance of DescribePatchGroupStateResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

