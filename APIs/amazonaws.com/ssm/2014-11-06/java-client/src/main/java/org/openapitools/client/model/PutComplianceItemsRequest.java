/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComplianceUploadType;
import org.openapitools.client.model.PutComplianceItemsRequestExecutionSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutComplianceItemsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutComplianceItemsRequest {
  public static final String SERIALIZED_NAME_RESOURCE_ID = "ResourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_COMPLIANCE_TYPE = "ComplianceType";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_TYPE)
  private String complianceType;

  public static final String SERIALIZED_NAME_EXECUTION_SUMMARY = "ExecutionSummary";
  @SerializedName(SERIALIZED_NAME_EXECUTION_SUMMARY)
  private PutComplianceItemsRequestExecutionSummary executionSummary;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List items;

  public static final String SERIALIZED_NAME_ITEM_CONTENT_HASH = "ItemContentHash";
  @SerializedName(SERIALIZED_NAME_ITEM_CONTENT_HASH)
  private String itemContentHash;

  public static final String SERIALIZED_NAME_UPLOAD_TYPE = "UploadType";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TYPE)
  private ComplianceUploadType uploadType;

  public PutComplianceItemsRequest() {
  }

  public PutComplianceItemsRequest resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nonnull
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public PutComplianceItemsRequest resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public PutComplianceItemsRequest complianceType(String complianceType) {
    this.complianceType = complianceType;
    return this;
  }

  /**
   * Get complianceType
   * @return complianceType
   */
  @javax.annotation.Nonnull
  public String getComplianceType() {
    return complianceType;
  }

  public void setComplianceType(String complianceType) {
    this.complianceType = complianceType;
  }


  public PutComplianceItemsRequest executionSummary(PutComplianceItemsRequestExecutionSummary executionSummary) {
    this.executionSummary = executionSummary;
    return this;
  }

  /**
   * Get executionSummary
   * @return executionSummary
   */
  @javax.annotation.Nonnull
  public PutComplianceItemsRequestExecutionSummary getExecutionSummary() {
    return executionSummary;
  }

  public void setExecutionSummary(PutComplianceItemsRequestExecutionSummary executionSummary) {
    this.executionSummary = executionSummary;
  }


  public PutComplianceItemsRequest items(List items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nonnull
  public List getItems() {
    return items;
  }

  public void setItems(List items) {
    this.items = items;
  }


  public PutComplianceItemsRequest itemContentHash(String itemContentHash) {
    this.itemContentHash = itemContentHash;
    return this;
  }

  /**
   * Get itemContentHash
   * @return itemContentHash
   */
  @javax.annotation.Nullable
  public String getItemContentHash() {
    return itemContentHash;
  }

  public void setItemContentHash(String itemContentHash) {
    this.itemContentHash = itemContentHash;
  }


  public PutComplianceItemsRequest uploadType(ComplianceUploadType uploadType) {
    this.uploadType = uploadType;
    return this;
  }

  /**
   * Get uploadType
   * @return uploadType
   */
  @javax.annotation.Nullable
  public ComplianceUploadType getUploadType() {
    return uploadType;
  }

  public void setUploadType(ComplianceUploadType uploadType) {
    this.uploadType = uploadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutComplianceItemsRequest putComplianceItemsRequest = (PutComplianceItemsRequest) o;
    return Objects.equals(this.resourceId, putComplianceItemsRequest.resourceId) &&
        Objects.equals(this.resourceType, putComplianceItemsRequest.resourceType) &&
        Objects.equals(this.complianceType, putComplianceItemsRequest.complianceType) &&
        Objects.equals(this.executionSummary, putComplianceItemsRequest.executionSummary) &&
        Objects.equals(this.items, putComplianceItemsRequest.items) &&
        Objects.equals(this.itemContentHash, putComplianceItemsRequest.itemContentHash) &&
        Objects.equals(this.uploadType, putComplianceItemsRequest.uploadType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceId, resourceType, complianceType, executionSummary, items, itemContentHash, uploadType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutComplianceItemsRequest {\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    complianceType: ").append(toIndentedString(complianceType)).append("\n");
    sb.append("    executionSummary: ").append(toIndentedString(executionSummary)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    itemContentHash: ").append(toIndentedString(itemContentHash)).append("\n");
    sb.append("    uploadType: ").append(toIndentedString(uploadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceId");
    openapiFields.add("ResourceType");
    openapiFields.add("ComplianceType");
    openapiFields.add("ExecutionSummary");
    openapiFields.add("Items");
    openapiFields.add("ItemContentHash");
    openapiFields.add("UploadType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceId");
    openapiRequiredFields.add("ResourceType");
    openapiRequiredFields.add("ComplianceType");
    openapiRequiredFields.add("ExecutionSummary");
    openapiRequiredFields.add("Items");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutComplianceItemsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutComplianceItemsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutComplianceItemsRequest is not found in the empty JSON string", PutComplianceItemsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutComplianceItemsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutComplianceItemsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutComplianceItemsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ResourceId`
      String.validateJsonElement(jsonObj.get("ResourceId"));
      // validate the required field `ResourceType`
      String.validateJsonElement(jsonObj.get("ResourceType"));
      // validate the required field `ComplianceType`
      String.validateJsonElement(jsonObj.get("ComplianceType"));
      // validate the required field `ExecutionSummary`
      PutComplianceItemsRequestExecutionSummary.validateJsonElement(jsonObj.get("ExecutionSummary"));
      // validate the required field `Items`
      List.validateJsonElement(jsonObj.get("Items"));
      // validate the optional field `ItemContentHash`
      if (jsonObj.get("ItemContentHash") != null && !jsonObj.get("ItemContentHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ItemContentHash"));
      }
      // validate the optional field `UploadType`
      if (jsonObj.get("UploadType") != null && !jsonObj.get("UploadType").isJsonNull()) {
        ComplianceUploadType.validateJsonElement(jsonObj.get("UploadType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutComplianceItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutComplianceItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutComplianceItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutComplianceItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutComplianceItemsRequest>() {
           @Override
           public void write(JsonWriter out, PutComplianceItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutComplianceItemsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutComplianceItemsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutComplianceItemsRequest
   * @throws IOException if the JSON string is invalid with respect to PutComplianceItemsRequest
   */
  public static PutComplianceItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutComplianceItemsRequest.class);
  }

  /**
   * Convert an instance of PutComplianceItemsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

