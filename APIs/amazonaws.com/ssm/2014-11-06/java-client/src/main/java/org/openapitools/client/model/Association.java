/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssociationOverview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an association of a Amazon Web Services Systems Manager document (SSM document) and a managed node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Association {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_ASSOCIATION_VERSION = "AssociationVersion";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_VERSION)
  private String associationVersion;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "DocumentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List targets;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_DATE = "LastExecutionDate";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_DATE)
  private OffsetDateTime lastExecutionDate;

  public static final String SERIALIZED_NAME_OVERVIEW = "Overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private AssociationOverview overview;

  public static final String SERIALIZED_NAME_SCHEDULE_EXPRESSION = "ScheduleExpression";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EXPRESSION)
  private String scheduleExpression;

  public static final String SERIALIZED_NAME_ASSOCIATION_NAME = "AssociationName";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_NAME)
  private String associationName;

  public static final String SERIALIZED_NAME_SCHEDULE_OFFSET = "ScheduleOffset";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_OFFSET)
  private Integer scheduleOffset;

  public static final String SERIALIZED_NAME_TARGET_MAPS = "TargetMaps";
  @SerializedName(SERIALIZED_NAME_TARGET_MAPS)
  private List targetMaps;

  public Association() {
  }

  public Association name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Association instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public Association associationId(String associationId) {
    this.associationId = associationId;
    return this;
  }

  /**
   * Get associationId
   * @return associationId
   */
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }

  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public Association associationVersion(String associationVersion) {
    this.associationVersion = associationVersion;
    return this;
  }

  /**
   * Get associationVersion
   * @return associationVersion
   */
  @javax.annotation.Nullable
  public String getAssociationVersion() {
    return associationVersion;
  }

  public void setAssociationVersion(String associationVersion) {
    this.associationVersion = associationVersion;
  }


  public Association documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public Association targets(List targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List getTargets() {
    return targets;
  }

  public void setTargets(List targets) {
    this.targets = targets;
  }


  public Association lastExecutionDate(OffsetDateTime lastExecutionDate) {
    this.lastExecutionDate = lastExecutionDate;
    return this;
  }

  /**
   * Get lastExecutionDate
   * @return lastExecutionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecutionDate() {
    return lastExecutionDate;
  }

  public void setLastExecutionDate(OffsetDateTime lastExecutionDate) {
    this.lastExecutionDate = lastExecutionDate;
  }


  public Association overview(AssociationOverview overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Get overview
   * @return overview
   */
  @javax.annotation.Nullable
  public AssociationOverview getOverview() {
    return overview;
  }

  public void setOverview(AssociationOverview overview) {
    this.overview = overview;
  }


  public Association scheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
    return this;
  }

  /**
   * Get scheduleExpression
   * @return scheduleExpression
   */
  @javax.annotation.Nullable
  public String getScheduleExpression() {
    return scheduleExpression;
  }

  public void setScheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
  }


  public Association associationName(String associationName) {
    this.associationName = associationName;
    return this;
  }

  /**
   * Get associationName
   * @return associationName
   */
  @javax.annotation.Nullable
  public String getAssociationName() {
    return associationName;
  }

  public void setAssociationName(String associationName) {
    this.associationName = associationName;
  }


  public Association scheduleOffset(Integer scheduleOffset) {
    this.scheduleOffset = scheduleOffset;
    return this;
  }

  /**
   * Get scheduleOffset
   * @return scheduleOffset
   */
  @javax.annotation.Nullable
  public Integer getScheduleOffset() {
    return scheduleOffset;
  }

  public void setScheduleOffset(Integer scheduleOffset) {
    this.scheduleOffset = scheduleOffset;
  }


  public Association targetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
    return this;
  }

  /**
   * Get targetMaps
   * @return targetMaps
   */
  @javax.annotation.Nullable
  public List getTargetMaps() {
    return targetMaps;
  }

  public void setTargetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Association association = (Association) o;
    return Objects.equals(this.name, association.name) &&
        Objects.equals(this.instanceId, association.instanceId) &&
        Objects.equals(this.associationId, association.associationId) &&
        Objects.equals(this.associationVersion, association.associationVersion) &&
        Objects.equals(this.documentVersion, association.documentVersion) &&
        Objects.equals(this.targets, association.targets) &&
        Objects.equals(this.lastExecutionDate, association.lastExecutionDate) &&
        Objects.equals(this.overview, association.overview) &&
        Objects.equals(this.scheduleExpression, association.scheduleExpression) &&
        Objects.equals(this.associationName, association.associationName) &&
        Objects.equals(this.scheduleOffset, association.scheduleOffset) &&
        Objects.equals(this.targetMaps, association.targetMaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, instanceId, associationId, associationVersion, documentVersion, targets, lastExecutionDate, overview, scheduleExpression, associationName, scheduleOffset, targetMaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Association {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    associationVersion: ").append(toIndentedString(associationVersion)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    lastExecutionDate: ").append(toIndentedString(lastExecutionDate)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    scheduleExpression: ").append(toIndentedString(scheduleExpression)).append("\n");
    sb.append("    associationName: ").append(toIndentedString(associationName)).append("\n");
    sb.append("    scheduleOffset: ").append(toIndentedString(scheduleOffset)).append("\n");
    sb.append("    targetMaps: ").append(toIndentedString(targetMaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("InstanceId");
    openapiFields.add("AssociationId");
    openapiFields.add("AssociationVersion");
    openapiFields.add("DocumentVersion");
    openapiFields.add("Targets");
    openapiFields.add("LastExecutionDate");
    openapiFields.add("Overview");
    openapiFields.add("ScheduleExpression");
    openapiFields.add("AssociationName");
    openapiFields.add("ScheduleOffset");
    openapiFields.add("TargetMaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Association
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Association.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Association is not found in the empty JSON string", Association.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Association.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Association` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `AssociationId`
      if (jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationId"));
      }
      // validate the optional field `AssociationVersion`
      if (jsonObj.get("AssociationVersion") != null && !jsonObj.get("AssociationVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationVersion"));
      }
      // validate the optional field `DocumentVersion`
      if (jsonObj.get("DocumentVersion") != null && !jsonObj.get("DocumentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentVersion"));
      }
      // validate the optional field `Targets`
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Targets"));
      }
      // validate the optional field `LastExecutionDate`
      if (jsonObj.get("LastExecutionDate") != null && !jsonObj.get("LastExecutionDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastExecutionDate"));
      }
      // validate the optional field `Overview`
      if (jsonObj.get("Overview") != null && !jsonObj.get("Overview").isJsonNull()) {
        AssociationOverview.validateJsonElement(jsonObj.get("Overview"));
      }
      // validate the optional field `ScheduleExpression`
      if (jsonObj.get("ScheduleExpression") != null && !jsonObj.get("ScheduleExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ScheduleExpression"));
      }
      // validate the optional field `AssociationName`
      if (jsonObj.get("AssociationName") != null && !jsonObj.get("AssociationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationName"));
      }
      // validate the optional field `ScheduleOffset`
      if (jsonObj.get("ScheduleOffset") != null && !jsonObj.get("ScheduleOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ScheduleOffset"));
      }
      // validate the optional field `TargetMaps`
      if (jsonObj.get("TargetMaps") != null && !jsonObj.get("TargetMaps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetMaps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Association.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Association' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Association> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Association.class));

       return (TypeAdapter<T>) new TypeAdapter<Association>() {
           @Override
           public void write(JsonWriter out, Association value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Association read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Association given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Association
   * @throws IOException if the JSON string is invalid with respect to Association
   */
  public static Association fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Association.class);
  }

  /**
   * Convert an instance of Association to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

