/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AutomationExecutionAlarmConfiguration;
import org.openapitools.client.model.AutomationExecutionProgressCounters;
import org.openapitools.client.model.AutomationExecutionResolvedTargets;
import org.openapitools.client.model.AutomationExecutionStatus;
import org.openapitools.client.model.AutomationSubtype;
import org.openapitools.client.model.ExecutionMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed information about the current state of an individual Automation execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomationExecution {
  public static final String SERIALIZED_NAME_AUTOMATION_EXECUTION_ID = "AutomationExecutionId";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_EXECUTION_ID)
  private String automationExecutionId;

  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "DocumentName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "DocumentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_EXECUTION_START_TIME = "ExecutionStartTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_START_TIME)
  private OffsetDateTime executionStartTime;

  public static final String SERIALIZED_NAME_EXECUTION_END_TIME = "ExecutionEndTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_END_TIME)
  private OffsetDateTime executionEndTime;

  public static final String SERIALIZED_NAME_AUTOMATION_EXECUTION_STATUS = "AutomationExecutionStatus";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_EXECUTION_STATUS)
  private AutomationExecutionStatus automationExecutionStatus;

  public static final String SERIALIZED_NAME_STEP_EXECUTIONS = "StepExecutions";
  @SerializedName(SERIALIZED_NAME_STEP_EXECUTIONS)
  private List stepExecutions;

  public static final String SERIALIZED_NAME_STEP_EXECUTIONS_TRUNCATED = "StepExecutionsTruncated";
  @SerializedName(SERIALIZED_NAME_STEP_EXECUTIONS_TRUNCATED)
  private Boolean stepExecutionsTruncated;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Map outputs;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "FailureMessage";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  private String failureMessage;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ExecutionMode mode;

  public static final String SERIALIZED_NAME_PARENT_AUTOMATION_EXECUTION_ID = "ParentAutomationExecutionId";
  @SerializedName(SERIALIZED_NAME_PARENT_AUTOMATION_EXECUTION_ID)
  private String parentAutomationExecutionId;

  public static final String SERIALIZED_NAME_EXECUTED_BY = "ExecutedBy";
  @SerializedName(SERIALIZED_NAME_EXECUTED_BY)
  private String executedBy;

  public static final String SERIALIZED_NAME_CURRENT_STEP_NAME = "CurrentStepName";
  @SerializedName(SERIALIZED_NAME_CURRENT_STEP_NAME)
  private String currentStepName;

  public static final String SERIALIZED_NAME_CURRENT_ACTION = "CurrentAction";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTION)
  private String currentAction;

  public static final String SERIALIZED_NAME_TARGET_PARAMETER_NAME = "TargetParameterName";
  @SerializedName(SERIALIZED_NAME_TARGET_PARAMETER_NAME)
  private String targetParameterName;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List targets;

  public static final String SERIALIZED_NAME_TARGET_MAPS = "TargetMaps";
  @SerializedName(SERIALIZED_NAME_TARGET_MAPS)
  private List targetMaps;

  public static final String SERIALIZED_NAME_RESOLVED_TARGETS = "ResolvedTargets";
  @SerializedName(SERIALIZED_NAME_RESOLVED_TARGETS)
  private AutomationExecutionResolvedTargets resolvedTargets;

  public static final String SERIALIZED_NAME_MAX_CONCURRENCY = "MaxConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENCY)
  private String maxConcurrency;

  public static final String SERIALIZED_NAME_MAX_ERRORS = "MaxErrors";
  @SerializedName(SERIALIZED_NAME_MAX_ERRORS)
  private String maxErrors;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TARGET_LOCATIONS = "TargetLocations";
  @SerializedName(SERIALIZED_NAME_TARGET_LOCATIONS)
  private List targetLocations;

  public static final String SERIALIZED_NAME_PROGRESS_COUNTERS = "ProgressCounters";
  @SerializedName(SERIALIZED_NAME_PROGRESS_COUNTERS)
  private AutomationExecutionProgressCounters progressCounters;

  public static final String SERIALIZED_NAME_ALARM_CONFIGURATION = "AlarmConfiguration";
  @SerializedName(SERIALIZED_NAME_ALARM_CONFIGURATION)
  private AutomationExecutionAlarmConfiguration alarmConfiguration;

  public static final String SERIALIZED_NAME_TRIGGERED_ALARMS = "TriggeredAlarms";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_ALARMS)
  private List triggeredAlarms;

  public static final String SERIALIZED_NAME_AUTOMATION_SUBTYPE = "AutomationSubtype";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_SUBTYPE)
  private AutomationSubtype automationSubtype;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "ScheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private OffsetDateTime scheduledTime;

  public static final String SERIALIZED_NAME_RUNBOOKS = "Runbooks";
  @SerializedName(SERIALIZED_NAME_RUNBOOKS)
  private List runbooks;

  public static final String SERIALIZED_NAME_OPS_ITEM_ID = "OpsItemId";
  @SerializedName(SERIALIZED_NAME_OPS_ITEM_ID)
  private String opsItemId;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_CHANGE_REQUEST_NAME = "ChangeRequestName";
  @SerializedName(SERIALIZED_NAME_CHANGE_REQUEST_NAME)
  private String changeRequestName;

  public AutomationExecution() {
  }

  public AutomationExecution automationExecutionId(String automationExecutionId) {
    this.automationExecutionId = automationExecutionId;
    return this;
  }

  /**
   * Get automationExecutionId
   * @return automationExecutionId
   */
  @javax.annotation.Nullable
  public String getAutomationExecutionId() {
    return automationExecutionId;
  }

  public void setAutomationExecutionId(String automationExecutionId) {
    this.automationExecutionId = automationExecutionId;
  }


  public AutomationExecution documentName(String documentName) {
    this.documentName = documentName;
    return this;
  }

  /**
   * Get documentName
   * @return documentName
   */
  @javax.annotation.Nullable
  public String getDocumentName() {
    return documentName;
  }

  public void setDocumentName(String documentName) {
    this.documentName = documentName;
  }


  public AutomationExecution documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Get documentVersion
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public AutomationExecution executionStartTime(OffsetDateTime executionStartTime) {
    this.executionStartTime = executionStartTime;
    return this;
  }

  /**
   * Get executionStartTime
   * @return executionStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecutionStartTime() {
    return executionStartTime;
  }

  public void setExecutionStartTime(OffsetDateTime executionStartTime) {
    this.executionStartTime = executionStartTime;
  }


  public AutomationExecution executionEndTime(OffsetDateTime executionEndTime) {
    this.executionEndTime = executionEndTime;
    return this;
  }

  /**
   * Get executionEndTime
   * @return executionEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecutionEndTime() {
    return executionEndTime;
  }

  public void setExecutionEndTime(OffsetDateTime executionEndTime) {
    this.executionEndTime = executionEndTime;
  }


  public AutomationExecution automationExecutionStatus(AutomationExecutionStatus automationExecutionStatus) {
    this.automationExecutionStatus = automationExecutionStatus;
    return this;
  }

  /**
   * Get automationExecutionStatus
   * @return automationExecutionStatus
   */
  @javax.annotation.Nullable
  public AutomationExecutionStatus getAutomationExecutionStatus() {
    return automationExecutionStatus;
  }

  public void setAutomationExecutionStatus(AutomationExecutionStatus automationExecutionStatus) {
    this.automationExecutionStatus = automationExecutionStatus;
  }


  public AutomationExecution stepExecutions(List stepExecutions) {
    this.stepExecutions = stepExecutions;
    return this;
  }

  /**
   * Get stepExecutions
   * @return stepExecutions
   */
  @javax.annotation.Nullable
  public List getStepExecutions() {
    return stepExecutions;
  }

  public void setStepExecutions(List stepExecutions) {
    this.stepExecutions = stepExecutions;
  }


  public AutomationExecution stepExecutionsTruncated(Boolean stepExecutionsTruncated) {
    this.stepExecutionsTruncated = stepExecutionsTruncated;
    return this;
  }

  /**
   * Get stepExecutionsTruncated
   * @return stepExecutionsTruncated
   */
  @javax.annotation.Nullable
  public Boolean getStepExecutionsTruncated() {
    return stepExecutionsTruncated;
  }

  public void setStepExecutionsTruncated(Boolean stepExecutionsTruncated) {
    this.stepExecutionsTruncated = stepExecutionsTruncated;
  }


  public AutomationExecution parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public AutomationExecution outputs(Map outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable
  public Map getOutputs() {
    return outputs;
  }

  public void setOutputs(Map outputs) {
    this.outputs = outputs;
  }


  public AutomationExecution failureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

  /**
   * Get failureMessage
   * @return failureMessage
   */
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }

  public void setFailureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
  }


  public AutomationExecution mode(ExecutionMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ExecutionMode getMode() {
    return mode;
  }

  public void setMode(ExecutionMode mode) {
    this.mode = mode;
  }


  public AutomationExecution parentAutomationExecutionId(String parentAutomationExecutionId) {
    this.parentAutomationExecutionId = parentAutomationExecutionId;
    return this;
  }

  /**
   * Get parentAutomationExecutionId
   * @return parentAutomationExecutionId
   */
  @javax.annotation.Nullable
  public String getParentAutomationExecutionId() {
    return parentAutomationExecutionId;
  }

  public void setParentAutomationExecutionId(String parentAutomationExecutionId) {
    this.parentAutomationExecutionId = parentAutomationExecutionId;
  }


  public AutomationExecution executedBy(String executedBy) {
    this.executedBy = executedBy;
    return this;
  }

  /**
   * Get executedBy
   * @return executedBy
   */
  @javax.annotation.Nullable
  public String getExecutedBy() {
    return executedBy;
  }

  public void setExecutedBy(String executedBy) {
    this.executedBy = executedBy;
  }


  public AutomationExecution currentStepName(String currentStepName) {
    this.currentStepName = currentStepName;
    return this;
  }

  /**
   * Get currentStepName
   * @return currentStepName
   */
  @javax.annotation.Nullable
  public String getCurrentStepName() {
    return currentStepName;
  }

  public void setCurrentStepName(String currentStepName) {
    this.currentStepName = currentStepName;
  }


  public AutomationExecution currentAction(String currentAction) {
    this.currentAction = currentAction;
    return this;
  }

  /**
   * Get currentAction
   * @return currentAction
   */
  @javax.annotation.Nullable
  public String getCurrentAction() {
    return currentAction;
  }

  public void setCurrentAction(String currentAction) {
    this.currentAction = currentAction;
  }


  public AutomationExecution targetParameterName(String targetParameterName) {
    this.targetParameterName = targetParameterName;
    return this;
  }

  /**
   * Get targetParameterName
   * @return targetParameterName
   */
  @javax.annotation.Nullable
  public String getTargetParameterName() {
    return targetParameterName;
  }

  public void setTargetParameterName(String targetParameterName) {
    this.targetParameterName = targetParameterName;
  }


  public AutomationExecution targets(List targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List getTargets() {
    return targets;
  }

  public void setTargets(List targets) {
    this.targets = targets;
  }


  public AutomationExecution targetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
    return this;
  }

  /**
   * Get targetMaps
   * @return targetMaps
   */
  @javax.annotation.Nullable
  public List getTargetMaps() {
    return targetMaps;
  }

  public void setTargetMaps(List targetMaps) {
    this.targetMaps = targetMaps;
  }


  public AutomationExecution resolvedTargets(AutomationExecutionResolvedTargets resolvedTargets) {
    this.resolvedTargets = resolvedTargets;
    return this;
  }

  /**
   * Get resolvedTargets
   * @return resolvedTargets
   */
  @javax.annotation.Nullable
  public AutomationExecutionResolvedTargets getResolvedTargets() {
    return resolvedTargets;
  }

  public void setResolvedTargets(AutomationExecutionResolvedTargets resolvedTargets) {
    this.resolvedTargets = resolvedTargets;
  }


  public AutomationExecution maxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
    return this;
  }

  /**
   * Get maxConcurrency
   * @return maxConcurrency
   */
  @javax.annotation.Nullable
  public String getMaxConcurrency() {
    return maxConcurrency;
  }

  public void setMaxConcurrency(String maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }


  public AutomationExecution maxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
    return this;
  }

  /**
   * Get maxErrors
   * @return maxErrors
   */
  @javax.annotation.Nullable
  public String getMaxErrors() {
    return maxErrors;
  }

  public void setMaxErrors(String maxErrors) {
    this.maxErrors = maxErrors;
  }


  public AutomationExecution target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public AutomationExecution targetLocations(List targetLocations) {
    this.targetLocations = targetLocations;
    return this;
  }

  /**
   * Get targetLocations
   * @return targetLocations
   */
  @javax.annotation.Nullable
  public List getTargetLocations() {
    return targetLocations;
  }

  public void setTargetLocations(List targetLocations) {
    this.targetLocations = targetLocations;
  }


  public AutomationExecution progressCounters(AutomationExecutionProgressCounters progressCounters) {
    this.progressCounters = progressCounters;
    return this;
  }

  /**
   * Get progressCounters
   * @return progressCounters
   */
  @javax.annotation.Nullable
  public AutomationExecutionProgressCounters getProgressCounters() {
    return progressCounters;
  }

  public void setProgressCounters(AutomationExecutionProgressCounters progressCounters) {
    this.progressCounters = progressCounters;
  }


  public AutomationExecution alarmConfiguration(AutomationExecutionAlarmConfiguration alarmConfiguration) {
    this.alarmConfiguration = alarmConfiguration;
    return this;
  }

  /**
   * Get alarmConfiguration
   * @return alarmConfiguration
   */
  @javax.annotation.Nullable
  public AutomationExecutionAlarmConfiguration getAlarmConfiguration() {
    return alarmConfiguration;
  }

  public void setAlarmConfiguration(AutomationExecutionAlarmConfiguration alarmConfiguration) {
    this.alarmConfiguration = alarmConfiguration;
  }


  public AutomationExecution triggeredAlarms(List triggeredAlarms) {
    this.triggeredAlarms = triggeredAlarms;
    return this;
  }

  /**
   * Get triggeredAlarms
   * @return triggeredAlarms
   */
  @javax.annotation.Nullable
  public List getTriggeredAlarms() {
    return triggeredAlarms;
  }

  public void setTriggeredAlarms(List triggeredAlarms) {
    this.triggeredAlarms = triggeredAlarms;
  }


  public AutomationExecution automationSubtype(AutomationSubtype automationSubtype) {
    this.automationSubtype = automationSubtype;
    return this;
  }

  /**
   * Get automationSubtype
   * @return automationSubtype
   */
  @javax.annotation.Nullable
  public AutomationSubtype getAutomationSubtype() {
    return automationSubtype;
  }

  public void setAutomationSubtype(AutomationSubtype automationSubtype) {
    this.automationSubtype = automationSubtype;
  }


  public AutomationExecution scheduledTime(OffsetDateTime scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Get scheduledTime
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(OffsetDateTime scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public AutomationExecution runbooks(List runbooks) {
    this.runbooks = runbooks;
    return this;
  }

  /**
   * Get runbooks
   * @return runbooks
   */
  @javax.annotation.Nullable
  public List getRunbooks() {
    return runbooks;
  }

  public void setRunbooks(List runbooks) {
    this.runbooks = runbooks;
  }


  public AutomationExecution opsItemId(String opsItemId) {
    this.opsItemId = opsItemId;
    return this;
  }

  /**
   * Get opsItemId
   * @return opsItemId
   */
  @javax.annotation.Nullable
  public String getOpsItemId() {
    return opsItemId;
  }

  public void setOpsItemId(String opsItemId) {
    this.opsItemId = opsItemId;
  }


  public AutomationExecution associationId(String associationId) {
    this.associationId = associationId;
    return this;
  }

  /**
   * Get associationId
   * @return associationId
   */
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }

  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public AutomationExecution changeRequestName(String changeRequestName) {
    this.changeRequestName = changeRequestName;
    return this;
  }

  /**
   * Get changeRequestName
   * @return changeRequestName
   */
  @javax.annotation.Nullable
  public String getChangeRequestName() {
    return changeRequestName;
  }

  public void setChangeRequestName(String changeRequestName) {
    this.changeRequestName = changeRequestName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationExecution automationExecution = (AutomationExecution) o;
    return Objects.equals(this.automationExecutionId, automationExecution.automationExecutionId) &&
        Objects.equals(this.documentName, automationExecution.documentName) &&
        Objects.equals(this.documentVersion, automationExecution.documentVersion) &&
        Objects.equals(this.executionStartTime, automationExecution.executionStartTime) &&
        Objects.equals(this.executionEndTime, automationExecution.executionEndTime) &&
        Objects.equals(this.automationExecutionStatus, automationExecution.automationExecutionStatus) &&
        Objects.equals(this.stepExecutions, automationExecution.stepExecutions) &&
        Objects.equals(this.stepExecutionsTruncated, automationExecution.stepExecutionsTruncated) &&
        Objects.equals(this.parameters, automationExecution.parameters) &&
        Objects.equals(this.outputs, automationExecution.outputs) &&
        Objects.equals(this.failureMessage, automationExecution.failureMessage) &&
        Objects.equals(this.mode, automationExecution.mode) &&
        Objects.equals(this.parentAutomationExecutionId, automationExecution.parentAutomationExecutionId) &&
        Objects.equals(this.executedBy, automationExecution.executedBy) &&
        Objects.equals(this.currentStepName, automationExecution.currentStepName) &&
        Objects.equals(this.currentAction, automationExecution.currentAction) &&
        Objects.equals(this.targetParameterName, automationExecution.targetParameterName) &&
        Objects.equals(this.targets, automationExecution.targets) &&
        Objects.equals(this.targetMaps, automationExecution.targetMaps) &&
        Objects.equals(this.resolvedTargets, automationExecution.resolvedTargets) &&
        Objects.equals(this.maxConcurrency, automationExecution.maxConcurrency) &&
        Objects.equals(this.maxErrors, automationExecution.maxErrors) &&
        Objects.equals(this.target, automationExecution.target) &&
        Objects.equals(this.targetLocations, automationExecution.targetLocations) &&
        Objects.equals(this.progressCounters, automationExecution.progressCounters) &&
        Objects.equals(this.alarmConfiguration, automationExecution.alarmConfiguration) &&
        Objects.equals(this.triggeredAlarms, automationExecution.triggeredAlarms) &&
        Objects.equals(this.automationSubtype, automationExecution.automationSubtype) &&
        Objects.equals(this.scheduledTime, automationExecution.scheduledTime) &&
        Objects.equals(this.runbooks, automationExecution.runbooks) &&
        Objects.equals(this.opsItemId, automationExecution.opsItemId) &&
        Objects.equals(this.associationId, automationExecution.associationId) &&
        Objects.equals(this.changeRequestName, automationExecution.changeRequestName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automationExecutionId, documentName, documentVersion, executionStartTime, executionEndTime, automationExecutionStatus, stepExecutions, stepExecutionsTruncated, parameters, outputs, failureMessage, mode, parentAutomationExecutionId, executedBy, currentStepName, currentAction, targetParameterName, targets, targetMaps, resolvedTargets, maxConcurrency, maxErrors, target, targetLocations, progressCounters, alarmConfiguration, triggeredAlarms, automationSubtype, scheduledTime, runbooks, opsItemId, associationId, changeRequestName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationExecution {\n");
    sb.append("    automationExecutionId: ").append(toIndentedString(automationExecutionId)).append("\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    executionStartTime: ").append(toIndentedString(executionStartTime)).append("\n");
    sb.append("    executionEndTime: ").append(toIndentedString(executionEndTime)).append("\n");
    sb.append("    automationExecutionStatus: ").append(toIndentedString(automationExecutionStatus)).append("\n");
    sb.append("    stepExecutions: ").append(toIndentedString(stepExecutions)).append("\n");
    sb.append("    stepExecutionsTruncated: ").append(toIndentedString(stepExecutionsTruncated)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    parentAutomationExecutionId: ").append(toIndentedString(parentAutomationExecutionId)).append("\n");
    sb.append("    executedBy: ").append(toIndentedString(executedBy)).append("\n");
    sb.append("    currentStepName: ").append(toIndentedString(currentStepName)).append("\n");
    sb.append("    currentAction: ").append(toIndentedString(currentAction)).append("\n");
    sb.append("    targetParameterName: ").append(toIndentedString(targetParameterName)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    targetMaps: ").append(toIndentedString(targetMaps)).append("\n");
    sb.append("    resolvedTargets: ").append(toIndentedString(resolvedTargets)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    maxErrors: ").append(toIndentedString(maxErrors)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetLocations: ").append(toIndentedString(targetLocations)).append("\n");
    sb.append("    progressCounters: ").append(toIndentedString(progressCounters)).append("\n");
    sb.append("    alarmConfiguration: ").append(toIndentedString(alarmConfiguration)).append("\n");
    sb.append("    triggeredAlarms: ").append(toIndentedString(triggeredAlarms)).append("\n");
    sb.append("    automationSubtype: ").append(toIndentedString(automationSubtype)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    runbooks: ").append(toIndentedString(runbooks)).append("\n");
    sb.append("    opsItemId: ").append(toIndentedString(opsItemId)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    changeRequestName: ").append(toIndentedString(changeRequestName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutomationExecutionId");
    openapiFields.add("DocumentName");
    openapiFields.add("DocumentVersion");
    openapiFields.add("ExecutionStartTime");
    openapiFields.add("ExecutionEndTime");
    openapiFields.add("AutomationExecutionStatus");
    openapiFields.add("StepExecutions");
    openapiFields.add("StepExecutionsTruncated");
    openapiFields.add("Parameters");
    openapiFields.add("Outputs");
    openapiFields.add("FailureMessage");
    openapiFields.add("Mode");
    openapiFields.add("ParentAutomationExecutionId");
    openapiFields.add("ExecutedBy");
    openapiFields.add("CurrentStepName");
    openapiFields.add("CurrentAction");
    openapiFields.add("TargetParameterName");
    openapiFields.add("Targets");
    openapiFields.add("TargetMaps");
    openapiFields.add("ResolvedTargets");
    openapiFields.add("MaxConcurrency");
    openapiFields.add("MaxErrors");
    openapiFields.add("Target");
    openapiFields.add("TargetLocations");
    openapiFields.add("ProgressCounters");
    openapiFields.add("AlarmConfiguration");
    openapiFields.add("TriggeredAlarms");
    openapiFields.add("AutomationSubtype");
    openapiFields.add("ScheduledTime");
    openapiFields.add("Runbooks");
    openapiFields.add("OpsItemId");
    openapiFields.add("AssociationId");
    openapiFields.add("ChangeRequestName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationExecution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationExecution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationExecution is not found in the empty JSON string", AutomationExecution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomationExecution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationExecution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AutomationExecutionId`
      if (jsonObj.get("AutomationExecutionId") != null && !jsonObj.get("AutomationExecutionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AutomationExecutionId"));
      }
      // validate the optional field `DocumentName`
      if (jsonObj.get("DocumentName") != null && !jsonObj.get("DocumentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentName"));
      }
      // validate the optional field `DocumentVersion`
      if (jsonObj.get("DocumentVersion") != null && !jsonObj.get("DocumentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentVersion"));
      }
      // validate the optional field `ExecutionStartTime`
      if (jsonObj.get("ExecutionStartTime") != null && !jsonObj.get("ExecutionStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExecutionStartTime"));
      }
      // validate the optional field `ExecutionEndTime`
      if (jsonObj.get("ExecutionEndTime") != null && !jsonObj.get("ExecutionEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExecutionEndTime"));
      }
      // validate the optional field `AutomationExecutionStatus`
      if (jsonObj.get("AutomationExecutionStatus") != null && !jsonObj.get("AutomationExecutionStatus").isJsonNull()) {
        AutomationExecutionStatus.validateJsonElement(jsonObj.get("AutomationExecutionStatus"));
      }
      // validate the optional field `StepExecutions`
      if (jsonObj.get("StepExecutions") != null && !jsonObj.get("StepExecutions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StepExecutions"));
      }
      // validate the optional field `StepExecutionsTruncated`
      if (jsonObj.get("StepExecutionsTruncated") != null && !jsonObj.get("StepExecutionsTruncated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StepExecutionsTruncated"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `Outputs`
      if (jsonObj.get("Outputs") != null && !jsonObj.get("Outputs").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Outputs"));
      }
      // validate the optional field `FailureMessage`
      if (jsonObj.get("FailureMessage") != null && !jsonObj.get("FailureMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureMessage"));
      }
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        ExecutionMode.validateJsonElement(jsonObj.get("Mode"));
      }
      // validate the optional field `ParentAutomationExecutionId`
      if (jsonObj.get("ParentAutomationExecutionId") != null && !jsonObj.get("ParentAutomationExecutionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParentAutomationExecutionId"));
      }
      // validate the optional field `ExecutedBy`
      if (jsonObj.get("ExecutedBy") != null && !jsonObj.get("ExecutedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutedBy"));
      }
      // validate the optional field `CurrentStepName`
      if (jsonObj.get("CurrentStepName") != null && !jsonObj.get("CurrentStepName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentStepName"));
      }
      // validate the optional field `CurrentAction`
      if (jsonObj.get("CurrentAction") != null && !jsonObj.get("CurrentAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentAction"));
      }
      // validate the optional field `TargetParameterName`
      if (jsonObj.get("TargetParameterName") != null && !jsonObj.get("TargetParameterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetParameterName"));
      }
      // validate the optional field `Targets`
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Targets"));
      }
      // validate the optional field `TargetMaps`
      if (jsonObj.get("TargetMaps") != null && !jsonObj.get("TargetMaps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetMaps"));
      }
      // validate the optional field `ResolvedTargets`
      if (jsonObj.get("ResolvedTargets") != null && !jsonObj.get("ResolvedTargets").isJsonNull()) {
        AutomationExecutionResolvedTargets.validateJsonElement(jsonObj.get("ResolvedTargets"));
      }
      // validate the optional field `MaxConcurrency`
      if (jsonObj.get("MaxConcurrency") != null && !jsonObj.get("MaxConcurrency").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxConcurrency"));
      }
      // validate the optional field `MaxErrors`
      if (jsonObj.get("MaxErrors") != null && !jsonObj.get("MaxErrors").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxErrors"));
      }
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Target"));
      }
      // validate the optional field `TargetLocations`
      if (jsonObj.get("TargetLocations") != null && !jsonObj.get("TargetLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetLocations"));
      }
      // validate the optional field `ProgressCounters`
      if (jsonObj.get("ProgressCounters") != null && !jsonObj.get("ProgressCounters").isJsonNull()) {
        AutomationExecutionProgressCounters.validateJsonElement(jsonObj.get("ProgressCounters"));
      }
      // validate the optional field `AlarmConfiguration`
      if (jsonObj.get("AlarmConfiguration") != null && !jsonObj.get("AlarmConfiguration").isJsonNull()) {
        AutomationExecutionAlarmConfiguration.validateJsonElement(jsonObj.get("AlarmConfiguration"));
      }
      // validate the optional field `TriggeredAlarms`
      if (jsonObj.get("TriggeredAlarms") != null && !jsonObj.get("TriggeredAlarms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TriggeredAlarms"));
      }
      // validate the optional field `AutomationSubtype`
      if (jsonObj.get("AutomationSubtype") != null && !jsonObj.get("AutomationSubtype").isJsonNull()) {
        AutomationSubtype.validateJsonElement(jsonObj.get("AutomationSubtype"));
      }
      // validate the optional field `ScheduledTime`
      if (jsonObj.get("ScheduledTime") != null && !jsonObj.get("ScheduledTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ScheduledTime"));
      }
      // validate the optional field `Runbooks`
      if (jsonObj.get("Runbooks") != null && !jsonObj.get("Runbooks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Runbooks"));
      }
      // validate the optional field `OpsItemId`
      if (jsonObj.get("OpsItemId") != null && !jsonObj.get("OpsItemId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OpsItemId"));
      }
      // validate the optional field `AssociationId`
      if (jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationId"));
      }
      // validate the optional field `ChangeRequestName`
      if (jsonObj.get("ChangeRequestName") != null && !jsonObj.get("ChangeRequestName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeRequestName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationExecution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationExecution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationExecution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationExecution.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationExecution>() {
           @Override
           public void write(JsonWriter out, AutomationExecution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationExecution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationExecution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationExecution
   * @throws IOException if the JSON string is invalid with respect to AutomationExecution
   */
  public static AutomationExecution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationExecution.class);
  }

  /**
   * Convert an instance of AutomationExecution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

