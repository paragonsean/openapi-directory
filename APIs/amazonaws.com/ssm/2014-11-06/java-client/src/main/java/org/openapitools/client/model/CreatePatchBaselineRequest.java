/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePatchBaselineRequestApprovalRules;
import org.openapitools.client.model.CreatePatchBaselineRequestGlobalFilters;
import org.openapitools.client.model.OperatingSystem;
import org.openapitools.client.model.PatchAction;
import org.openapitools.client.model.PatchComplianceLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePatchBaselineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePatchBaselineRequest {
  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "OperatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private OperatingSystem operatingSystem;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GLOBAL_FILTERS = "GlobalFilters";
  @SerializedName(SERIALIZED_NAME_GLOBAL_FILTERS)
  private CreatePatchBaselineRequestGlobalFilters globalFilters;

  public static final String SERIALIZED_NAME_APPROVAL_RULES = "ApprovalRules";
  @SerializedName(SERIALIZED_NAME_APPROVAL_RULES)
  private CreatePatchBaselineRequestApprovalRules approvalRules;

  public static final String SERIALIZED_NAME_APPROVED_PATCHES = "ApprovedPatches";
  @SerializedName(SERIALIZED_NAME_APPROVED_PATCHES)
  private List approvedPatches;

  public static final String SERIALIZED_NAME_APPROVED_PATCHES_COMPLIANCE_LEVEL = "ApprovedPatchesComplianceLevel";
  @SerializedName(SERIALIZED_NAME_APPROVED_PATCHES_COMPLIANCE_LEVEL)
  private PatchComplianceLevel approvedPatchesComplianceLevel;

  public static final String SERIALIZED_NAME_APPROVED_PATCHES_ENABLE_NON_SECURITY = "ApprovedPatchesEnableNonSecurity";
  @SerializedName(SERIALIZED_NAME_APPROVED_PATCHES_ENABLE_NON_SECURITY)
  private Boolean approvedPatchesEnableNonSecurity;

  public static final String SERIALIZED_NAME_REJECTED_PATCHES = "RejectedPatches";
  @SerializedName(SERIALIZED_NAME_REJECTED_PATCHES)
  private List rejectedPatches;

  public static final String SERIALIZED_NAME_REJECTED_PATCHES_ACTION = "RejectedPatchesAction";
  @SerializedName(SERIALIZED_NAME_REJECTED_PATCHES_ACTION)
  private PatchAction rejectedPatchesAction;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCES = "Sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreatePatchBaselineRequest() {
  }

  public CreatePatchBaselineRequest operatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public OperatingSystem getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public CreatePatchBaselineRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreatePatchBaselineRequest globalFilters(CreatePatchBaselineRequestGlobalFilters globalFilters) {
    this.globalFilters = globalFilters;
    return this;
  }

  /**
   * Get globalFilters
   * @return globalFilters
   */
  @javax.annotation.Nullable
  public CreatePatchBaselineRequestGlobalFilters getGlobalFilters() {
    return globalFilters;
  }

  public void setGlobalFilters(CreatePatchBaselineRequestGlobalFilters globalFilters) {
    this.globalFilters = globalFilters;
  }


  public CreatePatchBaselineRequest approvalRules(CreatePatchBaselineRequestApprovalRules approvalRules) {
    this.approvalRules = approvalRules;
    return this;
  }

  /**
   * Get approvalRules
   * @return approvalRules
   */
  @javax.annotation.Nullable
  public CreatePatchBaselineRequestApprovalRules getApprovalRules() {
    return approvalRules;
  }

  public void setApprovalRules(CreatePatchBaselineRequestApprovalRules approvalRules) {
    this.approvalRules = approvalRules;
  }


  public CreatePatchBaselineRequest approvedPatches(List approvedPatches) {
    this.approvedPatches = approvedPatches;
    return this;
  }

  /**
   * Get approvedPatches
   * @return approvedPatches
   */
  @javax.annotation.Nullable
  public List getApprovedPatches() {
    return approvedPatches;
  }

  public void setApprovedPatches(List approvedPatches) {
    this.approvedPatches = approvedPatches;
  }


  public CreatePatchBaselineRequest approvedPatchesComplianceLevel(PatchComplianceLevel approvedPatchesComplianceLevel) {
    this.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel;
    return this;
  }

  /**
   * Get approvedPatchesComplianceLevel
   * @return approvedPatchesComplianceLevel
   */
  @javax.annotation.Nullable
  public PatchComplianceLevel getApprovedPatchesComplianceLevel() {
    return approvedPatchesComplianceLevel;
  }

  public void setApprovedPatchesComplianceLevel(PatchComplianceLevel approvedPatchesComplianceLevel) {
    this.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel;
  }


  public CreatePatchBaselineRequest approvedPatchesEnableNonSecurity(Boolean approvedPatchesEnableNonSecurity) {
    this.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity;
    return this;
  }

  /**
   * Get approvedPatchesEnableNonSecurity
   * @return approvedPatchesEnableNonSecurity
   */
  @javax.annotation.Nullable
  public Boolean getApprovedPatchesEnableNonSecurity() {
    return approvedPatchesEnableNonSecurity;
  }

  public void setApprovedPatchesEnableNonSecurity(Boolean approvedPatchesEnableNonSecurity) {
    this.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity;
  }


  public CreatePatchBaselineRequest rejectedPatches(List rejectedPatches) {
    this.rejectedPatches = rejectedPatches;
    return this;
  }

  /**
   * Get rejectedPatches
   * @return rejectedPatches
   */
  @javax.annotation.Nullable
  public List getRejectedPatches() {
    return rejectedPatches;
  }

  public void setRejectedPatches(List rejectedPatches) {
    this.rejectedPatches = rejectedPatches;
  }


  public CreatePatchBaselineRequest rejectedPatchesAction(PatchAction rejectedPatchesAction) {
    this.rejectedPatchesAction = rejectedPatchesAction;
    return this;
  }

  /**
   * Get rejectedPatchesAction
   * @return rejectedPatchesAction
   */
  @javax.annotation.Nullable
  public PatchAction getRejectedPatchesAction() {
    return rejectedPatchesAction;
  }

  public void setRejectedPatchesAction(PatchAction rejectedPatchesAction) {
    this.rejectedPatchesAction = rejectedPatchesAction;
  }


  public CreatePatchBaselineRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreatePatchBaselineRequest sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }


  public CreatePatchBaselineRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreatePatchBaselineRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePatchBaselineRequest createPatchBaselineRequest = (CreatePatchBaselineRequest) o;
    return Objects.equals(this.operatingSystem, createPatchBaselineRequest.operatingSystem) &&
        Objects.equals(this.name, createPatchBaselineRequest.name) &&
        Objects.equals(this.globalFilters, createPatchBaselineRequest.globalFilters) &&
        Objects.equals(this.approvalRules, createPatchBaselineRequest.approvalRules) &&
        Objects.equals(this.approvedPatches, createPatchBaselineRequest.approvedPatches) &&
        Objects.equals(this.approvedPatchesComplianceLevel, createPatchBaselineRequest.approvedPatchesComplianceLevel) &&
        Objects.equals(this.approvedPatchesEnableNonSecurity, createPatchBaselineRequest.approvedPatchesEnableNonSecurity) &&
        Objects.equals(this.rejectedPatches, createPatchBaselineRequest.rejectedPatches) &&
        Objects.equals(this.rejectedPatchesAction, createPatchBaselineRequest.rejectedPatchesAction) &&
        Objects.equals(this.description, createPatchBaselineRequest.description) &&
        Objects.equals(this.sources, createPatchBaselineRequest.sources) &&
        Objects.equals(this.clientToken, createPatchBaselineRequest.clientToken) &&
        Objects.equals(this.tags, createPatchBaselineRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatingSystem, name, globalFilters, approvalRules, approvedPatches, approvedPatchesComplianceLevel, approvedPatchesEnableNonSecurity, rejectedPatches, rejectedPatchesAction, description, sources, clientToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePatchBaselineRequest {\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    globalFilters: ").append(toIndentedString(globalFilters)).append("\n");
    sb.append("    approvalRules: ").append(toIndentedString(approvalRules)).append("\n");
    sb.append("    approvedPatches: ").append(toIndentedString(approvedPatches)).append("\n");
    sb.append("    approvedPatchesComplianceLevel: ").append(toIndentedString(approvedPatchesComplianceLevel)).append("\n");
    sb.append("    approvedPatchesEnableNonSecurity: ").append(toIndentedString(approvedPatchesEnableNonSecurity)).append("\n");
    sb.append("    rejectedPatches: ").append(toIndentedString(rejectedPatches)).append("\n");
    sb.append("    rejectedPatchesAction: ").append(toIndentedString(rejectedPatchesAction)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OperatingSystem");
    openapiFields.add("Name");
    openapiFields.add("GlobalFilters");
    openapiFields.add("ApprovalRules");
    openapiFields.add("ApprovedPatches");
    openapiFields.add("ApprovedPatchesComplianceLevel");
    openapiFields.add("ApprovedPatchesEnableNonSecurity");
    openapiFields.add("RejectedPatches");
    openapiFields.add("RejectedPatchesAction");
    openapiFields.add("Description");
    openapiFields.add("Sources");
    openapiFields.add("ClientToken");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePatchBaselineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePatchBaselineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePatchBaselineRequest is not found in the empty JSON string", CreatePatchBaselineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePatchBaselineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePatchBaselineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePatchBaselineRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OperatingSystem`
      if (jsonObj.get("OperatingSystem") != null && !jsonObj.get("OperatingSystem").isJsonNull()) {
        OperatingSystem.validateJsonElement(jsonObj.get("OperatingSystem"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `GlobalFilters`
      if (jsonObj.get("GlobalFilters") != null && !jsonObj.get("GlobalFilters").isJsonNull()) {
        CreatePatchBaselineRequestGlobalFilters.validateJsonElement(jsonObj.get("GlobalFilters"));
      }
      // validate the optional field `ApprovalRules`
      if (jsonObj.get("ApprovalRules") != null && !jsonObj.get("ApprovalRules").isJsonNull()) {
        CreatePatchBaselineRequestApprovalRules.validateJsonElement(jsonObj.get("ApprovalRules"));
      }
      // validate the optional field `ApprovedPatches`
      if (jsonObj.get("ApprovedPatches") != null && !jsonObj.get("ApprovedPatches").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ApprovedPatches"));
      }
      // validate the optional field `ApprovedPatchesComplianceLevel`
      if (jsonObj.get("ApprovedPatchesComplianceLevel") != null && !jsonObj.get("ApprovedPatchesComplianceLevel").isJsonNull()) {
        PatchComplianceLevel.validateJsonElement(jsonObj.get("ApprovedPatchesComplianceLevel"));
      }
      // validate the optional field `ApprovedPatchesEnableNonSecurity`
      if (jsonObj.get("ApprovedPatchesEnableNonSecurity") != null && !jsonObj.get("ApprovedPatchesEnableNonSecurity").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApprovedPatchesEnableNonSecurity"));
      }
      // validate the optional field `RejectedPatches`
      if (jsonObj.get("RejectedPatches") != null && !jsonObj.get("RejectedPatches").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RejectedPatches"));
      }
      // validate the optional field `RejectedPatchesAction`
      if (jsonObj.get("RejectedPatchesAction") != null && !jsonObj.get("RejectedPatchesAction").isJsonNull()) {
        PatchAction.validateJsonElement(jsonObj.get("RejectedPatchesAction"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Sources`
      if (jsonObj.get("Sources") != null && !jsonObj.get("Sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Sources"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePatchBaselineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePatchBaselineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePatchBaselineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePatchBaselineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePatchBaselineRequest>() {
           @Override
           public void write(JsonWriter out, CreatePatchBaselineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePatchBaselineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePatchBaselineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePatchBaselineRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePatchBaselineRequest
   */
  public static CreatePatchBaselineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePatchBaselineRequest.class);
  }

  /**
   * Convert an instance of CreatePatchBaselineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

