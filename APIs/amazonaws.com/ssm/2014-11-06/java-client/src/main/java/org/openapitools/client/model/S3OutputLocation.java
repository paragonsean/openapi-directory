/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An S3 bucket where you want to store the results of this request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3OutputLocation {
  public static final String SERIALIZED_NAME_OUTPUT_S3_REGION = "OutputS3Region";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_REGION)
  private String outputS3Region;

  public static final String SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME = "OutputS3BucketName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME)
  private String outputS3BucketName;

  public static final String SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX = "OutputS3KeyPrefix";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX)
  private String outputS3KeyPrefix;

  public S3OutputLocation() {
  }

  public S3OutputLocation outputS3Region(String outputS3Region) {
    this.outputS3Region = outputS3Region;
    return this;
  }

  /**
   * Get outputS3Region
   * @return outputS3Region
   */
  @javax.annotation.Nullable
  public String getOutputS3Region() {
    return outputS3Region;
  }

  public void setOutputS3Region(String outputS3Region) {
    this.outputS3Region = outputS3Region;
  }


  public S3OutputLocation outputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
    return this;
  }

  /**
   * Get outputS3BucketName
   * @return outputS3BucketName
   */
  @javax.annotation.Nullable
  public String getOutputS3BucketName() {
    return outputS3BucketName;
  }

  public void setOutputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
  }


  public S3OutputLocation outputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
    return this;
  }

  /**
   * Get outputS3KeyPrefix
   * @return outputS3KeyPrefix
   */
  @javax.annotation.Nullable
  public String getOutputS3KeyPrefix() {
    return outputS3KeyPrefix;
  }

  public void setOutputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3OutputLocation s3OutputLocation = (S3OutputLocation) o;
    return Objects.equals(this.outputS3Region, s3OutputLocation.outputS3Region) &&
        Objects.equals(this.outputS3BucketName, s3OutputLocation.outputS3BucketName) &&
        Objects.equals(this.outputS3KeyPrefix, s3OutputLocation.outputS3KeyPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputS3Region, outputS3BucketName, outputS3KeyPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3OutputLocation {\n");
    sb.append("    outputS3Region: ").append(toIndentedString(outputS3Region)).append("\n");
    sb.append("    outputS3BucketName: ").append(toIndentedString(outputS3BucketName)).append("\n");
    sb.append("    outputS3KeyPrefix: ").append(toIndentedString(outputS3KeyPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OutputS3Region");
    openapiFields.add("OutputS3BucketName");
    openapiFields.add("OutputS3KeyPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3OutputLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3OutputLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3OutputLocation is not found in the empty JSON string", S3OutputLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3OutputLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3OutputLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OutputS3Region`
      if (jsonObj.get("OutputS3Region") != null && !jsonObj.get("OutputS3Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3Region"));
      }
      // validate the optional field `OutputS3BucketName`
      if (jsonObj.get("OutputS3BucketName") != null && !jsonObj.get("OutputS3BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3BucketName"));
      }
      // validate the optional field `OutputS3KeyPrefix`
      if (jsonObj.get("OutputS3KeyPrefix") != null && !jsonObj.get("OutputS3KeyPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputS3KeyPrefix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3OutputLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3OutputLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3OutputLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3OutputLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<S3OutputLocation>() {
           @Override
           public void write(JsonWriter out, S3OutputLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3OutputLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3OutputLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3OutputLocation
   * @throws IOException if the JSON string is invalid with respect to S3OutputLocation
   */
  public static S3OutputLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3OutputLocation.class);
  }

  /**
   * Convert an instance of S3OutputLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

