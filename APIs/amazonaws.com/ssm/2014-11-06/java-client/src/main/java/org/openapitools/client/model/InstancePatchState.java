/*
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PatchOperationType;
import org.openapitools.client.model.RebootOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the high-level patch compliance state for a managed node, providing information about the number of installed, missing, not applicable, and failed patches along with metadata about the operation when this information was gathered for the managed node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:21.701211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancePatchState {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_PATCH_GROUP = "PatchGroup";
  @SerializedName(SERIALIZED_NAME_PATCH_GROUP)
  private String patchGroup;

  public static final String SERIALIZED_NAME_BASELINE_ID = "BaselineId";
  @SerializedName(SERIALIZED_NAME_BASELINE_ID)
  private String baselineId;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "SnapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private String snapshotId;

  public static final String SERIALIZED_NAME_INSTALL_OVERRIDE_LIST = "InstallOverrideList";
  @SerializedName(SERIALIZED_NAME_INSTALL_OVERRIDE_LIST)
  private String installOverrideList;

  public static final String SERIALIZED_NAME_OWNER_INFORMATION = "OwnerInformation";
  @SerializedName(SERIALIZED_NAME_OWNER_INFORMATION)
  private String ownerInformation;

  public static final String SERIALIZED_NAME_INSTALLED_COUNT = "InstalledCount";
  @SerializedName(SERIALIZED_NAME_INSTALLED_COUNT)
  private Integer installedCount;

  public static final String SERIALIZED_NAME_INSTALLED_OTHER_COUNT = "InstalledOtherCount";
  @SerializedName(SERIALIZED_NAME_INSTALLED_OTHER_COUNT)
  private Integer installedOtherCount;

  public static final String SERIALIZED_NAME_INSTALLED_PENDING_REBOOT_COUNT = "InstalledPendingRebootCount";
  @SerializedName(SERIALIZED_NAME_INSTALLED_PENDING_REBOOT_COUNT)
  private Integer installedPendingRebootCount;

  public static final String SERIALIZED_NAME_INSTALLED_REJECTED_COUNT = "InstalledRejectedCount";
  @SerializedName(SERIALIZED_NAME_INSTALLED_REJECTED_COUNT)
  private Integer installedRejectedCount;

  public static final String SERIALIZED_NAME_MISSING_COUNT = "MissingCount";
  @SerializedName(SERIALIZED_NAME_MISSING_COUNT)
  private Integer missingCount;

  public static final String SERIALIZED_NAME_FAILED_COUNT = "FailedCount";
  @SerializedName(SERIALIZED_NAME_FAILED_COUNT)
  private Integer failedCount;

  public static final String SERIALIZED_NAME_UNREPORTED_NOT_APPLICABLE_COUNT = "UnreportedNotApplicableCount";
  @SerializedName(SERIALIZED_NAME_UNREPORTED_NOT_APPLICABLE_COUNT)
  private Integer unreportedNotApplicableCount;

  public static final String SERIALIZED_NAME_NOT_APPLICABLE_COUNT = "NotApplicableCount";
  @SerializedName(SERIALIZED_NAME_NOT_APPLICABLE_COUNT)
  private Integer notApplicableCount;

  public static final String SERIALIZED_NAME_OPERATION_START_TIME = "OperationStartTime";
  @SerializedName(SERIALIZED_NAME_OPERATION_START_TIME)
  private OffsetDateTime operationStartTime;

  public static final String SERIALIZED_NAME_OPERATION_END_TIME = "OperationEndTime";
  @SerializedName(SERIALIZED_NAME_OPERATION_END_TIME)
  private OffsetDateTime operationEndTime;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private PatchOperationType operation;

  public static final String SERIALIZED_NAME_LAST_NO_REBOOT_INSTALL_OPERATION_TIME = "LastNoRebootInstallOperationTime";
  @SerializedName(SERIALIZED_NAME_LAST_NO_REBOOT_INSTALL_OPERATION_TIME)
  private OffsetDateTime lastNoRebootInstallOperationTime;

  public static final String SERIALIZED_NAME_REBOOT_OPTION = "RebootOption";
  @SerializedName(SERIALIZED_NAME_REBOOT_OPTION)
  private RebootOption rebootOption;

  public static final String SERIALIZED_NAME_CRITICAL_NON_COMPLIANT_COUNT = "CriticalNonCompliantCount";
  @SerializedName(SERIALIZED_NAME_CRITICAL_NON_COMPLIANT_COUNT)
  private Integer criticalNonCompliantCount;

  public static final String SERIALIZED_NAME_SECURITY_NON_COMPLIANT_COUNT = "SecurityNonCompliantCount";
  @SerializedName(SERIALIZED_NAME_SECURITY_NON_COMPLIANT_COUNT)
  private Integer securityNonCompliantCount;

  public static final String SERIALIZED_NAME_OTHER_NON_COMPLIANT_COUNT = "OtherNonCompliantCount";
  @SerializedName(SERIALIZED_NAME_OTHER_NON_COMPLIANT_COUNT)
  private Integer otherNonCompliantCount;

  public InstancePatchState() {
  }

  public InstancePatchState instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public InstancePatchState patchGroup(String patchGroup) {
    this.patchGroup = patchGroup;
    return this;
  }

  /**
   * Get patchGroup
   * @return patchGroup
   */
  @javax.annotation.Nonnull
  public String getPatchGroup() {
    return patchGroup;
  }

  public void setPatchGroup(String patchGroup) {
    this.patchGroup = patchGroup;
  }


  public InstancePatchState baselineId(String baselineId) {
    this.baselineId = baselineId;
    return this;
  }

  /**
   * Get baselineId
   * @return baselineId
   */
  @javax.annotation.Nonnull
  public String getBaselineId() {
    return baselineId;
  }

  public void setBaselineId(String baselineId) {
    this.baselineId = baselineId;
  }


  public InstancePatchState snapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Get snapshotId
   * @return snapshotId
   */
  @javax.annotation.Nullable
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
  }


  public InstancePatchState installOverrideList(String installOverrideList) {
    this.installOverrideList = installOverrideList;
    return this;
  }

  /**
   * Get installOverrideList
   * @return installOverrideList
   */
  @javax.annotation.Nullable
  public String getInstallOverrideList() {
    return installOverrideList;
  }

  public void setInstallOverrideList(String installOverrideList) {
    this.installOverrideList = installOverrideList;
  }


  public InstancePatchState ownerInformation(String ownerInformation) {
    this.ownerInformation = ownerInformation;
    return this;
  }

  /**
   * Get ownerInformation
   * @return ownerInformation
   */
  @javax.annotation.Nullable
  public String getOwnerInformation() {
    return ownerInformation;
  }

  public void setOwnerInformation(String ownerInformation) {
    this.ownerInformation = ownerInformation;
  }


  public InstancePatchState installedCount(Integer installedCount) {
    this.installedCount = installedCount;
    return this;
  }

  /**
   * Get installedCount
   * @return installedCount
   */
  @javax.annotation.Nullable
  public Integer getInstalledCount() {
    return installedCount;
  }

  public void setInstalledCount(Integer installedCount) {
    this.installedCount = installedCount;
  }


  public InstancePatchState installedOtherCount(Integer installedOtherCount) {
    this.installedOtherCount = installedOtherCount;
    return this;
  }

  /**
   * Get installedOtherCount
   * @return installedOtherCount
   */
  @javax.annotation.Nullable
  public Integer getInstalledOtherCount() {
    return installedOtherCount;
  }

  public void setInstalledOtherCount(Integer installedOtherCount) {
    this.installedOtherCount = installedOtherCount;
  }


  public InstancePatchState installedPendingRebootCount(Integer installedPendingRebootCount) {
    this.installedPendingRebootCount = installedPendingRebootCount;
    return this;
  }

  /**
   * Get installedPendingRebootCount
   * @return installedPendingRebootCount
   */
  @javax.annotation.Nullable
  public Integer getInstalledPendingRebootCount() {
    return installedPendingRebootCount;
  }

  public void setInstalledPendingRebootCount(Integer installedPendingRebootCount) {
    this.installedPendingRebootCount = installedPendingRebootCount;
  }


  public InstancePatchState installedRejectedCount(Integer installedRejectedCount) {
    this.installedRejectedCount = installedRejectedCount;
    return this;
  }

  /**
   * Get installedRejectedCount
   * @return installedRejectedCount
   */
  @javax.annotation.Nullable
  public Integer getInstalledRejectedCount() {
    return installedRejectedCount;
  }

  public void setInstalledRejectedCount(Integer installedRejectedCount) {
    this.installedRejectedCount = installedRejectedCount;
  }


  public InstancePatchState missingCount(Integer missingCount) {
    this.missingCount = missingCount;
    return this;
  }

  /**
   * Get missingCount
   * @return missingCount
   */
  @javax.annotation.Nullable
  public Integer getMissingCount() {
    return missingCount;
  }

  public void setMissingCount(Integer missingCount) {
    this.missingCount = missingCount;
  }


  public InstancePatchState failedCount(Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

  /**
   * Get failedCount
   * @return failedCount
   */
  @javax.annotation.Nullable
  public Integer getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(Integer failedCount) {
    this.failedCount = failedCount;
  }


  public InstancePatchState unreportedNotApplicableCount(Integer unreportedNotApplicableCount) {
    this.unreportedNotApplicableCount = unreportedNotApplicableCount;
    return this;
  }

  /**
   * Get unreportedNotApplicableCount
   * @return unreportedNotApplicableCount
   */
  @javax.annotation.Nullable
  public Integer getUnreportedNotApplicableCount() {
    return unreportedNotApplicableCount;
  }

  public void setUnreportedNotApplicableCount(Integer unreportedNotApplicableCount) {
    this.unreportedNotApplicableCount = unreportedNotApplicableCount;
  }


  public InstancePatchState notApplicableCount(Integer notApplicableCount) {
    this.notApplicableCount = notApplicableCount;
    return this;
  }

  /**
   * Get notApplicableCount
   * @return notApplicableCount
   */
  @javax.annotation.Nullable
  public Integer getNotApplicableCount() {
    return notApplicableCount;
  }

  public void setNotApplicableCount(Integer notApplicableCount) {
    this.notApplicableCount = notApplicableCount;
  }


  public InstancePatchState operationStartTime(OffsetDateTime operationStartTime) {
    this.operationStartTime = operationStartTime;
    return this;
  }

  /**
   * Get operationStartTime
   * @return operationStartTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOperationStartTime() {
    return operationStartTime;
  }

  public void setOperationStartTime(OffsetDateTime operationStartTime) {
    this.operationStartTime = operationStartTime;
  }


  public InstancePatchState operationEndTime(OffsetDateTime operationEndTime) {
    this.operationEndTime = operationEndTime;
    return this;
  }

  /**
   * Get operationEndTime
   * @return operationEndTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOperationEndTime() {
    return operationEndTime;
  }

  public void setOperationEndTime(OffsetDateTime operationEndTime) {
    this.operationEndTime = operationEndTime;
  }


  public InstancePatchState operation(PatchOperationType operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nonnull
  public PatchOperationType getOperation() {
    return operation;
  }

  public void setOperation(PatchOperationType operation) {
    this.operation = operation;
  }


  public InstancePatchState lastNoRebootInstallOperationTime(OffsetDateTime lastNoRebootInstallOperationTime) {
    this.lastNoRebootInstallOperationTime = lastNoRebootInstallOperationTime;
    return this;
  }

  /**
   * Get lastNoRebootInstallOperationTime
   * @return lastNoRebootInstallOperationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastNoRebootInstallOperationTime() {
    return lastNoRebootInstallOperationTime;
  }

  public void setLastNoRebootInstallOperationTime(OffsetDateTime lastNoRebootInstallOperationTime) {
    this.lastNoRebootInstallOperationTime = lastNoRebootInstallOperationTime;
  }


  public InstancePatchState rebootOption(RebootOption rebootOption) {
    this.rebootOption = rebootOption;
    return this;
  }

  /**
   * Get rebootOption
   * @return rebootOption
   */
  @javax.annotation.Nullable
  public RebootOption getRebootOption() {
    return rebootOption;
  }

  public void setRebootOption(RebootOption rebootOption) {
    this.rebootOption = rebootOption;
  }


  public InstancePatchState criticalNonCompliantCount(Integer criticalNonCompliantCount) {
    this.criticalNonCompliantCount = criticalNonCompliantCount;
    return this;
  }

  /**
   * Get criticalNonCompliantCount
   * @return criticalNonCompliantCount
   */
  @javax.annotation.Nullable
  public Integer getCriticalNonCompliantCount() {
    return criticalNonCompliantCount;
  }

  public void setCriticalNonCompliantCount(Integer criticalNonCompliantCount) {
    this.criticalNonCompliantCount = criticalNonCompliantCount;
  }


  public InstancePatchState securityNonCompliantCount(Integer securityNonCompliantCount) {
    this.securityNonCompliantCount = securityNonCompliantCount;
    return this;
  }

  /**
   * Get securityNonCompliantCount
   * @return securityNonCompliantCount
   */
  @javax.annotation.Nullable
  public Integer getSecurityNonCompliantCount() {
    return securityNonCompliantCount;
  }

  public void setSecurityNonCompliantCount(Integer securityNonCompliantCount) {
    this.securityNonCompliantCount = securityNonCompliantCount;
  }


  public InstancePatchState otherNonCompliantCount(Integer otherNonCompliantCount) {
    this.otherNonCompliantCount = otherNonCompliantCount;
    return this;
  }

  /**
   * Get otherNonCompliantCount
   * @return otherNonCompliantCount
   */
  @javax.annotation.Nullable
  public Integer getOtherNonCompliantCount() {
    return otherNonCompliantCount;
  }

  public void setOtherNonCompliantCount(Integer otherNonCompliantCount) {
    this.otherNonCompliantCount = otherNonCompliantCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancePatchState instancePatchState = (InstancePatchState) o;
    return Objects.equals(this.instanceId, instancePatchState.instanceId) &&
        Objects.equals(this.patchGroup, instancePatchState.patchGroup) &&
        Objects.equals(this.baselineId, instancePatchState.baselineId) &&
        Objects.equals(this.snapshotId, instancePatchState.snapshotId) &&
        Objects.equals(this.installOverrideList, instancePatchState.installOverrideList) &&
        Objects.equals(this.ownerInformation, instancePatchState.ownerInformation) &&
        Objects.equals(this.installedCount, instancePatchState.installedCount) &&
        Objects.equals(this.installedOtherCount, instancePatchState.installedOtherCount) &&
        Objects.equals(this.installedPendingRebootCount, instancePatchState.installedPendingRebootCount) &&
        Objects.equals(this.installedRejectedCount, instancePatchState.installedRejectedCount) &&
        Objects.equals(this.missingCount, instancePatchState.missingCount) &&
        Objects.equals(this.failedCount, instancePatchState.failedCount) &&
        Objects.equals(this.unreportedNotApplicableCount, instancePatchState.unreportedNotApplicableCount) &&
        Objects.equals(this.notApplicableCount, instancePatchState.notApplicableCount) &&
        Objects.equals(this.operationStartTime, instancePatchState.operationStartTime) &&
        Objects.equals(this.operationEndTime, instancePatchState.operationEndTime) &&
        Objects.equals(this.operation, instancePatchState.operation) &&
        Objects.equals(this.lastNoRebootInstallOperationTime, instancePatchState.lastNoRebootInstallOperationTime) &&
        Objects.equals(this.rebootOption, instancePatchState.rebootOption) &&
        Objects.equals(this.criticalNonCompliantCount, instancePatchState.criticalNonCompliantCount) &&
        Objects.equals(this.securityNonCompliantCount, instancePatchState.securityNonCompliantCount) &&
        Objects.equals(this.otherNonCompliantCount, instancePatchState.otherNonCompliantCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, patchGroup, baselineId, snapshotId, installOverrideList, ownerInformation, installedCount, installedOtherCount, installedPendingRebootCount, installedRejectedCount, missingCount, failedCount, unreportedNotApplicableCount, notApplicableCount, operationStartTime, operationEndTime, operation, lastNoRebootInstallOperationTime, rebootOption, criticalNonCompliantCount, securityNonCompliantCount, otherNonCompliantCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancePatchState {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    patchGroup: ").append(toIndentedString(patchGroup)).append("\n");
    sb.append("    baselineId: ").append(toIndentedString(baselineId)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    installOverrideList: ").append(toIndentedString(installOverrideList)).append("\n");
    sb.append("    ownerInformation: ").append(toIndentedString(ownerInformation)).append("\n");
    sb.append("    installedCount: ").append(toIndentedString(installedCount)).append("\n");
    sb.append("    installedOtherCount: ").append(toIndentedString(installedOtherCount)).append("\n");
    sb.append("    installedPendingRebootCount: ").append(toIndentedString(installedPendingRebootCount)).append("\n");
    sb.append("    installedRejectedCount: ").append(toIndentedString(installedRejectedCount)).append("\n");
    sb.append("    missingCount: ").append(toIndentedString(missingCount)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    unreportedNotApplicableCount: ").append(toIndentedString(unreportedNotApplicableCount)).append("\n");
    sb.append("    notApplicableCount: ").append(toIndentedString(notApplicableCount)).append("\n");
    sb.append("    operationStartTime: ").append(toIndentedString(operationStartTime)).append("\n");
    sb.append("    operationEndTime: ").append(toIndentedString(operationEndTime)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    lastNoRebootInstallOperationTime: ").append(toIndentedString(lastNoRebootInstallOperationTime)).append("\n");
    sb.append("    rebootOption: ").append(toIndentedString(rebootOption)).append("\n");
    sb.append("    criticalNonCompliantCount: ").append(toIndentedString(criticalNonCompliantCount)).append("\n");
    sb.append("    securityNonCompliantCount: ").append(toIndentedString(securityNonCompliantCount)).append("\n");
    sb.append("    otherNonCompliantCount: ").append(toIndentedString(otherNonCompliantCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceId");
    openapiFields.add("PatchGroup");
    openapiFields.add("BaselineId");
    openapiFields.add("SnapshotId");
    openapiFields.add("InstallOverrideList");
    openapiFields.add("OwnerInformation");
    openapiFields.add("InstalledCount");
    openapiFields.add("InstalledOtherCount");
    openapiFields.add("InstalledPendingRebootCount");
    openapiFields.add("InstalledRejectedCount");
    openapiFields.add("MissingCount");
    openapiFields.add("FailedCount");
    openapiFields.add("UnreportedNotApplicableCount");
    openapiFields.add("NotApplicableCount");
    openapiFields.add("OperationStartTime");
    openapiFields.add("OperationEndTime");
    openapiFields.add("Operation");
    openapiFields.add("LastNoRebootInstallOperationTime");
    openapiFields.add("RebootOption");
    openapiFields.add("CriticalNonCompliantCount");
    openapiFields.add("SecurityNonCompliantCount");
    openapiFields.add("OtherNonCompliantCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InstanceId");
    openapiRequiredFields.add("PatchGroup");
    openapiRequiredFields.add("BaselineId");
    openapiRequiredFields.add("OperationStartTime");
    openapiRequiredFields.add("OperationEndTime");
    openapiRequiredFields.add("Operation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancePatchState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancePatchState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancePatchState is not found in the empty JSON string", InstancePatchState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancePatchState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancePatchState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstancePatchState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InstanceId`
      String.validateJsonElement(jsonObj.get("InstanceId"));
      // validate the required field `PatchGroup`
      String.validateJsonElement(jsonObj.get("PatchGroup"));
      // validate the required field `BaselineId`
      String.validateJsonElement(jsonObj.get("BaselineId"));
      // validate the optional field `SnapshotId`
      if (jsonObj.get("SnapshotId") != null && !jsonObj.get("SnapshotId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotId"));
      }
      // validate the optional field `InstallOverrideList`
      if (jsonObj.get("InstallOverrideList") != null && !jsonObj.get("InstallOverrideList").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstallOverrideList"));
      }
      // validate the optional field `OwnerInformation`
      if (jsonObj.get("OwnerInformation") != null && !jsonObj.get("OwnerInformation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerInformation"));
      }
      // validate the optional field `InstalledCount`
      if (jsonObj.get("InstalledCount") != null && !jsonObj.get("InstalledCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstalledCount"));
      }
      // validate the optional field `InstalledOtherCount`
      if (jsonObj.get("InstalledOtherCount") != null && !jsonObj.get("InstalledOtherCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstalledOtherCount"));
      }
      // validate the optional field `InstalledPendingRebootCount`
      if (jsonObj.get("InstalledPendingRebootCount") != null && !jsonObj.get("InstalledPendingRebootCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstalledPendingRebootCount"));
      }
      // validate the optional field `InstalledRejectedCount`
      if (jsonObj.get("InstalledRejectedCount") != null && !jsonObj.get("InstalledRejectedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstalledRejectedCount"));
      }
      // validate the optional field `MissingCount`
      if (jsonObj.get("MissingCount") != null && !jsonObj.get("MissingCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MissingCount"));
      }
      // validate the optional field `FailedCount`
      if (jsonObj.get("FailedCount") != null && !jsonObj.get("FailedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedCount"));
      }
      // validate the optional field `UnreportedNotApplicableCount`
      if (jsonObj.get("UnreportedNotApplicableCount") != null && !jsonObj.get("UnreportedNotApplicableCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UnreportedNotApplicableCount"));
      }
      // validate the optional field `NotApplicableCount`
      if (jsonObj.get("NotApplicableCount") != null && !jsonObj.get("NotApplicableCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NotApplicableCount"));
      }
      // validate the required field `OperationStartTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("OperationStartTime"));
      // validate the required field `OperationEndTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("OperationEndTime"));
      // validate the required field `Operation`
      PatchOperationType.validateJsonElement(jsonObj.get("Operation"));
      // validate the optional field `LastNoRebootInstallOperationTime`
      if (jsonObj.get("LastNoRebootInstallOperationTime") != null && !jsonObj.get("LastNoRebootInstallOperationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastNoRebootInstallOperationTime"));
      }
      // validate the optional field `RebootOption`
      if (jsonObj.get("RebootOption") != null && !jsonObj.get("RebootOption").isJsonNull()) {
        RebootOption.validateJsonElement(jsonObj.get("RebootOption"));
      }
      // validate the optional field `CriticalNonCompliantCount`
      if (jsonObj.get("CriticalNonCompliantCount") != null && !jsonObj.get("CriticalNonCompliantCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CriticalNonCompliantCount"));
      }
      // validate the optional field `SecurityNonCompliantCount`
      if (jsonObj.get("SecurityNonCompliantCount") != null && !jsonObj.get("SecurityNonCompliantCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SecurityNonCompliantCount"));
      }
      // validate the optional field `OtherNonCompliantCount`
      if (jsonObj.get("OtherNonCompliantCount") != null && !jsonObj.get("OtherNonCompliantCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OtherNonCompliantCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancePatchState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancePatchState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancePatchState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancePatchState.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancePatchState>() {
           @Override
           public void write(JsonWriter out, InstancePatchState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancePatchState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancePatchState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancePatchState
   * @throws IOException if the JSON string is invalid with respect to InstancePatchState
   */
  public static InstancePatchState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancePatchState.class);
  }

  /**
   * Convert an instance of InstancePatchState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

