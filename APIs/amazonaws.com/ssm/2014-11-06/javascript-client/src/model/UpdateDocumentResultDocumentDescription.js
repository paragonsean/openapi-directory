/**
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentDescription from './DocumentDescription';
import DocumentFormat from './DocumentFormat';
import DocumentHashType from './DocumentHashType';
import DocumentStatus from './DocumentStatus';
import DocumentType from './DocumentType';
import ReviewStatus from './ReviewStatus';

/**
 * The UpdateDocumentResultDocumentDescription model module.
 * @module model/UpdateDocumentResultDocumentDescription
 * @version 2014-11-06
 */
class UpdateDocumentResultDocumentDescription {
    /**
     * Constructs a new <code>UpdateDocumentResultDocumentDescription</code>.
     * @alias module:model/UpdateDocumentResultDocumentDescription
     * @implements module:model/DocumentDescription
     */
    constructor() { 
        DocumentDescription.initialize(this);
        UpdateDocumentResultDocumentDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDocumentResultDocumentDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDocumentResultDocumentDescription} obj Optional instance to populate.
     * @return {module:model/UpdateDocumentResultDocumentDescription} The populated <code>UpdateDocumentResultDocumentDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDocumentResultDocumentDescription();
            DocumentDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('Sha1')) {
                obj['Sha1'] = ApiClient.convertToType(data['Sha1'], 'String');
            }
            if (data.hasOwnProperty('Hash')) {
                obj['Hash'] = ApiClient.convertToType(data['Hash'], 'String');
            }
            if (data.hasOwnProperty('HashType')) {
                obj['HashType'] = ApiClient.convertToType(data['HashType'], DocumentHashType);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('DisplayName')) {
                obj['DisplayName'] = ApiClient.convertToType(data['DisplayName'], 'String');
            }
            if (data.hasOwnProperty('VersionName')) {
                obj['VersionName'] = ApiClient.convertToType(data['VersionName'], 'String');
            }
            if (data.hasOwnProperty('Owner')) {
                obj['Owner'] = ApiClient.convertToType(data['Owner'], 'String');
            }
            if (data.hasOwnProperty('CreatedDate')) {
                obj['CreatedDate'] = ApiClient.convertToType(data['CreatedDate'], 'Date');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], DocumentStatus);
            }
            if (data.hasOwnProperty('StatusInformation')) {
                obj['StatusInformation'] = ApiClient.convertToType(data['StatusInformation'], 'String');
            }
            if (data.hasOwnProperty('DocumentVersion')) {
                obj['DocumentVersion'] = ApiClient.convertToType(data['DocumentVersion'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Parameters')) {
                obj['Parameters'] = ApiClient.convertToType(data['Parameters'], Array);
            }
            if (data.hasOwnProperty('PlatformTypes')) {
                obj['PlatformTypes'] = ApiClient.convertToType(data['PlatformTypes'], Array);
            }
            if (data.hasOwnProperty('DocumentType')) {
                obj['DocumentType'] = ApiClient.convertToType(data['DocumentType'], DocumentType);
            }
            if (data.hasOwnProperty('SchemaVersion')) {
                obj['SchemaVersion'] = ApiClient.convertToType(data['SchemaVersion'], 'String');
            }
            if (data.hasOwnProperty('LatestVersion')) {
                obj['LatestVersion'] = ApiClient.convertToType(data['LatestVersion'], 'String');
            }
            if (data.hasOwnProperty('DefaultVersion')) {
                obj['DefaultVersion'] = ApiClient.convertToType(data['DefaultVersion'], 'String');
            }
            if (data.hasOwnProperty('DocumentFormat')) {
                obj['DocumentFormat'] = ApiClient.convertToType(data['DocumentFormat'], DocumentFormat);
            }
            if (data.hasOwnProperty('TargetType')) {
                obj['TargetType'] = ApiClient.convertToType(data['TargetType'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('AttachmentsInformation')) {
                obj['AttachmentsInformation'] = ApiClient.convertToType(data['AttachmentsInformation'], Array);
            }
            if (data.hasOwnProperty('Requires')) {
                obj['Requires'] = ApiClient.convertToType(data['Requires'], Array);
            }
            if (data.hasOwnProperty('Author')) {
                obj['Author'] = ApiClient.convertToType(data['Author'], 'String');
            }
            if (data.hasOwnProperty('ReviewInformation')) {
                obj['ReviewInformation'] = ApiClient.convertToType(data['ReviewInformation'], Array);
            }
            if (data.hasOwnProperty('ApprovedVersion')) {
                obj['ApprovedVersion'] = ApiClient.convertToType(data['ApprovedVersion'], 'String');
            }
            if (data.hasOwnProperty('PendingReviewVersion')) {
                obj['PendingReviewVersion'] = ApiClient.convertToType(data['PendingReviewVersion'], 'String');
            }
            if (data.hasOwnProperty('ReviewStatus')) {
                obj['ReviewStatus'] = ApiClient.convertToType(data['ReviewStatus'], ReviewStatus);
            }
            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], Array);
            }
            if (data.hasOwnProperty('CategoryEnum')) {
                obj['CategoryEnum'] = ApiClient.convertToType(data['CategoryEnum'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDocumentResultDocumentDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDocumentResultDocumentDescription</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Sha1`
        if (data['Sha1']) { // data not null
          String.validateJSON(data['Sha1']);
        }
        // validate the optional field `Hash`
        if (data['Hash']) { // data not null
          String.validateJSON(data['Hash']);
        }
        // validate the optional field `HashType`
        if (data['HashType']) { // data not null
          DocumentHashType.validateJSON(data['HashType']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `DisplayName`
        if (data['DisplayName']) { // data not null
          String.validateJSON(data['DisplayName']);
        }
        // validate the optional field `VersionName`
        if (data['VersionName']) { // data not null
          String.validateJSON(data['VersionName']);
        }
        // validate the optional field `Owner`
        if (data['Owner']) { // data not null
          String.validateJSON(data['Owner']);
        }
        // validate the optional field `CreatedDate`
        if (data['CreatedDate']) { // data not null
          Date.validateJSON(data['CreatedDate']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          DocumentStatus.validateJSON(data['Status']);
        }
        // validate the optional field `StatusInformation`
        if (data['StatusInformation']) { // data not null
          String.validateJSON(data['StatusInformation']);
        }
        // validate the optional field `DocumentVersion`
        if (data['DocumentVersion']) { // data not null
          String.validateJSON(data['DocumentVersion']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Parameters`
        if (data['Parameters']) { // data not null
          Array.validateJSON(data['Parameters']);
        }
        // validate the optional field `PlatformTypes`
        if (data['PlatformTypes']) { // data not null
          Array.validateJSON(data['PlatformTypes']);
        }
        // validate the optional field `DocumentType`
        if (data['DocumentType']) { // data not null
          DocumentType.validateJSON(data['DocumentType']);
        }
        // validate the optional field `SchemaVersion`
        if (data['SchemaVersion']) { // data not null
          String.validateJSON(data['SchemaVersion']);
        }
        // validate the optional field `LatestVersion`
        if (data['LatestVersion']) { // data not null
          String.validateJSON(data['LatestVersion']);
        }
        // validate the optional field `DefaultVersion`
        if (data['DefaultVersion']) { // data not null
          String.validateJSON(data['DefaultVersion']);
        }
        // validate the optional field `DocumentFormat`
        if (data['DocumentFormat']) { // data not null
          DocumentFormat.validateJSON(data['DocumentFormat']);
        }
        // validate the optional field `TargetType`
        if (data['TargetType']) { // data not null
          String.validateJSON(data['TargetType']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `AttachmentsInformation`
        if (data['AttachmentsInformation']) { // data not null
          Array.validateJSON(data['AttachmentsInformation']);
        }
        // validate the optional field `Requires`
        if (data['Requires']) { // data not null
          Array.validateJSON(data['Requires']);
        }
        // validate the optional field `Author`
        if (data['Author']) { // data not null
          String.validateJSON(data['Author']);
        }
        // validate the optional field `ReviewInformation`
        if (data['ReviewInformation']) { // data not null
          Array.validateJSON(data['ReviewInformation']);
        }
        // validate the optional field `ApprovedVersion`
        if (data['ApprovedVersion']) { // data not null
          String.validateJSON(data['ApprovedVersion']);
        }
        // validate the optional field `PendingReviewVersion`
        if (data['PendingReviewVersion']) { // data not null
          String.validateJSON(data['PendingReviewVersion']);
        }
        // validate the optional field `ReviewStatus`
        if (data['ReviewStatus']) { // data not null
          ReviewStatus.validateJSON(data['ReviewStatus']);
        }
        // validate the optional field `Category`
        if (data['Category']) { // data not null
          Array.validateJSON(data['Category']);
        }
        // validate the optional field `CategoryEnum`
        if (data['CategoryEnum']) { // data not null
          Array.validateJSON(data['CategoryEnum']);
        }

        return true;
    }


}



/**
 * @member {String} Sha1
 */
UpdateDocumentResultDocumentDescription.prototype['Sha1'] = undefined;

/**
 * @member {String} Hash
 */
UpdateDocumentResultDocumentDescription.prototype['Hash'] = undefined;

/**
 * @member {module:model/DocumentHashType} HashType
 */
UpdateDocumentResultDocumentDescription.prototype['HashType'] = undefined;

/**
 * @member {String} Name
 */
UpdateDocumentResultDocumentDescription.prototype['Name'] = undefined;

/**
 * @member {String} DisplayName
 */
UpdateDocumentResultDocumentDescription.prototype['DisplayName'] = undefined;

/**
 * @member {String} VersionName
 */
UpdateDocumentResultDocumentDescription.prototype['VersionName'] = undefined;

/**
 * @member {String} Owner
 */
UpdateDocumentResultDocumentDescription.prototype['Owner'] = undefined;

/**
 * @member {Date} CreatedDate
 */
UpdateDocumentResultDocumentDescription.prototype['CreatedDate'] = undefined;

/**
 * @member {module:model/DocumentStatus} Status
 */
UpdateDocumentResultDocumentDescription.prototype['Status'] = undefined;

/**
 * @member {String} StatusInformation
 */
UpdateDocumentResultDocumentDescription.prototype['StatusInformation'] = undefined;

/**
 * @member {String} DocumentVersion
 */
UpdateDocumentResultDocumentDescription.prototype['DocumentVersion'] = undefined;

/**
 * @member {String} Description
 */
UpdateDocumentResultDocumentDescription.prototype['Description'] = undefined;

/**
 * @member {Array} Parameters
 */
UpdateDocumentResultDocumentDescription.prototype['Parameters'] = undefined;

/**
 * @member {Array} PlatformTypes
 */
UpdateDocumentResultDocumentDescription.prototype['PlatformTypes'] = undefined;

/**
 * @member {module:model/DocumentType} DocumentType
 */
UpdateDocumentResultDocumentDescription.prototype['DocumentType'] = undefined;

/**
 * @member {String} SchemaVersion
 */
UpdateDocumentResultDocumentDescription.prototype['SchemaVersion'] = undefined;

/**
 * @member {String} LatestVersion
 */
UpdateDocumentResultDocumentDescription.prototype['LatestVersion'] = undefined;

/**
 * @member {String} DefaultVersion
 */
UpdateDocumentResultDocumentDescription.prototype['DefaultVersion'] = undefined;

/**
 * @member {module:model/DocumentFormat} DocumentFormat
 */
UpdateDocumentResultDocumentDescription.prototype['DocumentFormat'] = undefined;

/**
 * @member {String} TargetType
 */
UpdateDocumentResultDocumentDescription.prototype['TargetType'] = undefined;

/**
 * @member {Array} Tags
 */
UpdateDocumentResultDocumentDescription.prototype['Tags'] = undefined;

/**
 * @member {Array} AttachmentsInformation
 */
UpdateDocumentResultDocumentDescription.prototype['AttachmentsInformation'] = undefined;

/**
 * @member {Array} Requires
 */
UpdateDocumentResultDocumentDescription.prototype['Requires'] = undefined;

/**
 * @member {String} Author
 */
UpdateDocumentResultDocumentDescription.prototype['Author'] = undefined;

/**
 * @member {Array} ReviewInformation
 */
UpdateDocumentResultDocumentDescription.prototype['ReviewInformation'] = undefined;

/**
 * @member {String} ApprovedVersion
 */
UpdateDocumentResultDocumentDescription.prototype['ApprovedVersion'] = undefined;

/**
 * @member {String} PendingReviewVersion
 */
UpdateDocumentResultDocumentDescription.prototype['PendingReviewVersion'] = undefined;

/**
 * @member {module:model/ReviewStatus} ReviewStatus
 */
UpdateDocumentResultDocumentDescription.prototype['ReviewStatus'] = undefined;

/**
 * @member {Array} Category
 */
UpdateDocumentResultDocumentDescription.prototype['Category'] = undefined;

/**
 * @member {Array} CategoryEnum
 */
UpdateDocumentResultDocumentDescription.prototype['CategoryEnum'] = undefined;


// Implement DocumentDescription interface:
/**
 * @member {String} Sha1
 */
DocumentDescription.prototype['Sha1'] = undefined;
/**
 * @member {String} Hash
 */
DocumentDescription.prototype['Hash'] = undefined;
/**
 * @member {module:model/DocumentHashType} HashType
 */
DocumentDescription.prototype['HashType'] = undefined;
/**
 * @member {String} Name
 */
DocumentDescription.prototype['Name'] = undefined;
/**
 * @member {String} DisplayName
 */
DocumentDescription.prototype['DisplayName'] = undefined;
/**
 * @member {String} VersionName
 */
DocumentDescription.prototype['VersionName'] = undefined;
/**
 * @member {String} Owner
 */
DocumentDescription.prototype['Owner'] = undefined;
/**
 * @member {Date} CreatedDate
 */
DocumentDescription.prototype['CreatedDate'] = undefined;
/**
 * @member {module:model/DocumentStatus} Status
 */
DocumentDescription.prototype['Status'] = undefined;
/**
 * @member {String} StatusInformation
 */
DocumentDescription.prototype['StatusInformation'] = undefined;
/**
 * @member {String} DocumentVersion
 */
DocumentDescription.prototype['DocumentVersion'] = undefined;
/**
 * @member {String} Description
 */
DocumentDescription.prototype['Description'] = undefined;
/**
 * @member {Array} Parameters
 */
DocumentDescription.prototype['Parameters'] = undefined;
/**
 * @member {Array} PlatformTypes
 */
DocumentDescription.prototype['PlatformTypes'] = undefined;
/**
 * @member {module:model/DocumentType} DocumentType
 */
DocumentDescription.prototype['DocumentType'] = undefined;
/**
 * @member {String} SchemaVersion
 */
DocumentDescription.prototype['SchemaVersion'] = undefined;
/**
 * @member {String} LatestVersion
 */
DocumentDescription.prototype['LatestVersion'] = undefined;
/**
 * @member {String} DefaultVersion
 */
DocumentDescription.prototype['DefaultVersion'] = undefined;
/**
 * @member {module:model/DocumentFormat} DocumentFormat
 */
DocumentDescription.prototype['DocumentFormat'] = undefined;
/**
 * @member {String} TargetType
 */
DocumentDescription.prototype['TargetType'] = undefined;
/**
 * @member {Array} Tags
 */
DocumentDescription.prototype['Tags'] = undefined;
/**
 * @member {Array} AttachmentsInformation
 */
DocumentDescription.prototype['AttachmentsInformation'] = undefined;
/**
 * @member {Array} Requires
 */
DocumentDescription.prototype['Requires'] = undefined;
/**
 * @member {String} Author
 */
DocumentDescription.prototype['Author'] = undefined;
/**
 * @member {Array} ReviewInformation
 */
DocumentDescription.prototype['ReviewInformation'] = undefined;
/**
 * @member {String} ApprovedVersion
 */
DocumentDescription.prototype['ApprovedVersion'] = undefined;
/**
 * @member {String} PendingReviewVersion
 */
DocumentDescription.prototype['PendingReviewVersion'] = undefined;
/**
 * @member {module:model/ReviewStatus} ReviewStatus
 */
DocumentDescription.prototype['ReviewStatus'] = undefined;
/**
 * @member {Array} Category
 */
DocumentDescription.prototype['Category'] = undefined;
/**
 * @member {Array} CategoryEnum
 */
DocumentDescription.prototype['CategoryEnum'] = undefined;




export default UpdateDocumentResultDocumentDescription;

