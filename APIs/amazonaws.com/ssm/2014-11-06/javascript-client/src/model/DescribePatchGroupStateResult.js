/**
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DescribePatchGroupStateResult model module.
 * @module model/DescribePatchGroupStateResult
 * @version 2014-11-06
 */
class DescribePatchGroupStateResult {
    /**
     * Constructs a new <code>DescribePatchGroupStateResult</code>.
     * @alias module:model/DescribePatchGroupStateResult
     */
    constructor() { 
        
        DescribePatchGroupStateResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribePatchGroupStateResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribePatchGroupStateResult} obj Optional instance to populate.
     * @return {module:model/DescribePatchGroupStateResult} The populated <code>DescribePatchGroupStateResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribePatchGroupStateResult();

            if (data.hasOwnProperty('Instances')) {
                obj['Instances'] = ApiClient.convertToType(data['Instances'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithInstalledPatches')) {
                obj['InstancesWithInstalledPatches'] = ApiClient.convertToType(data['InstancesWithInstalledPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithInstalledOtherPatches')) {
                obj['InstancesWithInstalledOtherPatches'] = ApiClient.convertToType(data['InstancesWithInstalledOtherPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithInstalledPendingRebootPatches')) {
                obj['InstancesWithInstalledPendingRebootPatches'] = ApiClient.convertToType(data['InstancesWithInstalledPendingRebootPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithInstalledRejectedPatches')) {
                obj['InstancesWithInstalledRejectedPatches'] = ApiClient.convertToType(data['InstancesWithInstalledRejectedPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithMissingPatches')) {
                obj['InstancesWithMissingPatches'] = ApiClient.convertToType(data['InstancesWithMissingPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithFailedPatches')) {
                obj['InstancesWithFailedPatches'] = ApiClient.convertToType(data['InstancesWithFailedPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithNotApplicablePatches')) {
                obj['InstancesWithNotApplicablePatches'] = ApiClient.convertToType(data['InstancesWithNotApplicablePatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithUnreportedNotApplicablePatches')) {
                obj['InstancesWithUnreportedNotApplicablePatches'] = ApiClient.convertToType(data['InstancesWithUnreportedNotApplicablePatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithCriticalNonCompliantPatches')) {
                obj['InstancesWithCriticalNonCompliantPatches'] = ApiClient.convertToType(data['InstancesWithCriticalNonCompliantPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithSecurityNonCompliantPatches')) {
                obj['InstancesWithSecurityNonCompliantPatches'] = ApiClient.convertToType(data['InstancesWithSecurityNonCompliantPatches'], 'Number');
            }
            if (data.hasOwnProperty('InstancesWithOtherNonCompliantPatches')) {
                obj['InstancesWithOtherNonCompliantPatches'] = ApiClient.convertToType(data['InstancesWithOtherNonCompliantPatches'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribePatchGroupStateResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribePatchGroupStateResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Instances`
        if (data['Instances']) { // data not null
          Number.validateJSON(data['Instances']);
        }
        // validate the optional field `InstancesWithInstalledPatches`
        if (data['InstancesWithInstalledPatches']) { // data not null
          Number.validateJSON(data['InstancesWithInstalledPatches']);
        }
        // validate the optional field `InstancesWithInstalledOtherPatches`
        if (data['InstancesWithInstalledOtherPatches']) { // data not null
          Number.validateJSON(data['InstancesWithInstalledOtherPatches']);
        }
        // validate the optional field `InstancesWithInstalledPendingRebootPatches`
        if (data['InstancesWithInstalledPendingRebootPatches']) { // data not null
          Number.validateJSON(data['InstancesWithInstalledPendingRebootPatches']);
        }
        // validate the optional field `InstancesWithInstalledRejectedPatches`
        if (data['InstancesWithInstalledRejectedPatches']) { // data not null
          Number.validateJSON(data['InstancesWithInstalledRejectedPatches']);
        }
        // validate the optional field `InstancesWithMissingPatches`
        if (data['InstancesWithMissingPatches']) { // data not null
          Number.validateJSON(data['InstancesWithMissingPatches']);
        }
        // validate the optional field `InstancesWithFailedPatches`
        if (data['InstancesWithFailedPatches']) { // data not null
          Number.validateJSON(data['InstancesWithFailedPatches']);
        }
        // validate the optional field `InstancesWithNotApplicablePatches`
        if (data['InstancesWithNotApplicablePatches']) { // data not null
          Number.validateJSON(data['InstancesWithNotApplicablePatches']);
        }
        // validate the optional field `InstancesWithUnreportedNotApplicablePatches`
        if (data['InstancesWithUnreportedNotApplicablePatches']) { // data not null
          Number.validateJSON(data['InstancesWithUnreportedNotApplicablePatches']);
        }
        // validate the optional field `InstancesWithCriticalNonCompliantPatches`
        if (data['InstancesWithCriticalNonCompliantPatches']) { // data not null
          Number.validateJSON(data['InstancesWithCriticalNonCompliantPatches']);
        }
        // validate the optional field `InstancesWithSecurityNonCompliantPatches`
        if (data['InstancesWithSecurityNonCompliantPatches']) { // data not null
          Number.validateJSON(data['InstancesWithSecurityNonCompliantPatches']);
        }
        // validate the optional field `InstancesWithOtherNonCompliantPatches`
        if (data['InstancesWithOtherNonCompliantPatches']) { // data not null
          Number.validateJSON(data['InstancesWithOtherNonCompliantPatches']);
        }

        return true;
    }


}



/**
 * @member {Number} Instances
 */
DescribePatchGroupStateResult.prototype['Instances'] = undefined;

/**
 * @member {Number} InstancesWithInstalledPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithInstalledPatches'] = undefined;

/**
 * @member {Number} InstancesWithInstalledOtherPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithInstalledOtherPatches'] = undefined;

/**
 * @member {Number} InstancesWithInstalledPendingRebootPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithInstalledPendingRebootPatches'] = undefined;

/**
 * @member {Number} InstancesWithInstalledRejectedPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithInstalledRejectedPatches'] = undefined;

/**
 * @member {Number} InstancesWithMissingPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithMissingPatches'] = undefined;

/**
 * @member {Number} InstancesWithFailedPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithFailedPatches'] = undefined;

/**
 * @member {Number} InstancesWithNotApplicablePatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithNotApplicablePatches'] = undefined;

/**
 * @member {Number} InstancesWithUnreportedNotApplicablePatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithUnreportedNotApplicablePatches'] = undefined;

/**
 * @member {Number} InstancesWithCriticalNonCompliantPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithCriticalNonCompliantPatches'] = undefined;

/**
 * @member {Number} InstancesWithSecurityNonCompliantPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithSecurityNonCompliantPatches'] = undefined;

/**
 * @member {Number} InstancesWithOtherNonCompliantPatches
 */
DescribePatchGroupStateResult.prototype['InstancesWithOtherNonCompliantPatches'] = undefined;






export default DescribePatchGroupStateResult;

