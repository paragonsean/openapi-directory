/**
 * Amazon Simple Systems Manager (SSM)
 * <p>Amazon Web Services Systems Manager is the operations hub for your Amazon Web Services applications and resources and a secure end-to-end management solution for hybrid cloud environments that enables safe and secure operations at scale.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">Amazon Web Services Systems Manager User Guide</a>. To get started, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up Amazon Web Services Systems Manager</a>.</p> <p class=\"title\"> <b>Related resources</b> </p> <ul> <li> <p>For information about each of the capabilities that comprise Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/systems-manager-capabilities.html\">Systems Manager capabilities</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks for Automation, a capability of Amazon Web Services Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html\">Systems Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For information about AppConfig, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/\">AppConfig User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/\">AppConfig API Reference</a> </i>.</p> </li> <li> <p>For information about Incident Manager, a capability of Systems Manager, see the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/\">Systems Manager Incident Manager User Guide</a> </i> and the <i> <a href=\"https://docs.aws.amazon.com/incident-manager/latest/APIReference/\">Systems Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchOperationType from './PatchOperationType';
import RebootOption from './RebootOption';

/**
 * The InstancePatchState model module.
 * @module model/InstancePatchState
 * @version 2014-11-06
 */
class InstancePatchState {
    /**
     * Constructs a new <code>InstancePatchState</code>.
     * Defines the high-level patch compliance state for a managed node, providing information about the number of installed, missing, not applicable, and failed patches along with metadata about the operation when this information was gathered for the managed node.
     * @alias module:model/InstancePatchState
     * @param instanceId {String} 
     * @param patchGroup {String} 
     * @param baselineId {String} 
     * @param operationStartTime {Date} 
     * @param operationEndTime {Date} 
     * @param operation {module:model/PatchOperationType} 
     */
    constructor(instanceId, patchGroup, baselineId, operationStartTime, operationEndTime, operation) { 
        
        InstancePatchState.initialize(this, instanceId, patchGroup, baselineId, operationStartTime, operationEndTime, operation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instanceId, patchGroup, baselineId, operationStartTime, operationEndTime, operation) { 
        obj['InstanceId'] = instanceId;
        obj['PatchGroup'] = patchGroup;
        obj['BaselineId'] = baselineId;
        obj['OperationStartTime'] = operationStartTime;
        obj['OperationEndTime'] = operationEndTime;
        obj['Operation'] = operation;
    }

    /**
     * Constructs a <code>InstancePatchState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstancePatchState} obj Optional instance to populate.
     * @return {module:model/InstancePatchState} The populated <code>InstancePatchState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstancePatchState();

            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('PatchGroup')) {
                obj['PatchGroup'] = ApiClient.convertToType(data['PatchGroup'], 'String');
            }
            if (data.hasOwnProperty('BaselineId')) {
                obj['BaselineId'] = ApiClient.convertToType(data['BaselineId'], 'String');
            }
            if (data.hasOwnProperty('SnapshotId')) {
                obj['SnapshotId'] = ApiClient.convertToType(data['SnapshotId'], 'String');
            }
            if (data.hasOwnProperty('InstallOverrideList')) {
                obj['InstallOverrideList'] = ApiClient.convertToType(data['InstallOverrideList'], 'String');
            }
            if (data.hasOwnProperty('OwnerInformation')) {
                obj['OwnerInformation'] = ApiClient.convertToType(data['OwnerInformation'], 'String');
            }
            if (data.hasOwnProperty('InstalledCount')) {
                obj['InstalledCount'] = ApiClient.convertToType(data['InstalledCount'], 'Number');
            }
            if (data.hasOwnProperty('InstalledOtherCount')) {
                obj['InstalledOtherCount'] = ApiClient.convertToType(data['InstalledOtherCount'], 'Number');
            }
            if (data.hasOwnProperty('InstalledPendingRebootCount')) {
                obj['InstalledPendingRebootCount'] = ApiClient.convertToType(data['InstalledPendingRebootCount'], 'Number');
            }
            if (data.hasOwnProperty('InstalledRejectedCount')) {
                obj['InstalledRejectedCount'] = ApiClient.convertToType(data['InstalledRejectedCount'], 'Number');
            }
            if (data.hasOwnProperty('MissingCount')) {
                obj['MissingCount'] = ApiClient.convertToType(data['MissingCount'], 'Number');
            }
            if (data.hasOwnProperty('FailedCount')) {
                obj['FailedCount'] = ApiClient.convertToType(data['FailedCount'], 'Number');
            }
            if (data.hasOwnProperty('UnreportedNotApplicableCount')) {
                obj['UnreportedNotApplicableCount'] = ApiClient.convertToType(data['UnreportedNotApplicableCount'], 'Number');
            }
            if (data.hasOwnProperty('NotApplicableCount')) {
                obj['NotApplicableCount'] = ApiClient.convertToType(data['NotApplicableCount'], 'Number');
            }
            if (data.hasOwnProperty('OperationStartTime')) {
                obj['OperationStartTime'] = ApiClient.convertToType(data['OperationStartTime'], 'Date');
            }
            if (data.hasOwnProperty('OperationEndTime')) {
                obj['OperationEndTime'] = ApiClient.convertToType(data['OperationEndTime'], 'Date');
            }
            if (data.hasOwnProperty('Operation')) {
                obj['Operation'] = ApiClient.convertToType(data['Operation'], PatchOperationType);
            }
            if (data.hasOwnProperty('LastNoRebootInstallOperationTime')) {
                obj['LastNoRebootInstallOperationTime'] = ApiClient.convertToType(data['LastNoRebootInstallOperationTime'], 'Date');
            }
            if (data.hasOwnProperty('RebootOption')) {
                obj['RebootOption'] = ApiClient.convertToType(data['RebootOption'], RebootOption);
            }
            if (data.hasOwnProperty('CriticalNonCompliantCount')) {
                obj['CriticalNonCompliantCount'] = ApiClient.convertToType(data['CriticalNonCompliantCount'], 'Number');
            }
            if (data.hasOwnProperty('SecurityNonCompliantCount')) {
                obj['SecurityNonCompliantCount'] = ApiClient.convertToType(data['SecurityNonCompliantCount'], 'Number');
            }
            if (data.hasOwnProperty('OtherNonCompliantCount')) {
                obj['OtherNonCompliantCount'] = ApiClient.convertToType(data['OtherNonCompliantCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstancePatchState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstancePatchState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InstancePatchState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `InstanceId`
        if (data['InstanceId']) { // data not null
          String.validateJSON(data['InstanceId']);
        }
        // validate the optional field `PatchGroup`
        if (data['PatchGroup']) { // data not null
          String.validateJSON(data['PatchGroup']);
        }
        // validate the optional field `BaselineId`
        if (data['BaselineId']) { // data not null
          String.validateJSON(data['BaselineId']);
        }
        // validate the optional field `SnapshotId`
        if (data['SnapshotId']) { // data not null
          String.validateJSON(data['SnapshotId']);
        }
        // validate the optional field `InstallOverrideList`
        if (data['InstallOverrideList']) { // data not null
          String.validateJSON(data['InstallOverrideList']);
        }
        // validate the optional field `OwnerInformation`
        if (data['OwnerInformation']) { // data not null
          String.validateJSON(data['OwnerInformation']);
        }
        // validate the optional field `InstalledCount`
        if (data['InstalledCount']) { // data not null
          Number.validateJSON(data['InstalledCount']);
        }
        // validate the optional field `InstalledOtherCount`
        if (data['InstalledOtherCount']) { // data not null
          Number.validateJSON(data['InstalledOtherCount']);
        }
        // validate the optional field `InstalledPendingRebootCount`
        if (data['InstalledPendingRebootCount']) { // data not null
          Number.validateJSON(data['InstalledPendingRebootCount']);
        }
        // validate the optional field `InstalledRejectedCount`
        if (data['InstalledRejectedCount']) { // data not null
          Number.validateJSON(data['InstalledRejectedCount']);
        }
        // validate the optional field `MissingCount`
        if (data['MissingCount']) { // data not null
          Number.validateJSON(data['MissingCount']);
        }
        // validate the optional field `FailedCount`
        if (data['FailedCount']) { // data not null
          Number.validateJSON(data['FailedCount']);
        }
        // validate the optional field `UnreportedNotApplicableCount`
        if (data['UnreportedNotApplicableCount']) { // data not null
          Number.validateJSON(data['UnreportedNotApplicableCount']);
        }
        // validate the optional field `NotApplicableCount`
        if (data['NotApplicableCount']) { // data not null
          Number.validateJSON(data['NotApplicableCount']);
        }
        // validate the optional field `OperationStartTime`
        if (data['OperationStartTime']) { // data not null
          Date.validateJSON(data['OperationStartTime']);
        }
        // validate the optional field `OperationEndTime`
        if (data['OperationEndTime']) { // data not null
          Date.validateJSON(data['OperationEndTime']);
        }
        // validate the optional field `Operation`
        if (data['Operation']) { // data not null
          PatchOperationType.validateJSON(data['Operation']);
        }
        // validate the optional field `LastNoRebootInstallOperationTime`
        if (data['LastNoRebootInstallOperationTime']) { // data not null
          Date.validateJSON(data['LastNoRebootInstallOperationTime']);
        }
        // validate the optional field `RebootOption`
        if (data['RebootOption']) { // data not null
          RebootOption.validateJSON(data['RebootOption']);
        }
        // validate the optional field `CriticalNonCompliantCount`
        if (data['CriticalNonCompliantCount']) { // data not null
          Number.validateJSON(data['CriticalNonCompliantCount']);
        }
        // validate the optional field `SecurityNonCompliantCount`
        if (data['SecurityNonCompliantCount']) { // data not null
          Number.validateJSON(data['SecurityNonCompliantCount']);
        }
        // validate the optional field `OtherNonCompliantCount`
        if (data['OtherNonCompliantCount']) { // data not null
          Number.validateJSON(data['OtherNonCompliantCount']);
        }

        return true;
    }


}

InstancePatchState.RequiredProperties = ["InstanceId", "PatchGroup", "BaselineId", "OperationStartTime", "OperationEndTime", "Operation"];

/**
 * @member {String} InstanceId
 */
InstancePatchState.prototype['InstanceId'] = undefined;

/**
 * @member {String} PatchGroup
 */
InstancePatchState.prototype['PatchGroup'] = undefined;

/**
 * @member {String} BaselineId
 */
InstancePatchState.prototype['BaselineId'] = undefined;

/**
 * @member {String} SnapshotId
 */
InstancePatchState.prototype['SnapshotId'] = undefined;

/**
 * @member {String} InstallOverrideList
 */
InstancePatchState.prototype['InstallOverrideList'] = undefined;

/**
 * @member {String} OwnerInformation
 */
InstancePatchState.prototype['OwnerInformation'] = undefined;

/**
 * @member {Number} InstalledCount
 */
InstancePatchState.prototype['InstalledCount'] = undefined;

/**
 * @member {Number} InstalledOtherCount
 */
InstancePatchState.prototype['InstalledOtherCount'] = undefined;

/**
 * @member {Number} InstalledPendingRebootCount
 */
InstancePatchState.prototype['InstalledPendingRebootCount'] = undefined;

/**
 * @member {Number} InstalledRejectedCount
 */
InstancePatchState.prototype['InstalledRejectedCount'] = undefined;

/**
 * @member {Number} MissingCount
 */
InstancePatchState.prototype['MissingCount'] = undefined;

/**
 * @member {Number} FailedCount
 */
InstancePatchState.prototype['FailedCount'] = undefined;

/**
 * @member {Number} UnreportedNotApplicableCount
 */
InstancePatchState.prototype['UnreportedNotApplicableCount'] = undefined;

/**
 * @member {Number} NotApplicableCount
 */
InstancePatchState.prototype['NotApplicableCount'] = undefined;

/**
 * @member {Date} OperationStartTime
 */
InstancePatchState.prototype['OperationStartTime'] = undefined;

/**
 * @member {Date} OperationEndTime
 */
InstancePatchState.prototype['OperationEndTime'] = undefined;

/**
 * @member {module:model/PatchOperationType} Operation
 */
InstancePatchState.prototype['Operation'] = undefined;

/**
 * @member {Date} LastNoRebootInstallOperationTime
 */
InstancePatchState.prototype['LastNoRebootInstallOperationTime'] = undefined;

/**
 * @member {module:model/RebootOption} RebootOption
 */
InstancePatchState.prototype['RebootOption'] = undefined;

/**
 * @member {Number} CriticalNonCompliantCount
 */
InstancePatchState.prototype['CriticalNonCompliantCount'] = undefined;

/**
 * @member {Number} SecurityNonCompliantCount
 */
InstancePatchState.prototype['SecurityNonCompliantCount'] = undefined;

/**
 * @member {Number} OtherNonCompliantCount
 */
InstancePatchState.prototype['OtherNonCompliantCount'] = undefined;






export default InstancePatchState;

