/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StartSuiteRunRequestSuiteRunConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSuiteRunRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSuiteRunRequest {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_VERSION = "suiteDefinitionVersion";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_VERSION)
  private String suiteDefinitionVersion;

  public static final String SERIALIZED_NAME_SUITE_RUN_CONFIGURATION = "suiteRunConfiguration";
  @SerializedName(SERIALIZED_NAME_SUITE_RUN_CONFIGURATION)
  private StartSuiteRunRequestSuiteRunConfiguration suiteRunConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public StartSuiteRunRequest() {
  }

  public StartSuiteRunRequest suiteDefinitionVersion(String suiteDefinitionVersion) {
    this.suiteDefinitionVersion = suiteDefinitionVersion;
    return this;
  }

  /**
   * Suite definition version of the test suite.
   * @return suiteDefinitionVersion
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionVersion() {
    return suiteDefinitionVersion;
  }

  public void setSuiteDefinitionVersion(String suiteDefinitionVersion) {
    this.suiteDefinitionVersion = suiteDefinitionVersion;
  }


  public StartSuiteRunRequest suiteRunConfiguration(StartSuiteRunRequestSuiteRunConfiguration suiteRunConfiguration) {
    this.suiteRunConfiguration = suiteRunConfiguration;
    return this;
  }

  /**
   * Get suiteRunConfiguration
   * @return suiteRunConfiguration
   */
  @javax.annotation.Nonnull
  public StartSuiteRunRequestSuiteRunConfiguration getSuiteRunConfiguration() {
    return suiteRunConfiguration;
  }

  public void setSuiteRunConfiguration(StartSuiteRunRequestSuiteRunConfiguration suiteRunConfiguration) {
    this.suiteRunConfiguration = suiteRunConfiguration;
  }


  public StartSuiteRunRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public StartSuiteRunRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to be attached to the suite run.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSuiteRunRequest startSuiteRunRequest = (StartSuiteRunRequest) o;
    return Objects.equals(this.suiteDefinitionVersion, startSuiteRunRequest.suiteDefinitionVersion) &&
        Objects.equals(this.suiteRunConfiguration, startSuiteRunRequest.suiteRunConfiguration) &&
        Objects.equals(this.tags, startSuiteRunRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionVersion, suiteRunConfiguration, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSuiteRunRequest {\n");
    sb.append("    suiteDefinitionVersion: ").append(toIndentedString(suiteDefinitionVersion)).append("\n");
    sb.append("    suiteRunConfiguration: ").append(toIndentedString(suiteRunConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionVersion");
    openapiFields.add("suiteRunConfiguration");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("suiteRunConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSuiteRunRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSuiteRunRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSuiteRunRequest is not found in the empty JSON string", StartSuiteRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSuiteRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSuiteRunRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSuiteRunRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("suiteDefinitionVersion") != null && !jsonObj.get("suiteDefinitionVersion").isJsonNull()) && !jsonObj.get("suiteDefinitionVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suiteDefinitionVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suiteDefinitionVersion").toString()));
      }
      // validate the required field `suiteRunConfiguration`
      StartSuiteRunRequestSuiteRunConfiguration.validateJsonElement(jsonObj.get("suiteRunConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSuiteRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSuiteRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSuiteRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSuiteRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSuiteRunRequest>() {
           @Override
           public void write(JsonWriter out, StartSuiteRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSuiteRunRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSuiteRunRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSuiteRunRequest
   * @throws IOException if the JSON string is invalid with respect to StartSuiteRunRequest
   */
  public static StartSuiteRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSuiteRunRequest.class);
  }

  /**
   * Convert an instance of StartSuiteRunRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

