/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Protocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the suite definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuiteDefinitionInformation {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_ID = "suiteDefinitionId";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_ID)
  private String suiteDefinitionId;

  public static final String SERIALIZED_NAME_SUITE_DEFINITION_NAME = "suiteDefinitionName";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_NAME)
  private String suiteDefinitionName;

  public static final String SERIALIZED_NAME_DEFAULT_DEVICES = "defaultDevices";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DEVICES)
  private List defaultDevices;

  public static final String SERIALIZED_NAME_INTENDED_FOR_QUALIFICATION = "intendedForQualification";
  @SerializedName(SERIALIZED_NAME_INTENDED_FOR_QUALIFICATION)
  private Boolean intendedForQualification;

  public static final String SERIALIZED_NAME_IS_LONG_DURATION_TEST = "isLongDurationTest";
  @SerializedName(SERIALIZED_NAME_IS_LONG_DURATION_TEST)
  private Boolean isLongDurationTest;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Protocol protocol;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public SuiteDefinitionInformation() {
  }

  public SuiteDefinitionInformation suiteDefinitionId(String suiteDefinitionId) {
    this.suiteDefinitionId = suiteDefinitionId;
    return this;
  }

  /**
   * Get suiteDefinitionId
   * @return suiteDefinitionId
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionId() {
    return suiteDefinitionId;
  }

  public void setSuiteDefinitionId(String suiteDefinitionId) {
    this.suiteDefinitionId = suiteDefinitionId;
  }


  public SuiteDefinitionInformation suiteDefinitionName(String suiteDefinitionName) {
    this.suiteDefinitionName = suiteDefinitionName;
    return this;
  }

  /**
   * Get suiteDefinitionName
   * @return suiteDefinitionName
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionName() {
    return suiteDefinitionName;
  }

  public void setSuiteDefinitionName(String suiteDefinitionName) {
    this.suiteDefinitionName = suiteDefinitionName;
  }


  public SuiteDefinitionInformation defaultDevices(List defaultDevices) {
    this.defaultDevices = defaultDevices;
    return this;
  }

  /**
   * Get defaultDevices
   * @return defaultDevices
   */
  @javax.annotation.Nullable
  public List getDefaultDevices() {
    return defaultDevices;
  }

  public void setDefaultDevices(List defaultDevices) {
    this.defaultDevices = defaultDevices;
  }


  public SuiteDefinitionInformation intendedForQualification(Boolean intendedForQualification) {
    this.intendedForQualification = intendedForQualification;
    return this;
  }

  /**
   * Get intendedForQualification
   * @return intendedForQualification
   */
  @javax.annotation.Nullable
  public Boolean getIntendedForQualification() {
    return intendedForQualification;
  }

  public void setIntendedForQualification(Boolean intendedForQualification) {
    this.intendedForQualification = intendedForQualification;
  }


  public SuiteDefinitionInformation isLongDurationTest(Boolean isLongDurationTest) {
    this.isLongDurationTest = isLongDurationTest;
    return this;
  }

  /**
   * Get isLongDurationTest
   * @return isLongDurationTest
   */
  @javax.annotation.Nullable
  public Boolean getIsLongDurationTest() {
    return isLongDurationTest;
  }

  public void setIsLongDurationTest(Boolean isLongDurationTest) {
    this.isLongDurationTest = isLongDurationTest;
  }


  public SuiteDefinitionInformation protocol(Protocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public Protocol getProtocol() {
    return protocol;
  }

  public void setProtocol(Protocol protocol) {
    this.protocol = protocol;
  }


  public SuiteDefinitionInformation createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuiteDefinitionInformation suiteDefinitionInformation = (SuiteDefinitionInformation) o;
    return Objects.equals(this.suiteDefinitionId, suiteDefinitionInformation.suiteDefinitionId) &&
        Objects.equals(this.suiteDefinitionName, suiteDefinitionInformation.suiteDefinitionName) &&
        Objects.equals(this.defaultDevices, suiteDefinitionInformation.defaultDevices) &&
        Objects.equals(this.intendedForQualification, suiteDefinitionInformation.intendedForQualification) &&
        Objects.equals(this.isLongDurationTest, suiteDefinitionInformation.isLongDurationTest) &&
        Objects.equals(this.protocol, suiteDefinitionInformation.protocol) &&
        Objects.equals(this.createdAt, suiteDefinitionInformation.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionId, suiteDefinitionName, defaultDevices, intendedForQualification, isLongDurationTest, protocol, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuiteDefinitionInformation {\n");
    sb.append("    suiteDefinitionId: ").append(toIndentedString(suiteDefinitionId)).append("\n");
    sb.append("    suiteDefinitionName: ").append(toIndentedString(suiteDefinitionName)).append("\n");
    sb.append("    defaultDevices: ").append(toIndentedString(defaultDevices)).append("\n");
    sb.append("    intendedForQualification: ").append(toIndentedString(intendedForQualification)).append("\n");
    sb.append("    isLongDurationTest: ").append(toIndentedString(isLongDurationTest)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionId");
    openapiFields.add("suiteDefinitionName");
    openapiFields.add("defaultDevices");
    openapiFields.add("intendedForQualification");
    openapiFields.add("isLongDurationTest");
    openapiFields.add("protocol");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuiteDefinitionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuiteDefinitionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuiteDefinitionInformation is not found in the empty JSON string", SuiteDefinitionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuiteDefinitionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuiteDefinitionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `suiteDefinitionId`
      if (jsonObj.get("suiteDefinitionId") != null && !jsonObj.get("suiteDefinitionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionId"));
      }
      // validate the optional field `suiteDefinitionName`
      if (jsonObj.get("suiteDefinitionName") != null && !jsonObj.get("suiteDefinitionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionName"));
      }
      // validate the optional field `defaultDevices`
      if (jsonObj.get("defaultDevices") != null && !jsonObj.get("defaultDevices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("defaultDevices"));
      }
      // validate the optional field `intendedForQualification`
      if (jsonObj.get("intendedForQualification") != null && !jsonObj.get("intendedForQualification").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("intendedForQualification"));
      }
      // validate the optional field `isLongDurationTest`
      if (jsonObj.get("isLongDurationTest") != null && !jsonObj.get("isLongDurationTest").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isLongDurationTest"));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        Protocol.validateJsonElement(jsonObj.get("protocol"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuiteDefinitionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuiteDefinitionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuiteDefinitionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuiteDefinitionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<SuiteDefinitionInformation>() {
           @Override
           public void write(JsonWriter out, SuiteDefinitionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuiteDefinitionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuiteDefinitionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuiteDefinitionInformation
   * @throws IOException if the JSON string is invalid with respect to SuiteDefinitionInformation
   */
  public static SuiteDefinitionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuiteDefinitionInformation.class);
  }

  /**
   * Convert an instance of SuiteDefinitionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

