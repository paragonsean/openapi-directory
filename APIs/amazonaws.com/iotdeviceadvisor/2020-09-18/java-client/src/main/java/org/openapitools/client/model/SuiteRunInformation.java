/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SuiteRunStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Information about the suite run.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;SuiteRunInformation&lt;/a&gt; action.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuiteRunInformation {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_ID = "suiteDefinitionId";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_ID)
  private String suiteDefinitionId;

  public static final String SERIALIZED_NAME_SUITE_DEFINITION_VERSION = "suiteDefinitionVersion";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_VERSION)
  private String suiteDefinitionVersion;

  public static final String SERIALIZED_NAME_SUITE_DEFINITION_NAME = "suiteDefinitionName";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_NAME)
  private String suiteDefinitionName;

  public static final String SERIALIZED_NAME_SUITE_RUN_ID = "suiteRunId";
  @SerializedName(SERIALIZED_NAME_SUITE_RUN_ID)
  private String suiteRunId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_END_AT = "endAt";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private OffsetDateTime endAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SuiteRunStatus status;

  public static final String SERIALIZED_NAME_PASSED = "passed";
  @SerializedName(SERIALIZED_NAME_PASSED)
  private Integer passed;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public SuiteRunInformation() {
  }

  public SuiteRunInformation suiteDefinitionId(String suiteDefinitionId) {
    this.suiteDefinitionId = suiteDefinitionId;
    return this;
  }

  /**
   * Get suiteDefinitionId
   * @return suiteDefinitionId
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionId() {
    return suiteDefinitionId;
  }

  public void setSuiteDefinitionId(String suiteDefinitionId) {
    this.suiteDefinitionId = suiteDefinitionId;
  }


  public SuiteRunInformation suiteDefinitionVersion(String suiteDefinitionVersion) {
    this.suiteDefinitionVersion = suiteDefinitionVersion;
    return this;
  }

  /**
   * Get suiteDefinitionVersion
   * @return suiteDefinitionVersion
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionVersion() {
    return suiteDefinitionVersion;
  }

  public void setSuiteDefinitionVersion(String suiteDefinitionVersion) {
    this.suiteDefinitionVersion = suiteDefinitionVersion;
  }


  public SuiteRunInformation suiteDefinitionName(String suiteDefinitionName) {
    this.suiteDefinitionName = suiteDefinitionName;
    return this;
  }

  /**
   * Get suiteDefinitionName
   * @return suiteDefinitionName
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionName() {
    return suiteDefinitionName;
  }

  public void setSuiteDefinitionName(String suiteDefinitionName) {
    this.suiteDefinitionName = suiteDefinitionName;
  }


  public SuiteRunInformation suiteRunId(String suiteRunId) {
    this.suiteRunId = suiteRunId;
    return this;
  }

  /**
   * Get suiteRunId
   * @return suiteRunId
   */
  @javax.annotation.Nullable
  public String getSuiteRunId() {
    return suiteRunId;
  }

  public void setSuiteRunId(String suiteRunId) {
    this.suiteRunId = suiteRunId;
  }


  public SuiteRunInformation createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SuiteRunInformation startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Get startedAt
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public SuiteRunInformation endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * Get endAt
   * @return endAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndAt() {
    return endAt;
  }

  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }


  public SuiteRunInformation status(SuiteRunStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SuiteRunStatus getStatus() {
    return status;
  }

  public void setStatus(SuiteRunStatus status) {
    this.status = status;
  }


  public SuiteRunInformation passed(Integer passed) {
    this.passed = passed;
    return this;
  }

  /**
   * Get passed
   * @return passed
   */
  @javax.annotation.Nullable
  public Integer getPassed() {
    return passed;
  }

  public void setPassed(Integer passed) {
    this.passed = passed;
  }


  public SuiteRunInformation failed(Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuiteRunInformation suiteRunInformation = (SuiteRunInformation) o;
    return Objects.equals(this.suiteDefinitionId, suiteRunInformation.suiteDefinitionId) &&
        Objects.equals(this.suiteDefinitionVersion, suiteRunInformation.suiteDefinitionVersion) &&
        Objects.equals(this.suiteDefinitionName, suiteRunInformation.suiteDefinitionName) &&
        Objects.equals(this.suiteRunId, suiteRunInformation.suiteRunId) &&
        Objects.equals(this.createdAt, suiteRunInformation.createdAt) &&
        Objects.equals(this.startedAt, suiteRunInformation.startedAt) &&
        Objects.equals(this.endAt, suiteRunInformation.endAt) &&
        Objects.equals(this.status, suiteRunInformation.status) &&
        Objects.equals(this.passed, suiteRunInformation.passed) &&
        Objects.equals(this.failed, suiteRunInformation.failed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionId, suiteDefinitionVersion, suiteDefinitionName, suiteRunId, createdAt, startedAt, endAt, status, passed, failed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuiteRunInformation {\n");
    sb.append("    suiteDefinitionId: ").append(toIndentedString(suiteDefinitionId)).append("\n");
    sb.append("    suiteDefinitionVersion: ").append(toIndentedString(suiteDefinitionVersion)).append("\n");
    sb.append("    suiteDefinitionName: ").append(toIndentedString(suiteDefinitionName)).append("\n");
    sb.append("    suiteRunId: ").append(toIndentedString(suiteRunId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionId");
    openapiFields.add("suiteDefinitionVersion");
    openapiFields.add("suiteDefinitionName");
    openapiFields.add("suiteRunId");
    openapiFields.add("createdAt");
    openapiFields.add("startedAt");
    openapiFields.add("endAt");
    openapiFields.add("status");
    openapiFields.add("passed");
    openapiFields.add("failed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuiteRunInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuiteRunInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuiteRunInformation is not found in the empty JSON string", SuiteRunInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuiteRunInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuiteRunInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `suiteDefinitionId`
      if (jsonObj.get("suiteDefinitionId") != null && !jsonObj.get("suiteDefinitionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionId"));
      }
      // validate the optional field `suiteDefinitionVersion`
      if (jsonObj.get("suiteDefinitionVersion") != null && !jsonObj.get("suiteDefinitionVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionVersion"));
      }
      // validate the optional field `suiteDefinitionName`
      if (jsonObj.get("suiteDefinitionName") != null && !jsonObj.get("suiteDefinitionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionName"));
      }
      // validate the optional field `suiteRunId`
      if (jsonObj.get("suiteRunId") != null && !jsonObj.get("suiteRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteRunId"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `startedAt`
      if (jsonObj.get("startedAt") != null && !jsonObj.get("startedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startedAt"));
      }
      // validate the optional field `endAt`
      if (jsonObj.get("endAt") != null && !jsonObj.get("endAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endAt"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SuiteRunStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `passed`
      if (jsonObj.get("passed") != null && !jsonObj.get("passed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("passed"));
      }
      // validate the optional field `failed`
      if (jsonObj.get("failed") != null && !jsonObj.get("failed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("failed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuiteRunInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuiteRunInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuiteRunInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuiteRunInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<SuiteRunInformation>() {
           @Override
           public void write(JsonWriter out, SuiteRunInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuiteRunInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuiteRunInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuiteRunInformation
   * @throws IOException if the JSON string is invalid with respect to SuiteRunInformation
   */
  public static SuiteRunInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuiteRunInformation.class);
  }

  /**
   * Convert an instance of SuiteRunInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

