/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListSuiteDefinitionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListSuiteDefinitionsResponse {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_INFORMATION_LIST = "suiteDefinitionInformationList";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_INFORMATION_LIST)
  private List suiteDefinitionInformationList;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListSuiteDefinitionsResponse() {
  }

  public ListSuiteDefinitionsResponse suiteDefinitionInformationList(List suiteDefinitionInformationList) {
    this.suiteDefinitionInformationList = suiteDefinitionInformationList;
    return this;
  }

  /**
   * Get suiteDefinitionInformationList
   * @return suiteDefinitionInformationList
   */
  @javax.annotation.Nullable
  public List getSuiteDefinitionInformationList() {
    return suiteDefinitionInformationList;
  }

  public void setSuiteDefinitionInformationList(List suiteDefinitionInformationList) {
    this.suiteDefinitionInformationList = suiteDefinitionInformationList;
  }


  public ListSuiteDefinitionsResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSuiteDefinitionsResponse listSuiteDefinitionsResponse = (ListSuiteDefinitionsResponse) o;
    return Objects.equals(this.suiteDefinitionInformationList, listSuiteDefinitionsResponse.suiteDefinitionInformationList) &&
        Objects.equals(this.nextToken, listSuiteDefinitionsResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionInformationList, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSuiteDefinitionsResponse {\n");
    sb.append("    suiteDefinitionInformationList: ").append(toIndentedString(suiteDefinitionInformationList)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionInformationList");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListSuiteDefinitionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListSuiteDefinitionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListSuiteDefinitionsResponse is not found in the empty JSON string", ListSuiteDefinitionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListSuiteDefinitionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListSuiteDefinitionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `suiteDefinitionInformationList`
      if (jsonObj.get("suiteDefinitionInformationList") != null && !jsonObj.get("suiteDefinitionInformationList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("suiteDefinitionInformationList"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListSuiteDefinitionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListSuiteDefinitionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListSuiteDefinitionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListSuiteDefinitionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListSuiteDefinitionsResponse>() {
           @Override
           public void write(JsonWriter out, ListSuiteDefinitionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListSuiteDefinitionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListSuiteDefinitionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListSuiteDefinitionsResponse
   * @throws IOException if the JSON string is invalid with respect to ListSuiteDefinitionsResponse
   */
  public static ListSuiteDefinitionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListSuiteDefinitionsResponse.class);
  }

  /**
   * Convert an instance of ListSuiteDefinitionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

