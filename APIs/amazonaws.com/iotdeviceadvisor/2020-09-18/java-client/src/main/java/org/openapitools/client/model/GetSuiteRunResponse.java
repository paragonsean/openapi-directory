/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.GetSuiteRunResponseSuiteRunConfiguration;
import org.openapitools.client.model.GetSuiteRunResponseTestResult;
import org.openapitools.client.model.SuiteRunStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSuiteRunResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSuiteRunResponse {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_ID = "suiteDefinitionId";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_ID)
  private String suiteDefinitionId;

  public static final String SERIALIZED_NAME_SUITE_DEFINITION_VERSION = "suiteDefinitionVersion";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_VERSION)
  private String suiteDefinitionVersion;

  public static final String SERIALIZED_NAME_SUITE_RUN_ID = "suiteRunId";
  @SerializedName(SERIALIZED_NAME_SUITE_RUN_ID)
  private String suiteRunId;

  public static final String SERIALIZED_NAME_SUITE_RUN_ARN = "suiteRunArn";
  @SerializedName(SERIALIZED_NAME_SUITE_RUN_ARN)
  private String suiteRunArn;

  public static final String SERIALIZED_NAME_SUITE_RUN_CONFIGURATION = "suiteRunConfiguration";
  @SerializedName(SERIALIZED_NAME_SUITE_RUN_CONFIGURATION)
  private GetSuiteRunResponseSuiteRunConfiguration suiteRunConfiguration;

  public static final String SERIALIZED_NAME_TEST_RESULT = "testResult";
  @SerializedName(SERIALIZED_NAME_TEST_RESULT)
  private GetSuiteRunResponseTestResult testResult;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SuiteRunStatus status;

  public static final String SERIALIZED_NAME_ERROR_REASON = "errorReason";
  @SerializedName(SERIALIZED_NAME_ERROR_REASON)
  private String errorReason;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public GetSuiteRunResponse() {
  }

  public GetSuiteRunResponse suiteDefinitionId(String suiteDefinitionId) {
    this.suiteDefinitionId = suiteDefinitionId;
    return this;
  }

  /**
   * Get suiteDefinitionId
   * @return suiteDefinitionId
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionId() {
    return suiteDefinitionId;
  }

  public void setSuiteDefinitionId(String suiteDefinitionId) {
    this.suiteDefinitionId = suiteDefinitionId;
  }


  public GetSuiteRunResponse suiteDefinitionVersion(String suiteDefinitionVersion) {
    this.suiteDefinitionVersion = suiteDefinitionVersion;
    return this;
  }

  /**
   * Get suiteDefinitionVersion
   * @return suiteDefinitionVersion
   */
  @javax.annotation.Nullable
  public String getSuiteDefinitionVersion() {
    return suiteDefinitionVersion;
  }

  public void setSuiteDefinitionVersion(String suiteDefinitionVersion) {
    this.suiteDefinitionVersion = suiteDefinitionVersion;
  }


  public GetSuiteRunResponse suiteRunId(String suiteRunId) {
    this.suiteRunId = suiteRunId;
    return this;
  }

  /**
   * Get suiteRunId
   * @return suiteRunId
   */
  @javax.annotation.Nullable
  public String getSuiteRunId() {
    return suiteRunId;
  }

  public void setSuiteRunId(String suiteRunId) {
    this.suiteRunId = suiteRunId;
  }


  public GetSuiteRunResponse suiteRunArn(String suiteRunArn) {
    this.suiteRunArn = suiteRunArn;
    return this;
  }

  /**
   * Get suiteRunArn
   * @return suiteRunArn
   */
  @javax.annotation.Nullable
  public String getSuiteRunArn() {
    return suiteRunArn;
  }

  public void setSuiteRunArn(String suiteRunArn) {
    this.suiteRunArn = suiteRunArn;
  }


  public GetSuiteRunResponse suiteRunConfiguration(GetSuiteRunResponseSuiteRunConfiguration suiteRunConfiguration) {
    this.suiteRunConfiguration = suiteRunConfiguration;
    return this;
  }

  /**
   * Get suiteRunConfiguration
   * @return suiteRunConfiguration
   */
  @javax.annotation.Nullable
  public GetSuiteRunResponseSuiteRunConfiguration getSuiteRunConfiguration() {
    return suiteRunConfiguration;
  }

  public void setSuiteRunConfiguration(GetSuiteRunResponseSuiteRunConfiguration suiteRunConfiguration) {
    this.suiteRunConfiguration = suiteRunConfiguration;
  }


  public GetSuiteRunResponse testResult(GetSuiteRunResponseTestResult testResult) {
    this.testResult = testResult;
    return this;
  }

  /**
   * Get testResult
   * @return testResult
   */
  @javax.annotation.Nullable
  public GetSuiteRunResponseTestResult getTestResult() {
    return testResult;
  }

  public void setTestResult(GetSuiteRunResponseTestResult testResult) {
    this.testResult = testResult;
  }


  public GetSuiteRunResponse startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetSuiteRunResponse endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public GetSuiteRunResponse status(SuiteRunStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SuiteRunStatus getStatus() {
    return status;
  }

  public void setStatus(SuiteRunStatus status) {
    this.status = status;
  }


  public GetSuiteRunResponse errorReason(String errorReason) {
    this.errorReason = errorReason;
    return this;
  }

  /**
   * Get errorReason
   * @return errorReason
   */
  @javax.annotation.Nullable
  public String getErrorReason() {
    return errorReason;
  }

  public void setErrorReason(String errorReason) {
    this.errorReason = errorReason;
  }


  public GetSuiteRunResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSuiteRunResponse getSuiteRunResponse = (GetSuiteRunResponse) o;
    return Objects.equals(this.suiteDefinitionId, getSuiteRunResponse.suiteDefinitionId) &&
        Objects.equals(this.suiteDefinitionVersion, getSuiteRunResponse.suiteDefinitionVersion) &&
        Objects.equals(this.suiteRunId, getSuiteRunResponse.suiteRunId) &&
        Objects.equals(this.suiteRunArn, getSuiteRunResponse.suiteRunArn) &&
        Objects.equals(this.suiteRunConfiguration, getSuiteRunResponse.suiteRunConfiguration) &&
        Objects.equals(this.testResult, getSuiteRunResponse.testResult) &&
        Objects.equals(this.startTime, getSuiteRunResponse.startTime) &&
        Objects.equals(this.endTime, getSuiteRunResponse.endTime) &&
        Objects.equals(this.status, getSuiteRunResponse.status) &&
        Objects.equals(this.errorReason, getSuiteRunResponse.errorReason) &&
        Objects.equals(this.tags, getSuiteRunResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionId, suiteDefinitionVersion, suiteRunId, suiteRunArn, suiteRunConfiguration, testResult, startTime, endTime, status, errorReason, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSuiteRunResponse {\n");
    sb.append("    suiteDefinitionId: ").append(toIndentedString(suiteDefinitionId)).append("\n");
    sb.append("    suiteDefinitionVersion: ").append(toIndentedString(suiteDefinitionVersion)).append("\n");
    sb.append("    suiteRunId: ").append(toIndentedString(suiteRunId)).append("\n");
    sb.append("    suiteRunArn: ").append(toIndentedString(suiteRunArn)).append("\n");
    sb.append("    suiteRunConfiguration: ").append(toIndentedString(suiteRunConfiguration)).append("\n");
    sb.append("    testResult: ").append(toIndentedString(testResult)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorReason: ").append(toIndentedString(errorReason)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionId");
    openapiFields.add("suiteDefinitionVersion");
    openapiFields.add("suiteRunId");
    openapiFields.add("suiteRunArn");
    openapiFields.add("suiteRunConfiguration");
    openapiFields.add("testResult");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("status");
    openapiFields.add("errorReason");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSuiteRunResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSuiteRunResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSuiteRunResponse is not found in the empty JSON string", GetSuiteRunResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSuiteRunResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSuiteRunResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `suiteDefinitionId`
      if (jsonObj.get("suiteDefinitionId") != null && !jsonObj.get("suiteDefinitionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionId"));
      }
      // validate the optional field `suiteDefinitionVersion`
      if (jsonObj.get("suiteDefinitionVersion") != null && !jsonObj.get("suiteDefinitionVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteDefinitionVersion"));
      }
      // validate the optional field `suiteRunId`
      if (jsonObj.get("suiteRunId") != null && !jsonObj.get("suiteRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteRunId"));
      }
      // validate the optional field `suiteRunArn`
      if (jsonObj.get("suiteRunArn") != null && !jsonObj.get("suiteRunArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suiteRunArn"));
      }
      // validate the optional field `suiteRunConfiguration`
      if (jsonObj.get("suiteRunConfiguration") != null && !jsonObj.get("suiteRunConfiguration").isJsonNull()) {
        GetSuiteRunResponseSuiteRunConfiguration.validateJsonElement(jsonObj.get("suiteRunConfiguration"));
      }
      // validate the optional field `testResult`
      if (jsonObj.get("testResult") != null && !jsonObj.get("testResult").isJsonNull()) {
        GetSuiteRunResponseTestResult.validateJsonElement(jsonObj.get("testResult"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SuiteRunStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `errorReason`
      if (jsonObj.get("errorReason") != null && !jsonObj.get("errorReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("errorReason"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSuiteRunResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSuiteRunResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSuiteRunResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSuiteRunResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSuiteRunResponse>() {
           @Override
           public void write(JsonWriter out, GetSuiteRunResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSuiteRunResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSuiteRunResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSuiteRunResponse
   * @throws IOException if the JSON string is invalid with respect to GetSuiteRunResponse
   */
  public static GetSuiteRunResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSuiteRunResponse.class);
  }

  /**
   * Convert an instance of GetSuiteRunResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

