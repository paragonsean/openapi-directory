/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateSuiteDefinitionRequestSuiteDefinitionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSuiteDefinitionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSuiteDefinitionRequest {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_CONFIGURATION = "suiteDefinitionConfiguration";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_CONFIGURATION)
  private CreateSuiteDefinitionRequestSuiteDefinitionConfiguration suiteDefinitionConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateSuiteDefinitionRequest() {
  }

  public CreateSuiteDefinitionRequest suiteDefinitionConfiguration(CreateSuiteDefinitionRequestSuiteDefinitionConfiguration suiteDefinitionConfiguration) {
    this.suiteDefinitionConfiguration = suiteDefinitionConfiguration;
    return this;
  }

  /**
   * Get suiteDefinitionConfiguration
   * @return suiteDefinitionConfiguration
   */
  @javax.annotation.Nonnull
  public CreateSuiteDefinitionRequestSuiteDefinitionConfiguration getSuiteDefinitionConfiguration() {
    return suiteDefinitionConfiguration;
  }

  public void setSuiteDefinitionConfiguration(CreateSuiteDefinitionRequestSuiteDefinitionConfiguration suiteDefinitionConfiguration) {
    this.suiteDefinitionConfiguration = suiteDefinitionConfiguration;
  }


  public CreateSuiteDefinitionRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateSuiteDefinitionRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to be attached to the suite definition.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSuiteDefinitionRequest createSuiteDefinitionRequest = (CreateSuiteDefinitionRequest) o;
    return Objects.equals(this.suiteDefinitionConfiguration, createSuiteDefinitionRequest.suiteDefinitionConfiguration) &&
        Objects.equals(this.tags, createSuiteDefinitionRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionConfiguration, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSuiteDefinitionRequest {\n");
    sb.append("    suiteDefinitionConfiguration: ").append(toIndentedString(suiteDefinitionConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionConfiguration");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("suiteDefinitionConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSuiteDefinitionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSuiteDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSuiteDefinitionRequest is not found in the empty JSON string", CreateSuiteDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSuiteDefinitionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSuiteDefinitionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSuiteDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `suiteDefinitionConfiguration`
      CreateSuiteDefinitionRequestSuiteDefinitionConfiguration.validateJsonElement(jsonObj.get("suiteDefinitionConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSuiteDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSuiteDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSuiteDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSuiteDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSuiteDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateSuiteDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSuiteDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSuiteDefinitionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSuiteDefinitionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSuiteDefinitionRequest
   */
  public static CreateSuiteDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSuiteDefinitionRequest.class);
  }

  /**
   * Convert an instance of CreateSuiteDefinitionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

