/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Protocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration {
  public static final String SERIALIZED_NAME_SUITE_DEFINITION_NAME = "suiteDefinitionName";
  @SerializedName(SERIALIZED_NAME_SUITE_DEFINITION_NAME)
  private String suiteDefinitionName;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List devices;

  public static final String SERIALIZED_NAME_INTENDED_FOR_QUALIFICATION = "intendedForQualification";
  @SerializedName(SERIALIZED_NAME_INTENDED_FOR_QUALIFICATION)
  private Boolean intendedForQualification;

  public static final String SERIALIZED_NAME_IS_LONG_DURATION_TEST = "isLongDurationTest";
  @SerializedName(SERIALIZED_NAME_IS_LONG_DURATION_TEST)
  private Boolean isLongDurationTest;

  public static final String SERIALIZED_NAME_ROOT_GROUP = "rootGroup";
  @SerializedName(SERIALIZED_NAME_ROOT_GROUP)
  private String rootGroup;

  public static final String SERIALIZED_NAME_DEVICE_PERMISSION_ROLE_ARN = "devicePermissionRoleArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_PERMISSION_ROLE_ARN)
  private String devicePermissionRoleArn;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Protocol protocol;

  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration() {
  }

  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration suiteDefinitionName(String suiteDefinitionName) {
    this.suiteDefinitionName = suiteDefinitionName;
    return this;
  }

  /**
   * Get suiteDefinitionName
   * @return suiteDefinitionName
   */
  @javax.annotation.Nonnull
  public String getSuiteDefinitionName() {
    return suiteDefinitionName;
  }

  public void setSuiteDefinitionName(String suiteDefinitionName) {
    this.suiteDefinitionName = suiteDefinitionName;
  }


  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration devices(List devices) {
    this.devices = devices;
    return this;
  }

  /**
   * Get devices
   * @return devices
   */
  @javax.annotation.Nullable
  public List getDevices() {
    return devices;
  }

  public void setDevices(List devices) {
    this.devices = devices;
  }


  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration intendedForQualification(Boolean intendedForQualification) {
    this.intendedForQualification = intendedForQualification;
    return this;
  }

  /**
   * Get intendedForQualification
   * @return intendedForQualification
   */
  @javax.annotation.Nullable
  public Boolean getIntendedForQualification() {
    return intendedForQualification;
  }

  public void setIntendedForQualification(Boolean intendedForQualification) {
    this.intendedForQualification = intendedForQualification;
  }


  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration isLongDurationTest(Boolean isLongDurationTest) {
    this.isLongDurationTest = isLongDurationTest;
    return this;
  }

  /**
   * Get isLongDurationTest
   * @return isLongDurationTest
   */
  @javax.annotation.Nullable
  public Boolean getIsLongDurationTest() {
    return isLongDurationTest;
  }

  public void setIsLongDurationTest(Boolean isLongDurationTest) {
    this.isLongDurationTest = isLongDurationTest;
  }


  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration rootGroup(String rootGroup) {
    this.rootGroup = rootGroup;
    return this;
  }

  /**
   * Get rootGroup
   * @return rootGroup
   */
  @javax.annotation.Nonnull
  public String getRootGroup() {
    return rootGroup;
  }

  public void setRootGroup(String rootGroup) {
    this.rootGroup = rootGroup;
  }


  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration devicePermissionRoleArn(String devicePermissionRoleArn) {
    this.devicePermissionRoleArn = devicePermissionRoleArn;
    return this;
  }

  /**
   * Get devicePermissionRoleArn
   * @return devicePermissionRoleArn
   */
  @javax.annotation.Nonnull
  public String getDevicePermissionRoleArn() {
    return devicePermissionRoleArn;
  }

  public void setDevicePermissionRoleArn(String devicePermissionRoleArn) {
    this.devicePermissionRoleArn = devicePermissionRoleArn;
  }


  public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration protocol(Protocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public Protocol getProtocol() {
    return protocol;
  }

  public void setProtocol(Protocol protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration updateSuiteDefinitionRequestSuiteDefinitionConfiguration = (UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration) o;
    return Objects.equals(this.suiteDefinitionName, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.suiteDefinitionName) &&
        Objects.equals(this.devices, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.devices) &&
        Objects.equals(this.intendedForQualification, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.intendedForQualification) &&
        Objects.equals(this.isLongDurationTest, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.isLongDurationTest) &&
        Objects.equals(this.rootGroup, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.rootGroup) &&
        Objects.equals(this.devicePermissionRoleArn, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.devicePermissionRoleArn) &&
        Objects.equals(this.protocol, updateSuiteDefinitionRequestSuiteDefinitionConfiguration.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suiteDefinitionName, devices, intendedForQualification, isLongDurationTest, rootGroup, devicePermissionRoleArn, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration {\n");
    sb.append("    suiteDefinitionName: ").append(toIndentedString(suiteDefinitionName)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    intendedForQualification: ").append(toIndentedString(intendedForQualification)).append("\n");
    sb.append("    isLongDurationTest: ").append(toIndentedString(isLongDurationTest)).append("\n");
    sb.append("    rootGroup: ").append(toIndentedString(rootGroup)).append("\n");
    sb.append("    devicePermissionRoleArn: ").append(toIndentedString(devicePermissionRoleArn)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suiteDefinitionName");
    openapiFields.add("devices");
    openapiFields.add("intendedForQualification");
    openapiFields.add("isLongDurationTest");
    openapiFields.add("rootGroup");
    openapiFields.add("devicePermissionRoleArn");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("suiteDefinitionName");
    openapiRequiredFields.add("rootGroup");
    openapiRequiredFields.add("devicePermissionRoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration is not found in the empty JSON string", UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `suiteDefinitionName`
      String.validateJsonElement(jsonObj.get("suiteDefinitionName"));
      // validate the optional field `devices`
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("devices"));
      }
      // validate the optional field `intendedForQualification`
      if (jsonObj.get("intendedForQualification") != null && !jsonObj.get("intendedForQualification").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("intendedForQualification"));
      }
      // validate the optional field `isLongDurationTest`
      if (jsonObj.get("isLongDurationTest") != null && !jsonObj.get("isLongDurationTest").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isLongDurationTest"));
      }
      // validate the required field `rootGroup`
      String.validateJsonElement(jsonObj.get("rootGroup"));
      // validate the required field `devicePermissionRoleArn`
      String.validateJsonElement(jsonObj.get("devicePermissionRoleArn"));
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        Protocol.validateJsonElement(jsonObj.get("protocol"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration>() {
           @Override
           public void write(JsonWriter out, UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration
   * @throws IOException if the JSON string is invalid with respect to UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration
   */
  public static UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration.class);
  }

  /**
   * Convert an instance of UpdateSuiteDefinitionRequestSuiteDefinitionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

