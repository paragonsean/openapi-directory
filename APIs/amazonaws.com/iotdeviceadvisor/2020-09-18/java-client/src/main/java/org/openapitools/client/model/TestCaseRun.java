/*
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the test case run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:36.168228-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCaseRun {
  public static final String SERIALIZED_NAME_TEST_CASE_RUN_ID = "testCaseRunId";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_RUN_ID)
  private String testCaseRunId;

  public static final String SERIALIZED_NAME_TEST_CASE_DEFINITION_ID = "testCaseDefinitionId";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_DEFINITION_ID)
  private String testCaseDefinitionId;

  public static final String SERIALIZED_NAME_TEST_CASE_DEFINITION_NAME = "testCaseDefinitionName";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_DEFINITION_NAME)
  private String testCaseDefinitionName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_LOG_URL = "logUrl";
  @SerializedName(SERIALIZED_NAME_LOG_URL)
  private String logUrl;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private String warnings;

  public static final String SERIALIZED_NAME_FAILURE = "failure";
  @SerializedName(SERIALIZED_NAME_FAILURE)
  private String failure;

  public static final String SERIALIZED_NAME_TEST_SCENARIOS = "testScenarios";
  @SerializedName(SERIALIZED_NAME_TEST_SCENARIOS)
  private List testScenarios;

  public TestCaseRun() {
  }

  public TestCaseRun testCaseRunId(String testCaseRunId) {
    this.testCaseRunId = testCaseRunId;
    return this;
  }

  /**
   * Get testCaseRunId
   * @return testCaseRunId
   */
  @javax.annotation.Nullable
  public String getTestCaseRunId() {
    return testCaseRunId;
  }

  public void setTestCaseRunId(String testCaseRunId) {
    this.testCaseRunId = testCaseRunId;
  }


  public TestCaseRun testCaseDefinitionId(String testCaseDefinitionId) {
    this.testCaseDefinitionId = testCaseDefinitionId;
    return this;
  }

  /**
   * Get testCaseDefinitionId
   * @return testCaseDefinitionId
   */
  @javax.annotation.Nullable
  public String getTestCaseDefinitionId() {
    return testCaseDefinitionId;
  }

  public void setTestCaseDefinitionId(String testCaseDefinitionId) {
    this.testCaseDefinitionId = testCaseDefinitionId;
  }


  public TestCaseRun testCaseDefinitionName(String testCaseDefinitionName) {
    this.testCaseDefinitionName = testCaseDefinitionName;
    return this;
  }

  /**
   * Get testCaseDefinitionName
   * @return testCaseDefinitionName
   */
  @javax.annotation.Nullable
  public String getTestCaseDefinitionName() {
    return testCaseDefinitionName;
  }

  public void setTestCaseDefinitionName(String testCaseDefinitionName) {
    this.testCaseDefinitionName = testCaseDefinitionName;
  }


  public TestCaseRun status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public TestCaseRun startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public TestCaseRun endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public TestCaseRun logUrl(String logUrl) {
    this.logUrl = logUrl;
    return this;
  }

  /**
   * Get logUrl
   * @return logUrl
   */
  @javax.annotation.Nullable
  public String getLogUrl() {
    return logUrl;
  }

  public void setLogUrl(String logUrl) {
    this.logUrl = logUrl;
  }


  public TestCaseRun warnings(String warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public String getWarnings() {
    return warnings;
  }

  public void setWarnings(String warnings) {
    this.warnings = warnings;
  }


  public TestCaseRun failure(String failure) {
    this.failure = failure;
    return this;
  }

  /**
   * Get failure
   * @return failure
   */
  @javax.annotation.Nullable
  public String getFailure() {
    return failure;
  }

  public void setFailure(String failure) {
    this.failure = failure;
  }


  public TestCaseRun testScenarios(List testScenarios) {
    this.testScenarios = testScenarios;
    return this;
  }

  /**
   * Get testScenarios
   * @return testScenarios
   */
  @javax.annotation.Nullable
  public List getTestScenarios() {
    return testScenarios;
  }

  public void setTestScenarios(List testScenarios) {
    this.testScenarios = testScenarios;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCaseRun testCaseRun = (TestCaseRun) o;
    return Objects.equals(this.testCaseRunId, testCaseRun.testCaseRunId) &&
        Objects.equals(this.testCaseDefinitionId, testCaseRun.testCaseDefinitionId) &&
        Objects.equals(this.testCaseDefinitionName, testCaseRun.testCaseDefinitionName) &&
        Objects.equals(this.status, testCaseRun.status) &&
        Objects.equals(this.startTime, testCaseRun.startTime) &&
        Objects.equals(this.endTime, testCaseRun.endTime) &&
        Objects.equals(this.logUrl, testCaseRun.logUrl) &&
        Objects.equals(this.warnings, testCaseRun.warnings) &&
        Objects.equals(this.failure, testCaseRun.failure) &&
        Objects.equals(this.testScenarios, testCaseRun.testScenarios);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testCaseRunId, testCaseDefinitionId, testCaseDefinitionName, status, startTime, endTime, logUrl, warnings, failure, testScenarios);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCaseRun {\n");
    sb.append("    testCaseRunId: ").append(toIndentedString(testCaseRunId)).append("\n");
    sb.append("    testCaseDefinitionId: ").append(toIndentedString(testCaseDefinitionId)).append("\n");
    sb.append("    testCaseDefinitionName: ").append(toIndentedString(testCaseDefinitionName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    logUrl: ").append(toIndentedString(logUrl)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    failure: ").append(toIndentedString(failure)).append("\n");
    sb.append("    testScenarios: ").append(toIndentedString(testScenarios)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testCaseRunId");
    openapiFields.add("testCaseDefinitionId");
    openapiFields.add("testCaseDefinitionName");
    openapiFields.add("status");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("logUrl");
    openapiFields.add("warnings");
    openapiFields.add("failure");
    openapiFields.add("testScenarios");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCaseRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCaseRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCaseRun is not found in the empty JSON string", TestCaseRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCaseRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCaseRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `testCaseRunId`
      if (jsonObj.get("testCaseRunId") != null && !jsonObj.get("testCaseRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testCaseRunId"));
      }
      // validate the optional field `testCaseDefinitionId`
      if (jsonObj.get("testCaseDefinitionId") != null && !jsonObj.get("testCaseDefinitionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testCaseDefinitionId"));
      }
      // validate the optional field `testCaseDefinitionName`
      if (jsonObj.get("testCaseDefinitionName") != null && !jsonObj.get("testCaseDefinitionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testCaseDefinitionName"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the optional field `logUrl`
      if (jsonObj.get("logUrl") != null && !jsonObj.get("logUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logUrl"));
      }
      // validate the optional field `warnings`
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("warnings"));
      }
      // validate the optional field `failure`
      if (jsonObj.get("failure") != null && !jsonObj.get("failure").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failure"));
      }
      // validate the optional field `testScenarios`
      if (jsonObj.get("testScenarios") != null && !jsonObj.get("testScenarios").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("testScenarios"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCaseRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCaseRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCaseRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCaseRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCaseRun>() {
           @Override
           public void write(JsonWriter out, TestCaseRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCaseRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCaseRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCaseRun
   * @throws IOException if the JSON string is invalid with respect to TestCaseRun
   */
  public static TestCaseRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCaseRun.class);
  }

  /**
   * Convert an instance of TestCaseRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

