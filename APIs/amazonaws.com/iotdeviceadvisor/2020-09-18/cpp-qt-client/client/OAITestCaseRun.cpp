/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCaseRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCaseRun::OAITestCaseRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCaseRun::OAITestCaseRun() {
    this->initializeModel();
}

OAITestCaseRun::~OAITestCaseRun() {}

void OAITestCaseRun::initializeModel() {

    m_test_case_run_id_isSet = false;
    m_test_case_run_id_isValid = false;

    m_test_case_definition_id_isSet = false;
    m_test_case_definition_id_isValid = false;

    m_test_case_definition_name_isSet = false;
    m_test_case_definition_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_log_url_isSet = false;
    m_log_url_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_failure_isSet = false;
    m_failure_isValid = false;

    m_test_scenarios_isSet = false;
    m_test_scenarios_isValid = false;
}

void OAITestCaseRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCaseRun::fromJsonObject(QJsonObject json) {

    m_test_case_run_id_isValid = ::OpenAPI::fromJsonValue(m_test_case_run_id, json[QString("testCaseRunId")]);
    m_test_case_run_id_isSet = !json[QString("testCaseRunId")].isNull() && m_test_case_run_id_isValid;

    m_test_case_definition_id_isValid = ::OpenAPI::fromJsonValue(m_test_case_definition_id, json[QString("testCaseDefinitionId")]);
    m_test_case_definition_id_isSet = !json[QString("testCaseDefinitionId")].isNull() && m_test_case_definition_id_isValid;

    m_test_case_definition_name_isValid = ::OpenAPI::fromJsonValue(m_test_case_definition_name, json[QString("testCaseDefinitionName")]);
    m_test_case_definition_name_isSet = !json[QString("testCaseDefinitionName")].isNull() && m_test_case_definition_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_log_url_isValid = ::OpenAPI::fromJsonValue(m_log_url, json[QString("logUrl")]);
    m_log_url_isSet = !json[QString("logUrl")].isNull() && m_log_url_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;

    m_failure_isValid = ::OpenAPI::fromJsonValue(m_failure, json[QString("failure")]);
    m_failure_isSet = !json[QString("failure")].isNull() && m_failure_isValid;

    m_test_scenarios_isValid = ::OpenAPI::fromJsonValue(m_test_scenarios, json[QString("testScenarios")]);
    m_test_scenarios_isSet = !json[QString("testScenarios")].isNull() && m_test_scenarios_isValid;
}

QString OAITestCaseRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCaseRun::asJsonObject() const {
    QJsonObject obj;
    if (m_test_case_run_id_isSet) {
        obj.insert(QString("testCaseRunId"), ::OpenAPI::toJsonValue(m_test_case_run_id));
    }
    if (m_test_case_definition_id_isSet) {
        obj.insert(QString("testCaseDefinitionId"), ::OpenAPI::toJsonValue(m_test_case_definition_id));
    }
    if (m_test_case_definition_name_isSet) {
        obj.insert(QString("testCaseDefinitionName"), ::OpenAPI::toJsonValue(m_test_case_definition_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_log_url_isSet) {
        obj.insert(QString("logUrl"), ::OpenAPI::toJsonValue(m_log_url));
    }
    if (m_warnings_isSet) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_failure_isSet) {
        obj.insert(QString("failure"), ::OpenAPI::toJsonValue(m_failure));
    }
    if (m_test_scenarios.isSet()) {
        obj.insert(QString("testScenarios"), ::OpenAPI::toJsonValue(m_test_scenarios));
    }
    return obj;
}

QString OAITestCaseRun::getTestCaseRunId() const {
    return m_test_case_run_id;
}
void OAITestCaseRun::setTestCaseRunId(const QString &test_case_run_id) {
    m_test_case_run_id = test_case_run_id;
    m_test_case_run_id_isSet = true;
}

bool OAITestCaseRun::is_test_case_run_id_Set() const{
    return m_test_case_run_id_isSet;
}

bool OAITestCaseRun::is_test_case_run_id_Valid() const{
    return m_test_case_run_id_isValid;
}

QString OAITestCaseRun::getTestCaseDefinitionId() const {
    return m_test_case_definition_id;
}
void OAITestCaseRun::setTestCaseDefinitionId(const QString &test_case_definition_id) {
    m_test_case_definition_id = test_case_definition_id;
    m_test_case_definition_id_isSet = true;
}

bool OAITestCaseRun::is_test_case_definition_id_Set() const{
    return m_test_case_definition_id_isSet;
}

bool OAITestCaseRun::is_test_case_definition_id_Valid() const{
    return m_test_case_definition_id_isValid;
}

QString OAITestCaseRun::getTestCaseDefinitionName() const {
    return m_test_case_definition_name;
}
void OAITestCaseRun::setTestCaseDefinitionName(const QString &test_case_definition_name) {
    m_test_case_definition_name = test_case_definition_name;
    m_test_case_definition_name_isSet = true;
}

bool OAITestCaseRun::is_test_case_definition_name_Set() const{
    return m_test_case_definition_name_isSet;
}

bool OAITestCaseRun::is_test_case_definition_name_Valid() const{
    return m_test_case_definition_name_isValid;
}

OAIStatus OAITestCaseRun::getStatus() const {
    return m_status;
}
void OAITestCaseRun::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestCaseRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestCaseRun::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAITestCaseRun::getStartTime() const {
    return m_start_time;
}
void OAITestCaseRun::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITestCaseRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITestCaseRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAITestCaseRun::getEndTime() const {
    return m_end_time;
}
void OAITestCaseRun::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITestCaseRun::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITestCaseRun::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAITestCaseRun::getLogUrl() const {
    return m_log_url;
}
void OAITestCaseRun::setLogUrl(const QString &log_url) {
    m_log_url = log_url;
    m_log_url_isSet = true;
}

bool OAITestCaseRun::is_log_url_Set() const{
    return m_log_url_isSet;
}

bool OAITestCaseRun::is_log_url_Valid() const{
    return m_log_url_isValid;
}

QString OAITestCaseRun::getWarnings() const {
    return m_warnings;
}
void OAITestCaseRun::setWarnings(const QString &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAITestCaseRun::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAITestCaseRun::is_warnings_Valid() const{
    return m_warnings_isValid;
}

QString OAITestCaseRun::getFailure() const {
    return m_failure;
}
void OAITestCaseRun::setFailure(const QString &failure) {
    m_failure = failure;
    m_failure_isSet = true;
}

bool OAITestCaseRun::is_failure_Set() const{
    return m_failure_isSet;
}

bool OAITestCaseRun::is_failure_Valid() const{
    return m_failure_isValid;
}

QList OAITestCaseRun::getTestScenarios() const {
    return m_test_scenarios;
}
void OAITestCaseRun::setTestScenarios(const QList &test_scenarios) {
    m_test_scenarios = test_scenarios;
    m_test_scenarios_isSet = true;
}

bool OAITestCaseRun::is_test_scenarios_Set() const{
    return m_test_scenarios_isSet;
}

bool OAITestCaseRun::is_test_scenarios_Valid() const{
    return m_test_scenarios_isValid;
}

bool OAITestCaseRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_case_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_case_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_case_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_scenarios.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCaseRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
