/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSuiteRunResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSuiteRunResponse::OAIGetSuiteRunResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSuiteRunResponse::OAIGetSuiteRunResponse() {
    this->initializeModel();
}

OAIGetSuiteRunResponse::~OAIGetSuiteRunResponse() {}

void OAIGetSuiteRunResponse::initializeModel() {

    m_suite_definition_id_isSet = false;
    m_suite_definition_id_isValid = false;

    m_suite_definition_version_isSet = false;
    m_suite_definition_version_isValid = false;

    m_suite_run_id_isSet = false;
    m_suite_run_id_isValid = false;

    m_suite_run_arn_isSet = false;
    m_suite_run_arn_isValid = false;

    m_suite_run_configuration_isSet = false;
    m_suite_run_configuration_isValid = false;

    m_test_result_isSet = false;
    m_test_result_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_reason_isSet = false;
    m_error_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetSuiteRunResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSuiteRunResponse::fromJsonObject(QJsonObject json) {

    m_suite_definition_id_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_id, json[QString("suiteDefinitionId")]);
    m_suite_definition_id_isSet = !json[QString("suiteDefinitionId")].isNull() && m_suite_definition_id_isValid;

    m_suite_definition_version_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_version, json[QString("suiteDefinitionVersion")]);
    m_suite_definition_version_isSet = !json[QString("suiteDefinitionVersion")].isNull() && m_suite_definition_version_isValid;

    m_suite_run_id_isValid = ::OpenAPI::fromJsonValue(m_suite_run_id, json[QString("suiteRunId")]);
    m_suite_run_id_isSet = !json[QString("suiteRunId")].isNull() && m_suite_run_id_isValid;

    m_suite_run_arn_isValid = ::OpenAPI::fromJsonValue(m_suite_run_arn, json[QString("suiteRunArn")]);
    m_suite_run_arn_isSet = !json[QString("suiteRunArn")].isNull() && m_suite_run_arn_isValid;

    m_suite_run_configuration_isValid = ::OpenAPI::fromJsonValue(m_suite_run_configuration, json[QString("suiteRunConfiguration")]);
    m_suite_run_configuration_isSet = !json[QString("suiteRunConfiguration")].isNull() && m_suite_run_configuration_isValid;

    m_test_result_isValid = ::OpenAPI::fromJsonValue(m_test_result, json[QString("testResult")]);
    m_test_result_isSet = !json[QString("testResult")].isNull() && m_test_result_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_error_reason_isValid = ::OpenAPI::fromJsonValue(m_error_reason, json[QString("errorReason")]);
    m_error_reason_isSet = !json[QString("errorReason")].isNull() && m_error_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetSuiteRunResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSuiteRunResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_definition_id_isSet) {
        obj.insert(QString("suiteDefinitionId"), ::OpenAPI::toJsonValue(m_suite_definition_id));
    }
    if (m_suite_definition_version_isSet) {
        obj.insert(QString("suiteDefinitionVersion"), ::OpenAPI::toJsonValue(m_suite_definition_version));
    }
    if (m_suite_run_id_isSet) {
        obj.insert(QString("suiteRunId"), ::OpenAPI::toJsonValue(m_suite_run_id));
    }
    if (m_suite_run_arn_isSet) {
        obj.insert(QString("suiteRunArn"), ::OpenAPI::toJsonValue(m_suite_run_arn));
    }
    if (m_suite_run_configuration.isSet()) {
        obj.insert(QString("suiteRunConfiguration"), ::OpenAPI::toJsonValue(m_suite_run_configuration));
    }
    if (m_test_result.isSet()) {
        obj.insert(QString("testResult"), ::OpenAPI::toJsonValue(m_test_result));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_reason_isSet) {
        obj.insert(QString("errorReason"), ::OpenAPI::toJsonValue(m_error_reason));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetSuiteRunResponse::getSuiteDefinitionId() const {
    return m_suite_definition_id;
}
void OAIGetSuiteRunResponse::setSuiteDefinitionId(const QString &suite_definition_id) {
    m_suite_definition_id = suite_definition_id;
    m_suite_definition_id_isSet = true;
}

bool OAIGetSuiteRunResponse::is_suite_definition_id_Set() const{
    return m_suite_definition_id_isSet;
}

bool OAIGetSuiteRunResponse::is_suite_definition_id_Valid() const{
    return m_suite_definition_id_isValid;
}

QString OAIGetSuiteRunResponse::getSuiteDefinitionVersion() const {
    return m_suite_definition_version;
}
void OAIGetSuiteRunResponse::setSuiteDefinitionVersion(const QString &suite_definition_version) {
    m_suite_definition_version = suite_definition_version;
    m_suite_definition_version_isSet = true;
}

bool OAIGetSuiteRunResponse::is_suite_definition_version_Set() const{
    return m_suite_definition_version_isSet;
}

bool OAIGetSuiteRunResponse::is_suite_definition_version_Valid() const{
    return m_suite_definition_version_isValid;
}

QString OAIGetSuiteRunResponse::getSuiteRunId() const {
    return m_suite_run_id;
}
void OAIGetSuiteRunResponse::setSuiteRunId(const QString &suite_run_id) {
    m_suite_run_id = suite_run_id;
    m_suite_run_id_isSet = true;
}

bool OAIGetSuiteRunResponse::is_suite_run_id_Set() const{
    return m_suite_run_id_isSet;
}

bool OAIGetSuiteRunResponse::is_suite_run_id_Valid() const{
    return m_suite_run_id_isValid;
}

QString OAIGetSuiteRunResponse::getSuiteRunArn() const {
    return m_suite_run_arn;
}
void OAIGetSuiteRunResponse::setSuiteRunArn(const QString &suite_run_arn) {
    m_suite_run_arn = suite_run_arn;
    m_suite_run_arn_isSet = true;
}

bool OAIGetSuiteRunResponse::is_suite_run_arn_Set() const{
    return m_suite_run_arn_isSet;
}

bool OAIGetSuiteRunResponse::is_suite_run_arn_Valid() const{
    return m_suite_run_arn_isValid;
}

OAIGetSuiteRunResponse_suiteRunConfiguration OAIGetSuiteRunResponse::getSuiteRunConfiguration() const {
    return m_suite_run_configuration;
}
void OAIGetSuiteRunResponse::setSuiteRunConfiguration(const OAIGetSuiteRunResponse_suiteRunConfiguration &suite_run_configuration) {
    m_suite_run_configuration = suite_run_configuration;
    m_suite_run_configuration_isSet = true;
}

bool OAIGetSuiteRunResponse::is_suite_run_configuration_Set() const{
    return m_suite_run_configuration_isSet;
}

bool OAIGetSuiteRunResponse::is_suite_run_configuration_Valid() const{
    return m_suite_run_configuration_isValid;
}

OAIGetSuiteRunResponse_testResult OAIGetSuiteRunResponse::getTestResult() const {
    return m_test_result;
}
void OAIGetSuiteRunResponse::setTestResult(const OAIGetSuiteRunResponse_testResult &test_result) {
    m_test_result = test_result;
    m_test_result_isSet = true;
}

bool OAIGetSuiteRunResponse::is_test_result_Set() const{
    return m_test_result_isSet;
}

bool OAIGetSuiteRunResponse::is_test_result_Valid() const{
    return m_test_result_isValid;
}

QDateTime OAIGetSuiteRunResponse::getStartTime() const {
    return m_start_time;
}
void OAIGetSuiteRunResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetSuiteRunResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetSuiteRunResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetSuiteRunResponse::getEndTime() const {
    return m_end_time;
}
void OAIGetSuiteRunResponse::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetSuiteRunResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetSuiteRunResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAISuiteRunStatus OAIGetSuiteRunResponse::getStatus() const {
    return m_status;
}
void OAIGetSuiteRunResponse::setStatus(const OAISuiteRunStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSuiteRunResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSuiteRunResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetSuiteRunResponse::getErrorReason() const {
    return m_error_reason;
}
void OAIGetSuiteRunResponse::setErrorReason(const QString &error_reason) {
    m_error_reason = error_reason;
    m_error_reason_isSet = true;
}

bool OAIGetSuiteRunResponse::is_error_reason_Set() const{
    return m_error_reason_isSet;
}

bool OAIGetSuiteRunResponse::is_error_reason_Valid() const{
    return m_error_reason_isValid;
}

QMap OAIGetSuiteRunResponse::getTags() const {
    return m_tags;
}
void OAIGetSuiteRunResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetSuiteRunResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetSuiteRunResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetSuiteRunResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_definition_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_run_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSuiteRunResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
