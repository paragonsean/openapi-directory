/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupResult::OAIGroupResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupResult::OAIGroupResult() {
    this->initializeModel();
}

OAIGroupResult::~OAIGroupResult() {}

void OAIGroupResult::initializeModel() {

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_tests_isSet = false;
    m_tests_isValid = false;
}

void OAIGroupResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupResult::fromJsonObject(QJsonObject json) {

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_tests_isValid = ::OpenAPI::fromJsonValue(m_tests, json[QString("tests")]);
    m_tests_isSet = !json[QString("tests")].isNull() && m_tests_isValid;
}

QString OAIGroupResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupResult::asJsonObject() const {
    QJsonObject obj;
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_tests.isSet()) {
        obj.insert(QString("tests"), ::OpenAPI::toJsonValue(m_tests));
    }
    return obj;
}

QString OAIGroupResult::getGroupId() const {
    return m_group_id;
}
void OAIGroupResult::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupResult::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupResult::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIGroupResult::getGroupName() const {
    return m_group_name;
}
void OAIGroupResult::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGroupResult::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGroupResult::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QList OAIGroupResult::getTests() const {
    return m_tests;
}
void OAIGroupResult::setTests(const QList &tests) {
    m_tests = tests;
    m_tests_isSet = true;
}

bool OAIGroupResult::is_tests_Set() const{
    return m_tests_isSet;
}

bool OAIGroupResult::is_tests_Valid() const{
    return m_tests_isValid;
}

bool OAIGroupResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
