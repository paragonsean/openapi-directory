/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSuiteRunResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSuiteRunResponse::OAIStartSuiteRunResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSuiteRunResponse::OAIStartSuiteRunResponse() {
    this->initializeModel();
}

OAIStartSuiteRunResponse::~OAIStartSuiteRunResponse() {}

void OAIStartSuiteRunResponse::initializeModel() {

    m_suite_run_id_isSet = false;
    m_suite_run_id_isValid = false;

    m_suite_run_arn_isSet = false;
    m_suite_run_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;
}

void OAIStartSuiteRunResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSuiteRunResponse::fromJsonObject(QJsonObject json) {

    m_suite_run_id_isValid = ::OpenAPI::fromJsonValue(m_suite_run_id, json[QString("suiteRunId")]);
    m_suite_run_id_isSet = !json[QString("suiteRunId")].isNull() && m_suite_run_id_isValid;

    m_suite_run_arn_isValid = ::OpenAPI::fromJsonValue(m_suite_run_arn, json[QString("suiteRunArn")]);
    m_suite_run_arn_isSet = !json[QString("suiteRunArn")].isNull() && m_suite_run_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;
}

QString OAIStartSuiteRunResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSuiteRunResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_run_id_isSet) {
        obj.insert(QString("suiteRunId"), ::OpenAPI::toJsonValue(m_suite_run_id));
    }
    if (m_suite_run_arn_isSet) {
        obj.insert(QString("suiteRunArn"), ::OpenAPI::toJsonValue(m_suite_run_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    return obj;
}

QString OAIStartSuiteRunResponse::getSuiteRunId() const {
    return m_suite_run_id;
}
void OAIStartSuiteRunResponse::setSuiteRunId(const QString &suite_run_id) {
    m_suite_run_id = suite_run_id;
    m_suite_run_id_isSet = true;
}

bool OAIStartSuiteRunResponse::is_suite_run_id_Set() const{
    return m_suite_run_id_isSet;
}

bool OAIStartSuiteRunResponse::is_suite_run_id_Valid() const{
    return m_suite_run_id_isValid;
}

QString OAIStartSuiteRunResponse::getSuiteRunArn() const {
    return m_suite_run_arn;
}
void OAIStartSuiteRunResponse::setSuiteRunArn(const QString &suite_run_arn) {
    m_suite_run_arn = suite_run_arn;
    m_suite_run_arn_isSet = true;
}

bool OAIStartSuiteRunResponse::is_suite_run_arn_Set() const{
    return m_suite_run_arn_isSet;
}

bool OAIStartSuiteRunResponse::is_suite_run_arn_Valid() const{
    return m_suite_run_arn_isValid;
}

QDateTime OAIStartSuiteRunResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIStartSuiteRunResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStartSuiteRunResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStartSuiteRunResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStartSuiteRunResponse::getEndpoint() const {
    return m_endpoint;
}
void OAIStartSuiteRunResponse::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIStartSuiteRunResponse::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIStartSuiteRunResponse::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAIStartSuiteRunResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSuiteRunResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
