/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSuiteRun_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSuiteRun_request::OAIStartSuiteRun_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSuiteRun_request::OAIStartSuiteRun_request() {
    this->initializeModel();
}

OAIStartSuiteRun_request::~OAIStartSuiteRun_request() {}

void OAIStartSuiteRun_request::initializeModel() {

    m_suite_definition_version_isSet = false;
    m_suite_definition_version_isValid = false;

    m_suite_run_configuration_isSet = false;
    m_suite_run_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartSuiteRun_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSuiteRun_request::fromJsonObject(QJsonObject json) {

    m_suite_definition_version_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_version, json[QString("suiteDefinitionVersion")]);
    m_suite_definition_version_isSet = !json[QString("suiteDefinitionVersion")].isNull() && m_suite_definition_version_isValid;

    m_suite_run_configuration_isValid = ::OpenAPI::fromJsonValue(m_suite_run_configuration, json[QString("suiteRunConfiguration")]);
    m_suite_run_configuration_isSet = !json[QString("suiteRunConfiguration")].isNull() && m_suite_run_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStartSuiteRun_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSuiteRun_request::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_definition_version_isSet) {
        obj.insert(QString("suiteDefinitionVersion"), ::OpenAPI::toJsonValue(m_suite_definition_version));
    }
    if (m_suite_run_configuration.isSet()) {
        obj.insert(QString("suiteRunConfiguration"), ::OpenAPI::toJsonValue(m_suite_run_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartSuiteRun_request::getSuiteDefinitionVersion() const {
    return m_suite_definition_version;
}
void OAIStartSuiteRun_request::setSuiteDefinitionVersion(const QString &suite_definition_version) {
    m_suite_definition_version = suite_definition_version;
    m_suite_definition_version_isSet = true;
}

bool OAIStartSuiteRun_request::is_suite_definition_version_Set() const{
    return m_suite_definition_version_isSet;
}

bool OAIStartSuiteRun_request::is_suite_definition_version_Valid() const{
    return m_suite_definition_version_isValid;
}

OAIStartSuiteRun_request_suiteRunConfiguration OAIStartSuiteRun_request::getSuiteRunConfiguration() const {
    return m_suite_run_configuration;
}
void OAIStartSuiteRun_request::setSuiteRunConfiguration(const OAIStartSuiteRun_request_suiteRunConfiguration &suite_run_configuration) {
    m_suite_run_configuration = suite_run_configuration;
    m_suite_run_configuration_isSet = true;
}

bool OAIStartSuiteRun_request::is_suite_run_configuration_Set() const{
    return m_suite_run_configuration_isSet;
}

bool OAIStartSuiteRun_request::is_suite_run_configuration_Valid() const{
    return m_suite_run_configuration_isValid;
}

QMap<QString, QString> OAIStartSuiteRun_request::getTags() const {
    return m_tags;
}
void OAIStartSuiteRun_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartSuiteRun_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartSuiteRun_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartSuiteRun_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_definition_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_run_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSuiteRun_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suite_run_configuration_isValid && true;
}

} // namespace OpenAPI
