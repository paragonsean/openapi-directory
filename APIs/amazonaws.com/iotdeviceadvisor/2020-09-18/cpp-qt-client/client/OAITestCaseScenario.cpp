/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCaseScenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCaseScenario::OAITestCaseScenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCaseScenario::OAITestCaseScenario() {
    this->initializeModel();
}

OAITestCaseScenario::~OAITestCaseScenario() {}

void OAITestCaseScenario::initializeModel() {

    m_test_case_scenario_id_isSet = false;
    m_test_case_scenario_id_isValid = false;

    m_test_case_scenario_type_isSet = false;
    m_test_case_scenario_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_isSet = false;
    m_failure_isValid = false;

    m_system_message_isSet = false;
    m_system_message_isValid = false;
}

void OAITestCaseScenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCaseScenario::fromJsonObject(QJsonObject json) {

    m_test_case_scenario_id_isValid = ::OpenAPI::fromJsonValue(m_test_case_scenario_id, json[QString("testCaseScenarioId")]);
    m_test_case_scenario_id_isSet = !json[QString("testCaseScenarioId")].isNull() && m_test_case_scenario_id_isValid;

    m_test_case_scenario_type_isValid = ::OpenAPI::fromJsonValue(m_test_case_scenario_type, json[QString("testCaseScenarioType")]);
    m_test_case_scenario_type_isSet = !json[QString("testCaseScenarioType")].isNull() && m_test_case_scenario_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_failure_isValid = ::OpenAPI::fromJsonValue(m_failure, json[QString("failure")]);
    m_failure_isSet = !json[QString("failure")].isNull() && m_failure_isValid;

    m_system_message_isValid = ::OpenAPI::fromJsonValue(m_system_message, json[QString("systemMessage")]);
    m_system_message_isSet = !json[QString("systemMessage")].isNull() && m_system_message_isValid;
}

QString OAITestCaseScenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCaseScenario::asJsonObject() const {
    QJsonObject obj;
    if (m_test_case_scenario_id_isSet) {
        obj.insert(QString("testCaseScenarioId"), ::OpenAPI::toJsonValue(m_test_case_scenario_id));
    }
    if (m_test_case_scenario_type.isSet()) {
        obj.insert(QString("testCaseScenarioType"), ::OpenAPI::toJsonValue(m_test_case_scenario_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_isSet) {
        obj.insert(QString("failure"), ::OpenAPI::toJsonValue(m_failure));
    }
    if (m_system_message_isSet) {
        obj.insert(QString("systemMessage"), ::OpenAPI::toJsonValue(m_system_message));
    }
    return obj;
}

QString OAITestCaseScenario::getTestCaseScenarioId() const {
    return m_test_case_scenario_id;
}
void OAITestCaseScenario::setTestCaseScenarioId(const QString &test_case_scenario_id) {
    m_test_case_scenario_id = test_case_scenario_id;
    m_test_case_scenario_id_isSet = true;
}

bool OAITestCaseScenario::is_test_case_scenario_id_Set() const{
    return m_test_case_scenario_id_isSet;
}

bool OAITestCaseScenario::is_test_case_scenario_id_Valid() const{
    return m_test_case_scenario_id_isValid;
}

OAITestCaseScenarioType OAITestCaseScenario::getTestCaseScenarioType() const {
    return m_test_case_scenario_type;
}
void OAITestCaseScenario::setTestCaseScenarioType(const OAITestCaseScenarioType &test_case_scenario_type) {
    m_test_case_scenario_type = test_case_scenario_type;
    m_test_case_scenario_type_isSet = true;
}

bool OAITestCaseScenario::is_test_case_scenario_type_Set() const{
    return m_test_case_scenario_type_isSet;
}

bool OAITestCaseScenario::is_test_case_scenario_type_Valid() const{
    return m_test_case_scenario_type_isValid;
}

OAITestCaseScenarioStatus OAITestCaseScenario::getStatus() const {
    return m_status;
}
void OAITestCaseScenario::setStatus(const OAITestCaseScenarioStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestCaseScenario::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestCaseScenario::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITestCaseScenario::getFailure() const {
    return m_failure;
}
void OAITestCaseScenario::setFailure(const QString &failure) {
    m_failure = failure;
    m_failure_isSet = true;
}

bool OAITestCaseScenario::is_failure_Set() const{
    return m_failure_isSet;
}

bool OAITestCaseScenario::is_failure_Valid() const{
    return m_failure_isValid;
}

QString OAITestCaseScenario::getSystemMessage() const {
    return m_system_message;
}
void OAITestCaseScenario::setSystemMessage(const QString &system_message) {
    m_system_message = system_message;
    m_system_message_isSet = true;
}

bool OAITestCaseScenario::is_system_message_Set() const{
    return m_system_message_isSet;
}

bool OAITestCaseScenario::is_system_message_Valid() const{
    return m_system_message_isValid;
}

bool OAITestCaseScenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_case_scenario_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_case_scenario_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCaseScenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
