/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestCaseScenario.h
 *
 * Provides test case scenario.
 */

#ifndef OAITestCaseScenario_H
#define OAITestCaseScenario_H

#include <QJsonObject>

#include "OAITestCaseScenarioStatus.h"
#include "OAITestCaseScenarioType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITestCaseScenario : public OAIObject {
public:
    OAITestCaseScenario();
    OAITestCaseScenario(QString json);
    ~OAITestCaseScenario() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTestCaseScenarioId() const;
    void setTestCaseScenarioId(const QString &test_case_scenario_id);
    bool is_test_case_scenario_id_Set() const;
    bool is_test_case_scenario_id_Valid() const;

    OAITestCaseScenarioType getTestCaseScenarioType() const;
    void setTestCaseScenarioType(const OAITestCaseScenarioType &test_case_scenario_type);
    bool is_test_case_scenario_type_Set() const;
    bool is_test_case_scenario_type_Valid() const;

    OAITestCaseScenarioStatus getStatus() const;
    void setStatus(const OAITestCaseScenarioStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getFailure() const;
    void setFailure(const QString &failure);
    bool is_failure_Set() const;
    bool is_failure_Valid() const;

    QString getSystemMessage() const;
    void setSystemMessage(const QString &system_message);
    bool is_system_message_Set() const;
    bool is_system_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_test_case_scenario_id;
    bool m_test_case_scenario_id_isSet;
    bool m_test_case_scenario_id_isValid;

    OAITestCaseScenarioType m_test_case_scenario_type;
    bool m_test_case_scenario_type_isSet;
    bool m_test_case_scenario_type_isValid;

    OAITestCaseScenarioStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_failure;
    bool m_failure_isSet;
    bool m_failure_isValid;

    QString m_system_message;
    bool m_system_message_isSet;
    bool m_system_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestCaseScenario)

#endif // OAITestCaseScenario_H
