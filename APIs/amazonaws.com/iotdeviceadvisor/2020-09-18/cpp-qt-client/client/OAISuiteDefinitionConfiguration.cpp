/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuiteDefinitionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuiteDefinitionConfiguration::OAISuiteDefinitionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuiteDefinitionConfiguration::OAISuiteDefinitionConfiguration() {
    this->initializeModel();
}

OAISuiteDefinitionConfiguration::~OAISuiteDefinitionConfiguration() {}

void OAISuiteDefinitionConfiguration::initializeModel() {

    m_suite_definition_name_isSet = false;
    m_suite_definition_name_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_intended_for_qualification_isSet = false;
    m_intended_for_qualification_isValid = false;

    m_is_long_duration_test_isSet = false;
    m_is_long_duration_test_isValid = false;

    m_root_group_isSet = false;
    m_root_group_isValid = false;

    m_device_permission_role_arn_isSet = false;
    m_device_permission_role_arn_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAISuiteDefinitionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuiteDefinitionConfiguration::fromJsonObject(QJsonObject json) {

    m_suite_definition_name_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_name, json[QString("suiteDefinitionName")]);
    m_suite_definition_name_isSet = !json[QString("suiteDefinitionName")].isNull() && m_suite_definition_name_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_intended_for_qualification_isValid = ::OpenAPI::fromJsonValue(m_intended_for_qualification, json[QString("intendedForQualification")]);
    m_intended_for_qualification_isSet = !json[QString("intendedForQualification")].isNull() && m_intended_for_qualification_isValid;

    m_is_long_duration_test_isValid = ::OpenAPI::fromJsonValue(m_is_long_duration_test, json[QString("isLongDurationTest")]);
    m_is_long_duration_test_isSet = !json[QString("isLongDurationTest")].isNull() && m_is_long_duration_test_isValid;

    m_root_group_isValid = ::OpenAPI::fromJsonValue(m_root_group, json[QString("rootGroup")]);
    m_root_group_isSet = !json[QString("rootGroup")].isNull() && m_root_group_isValid;

    m_device_permission_role_arn_isValid = ::OpenAPI::fromJsonValue(m_device_permission_role_arn, json[QString("devicePermissionRoleArn")]);
    m_device_permission_role_arn_isSet = !json[QString("devicePermissionRoleArn")].isNull() && m_device_permission_role_arn_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAISuiteDefinitionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuiteDefinitionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_definition_name_isSet) {
        obj.insert(QString("suiteDefinitionName"), ::OpenAPI::toJsonValue(m_suite_definition_name));
    }
    if (m_devices.isSet()) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_intended_for_qualification_isSet) {
        obj.insert(QString("intendedForQualification"), ::OpenAPI::toJsonValue(m_intended_for_qualification));
    }
    if (m_is_long_duration_test_isSet) {
        obj.insert(QString("isLongDurationTest"), ::OpenAPI::toJsonValue(m_is_long_duration_test));
    }
    if (m_root_group_isSet) {
        obj.insert(QString("rootGroup"), ::OpenAPI::toJsonValue(m_root_group));
    }
    if (m_device_permission_role_arn_isSet) {
        obj.insert(QString("devicePermissionRoleArn"), ::OpenAPI::toJsonValue(m_device_permission_role_arn));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

QString OAISuiteDefinitionConfiguration::getSuiteDefinitionName() const {
    return m_suite_definition_name;
}
void OAISuiteDefinitionConfiguration::setSuiteDefinitionName(const QString &suite_definition_name) {
    m_suite_definition_name = suite_definition_name;
    m_suite_definition_name_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_suite_definition_name_Set() const{
    return m_suite_definition_name_isSet;
}

bool OAISuiteDefinitionConfiguration::is_suite_definition_name_Valid() const{
    return m_suite_definition_name_isValid;
}

QList OAISuiteDefinitionConfiguration::getDevices() const {
    return m_devices;
}
void OAISuiteDefinitionConfiguration::setDevices(const QList &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAISuiteDefinitionConfiguration::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAISuiteDefinitionConfiguration::getIntendedForQualification() const {
    return m_intended_for_qualification;
}
void OAISuiteDefinitionConfiguration::setIntendedForQualification(const bool &intended_for_qualification) {
    m_intended_for_qualification = intended_for_qualification;
    m_intended_for_qualification_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_intended_for_qualification_Set() const{
    return m_intended_for_qualification_isSet;
}

bool OAISuiteDefinitionConfiguration::is_intended_for_qualification_Valid() const{
    return m_intended_for_qualification_isValid;
}

bool OAISuiteDefinitionConfiguration::getIsLongDurationTest() const {
    return m_is_long_duration_test;
}
void OAISuiteDefinitionConfiguration::setIsLongDurationTest(const bool &is_long_duration_test) {
    m_is_long_duration_test = is_long_duration_test;
    m_is_long_duration_test_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_is_long_duration_test_Set() const{
    return m_is_long_duration_test_isSet;
}

bool OAISuiteDefinitionConfiguration::is_is_long_duration_test_Valid() const{
    return m_is_long_duration_test_isValid;
}

QString OAISuiteDefinitionConfiguration::getRootGroup() const {
    return m_root_group;
}
void OAISuiteDefinitionConfiguration::setRootGroup(const QString &root_group) {
    m_root_group = root_group;
    m_root_group_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_root_group_Set() const{
    return m_root_group_isSet;
}

bool OAISuiteDefinitionConfiguration::is_root_group_Valid() const{
    return m_root_group_isValid;
}

QString OAISuiteDefinitionConfiguration::getDevicePermissionRoleArn() const {
    return m_device_permission_role_arn;
}
void OAISuiteDefinitionConfiguration::setDevicePermissionRoleArn(const QString &device_permission_role_arn) {
    m_device_permission_role_arn = device_permission_role_arn;
    m_device_permission_role_arn_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_device_permission_role_arn_Set() const{
    return m_device_permission_role_arn_isSet;
}

bool OAISuiteDefinitionConfiguration::is_device_permission_role_arn_Valid() const{
    return m_device_permission_role_arn_isValid;
}

OAIProtocol OAISuiteDefinitionConfiguration::getProtocol() const {
    return m_protocol;
}
void OAISuiteDefinitionConfiguration::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISuiteDefinitionConfiguration::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISuiteDefinitionConfiguration::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAISuiteDefinitionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intended_for_qualification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_long_duration_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_permission_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuiteDefinitionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suite_definition_name_isValid && m_root_group_isValid && m_device_permission_role_arn_isValid && true;
}

} // namespace OpenAPI
