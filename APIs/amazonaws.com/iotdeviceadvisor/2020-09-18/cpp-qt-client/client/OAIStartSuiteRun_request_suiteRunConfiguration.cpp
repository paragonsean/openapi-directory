/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSuiteRun_request_suiteRunConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSuiteRun_request_suiteRunConfiguration::OAIStartSuiteRun_request_suiteRunConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSuiteRun_request_suiteRunConfiguration::OAIStartSuiteRun_request_suiteRunConfiguration() {
    this->initializeModel();
}

OAIStartSuiteRun_request_suiteRunConfiguration::~OAIStartSuiteRun_request_suiteRunConfiguration() {}

void OAIStartSuiteRun_request_suiteRunConfiguration::initializeModel() {

    m_primary_device_isSet = false;
    m_primary_device_isValid = false;

    m_selected_test_list_isSet = false;
    m_selected_test_list_isValid = false;

    m_parallel_run_isSet = false;
    m_parallel_run_isValid = false;
}

void OAIStartSuiteRun_request_suiteRunConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSuiteRun_request_suiteRunConfiguration::fromJsonObject(QJsonObject json) {

    m_primary_device_isValid = ::OpenAPI::fromJsonValue(m_primary_device, json[QString("primaryDevice")]);
    m_primary_device_isSet = !json[QString("primaryDevice")].isNull() && m_primary_device_isValid;

    m_selected_test_list_isValid = ::OpenAPI::fromJsonValue(m_selected_test_list, json[QString("selectedTestList")]);
    m_selected_test_list_isSet = !json[QString("selectedTestList")].isNull() && m_selected_test_list_isValid;

    m_parallel_run_isValid = ::OpenAPI::fromJsonValue(m_parallel_run, json[QString("parallelRun")]);
    m_parallel_run_isSet = !json[QString("parallelRun")].isNull() && m_parallel_run_isValid;
}

QString OAIStartSuiteRun_request_suiteRunConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSuiteRun_request_suiteRunConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_device.isSet()) {
        obj.insert(QString("primaryDevice"), ::OpenAPI::toJsonValue(m_primary_device));
    }
    if (m_selected_test_list.isSet()) {
        obj.insert(QString("selectedTestList"), ::OpenAPI::toJsonValue(m_selected_test_list));
    }
    if (m_parallel_run_isSet) {
        obj.insert(QString("parallelRun"), ::OpenAPI::toJsonValue(m_parallel_run));
    }
    return obj;
}

OAIStartSuiteRun_request_suiteRunConfiguration_primaryDevice OAIStartSuiteRun_request_suiteRunConfiguration::getPrimaryDevice() const {
    return m_primary_device;
}
void OAIStartSuiteRun_request_suiteRunConfiguration::setPrimaryDevice(const OAIStartSuiteRun_request_suiteRunConfiguration_primaryDevice &primary_device) {
    m_primary_device = primary_device;
    m_primary_device_isSet = true;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::is_primary_device_Set() const{
    return m_primary_device_isSet;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::is_primary_device_Valid() const{
    return m_primary_device_isValid;
}

QList OAIStartSuiteRun_request_suiteRunConfiguration::getSelectedTestList() const {
    return m_selected_test_list;
}
void OAIStartSuiteRun_request_suiteRunConfiguration::setSelectedTestList(const QList &selected_test_list) {
    m_selected_test_list = selected_test_list;
    m_selected_test_list_isSet = true;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::is_selected_test_list_Set() const{
    return m_selected_test_list_isSet;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::is_selected_test_list_Valid() const{
    return m_selected_test_list_isValid;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::getParallelRun() const {
    return m_parallel_run;
}
void OAIStartSuiteRun_request_suiteRunConfiguration::setParallelRun(const bool &parallel_run) {
    m_parallel_run = parallel_run;
    m_parallel_run_isSet = true;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::is_parallel_run_Set() const{
    return m_parallel_run_isSet;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::is_parallel_run_Valid() const{
    return m_parallel_run_isValid;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_test_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSuiteRun_request_suiteRunConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
