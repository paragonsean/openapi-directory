/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSuiteDefinitionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSuiteDefinitionsResponse::OAIListSuiteDefinitionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSuiteDefinitionsResponse::OAIListSuiteDefinitionsResponse() {
    this->initializeModel();
}

OAIListSuiteDefinitionsResponse::~OAIListSuiteDefinitionsResponse() {}

void OAIListSuiteDefinitionsResponse::initializeModel() {

    m_suite_definition_information_list_isSet = false;
    m_suite_definition_information_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListSuiteDefinitionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSuiteDefinitionsResponse::fromJsonObject(QJsonObject json) {

    m_suite_definition_information_list_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_information_list, json[QString("suiteDefinitionInformationList")]);
    m_suite_definition_information_list_isSet = !json[QString("suiteDefinitionInformationList")].isNull() && m_suite_definition_information_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListSuiteDefinitionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSuiteDefinitionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_definition_information_list.isSet()) {
        obj.insert(QString("suiteDefinitionInformationList"), ::OpenAPI::toJsonValue(m_suite_definition_information_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListSuiteDefinitionsResponse::getSuiteDefinitionInformationList() const {
    return m_suite_definition_information_list;
}
void OAIListSuiteDefinitionsResponse::setSuiteDefinitionInformationList(const QList &suite_definition_information_list) {
    m_suite_definition_information_list = suite_definition_information_list;
    m_suite_definition_information_list_isSet = true;
}

bool OAIListSuiteDefinitionsResponse::is_suite_definition_information_list_Set() const{
    return m_suite_definition_information_list_isSet;
}

bool OAIListSuiteDefinitionsResponse::is_suite_definition_information_list_Valid() const{
    return m_suite_definition_information_list_isValid;
}

QString OAIListSuiteDefinitionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListSuiteDefinitionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSuiteDefinitionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSuiteDefinitionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListSuiteDefinitionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_definition_information_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSuiteDefinitionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
