/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuiteDefinitionConfiguration.h
 *
 * Gets the suite definition configuration.
 */

#ifndef OAISuiteDefinitionConfiguration_H
#define OAISuiteDefinitionConfiguration_H

#include <QJsonObject>

#include "OAIProtocol.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISuiteDefinitionConfiguration : public OAIObject {
public:
    OAISuiteDefinitionConfiguration();
    OAISuiteDefinitionConfiguration(QString json);
    ~OAISuiteDefinitionConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSuiteDefinitionName() const;
    void setSuiteDefinitionName(const QString &suite_definition_name);
    bool is_suite_definition_name_Set() const;
    bool is_suite_definition_name_Valid() const;

    QList getDevices() const;
    void setDevices(const QList &devices);
    bool is_devices_Set() const;
    bool is_devices_Valid() const;

    bool getIntendedForQualification() const;
    void setIntendedForQualification(const bool &intended_for_qualification);
    bool is_intended_for_qualification_Set() const;
    bool is_intended_for_qualification_Valid() const;

    bool getIsLongDurationTest() const;
    void setIsLongDurationTest(const bool &is_long_duration_test);
    bool is_is_long_duration_test_Set() const;
    bool is_is_long_duration_test_Valid() const;

    QString getRootGroup() const;
    void setRootGroup(const QString &root_group);
    bool is_root_group_Set() const;
    bool is_root_group_Valid() const;

    QString getDevicePermissionRoleArn() const;
    void setDevicePermissionRoleArn(const QString &device_permission_role_arn);
    bool is_device_permission_role_arn_Set() const;
    bool is_device_permission_role_arn_Valid() const;

    OAIProtocol getProtocol() const;
    void setProtocol(const OAIProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_suite_definition_name;
    bool m_suite_definition_name_isSet;
    bool m_suite_definition_name_isValid;

    QList m_devices;
    bool m_devices_isSet;
    bool m_devices_isValid;

    bool m_intended_for_qualification;
    bool m_intended_for_qualification_isSet;
    bool m_intended_for_qualification_isValid;

    bool m_is_long_duration_test;
    bool m_is_long_duration_test_isSet;
    bool m_is_long_duration_test_isValid;

    QString m_root_group;
    bool m_root_group_isSet;
    bool m_root_group_isValid;

    QString m_device_permission_role_arn;
    bool m_device_permission_role_arn_isSet;
    bool m_device_permission_role_arn_isValid;

    OAIProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuiteDefinitionConfiguration)

#endif // OAISuiteDefinitionConfiguration_H
