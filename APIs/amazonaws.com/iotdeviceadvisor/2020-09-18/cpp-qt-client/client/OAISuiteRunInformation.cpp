/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuiteRunInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuiteRunInformation::OAISuiteRunInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuiteRunInformation::OAISuiteRunInformation() {
    this->initializeModel();
}

OAISuiteRunInformation::~OAISuiteRunInformation() {}

void OAISuiteRunInformation::initializeModel() {

    m_suite_definition_id_isSet = false;
    m_suite_definition_id_isValid = false;

    m_suite_definition_version_isSet = false;
    m_suite_definition_version_isValid = false;

    m_suite_definition_name_isSet = false;
    m_suite_definition_name_isValid = false;

    m_suite_run_id_isSet = false;
    m_suite_run_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;
}

void OAISuiteRunInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuiteRunInformation::fromJsonObject(QJsonObject json) {

    m_suite_definition_id_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_id, json[QString("suiteDefinitionId")]);
    m_suite_definition_id_isSet = !json[QString("suiteDefinitionId")].isNull() && m_suite_definition_id_isValid;

    m_suite_definition_version_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_version, json[QString("suiteDefinitionVersion")]);
    m_suite_definition_version_isSet = !json[QString("suiteDefinitionVersion")].isNull() && m_suite_definition_version_isValid;

    m_suite_definition_name_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_name, json[QString("suiteDefinitionName")]);
    m_suite_definition_name_isSet = !json[QString("suiteDefinitionName")].isNull() && m_suite_definition_name_isValid;

    m_suite_run_id_isValid = ::OpenAPI::fromJsonValue(m_suite_run_id, json[QString("suiteRunId")]);
    m_suite_run_id_isSet = !json[QString("suiteRunId")].isNull() && m_suite_run_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("endAt")]);
    m_end_at_isSet = !json[QString("endAt")].isNull() && m_end_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(m_passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;
}

QString OAISuiteRunInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuiteRunInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_definition_id_isSet) {
        obj.insert(QString("suiteDefinitionId"), ::OpenAPI::toJsonValue(m_suite_definition_id));
    }
    if (m_suite_definition_version_isSet) {
        obj.insert(QString("suiteDefinitionVersion"), ::OpenAPI::toJsonValue(m_suite_definition_version));
    }
    if (m_suite_definition_name_isSet) {
        obj.insert(QString("suiteDefinitionName"), ::OpenAPI::toJsonValue(m_suite_definition_name));
    }
    if (m_suite_run_id_isSet) {
        obj.insert(QString("suiteRunId"), ::OpenAPI::toJsonValue(m_suite_run_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_end_at_isSet) {
        obj.insert(QString("endAt"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(m_passed));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    return obj;
}

QString OAISuiteRunInformation::getSuiteDefinitionId() const {
    return m_suite_definition_id;
}
void OAISuiteRunInformation::setSuiteDefinitionId(const QString &suite_definition_id) {
    m_suite_definition_id = suite_definition_id;
    m_suite_definition_id_isSet = true;
}

bool OAISuiteRunInformation::is_suite_definition_id_Set() const{
    return m_suite_definition_id_isSet;
}

bool OAISuiteRunInformation::is_suite_definition_id_Valid() const{
    return m_suite_definition_id_isValid;
}

QString OAISuiteRunInformation::getSuiteDefinitionVersion() const {
    return m_suite_definition_version;
}
void OAISuiteRunInformation::setSuiteDefinitionVersion(const QString &suite_definition_version) {
    m_suite_definition_version = suite_definition_version;
    m_suite_definition_version_isSet = true;
}

bool OAISuiteRunInformation::is_suite_definition_version_Set() const{
    return m_suite_definition_version_isSet;
}

bool OAISuiteRunInformation::is_suite_definition_version_Valid() const{
    return m_suite_definition_version_isValid;
}

QString OAISuiteRunInformation::getSuiteDefinitionName() const {
    return m_suite_definition_name;
}
void OAISuiteRunInformation::setSuiteDefinitionName(const QString &suite_definition_name) {
    m_suite_definition_name = suite_definition_name;
    m_suite_definition_name_isSet = true;
}

bool OAISuiteRunInformation::is_suite_definition_name_Set() const{
    return m_suite_definition_name_isSet;
}

bool OAISuiteRunInformation::is_suite_definition_name_Valid() const{
    return m_suite_definition_name_isValid;
}

QString OAISuiteRunInformation::getSuiteRunId() const {
    return m_suite_run_id;
}
void OAISuiteRunInformation::setSuiteRunId(const QString &suite_run_id) {
    m_suite_run_id = suite_run_id;
    m_suite_run_id_isSet = true;
}

bool OAISuiteRunInformation::is_suite_run_id_Set() const{
    return m_suite_run_id_isSet;
}

bool OAISuiteRunInformation::is_suite_run_id_Valid() const{
    return m_suite_run_id_isValid;
}

QDateTime OAISuiteRunInformation::getCreatedAt() const {
    return m_created_at;
}
void OAISuiteRunInformation::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISuiteRunInformation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISuiteRunInformation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAISuiteRunInformation::getStartedAt() const {
    return m_started_at;
}
void OAISuiteRunInformation::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAISuiteRunInformation::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAISuiteRunInformation::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QDateTime OAISuiteRunInformation::getEndAt() const {
    return m_end_at;
}
void OAISuiteRunInformation::setEndAt(const QDateTime &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAISuiteRunInformation::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAISuiteRunInformation::is_end_at_Valid() const{
    return m_end_at_isValid;
}

OAISuiteRunStatus OAISuiteRunInformation::getStatus() const {
    return m_status;
}
void OAISuiteRunInformation::setStatus(const OAISuiteRunStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISuiteRunInformation::is_status_Set() const{
    return m_status_isSet;
}

bool OAISuiteRunInformation::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAISuiteRunInformation::getPassed() const {
    return m_passed;
}
void OAISuiteRunInformation::setPassed(const qint32 &passed) {
    m_passed = passed;
    m_passed_isSet = true;
}

bool OAISuiteRunInformation::is_passed_Set() const{
    return m_passed_isSet;
}

bool OAISuiteRunInformation::is_passed_Valid() const{
    return m_passed_isValid;
}

qint32 OAISuiteRunInformation::getFailed() const {
    return m_failed;
}
void OAISuiteRunInformation::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAISuiteRunInformation::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAISuiteRunInformation::is_failed_Valid() const{
    return m_failed_isValid;
}

bool OAISuiteRunInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_definition_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuiteRunInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
