/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuiteDefinitionInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuiteDefinitionInformation::OAISuiteDefinitionInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuiteDefinitionInformation::OAISuiteDefinitionInformation() {
    this->initializeModel();
}

OAISuiteDefinitionInformation::~OAISuiteDefinitionInformation() {}

void OAISuiteDefinitionInformation::initializeModel() {

    m_suite_definition_id_isSet = false;
    m_suite_definition_id_isValid = false;

    m_suite_definition_name_isSet = false;
    m_suite_definition_name_isValid = false;

    m_default_devices_isSet = false;
    m_default_devices_isValid = false;

    m_intended_for_qualification_isSet = false;
    m_intended_for_qualification_isValid = false;

    m_is_long_duration_test_isSet = false;
    m_is_long_duration_test_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAISuiteDefinitionInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuiteDefinitionInformation::fromJsonObject(QJsonObject json) {

    m_suite_definition_id_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_id, json[QString("suiteDefinitionId")]);
    m_suite_definition_id_isSet = !json[QString("suiteDefinitionId")].isNull() && m_suite_definition_id_isValid;

    m_suite_definition_name_isValid = ::OpenAPI::fromJsonValue(m_suite_definition_name, json[QString("suiteDefinitionName")]);
    m_suite_definition_name_isSet = !json[QString("suiteDefinitionName")].isNull() && m_suite_definition_name_isValid;

    m_default_devices_isValid = ::OpenAPI::fromJsonValue(m_default_devices, json[QString("defaultDevices")]);
    m_default_devices_isSet = !json[QString("defaultDevices")].isNull() && m_default_devices_isValid;

    m_intended_for_qualification_isValid = ::OpenAPI::fromJsonValue(m_intended_for_qualification, json[QString("intendedForQualification")]);
    m_intended_for_qualification_isSet = !json[QString("intendedForQualification")].isNull() && m_intended_for_qualification_isValid;

    m_is_long_duration_test_isValid = ::OpenAPI::fromJsonValue(m_is_long_duration_test, json[QString("isLongDurationTest")]);
    m_is_long_duration_test_isSet = !json[QString("isLongDurationTest")].isNull() && m_is_long_duration_test_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;
}

QString OAISuiteDefinitionInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuiteDefinitionInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_suite_definition_id_isSet) {
        obj.insert(QString("suiteDefinitionId"), ::OpenAPI::toJsonValue(m_suite_definition_id));
    }
    if (m_suite_definition_name_isSet) {
        obj.insert(QString("suiteDefinitionName"), ::OpenAPI::toJsonValue(m_suite_definition_name));
    }
    if (m_default_devices.isSet()) {
        obj.insert(QString("defaultDevices"), ::OpenAPI::toJsonValue(m_default_devices));
    }
    if (m_intended_for_qualification_isSet) {
        obj.insert(QString("intendedForQualification"), ::OpenAPI::toJsonValue(m_intended_for_qualification));
    }
    if (m_is_long_duration_test_isSet) {
        obj.insert(QString("isLongDurationTest"), ::OpenAPI::toJsonValue(m_is_long_duration_test));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    return obj;
}

QString OAISuiteDefinitionInformation::getSuiteDefinitionId() const {
    return m_suite_definition_id;
}
void OAISuiteDefinitionInformation::setSuiteDefinitionId(const QString &suite_definition_id) {
    m_suite_definition_id = suite_definition_id;
    m_suite_definition_id_isSet = true;
}

bool OAISuiteDefinitionInformation::is_suite_definition_id_Set() const{
    return m_suite_definition_id_isSet;
}

bool OAISuiteDefinitionInformation::is_suite_definition_id_Valid() const{
    return m_suite_definition_id_isValid;
}

QString OAISuiteDefinitionInformation::getSuiteDefinitionName() const {
    return m_suite_definition_name;
}
void OAISuiteDefinitionInformation::setSuiteDefinitionName(const QString &suite_definition_name) {
    m_suite_definition_name = suite_definition_name;
    m_suite_definition_name_isSet = true;
}

bool OAISuiteDefinitionInformation::is_suite_definition_name_Set() const{
    return m_suite_definition_name_isSet;
}

bool OAISuiteDefinitionInformation::is_suite_definition_name_Valid() const{
    return m_suite_definition_name_isValid;
}

QList OAISuiteDefinitionInformation::getDefaultDevices() const {
    return m_default_devices;
}
void OAISuiteDefinitionInformation::setDefaultDevices(const QList &default_devices) {
    m_default_devices = default_devices;
    m_default_devices_isSet = true;
}

bool OAISuiteDefinitionInformation::is_default_devices_Set() const{
    return m_default_devices_isSet;
}

bool OAISuiteDefinitionInformation::is_default_devices_Valid() const{
    return m_default_devices_isValid;
}

bool OAISuiteDefinitionInformation::getIntendedForQualification() const {
    return m_intended_for_qualification;
}
void OAISuiteDefinitionInformation::setIntendedForQualification(const bool &intended_for_qualification) {
    m_intended_for_qualification = intended_for_qualification;
    m_intended_for_qualification_isSet = true;
}

bool OAISuiteDefinitionInformation::is_intended_for_qualification_Set() const{
    return m_intended_for_qualification_isSet;
}

bool OAISuiteDefinitionInformation::is_intended_for_qualification_Valid() const{
    return m_intended_for_qualification_isValid;
}

bool OAISuiteDefinitionInformation::getIsLongDurationTest() const {
    return m_is_long_duration_test;
}
void OAISuiteDefinitionInformation::setIsLongDurationTest(const bool &is_long_duration_test) {
    m_is_long_duration_test = is_long_duration_test;
    m_is_long_duration_test_isSet = true;
}

bool OAISuiteDefinitionInformation::is_is_long_duration_test_Set() const{
    return m_is_long_duration_test_isSet;
}

bool OAISuiteDefinitionInformation::is_is_long_duration_test_Valid() const{
    return m_is_long_duration_test_isValid;
}

OAIProtocol OAISuiteDefinitionInformation::getProtocol() const {
    return m_protocol;
}
void OAISuiteDefinitionInformation::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISuiteDefinitionInformation::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISuiteDefinitionInformation::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QDateTime OAISuiteDefinitionInformation::getCreatedAt() const {
    return m_created_at;
}
void OAISuiteDefinitionInformation::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISuiteDefinitionInformation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISuiteDefinitionInformation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAISuiteDefinitionInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suite_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intended_for_qualification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_long_duration_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuiteDefinitionInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
