/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSuiteRunResponse.h
 *
 * 
 */

#ifndef OAIGetSuiteRunResponse_H
#define OAIGetSuiteRunResponse_H

#include <QJsonObject>

#include "OAIGetSuiteRunResponse_suiteRunConfiguration.h"
#include "OAIGetSuiteRunResponse_testResult.h"
#include "OAISuiteRunStatus.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetSuiteRunResponse_suiteRunConfiguration;
class OAIGetSuiteRunResponse_testResult;

class OAIGetSuiteRunResponse : public OAIObject {
public:
    OAIGetSuiteRunResponse();
    OAIGetSuiteRunResponse(QString json);
    ~OAIGetSuiteRunResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSuiteDefinitionId() const;
    void setSuiteDefinitionId(const QString &suite_definition_id);
    bool is_suite_definition_id_Set() const;
    bool is_suite_definition_id_Valid() const;

    QString getSuiteDefinitionVersion() const;
    void setSuiteDefinitionVersion(const QString &suite_definition_version);
    bool is_suite_definition_version_Set() const;
    bool is_suite_definition_version_Valid() const;

    QString getSuiteRunId() const;
    void setSuiteRunId(const QString &suite_run_id);
    bool is_suite_run_id_Set() const;
    bool is_suite_run_id_Valid() const;

    QString getSuiteRunArn() const;
    void setSuiteRunArn(const QString &suite_run_arn);
    bool is_suite_run_arn_Set() const;
    bool is_suite_run_arn_Valid() const;

    OAIGetSuiteRunResponse_suiteRunConfiguration getSuiteRunConfiguration() const;
    void setSuiteRunConfiguration(const OAIGetSuiteRunResponse_suiteRunConfiguration &suite_run_configuration);
    bool is_suite_run_configuration_Set() const;
    bool is_suite_run_configuration_Valid() const;

    OAIGetSuiteRunResponse_testResult getTestResult() const;
    void setTestResult(const OAIGetSuiteRunResponse_testResult &test_result);
    bool is_test_result_Set() const;
    bool is_test_result_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    OAISuiteRunStatus getStatus() const;
    void setStatus(const OAISuiteRunStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getErrorReason() const;
    void setErrorReason(const QString &error_reason);
    bool is_error_reason_Set() const;
    bool is_error_reason_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_suite_definition_id;
    bool m_suite_definition_id_isSet;
    bool m_suite_definition_id_isValid;

    QString m_suite_definition_version;
    bool m_suite_definition_version_isSet;
    bool m_suite_definition_version_isValid;

    QString m_suite_run_id;
    bool m_suite_run_id_isSet;
    bool m_suite_run_id_isValid;

    QString m_suite_run_arn;
    bool m_suite_run_arn_isSet;
    bool m_suite_run_arn_isValid;

    OAIGetSuiteRunResponse_suiteRunConfiguration m_suite_run_configuration;
    bool m_suite_run_configuration_isSet;
    bool m_suite_run_configuration_isValid;

    OAIGetSuiteRunResponse_testResult m_test_result;
    bool m_test_result_isSet;
    bool m_test_result_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    OAISuiteRunStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_error_reason;
    bool m_error_reason_isSet;
    bool m_error_reason_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSuiteRunResponse)

#endif // OAIGetSuiteRunResponse_H
