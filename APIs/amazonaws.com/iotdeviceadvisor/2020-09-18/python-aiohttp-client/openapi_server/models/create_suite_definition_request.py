# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_suite_definition_request_suite_definition_configuration import CreateSuiteDefinitionRequestSuiteDefinitionConfiguration
from openapi_server import util


class CreateSuiteDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suite_definition_configuration: CreateSuiteDefinitionRequestSuiteDefinitionConfiguration=None, tags: Dict[str, str]=None):
        """CreateSuiteDefinitionRequest - a model defined in OpenAPI

        :param suite_definition_configuration: The suite_definition_configuration of this CreateSuiteDefinitionRequest.
        :param tags: The tags of this CreateSuiteDefinitionRequest.
        """
        self.openapi_types = {
            'suite_definition_configuration': CreateSuiteDefinitionRequestSuiteDefinitionConfiguration,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'suite_definition_configuration': 'suiteDefinitionConfiguration',
            'tags': 'tags'
        }

        self._suite_definition_configuration = suite_definition_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSuiteDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSuiteDefinition_request of this CreateSuiteDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suite_definition_configuration(self):
        """Gets the suite_definition_configuration of this CreateSuiteDefinitionRequest.


        :return: The suite_definition_configuration of this CreateSuiteDefinitionRequest.
        :rtype: CreateSuiteDefinitionRequestSuiteDefinitionConfiguration
        """
        return self._suite_definition_configuration

    @suite_definition_configuration.setter
    def suite_definition_configuration(self, suite_definition_configuration):
        """Sets the suite_definition_configuration of this CreateSuiteDefinitionRequest.


        :param suite_definition_configuration: The suite_definition_configuration of this CreateSuiteDefinitionRequest.
        :type suite_definition_configuration: CreateSuiteDefinitionRequestSuiteDefinitionConfiguration
        """
        if suite_definition_configuration is None:
            raise ValueError("Invalid value for `suite_definition_configuration`, must not be `None`")

        self._suite_definition_configuration = suite_definition_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateSuiteDefinitionRequest.

        The tags to be attached to the suite definition.

        :return: The tags of this CreateSuiteDefinitionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSuiteDefinitionRequest.

        The tags to be attached to the suite definition.

        :param tags: The tags of this CreateSuiteDefinitionRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
