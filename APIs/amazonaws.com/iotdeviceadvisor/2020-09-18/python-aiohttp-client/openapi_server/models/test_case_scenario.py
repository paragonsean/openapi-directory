# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_case_scenario_status import TestCaseScenarioStatus
from openapi_server.models.test_case_scenario_type import TestCaseScenarioType
from openapi_server import util


class TestCaseScenario(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, test_case_scenario_id: str=None, test_case_scenario_type: TestCaseScenarioType=None, status: TestCaseScenarioStatus=None, failure: str=None, system_message: str=None):
        """TestCaseScenario - a model defined in OpenAPI

        :param test_case_scenario_id: The test_case_scenario_id of this TestCaseScenario.
        :param test_case_scenario_type: The test_case_scenario_type of this TestCaseScenario.
        :param status: The status of this TestCaseScenario.
        :param failure: The failure of this TestCaseScenario.
        :param system_message: The system_message of this TestCaseScenario.
        """
        self.openapi_types = {
            'test_case_scenario_id': str,
            'test_case_scenario_type': TestCaseScenarioType,
            'status': TestCaseScenarioStatus,
            'failure': str,
            'system_message': str
        }

        self.attribute_map = {
            'test_case_scenario_id': 'testCaseScenarioId',
            'test_case_scenario_type': 'testCaseScenarioType',
            'status': 'status',
            'failure': 'failure',
            'system_message': 'systemMessage'
        }

        self._test_case_scenario_id = test_case_scenario_id
        self._test_case_scenario_type = test_case_scenario_type
        self._status = status
        self._failure = failure
        self._system_message = system_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCaseScenario':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCaseScenario of this TestCaseScenario.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_case_scenario_id(self):
        """Gets the test_case_scenario_id of this TestCaseScenario.


        :return: The test_case_scenario_id of this TestCaseScenario.
        :rtype: str
        """
        return self._test_case_scenario_id

    @test_case_scenario_id.setter
    def test_case_scenario_id(self, test_case_scenario_id):
        """Sets the test_case_scenario_id of this TestCaseScenario.


        :param test_case_scenario_id: The test_case_scenario_id of this TestCaseScenario.
        :type test_case_scenario_id: str
        """

        self._test_case_scenario_id = test_case_scenario_id

    @property
    def test_case_scenario_type(self):
        """Gets the test_case_scenario_type of this TestCaseScenario.


        :return: The test_case_scenario_type of this TestCaseScenario.
        :rtype: TestCaseScenarioType
        """
        return self._test_case_scenario_type

    @test_case_scenario_type.setter
    def test_case_scenario_type(self, test_case_scenario_type):
        """Sets the test_case_scenario_type of this TestCaseScenario.


        :param test_case_scenario_type: The test_case_scenario_type of this TestCaseScenario.
        :type test_case_scenario_type: TestCaseScenarioType
        """

        self._test_case_scenario_type = test_case_scenario_type

    @property
    def status(self):
        """Gets the status of this TestCaseScenario.


        :return: The status of this TestCaseScenario.
        :rtype: TestCaseScenarioStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestCaseScenario.


        :param status: The status of this TestCaseScenario.
        :type status: TestCaseScenarioStatus
        """

        self._status = status

    @property
    def failure(self):
        """Gets the failure of this TestCaseScenario.


        :return: The failure of this TestCaseScenario.
        :rtype: str
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this TestCaseScenario.


        :param failure: The failure of this TestCaseScenario.
        :type failure: str
        """

        self._failure = failure

    @property
    def system_message(self):
        """Gets the system_message of this TestCaseScenario.


        :return: The system_message of this TestCaseScenario.
        :rtype: str
        """
        return self._system_message

    @system_message.setter
    def system_message(self, system_message):
        """Sets the system_message of this TestCaseScenario.


        :param system_message: The system_message of this TestCaseScenario.
        :type system_message: str
        """

        self._system_message = system_message
