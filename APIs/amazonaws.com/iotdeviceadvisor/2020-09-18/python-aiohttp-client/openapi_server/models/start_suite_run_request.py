# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_suite_run_request_suite_run_configuration import StartSuiteRunRequestSuiteRunConfiguration
from openapi_server import util


class StartSuiteRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suite_definition_version: str=None, suite_run_configuration: StartSuiteRunRequestSuiteRunConfiguration=None, tags: Dict[str, str]=None):
        """StartSuiteRunRequest - a model defined in OpenAPI

        :param suite_definition_version: The suite_definition_version of this StartSuiteRunRequest.
        :param suite_run_configuration: The suite_run_configuration of this StartSuiteRunRequest.
        :param tags: The tags of this StartSuiteRunRequest.
        """
        self.openapi_types = {
            'suite_definition_version': str,
            'suite_run_configuration': StartSuiteRunRequestSuiteRunConfiguration,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'suite_definition_version': 'suiteDefinitionVersion',
            'suite_run_configuration': 'suiteRunConfiguration',
            'tags': 'tags'
        }

        self._suite_definition_version = suite_definition_version
        self._suite_run_configuration = suite_run_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSuiteRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSuiteRun_request of this StartSuiteRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suite_definition_version(self):
        """Gets the suite_definition_version of this StartSuiteRunRequest.

        Suite definition version of the test suite.

        :return: The suite_definition_version of this StartSuiteRunRequest.
        :rtype: str
        """
        return self._suite_definition_version

    @suite_definition_version.setter
    def suite_definition_version(self, suite_definition_version):
        """Sets the suite_definition_version of this StartSuiteRunRequest.

        Suite definition version of the test suite.

        :param suite_definition_version: The suite_definition_version of this StartSuiteRunRequest.
        :type suite_definition_version: str
        """
        if suite_definition_version is not None and len(suite_definition_version) > 255:
            raise ValueError("Invalid value for `suite_definition_version`, length must be less than or equal to `255`")
        if suite_definition_version is not None and len(suite_definition_version) < 2:
            raise ValueError("Invalid value for `suite_definition_version`, length must be greater than or equal to `2`")

        self._suite_definition_version = suite_definition_version

    @property
    def suite_run_configuration(self):
        """Gets the suite_run_configuration of this StartSuiteRunRequest.


        :return: The suite_run_configuration of this StartSuiteRunRequest.
        :rtype: StartSuiteRunRequestSuiteRunConfiguration
        """
        return self._suite_run_configuration

    @suite_run_configuration.setter
    def suite_run_configuration(self, suite_run_configuration):
        """Sets the suite_run_configuration of this StartSuiteRunRequest.


        :param suite_run_configuration: The suite_run_configuration of this StartSuiteRunRequest.
        :type suite_run_configuration: StartSuiteRunRequestSuiteRunConfiguration
        """
        if suite_run_configuration is None:
            raise ValueError("Invalid value for `suite_run_configuration`, must not be `None`")

        self._suite_run_configuration = suite_run_configuration

    @property
    def tags(self):
        """Gets the tags of this StartSuiteRunRequest.

        The tags to be attached to the suite run.

        :return: The tags of this StartSuiteRunRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartSuiteRunRequest.

        The tags to be attached to the suite run.

        :param tags: The tags of this StartSuiteRunRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
