/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTCoreDeviceAdvisor);
  }
}(this, function(expect, AwsIoTCoreDeviceAdvisor) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTCoreDeviceAdvisor.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createSuiteDefinition', function() {
      it('should call createSuiteDefinition successfully', function(done) {
        //uncomment below and update the code to test createSuiteDefinition
        //instance.createSuiteDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSuiteDefinition', function() {
      it('should call deleteSuiteDefinition successfully', function(done) {
        //uncomment below and update the code to test deleteSuiteDefinition
        //instance.deleteSuiteDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpoint', function() {
      it('should call getEndpoint successfully', function(done) {
        //uncomment below and update the code to test getEndpoint
        //instance.getEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSuiteDefinition', function() {
      it('should call getSuiteDefinition successfully', function(done) {
        //uncomment below and update the code to test getSuiteDefinition
        //instance.getSuiteDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSuiteRun', function() {
      it('should call getSuiteRun successfully', function(done) {
        //uncomment below and update the code to test getSuiteRun
        //instance.getSuiteRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSuiteRunReport', function() {
      it('should call getSuiteRunReport successfully', function(done) {
        //uncomment below and update the code to test getSuiteRunReport
        //instance.getSuiteRunReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSuiteDefinitions', function() {
      it('should call listSuiteDefinitions successfully', function(done) {
        //uncomment below and update the code to test listSuiteDefinitions
        //instance.listSuiteDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSuiteRuns', function() {
      it('should call listSuiteRuns successfully', function(done) {
        //uncomment below and update the code to test listSuiteRuns
        //instance.listSuiteRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSuiteRun', function() {
      it('should call startSuiteRun successfully', function(done) {
        //uncomment below and update the code to test startSuiteRun
        //instance.startSuiteRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopSuiteRun', function() {
      it('should call stopSuiteRun successfully', function(done) {
        //uncomment below and update the code to test stopSuiteRun
        //instance.stopSuiteRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSuiteDefinition', function() {
      it('should call updateSuiteDefinition successfully', function(done) {
        //uncomment below and update the code to test updateSuiteDefinition
        //instance.updateSuiteDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
