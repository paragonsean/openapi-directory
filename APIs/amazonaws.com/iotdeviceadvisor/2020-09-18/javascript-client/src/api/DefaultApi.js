/**
 * AWS IoT Core Device Advisor
 * Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
 *
 * The version of the OpenAPI document: 2020-09-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSuiteDefinitionRequest from '../model/CreateSuiteDefinitionRequest';
import CreateSuiteDefinitionResponse from '../model/CreateSuiteDefinitionResponse';
import GetEndpointResponse from '../model/GetEndpointResponse';
import GetSuiteDefinitionResponse from '../model/GetSuiteDefinitionResponse';
import GetSuiteRunReportResponse from '../model/GetSuiteRunReportResponse';
import GetSuiteRunResponse from '../model/GetSuiteRunResponse';
import ListSuiteDefinitionsResponse from '../model/ListSuiteDefinitionsResponse';
import ListSuiteRunsResponse from '../model/ListSuiteRunsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import StartSuiteRunRequest from '../model/StartSuiteRunRequest';
import StartSuiteRunResponse from '../model/StartSuiteRunResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateSuiteDefinitionRequest from '../model/UpdateSuiteDefinitionRequest';
import UpdateSuiteDefinitionResponse from '../model/UpdateSuiteDefinitionResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-09-18
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSuiteDefinition operation.
     * @callback module:api/DefaultApi~createSuiteDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSuiteDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Device Advisor test suite.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">CreateSuiteDefinition</a> action.</p>
     * @param {module:model/CreateSuiteDefinitionRequest} createSuiteDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSuiteDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSuiteDefinitionResponse}
     */
    createSuiteDefinition(createSuiteDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSuiteDefinitionRequest;
      // verify the required parameter 'createSuiteDefinitionRequest' is set
      if (createSuiteDefinitionRequest === undefined || createSuiteDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createSuiteDefinitionRequest' when calling createSuiteDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSuiteDefinitionResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSuiteDefinition operation.
     * @callback module:api/DefaultApi~deleteSuiteDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a Device Advisor test suite.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">DeleteSuiteDefinition</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID of the test suite to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSuiteDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSuiteDefinition(suiteDefinitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling deleteSuiteDefinition");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpoint operation.
     * @callback module:api/DefaultApi~getEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an Device Advisor endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [thingArn] The thing ARN of the device. This is an optional parameter.
     * @param {String} [certificateArn] The certificate ARN of the device. This is an optional parameter.
     * @param {String} [deviceRoleArn] The device role ARN of the device. This is an optional parameter.
     * @param {module:model/String} [authenticationMethod] The authentication method used during the device connection.
     * @param {module:api/DefaultApi~getEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEndpointResponse}
     */
    getEndpoint(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'thingArn': opts['thingArn'],
        'certificateArn': opts['certificateArn'],
        'deviceRoleArn': opts['deviceRoleArn'],
        'authenticationMethod': opts['authenticationMethod']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEndpointResponse;
      return this.apiClient.callApi(
        '/endpoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuiteDefinition operation.
     * @callback module:api/DefaultApi~getSuiteDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSuiteDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about a Device Advisor test suite.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">GetSuiteDefinition</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID of the test suite to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [suiteDefinitionVersion] Suite definition version of the test suite to get.
     * @param {module:api/DefaultApi~getSuiteDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSuiteDefinitionResponse}
     */
    getSuiteDefinition(suiteDefinitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling getSuiteDefinition");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId
      };
      let queryParams = {
        'suiteDefinitionVersion': opts['suiteDefinitionVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSuiteDefinitionResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuiteRun operation.
     * @callback module:api/DefaultApi~getSuiteRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSuiteRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about a Device Advisor test suite run.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">GetSuiteRun</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID for the test suite run.
     * @param {String} suiteRunId Suite run ID for the test suite run.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSuiteRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSuiteRunResponse}
     */
    getSuiteRun(suiteDefinitionId, suiteRunId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling getSuiteRun");
      }
      // verify the required parameter 'suiteRunId' is set
      if (suiteRunId === undefined || suiteRunId === null) {
        throw new Error("Missing the required parameter 'suiteRunId' when calling getSuiteRun");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId,
        'suiteRunId': suiteRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSuiteRunResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuiteRunReport operation.
     * @callback module:api/DefaultApi~getSuiteRunReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSuiteRunReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a report download link for a successful Device Advisor qualifying test suite run.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">GetSuiteRunReport</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID of the test suite.
     * @param {String} suiteRunId Suite run ID of the test suite run.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSuiteRunReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSuiteRunReportResponse}
     */
    getSuiteRunReport(suiteDefinitionId, suiteRunId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling getSuiteRunReport");
      }
      // verify the required parameter 'suiteRunId' is set
      if (suiteRunId === undefined || suiteRunId === null) {
        throw new Error("Missing the required parameter 'suiteRunId' when calling getSuiteRunReport");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId,
        'suiteRunId': suiteRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSuiteRunReportResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSuiteDefinitions operation.
     * @callback module:api/DefaultApi~listSuiteDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSuiteDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the Device Advisor test suites you have created.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">ListSuiteDefinitions</a> action.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return at once.
     * @param {String} [nextToken] A token used to get the next set of results.
     * @param {module:api/DefaultApi~listSuiteDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSuiteDefinitionsResponse}
     */
    listSuiteDefinitions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSuiteDefinitionsResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSuiteRuns operation.
     * @callback module:api/DefaultApi~listSuiteRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSuiteRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists runs of the specified Device Advisor test suite. You can list all runs of the test suite, or the runs of a specific version of the test suite.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">ListSuiteRuns</a> action.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [suiteDefinitionId] Lists the test suite runs of the specified test suite based on suite definition ID.
     * @param {String} [suiteDefinitionVersion] Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of the specified test suite based on suite definition version.
     * @param {Number} [maxResults] The maximum number of results to return at once.
     * @param {String} [nextToken] A token to retrieve the next set of results.
     * @param {module:api/DefaultApi~listSuiteRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSuiteRunsResponse}
     */
    listSuiteRuns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'suiteDefinitionId': opts['suiteDefinitionId'],
        'suiteDefinitionVersion': opts['suiteDefinitionVersion'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSuiteRunsResponse;
      return this.apiClient.callApi(
        '/suiteRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the tags attached to an IoT Device Advisor resource.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">ListTagsForResource</a> action.</p>
     * @param {String} resourceArn The resource ARN of the IoT Device Advisor resource. This can be SuiteDefinition ARN or SuiteRun ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSuiteRun operation.
     * @callback module:api/DefaultApi~startSuiteRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSuiteRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a Device Advisor test suite run.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">StartSuiteRun</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID of the test suite.
     * @param {module:model/StartSuiteRunRequest} startSuiteRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSuiteRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSuiteRunResponse}
     */
    startSuiteRun(suiteDefinitionId, startSuiteRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSuiteRunRequest;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling startSuiteRun");
      }
      // verify the required parameter 'startSuiteRunRequest' is set
      if (startSuiteRunRequest === undefined || startSuiteRunRequest === null) {
        throw new Error("Missing the required parameter 'startSuiteRunRequest' when calling startSuiteRun");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSuiteRunResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}/suiteRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopSuiteRun operation.
     * @callback module:api/DefaultApi~stopSuiteRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a Device Advisor test suite run that is currently running.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">StopSuiteRun</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID of the test suite run to be stopped.
     * @param {String} suiteRunId Suite run ID of the test suite run to be stopped.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopSuiteRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopSuiteRun(suiteDefinitionId, suiteRunId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling stopSuiteRun");
      }
      // verify the required parameter 'suiteRunId' is set
      if (suiteRunId === undefined || suiteRunId === null) {
        throw new Error("Missing the required parameter 'suiteRunId' when calling stopSuiteRun");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId,
        'suiteRunId': suiteRunId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds to and modifies existing tags of an IoT Device Advisor resource.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">TagResource</a> action.</p>
     * @param {String} resourceArn The resource ARN of an IoT Device Advisor resource. This can be SuiteDefinition ARN or SuiteRun ARN.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes tags from an IoT Device Advisor resource.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">UntagResource</a> action.</p>
     * @param {String} resourceArn The resource ARN of an IoT Device Advisor resource. This can be SuiteDefinition ARN or SuiteRun ARN.
     * @param {Array.<String>} tagKeys List of tag keys to remove from the IoT Device Advisor resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSuiteDefinition operation.
     * @callback module:api/DefaultApi~updateSuiteDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSuiteDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a Device Advisor test suite.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">UpdateSuiteDefinition</a> action.</p>
     * @param {String} suiteDefinitionId Suite definition ID of the test suite to be updated.
     * @param {module:model/UpdateSuiteDefinitionRequest} updateSuiteDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSuiteDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSuiteDefinitionResponse}
     */
    updateSuiteDefinition(suiteDefinitionId, updateSuiteDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSuiteDefinitionRequest;
      // verify the required parameter 'suiteDefinitionId' is set
      if (suiteDefinitionId === undefined || suiteDefinitionId === null) {
        throw new Error("Missing the required parameter 'suiteDefinitionId' when calling updateSuiteDefinition");
      }
      // verify the required parameter 'updateSuiteDefinitionRequest' is set
      if (updateSuiteDefinitionRequest === undefined || updateSuiteDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'updateSuiteDefinitionRequest' when calling updateSuiteDefinition");
      }

      let pathParams = {
        'suiteDefinitionId': suiteDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSuiteDefinitionResponse;
      return this.apiClient.callApi(
        '/suiteDefinitions/{suiteDefinitionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
