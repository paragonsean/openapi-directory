/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchUpdateRuleRequest from '../model/BatchUpdateRuleRequest';
import BatchUpdateRuleResponse from '../model/BatchUpdateRuleResponse';
import CreateAccessLogSubscriptionRequest from '../model/CreateAccessLogSubscriptionRequest';
import CreateAccessLogSubscriptionResponse from '../model/CreateAccessLogSubscriptionResponse';
import CreateListenerRequest from '../model/CreateListenerRequest';
import CreateListenerResponse from '../model/CreateListenerResponse';
import CreateRuleRequest from '../model/CreateRuleRequest';
import CreateRuleResponse from '../model/CreateRuleResponse';
import CreateServiceNetworkRequest from '../model/CreateServiceNetworkRequest';
import CreateServiceNetworkResponse from '../model/CreateServiceNetworkResponse';
import CreateServiceNetworkServiceAssociationRequest from '../model/CreateServiceNetworkServiceAssociationRequest';
import CreateServiceNetworkServiceAssociationResponse from '../model/CreateServiceNetworkServiceAssociationResponse';
import CreateServiceNetworkVpcAssociationRequest from '../model/CreateServiceNetworkVpcAssociationRequest';
import CreateServiceNetworkVpcAssociationResponse from '../model/CreateServiceNetworkVpcAssociationResponse';
import CreateServiceRequest from '../model/CreateServiceRequest';
import CreateServiceResponse from '../model/CreateServiceResponse';
import CreateTargetGroupRequest from '../model/CreateTargetGroupRequest';
import CreateTargetGroupResponse from '../model/CreateTargetGroupResponse';
import DeleteServiceNetworkServiceAssociationResponse from '../model/DeleteServiceNetworkServiceAssociationResponse';
import DeleteServiceNetworkVpcAssociationResponse from '../model/DeleteServiceNetworkVpcAssociationResponse';
import DeleteServiceResponse from '../model/DeleteServiceResponse';
import DeleteTargetGroupResponse from '../model/DeleteTargetGroupResponse';
import DeregisterTargetsRequest from '../model/DeregisterTargetsRequest';
import DeregisterTargetsResponse from '../model/DeregisterTargetsResponse';
import GetAccessLogSubscriptionResponse from '../model/GetAccessLogSubscriptionResponse';
import GetAuthPolicyResponse from '../model/GetAuthPolicyResponse';
import GetListenerResponse from '../model/GetListenerResponse';
import GetResourcePolicyResponse from '../model/GetResourcePolicyResponse';
import GetRuleResponse from '../model/GetRuleResponse';
import GetServiceNetworkResponse from '../model/GetServiceNetworkResponse';
import GetServiceNetworkServiceAssociationResponse from '../model/GetServiceNetworkServiceAssociationResponse';
import GetServiceNetworkVpcAssociationResponse from '../model/GetServiceNetworkVpcAssociationResponse';
import GetServiceResponse from '../model/GetServiceResponse';
import GetTargetGroupResponse from '../model/GetTargetGroupResponse';
import ListAccessLogSubscriptionsResponse from '../model/ListAccessLogSubscriptionsResponse';
import ListListenersResponse from '../model/ListListenersResponse';
import ListRulesResponse from '../model/ListRulesResponse';
import ListServiceNetworkServiceAssociationsResponse from '../model/ListServiceNetworkServiceAssociationsResponse';
import ListServiceNetworkVpcAssociationsResponse from '../model/ListServiceNetworkVpcAssociationsResponse';
import ListServiceNetworksResponse from '../model/ListServiceNetworksResponse';
import ListServicesResponse from '../model/ListServicesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTargetGroupsResponse from '../model/ListTargetGroupsResponse';
import ListTargetsRequest from '../model/ListTargetsRequest';
import ListTargetsResponse from '../model/ListTargetsResponse';
import PutAuthPolicyRequest from '../model/PutAuthPolicyRequest';
import PutAuthPolicyResponse from '../model/PutAuthPolicyResponse';
import PutResourcePolicyRequest from '../model/PutResourcePolicyRequest';
import RegisterTargetsRequest from '../model/RegisterTargetsRequest';
import RegisterTargetsResponse from '../model/RegisterTargetsResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAccessLogSubscriptionRequest from '../model/UpdateAccessLogSubscriptionRequest';
import UpdateAccessLogSubscriptionResponse from '../model/UpdateAccessLogSubscriptionResponse';
import UpdateListenerRequest from '../model/UpdateListenerRequest';
import UpdateListenerResponse from '../model/UpdateListenerResponse';
import UpdateRuleRequest from '../model/UpdateRuleRequest';
import UpdateRuleResponse from '../model/UpdateRuleResponse';
import UpdateServiceNetworkRequest from '../model/UpdateServiceNetworkRequest';
import UpdateServiceNetworkResponse from '../model/UpdateServiceNetworkResponse';
import UpdateServiceNetworkVpcAssociationRequest from '../model/UpdateServiceNetworkVpcAssociationRequest';
import UpdateServiceNetworkVpcAssociationResponse from '../model/UpdateServiceNetworkVpcAssociationResponse';
import UpdateServiceRequest from '../model/UpdateServiceRequest';
import UpdateServiceResponse from '../model/UpdateServiceResponse';
import UpdateTargetGroupRequest from '../model/UpdateTargetGroupRequest';
import UpdateTargetGroupResponse from '../model/UpdateTargetGroupResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2022-11-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchUpdateRule operation.
     * @callback module:api/DefaultApi~batchUpdateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the listener rules in a batch. You can use this operation to change the priority of listener rules. This can be useful when bulk updating or swapping rule priority. 
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:model/BatchUpdateRuleRequest} batchUpdateRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateRuleResponse}
     */
    batchUpdateRule(listenerIdentifier, serviceIdentifier, batchUpdateRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateRuleRequest;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling batchUpdateRule");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling batchUpdateRule");
      }
      // verify the required parameter 'batchUpdateRuleRequest' is set
      if (batchUpdateRuleRequest === undefined || batchUpdateRuleRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateRuleRequest' when calling batchUpdateRule");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateRuleResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccessLogSubscription operation.
     * @callback module:api/DefaultApi~createAccessLogSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessLogSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables access logs to be sent to Amazon CloudWatch, Amazon S3, and Amazon Kinesis Data Firehose. The service network owner can use the access logs to audit the services in the network. The service network owner will only see access logs from clients and services that are associated with their service network. Access log entries represent traffic originated from VPCs associated with that network. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/monitoring-access-logs.html\">Access logs</a> in the <i>Amazon VPC Lattice User Guide</i>.
     * @param {module:model/CreateAccessLogSubscriptionRequest} createAccessLogSubscriptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAccessLogSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessLogSubscriptionResponse}
     */
    createAccessLogSubscription(createAccessLogSubscriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAccessLogSubscriptionRequest;
      // verify the required parameter 'createAccessLogSubscriptionRequest' is set
      if (createAccessLogSubscriptionRequest === undefined || createAccessLogSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'createAccessLogSubscriptionRequest' when calling createAccessLogSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAccessLogSubscriptionResponse;
      return this.apiClient.callApi(
        '/accesslogsubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createListener operation.
     * @callback module:api/DefaultApi~createListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateListenerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html\">Listeners</a> in the <i>Amazon VPC Lattice User Guide</i>.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:model/CreateListenerRequest} createListenerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateListenerResponse}
     */
    createListener(serviceIdentifier, createListenerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createListenerRequest;
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling createListener");
      }
      // verify the required parameter 'createListenerRequest' is set
      if (createListenerRequest === undefined || createListenerRequest === null) {
        throw new Error("Missing the required parameter 'createListenerRequest' when calling createListener");
      }

      let pathParams = {
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateListenerResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/DefaultApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules\">Listener rules</a> in the <i>Amazon VPC Lattice User Guide</i>.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:model/CreateRuleRequest} createRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRuleResponse}
     */
    createRule(listenerIdentifier, serviceIdentifier, createRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRuleRequest;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling createRule");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling createRule");
      }
      // verify the required parameter 'createRuleRequest' is set
      if (createRuleRequest === undefined || createRuleRequest === null) {
        throw new Error("Missing the required parameter 'createRuleRequest' when calling createRule");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRuleResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/DefaultApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a service. A service is any software application that can run on instances containers, or serverless functions within an account or virtual private cloud (VPC).</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html\">Services</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
     * @param {module:model/CreateServiceRequest} createServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceResponse}
     */
    createService(createServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServiceRequest;
      // verify the required parameter 'createServiceRequest' is set
      if (createServiceRequest === undefined || createServiceRequest === null) {
        throw new Error("Missing the required parameter 'createServiceRequest' when calling createService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceResponse;
      return this.apiClient.callApi(
        '/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceNetwork operation.
     * @callback module:api/DefaultApi~createServiceNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a service network. A service network is a logical boundary for a collection of services. You can associate services and VPCs with a service network.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html\">Service networks</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
     * @param {module:model/CreateServiceNetworkRequest} createServiceNetworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceNetworkResponse}
     */
    createServiceNetwork(createServiceNetworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServiceNetworkRequest;
      // verify the required parameter 'createServiceNetworkRequest' is set
      if (createServiceNetworkRequest === undefined || createServiceNetworkRequest === null) {
        throw new Error("Missing the required parameter 'createServiceNetworkRequest' when calling createServiceNetwork");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceNetworkResponse;
      return this.apiClient.callApi(
        '/servicenetworks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceNetworkServiceAssociation operation.
     * @callback module:api/DefaultApi~createServiceNetworkServiceAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceNetworkServiceAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a service with a service network.</p> <p>You can't use this operation if the service and service network are already associated or if there is a disassociation or deletion in progress. If the association fails, you can retry the operation by deleting the association and recreating it.</p> <p>You cannot associate a service and service network that are shared with a caller. The caller must own either the service or the service network.</p> <p>As a result of this operation, the association is created in the service network account and the association owner account.</p>
     * @param {module:model/CreateServiceNetworkServiceAssociationRequest} createServiceNetworkServiceAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceNetworkServiceAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceNetworkServiceAssociationResponse}
     */
    createServiceNetworkServiceAssociation(createServiceNetworkServiceAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServiceNetworkServiceAssociationRequest;
      // verify the required parameter 'createServiceNetworkServiceAssociationRequest' is set
      if (createServiceNetworkServiceAssociationRequest === undefined || createServiceNetworkServiceAssociationRequest === null) {
        throw new Error("Missing the required parameter 'createServiceNetworkServiceAssociationRequest' when calling createServiceNetworkServiceAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceNetworkServiceAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkserviceassociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceNetworkVpcAssociation operation.
     * @callback module:api/DefaultApi~createServiceNetworkVpcAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceNetworkVpcAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a VPC with a service network. When you associate a VPC with the service network, it enables all the resources within that VPC to be clients and communicate with other services in the service network. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-network-associations.html#service-network-vpc-associations\">Manage VPC associations</a> in the <i>Amazon VPC Lattice User Guide</i>.</p> <p>You can't use this operation if there is a disassociation in progress. If the association fails, retry by deleting the association and recreating it.</p> <p>As a result of this operation, the association gets created in the service network account and the VPC owner account.</p> <p>If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.</p>
     * @param {module:model/CreateServiceNetworkVpcAssociationRequest} createServiceNetworkVpcAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceNetworkVpcAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceNetworkVpcAssociationResponse}
     */
    createServiceNetworkVpcAssociation(createServiceNetworkVpcAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServiceNetworkVpcAssociationRequest;
      // verify the required parameter 'createServiceNetworkVpcAssociationRequest' is set
      if (createServiceNetworkVpcAssociationRequest === undefined || createServiceNetworkVpcAssociationRequest === null) {
        throw new Error("Missing the required parameter 'createServiceNetworkVpcAssociationRequest' when calling createServiceNetworkVpcAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceNetworkVpcAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkvpcassociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTargetGroup operation.
     * @callback module:api/DefaultApi~createTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTargetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a target group. A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html\">Target groups</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
     * @param {module:model/CreateTargetGroupRequest} createTargetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTargetGroupResponse}
     */
    createTargetGroup(createTargetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTargetGroupRequest;
      // verify the required parameter 'createTargetGroupRequest' is set
      if (createTargetGroupRequest === undefined || createTargetGroupRequest === null) {
        throw new Error("Missing the required parameter 'createTargetGroupRequest' when calling createTargetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTargetGroupResponse;
      return this.apiClient.callApi(
        '/targetgroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccessLogSubscription operation.
     * @callback module:api/DefaultApi~deleteAccessLogSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified access log subscription.
     * @param {String} accessLogSubscriptionIdentifier The ID or Amazon Resource Name (ARN) of the access log subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAccessLogSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAccessLogSubscription(accessLogSubscriptionIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessLogSubscriptionIdentifier' is set
      if (accessLogSubscriptionIdentifier === undefined || accessLogSubscriptionIdentifier === null) {
        throw new Error("Missing the required parameter 'accessLogSubscriptionIdentifier' when calling deleteAccessLogSubscription");
      }

      let pathParams = {
        'accessLogSubscriptionIdentifier': accessLogSubscriptionIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/accesslogsubscriptions/{accessLogSubscriptionIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthPolicy operation.
     * @callback module:api/DefaultApi~deleteAuthPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified auth policy. If an auth is set to <code>AWS_IAM</code> and the auth policy is deleted, all requests will be denied by default. If you are trying to remove the auth policy completely, you must set the auth_type to <code>NONE</code>. If auth is enabled on the resource, but no auth policy is set, all requests will be denied.
     * @param {String} resourceIdentifier The ID or Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAuthPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAuthPolicy(resourceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling deleteAuthPolicy");
      }

      let pathParams = {
        'resourceIdentifier': resourceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/authpolicy/{resourceIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteListener operation.
     * @callback module:api/DefaultApi~deleteListenerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified listener.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteListener(listenerIdentifier, serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling deleteListener");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling deleteListener");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified resource policy.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteResourcePolicy(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling deleteResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resourcepolicy/{resourceArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/DefaultApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. You can delete additional listener rules, but you cannot delete the default rule.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules\">Listener rules</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} ruleIdentifier The ID or Amazon Resource Name (ARN) of the rule.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRule(listenerIdentifier, ruleIdentifier, serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling deleteRule");
      }
      // verify the required parameter 'ruleIdentifier' is set
      if (ruleIdentifier === undefined || ruleIdentifier === null) {
        throw new Error("Missing the required parameter 'ruleIdentifier' when calling deleteRule");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling deleteRule");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'ruleIdentifier': ruleIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/DefaultApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a service. A service can't be deleted if it's associated with a service network. If you delete a service, all resources related to the service, such as the resource policy, auth policy, listeners, listener rules, and access log subscriptions, are also deleted. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html#delete-service\">Delete a service</a> in the <i>Amazon VPC Lattice User Guide</i>.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteServiceResponse}
     */
    deleteService(serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling deleteService");
      }

      let pathParams = {
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteServiceResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceNetwork operation.
     * @callback module:api/DefaultApi~deleteServiceNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a service network. You can only delete the service network if there is no service or VPC associated with it. If you delete a service network, all resources related to the service network, such as the resource policy, auth policy, and access log subscriptions, are also deleted. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#delete-service-network\">Delete a service network</a> in the <i>Amazon VPC Lattice User Guide</i>.
     * @param {String} serviceNetworkIdentifier The Amazon Resource Name (ARN) or ID of the service network.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteServiceNetwork(serviceNetworkIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceNetworkIdentifier' is set
      if (serviceNetworkIdentifier === undefined || serviceNetworkIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkIdentifier' when calling deleteServiceNetwork");
      }

      let pathParams = {
        'serviceNetworkIdentifier': serviceNetworkIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/servicenetworks/{serviceNetworkIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceNetworkServiceAssociation operation.
     * @callback module:api/DefaultApi~deleteServiceNetworkServiceAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteServiceNetworkServiceAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the association between a specified service and the specific service network. This request will fail if an association is still in progress.
     * @param {String} serviceNetworkServiceAssociationIdentifier The ID or Amazon Resource Name (ARN) of the association.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceNetworkServiceAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteServiceNetworkServiceAssociationResponse}
     */
    deleteServiceNetworkServiceAssociation(serviceNetworkServiceAssociationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceNetworkServiceAssociationIdentifier' is set
      if (serviceNetworkServiceAssociationIdentifier === undefined || serviceNetworkServiceAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkServiceAssociationIdentifier' when calling deleteServiceNetworkServiceAssociation");
      }

      let pathParams = {
        'serviceNetworkServiceAssociationIdentifier': serviceNetworkServiceAssociationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteServiceNetworkServiceAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceNetworkVpcAssociation operation.
     * @callback module:api/DefaultApi~deleteServiceNetworkVpcAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteServiceNetworkVpcAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the VPC from the service network. You can't disassociate the VPC if there is a create or update association in progress.
     * @param {String} serviceNetworkVpcAssociationIdentifier The ID or Amazon Resource Name (ARN) of the association.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceNetworkVpcAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteServiceNetworkVpcAssociationResponse}
     */
    deleteServiceNetworkVpcAssociation(serviceNetworkVpcAssociationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceNetworkVpcAssociationIdentifier' is set
      if (serviceNetworkVpcAssociationIdentifier === undefined || serviceNetworkVpcAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkVpcAssociationIdentifier' when calling deleteServiceNetworkVpcAssociation");
      }

      let pathParams = {
        'serviceNetworkVpcAssociationIdentifier': serviceNetworkVpcAssociationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteServiceNetworkVpcAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTargetGroup operation.
     * @callback module:api/DefaultApi~deleteTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTargetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a target group. You can't delete a target group if it is used in a listener rule or if the target group creation is in progress.
     * @param {String} targetGroupIdentifier The ID or Amazon Resource Name (ARN) of the target group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTargetGroupResponse}
     */
    deleteTargetGroup(targetGroupIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetGroupIdentifier' is set
      if (targetGroupIdentifier === undefined || targetGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetGroupIdentifier' when calling deleteTargetGroup");
      }

      let pathParams = {
        'targetGroupIdentifier': targetGroupIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteTargetGroupResponse;
      return this.apiClient.callApi(
        '/targetgroups/{targetGroupIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterTargets operation.
     * @callback module:api/DefaultApi~deregisterTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterTargetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters the specified targets from the specified target group.
     * @param {String} targetGroupIdentifier The ID or Amazon Resource Name (ARN) of the target group.
     * @param {module:model/DeregisterTargetsRequest} deregisterTargetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterTargetsResponse}
     */
    deregisterTargets(targetGroupIdentifier, deregisterTargetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterTargetsRequest;
      // verify the required parameter 'targetGroupIdentifier' is set
      if (targetGroupIdentifier === undefined || targetGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetGroupIdentifier' when calling deregisterTargets");
      }
      // verify the required parameter 'deregisterTargetsRequest' is set
      if (deregisterTargetsRequest === undefined || deregisterTargetsRequest === null) {
        throw new Error("Missing the required parameter 'deregisterTargetsRequest' when calling deregisterTargets");
      }

      let pathParams = {
        'targetGroupIdentifier': targetGroupIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeregisterTargetsResponse;
      return this.apiClient.callApi(
        '/targetgroups/{targetGroupIdentifier}/deregistertargets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessLogSubscription operation.
     * @callback module:api/DefaultApi~getAccessLogSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessLogSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified access log subscription.
     * @param {String} accessLogSubscriptionIdentifier The ID or Amazon Resource Name (ARN) of the access log subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccessLogSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessLogSubscriptionResponse}
     */
    getAccessLogSubscription(accessLogSubscriptionIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessLogSubscriptionIdentifier' is set
      if (accessLogSubscriptionIdentifier === undefined || accessLogSubscriptionIdentifier === null) {
        throw new Error("Missing the required parameter 'accessLogSubscriptionIdentifier' when calling getAccessLogSubscription");
      }

      let pathParams = {
        'accessLogSubscriptionIdentifier': accessLogSubscriptionIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAccessLogSubscriptionResponse;
      return this.apiClient.callApi(
        '/accesslogsubscriptions/{accessLogSubscriptionIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthPolicy operation.
     * @callback module:api/DefaultApi~getAuthPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the auth policy for the specified service or service network.
     * @param {String} resourceIdentifier The ID or Amazon Resource Name (ARN) of the service network or service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAuthPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthPolicyResponse}
     */
    getAuthPolicy(resourceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling getAuthPolicy");
      }

      let pathParams = {
        'resourceIdentifier': resourceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthPolicyResponse;
      return this.apiClient.callApi(
        '/authpolicy/{resourceIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListener operation.
     * @callback module:api/DefaultApi~getListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetListenerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified listener for the specified service.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetListenerResponse}
     */
    getListener(listenerIdentifier, serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling getListener");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling getListener");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetListenerResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcePolicy operation.
     * @callback module:api/DefaultApi~getResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the resource policy. The resource policy is an IAM policy created on behalf of the resource owner when they share a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the service network or service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourcePolicyResponse}
     */
    getResourcePolicy(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling getResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourcePolicyResponse;
      return this.apiClient.callApi(
        '/resourcepolicy/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRule operation.
     * @callback module:api/DefaultApi~getRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about listener rules. You can also retrieve information about the default listener rule. For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules\">Listener rules</a> in the <i>Amazon VPC Lattice User Guide</i>.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} ruleIdentifier The ID or Amazon Resource Name (ARN) of the listener rule.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRuleResponse}
     */
    getRule(listenerIdentifier, ruleIdentifier, serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling getRule");
      }
      // verify the required parameter 'ruleIdentifier' is set
      if (ruleIdentifier === undefined || ruleIdentifier === null) {
        throw new Error("Missing the required parameter 'ruleIdentifier' when calling getRule");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling getRule");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'ruleIdentifier': ruleIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRuleResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/DefaultApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified service.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceResponse}
     */
    getService(serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling getService");
      }

      let pathParams = {
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceNetwork operation.
     * @callback module:api/DefaultApi~getServiceNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified service network.
     * @param {String} serviceNetworkIdentifier The ID or Amazon Resource Name (ARN) of the service network.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceNetworkResponse}
     */
    getServiceNetwork(serviceNetworkIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceNetworkIdentifier' is set
      if (serviceNetworkIdentifier === undefined || serviceNetworkIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkIdentifier' when calling getServiceNetwork");
      }

      let pathParams = {
        'serviceNetworkIdentifier': serviceNetworkIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceNetworkResponse;
      return this.apiClient.callApi(
        '/servicenetworks/{serviceNetworkIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceNetworkServiceAssociation operation.
     * @callback module:api/DefaultApi~getServiceNetworkServiceAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceNetworkServiceAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified association between a service network and a service.
     * @param {String} serviceNetworkServiceAssociationIdentifier The ID or Amazon Resource Name (ARN) of the association.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceNetworkServiceAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceNetworkServiceAssociationResponse}
     */
    getServiceNetworkServiceAssociation(serviceNetworkServiceAssociationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceNetworkServiceAssociationIdentifier' is set
      if (serviceNetworkServiceAssociationIdentifier === undefined || serviceNetworkServiceAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkServiceAssociationIdentifier' when calling getServiceNetworkServiceAssociation");
      }

      let pathParams = {
        'serviceNetworkServiceAssociationIdentifier': serviceNetworkServiceAssociationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceNetworkServiceAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceNetworkVpcAssociation operation.
     * @callback module:api/DefaultApi~getServiceNetworkVpcAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceNetworkVpcAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the association between a service network and a VPC.
     * @param {String} serviceNetworkVpcAssociationIdentifier The ID or Amazon Resource Name (ARN) of the association.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceNetworkVpcAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceNetworkVpcAssociationResponse}
     */
    getServiceNetworkVpcAssociation(serviceNetworkVpcAssociationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceNetworkVpcAssociationIdentifier' is set
      if (serviceNetworkVpcAssociationIdentifier === undefined || serviceNetworkVpcAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkVpcAssociationIdentifier' when calling getServiceNetworkVpcAssociation");
      }

      let pathParams = {
        'serviceNetworkVpcAssociationIdentifier': serviceNetworkVpcAssociationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceNetworkVpcAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTargetGroup operation.
     * @callback module:api/DefaultApi~getTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTargetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified target group.
     * @param {String} targetGroupIdentifier The ID or Amazon Resource Name (ARN) of the target group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTargetGroupResponse}
     */
    getTargetGroup(targetGroupIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'targetGroupIdentifier' is set
      if (targetGroupIdentifier === undefined || targetGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetGroupIdentifier' when calling getTargetGroup");
      }

      let pathParams = {
        'targetGroupIdentifier': targetGroupIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTargetGroupResponse;
      return this.apiClient.callApi(
        '/targetgroups/{targetGroupIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccessLogSubscriptions operation.
     * @callback module:api/DefaultApi~listAccessLogSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccessLogSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all access log subscriptions for the specified service network or service.
     * @param {String} resourceIdentifier The ID or Amazon Resource Name (ARN) of the service network or service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:api/DefaultApi~listAccessLogSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccessLogSubscriptionsResponse}
     */
    listAccessLogSubscriptions(resourceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling listAccessLogSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'resourceIdentifier': resourceIdentifier
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAccessLogSubscriptionsResponse;
      return this.apiClient.callApi(
        '/accesslogsubscriptions#resourceIdentifier', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listListeners operation.
     * @callback module:api/DefaultApi~listListenersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListListenersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the listeners for the specified service.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:api/DefaultApi~listListenersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListListenersResponse}
     */
    listListeners(serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling listListeners");
      }

      let pathParams = {
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListListenersResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRules operation.
     * @callback module:api/DefaultApi~listRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the rules for the listener.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:api/DefaultApi~listRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRulesResponse}
     */
    listRules(listenerIdentifier, serviceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling listRules");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling listRules");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRulesResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceNetworkServiceAssociations operation.
     * @callback module:api/DefaultApi~listServiceNetworkServiceAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceNetworkServiceAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the associations between the service network and the service. You can filter the list either by service or service network. You must provide either the service network identifier or the service identifier.</p> <p>Every association in Amazon VPC Lattice is given a unique Amazon Resource Name (ARN), such as when a service network is associated with a VPC or when a service is associated with a service network. If the association is for a resource that is shared with another account, the association will include the local account ID as the prefix in the ARN for each account the resource is shared with.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {String} [serviceIdentifier] The ID or Amazon Resource Name (ARN) of the service.
     * @param {String} [serviceNetworkIdentifier] The ID or Amazon Resource Name (ARN) of the service network.
     * @param {module:api/DefaultApi~listServiceNetworkServiceAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceNetworkServiceAssociationsResponse}
     */
    listServiceNetworkServiceAssociations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'serviceIdentifier': opts['serviceIdentifier'],
        'serviceNetworkIdentifier': opts['serviceNetworkIdentifier']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceNetworkServiceAssociationsResponse;
      return this.apiClient.callApi(
        '/servicenetworkserviceassociations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceNetworkVpcAssociations operation.
     * @callback module:api/DefaultApi~listServiceNetworkVpcAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceNetworkVpcAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the service network and VPC associations. You can filter the list either by VPC or service network. You must provide either the service network identifier or the VPC identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {String} [serviceNetworkIdentifier] The ID or Amazon Resource Name (ARN) of the service network.
     * @param {String} [vpcIdentifier] The ID or Amazon Resource Name (ARN) of the VPC.
     * @param {module:api/DefaultApi~listServiceNetworkVpcAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceNetworkVpcAssociationsResponse}
     */
    listServiceNetworkVpcAssociations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'serviceNetworkIdentifier': opts['serviceNetworkIdentifier'],
        'vpcIdentifier': opts['vpcIdentifier']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceNetworkVpcAssociationsResponse;
      return this.apiClient.callApi(
        '/servicenetworkvpcassociations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceNetworks operation.
     * @callback module:api/DefaultApi~listServiceNetworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceNetworksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the service networks owned by the caller account or shared with the caller account. Also includes the account ID in the ARN to show which account owns the service network.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:api/DefaultApi~listServiceNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceNetworksResponse}
     */
    listServiceNetworks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceNetworksResponse;
      return this.apiClient.callApi(
        '/servicenetworks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices operation.
     * @callback module:api/DefaultApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the services owned by the caller account or shared with the caller account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:api/DefaultApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServicesResponse}
     */
    listServices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServicesResponse;
      return this.apiClient.callApi(
        '/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTargetGroups operation.
     * @callback module:api/DefaultApi~listTargetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTargetGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists your target groups. You can narrow your search by using the filters below in your request.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:model/String} [targetGroupType] The target group type.
     * @param {String} [vpcIdentifier] The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:api/DefaultApi~listTargetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTargetGroupsResponse}
     */
    listTargetGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'targetGroupType': opts['targetGroupType'],
        'vpcIdentifier': opts['vpcIdentifier']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTargetGroupsResponse;
      return this.apiClient.callApi(
        '/targetgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTargets operation.
     * @callback module:api/DefaultApi~listTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTargetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the targets for the target group. By default, all targets are included. You can use this API to check the health status of targets. You can also ﬁlter the results by target. 
     * @param {String} targetGroupIdentifier The ID or Amazon Resource Name (ARN) of the target group.
     * @param {module:model/ListTargetsRequest} listTargetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return.
     * @param {String} [nextToken] A pagination token for the next page of results.
     * @param {module:api/DefaultApi~listTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTargetsResponse}
     */
    listTargets(targetGroupIdentifier, listTargetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTargetsRequest;
      // verify the required parameter 'targetGroupIdentifier' is set
      if (targetGroupIdentifier === undefined || targetGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetGroupIdentifier' when calling listTargets");
      }
      // verify the required parameter 'listTargetsRequest' is set
      if (listTargetsRequest === undefined || listTargetsRequest === null) {
        throw new Error("Missing the required parameter 'listTargetsRequest' when calling listTargets");
      }

      let pathParams = {
        'targetGroupIdentifier': targetGroupIdentifier
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTargetsResponse;
      return this.apiClient.callApi(
        '/targetgroups/{targetGroupIdentifier}/listtargets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAuthPolicy operation.
     * @callback module:api/DefaultApi~putAuthPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutAuthPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the auth policy. The policy string in JSON must not contain newlines or blank lines.
     * @param {String} resourceIdentifier The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
     * @param {module:model/PutAuthPolicyRequest} putAuthPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAuthPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutAuthPolicyResponse}
     */
    putAuthPolicy(resourceIdentifier, putAuthPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAuthPolicyRequest;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling putAuthPolicy");
      }
      // verify the required parameter 'putAuthPolicyRequest' is set
      if (putAuthPolicyRequest === undefined || putAuthPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putAuthPolicyRequest' when calling putAuthPolicy");
      }

      let pathParams = {
        'resourceIdentifier': resourceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutAuthPolicyResponse;
      return this.apiClient.callApi(
        '/authpolicy/{resourceIdentifier}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePolicy operation.
     * @callback module:api/DefaultApi~putResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches a resource-based permission policy to a service or service network. The policy must contain the same actions and condition statements as the Amazon Web Services Resource Access Manager permission for sharing services and service networks.
     * @param {String} resourceArn The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
     * @param {module:model/PutResourcePolicyRequest} putResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putResourcePolicy(resourceArn, putResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePolicyRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling putResourcePolicy");
      }
      // verify the required parameter 'putResourcePolicyRequest' is set
      if (putResourcePolicyRequest === undefined || putResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resourcepolicy/{resourceArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerTargets operation.
     * @callback module:api/DefaultApi~registerTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterTargetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers the targets with the target group. If it's a Lambda target, you can only have one target in a target group.
     * @param {String} targetGroupIdentifier The ID or Amazon Resource Name (ARN) of the target group.
     * @param {module:model/RegisterTargetsRequest} registerTargetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterTargetsResponse}
     */
    registerTargets(targetGroupIdentifier, registerTargetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerTargetsRequest;
      // verify the required parameter 'targetGroupIdentifier' is set
      if (targetGroupIdentifier === undefined || targetGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetGroupIdentifier' when calling registerTargets");
      }
      // verify the required parameter 'registerTargetsRequest' is set
      if (registerTargetsRequest === undefined || registerTargetsRequest === null) {
        throw new Error("Missing the required parameter 'registerTargetsRequest' when calling registerTargets");
      }

      let pathParams = {
        'targetGroupIdentifier': targetGroupIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterTargetsResponse;
      return this.apiClient.callApi(
        '/targetgroups/{targetGroupIdentifier}/registertargets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified tags to the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys The tag keys of the tags to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccessLogSubscription operation.
     * @callback module:api/DefaultApi~updateAccessLogSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAccessLogSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified access log subscription.
     * @param {String} accessLogSubscriptionIdentifier The ID or Amazon Resource Name (ARN) of the access log subscription.
     * @param {module:model/UpdateAccessLogSubscriptionRequest} updateAccessLogSubscriptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccessLogSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAccessLogSubscriptionResponse}
     */
    updateAccessLogSubscription(accessLogSubscriptionIdentifier, updateAccessLogSubscriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAccessLogSubscriptionRequest;
      // verify the required parameter 'accessLogSubscriptionIdentifier' is set
      if (accessLogSubscriptionIdentifier === undefined || accessLogSubscriptionIdentifier === null) {
        throw new Error("Missing the required parameter 'accessLogSubscriptionIdentifier' when calling updateAccessLogSubscription");
      }
      // verify the required parameter 'updateAccessLogSubscriptionRequest' is set
      if (updateAccessLogSubscriptionRequest === undefined || updateAccessLogSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'updateAccessLogSubscriptionRequest' when calling updateAccessLogSubscription");
      }

      let pathParams = {
        'accessLogSubscriptionIdentifier': accessLogSubscriptionIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccessLogSubscriptionResponse;
      return this.apiClient.callApi(
        '/accesslogsubscriptions/{accessLogSubscriptionIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListener operation.
     * @callback module:api/DefaultApi~updateListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateListenerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified listener for the specified service.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:model/UpdateListenerRequest} updateListenerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateListenerResponse}
     */
    updateListener(listenerIdentifier, serviceIdentifier, updateListenerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateListenerRequest;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling updateListener");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling updateListener");
      }
      // verify the required parameter 'updateListenerRequest' is set
      if (updateListenerRequest === undefined || updateListenerRequest === null) {
        throw new Error("Missing the required parameter 'updateListenerRequest' when calling updateListener");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateListenerResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/DefaultApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a rule for the listener. You can't modify a default listener rule. To modify a default listener rule, use <code>UpdateListener</code>.
     * @param {String} listenerIdentifier The ID or Amazon Resource Name (ARN) of the listener.
     * @param {String} ruleIdentifier The ID or Amazon Resource Name (ARN) of the rule.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:model/UpdateRuleRequest} updateRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRuleResponse}
     */
    updateRule(listenerIdentifier, ruleIdentifier, serviceIdentifier, updateRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRuleRequest;
      // verify the required parameter 'listenerIdentifier' is set
      if (listenerIdentifier === undefined || listenerIdentifier === null) {
        throw new Error("Missing the required parameter 'listenerIdentifier' when calling updateRule");
      }
      // verify the required parameter 'ruleIdentifier' is set
      if (ruleIdentifier === undefined || ruleIdentifier === null) {
        throw new Error("Missing the required parameter 'ruleIdentifier' when calling updateRule");
      }
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling updateRule");
      }
      // verify the required parameter 'updateRuleRequest' is set
      if (updateRuleRequest === undefined || updateRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateRuleRequest' when calling updateRule");
      }

      let pathParams = {
        'listenerIdentifier': listenerIdentifier,
        'ruleIdentifier': ruleIdentifier,
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRuleResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/DefaultApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified service.
     * @param {String} serviceIdentifier The ID or Amazon Resource Name (ARN) of the service.
     * @param {module:model/UpdateServiceRequest} updateServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceResponse}
     */
    updateService(serviceIdentifier, updateServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceRequest;
      // verify the required parameter 'serviceIdentifier' is set
      if (serviceIdentifier === undefined || serviceIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceIdentifier' when calling updateService");
      }
      // verify the required parameter 'updateServiceRequest' is set
      if (updateServiceRequest === undefined || updateServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceRequest' when calling updateService");
      }

      let pathParams = {
        'serviceIdentifier': serviceIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServiceResponse;
      return this.apiClient.callApi(
        '/services/{serviceIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceNetwork operation.
     * @callback module:api/DefaultApi~updateServiceNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified service network.
     * @param {String} serviceNetworkIdentifier The ID or Amazon Resource Name (ARN) of the service network.
     * @param {module:model/UpdateServiceNetworkRequest} updateServiceNetworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceNetworkResponse}
     */
    updateServiceNetwork(serviceNetworkIdentifier, updateServiceNetworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceNetworkRequest;
      // verify the required parameter 'serviceNetworkIdentifier' is set
      if (serviceNetworkIdentifier === undefined || serviceNetworkIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkIdentifier' when calling updateServiceNetwork");
      }
      // verify the required parameter 'updateServiceNetworkRequest' is set
      if (updateServiceNetworkRequest === undefined || updateServiceNetworkRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceNetworkRequest' when calling updateServiceNetwork");
      }

      let pathParams = {
        'serviceNetworkIdentifier': serviceNetworkIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServiceNetworkResponse;
      return this.apiClient.callApi(
        '/servicenetworks/{serviceNetworkIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceNetworkVpcAssociation operation.
     * @callback module:api/DefaultApi~updateServiceNetworkVpcAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceNetworkVpcAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the service network and VPC association. If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.
     * @param {String} serviceNetworkVpcAssociationIdentifier The ID or Amazon Resource Name (ARN) of the association.
     * @param {module:model/UpdateServiceNetworkVpcAssociationRequest} updateServiceNetworkVpcAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceNetworkVpcAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceNetworkVpcAssociationResponse}
     */
    updateServiceNetworkVpcAssociation(serviceNetworkVpcAssociationIdentifier, updateServiceNetworkVpcAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceNetworkVpcAssociationRequest;
      // verify the required parameter 'serviceNetworkVpcAssociationIdentifier' is set
      if (serviceNetworkVpcAssociationIdentifier === undefined || serviceNetworkVpcAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'serviceNetworkVpcAssociationIdentifier' when calling updateServiceNetworkVpcAssociation");
      }
      // verify the required parameter 'updateServiceNetworkVpcAssociationRequest' is set
      if (updateServiceNetworkVpcAssociationRequest === undefined || updateServiceNetworkVpcAssociationRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceNetworkVpcAssociationRequest' when calling updateServiceNetworkVpcAssociation");
      }

      let pathParams = {
        'serviceNetworkVpcAssociationIdentifier': serviceNetworkVpcAssociationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServiceNetworkVpcAssociationResponse;
      return this.apiClient.callApi(
        '/servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTargetGroup operation.
     * @callback module:api/DefaultApi~updateTargetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified target group.
     * @param {String} targetGroupIdentifier The ID or Amazon Resource Name (ARN) of the target group.
     * @param {module:model/UpdateTargetGroupRequest} updateTargetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTargetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetGroupResponse}
     */
    updateTargetGroup(targetGroupIdentifier, updateTargetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTargetGroupRequest;
      // verify the required parameter 'targetGroupIdentifier' is set
      if (targetGroupIdentifier === undefined || targetGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetGroupIdentifier' when calling updateTargetGroup");
      }
      // verify the required parameter 'updateTargetGroupRequest' is set
      if (updateTargetGroupRequest === undefined || updateTargetGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateTargetGroupRequest' when calling updateTargetGroup");
      }

      let pathParams = {
        'targetGroupIdentifier': targetGroupIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetGroupResponse;
      return this.apiClient.callApi(
        '/targetgroups/{targetGroupIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
