/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateServiceNetworkServiceAssociationRequest model module.
 * @module model/CreateServiceNetworkServiceAssociationRequest
 * @version 2022-11-30
 */
class CreateServiceNetworkServiceAssociationRequest {
    /**
     * Constructs a new <code>CreateServiceNetworkServiceAssociationRequest</code>.
     * @alias module:model/CreateServiceNetworkServiceAssociationRequest
     * @param serviceIdentifier {String} The ID or Amazon Resource Name (ARN) of the service.
     * @param serviceNetworkIdentifier {String} The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.
     */
    constructor(serviceIdentifier, serviceNetworkIdentifier) { 
        
        CreateServiceNetworkServiceAssociationRequest.initialize(this, serviceIdentifier, serviceNetworkIdentifier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceIdentifier, serviceNetworkIdentifier) { 
        obj['serviceIdentifier'] = serviceIdentifier;
        obj['serviceNetworkIdentifier'] = serviceNetworkIdentifier;
    }

    /**
     * Constructs a <code>CreateServiceNetworkServiceAssociationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateServiceNetworkServiceAssociationRequest} obj Optional instance to populate.
     * @return {module:model/CreateServiceNetworkServiceAssociationRequest} The populated <code>CreateServiceNetworkServiceAssociationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateServiceNetworkServiceAssociationRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('serviceIdentifier')) {
                obj['serviceIdentifier'] = ApiClient.convertToType(data['serviceIdentifier'], 'String');
            }
            if (data.hasOwnProperty('serviceNetworkIdentifier')) {
                obj['serviceNetworkIdentifier'] = ApiClient.convertToType(data['serviceNetworkIdentifier'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateServiceNetworkServiceAssociationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateServiceNetworkServiceAssociationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateServiceNetworkServiceAssociationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['serviceIdentifier'] && !(typeof data['serviceIdentifier'] === 'string' || data['serviceIdentifier'] instanceof String)) {
            throw new Error("Expected the field `serviceIdentifier` to be a primitive type in the JSON string but got " + data['serviceIdentifier']);
        }
        // ensure the json data is a string
        if (data['serviceNetworkIdentifier'] && !(typeof data['serviceNetworkIdentifier'] === 'string' || data['serviceNetworkIdentifier'] instanceof String)) {
            throw new Error("Expected the field `serviceNetworkIdentifier` to be a primitive type in the JSON string but got " + data['serviceNetworkIdentifier']);
        }

        return true;
    }


}

CreateServiceNetworkServiceAssociationRequest.RequiredProperties = ["serviceIdentifier", "serviceNetworkIdentifier"];

/**
 * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
 * @member {String} clientToken
 */
CreateServiceNetworkServiceAssociationRequest.prototype['clientToken'] = undefined;

/**
 * The ID or Amazon Resource Name (ARN) of the service.
 * @member {String} serviceIdentifier
 */
CreateServiceNetworkServiceAssociationRequest.prototype['serviceIdentifier'] = undefined;

/**
 * The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.
 * @member {String} serviceNetworkIdentifier
 */
CreateServiceNetworkServiceAssociationRequest.prototype['serviceNetworkIdentifier'] = undefined;

/**
 * The tags for the association.
 * @member {Object.<String, String>} tags
 */
CreateServiceNetworkServiceAssociationRequest.prototype['tags'] = undefined;






export default CreateServiceNetworkServiceAssociationRequest;

