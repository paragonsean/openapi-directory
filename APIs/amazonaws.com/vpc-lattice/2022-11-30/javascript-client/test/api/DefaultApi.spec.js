/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonVpcLattice);
  }
}(this, function(expect, AmazonVpcLattice) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonVpcLattice.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchUpdateRule', function() {
      it('should call batchUpdateRule successfully', function(done) {
        //uncomment below and update the code to test batchUpdateRule
        //instance.batchUpdateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAccessLogSubscription', function() {
      it('should call createAccessLogSubscription successfully', function(done) {
        //uncomment below and update the code to test createAccessLogSubscription
        //instance.createAccessLogSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createListener', function() {
      it('should call createListener successfully', function(done) {
        //uncomment below and update the code to test createListener
        //instance.createListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRule', function() {
      it('should call createRule successfully', function(done) {
        //uncomment below and update the code to test createRule
        //instance.createRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceNetwork', function() {
      it('should call createServiceNetwork successfully', function(done) {
        //uncomment below and update the code to test createServiceNetwork
        //instance.createServiceNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceNetworkServiceAssociation', function() {
      it('should call createServiceNetworkServiceAssociation successfully', function(done) {
        //uncomment below and update the code to test createServiceNetworkServiceAssociation
        //instance.createServiceNetworkServiceAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceNetworkVpcAssociation', function() {
      it('should call createServiceNetworkVpcAssociation successfully', function(done) {
        //uncomment below and update the code to test createServiceNetworkVpcAssociation
        //instance.createServiceNetworkVpcAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTargetGroup', function() {
      it('should call createTargetGroup successfully', function(done) {
        //uncomment below and update the code to test createTargetGroup
        //instance.createTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccessLogSubscription', function() {
      it('should call deleteAccessLogSubscription successfully', function(done) {
        //uncomment below and update the code to test deleteAccessLogSubscription
        //instance.deleteAccessLogSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAuthPolicy', function() {
      it('should call deleteAuthPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteAuthPolicy
        //instance.deleteAuthPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteListener', function() {
      it('should call deleteListener successfully', function(done) {
        //uncomment below and update the code to test deleteListener
        //instance.deleteListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRule', function() {
      it('should call deleteRule successfully', function(done) {
        //uncomment below and update the code to test deleteRule
        //instance.deleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServiceNetwork', function() {
      it('should call deleteServiceNetwork successfully', function(done) {
        //uncomment below and update the code to test deleteServiceNetwork
        //instance.deleteServiceNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServiceNetworkServiceAssociation', function() {
      it('should call deleteServiceNetworkServiceAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteServiceNetworkServiceAssociation
        //instance.deleteServiceNetworkServiceAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServiceNetworkVpcAssociation', function() {
      it('should call deleteServiceNetworkVpcAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteServiceNetworkVpcAssociation
        //instance.deleteServiceNetworkVpcAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTargetGroup', function() {
      it('should call deleteTargetGroup successfully', function(done) {
        //uncomment below and update the code to test deleteTargetGroup
        //instance.deleteTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterTargets', function() {
      it('should call deregisterTargets successfully', function(done) {
        //uncomment below and update the code to test deregisterTargets
        //instance.deregisterTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAccessLogSubscription', function() {
      it('should call getAccessLogSubscription successfully', function(done) {
        //uncomment below and update the code to test getAccessLogSubscription
        //instance.getAccessLogSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthPolicy', function() {
      it('should call getAuthPolicy successfully', function(done) {
        //uncomment below and update the code to test getAuthPolicy
        //instance.getAuthPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListener', function() {
      it('should call getListener successfully', function(done) {
        //uncomment below and update the code to test getListener
        //instance.getListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourcePolicy', function() {
      it('should call getResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test getResourcePolicy
        //instance.getResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRule', function() {
      it('should call getRule successfully', function(done) {
        //uncomment below and update the code to test getRule
        //instance.getRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getService', function() {
      it('should call getService successfully', function(done) {
        //uncomment below and update the code to test getService
        //instance.getService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceNetwork', function() {
      it('should call getServiceNetwork successfully', function(done) {
        //uncomment below and update the code to test getServiceNetwork
        //instance.getServiceNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceNetworkServiceAssociation', function() {
      it('should call getServiceNetworkServiceAssociation successfully', function(done) {
        //uncomment below and update the code to test getServiceNetworkServiceAssociation
        //instance.getServiceNetworkServiceAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceNetworkVpcAssociation', function() {
      it('should call getServiceNetworkVpcAssociation successfully', function(done) {
        //uncomment below and update the code to test getServiceNetworkVpcAssociation
        //instance.getServiceNetworkVpcAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTargetGroup', function() {
      it('should call getTargetGroup successfully', function(done) {
        //uncomment below and update the code to test getTargetGroup
        //instance.getTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccessLogSubscriptions', function() {
      it('should call listAccessLogSubscriptions successfully', function(done) {
        //uncomment below and update the code to test listAccessLogSubscriptions
        //instance.listAccessLogSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listListeners', function() {
      it('should call listListeners successfully', function(done) {
        //uncomment below and update the code to test listListeners
        //instance.listListeners(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRules', function() {
      it('should call listRules successfully', function(done) {
        //uncomment below and update the code to test listRules
        //instance.listRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceNetworkServiceAssociations', function() {
      it('should call listServiceNetworkServiceAssociations successfully', function(done) {
        //uncomment below and update the code to test listServiceNetworkServiceAssociations
        //instance.listServiceNetworkServiceAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceNetworkVpcAssociations', function() {
      it('should call listServiceNetworkVpcAssociations successfully', function(done) {
        //uncomment below and update the code to test listServiceNetworkVpcAssociations
        //instance.listServiceNetworkVpcAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceNetworks', function() {
      it('should call listServiceNetworks successfully', function(done) {
        //uncomment below and update the code to test listServiceNetworks
        //instance.listServiceNetworks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServices', function() {
      it('should call listServices successfully', function(done) {
        //uncomment below and update the code to test listServices
        //instance.listServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTargetGroups', function() {
      it('should call listTargetGroups successfully', function(done) {
        //uncomment below and update the code to test listTargetGroups
        //instance.listTargetGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTargets', function() {
      it('should call listTargets successfully', function(done) {
        //uncomment below and update the code to test listTargets
        //instance.listTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAuthPolicy', function() {
      it('should call putAuthPolicy successfully', function(done) {
        //uncomment below and update the code to test putAuthPolicy
        //instance.putAuthPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerTargets', function() {
      it('should call registerTargets successfully', function(done) {
        //uncomment below and update the code to test registerTargets
        //instance.registerTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccessLogSubscription', function() {
      it('should call updateAccessLogSubscription successfully', function(done) {
        //uncomment below and update the code to test updateAccessLogSubscription
        //instance.updateAccessLogSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateListener', function() {
      it('should call updateListener successfully', function(done) {
        //uncomment below and update the code to test updateListener
        //instance.updateListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRule', function() {
      it('should call updateRule successfully', function(done) {
        //uncomment below and update the code to test updateRule
        //instance.updateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServiceNetwork', function() {
      it('should call updateServiceNetwork successfully', function(done) {
        //uncomment below and update the code to test updateServiceNetwork
        //instance.updateServiceNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServiceNetworkVpcAssociation', function() {
      it('should call updateServiceNetworkVpcAssociation successfully', function(done) {
        //uncomment below and update the code to test updateServiceNetworkVpcAssociation
        //instance.updateServiceNetworkVpcAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTargetGroup', function() {
      it('should call updateTargetGroup successfully', function(done) {
        //uncomment below and update the code to test updateTargetGroup
        //instance.updateTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
