/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsEntry::OAIDnsEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsEntry::OAIDnsEntry() {
    this->initializeModel();
}

OAIDnsEntry::~OAIDnsEntry() {}

void OAIDnsEntry::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;
}

void OAIDnsEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsEntry::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("hostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("hostedZoneId")].isNull() && m_hosted_zone_id_isValid;
}

QString OAIDnsEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("hostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    return obj;
}

QString OAIDnsEntry::getDomainName() const {
    return m_domain_name;
}
void OAIDnsEntry::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDnsEntry::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDnsEntry::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDnsEntry::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIDnsEntry::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIDnsEntry::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIDnsEntry::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

bool OAIDnsEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
