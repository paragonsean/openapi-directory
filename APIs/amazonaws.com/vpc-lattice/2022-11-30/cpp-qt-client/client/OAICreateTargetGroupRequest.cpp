/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTargetGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTargetGroupRequest::OAICreateTargetGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTargetGroupRequest::OAICreateTargetGroupRequest() {
    this->initializeModel();
}

OAICreateTargetGroupRequest::~OAICreateTargetGroupRequest() {}

void OAICreateTargetGroupRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateTargetGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTargetGroupRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateTargetGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTargetGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateTargetGroupRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateTargetGroupRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateTargetGroupRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateTargetGroupRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateTargetGroupResponse_config OAICreateTargetGroupRequest::getConfig() const {
    return m_config;
}
void OAICreateTargetGroupRequest::setConfig(const OAICreateTargetGroupResponse_config &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAICreateTargetGroupRequest::is_config_Set() const{
    return m_config_isSet;
}

bool OAICreateTargetGroupRequest::is_config_Valid() const{
    return m_config_isValid;
}

QString OAICreateTargetGroupRequest::getName() const {
    return m_name;
}
void OAICreateTargetGroupRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTargetGroupRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTargetGroupRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAICreateTargetGroupRequest::getTags() const {
    return m_tags;
}
void OAICreateTargetGroupRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTargetGroupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTargetGroupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITargetGroupType OAICreateTargetGroupRequest::getType() const {
    return m_type;
}
void OAICreateTargetGroupRequest::setType(const OAITargetGroupType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateTargetGroupRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateTargetGroupRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateTargetGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTargetGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
