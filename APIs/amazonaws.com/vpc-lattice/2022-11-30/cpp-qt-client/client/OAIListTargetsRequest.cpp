/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTargetsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTargetsRequest::OAIListTargetsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTargetsRequest::OAIListTargetsRequest() {
    this->initializeModel();
}

OAIListTargetsRequest::~OAIListTargetsRequest() {}

void OAIListTargetsRequest::initializeModel() {

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIListTargetsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTargetsRequest::fromJsonObject(QJsonObject json) {

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAIListTargetsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTargetsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QList OAIListTargetsRequest::getTargets() const {
    return m_targets;
}
void OAIListTargetsRequest::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIListTargetsRequest::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIListTargetsRequest::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIListTargetsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTargetsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
