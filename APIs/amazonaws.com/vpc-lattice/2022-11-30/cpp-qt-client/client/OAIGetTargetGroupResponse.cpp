/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTargetGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTargetGroupResponse::OAIGetTargetGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTargetGroupResponse::OAIGetTargetGroupResponse() {
    this->initializeModel();
}

OAIGetTargetGroupResponse::~OAIGetTargetGroupResponse() {}

void OAIGetTargetGroupResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_arns_isSet = false;
    m_service_arns_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetTargetGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTargetGroupResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_arns_isValid = ::OpenAPI::fromJsonValue(m_service_arns, json[QString("serviceArns")]);
    m_service_arns_isSet = !json[QString("serviceArns")].isNull() && m_service_arns_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetTargetGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTargetGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_failure_code_isSet) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_arns.isSet()) {
        obj.insert(QString("serviceArns"), ::OpenAPI::toJsonValue(m_service_arns));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGetTargetGroupResponse::getArn() const {
    return m_arn;
}
void OAIGetTargetGroupResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetTargetGroupResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetTargetGroupResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIGetTargetGroupResponse_config OAIGetTargetGroupResponse::getConfig() const {
    return m_config;
}
void OAIGetTargetGroupResponse::setConfig(const OAIGetTargetGroupResponse_config &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGetTargetGroupResponse::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGetTargetGroupResponse::is_config_Valid() const{
    return m_config_isValid;
}

QDateTime OAIGetTargetGroupResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetTargetGroupResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetTargetGroupResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetTargetGroupResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetTargetGroupResponse::getFailureCode() const {
    return m_failure_code;
}
void OAIGetTargetGroupResponse::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIGetTargetGroupResponse::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIGetTargetGroupResponse::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIGetTargetGroupResponse::getFailureMessage() const {
    return m_failure_message;
}
void OAIGetTargetGroupResponse::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIGetTargetGroupResponse::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIGetTargetGroupResponse::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

QString OAIGetTargetGroupResponse::getId() const {
    return m_id;
}
void OAIGetTargetGroupResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetTargetGroupResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetTargetGroupResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGetTargetGroupResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetTargetGroupResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetTargetGroupResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetTargetGroupResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetTargetGroupResponse::getName() const {
    return m_name;
}
void OAIGetTargetGroupResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetTargetGroupResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetTargetGroupResponse::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIGetTargetGroupResponse::getServiceArns() const {
    return m_service_arns;
}
void OAIGetTargetGroupResponse::setServiceArns(const QList &service_arns) {
    m_service_arns = service_arns;
    m_service_arns_isSet = true;
}

bool OAIGetTargetGroupResponse::is_service_arns_Set() const{
    return m_service_arns_isSet;
}

bool OAIGetTargetGroupResponse::is_service_arns_Valid() const{
    return m_service_arns_isValid;
}

OAITargetGroupStatus OAIGetTargetGroupResponse::getStatus() const {
    return m_status;
}
void OAIGetTargetGroupResponse::setStatus(const OAITargetGroupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetTargetGroupResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetTargetGroupResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAITargetGroupType OAIGetTargetGroupResponse::getType() const {
    return m_type;
}
void OAIGetTargetGroupResponse::setType(const OAITargetGroupType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetTargetGroupResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetTargetGroupResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetTargetGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTargetGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
