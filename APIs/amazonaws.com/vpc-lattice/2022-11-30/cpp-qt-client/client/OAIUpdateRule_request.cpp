/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRule_request::OAIUpdateRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRule_request::OAIUpdateRule_request() {
    this->initializeModel();
}

OAIUpdateRule_request::~OAIUpdateRule_request() {}

void OAIUpdateRule_request::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIUpdateRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRule_request::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIUpdateRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAICreateRule_request_action OAIUpdateRule_request::getAction() const {
    return m_action;
}
void OAIUpdateRule_request::setAction(const OAICreateRule_request_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateRule_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateRule_request::is_action_Valid() const{
    return m_action_isValid;
}

OAICreateRule_request_match OAIUpdateRule_request::getMatch() const {
    return m_match;
}
void OAIUpdateRule_request::setMatch(const OAICreateRule_request_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIUpdateRule_request::is_match_Set() const{
    return m_match_isSet;
}

bool OAIUpdateRule_request::is_match_Valid() const{
    return m_match_isValid;
}

qint32 OAIUpdateRule_request::getPriority() const {
    return m_priority;
}
void OAIUpdateRule_request::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIUpdateRule_request::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIUpdateRule_request::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIUpdateRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
