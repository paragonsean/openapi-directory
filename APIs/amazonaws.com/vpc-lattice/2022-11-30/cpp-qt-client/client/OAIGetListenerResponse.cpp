/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetListenerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetListenerResponse::OAIGetListenerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetListenerResponse::OAIGetListenerResponse() {
    this->initializeModel();
}

OAIGetListenerResponse::~OAIGetListenerResponse() {}

void OAIGetListenerResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_action_isSet = false;
    m_default_action_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_service_arn_isSet = false;
    m_service_arn_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;
}

void OAIGetListenerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetListenerResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_default_action_isValid = ::OpenAPI::fromJsonValue(m_default_action, json[QString("defaultAction")]);
    m_default_action_isSet = !json[QString("defaultAction")].isNull() && m_default_action_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_service_arn_isValid = ::OpenAPI::fromJsonValue(m_service_arn, json[QString("serviceArn")]);
    m_service_arn_isSet = !json[QString("serviceArn")].isNull() && m_service_arn_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;
}

QString OAIGetListenerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetListenerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_action.isSet()) {
        obj.insert(QString("defaultAction"), ::OpenAPI::toJsonValue(m_default_action));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_service_arn_isSet) {
        obj.insert(QString("serviceArn"), ::OpenAPI::toJsonValue(m_service_arn));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    return obj;
}

QString OAIGetListenerResponse::getArn() const {
    return m_arn;
}
void OAIGetListenerResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetListenerResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetListenerResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetListenerResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetListenerResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetListenerResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetListenerResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIGetListenerResponse_defaultAction OAIGetListenerResponse::getDefaultAction() const {
    return m_default_action;
}
void OAIGetListenerResponse::setDefaultAction(const OAIGetListenerResponse_defaultAction &default_action) {
    m_default_action = default_action;
    m_default_action_isSet = true;
}

bool OAIGetListenerResponse::is_default_action_Set() const{
    return m_default_action_isSet;
}

bool OAIGetListenerResponse::is_default_action_Valid() const{
    return m_default_action_isValid;
}

QString OAIGetListenerResponse::getId() const {
    return m_id;
}
void OAIGetListenerResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetListenerResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetListenerResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGetListenerResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetListenerResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetListenerResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetListenerResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetListenerResponse::getName() const {
    return m_name;
}
void OAIGetListenerResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetListenerResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetListenerResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetListenerResponse::getPort() const {
    return m_port;
}
void OAIGetListenerResponse::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGetListenerResponse::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGetListenerResponse::is_port_Valid() const{
    return m_port_isValid;
}

OAIListenerProtocol OAIGetListenerResponse::getProtocol() const {
    return m_protocol;
}
void OAIGetListenerResponse::setProtocol(const OAIListenerProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIGetListenerResponse::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIGetListenerResponse::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIGetListenerResponse::getServiceArn() const {
    return m_service_arn;
}
void OAIGetListenerResponse::setServiceArn(const QString &service_arn) {
    m_service_arn = service_arn;
    m_service_arn_isSet = true;
}

bool OAIGetListenerResponse::is_service_arn_Set() const{
    return m_service_arn_isSet;
}

bool OAIGetListenerResponse::is_service_arn_Valid() const{
    return m_service_arn_isValid;
}

QString OAIGetListenerResponse::getServiceId() const {
    return m_service_id;
}
void OAIGetListenerResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIGetListenerResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIGetListenerResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAIGetListenerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetListenerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
