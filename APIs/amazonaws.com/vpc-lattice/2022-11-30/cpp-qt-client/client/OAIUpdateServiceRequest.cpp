/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceRequest::OAIUpdateServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceRequest::OAIUpdateServiceRequest() {
    this->initializeModel();
}

OAIUpdateServiceRequest::~OAIUpdateServiceRequest() {}

void OAIUpdateServiceRequest::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;
}

void OAIUpdateServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceRequest::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("certificateArn")]);
    m_certificate_arn_isSet = !json[QString("certificateArn")].isNull() && m_certificate_arn_isValid;
}

QString OAIUpdateServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("certificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    return obj;
}

OAIAuthType OAIUpdateServiceRequest::getAuthType() const {
    return m_auth_type;
}
void OAIUpdateServiceRequest::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIUpdateServiceRequest::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIUpdateServiceRequest::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIUpdateServiceRequest::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIUpdateServiceRequest::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIUpdateServiceRequest::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIUpdateServiceRequest::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

bool OAIUpdateServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
