/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateListener_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateListener_request::OAIUpdateListener_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateListener_request::OAIUpdateListener_request() {
    this->initializeModel();
}

OAIUpdateListener_request::~OAIUpdateListener_request() {}

void OAIUpdateListener_request::initializeModel() {

    m_default_action_isSet = false;
    m_default_action_isValid = false;
}

void OAIUpdateListener_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateListener_request::fromJsonObject(QJsonObject json) {

    m_default_action_isValid = ::OpenAPI::fromJsonValue(m_default_action, json[QString("defaultAction")]);
    m_default_action_isSet = !json[QString("defaultAction")].isNull() && m_default_action_isValid;
}

QString OAIUpdateListener_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateListener_request::asJsonObject() const {
    QJsonObject obj;
    if (m_default_action.isSet()) {
        obj.insert(QString("defaultAction"), ::OpenAPI::toJsonValue(m_default_action));
    }
    return obj;
}

OAICreateRule_request_action OAIUpdateListener_request::getDefaultAction() const {
    return m_default_action;
}
void OAIUpdateListener_request::setDefaultAction(const OAICreateRule_request_action &default_action) {
    m_default_action = default_action;
    m_default_action_isSet = true;
}

bool OAIUpdateListener_request::is_default_action_Set() const{
    return m_default_action_isSet;
}

bool OAIUpdateListener_request::is_default_action_Valid() const{
    return m_default_action_isValid;
}

bool OAIUpdateListener_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateListener_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_action_isValid && true;
}

} // namespace OpenAPI
