/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAuthPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAuthPolicyResponse::OAIPutAuthPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAuthPolicyResponse::OAIPutAuthPolicyResponse() {
    this->initializeModel();
}

OAIPutAuthPolicyResponse::~OAIPutAuthPolicyResponse() {}

void OAIPutAuthPolicyResponse::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPutAuthPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAuthPolicyResponse::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPutAuthPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAuthPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIPutAuthPolicyResponse::getPolicy() const {
    return m_policy;
}
void OAIPutAuthPolicyResponse::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutAuthPolicyResponse::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutAuthPolicyResponse::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIAuthPolicyState OAIPutAuthPolicyResponse::getState() const {
    return m_state;
}
void OAIPutAuthPolicyResponse::setState(const OAIAuthPolicyState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPutAuthPolicyResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPutAuthPolicyResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPutAuthPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAuthPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
