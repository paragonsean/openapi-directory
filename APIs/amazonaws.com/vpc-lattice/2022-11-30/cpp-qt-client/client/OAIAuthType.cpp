/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthType::OAIAuthType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthType::OAIAuthType() {
    this->initializeModel();
}

OAIAuthType::~OAIAuthType() {}

void OAIAuthType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAuthType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAuthType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthType::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_IAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthType::AWS_IAM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAuthType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAuthType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAuthType::NONE:
            val = "NONE";
            break;
        case eOAIAuthType::AWS_IAM:
            val = "AWS_IAM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAuthType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAuthType::eOAIAuthType OAIAuthType::getValue() const {
    return m_value;
}

void OAIAuthType::setValue(const OAIAuthType::eOAIAuthType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAuthType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAuthType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
