/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTargetGroupResponse_config.h
 *
 * 
 */

#ifndef OAIGetTargetGroupResponse_config_H
#define OAIGetTargetGroupResponse_config_H

#include <QJsonObject>

#include "OAICreateTargetGroup_request_config_healthCheck.h"
#include "OAIIpAddressType.h"
#include "OAITargetGroupProtocol.h"
#include "OAITargetGroupProtocolVersion.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateTargetGroup_request_config_healthCheck;

class OAIGetTargetGroupResponse_config : public OAIObject {
public:
    OAIGetTargetGroupResponse_config();
    OAIGetTargetGroupResponse_config(QString json);
    ~OAIGetTargetGroupResponse_config() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateTargetGroup_request_config_healthCheck getHealthCheck() const;
    void setHealthCheck(const OAICreateTargetGroup_request_config_healthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    OAIIpAddressType getIpAddressType() const;
    void setIpAddressType(const OAIIpAddressType &ip_address_type);
    bool is_ip_address_type_Set() const;
    bool is_ip_address_type_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAITargetGroupProtocol getProtocol() const;
    void setProtocol(const OAITargetGroupProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    OAITargetGroupProtocolVersion getProtocolVersion() const;
    void setProtocolVersion(const OAITargetGroupProtocolVersion &protocol_version);
    bool is_protocol_version_Set() const;
    bool is_protocol_version_Valid() const;

    QString getVpcIdentifier() const;
    void setVpcIdentifier(const QString &vpc_identifier);
    bool is_vpc_identifier_Set() const;
    bool is_vpc_identifier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateTargetGroup_request_config_healthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    OAIIpAddressType m_ip_address_type;
    bool m_ip_address_type_isSet;
    bool m_ip_address_type_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAITargetGroupProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    OAITargetGroupProtocolVersion m_protocol_version;
    bool m_protocol_version_isSet;
    bool m_protocol_version_isValid;

    QString m_vpc_identifier;
    bool m_vpc_identifier_isSet;
    bool m_vpc_identifier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTargetGroupResponse_config)

#endif // OAIGetTargetGroupResponse_config_H
