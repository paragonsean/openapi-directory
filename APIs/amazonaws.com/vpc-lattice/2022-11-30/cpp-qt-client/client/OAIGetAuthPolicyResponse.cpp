/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAuthPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAuthPolicyResponse::OAIGetAuthPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAuthPolicyResponse::OAIGetAuthPolicyResponse() {
    this->initializeModel();
}

OAIGetAuthPolicyResponse::~OAIGetAuthPolicyResponse() {}

void OAIGetAuthPolicyResponse::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGetAuthPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAuthPolicyResponse::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGetAuthPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAuthPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIGetAuthPolicyResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetAuthPolicyResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetAuthPolicyResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetAuthPolicyResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetAuthPolicyResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetAuthPolicyResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetAuthPolicyResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetAuthPolicyResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetAuthPolicyResponse::getPolicy() const {
    return m_policy;
}
void OAIGetAuthPolicyResponse::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIGetAuthPolicyResponse::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIGetAuthPolicyResponse::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIAuthPolicyState OAIGetAuthPolicyResponse::getState() const {
    return m_state;
}
void OAIGetAuthPolicyResponse::setState(const OAIAuthPolicyState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetAuthPolicyResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetAuthPolicyResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGetAuthPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAuthPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
