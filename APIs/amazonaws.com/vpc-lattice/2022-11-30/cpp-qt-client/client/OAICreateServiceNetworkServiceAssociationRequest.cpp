/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceNetworkServiceAssociationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceNetworkServiceAssociationRequest::OAICreateServiceNetworkServiceAssociationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceNetworkServiceAssociationRequest::OAICreateServiceNetworkServiceAssociationRequest() {
    this->initializeModel();
}

OAICreateServiceNetworkServiceAssociationRequest::~OAICreateServiceNetworkServiceAssociationRequest() {}

void OAICreateServiceNetworkServiceAssociationRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_service_identifier_isSet = false;
    m_service_identifier_isValid = false;

    m_service_network_identifier_isSet = false;
    m_service_network_identifier_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateServiceNetworkServiceAssociationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceNetworkServiceAssociationRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_service_identifier_isValid = ::OpenAPI::fromJsonValue(m_service_identifier, json[QString("serviceIdentifier")]);
    m_service_identifier_isSet = !json[QString("serviceIdentifier")].isNull() && m_service_identifier_isValid;

    m_service_network_identifier_isValid = ::OpenAPI::fromJsonValue(m_service_network_identifier, json[QString("serviceNetworkIdentifier")]);
    m_service_network_identifier_isSet = !json[QString("serviceNetworkIdentifier")].isNull() && m_service_network_identifier_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateServiceNetworkServiceAssociationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceNetworkServiceAssociationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_service_identifier_isSet) {
        obj.insert(QString("serviceIdentifier"), ::OpenAPI::toJsonValue(m_service_identifier));
    }
    if (m_service_network_identifier_isSet) {
        obj.insert(QString("serviceNetworkIdentifier"), ::OpenAPI::toJsonValue(m_service_network_identifier));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateServiceNetworkServiceAssociationRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateServiceNetworkServiceAssociationRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateServiceNetworkServiceAssociationRequest::getServiceIdentifier() const {
    return m_service_identifier;
}
void OAICreateServiceNetworkServiceAssociationRequest::setServiceIdentifier(const QString &service_identifier) {
    m_service_identifier = service_identifier;
    m_service_identifier_isSet = true;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_service_identifier_Set() const{
    return m_service_identifier_isSet;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_service_identifier_Valid() const{
    return m_service_identifier_isValid;
}

QString OAICreateServiceNetworkServiceAssociationRequest::getServiceNetworkIdentifier() const {
    return m_service_network_identifier;
}
void OAICreateServiceNetworkServiceAssociationRequest::setServiceNetworkIdentifier(const QString &service_network_identifier) {
    m_service_network_identifier = service_network_identifier;
    m_service_network_identifier_isSet = true;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_service_network_identifier_Set() const{
    return m_service_network_identifier_isSet;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_service_network_identifier_Valid() const{
    return m_service_network_identifier_isValid;
}

QMap OAICreateServiceNetworkServiceAssociationRequest::getTags() const {
    return m_tags;
}
void OAICreateServiceNetworkServiceAssociationRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateServiceNetworkServiceAssociationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateServiceNetworkServiceAssociationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_network_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceNetworkServiceAssociationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_identifier_isValid && m_service_network_identifier_isValid && true;
}

} // namespace OpenAPI
