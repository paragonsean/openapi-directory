/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRuleResponse::OAIUpdateRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRuleResponse::OAIUpdateRuleResponse() {
    this->initializeModel();
}

OAIUpdateRuleResponse::~OAIUpdateRuleResponse() {}

void OAIUpdateRuleResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIUpdateRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRuleResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIUpdateRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAIUpdateRuleResponse_action OAIUpdateRuleResponse::getAction() const {
    return m_action;
}
void OAIUpdateRuleResponse::setAction(const OAIUpdateRuleResponse_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateRuleResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateRuleResponse::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIUpdateRuleResponse::getArn() const {
    return m_arn;
}
void OAIUpdateRuleResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateRuleResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateRuleResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateRuleResponse::getId() const {
    return m_id;
}
void OAIUpdateRuleResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateRuleResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateRuleResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUpdateRuleResponse::getIsDefault() const {
    return m_is_default;
}
void OAIUpdateRuleResponse::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIUpdateRuleResponse::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIUpdateRuleResponse::is_is_default_Valid() const{
    return m_is_default_isValid;
}

OAIRuleUpdate_match OAIUpdateRuleResponse::getMatch() const {
    return m_match;
}
void OAIUpdateRuleResponse::setMatch(const OAIRuleUpdate_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIUpdateRuleResponse::is_match_Set() const{
    return m_match_isSet;
}

bool OAIUpdateRuleResponse::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIUpdateRuleResponse::getName() const {
    return m_name;
}
void OAIUpdateRuleResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateRuleResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateRuleResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIUpdateRuleResponse::getPriority() const {
    return m_priority;
}
void OAIUpdateRuleResponse::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIUpdateRuleResponse::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIUpdateRuleResponse::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIUpdateRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
