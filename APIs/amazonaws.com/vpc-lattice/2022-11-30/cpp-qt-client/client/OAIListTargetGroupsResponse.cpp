/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTargetGroupsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTargetGroupsResponse::OAIListTargetGroupsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTargetGroupsResponse::OAIListTargetGroupsResponse() {
    this->initializeModel();
}

OAIListTargetGroupsResponse::~OAIListTargetGroupsResponse() {}

void OAIListTargetGroupsResponse::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTargetGroupsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTargetGroupsResponse::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTargetGroupsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTargetGroupsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListTargetGroupsResponse::getItems() const {
    return m_items;
}
void OAIListTargetGroupsResponse::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIListTargetGroupsResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIListTargetGroupsResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIListTargetGroupsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListTargetGroupsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTargetGroupsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTargetGroupsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTargetGroupsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTargetGroupsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
