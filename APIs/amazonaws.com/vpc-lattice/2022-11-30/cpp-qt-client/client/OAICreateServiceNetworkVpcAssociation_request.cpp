/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceNetworkVpcAssociation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceNetworkVpcAssociation_request::OAICreateServiceNetworkVpcAssociation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceNetworkVpcAssociation_request::OAICreateServiceNetworkVpcAssociation_request() {
    this->initializeModel();
}

OAICreateServiceNetworkVpcAssociation_request::~OAICreateServiceNetworkVpcAssociation_request() {}

void OAICreateServiceNetworkVpcAssociation_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_service_network_identifier_isSet = false;
    m_service_network_identifier_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_identifier_isSet = false;
    m_vpc_identifier_isValid = false;
}

void OAICreateServiceNetworkVpcAssociation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceNetworkVpcAssociation_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_service_network_identifier_isValid = ::OpenAPI::fromJsonValue(m_service_network_identifier, json[QString("serviceNetworkIdentifier")]);
    m_service_network_identifier_isSet = !json[QString("serviceNetworkIdentifier")].isNull() && m_service_network_identifier_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_identifier_isValid = ::OpenAPI::fromJsonValue(m_vpc_identifier, json[QString("vpcIdentifier")]);
    m_vpc_identifier_isSet = !json[QString("vpcIdentifier")].isNull() && m_vpc_identifier_isValid;
}

QString OAICreateServiceNetworkVpcAssociation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceNetworkVpcAssociation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_security_group_ids.size() > 0) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_service_network_identifier_isSet) {
        obj.insert(QString("serviceNetworkIdentifier"), ::OpenAPI::toJsonValue(m_service_network_identifier));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_identifier_isSet) {
        obj.insert(QString("vpcIdentifier"), ::OpenAPI::toJsonValue(m_vpc_identifier));
    }
    return obj;
}

QString OAICreateServiceNetworkVpcAssociation_request::getClientToken() const {
    return m_client_token;
}
void OAICreateServiceNetworkVpcAssociation_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAICreateServiceNetworkVpcAssociation_request::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateServiceNetworkVpcAssociation_request::setSecurityGroupIds(const QList<QString> &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAICreateServiceNetworkVpcAssociation_request::getServiceNetworkIdentifier() const {
    return m_service_network_identifier;
}
void OAICreateServiceNetworkVpcAssociation_request::setServiceNetworkIdentifier(const QString &service_network_identifier) {
    m_service_network_identifier = service_network_identifier;
    m_service_network_identifier_isSet = true;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_service_network_identifier_Set() const{
    return m_service_network_identifier_isSet;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_service_network_identifier_Valid() const{
    return m_service_network_identifier_isValid;
}

QMap<QString, QString> OAICreateServiceNetworkVpcAssociation_request::getTags() const {
    return m_tags;
}
void OAICreateServiceNetworkVpcAssociation_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateServiceNetworkVpcAssociation_request::getVpcIdentifier() const {
    return m_vpc_identifier;
}
void OAICreateServiceNetworkVpcAssociation_request::setVpcIdentifier(const QString &vpc_identifier) {
    m_vpc_identifier = vpc_identifier;
    m_vpc_identifier_isSet = true;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_vpc_identifier_Set() const{
    return m_vpc_identifier_isSet;
}

bool OAICreateServiceNetworkVpcAssociation_request::is_vpc_identifier_Valid() const{
    return m_vpc_identifier_isValid;
}

bool OAICreateServiceNetworkVpcAssociation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_network_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceNetworkVpcAssociation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_network_identifier_isValid && m_vpc_identifier_isValid && true;
}

} // namespace OpenAPI
