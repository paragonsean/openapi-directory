/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRule_request_action_forward.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRule_request_action_forward::OAICreateRule_request_action_forward(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRule_request_action_forward::OAICreateRule_request_action_forward() {
    this->initializeModel();
}

OAICreateRule_request_action_forward::~OAICreateRule_request_action_forward() {}

void OAICreateRule_request_action_forward::initializeModel() {

    m_target_groups_isSet = false;
    m_target_groups_isValid = false;
}

void OAICreateRule_request_action_forward::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRule_request_action_forward::fromJsonObject(QJsonObject json) {

    m_target_groups_isValid = ::OpenAPI::fromJsonValue(m_target_groups, json[QString("targetGroups")]);
    m_target_groups_isSet = !json[QString("targetGroups")].isNull() && m_target_groups_isValid;
}

QString OAICreateRule_request_action_forward::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRule_request_action_forward::asJsonObject() const {
    QJsonObject obj;
    if (m_target_groups.isSet()) {
        obj.insert(QString("targetGroups"), ::OpenAPI::toJsonValue(m_target_groups));
    }
    return obj;
}

QList OAICreateRule_request_action_forward::getTargetGroups() const {
    return m_target_groups;
}
void OAICreateRule_request_action_forward::setTargetGroups(const QList &target_groups) {
    m_target_groups = target_groups;
    m_target_groups_isSet = true;
}

bool OAICreateRule_request_action_forward::is_target_groups_Set() const{
    return m_target_groups_isSet;
}

bool OAICreateRule_request_action_forward::is_target_groups_Valid() const{
    return m_target_groups_isValid;
}

bool OAICreateRule_request_action_forward::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRule_request_action_forward::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_groups_isValid && true;
}

} // namespace OpenAPI
