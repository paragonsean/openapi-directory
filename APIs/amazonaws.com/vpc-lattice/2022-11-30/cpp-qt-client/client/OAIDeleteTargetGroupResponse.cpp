/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteTargetGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteTargetGroupResponse::OAIDeleteTargetGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteTargetGroupResponse::OAIDeleteTargetGroupResponse() {
    this->initializeModel();
}

OAIDeleteTargetGroupResponse::~OAIDeleteTargetGroupResponse() {}

void OAIDeleteTargetGroupResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeleteTargetGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteTargetGroupResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDeleteTargetGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteTargetGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDeleteTargetGroupResponse::getArn() const {
    return m_arn;
}
void OAIDeleteTargetGroupResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteTargetGroupResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteTargetGroupResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeleteTargetGroupResponse::getId() const {
    return m_id;
}
void OAIDeleteTargetGroupResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeleteTargetGroupResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeleteTargetGroupResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAITargetGroupStatus OAIDeleteTargetGroupResponse::getStatus() const {
    return m_status;
}
void OAIDeleteTargetGroupResponse::setStatus(const OAITargetGroupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteTargetGroupResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteTargetGroupResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeleteTargetGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteTargetGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
