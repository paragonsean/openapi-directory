/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAuthPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAuthPolicy_request::OAIPutAuthPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAuthPolicy_request::OAIPutAuthPolicy_request() {
    this->initializeModel();
}

OAIPutAuthPolicy_request::~OAIPutAuthPolicy_request() {}

void OAIPutAuthPolicy_request::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPutAuthPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAuthPolicy_request::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIPutAuthPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAuthPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPutAuthPolicy_request::getPolicy() const {
    return m_policy;
}
void OAIPutAuthPolicy_request::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutAuthPolicy_request::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutAuthPolicy_request::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutAuthPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAuthPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
