/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetGroupProtocolVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetGroupProtocolVersion::OAITargetGroupProtocolVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetGroupProtocolVersion::OAITargetGroupProtocolVersion() {
    this->initializeModel();
}

OAITargetGroupProtocolVersion::~OAITargetGroupProtocolVersion() {}

void OAITargetGroupProtocolVersion::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetGroupProtocolVersion::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetGroupProtocolVersion::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HTTP1", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetGroupProtocolVersion::HTTP1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HTTP2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetGroupProtocolVersion::HTTP2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GRPC", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetGroupProtocolVersion::GRPC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetGroupProtocolVersion::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetGroupProtocolVersion::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetGroupProtocolVersion::HTTP1:
            val = "HTTP1";
            break;
        case eOAITargetGroupProtocolVersion::HTTP2:
            val = "HTTP2";
            break;
        case eOAITargetGroupProtocolVersion::GRPC:
            val = "GRPC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetGroupProtocolVersion::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetGroupProtocolVersion::eOAITargetGroupProtocolVersion OAITargetGroupProtocolVersion::getValue() const {
    return m_value;
}

void OAITargetGroupProtocolVersion::setValue(const OAITargetGroupProtocolVersion::eOAITargetGroupProtocolVersion& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetGroupProtocolVersion::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetGroupProtocolVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
