/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRuleResponse::OAICreateRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRuleResponse::OAICreateRuleResponse() {
    this->initializeModel();
}

OAICreateRuleResponse::~OAICreateRuleResponse() {}

void OAICreateRuleResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAICreateRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRuleResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAICreateRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAICreateRuleResponse_action OAICreateRuleResponse::getAction() const {
    return m_action;
}
void OAICreateRuleResponse::setAction(const OAICreateRuleResponse_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateRuleResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateRuleResponse::is_action_Valid() const{
    return m_action_isValid;
}

QString OAICreateRuleResponse::getArn() const {
    return m_arn;
}
void OAICreateRuleResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateRuleResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateRuleResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateRuleResponse::getId() const {
    return m_id;
}
void OAICreateRuleResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateRuleResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateRuleResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAICreateRuleResponse_match OAICreateRuleResponse::getMatch() const {
    return m_match;
}
void OAICreateRuleResponse::setMatch(const OAICreateRuleResponse_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAICreateRuleResponse::is_match_Set() const{
    return m_match_isSet;
}

bool OAICreateRuleResponse::is_match_Valid() const{
    return m_match_isValid;
}

QString OAICreateRuleResponse::getName() const {
    return m_name;
}
void OAICreateRuleResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRuleResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRuleResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateRuleResponse::getPriority() const {
    return m_priority;
}
void OAICreateRuleResponse::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateRuleResponse::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateRuleResponse::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAICreateRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
