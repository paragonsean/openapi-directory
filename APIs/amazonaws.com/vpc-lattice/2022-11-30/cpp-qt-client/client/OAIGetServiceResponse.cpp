/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceResponse::OAIGetServiceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceResponse::OAIGetServiceResponse() {
    this->initializeModel();
}

OAIGetServiceResponse::~OAIGetServiceResponse() {}

void OAIGetServiceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_domain_name_isSet = false;
    m_custom_domain_name_isValid = false;

    m_dns_entry_isSet = false;
    m_dns_entry_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetServiceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("certificateArn")]);
    m_certificate_arn_isSet = !json[QString("certificateArn")].isNull() && m_certificate_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_custom_domain_name_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_name, json[QString("customDomainName")]);
    m_custom_domain_name_isSet = !json[QString("customDomainName")].isNull() && m_custom_domain_name_isValid;

    m_dns_entry_isValid = ::OpenAPI::fromJsonValue(m_dns_entry, json[QString("dnsEntry")]);
    m_dns_entry_isSet = !json[QString("dnsEntry")].isNull() && m_dns_entry_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetServiceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("certificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_domain_name_isSet) {
        obj.insert(QString("customDomainName"), ::OpenAPI::toJsonValue(m_custom_domain_name));
    }
    if (m_dns_entry.isSet()) {
        obj.insert(QString("dnsEntry"), ::OpenAPI::toJsonValue(m_dns_entry));
    }
    if (m_failure_code_isSet) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGetServiceResponse::getArn() const {
    return m_arn;
}
void OAIGetServiceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetServiceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetServiceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAuthType OAIGetServiceResponse::getAuthType() const {
    return m_auth_type;
}
void OAIGetServiceResponse::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIGetServiceResponse::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIGetServiceResponse::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIGetServiceResponse::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIGetServiceResponse::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIGetServiceResponse::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIGetServiceResponse::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QDateTime OAIGetServiceResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetServiceResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetServiceResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetServiceResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetServiceResponse::getCustomDomainName() const {
    return m_custom_domain_name;
}
void OAIGetServiceResponse::setCustomDomainName(const QString &custom_domain_name) {
    m_custom_domain_name = custom_domain_name;
    m_custom_domain_name_isSet = true;
}

bool OAIGetServiceResponse::is_custom_domain_name_Set() const{
    return m_custom_domain_name_isSet;
}

bool OAIGetServiceResponse::is_custom_domain_name_Valid() const{
    return m_custom_domain_name_isValid;
}

OAICreateServiceNetworkServiceAssociationResponse_dnsEntry OAIGetServiceResponse::getDnsEntry() const {
    return m_dns_entry;
}
void OAIGetServiceResponse::setDnsEntry(const OAICreateServiceNetworkServiceAssociationResponse_dnsEntry &dns_entry) {
    m_dns_entry = dns_entry;
    m_dns_entry_isSet = true;
}

bool OAIGetServiceResponse::is_dns_entry_Set() const{
    return m_dns_entry_isSet;
}

bool OAIGetServiceResponse::is_dns_entry_Valid() const{
    return m_dns_entry_isValid;
}

QString OAIGetServiceResponse::getFailureCode() const {
    return m_failure_code;
}
void OAIGetServiceResponse::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIGetServiceResponse::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIGetServiceResponse::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIGetServiceResponse::getFailureMessage() const {
    return m_failure_message;
}
void OAIGetServiceResponse::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIGetServiceResponse::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIGetServiceResponse::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

QString OAIGetServiceResponse::getId() const {
    return m_id;
}
void OAIGetServiceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetServiceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetServiceResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGetServiceResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetServiceResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetServiceResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetServiceResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetServiceResponse::getName() const {
    return m_name;
}
void OAIGetServiceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetServiceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetServiceResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceStatus OAIGetServiceResponse::getStatus() const {
    return m_status;
}
void OAIGetServiceResponse::setStatus(const OAIServiceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetServiceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetServiceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetServiceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_entry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
