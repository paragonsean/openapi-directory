/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetStatus::OAITargetStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetStatus::OAITargetStatus() {
    this->initializeModel();
}

OAITargetStatus::~OAITargetStatus() {}

void OAITargetStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DRAINING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetStatus::DRAINING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetStatus::UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEALTHY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetStatus::HEALTHY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNHEALTHY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetStatus::UNHEALTHY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INITIAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetStatus::INITIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetStatus::UNUSED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetStatus::DRAINING:
            val = "DRAINING";
            break;
        case eOAITargetStatus::UNAVAILABLE:
            val = "UNAVAILABLE";
            break;
        case eOAITargetStatus::HEALTHY:
            val = "HEALTHY";
            break;
        case eOAITargetStatus::UNHEALTHY:
            val = "UNHEALTHY";
            break;
        case eOAITargetStatus::INITIAL:
            val = "INITIAL";
            break;
        case eOAITargetStatus::UNUSED:
            val = "UNUSED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetStatus::eOAITargetStatus OAITargetStatus::getValue() const {
    return m_value;
}

void OAITargetStatus::setValue(const OAITargetStatus::eOAITargetStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
