/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedResponseAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedResponseAction::OAIFixedResponseAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedResponseAction::OAIFixedResponseAction() {
    this->initializeModel();
}

OAIFixedResponseAction::~OAIFixedResponseAction() {}

void OAIFixedResponseAction::initializeModel() {

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIFixedResponseAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedResponseAction::fromJsonObject(QJsonObject json) {

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIFixedResponseAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedResponseAction::asJsonObject() const {
    QJsonObject obj;
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

qint32 OAIFixedResponseAction::getStatusCode() const {
    return m_status_code;
}
void OAIFixedResponseAction::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIFixedResponseAction::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIFixedResponseAction::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIFixedResponseAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedResponseAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_code_isValid && true;
}

} // namespace OpenAPI
