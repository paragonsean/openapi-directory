/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeaderMatch_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeaderMatch_match::OAIHeaderMatch_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeaderMatch_match::OAIHeaderMatch_match() {
    this->initializeModel();
}

OAIHeaderMatch_match::~OAIHeaderMatch_match() {}

void OAIHeaderMatch_match::initializeModel() {

    m_contains_isSet = false;
    m_contains_isValid = false;

    m_exact_isSet = false;
    m_exact_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIHeaderMatch_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeaderMatch_match::fromJsonObject(QJsonObject json) {

    m_contains_isValid = ::OpenAPI::fromJsonValue(m_contains, json[QString("contains")]);
    m_contains_isSet = !json[QString("contains")].isNull() && m_contains_isValid;

    m_exact_isValid = ::OpenAPI::fromJsonValue(m_exact, json[QString("exact")]);
    m_exact_isSet = !json[QString("exact")].isNull() && m_exact_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIHeaderMatch_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeaderMatch_match::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_isSet) {
        obj.insert(QString("contains"), ::OpenAPI::toJsonValue(m_contains));
    }
    if (m_exact_isSet) {
        obj.insert(QString("exact"), ::OpenAPI::toJsonValue(m_exact));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIHeaderMatch_match::getContains() const {
    return m_contains;
}
void OAIHeaderMatch_match::setContains(const QString &contains) {
    m_contains = contains;
    m_contains_isSet = true;
}

bool OAIHeaderMatch_match::is_contains_Set() const{
    return m_contains_isSet;
}

bool OAIHeaderMatch_match::is_contains_Valid() const{
    return m_contains_isValid;
}

QString OAIHeaderMatch_match::getExact() const {
    return m_exact;
}
void OAIHeaderMatch_match::setExact(const QString &exact) {
    m_exact = exact;
    m_exact_isSet = true;
}

bool OAIHeaderMatch_match::is_exact_Set() const{
    return m_exact_isSet;
}

bool OAIHeaderMatch_match::is_exact_Valid() const{
    return m_exact_isValid;
}

QString OAIHeaderMatch_match::getPrefix() const {
    return m_prefix;
}
void OAIHeaderMatch_match::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIHeaderMatch_match::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIHeaderMatch_match::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIHeaderMatch_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeaderMatch_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
