/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateListener_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateListener_request::OAICreateListener_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateListener_request::OAICreateListener_request() {
    this->initializeModel();
}

OAICreateListener_request::~OAICreateListener_request() {}

void OAICreateListener_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_default_action_isSet = false;
    m_default_action_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateListener_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateListener_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_default_action_isValid = ::OpenAPI::fromJsonValue(m_default_action, json[QString("defaultAction")]);
    m_default_action_isSet = !json[QString("defaultAction")].isNull() && m_default_action_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateListener_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateListener_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_default_action.isSet()) {
        obj.insert(QString("defaultAction"), ::OpenAPI::toJsonValue(m_default_action));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateListener_request::getClientToken() const {
    return m_client_token;
}
void OAICreateListener_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateListener_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateListener_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateRule_request_action OAICreateListener_request::getDefaultAction() const {
    return m_default_action;
}
void OAICreateListener_request::setDefaultAction(const OAICreateRule_request_action &default_action) {
    m_default_action = default_action;
    m_default_action_isSet = true;
}

bool OAICreateListener_request::is_default_action_Set() const{
    return m_default_action_isSet;
}

bool OAICreateListener_request::is_default_action_Valid() const{
    return m_default_action_isValid;
}

QString OAICreateListener_request::getName() const {
    return m_name;
}
void OAICreateListener_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateListener_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateListener_request::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateListener_request::getPort() const {
    return m_port;
}
void OAICreateListener_request::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateListener_request::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateListener_request::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateListener_request::getProtocol() const {
    return m_protocol;
}
void OAICreateListener_request::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAICreateListener_request::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAICreateListener_request::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QMap<QString, QString> OAICreateListener_request::getTags() const {
    return m_tags;
}
void OAICreateListener_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateListener_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateListener_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateListener_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateListener_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_action_isValid && m_name_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
