/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathMatch::OAIPathMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathMatch::OAIPathMatch() {
    this->initializeModel();
}

OAIPathMatch::~OAIPathMatch() {}

void OAIPathMatch::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;
}

void OAIPathMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathMatch::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;
}

QString OAIPathMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    return obj;
}

bool OAIPathMatch::getCaseSensitive() const {
    return m_case_sensitive;
}
void OAIPathMatch::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIPathMatch::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIPathMatch::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

OAIPathMatch_match OAIPathMatch::getMatch() const {
    return m_match;
}
void OAIPathMatch::setMatch(const OAIPathMatch_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIPathMatch::is_match_Set() const{
    return m_match_isSet;
}

bool OAIPathMatch::is_match_Valid() const{
    return m_match_isValid;
}

bool OAIPathMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_isValid && true;
}

} // namespace OpenAPI
