/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceNetworkVpcAssociationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceNetworkVpcAssociationResponse::OAIGetServiceNetworkVpcAssociationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceNetworkVpcAssociationResponse::OAIGetServiceNetworkVpcAssociationResponse() {
    this->initializeModel();
}

OAIGetServiceNetworkVpcAssociationResponse::~OAIGetServiceNetworkVpcAssociationResponse() {}

void OAIGetServiceNetworkVpcAssociationResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_service_network_arn_isSet = false;
    m_service_network_arn_isValid = false;

    m_service_network_id_isSet = false;
    m_service_network_id_isValid = false;

    m_service_network_name_isSet = false;
    m_service_network_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIGetServiceNetworkVpcAssociationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceNetworkVpcAssociationResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_service_network_arn_isValid = ::OpenAPI::fromJsonValue(m_service_network_arn, json[QString("serviceNetworkArn")]);
    m_service_network_arn_isSet = !json[QString("serviceNetworkArn")].isNull() && m_service_network_arn_isValid;

    m_service_network_id_isValid = ::OpenAPI::fromJsonValue(m_service_network_id, json[QString("serviceNetworkId")]);
    m_service_network_id_isSet = !json[QString("serviceNetworkId")].isNull() && m_service_network_id_isValid;

    m_service_network_name_isValid = ::OpenAPI::fromJsonValue(m_service_network_name, json[QString("serviceNetworkName")]);
    m_service_network_name_isSet = !json[QString("serviceNetworkName")].isNull() && m_service_network_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceNetworkVpcAssociationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_failure_code_isSet) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_service_network_arn_isSet) {
        obj.insert(QString("serviceNetworkArn"), ::OpenAPI::toJsonValue(m_service_network_arn));
    }
    if (m_service_network_id_isSet) {
        obj.insert(QString("serviceNetworkId"), ::OpenAPI::toJsonValue(m_service_network_id));
    }
    if (m_service_network_name_isSet) {
        obj.insert(QString("serviceNetworkName"), ::OpenAPI::toJsonValue(m_service_network_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getArn() const {
    return m_arn;
}
void OAIGetServiceNetworkVpcAssociationResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetServiceNetworkVpcAssociationResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetServiceNetworkVpcAssociationResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIGetServiceNetworkVpcAssociationResponse::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getFailureCode() const {
    return m_failure_code;
}
void OAIGetServiceNetworkVpcAssociationResponse::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getFailureMessage() const {
    return m_failure_message;
}
void OAIGetServiceNetworkVpcAssociationResponse::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getId() const {
    return m_id;
}
void OAIGetServiceNetworkVpcAssociationResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGetServiceNetworkVpcAssociationResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetServiceNetworkVpcAssociationResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QList OAIGetServiceNetworkVpcAssociationResponse::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIGetServiceNetworkVpcAssociationResponse::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getServiceNetworkArn() const {
    return m_service_network_arn;
}
void OAIGetServiceNetworkVpcAssociationResponse::setServiceNetworkArn(const QString &service_network_arn) {
    m_service_network_arn = service_network_arn;
    m_service_network_arn_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_service_network_arn_Set() const{
    return m_service_network_arn_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_service_network_arn_Valid() const{
    return m_service_network_arn_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getServiceNetworkId() const {
    return m_service_network_id;
}
void OAIGetServiceNetworkVpcAssociationResponse::setServiceNetworkId(const QString &service_network_id) {
    m_service_network_id = service_network_id;
    m_service_network_id_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_service_network_id_Set() const{
    return m_service_network_id_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_service_network_id_Valid() const{
    return m_service_network_id_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getServiceNetworkName() const {
    return m_service_network_name;
}
void OAIGetServiceNetworkVpcAssociationResponse::setServiceNetworkName(const QString &service_network_name) {
    m_service_network_name = service_network_name;
    m_service_network_name_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_service_network_name_Set() const{
    return m_service_network_name_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_service_network_name_Valid() const{
    return m_service_network_name_isValid;
}

OAIServiceNetworkVpcAssociationStatus OAIGetServiceNetworkVpcAssociationResponse::getStatus() const {
    return m_status;
}
void OAIGetServiceNetworkVpcAssociationResponse::setStatus(const OAIServiceNetworkVpcAssociationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetServiceNetworkVpcAssociationResponse::getVpcId() const {
    return m_vpc_id;
}
void OAIGetServiceNetworkVpcAssociationResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIGetServiceNetworkVpcAssociationResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIGetServiceNetworkVpcAssociationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_network_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceNetworkVpcAssociationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
