/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteServiceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteServiceResponse::OAIDeleteServiceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteServiceResponse::OAIDeleteServiceResponse() {
    this->initializeModel();
}

OAIDeleteServiceResponse::~OAIDeleteServiceResponse() {}

void OAIDeleteServiceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeleteServiceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteServiceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDeleteServiceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteServiceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDeleteServiceResponse::getArn() const {
    return m_arn;
}
void OAIDeleteServiceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteServiceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteServiceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeleteServiceResponse::getId() const {
    return m_id;
}
void OAIDeleteServiceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeleteServiceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeleteServiceResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeleteServiceResponse::getName() const {
    return m_name;
}
void OAIDeleteServiceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeleteServiceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeleteServiceResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceStatus OAIDeleteServiceResponse::getStatus() const {
    return m_status;
}
void OAIDeleteServiceResponse::setStatus(const OAIServiceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteServiceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteServiceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeleteServiceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteServiceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
