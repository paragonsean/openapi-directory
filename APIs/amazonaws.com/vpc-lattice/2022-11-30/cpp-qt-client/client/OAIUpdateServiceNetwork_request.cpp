/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceNetwork_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceNetwork_request::OAIUpdateServiceNetwork_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceNetwork_request::OAIUpdateServiceNetwork_request() {
    this->initializeModel();
}

OAIUpdateServiceNetwork_request::~OAIUpdateServiceNetwork_request() {}

void OAIUpdateServiceNetwork_request::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;
}

void OAIUpdateServiceNetwork_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceNetwork_request::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;
}

QString OAIUpdateServiceNetwork_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceNetwork_request::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    return obj;
}

QString OAIUpdateServiceNetwork_request::getAuthType() const {
    return m_auth_type;
}
void OAIUpdateServiceNetwork_request::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIUpdateServiceNetwork_request::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIUpdateServiceNetwork_request::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

bool OAIUpdateServiceNetwork_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceNetwork_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auth_type_isValid && true;
}

} // namespace OpenAPI
