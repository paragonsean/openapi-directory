/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleMatch::OAIRuleMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleMatch::OAIRuleMatch() {
    this->initializeModel();
}

OAIRuleMatch::~OAIRuleMatch() {}

void OAIRuleMatch::initializeModel() {

    m_http_match_isSet = false;
    m_http_match_isValid = false;
}

void OAIRuleMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleMatch::fromJsonObject(QJsonObject json) {

    m_http_match_isValid = ::OpenAPI::fromJsonValue(m_http_match, json[QString("httpMatch")]);
    m_http_match_isSet = !json[QString("httpMatch")].isNull() && m_http_match_isValid;
}

QString OAIRuleMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_http_match.isSet()) {
        obj.insert(QString("httpMatch"), ::OpenAPI::toJsonValue(m_http_match));
    }
    return obj;
}

OAICreateRule_request_match_httpMatch OAIRuleMatch::getHttpMatch() const {
    return m_http_match;
}
void OAIRuleMatch::setHttpMatch(const OAICreateRule_request_match_httpMatch &http_match) {
    m_http_match = http_match;
    m_http_match_isSet = true;
}

bool OAIRuleMatch::is_http_match_Set() const{
    return m_http_match_isSet;
}

bool OAIRuleMatch::is_http_match_Valid() const{
    return m_http_match_isValid;
}

bool OAIRuleMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
