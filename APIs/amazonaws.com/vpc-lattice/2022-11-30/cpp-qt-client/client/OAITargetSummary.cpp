/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetSummary::OAITargetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetSummary::OAITargetSummary() {
    this->initializeModel();
}

OAITargetSummary::~OAITargetSummary() {}

void OAITargetSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITargetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITargetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITargetSummary::getId() const {
    return m_id;
}
void OAITargetSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITargetSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAITargetSummary::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITargetSummary::getPort() const {
    return m_port;
}
void OAITargetSummary::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAITargetSummary::is_port_Set() const{
    return m_port_isSet;
}

bool OAITargetSummary::is_port_Valid() const{
    return m_port_isValid;
}

QString OAITargetSummary::getReasonCode() const {
    return m_reason_code;
}
void OAITargetSummary::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAITargetSummary::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAITargetSummary::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

OAITargetStatus OAITargetSummary::getStatus() const {
    return m_status;
}
void OAITargetSummary::setStatus(const OAITargetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITargetSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAITargetSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITargetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
