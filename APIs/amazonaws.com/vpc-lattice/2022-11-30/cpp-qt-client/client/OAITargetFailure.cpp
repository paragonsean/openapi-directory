/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetFailure::OAITargetFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetFailure::OAITargetFailure() {
    this->initializeModel();
}

OAITargetFailure::~OAITargetFailure() {}

void OAITargetFailure::initializeModel() {

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAITargetFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetFailure::fromJsonObject(QJsonObject json) {

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAITargetFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_code_isSet) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAITargetFailure::getFailureCode() const {
    return m_failure_code;
}
void OAITargetFailure::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAITargetFailure::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAITargetFailure::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAITargetFailure::getFailureMessage() const {
    return m_failure_message;
}
void OAITargetFailure::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAITargetFailure::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAITargetFailure::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

QString OAITargetFailure::getId() const {
    return m_id;
}
void OAITargetFailure::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITargetFailure::is_id_Set() const{
    return m_id_isSet;
}

bool OAITargetFailure::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITargetFailure::getPort() const {
    return m_port;
}
void OAITargetFailure::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAITargetFailure::is_port_Set() const{
    return m_port_isSet;
}

bool OAITargetFailure::is_port_Valid() const{
    return m_port_isValid;
}

bool OAITargetFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
