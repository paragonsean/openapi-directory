/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessLogSubscription_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessLogSubscription_request::OAICreateAccessLogSubscription_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessLogSubscription_request::OAICreateAccessLogSubscription_request() {
    this->initializeModel();
}

OAICreateAccessLogSubscription_request::~OAICreateAccessLogSubscription_request() {}

void OAICreateAccessLogSubscription_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;

    m_resource_identifier_isSet = false;
    m_resource_identifier_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAccessLogSubscription_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessLogSubscription_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("destinationArn")]);
    m_destination_arn_isSet = !json[QString("destinationArn")].isNull() && m_destination_arn_isValid;

    m_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier, json[QString("resourceIdentifier")]);
    m_resource_identifier_isSet = !json[QString("resourceIdentifier")].isNull() && m_resource_identifier_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAccessLogSubscription_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessLogSubscription_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("destinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    if (m_resource_identifier_isSet) {
        obj.insert(QString("resourceIdentifier"), ::OpenAPI::toJsonValue(m_resource_identifier));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAccessLogSubscription_request::getClientToken() const {
    return m_client_token;
}
void OAICreateAccessLogSubscription_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAccessLogSubscription_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAccessLogSubscription_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateAccessLogSubscription_request::getDestinationArn() const {
    return m_destination_arn;
}
void OAICreateAccessLogSubscription_request::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAICreateAccessLogSubscription_request::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAICreateAccessLogSubscription_request::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

QString OAICreateAccessLogSubscription_request::getResourceIdentifier() const {
    return m_resource_identifier;
}
void OAICreateAccessLogSubscription_request::setResourceIdentifier(const QString &resource_identifier) {
    m_resource_identifier = resource_identifier;
    m_resource_identifier_isSet = true;
}

bool OAICreateAccessLogSubscription_request::is_resource_identifier_Set() const{
    return m_resource_identifier_isSet;
}

bool OAICreateAccessLogSubscription_request::is_resource_identifier_Valid() const{
    return m_resource_identifier_isValid;
}

QMap<QString, QString> OAICreateAccessLogSubscription_request::getTags() const {
    return m_tags;
}
void OAICreateAccessLogSubscription_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAccessLogSubscription_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAccessLogSubscription_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAccessLogSubscription_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessLogSubscription_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_arn_isValid && m_resource_identifier_isValid && true;
}

} // namespace OpenAPI
