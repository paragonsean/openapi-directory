/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathMatch_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathMatch_match::OAIPathMatch_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathMatch_match::OAIPathMatch_match() {
    this->initializeModel();
}

OAIPathMatch_match::~OAIPathMatch_match() {}

void OAIPathMatch_match::initializeModel() {

    m_exact_isSet = false;
    m_exact_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIPathMatch_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathMatch_match::fromJsonObject(QJsonObject json) {

    m_exact_isValid = ::OpenAPI::fromJsonValue(m_exact, json[QString("exact")]);
    m_exact_isSet = !json[QString("exact")].isNull() && m_exact_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIPathMatch_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathMatch_match::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_isSet) {
        obj.insert(QString("exact"), ::OpenAPI::toJsonValue(m_exact));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIPathMatch_match::getExact() const {
    return m_exact;
}
void OAIPathMatch_match::setExact(const QString &exact) {
    m_exact = exact;
    m_exact_isSet = true;
}

bool OAIPathMatch_match::is_exact_Set() const{
    return m_exact_isSet;
}

bool OAIPathMatch_match::is_exact_Valid() const{
    return m_exact_isValid;
}

QString OAIPathMatch_match::getPrefix() const {
    return m_prefix;
}
void OAIPathMatch_match::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIPathMatch_match::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIPathMatch_match::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIPathMatch_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathMatch_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
