/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAuthPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAuthPolicyRequest::OAIPutAuthPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAuthPolicyRequest::OAIPutAuthPolicyRequest() {
    this->initializeModel();
}

OAIPutAuthPolicyRequest::~OAIPutAuthPolicyRequest() {}

void OAIPutAuthPolicyRequest::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPutAuthPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAuthPolicyRequest::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIPutAuthPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAuthPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPutAuthPolicyRequest::getPolicy() const {
    return m_policy;
}
void OAIPutAuthPolicyRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutAuthPolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutAuthPolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutAuthPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAuthPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
