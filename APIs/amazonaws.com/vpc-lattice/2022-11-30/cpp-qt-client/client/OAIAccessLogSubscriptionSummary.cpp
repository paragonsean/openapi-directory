/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessLogSubscriptionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessLogSubscriptionSummary::OAIAccessLogSubscriptionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessLogSubscriptionSummary::OAIAccessLogSubscriptionSummary() {
    this->initializeModel();
}

OAIAccessLogSubscriptionSummary::~OAIAccessLogSubscriptionSummary() {}

void OAIAccessLogSubscriptionSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIAccessLogSubscriptionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessLogSubscriptionSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("destinationArn")]);
    m_destination_arn_isSet = !json[QString("destinationArn")].isNull() && m_destination_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIAccessLogSubscriptionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessLogSubscriptionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("destinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIAccessLogSubscriptionSummary::getArn() const {
    return m_arn;
}
void OAIAccessLogSubscriptionSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIAccessLogSubscriptionSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIAccessLogSubscriptionSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAccessLogSubscriptionSummary::getDestinationArn() const {
    return m_destination_arn;
}
void OAIAccessLogSubscriptionSummary::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

QString OAIAccessLogSubscriptionSummary::getId() const {
    return m_id;
}
void OAIAccessLogSubscriptionSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAccessLogSubscriptionSummary::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIAccessLogSubscriptionSummary::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIAccessLogSubscriptionSummary::getResourceArn() const {
    return m_resource_arn;
}
void OAIAccessLogSubscriptionSummary::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIAccessLogSubscriptionSummary::getResourceId() const {
    return m_resource_id;
}
void OAIAccessLogSubscriptionSummary::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAccessLogSubscriptionSummary::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAccessLogSubscriptionSummary::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIAccessLogSubscriptionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessLogSubscriptionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_at_isValid && m_destination_arn_isValid && m_id_isValid && m_last_updated_at_isValid && m_resource_arn_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
