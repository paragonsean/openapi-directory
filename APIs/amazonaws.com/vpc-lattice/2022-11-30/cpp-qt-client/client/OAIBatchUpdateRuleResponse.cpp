/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateRuleResponse::OAIBatchUpdateRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateRuleResponse::OAIBatchUpdateRuleResponse() {
    this->initializeModel();
}

OAIBatchUpdateRuleResponse::~OAIBatchUpdateRuleResponse() {}

void OAIBatchUpdateRuleResponse::initializeModel() {

    m_successful_isSet = false;
    m_successful_isValid = false;

    m_unsuccessful_isSet = false;
    m_unsuccessful_isValid = false;
}

void OAIBatchUpdateRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateRuleResponse::fromJsonObject(QJsonObject json) {

    m_successful_isValid = ::OpenAPI::fromJsonValue(m_successful, json[QString("successful")]);
    m_successful_isSet = !json[QString("successful")].isNull() && m_successful_isValid;

    m_unsuccessful_isValid = ::OpenAPI::fromJsonValue(m_unsuccessful, json[QString("unsuccessful")]);
    m_unsuccessful_isSet = !json[QString("unsuccessful")].isNull() && m_unsuccessful_isValid;
}

QString OAIBatchUpdateRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_successful.isSet()) {
        obj.insert(QString("successful"), ::OpenAPI::toJsonValue(m_successful));
    }
    if (m_unsuccessful.isSet()) {
        obj.insert(QString("unsuccessful"), ::OpenAPI::toJsonValue(m_unsuccessful));
    }
    return obj;
}

QList OAIBatchUpdateRuleResponse::getSuccessful() const {
    return m_successful;
}
void OAIBatchUpdateRuleResponse::setSuccessful(const QList &successful) {
    m_successful = successful;
    m_successful_isSet = true;
}

bool OAIBatchUpdateRuleResponse::is_successful_Set() const{
    return m_successful_isSet;
}

bool OAIBatchUpdateRuleResponse::is_successful_Valid() const{
    return m_successful_isValid;
}

QList OAIBatchUpdateRuleResponse::getUnsuccessful() const {
    return m_unsuccessful;
}
void OAIBatchUpdateRuleResponse::setUnsuccessful(const QList &unsuccessful) {
    m_unsuccessful = unsuccessful;
    m_unsuccessful_isSet = true;
}

bool OAIBatchUpdateRuleResponse::is_unsuccessful_Set() const{
    return m_unsuccessful_isSet;
}

bool OAIBatchUpdateRuleResponse::is_unsuccessful_Valid() const{
    return m_unsuccessful_isValid;
}

bool OAIBatchUpdateRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_successful.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsuccessful.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
