/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRuleRequest::OAIUpdateRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRuleRequest::OAIUpdateRuleRequest() {
    this->initializeModel();
}

OAIUpdateRuleRequest::~OAIUpdateRuleRequest() {}

void OAIUpdateRuleRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIUpdateRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRuleRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIUpdateRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAIUpdateRuleResponse_action OAIUpdateRuleRequest::getAction() const {
    return m_action;
}
void OAIUpdateRuleRequest::setAction(const OAIUpdateRuleResponse_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateRuleRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateRuleRequest::is_action_Valid() const{
    return m_action_isValid;
}

OAIRuleUpdate_match OAIUpdateRuleRequest::getMatch() const {
    return m_match;
}
void OAIUpdateRuleRequest::setMatch(const OAIRuleUpdate_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIUpdateRuleRequest::is_match_Set() const{
    return m_match_isSet;
}

bool OAIUpdateRuleRequest::is_match_Valid() const{
    return m_match_isValid;
}

qint32 OAIUpdateRuleRequest::getPriority() const {
    return m_priority;
}
void OAIUpdateRuleRequest::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIUpdateRuleRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIUpdateRuleRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIUpdateRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
