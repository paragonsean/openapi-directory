/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetGroupSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetGroupSummary::OAITargetGroupSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetGroupSummary::OAITargetGroupSummary() {
    this->initializeModel();
}

OAITargetGroupSummary::~OAITargetGroupSummary() {}

void OAITargetGroupSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_type_isSet = false;
    m_ip_address_type_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_service_arns_isSet = false;
    m_service_arns_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vpc_identifier_isSet = false;
    m_vpc_identifier_isValid = false;
}

void OAITargetGroupSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetGroupSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_ip_address_type, json[QString("ipAddressType")]);
    m_ip_address_type_isSet = !json[QString("ipAddressType")].isNull() && m_ip_address_type_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_service_arns_isValid = ::OpenAPI::fromJsonValue(m_service_arns, json[QString("serviceArns")]);
    m_service_arns_isSet = !json[QString("serviceArns")].isNull() && m_service_arns_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vpc_identifier_isValid = ::OpenAPI::fromJsonValue(m_vpc_identifier, json[QString("vpcIdentifier")]);
    m_vpc_identifier_isSet = !json[QString("vpcIdentifier")].isNull() && m_vpc_identifier_isValid;
}

QString OAITargetGroupSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetGroupSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_type.isSet()) {
        obj.insert(QString("ipAddressType"), ::OpenAPI::toJsonValue(m_ip_address_type));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_service_arns.isSet()) {
        obj.insert(QString("serviceArns"), ::OpenAPI::toJsonValue(m_service_arns));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vpc_identifier_isSet) {
        obj.insert(QString("vpcIdentifier"), ::OpenAPI::toJsonValue(m_vpc_identifier));
    }
    return obj;
}

QString OAITargetGroupSummary::getArn() const {
    return m_arn;
}
void OAITargetGroupSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITargetGroupSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITargetGroupSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAITargetGroupSummary::getCreatedAt() const {
    return m_created_at;
}
void OAITargetGroupSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITargetGroupSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITargetGroupSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITargetGroupSummary::getId() const {
    return m_id;
}
void OAITargetGroupSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITargetGroupSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAITargetGroupSummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIIpAddressType OAITargetGroupSummary::getIpAddressType() const {
    return m_ip_address_type;
}
void OAITargetGroupSummary::setIpAddressType(const OAIIpAddressType &ip_address_type) {
    m_ip_address_type = ip_address_type;
    m_ip_address_type_isSet = true;
}

bool OAITargetGroupSummary::is_ip_address_type_Set() const{
    return m_ip_address_type_isSet;
}

bool OAITargetGroupSummary::is_ip_address_type_Valid() const{
    return m_ip_address_type_isValid;
}

QDateTime OAITargetGroupSummary::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAITargetGroupSummary::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAITargetGroupSummary::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAITargetGroupSummary::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAITargetGroupSummary::getName() const {
    return m_name;
}
void OAITargetGroupSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITargetGroupSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAITargetGroupSummary::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITargetGroupSummary::getPort() const {
    return m_port;
}
void OAITargetGroupSummary::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAITargetGroupSummary::is_port_Set() const{
    return m_port_isSet;
}

bool OAITargetGroupSummary::is_port_Valid() const{
    return m_port_isValid;
}

OAITargetGroupProtocol OAITargetGroupSummary::getProtocol() const {
    return m_protocol;
}
void OAITargetGroupSummary::setProtocol(const OAITargetGroupProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAITargetGroupSummary::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAITargetGroupSummary::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QList OAITargetGroupSummary::getServiceArns() const {
    return m_service_arns;
}
void OAITargetGroupSummary::setServiceArns(const QList &service_arns) {
    m_service_arns = service_arns;
    m_service_arns_isSet = true;
}

bool OAITargetGroupSummary::is_service_arns_Set() const{
    return m_service_arns_isSet;
}

bool OAITargetGroupSummary::is_service_arns_Valid() const{
    return m_service_arns_isValid;
}

OAITargetGroupStatus OAITargetGroupSummary::getStatus() const {
    return m_status;
}
void OAITargetGroupSummary::setStatus(const OAITargetGroupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITargetGroupSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAITargetGroupSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAITargetGroupType OAITargetGroupSummary::getType() const {
    return m_type;
}
void OAITargetGroupSummary::setType(const OAITargetGroupType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITargetGroupSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAITargetGroupSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITargetGroupSummary::getVpcIdentifier() const {
    return m_vpc_identifier;
}
void OAITargetGroupSummary::setVpcIdentifier(const QString &vpc_identifier) {
    m_vpc_identifier = vpc_identifier;
    m_vpc_identifier_isSet = true;
}

bool OAITargetGroupSummary::is_vpc_identifier_Set() const{
    return m_vpc_identifier_isSet;
}

bool OAITargetGroupSummary::is_vpc_identifier_Valid() const{
    return m_vpc_identifier_isValid;
}

bool OAITargetGroupSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetGroupSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
