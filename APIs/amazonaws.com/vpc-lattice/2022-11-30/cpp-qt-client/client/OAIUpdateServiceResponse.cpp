/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceResponse::OAIUpdateServiceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceResponse::OAIUpdateServiceResponse() {
    this->initializeModel();
}

OAIUpdateServiceResponse::~OAIUpdateServiceResponse() {}

void OAIUpdateServiceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_custom_domain_name_isSet = false;
    m_custom_domain_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUpdateServiceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("certificateArn")]);
    m_certificate_arn_isSet = !json[QString("certificateArn")].isNull() && m_certificate_arn_isValid;

    m_custom_domain_name_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_name, json[QString("customDomainName")]);
    m_custom_domain_name_isSet = !json[QString("customDomainName")].isNull() && m_custom_domain_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUpdateServiceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("certificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_custom_domain_name_isSet) {
        obj.insert(QString("customDomainName"), ::OpenAPI::toJsonValue(m_custom_domain_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIUpdateServiceResponse::getArn() const {
    return m_arn;
}
void OAIUpdateServiceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateServiceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateServiceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAuthType OAIUpdateServiceResponse::getAuthType() const {
    return m_auth_type;
}
void OAIUpdateServiceResponse::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIUpdateServiceResponse::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIUpdateServiceResponse::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIUpdateServiceResponse::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIUpdateServiceResponse::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIUpdateServiceResponse::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIUpdateServiceResponse::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QString OAIUpdateServiceResponse::getCustomDomainName() const {
    return m_custom_domain_name;
}
void OAIUpdateServiceResponse::setCustomDomainName(const QString &custom_domain_name) {
    m_custom_domain_name = custom_domain_name;
    m_custom_domain_name_isSet = true;
}

bool OAIUpdateServiceResponse::is_custom_domain_name_Set() const{
    return m_custom_domain_name_isSet;
}

bool OAIUpdateServiceResponse::is_custom_domain_name_Valid() const{
    return m_custom_domain_name_isValid;
}

QString OAIUpdateServiceResponse::getId() const {
    return m_id;
}
void OAIUpdateServiceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateServiceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateServiceResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateServiceResponse::getName() const {
    return m_name;
}
void OAIUpdateServiceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateServiceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateServiceResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateServiceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
