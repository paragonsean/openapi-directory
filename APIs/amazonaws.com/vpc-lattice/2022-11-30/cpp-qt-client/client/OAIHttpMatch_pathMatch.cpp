/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpMatch_pathMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpMatch_pathMatch::OAIHttpMatch_pathMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpMatch_pathMatch::OAIHttpMatch_pathMatch() {
    this->initializeModel();
}

OAIHttpMatch_pathMatch::~OAIHttpMatch_pathMatch() {}

void OAIHttpMatch_pathMatch::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;
}

void OAIHttpMatch_pathMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpMatch_pathMatch::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;
}

QString OAIHttpMatch_pathMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpMatch_pathMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    return obj;
}

bool OAIHttpMatch_pathMatch::getCaseSensitive() const {
    return m_case_sensitive;
}
void OAIHttpMatch_pathMatch::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIHttpMatch_pathMatch::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIHttpMatch_pathMatch::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

OAIPathMatch_match OAIHttpMatch_pathMatch::getMatch() const {
    return m_match;
}
void OAIHttpMatch_pathMatch::setMatch(const OAIPathMatch_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIHttpMatch_pathMatch::is_match_Set() const{
    return m_match_isSet;
}

bool OAIHttpMatch_pathMatch::is_match_Valid() const{
    return m_match_isValid;
}

bool OAIHttpMatch_pathMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpMatch_pathMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_isValid && true;
}

} // namespace OpenAPI
