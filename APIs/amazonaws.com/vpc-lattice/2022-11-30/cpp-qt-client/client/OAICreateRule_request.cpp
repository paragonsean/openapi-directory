/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRule_request::OAICreateRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRule_request::OAICreateRule_request() {
    this->initializeModel();
}

OAICreateRule_request::~OAICreateRule_request() {}

void OAICreateRule_request::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRule_request::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateRule_request_action OAICreateRule_request::getAction() const {
    return m_action;
}
void OAICreateRule_request::setAction(const OAICreateRule_request_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateRule_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateRule_request::is_action_Valid() const{
    return m_action_isValid;
}

QString OAICreateRule_request::getClientToken() const {
    return m_client_token;
}
void OAICreateRule_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRule_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRule_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateRule_request_match OAICreateRule_request::getMatch() const {
    return m_match;
}
void OAICreateRule_request::setMatch(const OAICreateRule_request_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAICreateRule_request::is_match_Set() const{
    return m_match_isSet;
}

bool OAICreateRule_request::is_match_Valid() const{
    return m_match_isValid;
}

QString OAICreateRule_request::getName() const {
    return m_name;
}
void OAICreateRule_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRule_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRule_request::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateRule_request::getPriority() const {
    return m_priority;
}
void OAICreateRule_request::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateRule_request::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateRule_request::is_priority_Valid() const{
    return m_priority_isValid;
}

QMap<QString, QString> OAICreateRule_request::getTags() const {
    return m_tags;
}
void OAICreateRule_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRule_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRule_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_match_isValid && m_name_isValid && m_priority_isValid && true;
}

} // namespace OpenAPI
