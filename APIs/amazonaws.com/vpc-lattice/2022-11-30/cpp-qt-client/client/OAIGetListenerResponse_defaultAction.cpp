/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetListenerResponse_defaultAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetListenerResponse_defaultAction::OAIGetListenerResponse_defaultAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetListenerResponse_defaultAction::OAIGetListenerResponse_defaultAction() {
    this->initializeModel();
}

OAIGetListenerResponse_defaultAction::~OAIGetListenerResponse_defaultAction() {}

void OAIGetListenerResponse_defaultAction::initializeModel() {

    m_fixed_response_isSet = false;
    m_fixed_response_isValid = false;

    m_forward_isSet = false;
    m_forward_isValid = false;
}

void OAIGetListenerResponse_defaultAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetListenerResponse_defaultAction::fromJsonObject(QJsonObject json) {

    m_fixed_response_isValid = ::OpenAPI::fromJsonValue(m_fixed_response, json[QString("fixedResponse")]);
    m_fixed_response_isSet = !json[QString("fixedResponse")].isNull() && m_fixed_response_isValid;

    m_forward_isValid = ::OpenAPI::fromJsonValue(m_forward, json[QString("forward")]);
    m_forward_isSet = !json[QString("forward")].isNull() && m_forward_isValid;
}

QString OAIGetListenerResponse_defaultAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetListenerResponse_defaultAction::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_response.isSet()) {
        obj.insert(QString("fixedResponse"), ::OpenAPI::toJsonValue(m_fixed_response));
    }
    if (m_forward.isSet()) {
        obj.insert(QString("forward"), ::OpenAPI::toJsonValue(m_forward));
    }
    return obj;
}

OAICreateRule_request_action_fixedResponse OAIGetListenerResponse_defaultAction::getFixedResponse() const {
    return m_fixed_response;
}
void OAIGetListenerResponse_defaultAction::setFixedResponse(const OAICreateRule_request_action_fixedResponse &fixed_response) {
    m_fixed_response = fixed_response;
    m_fixed_response_isSet = true;
}

bool OAIGetListenerResponse_defaultAction::is_fixed_response_Set() const{
    return m_fixed_response_isSet;
}

bool OAIGetListenerResponse_defaultAction::is_fixed_response_Valid() const{
    return m_fixed_response_isValid;
}

OAICreateRule_request_action_forward OAIGetListenerResponse_defaultAction::getForward() const {
    return m_forward;
}
void OAIGetListenerResponse_defaultAction::setForward(const OAICreateRule_request_action_forward &forward) {
    m_forward = forward;
    m_forward_isSet = true;
}

bool OAIGetListenerResponse_defaultAction::is_forward_Set() const{
    return m_forward_isSet;
}

bool OAIGetListenerResponse_defaultAction::is_forward_Valid() const{
    return m_forward_isValid;
}

bool OAIGetListenerResponse_defaultAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetListenerResponse_defaultAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
