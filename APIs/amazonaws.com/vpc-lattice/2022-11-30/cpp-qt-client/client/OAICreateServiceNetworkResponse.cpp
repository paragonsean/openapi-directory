/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceNetworkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceNetworkResponse::OAICreateServiceNetworkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceNetworkResponse::OAICreateServiceNetworkResponse() {
    this->initializeModel();
}

OAICreateServiceNetworkResponse::~OAICreateServiceNetworkResponse() {}

void OAICreateServiceNetworkResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateServiceNetworkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceNetworkResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateServiceNetworkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceNetworkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateServiceNetworkResponse::getArn() const {
    return m_arn;
}
void OAICreateServiceNetworkResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateServiceNetworkResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateServiceNetworkResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAuthType OAICreateServiceNetworkResponse::getAuthType() const {
    return m_auth_type;
}
void OAICreateServiceNetworkResponse::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAICreateServiceNetworkResponse::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAICreateServiceNetworkResponse::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAICreateServiceNetworkResponse::getId() const {
    return m_id;
}
void OAICreateServiceNetworkResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateServiceNetworkResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateServiceNetworkResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateServiceNetworkResponse::getName() const {
    return m_name;
}
void OAICreateServiceNetworkResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateServiceNetworkResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateServiceNetworkResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateServiceNetworkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceNetworkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
