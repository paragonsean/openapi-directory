/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleUpdate::OAIRuleUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleUpdate::OAIRuleUpdate() {
    this->initializeModel();
}

OAIRuleUpdate::~OAIRuleUpdate() {}

void OAIRuleUpdate::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_identifier_isSet = false;
    m_rule_identifier_isValid = false;
}

void OAIRuleUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleUpdate::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rule_identifier_isValid = ::OpenAPI::fromJsonValue(m_rule_identifier, json[QString("ruleIdentifier")]);
    m_rule_identifier_isSet = !json[QString("ruleIdentifier")].isNull() && m_rule_identifier_isValid;
}

QString OAIRuleUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_identifier_isSet) {
        obj.insert(QString("ruleIdentifier"), ::OpenAPI::toJsonValue(m_rule_identifier));
    }
    return obj;
}

OAIRuleUpdate_action OAIRuleUpdate::getAction() const {
    return m_action;
}
void OAIRuleUpdate::setAction(const OAIRuleUpdate_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRuleUpdate::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRuleUpdate::is_action_Valid() const{
    return m_action_isValid;
}

OAIRuleUpdate_match OAIRuleUpdate::getMatch() const {
    return m_match;
}
void OAIRuleUpdate::setMatch(const OAIRuleUpdate_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIRuleUpdate::is_match_Set() const{
    return m_match_isSet;
}

bool OAIRuleUpdate::is_match_Valid() const{
    return m_match_isValid;
}

qint32 OAIRuleUpdate::getPriority() const {
    return m_priority;
}
void OAIRuleUpdate::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRuleUpdate::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRuleUpdate::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIRuleUpdate::getRuleIdentifier() const {
    return m_rule_identifier;
}
void OAIRuleUpdate::setRuleIdentifier(const QString &rule_identifier) {
    m_rule_identifier = rule_identifier;
    m_rule_identifier_isSet = true;
}

bool OAIRuleUpdate::is_rule_identifier_Set() const{
    return m_rule_identifier_isSet;
}

bool OAIRuleUpdate::is_rule_identifier_Valid() const{
    return m_rule_identifier_isValid;
}

bool OAIRuleUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_identifier_isValid && true;
}

} // namespace OpenAPI
