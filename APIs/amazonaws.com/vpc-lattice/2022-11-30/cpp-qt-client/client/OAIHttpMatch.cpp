/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpMatch::OAIHttpMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpMatch::OAIHttpMatch() {
    this->initializeModel();
}

OAIHttpMatch::~OAIHttpMatch() {}

void OAIHttpMatch::initializeModel() {

    m_header_matches_isSet = false;
    m_header_matches_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_match_isSet = false;
    m_path_match_isValid = false;
}

void OAIHttpMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpMatch::fromJsonObject(QJsonObject json) {

    m_header_matches_isValid = ::OpenAPI::fromJsonValue(m_header_matches, json[QString("headerMatches")]);
    m_header_matches_isSet = !json[QString("headerMatches")].isNull() && m_header_matches_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_match_isValid = ::OpenAPI::fromJsonValue(m_path_match, json[QString("pathMatch")]);
    m_path_match_isSet = !json[QString("pathMatch")].isNull() && m_path_match_isValid;
}

QString OAIHttpMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_header_matches.isSet()) {
        obj.insert(QString("headerMatches"), ::OpenAPI::toJsonValue(m_header_matches));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_match.isSet()) {
        obj.insert(QString("pathMatch"), ::OpenAPI::toJsonValue(m_path_match));
    }
    return obj;
}

QList OAIHttpMatch::getHeaderMatches() const {
    return m_header_matches;
}
void OAIHttpMatch::setHeaderMatches(const QList &header_matches) {
    m_header_matches = header_matches;
    m_header_matches_isSet = true;
}

bool OAIHttpMatch::is_header_matches_Set() const{
    return m_header_matches_isSet;
}

bool OAIHttpMatch::is_header_matches_Valid() const{
    return m_header_matches_isValid;
}

QString OAIHttpMatch::getMethod() const {
    return m_method;
}
void OAIHttpMatch::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIHttpMatch::is_method_Set() const{
    return m_method_isSet;
}

bool OAIHttpMatch::is_method_Valid() const{
    return m_method_isValid;
}

OAIHttpMatch_pathMatch OAIHttpMatch::getPathMatch() const {
    return m_path_match;
}
void OAIHttpMatch::setPathMatch(const OAIHttpMatch_pathMatch &path_match) {
    m_path_match = path_match;
    m_path_match_isSet = true;
}

bool OAIHttpMatch::is_path_match_Set() const{
    return m_path_match_isSet;
}

bool OAIHttpMatch::is_path_match_Valid() const{
    return m_path_match_isValid;
}

bool OAIHttpMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_matches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
