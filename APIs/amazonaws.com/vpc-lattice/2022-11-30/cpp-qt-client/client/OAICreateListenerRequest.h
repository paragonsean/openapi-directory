/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateListenerRequest.h
 *
 * 
 */

#ifndef OAICreateListenerRequest_H
#define OAICreateListenerRequest_H

#include <QJsonObject>

#include "OAICreateListenerRequest_defaultAction.h"
#include "OAIListenerProtocol.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateListenerRequest_defaultAction;

class OAICreateListenerRequest : public OAIObject {
public:
    OAICreateListenerRequest();
    OAICreateListenerRequest(QString json);
    ~OAICreateListenerRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    OAICreateListenerRequest_defaultAction getDefaultAction() const;
    void setDefaultAction(const OAICreateListenerRequest_defaultAction &default_action);
    bool is_default_action_Set() const;
    bool is_default_action_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAIListenerProtocol getProtocol() const;
    void setProtocol(const OAIListenerProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    OAICreateListenerRequest_defaultAction m_default_action;
    bool m_default_action_isSet;
    bool m_default_action_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAIListenerProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateListenerRequest)

#endif // OAICreateListenerRequest_H
