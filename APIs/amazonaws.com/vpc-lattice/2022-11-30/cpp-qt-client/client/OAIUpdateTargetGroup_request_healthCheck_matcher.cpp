/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTargetGroup_request_healthCheck_matcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTargetGroup_request_healthCheck_matcher::OAIUpdateTargetGroup_request_healthCheck_matcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTargetGroup_request_healthCheck_matcher::OAIUpdateTargetGroup_request_healthCheck_matcher() {
    this->initializeModel();
}

OAIUpdateTargetGroup_request_healthCheck_matcher::~OAIUpdateTargetGroup_request_healthCheck_matcher() {}

void OAIUpdateTargetGroup_request_healthCheck_matcher::initializeModel() {

    m_http_code_isSet = false;
    m_http_code_isValid = false;
}

void OAIUpdateTargetGroup_request_healthCheck_matcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTargetGroup_request_healthCheck_matcher::fromJsonObject(QJsonObject json) {

    m_http_code_isValid = ::OpenAPI::fromJsonValue(m_http_code, json[QString("httpCode")]);
    m_http_code_isSet = !json[QString("httpCode")].isNull() && m_http_code_isValid;
}

QString OAIUpdateTargetGroup_request_healthCheck_matcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTargetGroup_request_healthCheck_matcher::asJsonObject() const {
    QJsonObject obj;
    if (m_http_code_isSet) {
        obj.insert(QString("httpCode"), ::OpenAPI::toJsonValue(m_http_code));
    }
    return obj;
}

QString OAIUpdateTargetGroup_request_healthCheck_matcher::getHttpCode() const {
    return m_http_code;
}
void OAIUpdateTargetGroup_request_healthCheck_matcher::setHttpCode(const QString &http_code) {
    m_http_code = http_code;
    m_http_code_isSet = true;
}

bool OAIUpdateTargetGroup_request_healthCheck_matcher::is_http_code_Set() const{
    return m_http_code_isSet;
}

bool OAIUpdateTargetGroup_request_healthCheck_matcher::is_http_code_Valid() const{
    return m_http_code_isValid;
}

bool OAIUpdateTargetGroup_request_healthCheck_matcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTargetGroup_request_healthCheck_matcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
