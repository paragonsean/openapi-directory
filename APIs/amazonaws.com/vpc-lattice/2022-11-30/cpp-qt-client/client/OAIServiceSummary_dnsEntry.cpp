/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSummary_dnsEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSummary_dnsEntry::OAIServiceSummary_dnsEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSummary_dnsEntry::OAIServiceSummary_dnsEntry() {
    this->initializeModel();
}

OAIServiceSummary_dnsEntry::~OAIServiceSummary_dnsEntry() {}

void OAIServiceSummary_dnsEntry::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;
}

void OAIServiceSummary_dnsEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSummary_dnsEntry::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("hostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("hostedZoneId")].isNull() && m_hosted_zone_id_isValid;
}

QString OAIServiceSummary_dnsEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSummary_dnsEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("hostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    return obj;
}

QString OAIServiceSummary_dnsEntry::getDomainName() const {
    return m_domain_name;
}
void OAIServiceSummary_dnsEntry::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIServiceSummary_dnsEntry::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIServiceSummary_dnsEntry::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIServiceSummary_dnsEntry::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIServiceSummary_dnsEntry::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIServiceSummary_dnsEntry::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIServiceSummary_dnsEntry::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

bool OAIServiceSummary_dnsEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSummary_dnsEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
