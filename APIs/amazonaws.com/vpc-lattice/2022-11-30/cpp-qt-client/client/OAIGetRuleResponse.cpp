/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRuleResponse::OAIGetRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRuleResponse::OAIGetRuleResponse() {
    this->initializeModel();
}

OAIGetRuleResponse::~OAIGetRuleResponse() {}

void OAIGetRuleResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIGetRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRuleResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIGetRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAICreateListenerResponse_defaultAction OAIGetRuleResponse::getAction() const {
    return m_action;
}
void OAIGetRuleResponse::setAction(const OAICreateListenerResponse_defaultAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGetRuleResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGetRuleResponse::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIGetRuleResponse::getArn() const {
    return m_arn;
}
void OAIGetRuleResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetRuleResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetRuleResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetRuleResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetRuleResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetRuleResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetRuleResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetRuleResponse::getId() const {
    return m_id;
}
void OAIGetRuleResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetRuleResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetRuleResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetRuleResponse::getIsDefault() const {
    return m_is_default;
}
void OAIGetRuleResponse::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIGetRuleResponse::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIGetRuleResponse::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QDateTime OAIGetRuleResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetRuleResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetRuleResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetRuleResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAIRuleUpdate_match OAIGetRuleResponse::getMatch() const {
    return m_match;
}
void OAIGetRuleResponse::setMatch(const OAIRuleUpdate_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIGetRuleResponse::is_match_Set() const{
    return m_match_isSet;
}

bool OAIGetRuleResponse::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIGetRuleResponse::getName() const {
    return m_name;
}
void OAIGetRuleResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetRuleResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetRuleResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetRuleResponse::getPriority() const {
    return m_priority;
}
void OAIGetRuleResponse::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIGetRuleResponse::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIGetRuleResponse::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIGetRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
