/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessLogSubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessLogSubscriptionRequest::OAICreateAccessLogSubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessLogSubscriptionRequest::OAICreateAccessLogSubscriptionRequest() {
    this->initializeModel();
}

OAICreateAccessLogSubscriptionRequest::~OAICreateAccessLogSubscriptionRequest() {}

void OAICreateAccessLogSubscriptionRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;

    m_resource_identifier_isSet = false;
    m_resource_identifier_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAccessLogSubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessLogSubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("destinationArn")]);
    m_destination_arn_isSet = !json[QString("destinationArn")].isNull() && m_destination_arn_isValid;

    m_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier, json[QString("resourceIdentifier")]);
    m_resource_identifier_isSet = !json[QString("resourceIdentifier")].isNull() && m_resource_identifier_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAccessLogSubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessLogSubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("destinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    if (m_resource_identifier_isSet) {
        obj.insert(QString("resourceIdentifier"), ::OpenAPI::toJsonValue(m_resource_identifier));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAccessLogSubscriptionRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAccessLogSubscriptionRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAccessLogSubscriptionRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAccessLogSubscriptionRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateAccessLogSubscriptionRequest::getDestinationArn() const {
    return m_destination_arn;
}
void OAICreateAccessLogSubscriptionRequest::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAICreateAccessLogSubscriptionRequest::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAICreateAccessLogSubscriptionRequest::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

QString OAICreateAccessLogSubscriptionRequest::getResourceIdentifier() const {
    return m_resource_identifier;
}
void OAICreateAccessLogSubscriptionRequest::setResourceIdentifier(const QString &resource_identifier) {
    m_resource_identifier = resource_identifier;
    m_resource_identifier_isSet = true;
}

bool OAICreateAccessLogSubscriptionRequest::is_resource_identifier_Set() const{
    return m_resource_identifier_isSet;
}

bool OAICreateAccessLogSubscriptionRequest::is_resource_identifier_Valid() const{
    return m_resource_identifier_isValid;
}

QMap OAICreateAccessLogSubscriptionRequest::getTags() const {
    return m_tags;
}
void OAICreateAccessLogSubscriptionRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAccessLogSubscriptionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAccessLogSubscriptionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAccessLogSubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessLogSubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_arn_isValid && m_resource_identifier_isValid && true;
}

} // namespace OpenAPI
