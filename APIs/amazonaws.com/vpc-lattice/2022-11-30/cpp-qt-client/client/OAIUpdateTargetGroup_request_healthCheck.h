/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateTargetGroup_request_healthCheck.h
 *
 * The health check configuration of a target group. Health check configurations aren&#39;t used for &lt;code&gt;LAMBDA&lt;/code&gt; and &lt;code&gt;ALB&lt;/code&gt; target groups.
 */

#ifndef OAIUpdateTargetGroup_request_healthCheck_H
#define OAIUpdateTargetGroup_request_healthCheck_H

#include <QJsonObject>

#include "OAIHealthCheckProtocolVersion.h"
#include "OAITargetGroupProtocol.h"
#include "OAIUpdateTargetGroup_request_healthCheck_matcher.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateTargetGroup_request_healthCheck_matcher;

class OAIUpdateTargetGroup_request_healthCheck : public OAIObject {
public:
    OAIUpdateTargetGroup_request_healthCheck();
    OAIUpdateTargetGroup_request_healthCheck(QString json);
    ~OAIUpdateTargetGroup_request_healthCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    qint32 getHealthCheckIntervalSeconds() const;
    void setHealthCheckIntervalSeconds(const qint32 &health_check_interval_seconds);
    bool is_health_check_interval_seconds_Set() const;
    bool is_health_check_interval_seconds_Valid() const;

    qint32 getHealthCheckTimeoutSeconds() const;
    void setHealthCheckTimeoutSeconds(const qint32 &health_check_timeout_seconds);
    bool is_health_check_timeout_seconds_Set() const;
    bool is_health_check_timeout_seconds_Valid() const;

    qint32 getHealthyThresholdCount() const;
    void setHealthyThresholdCount(const qint32 &healthy_threshold_count);
    bool is_healthy_threshold_count_Set() const;
    bool is_healthy_threshold_count_Valid() const;

    OAIUpdateTargetGroup_request_healthCheck_matcher getMatcher() const;
    void setMatcher(const OAIUpdateTargetGroup_request_healthCheck_matcher &matcher);
    bool is_matcher_Set() const;
    bool is_matcher_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAITargetGroupProtocol getProtocol() const;
    void setProtocol(const OAITargetGroupProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    OAIHealthCheckProtocolVersion getProtocolVersion() const;
    void setProtocolVersion(const OAIHealthCheckProtocolVersion &protocol_version);
    bool is_protocol_version_Set() const;
    bool is_protocol_version_Valid() const;

    qint32 getUnhealthyThresholdCount() const;
    void setUnhealthyThresholdCount(const qint32 &unhealthy_threshold_count);
    bool is_unhealthy_threshold_count_Set() const;
    bool is_unhealthy_threshold_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    qint32 m_health_check_interval_seconds;
    bool m_health_check_interval_seconds_isSet;
    bool m_health_check_interval_seconds_isValid;

    qint32 m_health_check_timeout_seconds;
    bool m_health_check_timeout_seconds_isSet;
    bool m_health_check_timeout_seconds_isValid;

    qint32 m_healthy_threshold_count;
    bool m_healthy_threshold_count_isSet;
    bool m_healthy_threshold_count_isValid;

    OAIUpdateTargetGroup_request_healthCheck_matcher m_matcher;
    bool m_matcher_isSet;
    bool m_matcher_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAITargetGroupProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    OAIHealthCheckProtocolVersion m_protocol_version;
    bool m_protocol_version_isSet;
    bool m_protocol_version_isValid;

    qint32 m_unhealthy_threshold_count;
    bool m_unhealthy_threshold_count_isSet;
    bool m_unhealthy_threshold_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateTargetGroup_request_healthCheck)

#endif // OAIUpdateTargetGroup_request_healthCheck_H
