/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceNetworkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceNetworkRequest::OAICreateServiceNetworkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceNetworkRequest::OAICreateServiceNetworkRequest() {
    this->initializeModel();
}

OAICreateServiceNetworkRequest::~OAICreateServiceNetworkRequest() {}

void OAICreateServiceNetworkRequest::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateServiceNetworkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceNetworkRequest::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateServiceNetworkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceNetworkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIAuthType OAICreateServiceNetworkRequest::getAuthType() const {
    return m_auth_type;
}
void OAICreateServiceNetworkRequest::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAICreateServiceNetworkRequest::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAICreateServiceNetworkRequest::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAICreateServiceNetworkRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateServiceNetworkRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateServiceNetworkRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateServiceNetworkRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateServiceNetworkRequest::getName() const {
    return m_name;
}
void OAICreateServiceNetworkRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateServiceNetworkRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateServiceNetworkRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAICreateServiceNetworkRequest::getTags() const {
    return m_tags;
}
void OAICreateServiceNetworkRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateServiceNetworkRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateServiceNetworkRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateServiceNetworkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceNetworkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
