/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeregisterTargets_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeregisterTargets_request::OAIDeregisterTargets_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeregisterTargets_request::OAIDeregisterTargets_request() {
    this->initializeModel();
}

OAIDeregisterTargets_request::~OAIDeregisterTargets_request() {}

void OAIDeregisterTargets_request::initializeModel() {

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIDeregisterTargets_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeregisterTargets_request::fromJsonObject(QJsonObject json) {

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAIDeregisterTargets_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeregisterTargets_request::asJsonObject() const {
    QJsonObject obj;
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QList<OAITarget> OAIDeregisterTargets_request::getTargets() const {
    return m_targets;
}
void OAIDeregisterTargets_request::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIDeregisterTargets_request::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIDeregisterTargets_request::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIDeregisterTargets_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeregisterTargets_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_targets_isValid && true;
}

} // namespace OpenAPI
