/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAccessLogSubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAccessLogSubscriptionRequest::OAIUpdateAccessLogSubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAccessLogSubscriptionRequest::OAIUpdateAccessLogSubscriptionRequest() {
    this->initializeModel();
}

OAIUpdateAccessLogSubscriptionRequest::~OAIUpdateAccessLogSubscriptionRequest() {}

void OAIUpdateAccessLogSubscriptionRequest::initializeModel() {

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;
}

void OAIUpdateAccessLogSubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAccessLogSubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("destinationArn")]);
    m_destination_arn_isSet = !json[QString("destinationArn")].isNull() && m_destination_arn_isValid;
}

QString OAIUpdateAccessLogSubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAccessLogSubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_arn_isSet) {
        obj.insert(QString("destinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    return obj;
}

QString OAIUpdateAccessLogSubscriptionRequest::getDestinationArn() const {
    return m_destination_arn;
}
void OAIUpdateAccessLogSubscriptionRequest::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAIUpdateAccessLogSubscriptionRequest::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAIUpdateAccessLogSubscriptionRequest::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

bool OAIUpdateAccessLogSubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAccessLogSubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_arn_isValid && true;
}

} // namespace OpenAPI
