/**
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleUpdateFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleUpdateFailure::OAIRuleUpdateFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleUpdateFailure::OAIRuleUpdateFailure() {
    this->initializeModel();
}

OAIRuleUpdateFailure::~OAIRuleUpdateFailure() {}

void OAIRuleUpdateFailure::initializeModel() {

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_rule_identifier_isSet = false;
    m_rule_identifier_isValid = false;
}

void OAIRuleUpdateFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleUpdateFailure::fromJsonObject(QJsonObject json) {

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;

    m_rule_identifier_isValid = ::OpenAPI::fromJsonValue(m_rule_identifier, json[QString("ruleIdentifier")]);
    m_rule_identifier_isSet = !json[QString("ruleIdentifier")].isNull() && m_rule_identifier_isValid;
}

QString OAIRuleUpdateFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleUpdateFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_code_isSet) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_rule_identifier_isSet) {
        obj.insert(QString("ruleIdentifier"), ::OpenAPI::toJsonValue(m_rule_identifier));
    }
    return obj;
}

QString OAIRuleUpdateFailure::getFailureCode() const {
    return m_failure_code;
}
void OAIRuleUpdateFailure::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIRuleUpdateFailure::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIRuleUpdateFailure::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIRuleUpdateFailure::getFailureMessage() const {
    return m_failure_message;
}
void OAIRuleUpdateFailure::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIRuleUpdateFailure::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIRuleUpdateFailure::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

QString OAIRuleUpdateFailure::getRuleIdentifier() const {
    return m_rule_identifier;
}
void OAIRuleUpdateFailure::setRuleIdentifier(const QString &rule_identifier) {
    m_rule_identifier = rule_identifier;
    m_rule_identifier_isSet = true;
}

bool OAIRuleUpdateFailure::is_rule_identifier_Set() const{
    return m_rule_identifier_isSet;
}

bool OAIRuleUpdateFailure::is_rule_identifier_Valid() const{
    return m_rule_identifier_isValid;
}

bool OAIRuleUpdateFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleUpdateFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
