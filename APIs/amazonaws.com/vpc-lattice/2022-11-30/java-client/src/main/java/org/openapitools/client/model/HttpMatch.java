/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpMatchPathMatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes criteria that can be applied to incoming requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpMatch {
  public static final String SERIALIZED_NAME_HEADER_MATCHES = "headerMatches";
  @SerializedName(SERIALIZED_NAME_HEADER_MATCHES)
  private List headerMatches;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PATH_MATCH = "pathMatch";
  @SerializedName(SERIALIZED_NAME_PATH_MATCH)
  private HttpMatchPathMatch pathMatch;

  public HttpMatch() {
  }

  public HttpMatch headerMatches(List headerMatches) {
    this.headerMatches = headerMatches;
    return this;
  }

  /**
   * Get headerMatches
   * @return headerMatches
   */
  @javax.annotation.Nullable
  public List getHeaderMatches() {
    return headerMatches;
  }

  public void setHeaderMatches(List headerMatches) {
    this.headerMatches = headerMatches;
  }


  public HttpMatch method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public HttpMatch pathMatch(HttpMatchPathMatch pathMatch) {
    this.pathMatch = pathMatch;
    return this;
  }

  /**
   * Get pathMatch
   * @return pathMatch
   */
  @javax.annotation.Nullable
  public HttpMatchPathMatch getPathMatch() {
    return pathMatch;
  }

  public void setPathMatch(HttpMatchPathMatch pathMatch) {
    this.pathMatch = pathMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpMatch httpMatch = (HttpMatch) o;
    return Objects.equals(this.headerMatches, httpMatch.headerMatches) &&
        Objects.equals(this.method, httpMatch.method) &&
        Objects.equals(this.pathMatch, httpMatch.pathMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerMatches, method, pathMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpMatch {\n");
    sb.append("    headerMatches: ").append(toIndentedString(headerMatches)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    pathMatch: ").append(toIndentedString(pathMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("headerMatches");
    openapiFields.add("method");
    openapiFields.add("pathMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpMatch is not found in the empty JSON string", HttpMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `headerMatches`
      if (jsonObj.get("headerMatches") != null && !jsonObj.get("headerMatches").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("headerMatches"));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("method"));
      }
      // validate the optional field `pathMatch`
      if (jsonObj.get("pathMatch") != null && !jsonObj.get("pathMatch").isJsonNull()) {
        HttpMatchPathMatch.validateJsonElement(jsonObj.get("pathMatch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpMatch>() {
           @Override
           public void write(JsonWriter out, HttpMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpMatch
   * @throws IOException if the JSON string is invalid with respect to HttpMatch
   */
  public static HttpMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpMatch.class);
  }

  /**
   * Convert an instance of HttpMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

