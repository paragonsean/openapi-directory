/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateRuleRequestActionFixedResponse;
import org.openapitools.client.model.CreateRuleRequestActionForward;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the action for a rule. Each rule must include exactly one of the following types of actions: &lt;code&gt;forward &lt;/code&gt;or &lt;code&gt;fixed-response&lt;/code&gt;, and it must be the last action to be performed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRuleRequestAction {
  public static final String SERIALIZED_NAME_FIXED_RESPONSE = "fixedResponse";
  @SerializedName(SERIALIZED_NAME_FIXED_RESPONSE)
  private CreateRuleRequestActionFixedResponse fixedResponse;

  public static final String SERIALIZED_NAME_FORWARD = "forward";
  @SerializedName(SERIALIZED_NAME_FORWARD)
  private CreateRuleRequestActionForward forward;

  public CreateRuleRequestAction() {
  }

  public CreateRuleRequestAction fixedResponse(CreateRuleRequestActionFixedResponse fixedResponse) {
    this.fixedResponse = fixedResponse;
    return this;
  }

  /**
   * Get fixedResponse
   * @return fixedResponse
   */
  @javax.annotation.Nullable
  public CreateRuleRequestActionFixedResponse getFixedResponse() {
    return fixedResponse;
  }

  public void setFixedResponse(CreateRuleRequestActionFixedResponse fixedResponse) {
    this.fixedResponse = fixedResponse;
  }


  public CreateRuleRequestAction forward(CreateRuleRequestActionForward forward) {
    this.forward = forward;
    return this;
  }

  /**
   * Get forward
   * @return forward
   */
  @javax.annotation.Nullable
  public CreateRuleRequestActionForward getForward() {
    return forward;
  }

  public void setForward(CreateRuleRequestActionForward forward) {
    this.forward = forward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRuleRequestAction createRuleRequestAction = (CreateRuleRequestAction) o;
    return Objects.equals(this.fixedResponse, createRuleRequestAction.fixedResponse) &&
        Objects.equals(this.forward, createRuleRequestAction.forward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedResponse, forward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRuleRequestAction {\n");
    sb.append("    fixedResponse: ").append(toIndentedString(fixedResponse)).append("\n");
    sb.append("    forward: ").append(toIndentedString(forward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixedResponse");
    openapiFields.add("forward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRuleRequestAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRuleRequestAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRuleRequestAction is not found in the empty JSON string", CreateRuleRequestAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRuleRequestAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRuleRequestAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fixedResponse`
      if (jsonObj.get("fixedResponse") != null && !jsonObj.get("fixedResponse").isJsonNull()) {
        CreateRuleRequestActionFixedResponse.validateJsonElement(jsonObj.get("fixedResponse"));
      }
      // validate the optional field `forward`
      if (jsonObj.get("forward") != null && !jsonObj.get("forward").isJsonNull()) {
        CreateRuleRequestActionForward.validateJsonElement(jsonObj.get("forward"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRuleRequestAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRuleRequestAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRuleRequestAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRuleRequestAction.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRuleRequestAction>() {
           @Override
           public void write(JsonWriter out, CreateRuleRequestAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRuleRequestAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRuleRequestAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRuleRequestAction
   * @throws IOException if the JSON string is invalid with respect to CreateRuleRequestAction
   */
  public static CreateRuleRequestAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRuleRequestAction.class);
  }

  /**
   * Convert an instance of CreateRuleRequestAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

