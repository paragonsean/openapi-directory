/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a rule update that failed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleUpdateFailure {
  public static final String SERIALIZED_NAME_FAILURE_CODE = "failureCode";
  @SerializedName(SERIALIZED_NAME_FAILURE_CODE)
  private String failureCode;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "failureMessage";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  private String failureMessage;

  public static final String SERIALIZED_NAME_RULE_IDENTIFIER = "ruleIdentifier";
  @SerializedName(SERIALIZED_NAME_RULE_IDENTIFIER)
  private String ruleIdentifier;

  public RuleUpdateFailure() {
  }

  public RuleUpdateFailure failureCode(String failureCode) {
    this.failureCode = failureCode;
    return this;
  }

  /**
   * Get failureCode
   * @return failureCode
   */
  @javax.annotation.Nullable
  public String getFailureCode() {
    return failureCode;
  }

  public void setFailureCode(String failureCode) {
    this.failureCode = failureCode;
  }


  public RuleUpdateFailure failureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

  /**
   * Get failureMessage
   * @return failureMessage
   */
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }

  public void setFailureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
  }


  public RuleUpdateFailure ruleIdentifier(String ruleIdentifier) {
    this.ruleIdentifier = ruleIdentifier;
    return this;
  }

  /**
   * Get ruleIdentifier
   * @return ruleIdentifier
   */
  @javax.annotation.Nullable
  public String getRuleIdentifier() {
    return ruleIdentifier;
  }

  public void setRuleIdentifier(String ruleIdentifier) {
    this.ruleIdentifier = ruleIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleUpdateFailure ruleUpdateFailure = (RuleUpdateFailure) o;
    return Objects.equals(this.failureCode, ruleUpdateFailure.failureCode) &&
        Objects.equals(this.failureMessage, ruleUpdateFailure.failureMessage) &&
        Objects.equals(this.ruleIdentifier, ruleUpdateFailure.ruleIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureCode, failureMessage, ruleIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleUpdateFailure {\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    ruleIdentifier: ").append(toIndentedString(ruleIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failureCode");
    openapiFields.add("failureMessage");
    openapiFields.add("ruleIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleUpdateFailure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleUpdateFailure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleUpdateFailure is not found in the empty JSON string", RuleUpdateFailure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleUpdateFailure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleUpdateFailure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failureCode`
      if (jsonObj.get("failureCode") != null && !jsonObj.get("failureCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failureCode"));
      }
      // validate the optional field `failureMessage`
      if (jsonObj.get("failureMessage") != null && !jsonObj.get("failureMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failureMessage"));
      }
      // validate the optional field `ruleIdentifier`
      if (jsonObj.get("ruleIdentifier") != null && !jsonObj.get("ruleIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ruleIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleUpdateFailure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleUpdateFailure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleUpdateFailure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleUpdateFailure.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleUpdateFailure>() {
           @Override
           public void write(JsonWriter out, RuleUpdateFailure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleUpdateFailure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleUpdateFailure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleUpdateFailure
   * @throws IOException if the JSON string is invalid with respect to RuleUpdateFailure
   */
  public static RuleUpdateFailure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleUpdateFailure.class);
  }

  /**
   * Convert an instance of RuleUpdateFailure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

