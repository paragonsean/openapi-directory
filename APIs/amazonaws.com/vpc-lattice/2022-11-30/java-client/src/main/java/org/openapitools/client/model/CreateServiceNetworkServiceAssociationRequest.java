/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceNetworkServiceAssociationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceNetworkServiceAssociationRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SERVICE_IDENTIFIER = "serviceIdentifier";
  @SerializedName(SERIALIZED_NAME_SERVICE_IDENTIFIER)
  private String serviceIdentifier;

  public static final String SERIALIZED_NAME_SERVICE_NETWORK_IDENTIFIER = "serviceNetworkIdentifier";
  @SerializedName(SERIALIZED_NAME_SERVICE_NETWORK_IDENTIFIER)
  private String serviceNetworkIdentifier;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateServiceNetworkServiceAssociationRequest() {
  }

  public CreateServiceNetworkServiceAssociationRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren&#39;t identical, the retry fails.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateServiceNetworkServiceAssociationRequest serviceIdentifier(String serviceIdentifier) {
    this.serviceIdentifier = serviceIdentifier;
    return this;
  }

  /**
   * The ID or Amazon Resource Name (ARN) of the service.
   * @return serviceIdentifier
   */
  @javax.annotation.Nonnull
  public String getServiceIdentifier() {
    return serviceIdentifier;
  }

  public void setServiceIdentifier(String serviceIdentifier) {
    this.serviceIdentifier = serviceIdentifier;
  }


  public CreateServiceNetworkServiceAssociationRequest serviceNetworkIdentifier(String serviceNetworkIdentifier) {
    this.serviceNetworkIdentifier = serviceNetworkIdentifier;
    return this;
  }

  /**
   * The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.
   * @return serviceNetworkIdentifier
   */
  @javax.annotation.Nonnull
  public String getServiceNetworkIdentifier() {
    return serviceNetworkIdentifier;
  }

  public void setServiceNetworkIdentifier(String serviceNetworkIdentifier) {
    this.serviceNetworkIdentifier = serviceNetworkIdentifier;
  }


  public CreateServiceNetworkServiceAssociationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateServiceNetworkServiceAssociationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags for the association.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceNetworkServiceAssociationRequest createServiceNetworkServiceAssociationRequest = (CreateServiceNetworkServiceAssociationRequest) o;
    return Objects.equals(this.clientToken, createServiceNetworkServiceAssociationRequest.clientToken) &&
        Objects.equals(this.serviceIdentifier, createServiceNetworkServiceAssociationRequest.serviceIdentifier) &&
        Objects.equals(this.serviceNetworkIdentifier, createServiceNetworkServiceAssociationRequest.serviceNetworkIdentifier) &&
        Objects.equals(this.tags, createServiceNetworkServiceAssociationRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, serviceIdentifier, serviceNetworkIdentifier, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceNetworkServiceAssociationRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    serviceIdentifier: ").append(toIndentedString(serviceIdentifier)).append("\n");
    sb.append("    serviceNetworkIdentifier: ").append(toIndentedString(serviceNetworkIdentifier)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("serviceIdentifier");
    openapiFields.add("serviceNetworkIdentifier");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serviceIdentifier");
    openapiRequiredFields.add("serviceNetworkIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceNetworkServiceAssociationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceNetworkServiceAssociationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceNetworkServiceAssociationRequest is not found in the empty JSON string", CreateServiceNetworkServiceAssociationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceNetworkServiceAssociationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceNetworkServiceAssociationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateServiceNetworkServiceAssociationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("serviceIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceIdentifier").toString()));
      }
      if (!jsonObj.get("serviceNetworkIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceNetworkIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceNetworkIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceNetworkServiceAssociationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceNetworkServiceAssociationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceNetworkServiceAssociationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceNetworkServiceAssociationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceNetworkServiceAssociationRequest>() {
           @Override
           public void write(JsonWriter out, CreateServiceNetworkServiceAssociationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceNetworkServiceAssociationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceNetworkServiceAssociationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceNetworkServiceAssociationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateServiceNetworkServiceAssociationRequest
   */
  public static CreateServiceNetworkServiceAssociationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceNetworkServiceAssociationRequest.class);
  }

  /**
   * Convert an instance of CreateServiceNetworkServiceAssociationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

