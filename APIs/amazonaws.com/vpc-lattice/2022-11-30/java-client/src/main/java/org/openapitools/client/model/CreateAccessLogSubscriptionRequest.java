/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccessLogSubscriptionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccessLogSubscriptionRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESTINATION_ARN = "destinationArn";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ARN)
  private String destinationArn;

  public static final String SERIALIZED_NAME_RESOURCE_IDENTIFIER = "resourceIdentifier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDENTIFIER)
  private String resourceIdentifier;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateAccessLogSubscriptionRequest() {
  }

  public CreateAccessLogSubscriptionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren&#39;t identical, the retry fails.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateAccessLogSubscriptionRequest destinationArn(String destinationArn) {
    this.destinationArn = destinationArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the destination. The supported destination types are CloudWatch Log groups, Kinesis Data Firehose delivery streams, and Amazon S3 buckets.
   * @return destinationArn
   */
  @javax.annotation.Nonnull
  public String getDestinationArn() {
    return destinationArn;
  }

  public void setDestinationArn(String destinationArn) {
    this.destinationArn = destinationArn;
  }


  public CreateAccessLogSubscriptionRequest resourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
    return this;
  }

  /**
   * The ID or Amazon Resource Name (ARN) of the service network or service.
   * @return resourceIdentifier
   */
  @javax.annotation.Nonnull
  public String getResourceIdentifier() {
    return resourceIdentifier;
  }

  public void setResourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
  }


  public CreateAccessLogSubscriptionRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAccessLogSubscriptionRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags for the access log subscription.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccessLogSubscriptionRequest createAccessLogSubscriptionRequest = (CreateAccessLogSubscriptionRequest) o;
    return Objects.equals(this.clientToken, createAccessLogSubscriptionRequest.clientToken) &&
        Objects.equals(this.destinationArn, createAccessLogSubscriptionRequest.destinationArn) &&
        Objects.equals(this.resourceIdentifier, createAccessLogSubscriptionRequest.resourceIdentifier) &&
        Objects.equals(this.tags, createAccessLogSubscriptionRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, destinationArn, resourceIdentifier, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccessLogSubscriptionRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    destinationArn: ").append(toIndentedString(destinationArn)).append("\n");
    sb.append("    resourceIdentifier: ").append(toIndentedString(resourceIdentifier)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("destinationArn");
    openapiFields.add("resourceIdentifier");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationArn");
    openapiRequiredFields.add("resourceIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccessLogSubscriptionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccessLogSubscriptionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccessLogSubscriptionRequest is not found in the empty JSON string", CreateAccessLogSubscriptionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccessLogSubscriptionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccessLogSubscriptionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccessLogSubscriptionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("destinationArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationArn").toString()));
      }
      if (!jsonObj.get("resourceIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccessLogSubscriptionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccessLogSubscriptionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccessLogSubscriptionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccessLogSubscriptionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccessLogSubscriptionRequest>() {
           @Override
           public void write(JsonWriter out, CreateAccessLogSubscriptionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccessLogSubscriptionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccessLogSubscriptionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccessLogSubscriptionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAccessLogSubscriptionRequest
   */
  public static CreateAccessLogSubscriptionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccessLogSubscriptionRequest.class);
  }

  /**
   * Convert an instance of CreateAccessLogSubscriptionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

