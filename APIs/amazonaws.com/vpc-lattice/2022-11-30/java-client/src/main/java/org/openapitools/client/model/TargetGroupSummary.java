/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpAddressType;
import org.openapitools.client.model.TargetGroupProtocol;
import org.openapitools.client.model.TargetGroupStatus;
import org.openapitools.client.model.TargetGroupType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about a target group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetGroupSummary {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "ipAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private IpAddressType ipAddressType;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private TargetGroupProtocol protocol;

  public static final String SERIALIZED_NAME_SERVICE_ARNS = "serviceArns";
  @SerializedName(SERIALIZED_NAME_SERVICE_ARNS)
  private List serviceArns;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TargetGroupStatus status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TargetGroupType type;

  public static final String SERIALIZED_NAME_VPC_IDENTIFIER = "vpcIdentifier";
  @SerializedName(SERIALIZED_NAME_VPC_IDENTIFIER)
  private String vpcIdentifier;

  public TargetGroupSummary() {
  }

  public TargetGroupSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public TargetGroupSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TargetGroupSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TargetGroupSummary ipAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public IpAddressType getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
  }


  public TargetGroupSummary lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public TargetGroupSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TargetGroupSummary port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public TargetGroupSummary protocol(TargetGroupProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public TargetGroupProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(TargetGroupProtocol protocol) {
    this.protocol = protocol;
  }


  public TargetGroupSummary serviceArns(List serviceArns) {
    this.serviceArns = serviceArns;
    return this;
  }

  /**
   * Get serviceArns
   * @return serviceArns
   */
  @javax.annotation.Nullable
  public List getServiceArns() {
    return serviceArns;
  }

  public void setServiceArns(List serviceArns) {
    this.serviceArns = serviceArns;
  }


  public TargetGroupSummary status(TargetGroupStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TargetGroupStatus getStatus() {
    return status;
  }

  public void setStatus(TargetGroupStatus status) {
    this.status = status;
  }


  public TargetGroupSummary type(TargetGroupType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TargetGroupType getType() {
    return type;
  }

  public void setType(TargetGroupType type) {
    this.type = type;
  }


  public TargetGroupSummary vpcIdentifier(String vpcIdentifier) {
    this.vpcIdentifier = vpcIdentifier;
    return this;
  }

  /**
   * Get vpcIdentifier
   * @return vpcIdentifier
   */
  @javax.annotation.Nullable
  public String getVpcIdentifier() {
    return vpcIdentifier;
  }

  public void setVpcIdentifier(String vpcIdentifier) {
    this.vpcIdentifier = vpcIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetGroupSummary targetGroupSummary = (TargetGroupSummary) o;
    return Objects.equals(this.arn, targetGroupSummary.arn) &&
        Objects.equals(this.createdAt, targetGroupSummary.createdAt) &&
        Objects.equals(this.id, targetGroupSummary.id) &&
        Objects.equals(this.ipAddressType, targetGroupSummary.ipAddressType) &&
        Objects.equals(this.lastUpdatedAt, targetGroupSummary.lastUpdatedAt) &&
        Objects.equals(this.name, targetGroupSummary.name) &&
        Objects.equals(this.port, targetGroupSummary.port) &&
        Objects.equals(this.protocol, targetGroupSummary.protocol) &&
        Objects.equals(this.serviceArns, targetGroupSummary.serviceArns) &&
        Objects.equals(this.status, targetGroupSummary.status) &&
        Objects.equals(this.type, targetGroupSummary.type) &&
        Objects.equals(this.vpcIdentifier, targetGroupSummary.vpcIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, createdAt, id, ipAddressType, lastUpdatedAt, name, port, protocol, serviceArns, status, type, vpcIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetGroupSummary {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    serviceArns: ").append(toIndentedString(serviceArns)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vpcIdentifier: ").append(toIndentedString(vpcIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("createdAt");
    openapiFields.add("id");
    openapiFields.add("ipAddressType");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("name");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("serviceArns");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("vpcIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetGroupSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetGroupSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetGroupSummary is not found in the empty JSON string", TargetGroupSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetGroupSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetGroupSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `ipAddressType`
      if (jsonObj.get("ipAddressType") != null && !jsonObj.get("ipAddressType").isJsonNull()) {
        IpAddressType.validateJsonElement(jsonObj.get("ipAddressType"));
      }
      // validate the optional field `lastUpdatedAt`
      if (jsonObj.get("lastUpdatedAt") != null && !jsonObj.get("lastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedAt"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `port`
      if (jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("port"));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        TargetGroupProtocol.validateJsonElement(jsonObj.get("protocol"));
      }
      // validate the optional field `serviceArns`
      if (jsonObj.get("serviceArns") != null && !jsonObj.get("serviceArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("serviceArns"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TargetGroupStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TargetGroupType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `vpcIdentifier`
      if (jsonObj.get("vpcIdentifier") != null && !jsonObj.get("vpcIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vpcIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetGroupSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetGroupSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetGroupSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetGroupSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetGroupSummary>() {
           @Override
           public void write(JsonWriter out, TargetGroupSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetGroupSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetGroupSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetGroupSummary
   * @throws IOException if the JSON string is invalid with respect to TargetGroupSummary
   */
  public static TargetGroupSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetGroupSummary.class);
  }

  /**
   * Convert an instance of TargetGroupSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

