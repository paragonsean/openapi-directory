/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateRuleRequestMatchHttpMatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRuleResponseMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRuleResponseMatch {
  public static final String SERIALIZED_NAME_HTTP_MATCH = "httpMatch";
  @SerializedName(SERIALIZED_NAME_HTTP_MATCH)
  private CreateRuleRequestMatchHttpMatch httpMatch;

  public CreateRuleResponseMatch() {
  }

  public CreateRuleResponseMatch httpMatch(CreateRuleRequestMatchHttpMatch httpMatch) {
    this.httpMatch = httpMatch;
    return this;
  }

  /**
   * Get httpMatch
   * @return httpMatch
   */
  @javax.annotation.Nullable
  public CreateRuleRequestMatchHttpMatch getHttpMatch() {
    return httpMatch;
  }

  public void setHttpMatch(CreateRuleRequestMatchHttpMatch httpMatch) {
    this.httpMatch = httpMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRuleResponseMatch createRuleResponseMatch = (CreateRuleResponseMatch) o;
    return Objects.equals(this.httpMatch, createRuleResponseMatch.httpMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRuleResponseMatch {\n");
    sb.append("    httpMatch: ").append(toIndentedString(httpMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRuleResponseMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRuleResponseMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRuleResponseMatch is not found in the empty JSON string", CreateRuleResponseMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRuleResponseMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRuleResponseMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `httpMatch`
      if (jsonObj.get("httpMatch") != null && !jsonObj.get("httpMatch").isJsonNull()) {
        CreateRuleRequestMatchHttpMatch.validateJsonElement(jsonObj.get("httpMatch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRuleResponseMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRuleResponseMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRuleResponseMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRuleResponseMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRuleResponseMatch>() {
           @Override
           public void write(JsonWriter out, CreateRuleResponseMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRuleResponseMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRuleResponseMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRuleResponseMatch
   * @throws IOException if the JSON string is invalid with respect to CreateRuleResponseMatch
   */
  public static CreateRuleResponseMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRuleResponseMatch.class);
  }

  /**
   * Convert an instance of CreateRuleResponseMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

