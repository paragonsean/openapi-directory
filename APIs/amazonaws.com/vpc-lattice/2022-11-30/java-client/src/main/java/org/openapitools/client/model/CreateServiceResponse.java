/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthType;
import org.openapitools.client.model.CreateServiceResponseDnsEntry;
import org.openapitools.client.model.ServiceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceResponse {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthType authType;

  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "certificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN_NAME = "customDomainName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN_NAME)
  private String customDomainName;

  public static final String SERIALIZED_NAME_DNS_ENTRY = "dnsEntry";
  @SerializedName(SERIALIZED_NAME_DNS_ENTRY)
  private CreateServiceResponseDnsEntry dnsEntry;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ServiceStatus status;

  public CreateServiceResponse() {
  }

  public CreateServiceResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateServiceResponse authType(AuthType authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Get authType
   * @return authType
   */
  @javax.annotation.Nullable
  public AuthType getAuthType() {
    return authType;
  }

  public void setAuthType(AuthType authType) {
    this.authType = authType;
  }


  public CreateServiceResponse certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public CreateServiceResponse customDomainName(String customDomainName) {
    this.customDomainName = customDomainName;
    return this;
  }

  /**
   * Get customDomainName
   * @return customDomainName
   */
  @javax.annotation.Nullable
  public String getCustomDomainName() {
    return customDomainName;
  }

  public void setCustomDomainName(String customDomainName) {
    this.customDomainName = customDomainName;
  }


  public CreateServiceResponse dnsEntry(CreateServiceResponseDnsEntry dnsEntry) {
    this.dnsEntry = dnsEntry;
    return this;
  }

  /**
   * Get dnsEntry
   * @return dnsEntry
   */
  @javax.annotation.Nullable
  public CreateServiceResponseDnsEntry getDnsEntry() {
    return dnsEntry;
  }

  public void setDnsEntry(CreateServiceResponseDnsEntry dnsEntry) {
    this.dnsEntry = dnsEntry;
  }


  public CreateServiceResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateServiceResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateServiceResponse status(ServiceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ServiceStatus getStatus() {
    return status;
  }

  public void setStatus(ServiceStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceResponse createServiceResponse = (CreateServiceResponse) o;
    return Objects.equals(this.arn, createServiceResponse.arn) &&
        Objects.equals(this.authType, createServiceResponse.authType) &&
        Objects.equals(this.certificateArn, createServiceResponse.certificateArn) &&
        Objects.equals(this.customDomainName, createServiceResponse.customDomainName) &&
        Objects.equals(this.dnsEntry, createServiceResponse.dnsEntry) &&
        Objects.equals(this.id, createServiceResponse.id) &&
        Objects.equals(this.name, createServiceResponse.name) &&
        Objects.equals(this.status, createServiceResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, authType, certificateArn, customDomainName, dnsEntry, id, name, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    customDomainName: ").append(toIndentedString(customDomainName)).append("\n");
    sb.append("    dnsEntry: ").append(toIndentedString(dnsEntry)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("authType");
    openapiFields.add("certificateArn");
    openapiFields.add("customDomainName");
    openapiFields.add("dnsEntry");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceResponse is not found in the empty JSON string", CreateServiceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `authType`
      if (jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) {
        AuthType.validateJsonElement(jsonObj.get("authType"));
      }
      // validate the optional field `certificateArn`
      if (jsonObj.get("certificateArn") != null && !jsonObj.get("certificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificateArn"));
      }
      // validate the optional field `customDomainName`
      if (jsonObj.get("customDomainName") != null && !jsonObj.get("customDomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("customDomainName"));
      }
      // validate the optional field `dnsEntry`
      if (jsonObj.get("dnsEntry") != null && !jsonObj.get("dnsEntry").isJsonNull()) {
        CreateServiceResponseDnsEntry.validateJsonElement(jsonObj.get("dnsEntry"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ServiceStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceResponse>() {
           @Override
           public void write(JsonWriter out, CreateServiceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceResponse
   * @throws IOException if the JSON string is invalid with respect to CreateServiceResponse
   */
  public static CreateServiceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceResponse.class);
  }

  /**
   * Convert an instance of CreateServiceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

