/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateTargetGroupRequestConfigHealthCheck;
import org.openapitools.client.model.IpAddressType;
import org.openapitools.client.model.TargetGroupProtocol;
import org.openapitools.client.model.TargetGroupProtocolVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the configuration of a target group. Lambda functions don&#39;t support target group configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:37.168630-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetGroupConfig {
  public static final String SERIALIZED_NAME_HEALTH_CHECK = "healthCheck";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK)
  private CreateTargetGroupRequestConfigHealthCheck healthCheck;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "ipAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private IpAddressType ipAddressType;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private TargetGroupProtocol protocol;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "protocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private TargetGroupProtocolVersion protocolVersion;

  public static final String SERIALIZED_NAME_VPC_IDENTIFIER = "vpcIdentifier";
  @SerializedName(SERIALIZED_NAME_VPC_IDENTIFIER)
  private String vpcIdentifier;

  public TargetGroupConfig() {
  }

  public TargetGroupConfig healthCheck(CreateTargetGroupRequestConfigHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
    return this;
  }

  /**
   * Get healthCheck
   * @return healthCheck
   */
  @javax.annotation.Nullable
  public CreateTargetGroupRequestConfigHealthCheck getHealthCheck() {
    return healthCheck;
  }

  public void setHealthCheck(CreateTargetGroupRequestConfigHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
  }


  public TargetGroupConfig ipAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public IpAddressType getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
  }


  public TargetGroupConfig port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public TargetGroupConfig protocol(TargetGroupProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public TargetGroupProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(TargetGroupProtocol protocol) {
    this.protocol = protocol;
  }


  public TargetGroupConfig protocolVersion(TargetGroupProtocolVersion protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * Get protocolVersion
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public TargetGroupProtocolVersion getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(TargetGroupProtocolVersion protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public TargetGroupConfig vpcIdentifier(String vpcIdentifier) {
    this.vpcIdentifier = vpcIdentifier;
    return this;
  }

  /**
   * Get vpcIdentifier
   * @return vpcIdentifier
   */
  @javax.annotation.Nonnull
  public String getVpcIdentifier() {
    return vpcIdentifier;
  }

  public void setVpcIdentifier(String vpcIdentifier) {
    this.vpcIdentifier = vpcIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetGroupConfig targetGroupConfig = (TargetGroupConfig) o;
    return Objects.equals(this.healthCheck, targetGroupConfig.healthCheck) &&
        Objects.equals(this.ipAddressType, targetGroupConfig.ipAddressType) &&
        Objects.equals(this.port, targetGroupConfig.port) &&
        Objects.equals(this.protocol, targetGroupConfig.protocol) &&
        Objects.equals(this.protocolVersion, targetGroupConfig.protocolVersion) &&
        Objects.equals(this.vpcIdentifier, targetGroupConfig.vpcIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthCheck, ipAddressType, port, protocol, protocolVersion, vpcIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetGroupConfig {\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    vpcIdentifier: ").append(toIndentedString(vpcIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthCheck");
    openapiFields.add("ipAddressType");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("protocolVersion");
    openapiFields.add("vpcIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("vpcIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetGroupConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetGroupConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetGroupConfig is not found in the empty JSON string", TargetGroupConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetGroupConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetGroupConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TargetGroupConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `healthCheck`
      if (jsonObj.get("healthCheck") != null && !jsonObj.get("healthCheck").isJsonNull()) {
        CreateTargetGroupRequestConfigHealthCheck.validateJsonElement(jsonObj.get("healthCheck"));
      }
      // validate the optional field `ipAddressType`
      if (jsonObj.get("ipAddressType") != null && !jsonObj.get("ipAddressType").isJsonNull()) {
        IpAddressType.validateJsonElement(jsonObj.get("ipAddressType"));
      }
      // validate the required field `port`
      Integer.validateJsonElement(jsonObj.get("port"));
      // validate the required field `protocol`
      TargetGroupProtocol.validateJsonElement(jsonObj.get("protocol"));
      // validate the optional field `protocolVersion`
      if (jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) {
        TargetGroupProtocolVersion.validateJsonElement(jsonObj.get("protocolVersion"));
      }
      // validate the required field `vpcIdentifier`
      String.validateJsonElement(jsonObj.get("vpcIdentifier"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetGroupConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetGroupConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetGroupConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetGroupConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetGroupConfig>() {
           @Override
           public void write(JsonWriter out, TargetGroupConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetGroupConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetGroupConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetGroupConfig
   * @throws IOException if the JSON string is invalid with respect to TargetGroupConfig
   */
  public static TargetGroupConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetGroupConfig.class);
  }

  /**
   * Convert an instance of TargetGroupConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

