/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthCheckProtocolVersion;
import org.openapitools.client.model.TargetGroupProtocol;
import org.openapitools.client.model.UpdateTargetGroupRequestHealthCheckMatcher;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UpdateTargetGroupRequestHealthCheck
 */
public class UpdateTargetGroupRequestHealthCheckTest {
    private final UpdateTargetGroupRequestHealthCheck model = new UpdateTargetGroupRequestHealthCheck();

    /**
     * Model tests for UpdateTargetGroupRequestHealthCheck
     */
    @Test
    public void testUpdateTargetGroupRequestHealthCheck() {
        // TODO: test UpdateTargetGroupRequestHealthCheck
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'healthCheckIntervalSeconds'
     */
    @Test
    public void healthCheckIntervalSecondsTest() {
        // TODO: test healthCheckIntervalSeconds
    }

    /**
     * Test the property 'healthCheckTimeoutSeconds'
     */
    @Test
    public void healthCheckTimeoutSecondsTest() {
        // TODO: test healthCheckTimeoutSeconds
    }

    /**
     * Test the property 'healthyThresholdCount'
     */
    @Test
    public void healthyThresholdCountTest() {
        // TODO: test healthyThresholdCount
    }

    /**
     * Test the property 'matcher'
     */
    @Test
    public void matcherTest() {
        // TODO: test matcher
    }

    /**
     * Test the property 'path'
     */
    @Test
    public void pathTest() {
        // TODO: test path
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'protocol'
     */
    @Test
    public void protocolTest() {
        // TODO: test protocol
    }

    /**
     * Test the property 'protocolVersion'
     */
    @Test
    public void protocolVersionTest() {
        // TODO: test protocolVersion
    }

    /**
     * Test the property 'unhealthyThresholdCount'
     */
    @Test
    public void unhealthyThresholdCountTest() {
        // TODO: test unhealthyThresholdCount
    }

}
