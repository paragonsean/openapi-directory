/*
 * Amazon VPC Lattice
 * Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/\">Amazon VPC Lattice User Guide</a> 
 *
 * The version of the OpenAPI document: 2022-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchUpdateRuleRequest;
import org.openapitools.client.model.BatchUpdateRuleResponse;
import org.openapitools.client.model.CreateAccessLogSubscriptionRequest;
import org.openapitools.client.model.CreateAccessLogSubscriptionResponse;
import org.openapitools.client.model.CreateListenerRequest;
import org.openapitools.client.model.CreateListenerResponse;
import org.openapitools.client.model.CreateRuleRequest;
import org.openapitools.client.model.CreateRuleResponse;
import org.openapitools.client.model.CreateServiceNetworkRequest;
import org.openapitools.client.model.CreateServiceNetworkResponse;
import org.openapitools.client.model.CreateServiceNetworkServiceAssociationRequest;
import org.openapitools.client.model.CreateServiceNetworkServiceAssociationResponse;
import org.openapitools.client.model.CreateServiceNetworkVpcAssociationRequest;
import org.openapitools.client.model.CreateServiceNetworkVpcAssociationResponse;
import org.openapitools.client.model.CreateServiceRequest;
import org.openapitools.client.model.CreateServiceResponse;
import org.openapitools.client.model.CreateTargetGroupRequest;
import org.openapitools.client.model.CreateTargetGroupResponse;
import org.openapitools.client.model.DeleteServiceNetworkServiceAssociationResponse;
import org.openapitools.client.model.DeleteServiceNetworkVpcAssociationResponse;
import org.openapitools.client.model.DeleteServiceResponse;
import org.openapitools.client.model.DeleteTargetGroupResponse;
import org.openapitools.client.model.DeregisterTargetsRequest;
import org.openapitools.client.model.DeregisterTargetsResponse;
import org.openapitools.client.model.GetAccessLogSubscriptionResponse;
import org.openapitools.client.model.GetAuthPolicyResponse;
import org.openapitools.client.model.GetListenerResponse;
import org.openapitools.client.model.GetResourcePolicyResponse;
import org.openapitools.client.model.GetRuleResponse;
import org.openapitools.client.model.GetServiceNetworkResponse;
import org.openapitools.client.model.GetServiceNetworkServiceAssociationResponse;
import org.openapitools.client.model.GetServiceNetworkVpcAssociationResponse;
import org.openapitools.client.model.GetServiceResponse;
import org.openapitools.client.model.GetTargetGroupResponse;
import org.openapitools.client.model.ListAccessLogSubscriptionsResponse;
import org.openapitools.client.model.ListListenersResponse;
import org.openapitools.client.model.ListRulesResponse;
import org.openapitools.client.model.ListServiceNetworkServiceAssociationsResponse;
import org.openapitools.client.model.ListServiceNetworkVpcAssociationsResponse;
import org.openapitools.client.model.ListServiceNetworksResponse;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTargetGroupsResponse;
import org.openapitools.client.model.ListTargetsRequest;
import org.openapitools.client.model.ListTargetsResponse;
import org.openapitools.client.model.PutAuthPolicyRequest;
import org.openapitools.client.model.PutAuthPolicyResponse;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.RegisterTargetsRequest;
import org.openapitools.client.model.RegisterTargetsResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAccessLogSubscriptionRequest;
import org.openapitools.client.model.UpdateAccessLogSubscriptionResponse;
import org.openapitools.client.model.UpdateListenerRequest;
import org.openapitools.client.model.UpdateListenerResponse;
import org.openapitools.client.model.UpdateRuleRequest;
import org.openapitools.client.model.UpdateRuleResponse;
import org.openapitools.client.model.UpdateServiceNetworkRequest;
import org.openapitools.client.model.UpdateServiceNetworkResponse;
import org.openapitools.client.model.UpdateServiceNetworkVpcAssociationRequest;
import org.openapitools.client.model.UpdateServiceNetworkVpcAssociationResponse;
import org.openapitools.client.model.UpdateServiceRequest;
import org.openapitools.client.model.UpdateServiceResponse;
import org.openapitools.client.model.UpdateTargetGroupRequest;
import org.openapitools.client.model.UpdateTargetGroupResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Updates the listener rules in a batch. You can use this operation to change the priority of listener rules. This can be useful when bulk updating or swapping rule priority. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateRuleTest() throws ApiException {
        String listenerIdentifier = null;
        String serviceIdentifier = null;
        BatchUpdateRuleRequest batchUpdateRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateRuleResponse response = api.batchUpdateRule(listenerIdentifier, serviceIdentifier, batchUpdateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables access logs to be sent to Amazon CloudWatch, Amazon S3, and Amazon Kinesis Data Firehose. The service network owner can use the access logs to audit the services in the network. The service network owner will only see access logs from clients and services that are associated with their service network. Access log entries represent traffic originated from VPCs associated with that network. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/monitoring-access-logs.html\&quot;&gt;Access logs&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessLogSubscriptionTest() throws ApiException {
        CreateAccessLogSubscriptionRequest createAccessLogSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAccessLogSubscriptionResponse response = api.createAccessLogSubscription(createAccessLogSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html\&quot;&gt;Listeners&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createListenerTest() throws ApiException {
        String serviceIdentifier = null;
        CreateListenerRequest createListenerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateListenerResponse response = api.createListener(serviceIdentifier, createListenerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        String listenerIdentifier = null;
        String serviceIdentifier = null;
        CreateRuleRequest createRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRuleResponse response = api.createRule(listenerIdentifier, serviceIdentifier, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a service. A service is any software application that can run on instances containers, or serverless functions within an account or virtual private cloud (VPC).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html\&quot;&gt;Services&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        CreateServiceRequest createServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceResponse response = api.createService(createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a service network. A service network is a logical boundary for a collection of services. You can associate services and VPCs with a service network.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html\&quot;&gt;Service networks&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceNetworkTest() throws ApiException {
        CreateServiceNetworkRequest createServiceNetworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceNetworkResponse response = api.createServiceNetwork(createServiceNetworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates a service with a service network.&lt;/p&gt; &lt;p&gt;You can&#39;t use this operation if the service and service network are already associated or if there is a disassociation or deletion in progress. If the association fails, you can retry the operation by deleting the association and recreating it.&lt;/p&gt; &lt;p&gt;You cannot associate a service and service network that are shared with a caller. The caller must own either the service or the service network.&lt;/p&gt; &lt;p&gt;As a result of this operation, the association is created in the service network account and the association owner account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceNetworkServiceAssociationTest() throws ApiException {
        CreateServiceNetworkServiceAssociationRequest createServiceNetworkServiceAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceNetworkServiceAssociationResponse response = api.createServiceNetworkServiceAssociation(createServiceNetworkServiceAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates a VPC with a service network. When you associate a VPC with the service network, it enables all the resources within that VPC to be clients and communicate with other services in the service network. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-network-associations.html#service-network-vpc-associations\&quot;&gt;Manage VPC associations&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t use this operation if there is a disassociation in progress. If the association fails, retry by deleting the association and recreating it.&lt;/p&gt; &lt;p&gt;As a result of this operation, the association gets created in the service network account and the VPC owner account.&lt;/p&gt; &lt;p&gt;If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceNetworkVpcAssociationTest() throws ApiException {
        CreateServiceNetworkVpcAssociationRequest createServiceNetworkVpcAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceNetworkVpcAssociationResponse response = api.createServiceNetworkVpcAssociation(createServiceNetworkVpcAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a target group. A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html\&quot;&gt;Target groups&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTargetGroupTest() throws ApiException {
        CreateTargetGroupRequest createTargetGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTargetGroupResponse response = api.createTargetGroup(createTargetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified access log subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccessLogSubscriptionTest() throws ApiException {
        String accessLogSubscriptionIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAccessLogSubscription(accessLogSubscriptionIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified auth policy. If an auth is set to &lt;code&gt;AWS_IAM&lt;/code&gt; and the auth policy is deleted, all requests will be denied by default. If you are trying to remove the auth policy completely, you must set the auth_type to &lt;code&gt;NONE&lt;/code&gt;. If auth is enabled on the resource, but no auth policy is set, all requests will be denied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthPolicyTest() throws ApiException {
        String resourceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAuthPolicy(resourceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified listener.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteListenerTest() throws ApiException {
        String listenerIdentifier = null;
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteListener(listenerIdentifier, serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified resource policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResourcePolicy(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. You can delete additional listener rules, but you cannot delete the default rule.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        String listenerIdentifier = null;
        String ruleIdentifier = null;
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRule(listenerIdentifier, ruleIdentifier, serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a service. A service can&#39;t be deleted if it&#39;s associated with a service network. If you delete a service, all resources related to the service, such as the resource policy, auth policy, listeners, listener rules, and access log subscriptions, are also deleted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html#delete-service\&quot;&gt;Delete a service&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteServiceResponse response = api.deleteService(serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a service network. You can only delete the service network if there is no service or VPC associated with it. If you delete a service network, all resources related to the service network, such as the resource policy, auth policy, and access log subscriptions, are also deleted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#delete-service-network\&quot;&gt;Delete a service network&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceNetworkTest() throws ApiException {
        String serviceNetworkIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteServiceNetwork(serviceNetworkIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the association between a specified service and the specific service network. This request will fail if an association is still in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceNetworkServiceAssociationTest() throws ApiException {
        String serviceNetworkServiceAssociationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteServiceNetworkServiceAssociationResponse response = api.deleteServiceNetworkServiceAssociation(serviceNetworkServiceAssociationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the VPC from the service network. You can&#39;t disassociate the VPC if there is a create or update association in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceNetworkVpcAssociationTest() throws ApiException {
        String serviceNetworkVpcAssociationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteServiceNetworkVpcAssociationResponse response = api.deleteServiceNetworkVpcAssociation(serviceNetworkVpcAssociationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a target group. You can&#39;t delete a target group if it is used in a listener rule or if the target group creation is in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTargetGroupTest() throws ApiException {
        String targetGroupIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTargetGroupResponse response = api.deleteTargetGroup(targetGroupIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregisters the specified targets from the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterTargetsTest() throws ApiException {
        String targetGroupIdentifier = null;
        DeregisterTargetsRequest deregisterTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeregisterTargetsResponse response = api.deregisterTargets(targetGroupIdentifier, deregisterTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified access log subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessLogSubscriptionTest() throws ApiException {
        String accessLogSubscriptionIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccessLogSubscriptionResponse response = api.getAccessLogSubscription(accessLogSubscriptionIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the auth policy for the specified service or service network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthPolicyTest() throws ApiException {
        String resourceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAuthPolicyResponse response = api.getAuthPolicy(resourceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified listener for the specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListenerTest() throws ApiException {
        String listenerIdentifier = null;
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetListenerResponse response = api.getListener(listenerIdentifier, serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the resource policy. The resource policy is an IAM policy created on behalf of the resource owner when they share a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourcePolicyResponse response = api.getResourcePolicy(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about listener rules. You can also retrieve information about the default listener rule. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Amazon VPC Lattice User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRuleTest() throws ApiException {
        String listenerIdentifier = null;
        String ruleIdentifier = null;
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRuleResponse response = api.getRule(listenerIdentifier, ruleIdentifier, serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceTest() throws ApiException {
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceResponse response = api.getService(serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified service network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceNetworkTest() throws ApiException {
        String serviceNetworkIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceNetworkResponse response = api.getServiceNetwork(serviceNetworkIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified association between a service network and a service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceNetworkServiceAssociationTest() throws ApiException {
        String serviceNetworkServiceAssociationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceNetworkServiceAssociationResponse response = api.getServiceNetworkServiceAssociation(serviceNetworkServiceAssociationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the association between a service network and a VPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceNetworkVpcAssociationTest() throws ApiException {
        String serviceNetworkVpcAssociationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceNetworkVpcAssociationResponse response = api.getServiceNetworkVpcAssociation(serviceNetworkVpcAssociationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTargetGroupTest() throws ApiException {
        String targetGroupIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTargetGroupResponse response = api.getTargetGroup(targetGroupIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all access log subscriptions for the specified service network or service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessLogSubscriptionsTest() throws ApiException {
        String resourceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListAccessLogSubscriptionsResponse response = api.listAccessLogSubscriptions(resourceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the listeners for the specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listListenersTest() throws ApiException {
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListListenersResponse response = api.listListeners(serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the rules for the listener.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRulesTest() throws ApiException {
        String listenerIdentifier = null;
        String serviceIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListRulesResponse response = api.listRules(listenerIdentifier, serviceIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the associations between the service network and the service. You can filter the list either by service or service network. You must provide either the service network identifier or the service identifier.&lt;/p&gt; &lt;p&gt;Every association in Amazon VPC Lattice is given a unique Amazon Resource Name (ARN), such as when a service network is associated with a VPC or when a service is associated with a service network. If the association is for a resource that is shared with another account, the association will include the local account ID as the prefix in the ARN for each account the resource is shared with.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceNetworkServiceAssociationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String serviceIdentifier = null;
        String serviceNetworkIdentifier = null;
        ListServiceNetworkServiceAssociationsResponse response = api.listServiceNetworkServiceAssociations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, serviceIdentifier, serviceNetworkIdentifier);
        // TODO: test validations
    }

    /**
     * Lists the service network and VPC associations. You can filter the list either by VPC or service network. You must provide either the service network identifier or the VPC identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceNetworkVpcAssociationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String serviceNetworkIdentifier = null;
        String vpcIdentifier = null;
        ListServiceNetworkVpcAssociationsResponse response = api.listServiceNetworkVpcAssociations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, serviceNetworkIdentifier, vpcIdentifier);
        // TODO: test validations
    }

    /**
     * Lists the service networks owned by the caller account or shared with the caller account. Also includes the account ID in the ARN to show which account owns the service network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceNetworksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListServiceNetworksResponse response = api.listServiceNetworks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the services owned by the caller account or shared with the caller account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListServicesResponse response = api.listServices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists your target groups. You can narrow your search by using the filters below in your request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTargetGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String targetGroupType = null;
        String vpcIdentifier = null;
        ListTargetGroupsResponse response = api.listTargetGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, targetGroupType, vpcIdentifier);
        // TODO: test validations
    }

    /**
     * Lists the targets for the target group. By default, all targets are included. You can use this API to check the health status of targets. You can also ﬁlter the results by target. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTargetsTest() throws ApiException {
        String targetGroupIdentifier = null;
        ListTargetsRequest listTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListTargetsResponse response = api.listTargets(targetGroupIdentifier, listTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Creates or updates the auth policy. The policy string in JSON must not contain newlines or blank lines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAuthPolicyTest() throws ApiException {
        String resourceIdentifier = null;
        PutAuthPolicyRequest putAuthPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutAuthPolicyResponse response = api.putAuthPolicy(resourceIdentifier, putAuthPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches a resource-based permission policy to a service or service network. The policy must contain the same actions and condition statements as the Amazon Web Services Resource Access Manager permission for sharing services and service networks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        String resourceArn = null;
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putResourcePolicy(resourceArn, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers the targets with the target group. If it&#39;s a Lambda target, you can only have one target in a target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerTargetsTest() throws ApiException {
        String targetGroupIdentifier = null;
        RegisterTargetsRequest registerTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterTargetsResponse response = api.registerTargets(targetGroupIdentifier, registerTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds the specified tags to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified access log subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccessLogSubscriptionTest() throws ApiException {
        String accessLogSubscriptionIdentifier = null;
        UpdateAccessLogSubscriptionRequest updateAccessLogSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAccessLogSubscriptionResponse response = api.updateAccessLogSubscription(accessLogSubscriptionIdentifier, updateAccessLogSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified listener for the specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateListenerTest() throws ApiException {
        String listenerIdentifier = null;
        String serviceIdentifier = null;
        UpdateListenerRequest updateListenerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateListenerResponse response = api.updateListener(listenerIdentifier, serviceIdentifier, updateListenerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a rule for the listener. You can&#39;t modify a default listener rule. To modify a default listener rule, use &lt;code&gt;UpdateListener&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        String listenerIdentifier = null;
        String ruleIdentifier = null;
        String serviceIdentifier = null;
        UpdateRuleRequest updateRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRuleResponse response = api.updateRule(listenerIdentifier, ruleIdentifier, serviceIdentifier, updateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String serviceIdentifier = null;
        UpdateServiceRequest updateServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServiceResponse response = api.updateService(serviceIdentifier, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified service network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceNetworkTest() throws ApiException {
        String serviceNetworkIdentifier = null;
        UpdateServiceNetworkRequest updateServiceNetworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServiceNetworkResponse response = api.updateServiceNetwork(serviceNetworkIdentifier, updateServiceNetworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the service network and VPC association. If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceNetworkVpcAssociationTest() throws ApiException {
        String serviceNetworkVpcAssociationIdentifier = null;
        UpdateServiceNetworkVpcAssociationRequest updateServiceNetworkVpcAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServiceNetworkVpcAssociationResponse response = api.updateServiceNetworkVpcAssociation(serviceNetworkVpcAssociationIdentifier, updateServiceNetworkVpcAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTargetGroupTest() throws ApiException {
        String targetGroupIdentifier = null;
        UpdateTargetGroupRequest updateTargetGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTargetGroupResponse response = api.updateTargetGroup(targetGroupIdentifier, updateTargetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
