# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.header_match_match import HeaderMatchMatch
from openapi_server import util


class HeaderMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_sensitive: bool=None, match: HeaderMatchMatch=None, name: str=None):
        """HeaderMatch - a model defined in OpenAPI

        :param case_sensitive: The case_sensitive of this HeaderMatch.
        :param match: The match of this HeaderMatch.
        :param name: The name of this HeaderMatch.
        """
        self.openapi_types = {
            'case_sensitive': bool,
            'match': HeaderMatchMatch,
            'name': str
        }

        self.attribute_map = {
            'case_sensitive': 'caseSensitive',
            'match': 'match',
            'name': 'name'
        }

        self._case_sensitive = case_sensitive
        self._match = match
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HeaderMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HeaderMatch of this HeaderMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this HeaderMatch.


        :return: The case_sensitive of this HeaderMatch.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this HeaderMatch.


        :param case_sensitive: The case_sensitive of this HeaderMatch.
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def match(self):
        """Gets the match of this HeaderMatch.


        :return: The match of this HeaderMatch.
        :rtype: HeaderMatchMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this HeaderMatch.


        :param match: The match of this HeaderMatch.
        :type match: HeaderMatchMatch
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")

        self._match = match

    @property
    def name(self):
        """Gets the name of this HeaderMatch.


        :return: The name of this HeaderMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HeaderMatch.


        :param name: The name of this HeaderMatch.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
