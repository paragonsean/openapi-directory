# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateAccessLogSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, destination_arn: str=None, resource_identifier: str=None, tags: Dict[str, str]=None):
        """CreateAccessLogSubscriptionRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateAccessLogSubscriptionRequest.
        :param destination_arn: The destination_arn of this CreateAccessLogSubscriptionRequest.
        :param resource_identifier: The resource_identifier of this CreateAccessLogSubscriptionRequest.
        :param tags: The tags of this CreateAccessLogSubscriptionRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'destination_arn': str,
            'resource_identifier': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'destination_arn': 'destinationArn',
            'resource_identifier': 'resourceIdentifier',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._destination_arn = destination_arn
        self._resource_identifier = resource_identifier
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccessLogSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccessLogSubscription_request of this CreateAccessLogSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateAccessLogSubscriptionRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateAccessLogSubscriptionRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateAccessLogSubscriptionRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateAccessLogSubscriptionRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def destination_arn(self):
        """Gets the destination_arn of this CreateAccessLogSubscriptionRequest.

        The Amazon Resource Name (ARN) of the destination. The supported destination types are CloudWatch Log groups, Kinesis Data Firehose delivery streams, and Amazon S3 buckets.

        :return: The destination_arn of this CreateAccessLogSubscriptionRequest.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this CreateAccessLogSubscriptionRequest.

        The Amazon Resource Name (ARN) of the destination. The supported destination types are CloudWatch Log groups, Kinesis Data Firehose delivery streams, and Amazon S3 buckets.

        :param destination_arn: The destination_arn of this CreateAccessLogSubscriptionRequest.
        :type destination_arn: str
        """
        if destination_arn is None:
            raise ValueError("Invalid value for `destination_arn`, must not be `None`")
        if destination_arn is not None and len(destination_arn) > 2048:
            raise ValueError("Invalid value for `destination_arn`, length must be less than or equal to `2048`")
        if destination_arn is not None and len(destination_arn) < 20:
            raise ValueError("Invalid value for `destination_arn`, length must be greater than or equal to `20`")
        if destination_arn is not None and not re.search(r'^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^\/].*)?$', destination_arn):
            raise ValueError("Invalid value for `destination_arn`, must be a follow pattern or equal to `/^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^\/].*)?$/`")

        self._destination_arn = destination_arn

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this CreateAccessLogSubscriptionRequest.

        The ID or Amazon Resource Name (ARN) of the service network or service.

        :return: The resource_identifier of this CreateAccessLogSubscriptionRequest.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this CreateAccessLogSubscriptionRequest.

        The ID or Amazon Resource Name (ARN) of the service network or service.

        :param resource_identifier: The resource_identifier of this CreateAccessLogSubscriptionRequest.
        :type resource_identifier: str
        """
        if resource_identifier is None:
            raise ValueError("Invalid value for `resource_identifier`, must not be `None`")
        if resource_identifier is not None and len(resource_identifier) > 200:
            raise ValueError("Invalid value for `resource_identifier`, length must be less than or equal to `200`")
        if resource_identifier is not None and len(resource_identifier) < 17:
            raise ValueError("Invalid value for `resource_identifier`, length must be greater than or equal to `17`")
        if resource_identifier is not None and not re.search(r'^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork\/sn)|(service\/svc))-[0-9a-z]{17}))$', resource_identifier):
            raise ValueError("Invalid value for `resource_identifier`, must be a follow pattern or equal to `/^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork\/sn)|(service\/svc))-[0-9a-z]{17}))$/`")

        self._resource_identifier = resource_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateAccessLogSubscriptionRequest.

        The tags for the access log subscription.

        :return: The tags of this CreateAccessLogSubscriptionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAccessLogSubscriptionRequest.

        The tags for the access log subscription.

        :param tags: The tags of this CreateAccessLogSubscriptionRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
