# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_action import CreateRuleRequestAction
from openapi_server.models.create_rule_request_match import CreateRuleRequestMatch
import re
from openapi_server import util


class CreateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: CreateRuleRequestAction=None, client_token: str=None, match: CreateRuleRequestMatch=None, name: str=None, priority: int=None, tags: Dict[str, str]=None):
        """CreateRuleRequest - a model defined in OpenAPI

        :param action: The action of this CreateRuleRequest.
        :param client_token: The client_token of this CreateRuleRequest.
        :param match: The match of this CreateRuleRequest.
        :param name: The name of this CreateRuleRequest.
        :param priority: The priority of this CreateRuleRequest.
        :param tags: The tags of this CreateRuleRequest.
        """
        self.openapi_types = {
            'action': CreateRuleRequestAction,
            'client_token': str,
            'match': CreateRuleRequestMatch,
            'name': str,
            'priority': int,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'action': 'action',
            'client_token': 'clientToken',
            'match': 'match',
            'name': 'name',
            'priority': 'priority',
            'tags': 'tags'
        }

        self._action = action
        self._client_token = client_token
        self._match = match
        self._name = name
        self._priority = priority
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRule_request of this CreateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateRuleRequest.


        :return: The action of this CreateRuleRequest.
        :rtype: CreateRuleRequestAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateRuleRequest.


        :param action: The action of this CreateRuleRequest.
        :type action: CreateRuleRequestAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def client_token(self):
        """Gets the client_token of this CreateRuleRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateRuleRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateRuleRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateRuleRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def match(self):
        """Gets the match of this CreateRuleRequest.


        :return: The match of this CreateRuleRequest.
        :rtype: CreateRuleRequestMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this CreateRuleRequest.


        :param match: The match of this CreateRuleRequest.
        :type match: CreateRuleRequestMatch
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")

        self._match = match

    @property
    def name(self):
        """Gets the name of this CreateRuleRequest.

        The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :return: The name of this CreateRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRuleRequest.

        The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :param name: The name of this CreateRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$/`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this CreateRuleRequest.

        The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.

        :return: The priority of this CreateRuleRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateRuleRequest.

        The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.

        :param priority: The priority of this CreateRuleRequest.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")
        if priority is not None and priority > 100:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def tags(self):
        """Gets the tags of this CreateRuleRequest.

        The tags for the rule.

        :return: The tags of this CreateRuleRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRuleRequest.

        The tags for the rule.

        :param tags: The tags of this CreateRuleRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
