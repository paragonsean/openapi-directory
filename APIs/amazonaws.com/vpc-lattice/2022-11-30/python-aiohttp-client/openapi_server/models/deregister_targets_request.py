# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target import Target
from openapi_server import util


class DeregisterTargetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, targets: List[Target]=None):
        """DeregisterTargetsRequest - a model defined in OpenAPI

        :param targets: The targets of this DeregisterTargetsRequest.
        """
        self.openapi_types = {
            'targets': List[Target]
        }

        self.attribute_map = {
            'targets': 'targets'
        }

        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterTargetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterTargets_request of this DeregisterTargetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def targets(self):
        """Gets the targets of this DeregisterTargetsRequest.

        The targets to deregister.

        :return: The targets of this DeregisterTargetsRequest.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this DeregisterTargetsRequest.

        The targets to deregister.

        :param targets: The targets of this DeregisterTargetsRequest.
        :type targets: List[Target]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")
        if targets is not None and len(targets) > 100:
            raise ValueError("Invalid value for `targets`, number of items must be less than or equal to `100`")
        if targets is not None and len(targets) < 1:
            raise ValueError("Invalid value for `targets`, number of items must be greater than or equal to `1`")

        self._targets = targets
