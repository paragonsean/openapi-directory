# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_action import CreateRuleRequestAction
import re
from openapi_server import util


class CreateListenerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, default_action: CreateRuleRequestAction=None, name: str=None, port: int=None, protocol: str=None, tags: Dict[str, str]=None):
        """CreateListenerRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateListenerRequest.
        :param default_action: The default_action of this CreateListenerRequest.
        :param name: The name of this CreateListenerRequest.
        :param port: The port of this CreateListenerRequest.
        :param protocol: The protocol of this CreateListenerRequest.
        :param tags: The tags of this CreateListenerRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'default_action': CreateRuleRequestAction,
            'name': str,
            'port': int,
            'protocol': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'default_action': 'defaultAction',
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._default_action = default_action
        self._name = name
        self._port = port
        self._protocol = protocol
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateListenerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateListener_request of this CreateListenerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateListenerRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateListenerRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateListenerRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateListenerRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def default_action(self):
        """Gets the default_action of this CreateListenerRequest.


        :return: The default_action of this CreateListenerRequest.
        :rtype: CreateRuleRequestAction
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this CreateListenerRequest.


        :param default_action: The default_action of this CreateListenerRequest.
        :type default_action: CreateRuleRequestAction
        """
        if default_action is None:
            raise ValueError("Invalid value for `default_action`, must not be `None`")

        self._default_action = default_action

    @property
    def name(self):
        """Gets the name of this CreateListenerRequest.

        The name of the listener. A listener name must be unique within a service. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :return: The name of this CreateListenerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateListenerRequest.

        The name of the listener. A listener name must be unique within a service. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :param name: The name of this CreateListenerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$/`")

        self._name = name

    @property
    def port(self):
        """Gets the port of this CreateListenerRequest.

        The listener port. You can specify a value from <code>1</code> to <code>65535</code>. For HTTP, the default is <code>80</code>. For HTTPS, the default is <code>443</code>.

        :return: The port of this CreateListenerRequest.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateListenerRequest.

        The listener port. You can specify a value from <code>1</code> to <code>65535</code>. For HTTP, the default is <code>80</code>. For HTTPS, the default is <code>443</code>.

        :param port: The port of this CreateListenerRequest.
        :type port: int
        """
        if port is not None and port > 65535:
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")
        if port is not None and port < 1:
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this CreateListenerRequest.

        The listener protocol HTTP or HTTPS.

        :return: The protocol of this CreateListenerRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateListenerRequest.

        The listener protocol HTTP or HTTPS.

        :param protocol: The protocol of this CreateListenerRequest.
        :type protocol: str
        """
        allowed_values = ["HTTP", "HTTPS"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def tags(self):
        """Gets the tags of this CreateListenerRequest.

        The tags for the listener.

        :return: The tags of this CreateListenerRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateListenerRequest.

        The tags for the listener.

        :param tags: The tags of this CreateListenerRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
