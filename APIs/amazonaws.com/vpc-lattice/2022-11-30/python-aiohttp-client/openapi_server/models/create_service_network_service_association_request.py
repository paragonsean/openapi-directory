# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateServiceNetworkServiceAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, service_identifier: str=None, service_network_identifier: str=None, tags: Dict[str, str]=None):
        """CreateServiceNetworkServiceAssociationRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateServiceNetworkServiceAssociationRequest.
        :param service_identifier: The service_identifier of this CreateServiceNetworkServiceAssociationRequest.
        :param service_network_identifier: The service_network_identifier of this CreateServiceNetworkServiceAssociationRequest.
        :param tags: The tags of this CreateServiceNetworkServiceAssociationRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'service_identifier': str,
            'service_network_identifier': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'service_identifier': 'serviceIdentifier',
            'service_network_identifier': 'serviceNetworkIdentifier',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._service_identifier = service_identifier
        self._service_network_identifier = service_network_identifier
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceNetworkServiceAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceNetworkServiceAssociation_request of this CreateServiceNetworkServiceAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateServiceNetworkServiceAssociationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateServiceNetworkServiceAssociationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateServiceNetworkServiceAssociationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateServiceNetworkServiceAssociationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def service_identifier(self):
        """Gets the service_identifier of this CreateServiceNetworkServiceAssociationRequest.

        The ID or Amazon Resource Name (ARN) of the service.

        :return: The service_identifier of this CreateServiceNetworkServiceAssociationRequest.
        :rtype: str
        """
        return self._service_identifier

    @service_identifier.setter
    def service_identifier(self, service_identifier):
        """Sets the service_identifier of this CreateServiceNetworkServiceAssociationRequest.

        The ID or Amazon Resource Name (ARN) of the service.

        :param service_identifier: The service_identifier of this CreateServiceNetworkServiceAssociationRequest.
        :type service_identifier: str
        """
        if service_identifier is None:
            raise ValueError("Invalid value for `service_identifier`, must not be `None`")
        if service_identifier is not None and len(service_identifier) > 2048:
            raise ValueError("Invalid value for `service_identifier`, length must be less than or equal to `2048`")
        if service_identifier is not None and len(service_identifier) < 17:
            raise ValueError("Invalid value for `service_identifier`, length must be greater than or equal to `17`")
        if service_identifier is not None and not re.search(r'^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service\/svc-[0-9a-z]{17}))$', service_identifier):
            raise ValueError("Invalid value for `service_identifier`, must be a follow pattern or equal to `/^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service\/svc-[0-9a-z]{17}))$/`")

        self._service_identifier = service_identifier

    @property
    def service_network_identifier(self):
        """Gets the service_network_identifier of this CreateServiceNetworkServiceAssociationRequest.

        The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.

        :return: The service_network_identifier of this CreateServiceNetworkServiceAssociationRequest.
        :rtype: str
        """
        return self._service_network_identifier

    @service_network_identifier.setter
    def service_network_identifier(self, service_network_identifier):
        """Sets the service_network_identifier of this CreateServiceNetworkServiceAssociationRequest.

        The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.

        :param service_network_identifier: The service_network_identifier of this CreateServiceNetworkServiceAssociationRequest.
        :type service_network_identifier: str
        """
        if service_network_identifier is None:
            raise ValueError("Invalid value for `service_network_identifier`, must not be `None`")
        if service_network_identifier is not None and len(service_network_identifier) > 2048:
            raise ValueError("Invalid value for `service_network_identifier`, length must be less than or equal to `2048`")
        if service_network_identifier is not None and len(service_network_identifier) < 3:
            raise ValueError("Invalid value for `service_network_identifier`, length must be greater than or equal to `3`")
        if service_network_identifier is not None and not re.search(r'^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork\/sn-[0-9a-z]{17}))$', service_network_identifier):
            raise ValueError("Invalid value for `service_network_identifier`, must be a follow pattern or equal to `/^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork\/sn-[0-9a-z]{17}))$/`")

        self._service_network_identifier = service_network_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateServiceNetworkServiceAssociationRequest.

        The tags for the association.

        :return: The tags of this CreateServiceNetworkServiceAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceNetworkServiceAssociationRequest.

        The tags for the association.

        :param tags: The tags of this CreateServiceNetworkServiceAssociationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
