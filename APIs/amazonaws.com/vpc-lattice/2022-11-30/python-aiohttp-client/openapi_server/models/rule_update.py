# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_update_action import RuleUpdateAction
from openapi_server.models.rule_update_match import RuleUpdateMatch
from openapi_server import util


class RuleUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: RuleUpdateAction=None, match: RuleUpdateMatch=None, priority: int=None, rule_identifier: str=None):
        """RuleUpdate - a model defined in OpenAPI

        :param action: The action of this RuleUpdate.
        :param match: The match of this RuleUpdate.
        :param priority: The priority of this RuleUpdate.
        :param rule_identifier: The rule_identifier of this RuleUpdate.
        """
        self.openapi_types = {
            'action': RuleUpdateAction,
            'match': RuleUpdateMatch,
            'priority': int,
            'rule_identifier': str
        }

        self.attribute_map = {
            'action': 'action',
            'match': 'match',
            'priority': 'priority',
            'rule_identifier': 'ruleIdentifier'
        }

        self._action = action
        self._match = match
        self._priority = priority
        self._rule_identifier = rule_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleUpdate of this RuleUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RuleUpdate.


        :return: The action of this RuleUpdate.
        :rtype: RuleUpdateAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RuleUpdate.


        :param action: The action of this RuleUpdate.
        :type action: RuleUpdateAction
        """

        self._action = action

    @property
    def match(self):
        """Gets the match of this RuleUpdate.


        :return: The match of this RuleUpdate.
        :rtype: RuleUpdateMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this RuleUpdate.


        :param match: The match of this RuleUpdate.
        :type match: RuleUpdateMatch
        """

        self._match = match

    @property
    def priority(self):
        """Gets the priority of this RuleUpdate.


        :return: The priority of this RuleUpdate.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RuleUpdate.


        :param priority: The priority of this RuleUpdate.
        :type priority: int
        """

        self._priority = priority

    @property
    def rule_identifier(self):
        """Gets the rule_identifier of this RuleUpdate.


        :return: The rule_identifier of this RuleUpdate.
        :rtype: str
        """
        return self._rule_identifier

    @rule_identifier.setter
    def rule_identifier(self, rule_identifier):
        """Sets the rule_identifier of this RuleUpdate.


        :param rule_identifier: The rule_identifier of this RuleUpdate.
        :type rule_identifier: str
        """
        if rule_identifier is None:
            raise ValueError("Invalid value for `rule_identifier`, must not be `None`")

        self._rule_identifier = rule_identifier
