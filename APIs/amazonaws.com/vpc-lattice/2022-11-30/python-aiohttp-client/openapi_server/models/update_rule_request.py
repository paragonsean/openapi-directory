# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_request_action import CreateRuleRequestAction
from openapi_server.models.create_rule_request_match import CreateRuleRequestMatch
from openapi_server import util


class UpdateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: CreateRuleRequestAction=None, match: CreateRuleRequestMatch=None, priority: int=None):
        """UpdateRuleRequest - a model defined in OpenAPI

        :param action: The action of this UpdateRuleRequest.
        :param match: The match of this UpdateRuleRequest.
        :param priority: The priority of this UpdateRuleRequest.
        """
        self.openapi_types = {
            'action': CreateRuleRequestAction,
            'match': CreateRuleRequestMatch,
            'priority': int
        }

        self.attribute_map = {
            'action': 'action',
            'match': 'match',
            'priority': 'priority'
        }

        self._action = action
        self._match = match
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRule_request of this UpdateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this UpdateRuleRequest.


        :return: The action of this UpdateRuleRequest.
        :rtype: CreateRuleRequestAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateRuleRequest.


        :param action: The action of this UpdateRuleRequest.
        :type action: CreateRuleRequestAction
        """

        self._action = action

    @property
    def match(self):
        """Gets the match of this UpdateRuleRequest.


        :return: The match of this UpdateRuleRequest.
        :rtype: CreateRuleRequestMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this UpdateRuleRequest.


        :param match: The match of this UpdateRuleRequest.
        :type match: CreateRuleRequestMatch
        """

        self._match = match

    @property
    def priority(self):
        """Gets the priority of this UpdateRuleRequest.

        The rule priority. A listener can't have multiple rules with the same priority.

        :return: The priority of this UpdateRuleRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdateRuleRequest.

        The rule priority. A listener can't have multiple rules with the same priority.

        :param priority: The priority of this UpdateRuleRequest.
        :type priority: int
        """
        if priority is not None and priority > 100:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority
