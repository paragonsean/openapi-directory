# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateServiceNetworkVpcAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, security_group_ids: List[str]=None, service_network_identifier: str=None, tags: Dict[str, str]=None, vpc_identifier: str=None):
        """CreateServiceNetworkVpcAssociationRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateServiceNetworkVpcAssociationRequest.
        :param security_group_ids: The security_group_ids of this CreateServiceNetworkVpcAssociationRequest.
        :param service_network_identifier: The service_network_identifier of this CreateServiceNetworkVpcAssociationRequest.
        :param tags: The tags of this CreateServiceNetworkVpcAssociationRequest.
        :param vpc_identifier: The vpc_identifier of this CreateServiceNetworkVpcAssociationRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'security_group_ids': List[str],
            'service_network_identifier': str,
            'tags': Dict[str, str],
            'vpc_identifier': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'security_group_ids': 'securityGroupIds',
            'service_network_identifier': 'serviceNetworkIdentifier',
            'tags': 'tags',
            'vpc_identifier': 'vpcIdentifier'
        }

        self._client_token = client_token
        self._security_group_ids = security_group_ids
        self._service_network_identifier = service_network_identifier
        self._tags = tags
        self._vpc_identifier = vpc_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceNetworkVpcAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceNetworkVpcAssociation_request of this CreateServiceNetworkVpcAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateServiceNetworkVpcAssociationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateServiceNetworkVpcAssociationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateServiceNetworkVpcAssociationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateServiceNetworkVpcAssociationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateServiceNetworkVpcAssociationRequest.

        The IDs of the security groups. Security groups aren't added by default. You can add a security group to apply network level controls to control which resources in a VPC are allowed to access the service network and its services. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">Control traffic to resources using security groups</a> in the <i>Amazon VPC User Guide</i>.

        :return: The security_group_ids of this CreateServiceNetworkVpcAssociationRequest.
        :rtype: List[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateServiceNetworkVpcAssociationRequest.

        The IDs of the security groups. Security groups aren't added by default. You can add a security group to apply network level controls to control which resources in a VPC are allowed to access the service network and its services. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">Control traffic to resources using security groups</a> in the <i>Amazon VPC User Guide</i>.

        :param security_group_ids: The security_group_ids of this CreateServiceNetworkVpcAssociationRequest.
        :type security_group_ids: List[str]
        """
        if security_group_ids is not None and len(security_group_ids) > 5:
            raise ValueError("Invalid value for `security_group_ids`, number of items must be less than or equal to `5`")
        if security_group_ids is not None and len(security_group_ids) < 0:
            raise ValueError("Invalid value for `security_group_ids`, number of items must be greater than or equal to `0`")

        self._security_group_ids = security_group_ids

    @property
    def service_network_identifier(self):
        """Gets the service_network_identifier of this CreateServiceNetworkVpcAssociationRequest.

        The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN when the resources specified in the operation are in different accounts.

        :return: The service_network_identifier of this CreateServiceNetworkVpcAssociationRequest.
        :rtype: str
        """
        return self._service_network_identifier

    @service_network_identifier.setter
    def service_network_identifier(self, service_network_identifier):
        """Sets the service_network_identifier of this CreateServiceNetworkVpcAssociationRequest.

        The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN when the resources specified in the operation are in different accounts.

        :param service_network_identifier: The service_network_identifier of this CreateServiceNetworkVpcAssociationRequest.
        :type service_network_identifier: str
        """
        if service_network_identifier is None:
            raise ValueError("Invalid value for `service_network_identifier`, must not be `None`")
        if service_network_identifier is not None and len(service_network_identifier) > 2048:
            raise ValueError("Invalid value for `service_network_identifier`, length must be less than or equal to `2048`")
        if service_network_identifier is not None and len(service_network_identifier) < 3:
            raise ValueError("Invalid value for `service_network_identifier`, length must be greater than or equal to `3`")
        if service_network_identifier is not None and not re.search(r'^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork\/sn-[0-9a-z]{17}))$', service_network_identifier):
            raise ValueError("Invalid value for `service_network_identifier`, must be a follow pattern or equal to `/^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork\/sn-[0-9a-z]{17}))$/`")

        self._service_network_identifier = service_network_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateServiceNetworkVpcAssociationRequest.

        The tags for the association.

        :return: The tags of this CreateServiceNetworkVpcAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceNetworkVpcAssociationRequest.

        The tags for the association.

        :param tags: The tags of this CreateServiceNetworkVpcAssociationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def vpc_identifier(self):
        """Gets the vpc_identifier of this CreateServiceNetworkVpcAssociationRequest.

        The ID of the VPC.

        :return: The vpc_identifier of this CreateServiceNetworkVpcAssociationRequest.
        :rtype: str
        """
        return self._vpc_identifier

    @vpc_identifier.setter
    def vpc_identifier(self, vpc_identifier):
        """Sets the vpc_identifier of this CreateServiceNetworkVpcAssociationRequest.

        The ID of the VPC.

        :param vpc_identifier: The vpc_identifier of this CreateServiceNetworkVpcAssociationRequest.
        :type vpc_identifier: str
        """
        if vpc_identifier is None:
            raise ValueError("Invalid value for `vpc_identifier`, must not be `None`")
        if vpc_identifier is not None and len(vpc_identifier) > 50:
            raise ValueError("Invalid value for `vpc_identifier`, length must be less than or equal to `50`")
        if vpc_identifier is not None and len(vpc_identifier) < 5:
            raise ValueError("Invalid value for `vpc_identifier`, length must be greater than or equal to `5`")
        if vpc_identifier is not None and not re.search(r'^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$', vpc_identifier):
            raise ValueError("Invalid value for `vpc_identifier`, must be a follow pattern or equal to `/^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$/`")

        self._vpc_identifier = vpc_identifier
