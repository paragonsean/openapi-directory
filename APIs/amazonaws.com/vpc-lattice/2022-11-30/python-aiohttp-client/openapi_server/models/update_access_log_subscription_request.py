# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAccessLogSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_arn: str=None):
        """UpdateAccessLogSubscriptionRequest - a model defined in OpenAPI

        :param destination_arn: The destination_arn of this UpdateAccessLogSubscriptionRequest.
        """
        self.openapi_types = {
            'destination_arn': str
        }

        self.attribute_map = {
            'destination_arn': 'destinationArn'
        }

        self._destination_arn = destination_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccessLogSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccessLogSubscription_request of this UpdateAccessLogSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_arn(self):
        """Gets the destination_arn of this UpdateAccessLogSubscriptionRequest.

        The Amazon Resource Name (ARN) of the access log destination.

        :return: The destination_arn of this UpdateAccessLogSubscriptionRequest.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this UpdateAccessLogSubscriptionRequest.

        The Amazon Resource Name (ARN) of the access log destination.

        :param destination_arn: The destination_arn of this UpdateAccessLogSubscriptionRequest.
        :type destination_arn: str
        """
        if destination_arn is None:
            raise ValueError("Invalid value for `destination_arn`, must not be `None`")
        if destination_arn is not None and len(destination_arn) > 2048:
            raise ValueError("Invalid value for `destination_arn`, length must be less than or equal to `2048`")
        if destination_arn is not None and len(destination_arn) < 20:
            raise ValueError("Invalid value for `destination_arn`, length must be greater than or equal to `20`")
        if destination_arn is not None and not re.search(r'^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^\/].*)?$', destination_arn):
            raise ValueError("Invalid value for `destination_arn`, must be a follow pattern or equal to `/^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^\/].*)?$/`")

        self._destination_arn = destination_arn
