# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, certificate_arn: str=None):
        """UpdateServiceRequest - a model defined in OpenAPI

        :param auth_type: The auth_type of this UpdateServiceRequest.
        :param certificate_arn: The certificate_arn of this UpdateServiceRequest.
        """
        self.openapi_types = {
            'auth_type': str,
            'certificate_arn': str
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'certificate_arn': 'certificateArn'
        }

        self._auth_type = auth_type
        self._certificate_arn = certificate_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateService_request of this UpdateServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this UpdateServiceRequest.

        <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>

        :return: The auth_type of this UpdateServiceRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this UpdateServiceRequest.

        <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>

        :param auth_type: The auth_type of this UpdateServiceRequest.
        :type auth_type: str
        """
        allowed_values = ["NONE", "AWS_IAM"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def certificate_arn(self):
        """Gets the certificate_arn of this UpdateServiceRequest.

        The Amazon Resource Name (ARN) of the certificate. 

        :return: The certificate_arn of this UpdateServiceRequest.
        :rtype: str
        """
        return self._certificate_arn

    @certificate_arn.setter
    def certificate_arn(self, certificate_arn):
        """Sets the certificate_arn of this UpdateServiceRequest.

        The Amazon Resource Name (ARN) of the certificate. 

        :param certificate_arn: The certificate_arn of this UpdateServiceRequest.
        :type certificate_arn: str
        """
        if certificate_arn is not None and len(certificate_arn) > 2048:
            raise ValueError("Invalid value for `certificate_arn`, length must be less than or equal to `2048`")
        if certificate_arn is not None and len(certificate_arn) < 0:
            raise ValueError("Invalid value for `certificate_arn`, length must be greater than or equal to `0`")
        if certificate_arn is not None and not re.search(r'^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate\/[0-9a-z-]+)?$', certificate_arn):
            raise ValueError("Invalid value for `certificate_arn`, must be a follow pattern or equal to `/^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate\/[0-9a-z-]+)?$/`")

        self._certificate_arn = certificate_arn
