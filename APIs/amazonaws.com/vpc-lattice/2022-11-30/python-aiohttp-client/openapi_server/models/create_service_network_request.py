# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateServiceNetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, client_token: str=None, name: str=None, tags: Dict[str, str]=None):
        """CreateServiceNetworkRequest - a model defined in OpenAPI

        :param auth_type: The auth_type of this CreateServiceNetworkRequest.
        :param client_token: The client_token of this CreateServiceNetworkRequest.
        :param name: The name of this CreateServiceNetworkRequest.
        :param tags: The tags of this CreateServiceNetworkRequest.
        """
        self.openapi_types = {
            'auth_type': str,
            'client_token': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'client_token': 'clientToken',
            'name': 'name',
            'tags': 'tags'
        }

        self._auth_type = auth_type
        self._client_token = client_token
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceNetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceNetwork_request of this CreateServiceNetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this CreateServiceNetworkRequest.

        <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>

        :return: The auth_type of this CreateServiceNetworkRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this CreateServiceNetworkRequest.

        <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>

        :param auth_type: The auth_type of this CreateServiceNetworkRequest.
        :type auth_type: str
        """
        allowed_values = ["NONE", "AWS_IAM"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def client_token(self):
        """Gets the client_token of this CreateServiceNetworkRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateServiceNetworkRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateServiceNetworkRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateServiceNetworkRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def name(self):
        """Gets the name of this CreateServiceNetworkRequest.

        The name of the service network. The name must be unique to the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :return: The name of this CreateServiceNetworkRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateServiceNetworkRequest.

        The name of the service network. The name must be unique to the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :param name: The name of this CreateServiceNetworkRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateServiceNetworkRequest.

        The tags for the service network.

        :return: The tags of this CreateServiceNetworkRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceNetworkRequest.

        The tags for the service network.

        :param tags: The tags of this CreateServiceNetworkRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
