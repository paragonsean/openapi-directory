# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetAccessLogSubscriptionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_at: datetime=None, destination_arn: str=None, id: str=None, last_updated_at: datetime=None, resource_arn: str=None, resource_id: str=None):
        """GetAccessLogSubscriptionResponse - a model defined in OpenAPI

        :param arn: The arn of this GetAccessLogSubscriptionResponse.
        :param created_at: The created_at of this GetAccessLogSubscriptionResponse.
        :param destination_arn: The destination_arn of this GetAccessLogSubscriptionResponse.
        :param id: The id of this GetAccessLogSubscriptionResponse.
        :param last_updated_at: The last_updated_at of this GetAccessLogSubscriptionResponse.
        :param resource_arn: The resource_arn of this GetAccessLogSubscriptionResponse.
        :param resource_id: The resource_id of this GetAccessLogSubscriptionResponse.
        """
        self.openapi_types = {
            'arn': str,
            'created_at': datetime,
            'destination_arn': str,
            'id': str,
            'last_updated_at': datetime,
            'resource_arn': str,
            'resource_id': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_at': 'createdAt',
            'destination_arn': 'destinationArn',
            'id': 'id',
            'last_updated_at': 'lastUpdatedAt',
            'resource_arn': 'resourceArn',
            'resource_id': 'resourceId'
        }

        self._arn = arn
        self._created_at = created_at
        self._destination_arn = destination_arn
        self._id = id
        self._last_updated_at = last_updated_at
        self._resource_arn = resource_arn
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAccessLogSubscriptionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAccessLogSubscriptionResponse of this GetAccessLogSubscriptionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this GetAccessLogSubscriptionResponse.


        :return: The arn of this GetAccessLogSubscriptionResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetAccessLogSubscriptionResponse.


        :param arn: The arn of this GetAccessLogSubscriptionResponse.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this GetAccessLogSubscriptionResponse.


        :return: The created_at of this GetAccessLogSubscriptionResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetAccessLogSubscriptionResponse.


        :param created_at: The created_at of this GetAccessLogSubscriptionResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def destination_arn(self):
        """Gets the destination_arn of this GetAccessLogSubscriptionResponse.


        :return: The destination_arn of this GetAccessLogSubscriptionResponse.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this GetAccessLogSubscriptionResponse.


        :param destination_arn: The destination_arn of this GetAccessLogSubscriptionResponse.
        :type destination_arn: str
        """
        if destination_arn is None:
            raise ValueError("Invalid value for `destination_arn`, must not be `None`")

        self._destination_arn = destination_arn

    @property
    def id(self):
        """Gets the id of this GetAccessLogSubscriptionResponse.


        :return: The id of this GetAccessLogSubscriptionResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetAccessLogSubscriptionResponse.


        :param id: The id of this GetAccessLogSubscriptionResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this GetAccessLogSubscriptionResponse.


        :return: The last_updated_at of this GetAccessLogSubscriptionResponse.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this GetAccessLogSubscriptionResponse.


        :param last_updated_at: The last_updated_at of this GetAccessLogSubscriptionResponse.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")

        self._last_updated_at = last_updated_at

    @property
    def resource_arn(self):
        """Gets the resource_arn of this GetAccessLogSubscriptionResponse.


        :return: The resource_arn of this GetAccessLogSubscriptionResponse.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this GetAccessLogSubscriptionResponse.


        :param resource_arn: The resource_arn of this GetAccessLogSubscriptionResponse.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def resource_id(self):
        """Gets the resource_id of this GetAccessLogSubscriptionResponse.


        :return: The resource_id of this GetAccessLogSubscriptionResponse.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this GetAccessLogSubscriptionResponse.


        :param resource_id: The resource_id of this GetAccessLogSubscriptionResponse.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id
