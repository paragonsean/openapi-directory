# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_target_group_request_config import CreateTargetGroupRequestConfig
import re
from openapi_server import util


class CreateTargetGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, config: CreateTargetGroupRequestConfig=None, name: str=None, tags: Dict[str, str]=None, type: str=None):
        """CreateTargetGroupRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateTargetGroupRequest.
        :param config: The config of this CreateTargetGroupRequest.
        :param name: The name of this CreateTargetGroupRequest.
        :param tags: The tags of this CreateTargetGroupRequest.
        :param type: The type of this CreateTargetGroupRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'config': CreateTargetGroupRequestConfig,
            'name': str,
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'config': 'config',
            'name': 'name',
            'tags': 'tags',
            'type': 'type'
        }

        self._client_token = client_token
        self._config = config
        self._name = name
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTargetGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTargetGroup_request of this CreateTargetGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateTargetGroupRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :return: The client_token of this CreateTargetGroupRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTargetGroupRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.

        :param client_token: The client_token of this CreateTargetGroupRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[!-~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[!-~]+/`")

        self._client_token = client_token

    @property
    def config(self):
        """Gets the config of this CreateTargetGroupRequest.


        :return: The config of this CreateTargetGroupRequest.
        :rtype: CreateTargetGroupRequestConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this CreateTargetGroupRequest.


        :param config: The config of this CreateTargetGroupRequest.
        :type config: CreateTargetGroupRequestConfig
        """

        self._config = config

    @property
    def name(self):
        """Gets the name of this CreateTargetGroupRequest.

        The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :return: The name of this CreateTargetGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTargetGroupRequest.

        The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.

        :param name: The name of this CreateTargetGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateTargetGroupRequest.

        The tags for the target group.

        :return: The tags of this CreateTargetGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTargetGroupRequest.

        The tags for the target group.

        :param tags: The tags of this CreateTargetGroupRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this CreateTargetGroupRequest.

        The type of target group.

        :return: The type of this CreateTargetGroupRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateTargetGroupRequest.

        The type of target group.

        :param type: The type of this CreateTargetGroupRequest.
        :type type: str
        """
        allowed_values = ["IP", "LAMBDA", "INSTANCE", "ALB"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
