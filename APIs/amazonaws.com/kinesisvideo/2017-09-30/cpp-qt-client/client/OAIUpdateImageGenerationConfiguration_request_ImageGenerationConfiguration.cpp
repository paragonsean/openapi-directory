/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration() {
    this->initializeModel();
}

OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::~OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration() {}

void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_image_selector_type_isSet = false;
    m_image_selector_type_isValid = false;

    m_destination_config_isSet = false;
    m_destination_config_isValid = false;

    m_sampling_interval_isSet = false;
    m_sampling_interval_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_format_config_isSet = false;
    m_format_config_isValid = false;

    m_width_pixels_isSet = false;
    m_width_pixels_isValid = false;

    m_height_pixels_isSet = false;
    m_height_pixels_isValid = false;
}

void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_image_selector_type_isValid = ::OpenAPI::fromJsonValue(m_image_selector_type, json[QString("ImageSelectorType")]);
    m_image_selector_type_isSet = !json[QString("ImageSelectorType")].isNull() && m_image_selector_type_isValid;

    m_destination_config_isValid = ::OpenAPI::fromJsonValue(m_destination_config, json[QString("DestinationConfig")]);
    m_destination_config_isSet = !json[QString("DestinationConfig")].isNull() && m_destination_config_isValid;

    m_sampling_interval_isValid = ::OpenAPI::fromJsonValue(m_sampling_interval, json[QString("SamplingInterval")]);
    m_sampling_interval_isSet = !json[QString("SamplingInterval")].isNull() && m_sampling_interval_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_format_config_isValid = ::OpenAPI::fromJsonValue(m_format_config, json[QString("FormatConfig")]);
    m_format_config_isSet = !json[QString("FormatConfig")].isNull() && m_format_config_isValid;

    m_width_pixels_isValid = ::OpenAPI::fromJsonValue(m_width_pixels, json[QString("WidthPixels")]);
    m_width_pixels_isSet = !json[QString("WidthPixels")].isNull() && m_width_pixels_isValid;

    m_height_pixels_isValid = ::OpenAPI::fromJsonValue(m_height_pixels, json[QString("HeightPixels")]);
    m_height_pixels_isSet = !json[QString("HeightPixels")].isNull() && m_height_pixels_isValid;
}

QString OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_image_selector_type.isSet()) {
        obj.insert(QString("ImageSelectorType"), ::OpenAPI::toJsonValue(m_image_selector_type));
    }
    if (m_destination_config.isSet()) {
        obj.insert(QString("DestinationConfig"), ::OpenAPI::toJsonValue(m_destination_config));
    }
    if (m_sampling_interval_isSet) {
        obj.insert(QString("SamplingInterval"), ::OpenAPI::toJsonValue(m_sampling_interval));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_format_config.isSet()) {
        obj.insert(QString("FormatConfig"), ::OpenAPI::toJsonValue(m_format_config));
    }
    if (m_width_pixels_isSet) {
        obj.insert(QString("WidthPixels"), ::OpenAPI::toJsonValue(m_width_pixels));
    }
    if (m_height_pixels_isSet) {
        obj.insert(QString("HeightPixels"), ::OpenAPI::toJsonValue(m_height_pixels));
    }
    return obj;
}

OAIConfigurationStatus OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getStatus() const {
    return m_status;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setStatus(const OAIConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

OAIImageSelectorType OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getImageSelectorType() const {
    return m_image_selector_type;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setImageSelectorType(const OAIImageSelectorType &image_selector_type) {
    m_image_selector_type = image_selector_type;
    m_image_selector_type_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_image_selector_type_Set() const{
    return m_image_selector_type_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_image_selector_type_Valid() const{
    return m_image_selector_type_isValid;
}

OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration_DestinationConfig OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getDestinationConfig() const {
    return m_destination_config;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setDestinationConfig(const OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration_DestinationConfig &destination_config) {
    m_destination_config = destination_config;
    m_destination_config_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_destination_config_Set() const{
    return m_destination_config_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_destination_config_Valid() const{
    return m_destination_config_isValid;
}

qint32 OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getSamplingInterval() const {
    return m_sampling_interval;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setSamplingInterval(const qint32 &sampling_interval) {
    m_sampling_interval = sampling_interval;
    m_sampling_interval_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_sampling_interval_Set() const{
    return m_sampling_interval_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_sampling_interval_Valid() const{
    return m_sampling_interval_isValid;
}

OAIFormat OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getFormat() const {
    return m_format;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setFormat(const OAIFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_format_Set() const{
    return m_format_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_format_Valid() const{
    return m_format_isValid;
}

QMap OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getFormatConfig() const {
    return m_format_config;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setFormatConfig(const QMap &format_config) {
    m_format_config = format_config;
    m_format_config_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_format_config_Set() const{
    return m_format_config_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_format_config_Valid() const{
    return m_format_config_isValid;
}

qint32 OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getWidthPixels() const {
    return m_width_pixels;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setWidthPixels(const qint32 &width_pixels) {
    m_width_pixels = width_pixels;
    m_width_pixels_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_width_pixels_Set() const{
    return m_width_pixels_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_width_pixels_Valid() const{
    return m_width_pixels_isValid;
}

qint32 OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::getHeightPixels() const {
    return m_height_pixels;
}
void OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::setHeightPixels(const qint32 &height_pixels) {
    m_height_pixels = height_pixels;
    m_height_pixels_isSet = true;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_height_pixels_Set() const{
    return m_height_pixels_isSet;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::is_height_pixels_Valid() const{
    return m_height_pixels_isValid;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_selector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateImageGenerationConfiguration_request_ImageGenerationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
