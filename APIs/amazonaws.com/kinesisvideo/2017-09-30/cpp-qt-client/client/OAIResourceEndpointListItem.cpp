/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceEndpointListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceEndpointListItem::OAIResourceEndpointListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceEndpointListItem::OAIResourceEndpointListItem() {
    this->initializeModel();
}

OAIResourceEndpointListItem::~OAIResourceEndpointListItem() {}

void OAIResourceEndpointListItem::initializeModel() {

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_resource_endpoint_isSet = false;
    m_resource_endpoint_isValid = false;
}

void OAIResourceEndpointListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceEndpointListItem::fromJsonObject(QJsonObject json) {

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_resource_endpoint_isValid = ::OpenAPI::fromJsonValue(m_resource_endpoint, json[QString("ResourceEndpoint")]);
    m_resource_endpoint_isSet = !json[QString("ResourceEndpoint")].isNull() && m_resource_endpoint_isValid;
}

QString OAIResourceEndpointListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceEndpointListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_resource_endpoint_isSet) {
        obj.insert(QString("ResourceEndpoint"), ::OpenAPI::toJsonValue(m_resource_endpoint));
    }
    return obj;
}

OAIChannelProtocol OAIResourceEndpointListItem::getProtocol() const {
    return m_protocol;
}
void OAIResourceEndpointListItem::setProtocol(const OAIChannelProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIResourceEndpointListItem::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIResourceEndpointListItem::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIResourceEndpointListItem::getResourceEndpoint() const {
    return m_resource_endpoint;
}
void OAIResourceEndpointListItem::setResourceEndpoint(const QString &resource_endpoint) {
    m_resource_endpoint = resource_endpoint;
    m_resource_endpoint_isSet = true;
}

bool OAIResourceEndpointListItem::is_resource_endpoint_Set() const{
    return m_resource_endpoint_isSet;
}

bool OAIResourceEndpointListItem::is_resource_endpoint_Valid() const{
    return m_resource_endpoint_isValid;
}

bool OAIResourceEndpointListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceEndpointListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
