/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalSizeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalSizeConfig::OAILocalSizeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalSizeConfig::OAILocalSizeConfig() {
    this->initializeModel();
}

OAILocalSizeConfig::~OAILocalSizeConfig() {}

void OAILocalSizeConfig::initializeModel() {

    m_max_local_media_size_in_mb_isSet = false;
    m_max_local_media_size_in_mb_isValid = false;

    m_strategy_on_full_size_isSet = false;
    m_strategy_on_full_size_isValid = false;
}

void OAILocalSizeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalSizeConfig::fromJsonObject(QJsonObject json) {

    m_max_local_media_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_max_local_media_size_in_mb, json[QString("MaxLocalMediaSizeInMB")]);
    m_max_local_media_size_in_mb_isSet = !json[QString("MaxLocalMediaSizeInMB")].isNull() && m_max_local_media_size_in_mb_isValid;

    m_strategy_on_full_size_isValid = ::OpenAPI::fromJsonValue(m_strategy_on_full_size, json[QString("StrategyOnFullSize")]);
    m_strategy_on_full_size_isSet = !json[QString("StrategyOnFullSize")].isNull() && m_strategy_on_full_size_isValid;
}

QString OAILocalSizeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalSizeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_max_local_media_size_in_mb_isSet) {
        obj.insert(QString("MaxLocalMediaSizeInMB"), ::OpenAPI::toJsonValue(m_max_local_media_size_in_mb));
    }
    if (m_strategy_on_full_size.isSet()) {
        obj.insert(QString("StrategyOnFullSize"), ::OpenAPI::toJsonValue(m_strategy_on_full_size));
    }
    return obj;
}

qint32 OAILocalSizeConfig::getMaxLocalMediaSizeInMb() const {
    return m_max_local_media_size_in_mb;
}
void OAILocalSizeConfig::setMaxLocalMediaSizeInMb(const qint32 &max_local_media_size_in_mb) {
    m_max_local_media_size_in_mb = max_local_media_size_in_mb;
    m_max_local_media_size_in_mb_isSet = true;
}

bool OAILocalSizeConfig::is_max_local_media_size_in_mb_Set() const{
    return m_max_local_media_size_in_mb_isSet;
}

bool OAILocalSizeConfig::is_max_local_media_size_in_mb_Valid() const{
    return m_max_local_media_size_in_mb_isValid;
}

OAIStrategyOnFullSize OAILocalSizeConfig::getStrategyOnFullSize() const {
    return m_strategy_on_full_size;
}
void OAILocalSizeConfig::setStrategyOnFullSize(const OAIStrategyOnFullSize &strategy_on_full_size) {
    m_strategy_on_full_size = strategy_on_full_size;
    m_strategy_on_full_size_isSet = true;
}

bool OAILocalSizeConfig::is_strategy_on_full_size_Set() const{
    return m_strategy_on_full_size_isSet;
}

bool OAILocalSizeConfig::is_strategy_on_full_size_Valid() const{
    return m_strategy_on_full_size_isValid;
}

bool OAILocalSizeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_local_media_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_on_full_size.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalSizeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
