/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStreamOutput_StreamInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStreamOutput_StreamInfo::OAIDescribeStreamOutput_StreamInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStreamOutput_StreamInfo::OAIDescribeStreamOutput_StreamInfo() {
    this->initializeModel();
}

OAIDescribeStreamOutput_StreamInfo::~OAIDescribeStreamOutput_StreamInfo() {}

void OAIDescribeStreamOutput_StreamInfo::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_data_retention_in_hours_isSet = false;
    m_data_retention_in_hours_isValid = false;
}

void OAIDescribeStreamOutput_StreamInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStreamOutput_StreamInfo::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamARN")]);
    m_stream_arn_isSet = !json[QString("StreamARN")].isNull() && m_stream_arn_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("MediaType")]);
    m_media_type_isSet = !json[QString("MediaType")].isNull() && m_media_type_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_data_retention_in_hours_isValid = ::OpenAPI::fromJsonValue(m_data_retention_in_hours, json[QString("DataRetentionInHours")]);
    m_data_retention_in_hours_isSet = !json[QString("DataRetentionInHours")].isNull() && m_data_retention_in_hours_isValid;
}

QString OAIDescribeStreamOutput_StreamInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStreamOutput_StreamInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamARN"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("MediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_data_retention_in_hours_isSet) {
        obj.insert(QString("DataRetentionInHours"), ::OpenAPI::toJsonValue(m_data_retention_in_hours));
    }
    return obj;
}

QString OAIDescribeStreamOutput_StreamInfo::getDeviceName() const {
    return m_device_name;
}
void OAIDescribeStreamOutput_StreamInfo::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIDescribeStreamOutput_StreamInfo::getStreamName() const {
    return m_stream_name;
}
void OAIDescribeStreamOutput_StreamInfo::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIDescribeStreamOutput_StreamInfo::getStreamArn() const {
    return m_stream_arn;
}
void OAIDescribeStreamOutput_StreamInfo::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

QString OAIDescribeStreamOutput_StreamInfo::getMediaType() const {
    return m_media_type;
}
void OAIDescribeStreamOutput_StreamInfo::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIDescribeStreamOutput_StreamInfo::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDescribeStreamOutput_StreamInfo::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDescribeStreamOutput_StreamInfo::getVersion() const {
    return m_version;
}
void OAIDescribeStreamOutput_StreamInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_version_Valid() const{
    return m_version_isValid;
}

OAIStatus OAIDescribeStreamOutput_StreamInfo::getStatus() const {
    return m_status;
}
void OAIDescribeStreamOutput_StreamInfo::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeStreamOutput_StreamInfo::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeStreamOutput_StreamInfo::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

qint32 OAIDescribeStreamOutput_StreamInfo::getDataRetentionInHours() const {
    return m_data_retention_in_hours;
}
void OAIDescribeStreamOutput_StreamInfo::setDataRetentionInHours(const qint32 &data_retention_in_hours) {
    m_data_retention_in_hours = data_retention_in_hours;
    m_data_retention_in_hours_isSet = true;
}

bool OAIDescribeStreamOutput_StreamInfo::is_data_retention_in_hours_Set() const{
    return m_data_retention_in_hours_isSet;
}

bool OAIDescribeStreamOutput_StreamInfo::is_data_retention_in_hours_Valid() const{
    return m_data_retention_in_hours_isValid;
}

bool OAIDescribeStreamOutput_StreamInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_retention_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStreamOutput_StreamInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
