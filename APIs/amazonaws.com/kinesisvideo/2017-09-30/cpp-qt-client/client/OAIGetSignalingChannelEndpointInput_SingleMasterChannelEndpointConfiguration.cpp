/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration() {
    this->initializeModel();
}

OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::~OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration() {}

void OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::initializeModel() {

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::fromJsonObject(QJsonObject json) {

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("Protocols")]);
    m_protocols_isSet = !json[QString("Protocols")].isNull() && m_protocols_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;
}

QString OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_protocols.isSet()) {
        obj.insert(QString("Protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_role.isSet()) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QList OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::getProtocols() const {
    return m_protocols;
}
void OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::setProtocols(const QList &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::is_protocols_Valid() const{
    return m_protocols_isValid;
}

OAIChannelRole OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::getRole() const {
    return m_role;
}
void OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::setRole(const OAIChannelRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSignalingChannelEndpointInput_SingleMasterChannelEndpointConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
