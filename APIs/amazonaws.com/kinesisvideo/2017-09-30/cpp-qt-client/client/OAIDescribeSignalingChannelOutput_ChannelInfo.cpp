/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSignalingChannelOutput_ChannelInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSignalingChannelOutput_ChannelInfo::OAIDescribeSignalingChannelOutput_ChannelInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSignalingChannelOutput_ChannelInfo::OAIDescribeSignalingChannelOutput_ChannelInfo() {
    this->initializeModel();
}

OAIDescribeSignalingChannelOutput_ChannelInfo::~OAIDescribeSignalingChannelOutput_ChannelInfo() {}

void OAIDescribeSignalingChannelOutput_ChannelInfo::initializeModel() {

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_channel_status_isSet = false;
    m_channel_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_single_master_configuration_isSet = false;
    m_single_master_configuration_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDescribeSignalingChannelOutput_ChannelInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSignalingChannelOutput_ChannelInfo::fromJsonObject(QJsonObject json) {

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelARN")]);
    m_channel_arn_isSet = !json[QString("ChannelARN")].isNull() && m_channel_arn_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("ChannelType")]);
    m_channel_type_isSet = !json[QString("ChannelType")].isNull() && m_channel_type_isValid;

    m_channel_status_isValid = ::OpenAPI::fromJsonValue(m_channel_status, json[QString("ChannelStatus")]);
    m_channel_status_isSet = !json[QString("ChannelStatus")].isNull() && m_channel_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_single_master_configuration_isValid = ::OpenAPI::fromJsonValue(m_single_master_configuration, json[QString("SingleMasterConfiguration")]);
    m_single_master_configuration_isSet = !json[QString("SingleMasterConfiguration")].isNull() && m_single_master_configuration_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIDescribeSignalingChannelOutput_ChannelInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSignalingChannelOutput_ChannelInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelARN"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_channel_type.isSet()) {
        obj.insert(QString("ChannelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_channel_status.isSet()) {
        obj.insert(QString("ChannelStatus"), ::OpenAPI::toJsonValue(m_channel_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_single_master_configuration.isSet()) {
        obj.insert(QString("SingleMasterConfiguration"), ::OpenAPI::toJsonValue(m_single_master_configuration));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIDescribeSignalingChannelOutput_ChannelInfo::getChannelName() const {
    return m_channel_name;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIDescribeSignalingChannelOutput_ChannelInfo::getChannelArn() const {
    return m_channel_arn;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAIChannelType OAIDescribeSignalingChannelOutput_ChannelInfo::getChannelType() const {
    return m_channel_type;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setChannelType(const OAIChannelType &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

OAIStatus OAIDescribeSignalingChannelOutput_ChannelInfo::getChannelStatus() const {
    return m_channel_status;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setChannelStatus(const OAIStatus &channel_status) {
    m_channel_status = channel_status;
    m_channel_status_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_status_Set() const{
    return m_channel_status_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_channel_status_Valid() const{
    return m_channel_status_isValid;
}

QDateTime OAIDescribeSignalingChannelOutput_ChannelInfo::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIChannelInfo_SingleMasterConfiguration OAIDescribeSignalingChannelOutput_ChannelInfo::getSingleMasterConfiguration() const {
    return m_single_master_configuration;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setSingleMasterConfiguration(const OAIChannelInfo_SingleMasterConfiguration &single_master_configuration) {
    m_single_master_configuration = single_master_configuration;
    m_single_master_configuration_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_single_master_configuration_Set() const{
    return m_single_master_configuration_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_single_master_configuration_Valid() const{
    return m_single_master_configuration_isValid;
}

QString OAIDescribeSignalingChannelOutput_ChannelInfo::getVersion() const {
    return m_version;
}
void OAIDescribeSignalingChannelOutput_ChannelInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_master_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSignalingChannelOutput_ChannelInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
