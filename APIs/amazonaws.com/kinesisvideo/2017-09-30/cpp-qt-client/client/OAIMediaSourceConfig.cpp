/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaSourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaSourceConfig::OAIMediaSourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaSourceConfig::OAIMediaSourceConfig() {
    this->initializeModel();
}

OAIMediaSourceConfig::~OAIMediaSourceConfig() {}

void OAIMediaSourceConfig::initializeModel() {

    m_media_uri_secret_arn_isSet = false;
    m_media_uri_secret_arn_isValid = false;

    m_media_uri_type_isSet = false;
    m_media_uri_type_isValid = false;
}

void OAIMediaSourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaSourceConfig::fromJsonObject(QJsonObject json) {

    m_media_uri_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_media_uri_secret_arn, json[QString("MediaUriSecretArn")]);
    m_media_uri_secret_arn_isSet = !json[QString("MediaUriSecretArn")].isNull() && m_media_uri_secret_arn_isValid;

    m_media_uri_type_isValid = ::OpenAPI::fromJsonValue(m_media_uri_type, json[QString("MediaUriType")]);
    m_media_uri_type_isSet = !json[QString("MediaUriType")].isNull() && m_media_uri_type_isValid;
}

QString OAIMediaSourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaSourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_media_uri_secret_arn_isSet) {
        obj.insert(QString("MediaUriSecretArn"), ::OpenAPI::toJsonValue(m_media_uri_secret_arn));
    }
    if (m_media_uri_type.isSet()) {
        obj.insert(QString("MediaUriType"), ::OpenAPI::toJsonValue(m_media_uri_type));
    }
    return obj;
}

QString OAIMediaSourceConfig::getMediaUriSecretArn() const {
    return m_media_uri_secret_arn;
}
void OAIMediaSourceConfig::setMediaUriSecretArn(const QString &media_uri_secret_arn) {
    m_media_uri_secret_arn = media_uri_secret_arn;
    m_media_uri_secret_arn_isSet = true;
}

bool OAIMediaSourceConfig::is_media_uri_secret_arn_Set() const{
    return m_media_uri_secret_arn_isSet;
}

bool OAIMediaSourceConfig::is_media_uri_secret_arn_Valid() const{
    return m_media_uri_secret_arn_isValid;
}

OAIMediaUriType OAIMediaSourceConfig::getMediaUriType() const {
    return m_media_uri_type;
}
void OAIMediaSourceConfig::setMediaUriType(const OAIMediaUriType &media_uri_type) {
    m_media_uri_type = media_uri_type;
    m_media_uri_type_isSet = true;
}

bool OAIMediaSourceConfig::is_media_uri_type_Set() const{
    return m_media_uri_type_isSet;
}

bool OAIMediaSourceConfig::is_media_uri_type_Valid() const{
    return m_media_uri_type_isValid;
}

bool OAIMediaSourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_uri_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_uri_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaSourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_uri_secret_arn_isValid && m_media_uri_type_isValid && true;
}

} // namespace OpenAPI
