/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageGenerationDestinationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageGenerationDestinationConfig::OAIImageGenerationDestinationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageGenerationDestinationConfig::OAIImageGenerationDestinationConfig() {
    this->initializeModel();
}

OAIImageGenerationDestinationConfig::~OAIImageGenerationDestinationConfig() {}

void OAIImageGenerationDestinationConfig::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_destination_region_isSet = false;
    m_destination_region_isValid = false;
}

void OAIImageGenerationDestinationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageGenerationDestinationConfig::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_destination_region_isValid = ::OpenAPI::fromJsonValue(m_destination_region, json[QString("DestinationRegion")]);
    m_destination_region_isSet = !json[QString("DestinationRegion")].isNull() && m_destination_region_isValid;
}

QString OAIImageGenerationDestinationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageGenerationDestinationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_destination_region_isSet) {
        obj.insert(QString("DestinationRegion"), ::OpenAPI::toJsonValue(m_destination_region));
    }
    return obj;
}

QString OAIImageGenerationDestinationConfig::getUri() const {
    return m_uri;
}
void OAIImageGenerationDestinationConfig::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIImageGenerationDestinationConfig::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIImageGenerationDestinationConfig::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIImageGenerationDestinationConfig::getDestinationRegion() const {
    return m_destination_region;
}
void OAIImageGenerationDestinationConfig::setDestinationRegion(const QString &destination_region) {
    m_destination_region = destination_region;
    m_destination_region_isSet = true;
}

bool OAIImageGenerationDestinationConfig::is_destination_region_Set() const{
    return m_destination_region_isSet;
}

bool OAIImageGenerationDestinationConfig::is_destination_region_Valid() const{
    return m_destination_region_isValid;
}

bool OAIImageGenerationDestinationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageGenerationDestinationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uri_isValid && m_destination_region_isValid && true;
}

} // namespace OpenAPI
