/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEdgeConfigurationOutput_EdgeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEdgeConfigurationOutput_EdgeConfig::OAIDescribeEdgeConfigurationOutput_EdgeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEdgeConfigurationOutput_EdgeConfig::OAIDescribeEdgeConfigurationOutput_EdgeConfig() {
    this->initializeModel();
}

OAIDescribeEdgeConfigurationOutput_EdgeConfig::~OAIDescribeEdgeConfigurationOutput_EdgeConfig() {}

void OAIDescribeEdgeConfigurationOutput_EdgeConfig::initializeModel() {

    m_hub_device_arn_isSet = false;
    m_hub_device_arn_isValid = false;

    m_recorder_config_isSet = false;
    m_recorder_config_isValid = false;

    m_uploader_config_isSet = false;
    m_uploader_config_isValid = false;

    m_deletion_config_isSet = false;
    m_deletion_config_isValid = false;
}

void OAIDescribeEdgeConfigurationOutput_EdgeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEdgeConfigurationOutput_EdgeConfig::fromJsonObject(QJsonObject json) {

    m_hub_device_arn_isValid = ::OpenAPI::fromJsonValue(m_hub_device_arn, json[QString("HubDeviceArn")]);
    m_hub_device_arn_isSet = !json[QString("HubDeviceArn")].isNull() && m_hub_device_arn_isValid;

    m_recorder_config_isValid = ::OpenAPI::fromJsonValue(m_recorder_config, json[QString("RecorderConfig")]);
    m_recorder_config_isSet = !json[QString("RecorderConfig")].isNull() && m_recorder_config_isValid;

    m_uploader_config_isValid = ::OpenAPI::fromJsonValue(m_uploader_config, json[QString("UploaderConfig")]);
    m_uploader_config_isSet = !json[QString("UploaderConfig")].isNull() && m_uploader_config_isValid;

    m_deletion_config_isValid = ::OpenAPI::fromJsonValue(m_deletion_config, json[QString("DeletionConfig")]);
    m_deletion_config_isSet = !json[QString("DeletionConfig")].isNull() && m_deletion_config_isValid;
}

QString OAIDescribeEdgeConfigurationOutput_EdgeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEdgeConfigurationOutput_EdgeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_hub_device_arn_isSet) {
        obj.insert(QString("HubDeviceArn"), ::OpenAPI::toJsonValue(m_hub_device_arn));
    }
    if (m_recorder_config.isSet()) {
        obj.insert(QString("RecorderConfig"), ::OpenAPI::toJsonValue(m_recorder_config));
    }
    if (m_uploader_config.isSet()) {
        obj.insert(QString("UploaderConfig"), ::OpenAPI::toJsonValue(m_uploader_config));
    }
    if (m_deletion_config.isSet()) {
        obj.insert(QString("DeletionConfig"), ::OpenAPI::toJsonValue(m_deletion_config));
    }
    return obj;
}

QString OAIDescribeEdgeConfigurationOutput_EdgeConfig::getHubDeviceArn() const {
    return m_hub_device_arn;
}
void OAIDescribeEdgeConfigurationOutput_EdgeConfig::setHubDeviceArn(const QString &hub_device_arn) {
    m_hub_device_arn = hub_device_arn;
    m_hub_device_arn_isSet = true;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_hub_device_arn_Set() const{
    return m_hub_device_arn_isSet;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_hub_device_arn_Valid() const{
    return m_hub_device_arn_isValid;
}

OAIStartEdgeConfigurationUpdate_request_EdgeConfig_RecorderConfig OAIDescribeEdgeConfigurationOutput_EdgeConfig::getRecorderConfig() const {
    return m_recorder_config;
}
void OAIDescribeEdgeConfigurationOutput_EdgeConfig::setRecorderConfig(const OAIStartEdgeConfigurationUpdate_request_EdgeConfig_RecorderConfig &recorder_config) {
    m_recorder_config = recorder_config;
    m_recorder_config_isSet = true;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_recorder_config_Set() const{
    return m_recorder_config_isSet;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_recorder_config_Valid() const{
    return m_recorder_config_isValid;
}

OAIStartEdgeConfigurationUpdate_request_EdgeConfig_UploaderConfig OAIDescribeEdgeConfigurationOutput_EdgeConfig::getUploaderConfig() const {
    return m_uploader_config;
}
void OAIDescribeEdgeConfigurationOutput_EdgeConfig::setUploaderConfig(const OAIStartEdgeConfigurationUpdate_request_EdgeConfig_UploaderConfig &uploader_config) {
    m_uploader_config = uploader_config;
    m_uploader_config_isSet = true;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_uploader_config_Set() const{
    return m_uploader_config_isSet;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_uploader_config_Valid() const{
    return m_uploader_config_isValid;
}

OAIStartEdgeConfigurationUpdate_request_EdgeConfig_DeletionConfig OAIDescribeEdgeConfigurationOutput_EdgeConfig::getDeletionConfig() const {
    return m_deletion_config;
}
void OAIDescribeEdgeConfigurationOutput_EdgeConfig::setDeletionConfig(const OAIStartEdgeConfigurationUpdate_request_EdgeConfig_DeletionConfig &deletion_config) {
    m_deletion_config = deletion_config;
    m_deletion_config_isSet = true;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_deletion_config_Set() const{
    return m_deletion_config_isSet;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::is_deletion_config_Valid() const{
    return m_deletion_config_isValid;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hub_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorder_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploader_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEdgeConfigurationOutput_EdgeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hub_device_arn_isValid && m_recorder_config_isValid && true;
}

} // namespace OpenAPI
