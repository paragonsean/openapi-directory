/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgeAgentStatus_LastUploaderStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgeAgentStatus_LastUploaderStatus::OAIEdgeAgentStatus_LastUploaderStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgeAgentStatus_LastUploaderStatus::OAIEdgeAgentStatus_LastUploaderStatus() {
    this->initializeModel();
}

OAIEdgeAgentStatus_LastUploaderStatus::~OAIEdgeAgentStatus_LastUploaderStatus() {}

void OAIEdgeAgentStatus_LastUploaderStatus::initializeModel() {

    m_job_status_details_isSet = false;
    m_job_status_details_isValid = false;

    m_last_collected_time_isSet = false;
    m_last_collected_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_uploader_status_isSet = false;
    m_uploader_status_isValid = false;
}

void OAIEdgeAgentStatus_LastUploaderStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgeAgentStatus_LastUploaderStatus::fromJsonObject(QJsonObject json) {

    m_job_status_details_isValid = ::OpenAPI::fromJsonValue(m_job_status_details, json[QString("JobStatusDetails")]);
    m_job_status_details_isSet = !json[QString("JobStatusDetails")].isNull() && m_job_status_details_isValid;

    m_last_collected_time_isValid = ::OpenAPI::fromJsonValue(m_last_collected_time, json[QString("LastCollectedTime")]);
    m_last_collected_time_isSet = !json[QString("LastCollectedTime")].isNull() && m_last_collected_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_uploader_status_isValid = ::OpenAPI::fromJsonValue(m_uploader_status, json[QString("UploaderStatus")]);
    m_uploader_status_isSet = !json[QString("UploaderStatus")].isNull() && m_uploader_status_isValid;
}

QString OAIEdgeAgentStatus_LastUploaderStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgeAgentStatus_LastUploaderStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_job_status_details_isSet) {
        obj.insert(QString("JobStatusDetails"), ::OpenAPI::toJsonValue(m_job_status_details));
    }
    if (m_last_collected_time_isSet) {
        obj.insert(QString("LastCollectedTime"), ::OpenAPI::toJsonValue(m_last_collected_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_uploader_status.isSet()) {
        obj.insert(QString("UploaderStatus"), ::OpenAPI::toJsonValue(m_uploader_status));
    }
    return obj;
}

QString OAIEdgeAgentStatus_LastUploaderStatus::getJobStatusDetails() const {
    return m_job_status_details;
}
void OAIEdgeAgentStatus_LastUploaderStatus::setJobStatusDetails(const QString &job_status_details) {
    m_job_status_details = job_status_details;
    m_job_status_details_isSet = true;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_job_status_details_Set() const{
    return m_job_status_details_isSet;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_job_status_details_Valid() const{
    return m_job_status_details_isValid;
}

QDateTime OAIEdgeAgentStatus_LastUploaderStatus::getLastCollectedTime() const {
    return m_last_collected_time;
}
void OAIEdgeAgentStatus_LastUploaderStatus::setLastCollectedTime(const QDateTime &last_collected_time) {
    m_last_collected_time = last_collected_time;
    m_last_collected_time_isSet = true;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_last_collected_time_Set() const{
    return m_last_collected_time_isSet;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_last_collected_time_Valid() const{
    return m_last_collected_time_isValid;
}

QDateTime OAIEdgeAgentStatus_LastUploaderStatus::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIEdgeAgentStatus_LastUploaderStatus::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIUploaderStatus OAIEdgeAgentStatus_LastUploaderStatus::getUploaderStatus() const {
    return m_uploader_status;
}
void OAIEdgeAgentStatus_LastUploaderStatus::setUploaderStatus(const OAIUploaderStatus &uploader_status) {
    m_uploader_status = uploader_status;
    m_uploader_status_isSet = true;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_uploader_status_Set() const{
    return m_uploader_status_isSet;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::is_uploader_status_Valid() const{
    return m_uploader_status_isValid;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_collected_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploader_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgeAgentStatus_LastUploaderStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
