/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletionConfig::OAIDeletionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletionConfig::OAIDeletionConfig() {
    this->initializeModel();
}

OAIDeletionConfig::~OAIDeletionConfig() {}

void OAIDeletionConfig::initializeModel() {

    m_edge_retention_in_hours_isSet = false;
    m_edge_retention_in_hours_isValid = false;

    m_local_size_config_isSet = false;
    m_local_size_config_isValid = false;

    m_delete_after_upload_isSet = false;
    m_delete_after_upload_isValid = false;
}

void OAIDeletionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletionConfig::fromJsonObject(QJsonObject json) {

    m_edge_retention_in_hours_isValid = ::OpenAPI::fromJsonValue(m_edge_retention_in_hours, json[QString("EdgeRetentionInHours")]);
    m_edge_retention_in_hours_isSet = !json[QString("EdgeRetentionInHours")].isNull() && m_edge_retention_in_hours_isValid;

    m_local_size_config_isValid = ::OpenAPI::fromJsonValue(m_local_size_config, json[QString("LocalSizeConfig")]);
    m_local_size_config_isSet = !json[QString("LocalSizeConfig")].isNull() && m_local_size_config_isValid;

    m_delete_after_upload_isValid = ::OpenAPI::fromJsonValue(m_delete_after_upload, json[QString("DeleteAfterUpload")]);
    m_delete_after_upload_isSet = !json[QString("DeleteAfterUpload")].isNull() && m_delete_after_upload_isValid;
}

QString OAIDeletionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_edge_retention_in_hours_isSet) {
        obj.insert(QString("EdgeRetentionInHours"), ::OpenAPI::toJsonValue(m_edge_retention_in_hours));
    }
    if (m_local_size_config.isSet()) {
        obj.insert(QString("LocalSizeConfig"), ::OpenAPI::toJsonValue(m_local_size_config));
    }
    if (m_delete_after_upload_isSet) {
        obj.insert(QString("DeleteAfterUpload"), ::OpenAPI::toJsonValue(m_delete_after_upload));
    }
    return obj;
}

qint32 OAIDeletionConfig::getEdgeRetentionInHours() const {
    return m_edge_retention_in_hours;
}
void OAIDeletionConfig::setEdgeRetentionInHours(const qint32 &edge_retention_in_hours) {
    m_edge_retention_in_hours = edge_retention_in_hours;
    m_edge_retention_in_hours_isSet = true;
}

bool OAIDeletionConfig::is_edge_retention_in_hours_Set() const{
    return m_edge_retention_in_hours_isSet;
}

bool OAIDeletionConfig::is_edge_retention_in_hours_Valid() const{
    return m_edge_retention_in_hours_isValid;
}

OAIDeletionConfig_LocalSizeConfig OAIDeletionConfig::getLocalSizeConfig() const {
    return m_local_size_config;
}
void OAIDeletionConfig::setLocalSizeConfig(const OAIDeletionConfig_LocalSizeConfig &local_size_config) {
    m_local_size_config = local_size_config;
    m_local_size_config_isSet = true;
}

bool OAIDeletionConfig::is_local_size_config_Set() const{
    return m_local_size_config_isSet;
}

bool OAIDeletionConfig::is_local_size_config_Valid() const{
    return m_local_size_config_isValid;
}

bool OAIDeletionConfig::getDeleteAfterUpload() const {
    return m_delete_after_upload;
}
void OAIDeletionConfig::setDeleteAfterUpload(const bool &delete_after_upload) {
    m_delete_after_upload = delete_after_upload;
    m_delete_after_upload_isSet = true;
}

bool OAIDeletionConfig::is_delete_after_upload_Set() const{
    return m_delete_after_upload_isSet;
}

bool OAIDeletionConfig::is_delete_after_upload_Valid() const{
    return m_delete_after_upload_isValid;
}

bool OAIDeletionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edge_retention_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_size_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_after_upload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
