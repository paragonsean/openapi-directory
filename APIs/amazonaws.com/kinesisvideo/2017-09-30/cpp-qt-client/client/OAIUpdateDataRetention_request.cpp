/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataRetention_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataRetention_request::OAIUpdateDataRetention_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataRetention_request::OAIUpdateDataRetention_request() {
    this->initializeModel();
}

OAIUpdateDataRetention_request::~OAIUpdateDataRetention_request() {}

void OAIUpdateDataRetention_request::initializeModel() {

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_data_retention_change_in_hours_isSet = false;
    m_data_retention_change_in_hours_isValid = false;
}

void OAIUpdateDataRetention_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataRetention_request::fromJsonObject(QJsonObject json) {

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamARN")]);
    m_stream_arn_isSet = !json[QString("StreamARN")].isNull() && m_stream_arn_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("Operation")]);
    m_operation_isSet = !json[QString("Operation")].isNull() && m_operation_isValid;

    m_data_retention_change_in_hours_isValid = ::OpenAPI::fromJsonValue(m_data_retention_change_in_hours, json[QString("DataRetentionChangeInHours")]);
    m_data_retention_change_in_hours_isSet = !json[QString("DataRetentionChangeInHours")].isNull() && m_data_retention_change_in_hours_isValid;
}

QString OAIUpdateDataRetention_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataRetention_request::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamARN"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_operation_isSet) {
        obj.insert(QString("Operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_data_retention_change_in_hours_isSet) {
        obj.insert(QString("DataRetentionChangeInHours"), ::OpenAPI::toJsonValue(m_data_retention_change_in_hours));
    }
    return obj;
}

QString OAIUpdateDataRetention_request::getStreamName() const {
    return m_stream_name;
}
void OAIUpdateDataRetention_request::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIUpdateDataRetention_request::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIUpdateDataRetention_request::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIUpdateDataRetention_request::getStreamArn() const {
    return m_stream_arn;
}
void OAIUpdateDataRetention_request::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIUpdateDataRetention_request::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIUpdateDataRetention_request::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

QString OAIUpdateDataRetention_request::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateDataRetention_request::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateDataRetention_request::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateDataRetention_request::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIUpdateDataRetention_request::getOperation() const {
    return m_operation;
}
void OAIUpdateDataRetention_request::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIUpdateDataRetention_request::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIUpdateDataRetention_request::is_operation_Valid() const{
    return m_operation_isValid;
}

qint32 OAIUpdateDataRetention_request::getDataRetentionChangeInHours() const {
    return m_data_retention_change_in_hours;
}
void OAIUpdateDataRetention_request::setDataRetentionChangeInHours(const qint32 &data_retention_change_in_hours) {
    m_data_retention_change_in_hours = data_retention_change_in_hours;
    m_data_retention_change_in_hours_isSet = true;
}

bool OAIUpdateDataRetention_request::is_data_retention_change_in_hours_Set() const{
    return m_data_retention_change_in_hours_isSet;
}

bool OAIUpdateDataRetention_request::is_data_retention_change_in_hours_Valid() const{
    return m_data_retention_change_in_hours_isValid;
}

bool OAIUpdateDataRetention_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_retention_change_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataRetention_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_version_isValid && m_operation_isValid && m_data_retention_change_in_hours_isValid && true;
}

} // namespace OpenAPI
