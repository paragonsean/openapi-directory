/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStream_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStream_request::OAICreateStream_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStream_request::OAICreateStream_request() {
    this->initializeModel();
}

OAICreateStream_request::~OAICreateStream_request() {}

void OAICreateStream_request::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_data_retention_in_hours_isSet = false;
    m_data_retention_in_hours_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateStream_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStream_request::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("MediaType")]);
    m_media_type_isSet = !json[QString("MediaType")].isNull() && m_media_type_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_data_retention_in_hours_isValid = ::OpenAPI::fromJsonValue(m_data_retention_in_hours, json[QString("DataRetentionInHours")]);
    m_data_retention_in_hours_isSet = !json[QString("DataRetentionInHours")].isNull() && m_data_retention_in_hours_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateStream_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStream_request::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("MediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_data_retention_in_hours_isSet) {
        obj.insert(QString("DataRetentionInHours"), ::OpenAPI::toJsonValue(m_data_retention_in_hours));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateStream_request::getDeviceName() const {
    return m_device_name;
}
void OAICreateStream_request::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAICreateStream_request::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAICreateStream_request::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAICreateStream_request::getStreamName() const {
    return m_stream_name;
}
void OAICreateStream_request::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAICreateStream_request::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAICreateStream_request::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAICreateStream_request::getMediaType() const {
    return m_media_type;
}
void OAICreateStream_request::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAICreateStream_request::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAICreateStream_request::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAICreateStream_request::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateStream_request::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateStream_request::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateStream_request::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

qint32 OAICreateStream_request::getDataRetentionInHours() const {
    return m_data_retention_in_hours;
}
void OAICreateStream_request::setDataRetentionInHours(const qint32 &data_retention_in_hours) {
    m_data_retention_in_hours = data_retention_in_hours;
    m_data_retention_in_hours_isSet = true;
}

bool OAICreateStream_request::is_data_retention_in_hours_Set() const{
    return m_data_retention_in_hours_isSet;
}

bool OAICreateStream_request::is_data_retention_in_hours_Valid() const{
    return m_data_retention_in_hours_isValid;
}

QMap<QString, QString> OAICreateStream_request::getTags() const {
    return m_tags;
}
void OAICreateStream_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStream_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStream_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateStream_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_retention_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStream_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_name_isValid && true;
}

} // namespace OpenAPI
