# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploaderConfigScheduleConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schedule_expression: str=None, duration_in_seconds: int=None):
        """UploaderConfigScheduleConfig - a model defined in OpenAPI

        :param schedule_expression: The schedule_expression of this UploaderConfigScheduleConfig.
        :param duration_in_seconds: The duration_in_seconds of this UploaderConfigScheduleConfig.
        """
        self.openapi_types = {
            'schedule_expression': str,
            'duration_in_seconds': int
        }

        self.attribute_map = {
            'schedule_expression': 'ScheduleExpression',
            'duration_in_seconds': 'DurationInSeconds'
        }

        self._schedule_expression = schedule_expression
        self._duration_in_seconds = duration_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploaderConfigScheduleConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploaderConfig_ScheduleConfig of this UploaderConfigScheduleConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this UploaderConfigScheduleConfig.


        :return: The schedule_expression of this UploaderConfigScheduleConfig.
        :rtype: str
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this UploaderConfigScheduleConfig.


        :param schedule_expression: The schedule_expression of this UploaderConfigScheduleConfig.
        :type schedule_expression: str
        """
        if schedule_expression is None:
            raise ValueError("Invalid value for `schedule_expression`, must not be `None`")

        self._schedule_expression = schedule_expression

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this UploaderConfigScheduleConfig.


        :return: The duration_in_seconds of this UploaderConfigScheduleConfig.
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this UploaderConfigScheduleConfig.


        :param duration_in_seconds: The duration_in_seconds of this UploaderConfigScheduleConfig.
        :type duration_in_seconds: int
        """
        if duration_in_seconds is None:
            raise ValueError("Invalid value for `duration_in_seconds`, must not be `None`")

        self._duration_in_seconds = duration_in_seconds
