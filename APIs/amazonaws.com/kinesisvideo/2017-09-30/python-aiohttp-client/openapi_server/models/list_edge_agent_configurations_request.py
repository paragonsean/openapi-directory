# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListEdgeAgentConfigurationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hub_device_arn: str=None, max_results: int=None, next_token: str=None):
        """ListEdgeAgentConfigurationsRequest - a model defined in OpenAPI

        :param hub_device_arn: The hub_device_arn of this ListEdgeAgentConfigurationsRequest.
        :param max_results: The max_results of this ListEdgeAgentConfigurationsRequest.
        :param next_token: The next_token of this ListEdgeAgentConfigurationsRequest.
        """
        self.openapi_types = {
            'hub_device_arn': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'hub_device_arn': 'HubDeviceArn',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._hub_device_arn = hub_device_arn
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEdgeAgentConfigurationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEdgeAgentConfigurations_request of this ListEdgeAgentConfigurationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hub_device_arn(self):
        """Gets the hub_device_arn of this ListEdgeAgentConfigurationsRequest.

        The \"Internet of Things (IoT) Thing\" Arn of the edge agent.

        :return: The hub_device_arn of this ListEdgeAgentConfigurationsRequest.
        :rtype: str
        """
        return self._hub_device_arn

    @hub_device_arn.setter
    def hub_device_arn(self, hub_device_arn):
        """Sets the hub_device_arn of this ListEdgeAgentConfigurationsRequest.

        The \"Internet of Things (IoT) Thing\" Arn of the edge agent.

        :param hub_device_arn: The hub_device_arn of this ListEdgeAgentConfigurationsRequest.
        :type hub_device_arn: str
        """
        if hub_device_arn is None:
            raise ValueError("Invalid value for `hub_device_arn`, must not be `None`")
        if hub_device_arn is not None and len(hub_device_arn) > 1024:
            raise ValueError("Invalid value for `hub_device_arn`, length must be less than or equal to `1024`")
        if hub_device_arn is not None and len(hub_device_arn) < 1:
            raise ValueError("Invalid value for `hub_device_arn`, length must be greater than or equal to `1`")
        if hub_device_arn is not None and not re.search(r'arn:[a-z\d-]+:iot:[a-z0-9-]+:[0-9]+:thing\/[a-zA-Z0-9_.-]+', hub_device_arn):
            raise ValueError("Invalid value for `hub_device_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:iot:[a-z0-9-]+:[0-9]+:thing\/[a-zA-Z0-9_.-]+/`")

        self._hub_device_arn = hub_device_arn

    @property
    def max_results(self):
        """Gets the max_results of this ListEdgeAgentConfigurationsRequest.

        The maximum number of edge configurations to return in the response. The default is 5.

        :return: The max_results of this ListEdgeAgentConfigurationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListEdgeAgentConfigurationsRequest.

        The maximum number of edge configurations to return in the response. The default is 5.

        :param max_results: The max_results of this ListEdgeAgentConfigurationsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 10:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `10`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListEdgeAgentConfigurationsRequest.

        If you specify this parameter, when the result of a <code>ListEdgeAgentConfigurations</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of edge configurations, provide this token in your next request. 

        :return: The next_token of this ListEdgeAgentConfigurationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListEdgeAgentConfigurationsRequest.

        If you specify this parameter, when the result of a <code>ListEdgeAgentConfigurations</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of edge configurations, provide this token in your next request. 

        :param next_token: The next_token of this ListEdgeAgentConfigurationsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 512:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `512`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'[a-zA-Z0-9+\/=]*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[a-zA-Z0-9+\/=]*/`")

        self._next_token = next_token
