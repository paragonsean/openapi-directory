# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_data_retention_operation import UpdateDataRetentionOperation
from openapi_server import util


class UpdateDataRetentionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_name: str=None, stream_arn: str=None, current_version: str=None, operation: UpdateDataRetentionOperation=None, data_retention_change_in_hours: int=None):
        """UpdateDataRetentionInput - a model defined in OpenAPI

        :param stream_name: The stream_name of this UpdateDataRetentionInput.
        :param stream_arn: The stream_arn of this UpdateDataRetentionInput.
        :param current_version: The current_version of this UpdateDataRetentionInput.
        :param operation: The operation of this UpdateDataRetentionInput.
        :param data_retention_change_in_hours: The data_retention_change_in_hours of this UpdateDataRetentionInput.
        """
        self.openapi_types = {
            'stream_name': str,
            'stream_arn': str,
            'current_version': str,
            'operation': UpdateDataRetentionOperation,
            'data_retention_change_in_hours': int
        }

        self.attribute_map = {
            'stream_name': 'StreamName',
            'stream_arn': 'StreamARN',
            'current_version': 'CurrentVersion',
            'operation': 'Operation',
            'data_retention_change_in_hours': 'DataRetentionChangeInHours'
        }

        self._stream_name = stream_name
        self._stream_arn = stream_arn
        self._current_version = current_version
        self._operation = operation
        self._data_retention_change_in_hours = data_retention_change_in_hours

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDataRetentionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDataRetentionInput of this UpdateDataRetentionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_name(self):
        """Gets the stream_name of this UpdateDataRetentionInput.


        :return: The stream_name of this UpdateDataRetentionInput.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this UpdateDataRetentionInput.


        :param stream_name: The stream_name of this UpdateDataRetentionInput.
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this UpdateDataRetentionInput.


        :return: The stream_arn of this UpdateDataRetentionInput.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this UpdateDataRetentionInput.


        :param stream_arn: The stream_arn of this UpdateDataRetentionInput.
        :type stream_arn: str
        """

        self._stream_arn = stream_arn

    @property
    def current_version(self):
        """Gets the current_version of this UpdateDataRetentionInput.


        :return: The current_version of this UpdateDataRetentionInput.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpdateDataRetentionInput.


        :param current_version: The current_version of this UpdateDataRetentionInput.
        :type current_version: str
        """
        if current_version is None:
            raise ValueError("Invalid value for `current_version`, must not be `None`")

        self._current_version = current_version

    @property
    def operation(self):
        """Gets the operation of this UpdateDataRetentionInput.


        :return: The operation of this UpdateDataRetentionInput.
        :rtype: UpdateDataRetentionOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this UpdateDataRetentionInput.


        :param operation: The operation of this UpdateDataRetentionInput.
        :type operation: UpdateDataRetentionOperation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def data_retention_change_in_hours(self):
        """Gets the data_retention_change_in_hours of this UpdateDataRetentionInput.


        :return: The data_retention_change_in_hours of this UpdateDataRetentionInput.
        :rtype: int
        """
        return self._data_retention_change_in_hours

    @data_retention_change_in_hours.setter
    def data_retention_change_in_hours(self, data_retention_change_in_hours):
        """Sets the data_retention_change_in_hours of this UpdateDataRetentionInput.


        :param data_retention_change_in_hours: The data_retention_change_in_hours of this UpdateDataRetentionInput.
        :type data_retention_change_in_hours: int
        """
        if data_retention_change_in_hours is None:
            raise ValueError("Invalid value for `data_retention_change_in_hours`, must not be `None`")

        self._data_retention_change_in_hours = data_retention_change_in_hours
