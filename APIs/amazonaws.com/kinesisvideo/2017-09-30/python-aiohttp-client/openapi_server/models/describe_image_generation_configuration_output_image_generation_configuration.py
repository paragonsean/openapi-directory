# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_status import ConfigurationStatus
from openapi_server.models.format import Format
from openapi_server.models.image_selector_type import ImageSelectorType
from openapi_server.models.update_image_generation_configuration_request_image_generation_configuration_destination_config import UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig
from openapi_server import util


class DescribeImageGenerationConfigurationOutputImageGenerationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: ConfigurationStatus=None, image_selector_type: ImageSelectorType=None, destination_config: UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig=None, sampling_interval: int=None, format: Format=None, format_config: Dict=None, width_pixels: int=None, height_pixels: int=None):
        """DescribeImageGenerationConfigurationOutputImageGenerationConfiguration - a model defined in OpenAPI

        :param status: The status of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param image_selector_type: The image_selector_type of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param destination_config: The destination_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param sampling_interval: The sampling_interval of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param format: The format of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param format_config: The format_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param width_pixels: The width_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :param height_pixels: The height_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        """
        self.openapi_types = {
            'status': ConfigurationStatus,
            'image_selector_type': ImageSelectorType,
            'destination_config': UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig,
            'sampling_interval': int,
            'format': Format,
            'format_config': Dict,
            'width_pixels': int,
            'height_pixels': int
        }

        self.attribute_map = {
            'status': 'Status',
            'image_selector_type': 'ImageSelectorType',
            'destination_config': 'DestinationConfig',
            'sampling_interval': 'SamplingInterval',
            'format': 'Format',
            'format_config': 'FormatConfig',
            'width_pixels': 'WidthPixels',
            'height_pixels': 'HeightPixels'
        }

        self._status = status
        self._image_selector_type = image_selector_type
        self._destination_config = destination_config
        self._sampling_interval = sampling_interval
        self._format = format
        self._format_config = format_config
        self._width_pixels = width_pixels
        self._height_pixels = height_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeImageGenerationConfigurationOutputImageGenerationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeImageGenerationConfigurationOutput_ImageGenerationConfiguration of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The status of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: ConfigurationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param status: The status of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type status: ConfigurationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def image_selector_type(self):
        """Gets the image_selector_type of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The image_selector_type of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: ImageSelectorType
        """
        return self._image_selector_type

    @image_selector_type.setter
    def image_selector_type(self, image_selector_type):
        """Sets the image_selector_type of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param image_selector_type: The image_selector_type of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type image_selector_type: ImageSelectorType
        """
        if image_selector_type is None:
            raise ValueError("Invalid value for `image_selector_type`, must not be `None`")

        self._image_selector_type = image_selector_type

    @property
    def destination_config(self):
        """Gets the destination_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The destination_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig
        """
        return self._destination_config

    @destination_config.setter
    def destination_config(self, destination_config):
        """Sets the destination_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param destination_config: The destination_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type destination_config: UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig
        """
        if destination_config is None:
            raise ValueError("Invalid value for `destination_config`, must not be `None`")

        self._destination_config = destination_config

    @property
    def sampling_interval(self):
        """Gets the sampling_interval of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The sampling_interval of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: int
        """
        return self._sampling_interval

    @sampling_interval.setter
    def sampling_interval(self, sampling_interval):
        """Sets the sampling_interval of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param sampling_interval: The sampling_interval of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type sampling_interval: int
        """
        if sampling_interval is None:
            raise ValueError("Invalid value for `sampling_interval`, must not be `None`")

        self._sampling_interval = sampling_interval

    @property
    def format(self):
        """Gets the format of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The format of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param format: The format of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type format: Format
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def format_config(self):
        """Gets the format_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The format_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: Dict
        """
        return self._format_config

    @format_config.setter
    def format_config(self, format_config):
        """Sets the format_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param format_config: The format_config of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type format_config: Dict
        """

        self._format_config = format_config

    @property
    def width_pixels(self):
        """Gets the width_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The width_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param width_pixels: The width_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels

    @property
    def height_pixels(self):
        """Gets the height_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :return: The height_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.


        :param height_pixels: The height_pixels of this DescribeImageGenerationConfigurationOutputImageGenerationConfiguration.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels
