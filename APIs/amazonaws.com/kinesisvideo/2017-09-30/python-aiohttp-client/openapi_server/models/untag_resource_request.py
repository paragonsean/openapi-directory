# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UntagResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, tag_key_list: List[str]=None):
        """UntagResourceRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this UntagResourceRequest.
        :param tag_key_list: The tag_key_list of this UntagResourceRequest.
        """
        self.openapi_types = {
            'resource_arn': str,
            'tag_key_list': List[str]
        }

        self.attribute_map = {
            'resource_arn': 'ResourceARN',
            'tag_key_list': 'TagKeyList'
        }

        self._resource_arn = resource_arn
        self._tag_key_list = tag_key_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UntagResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UntagResource_request of this UntagResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this UntagResourceRequest.

        The Amazon Resource Name (ARN) of the signaling channel from which you want to remove tags.

        :return: The resource_arn of this UntagResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this UntagResourceRequest.

        The Amazon Resource Name (ARN) of the signaling channel from which you want to remove tags.

        :param resource_arn: The resource_arn of this UntagResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and len(resource_arn) > 1024:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `1024`")
        if resource_arn is not None and len(resource_arn) < 1:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `1`")
        if resource_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._resource_arn = resource_arn

    @property
    def tag_key_list(self):
        """Gets the tag_key_list of this UntagResourceRequest.

        A list of the keys of the tags that you want to remove.

        :return: The tag_key_list of this UntagResourceRequest.
        :rtype: List[str]
        """
        return self._tag_key_list

    @tag_key_list.setter
    def tag_key_list(self, tag_key_list):
        """Sets the tag_key_list of this UntagResourceRequest.

        A list of the keys of the tags that you want to remove.

        :param tag_key_list: The tag_key_list of this UntagResourceRequest.
        :type tag_key_list: List[str]
        """
        if tag_key_list is None:
            raise ValueError("Invalid value for `tag_key_list`, must not be `None`")
        if tag_key_list is not None and len(tag_key_list) > 50:
            raise ValueError("Invalid value for `tag_key_list`, number of items must be less than or equal to `50`")
        if tag_key_list is not None and len(tag_key_list) < 1:
            raise ValueError("Invalid value for `tag_key_list`, number of items must be greater than or equal to `1`")

        self._tag_key_list = tag_key_list
