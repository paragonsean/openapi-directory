# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.create_signaling_channel_input_single_master_configuration import CreateSignalingChannelInputSingleMasterConfiguration
from openapi_server import util


class CreateSignalingChannelInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_name: str=None, channel_type: ChannelType=None, single_master_configuration: CreateSignalingChannelInputSingleMasterConfiguration=None, tags: List=None):
        """CreateSignalingChannelInput - a model defined in OpenAPI

        :param channel_name: The channel_name of this CreateSignalingChannelInput.
        :param channel_type: The channel_type of this CreateSignalingChannelInput.
        :param single_master_configuration: The single_master_configuration of this CreateSignalingChannelInput.
        :param tags: The tags of this CreateSignalingChannelInput.
        """
        self.openapi_types = {
            'channel_name': str,
            'channel_type': ChannelType,
            'single_master_configuration': CreateSignalingChannelInputSingleMasterConfiguration,
            'tags': List
        }

        self.attribute_map = {
            'channel_name': 'ChannelName',
            'channel_type': 'ChannelType',
            'single_master_configuration': 'SingleMasterConfiguration',
            'tags': 'Tags'
        }

        self._channel_name = channel_name
        self._channel_type = channel_type
        self._single_master_configuration = single_master_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSignalingChannelInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSignalingChannelInput of this CreateSignalingChannelInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_name(self):
        """Gets the channel_name of this CreateSignalingChannelInput.


        :return: The channel_name of this CreateSignalingChannelInput.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this CreateSignalingChannelInput.


        :param channel_name: The channel_name of this CreateSignalingChannelInput.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def channel_type(self):
        """Gets the channel_type of this CreateSignalingChannelInput.


        :return: The channel_type of this CreateSignalingChannelInput.
        :rtype: ChannelType
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this CreateSignalingChannelInput.


        :param channel_type: The channel_type of this CreateSignalingChannelInput.
        :type channel_type: ChannelType
        """

        self._channel_type = channel_type

    @property
    def single_master_configuration(self):
        """Gets the single_master_configuration of this CreateSignalingChannelInput.


        :return: The single_master_configuration of this CreateSignalingChannelInput.
        :rtype: CreateSignalingChannelInputSingleMasterConfiguration
        """
        return self._single_master_configuration

    @single_master_configuration.setter
    def single_master_configuration(self, single_master_configuration):
        """Sets the single_master_configuration of this CreateSignalingChannelInput.


        :param single_master_configuration: The single_master_configuration of this CreateSignalingChannelInput.
        :type single_master_configuration: CreateSignalingChannelInputSingleMasterConfiguration
        """

        self._single_master_configuration = single_master_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateSignalingChannelInput.


        :return: The tags of this CreateSignalingChannelInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSignalingChannelInput.


        :param tags: The tags of this CreateSignalingChannelInput.
        :type tags: List
        """

        self._tags = tags
