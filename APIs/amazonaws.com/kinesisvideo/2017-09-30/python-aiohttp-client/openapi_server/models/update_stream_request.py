# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_name: str=None, stream_arn: str=None, current_version: str=None, device_name: str=None, media_type: str=None):
        """UpdateStreamRequest - a model defined in OpenAPI

        :param stream_name: The stream_name of this UpdateStreamRequest.
        :param stream_arn: The stream_arn of this UpdateStreamRequest.
        :param current_version: The current_version of this UpdateStreamRequest.
        :param device_name: The device_name of this UpdateStreamRequest.
        :param media_type: The media_type of this UpdateStreamRequest.
        """
        self.openapi_types = {
            'stream_name': str,
            'stream_arn': str,
            'current_version': str,
            'device_name': str,
            'media_type': str
        }

        self.attribute_map = {
            'stream_name': 'StreamName',
            'stream_arn': 'StreamARN',
            'current_version': 'CurrentVersion',
            'device_name': 'DeviceName',
            'media_type': 'MediaType'
        }

        self._stream_name = stream_name
        self._stream_arn = stream_arn
        self._current_version = current_version
        self._device_name = device_name
        self._media_type = media_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStream_request of this UpdateStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_name(self):
        """Gets the stream_name of this UpdateStreamRequest.

        <p>The name of the stream whose metadata you want to update.</p> <p>The stream name is an identifier for the stream, and must be unique for each account and region.</p>

        :return: The stream_name of this UpdateStreamRequest.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this UpdateStreamRequest.

        <p>The name of the stream whose metadata you want to update.</p> <p>The stream name is an identifier for the stream, and must be unique for each account and region.</p>

        :param stream_name: The stream_name of this UpdateStreamRequest.
        :type stream_name: str
        """
        if stream_name is not None and len(stream_name) > 256:
            raise ValueError("Invalid value for `stream_name`, length must be less than or equal to `256`")
        if stream_name is not None and len(stream_name) < 1:
            raise ValueError("Invalid value for `stream_name`, length must be greater than or equal to `1`")
        if stream_name is not None and not re.search(r'[a-zA-Z0-9_.-]+', stream_name):
            raise ValueError("Invalid value for `stream_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._stream_name = stream_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this UpdateStreamRequest.

        The ARN of the stream whose metadata you want to update.

        :return: The stream_arn of this UpdateStreamRequest.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this UpdateStreamRequest.

        The ARN of the stream whose metadata you want to update.

        :param stream_arn: The stream_arn of this UpdateStreamRequest.
        :type stream_arn: str
        """
        if stream_arn is not None and len(stream_arn) > 1024:
            raise ValueError("Invalid value for `stream_arn`, length must be less than or equal to `1024`")
        if stream_arn is not None and len(stream_arn) < 1:
            raise ValueError("Invalid value for `stream_arn`, length must be greater than or equal to `1`")
        if stream_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', stream_arn):
            raise ValueError("Invalid value for `stream_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._stream_arn = stream_arn

    @property
    def current_version(self):
        """Gets the current_version of this UpdateStreamRequest.

        The version of the stream whose metadata you want to update.

        :return: The current_version of this UpdateStreamRequest.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpdateStreamRequest.

        The version of the stream whose metadata you want to update.

        :param current_version: The current_version of this UpdateStreamRequest.
        :type current_version: str
        """
        if current_version is None:
            raise ValueError("Invalid value for `current_version`, must not be `None`")
        if current_version is not None and len(current_version) > 64:
            raise ValueError("Invalid value for `current_version`, length must be less than or equal to `64`")
        if current_version is not None and len(current_version) < 1:
            raise ValueError("Invalid value for `current_version`, length must be greater than or equal to `1`")
        if current_version is not None and not re.search(r'[a-zA-Z0-9]+', current_version):
            raise ValueError("Invalid value for `current_version`, must be a follow pattern or equal to `/[a-zA-Z0-9]+/`")

        self._current_version = current_version

    @property
    def device_name(self):
        """Gets the device_name of this UpdateStreamRequest.

        <p>The name of the device that is writing to the stream. </p> <note> <p> In the current implementation, Kinesis Video Streams does not use this name. </p> </note>

        :return: The device_name of this UpdateStreamRequest.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this UpdateStreamRequest.

        <p>The name of the device that is writing to the stream. </p> <note> <p> In the current implementation, Kinesis Video Streams does not use this name. </p> </note>

        :param device_name: The device_name of this UpdateStreamRequest.
        :type device_name: str
        """
        if device_name is not None and len(device_name) > 128:
            raise ValueError("Invalid value for `device_name`, length must be less than or equal to `128`")
        if device_name is not None and len(device_name) < 1:
            raise ValueError("Invalid value for `device_name`, length must be greater than or equal to `1`")
        if device_name is not None and not re.search(r'[a-zA-Z0-9_.-]+', device_name):
            raise ValueError("Invalid value for `device_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._device_name = device_name

    @property
    def media_type(self):
        """Gets the media_type of this UpdateStreamRequest.

        <p>The stream's media type. Use <code>MediaType</code> to specify the type of content that the stream contains to the consumers of the stream. For more information about media types, see <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\">Media Types</a>. If you choose to specify the <code>MediaType</code>, see <a href=\"https://tools.ietf.org/html/rfc6838#section-4.2\">Naming Requirements</a>.</p> <p>To play video on the console, you must specify the correct video type. For example, if the video in the stream is H.264, specify <code>video/h264</code> as the <code>MediaType</code>.</p>

        :return: The media_type of this UpdateStreamRequest.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this UpdateStreamRequest.

        <p>The stream's media type. Use <code>MediaType</code> to specify the type of content that the stream contains to the consumers of the stream. For more information about media types, see <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\">Media Types</a>. If you choose to specify the <code>MediaType</code>, see <a href=\"https://tools.ietf.org/html/rfc6838#section-4.2\">Naming Requirements</a>.</p> <p>To play video on the console, you must specify the correct video type. For example, if the video in the stream is H.264, specify <code>video/h264</code> as the <code>MediaType</code>.</p>

        :param media_type: The media_type of this UpdateStreamRequest.
        :type media_type: str
        """
        if media_type is not None and len(media_type) > 128:
            raise ValueError("Invalid value for `media_type`, length must be less than or equal to `128`")
        if media_type is not None and len(media_type) < 1:
            raise ValueError("Invalid value for `media_type`, length must be greater than or equal to `1`")
        if media_type is not None and not re.search(r'[\w\-\.\+]+\/[\w\-\.\+]+(,[\w\-\.\+]+\/[\w\-\.\+]+)*', media_type):
            raise ValueError("Invalid value for `media_type`, must be a follow pattern or equal to `/[\w\-\.\+]+\/[\w\-\.\+]+(,[\w\-\.\+]+\/[\w\-\.\+]+)*/`")

        self._media_type = media_type
