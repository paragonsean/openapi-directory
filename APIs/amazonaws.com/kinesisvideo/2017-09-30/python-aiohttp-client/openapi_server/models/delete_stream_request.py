# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_arn: str=None, current_version: str=None):
        """DeleteStreamRequest - a model defined in OpenAPI

        :param stream_arn: The stream_arn of this DeleteStreamRequest.
        :param current_version: The current_version of this DeleteStreamRequest.
        """
        self.openapi_types = {
            'stream_arn': str,
            'current_version': str
        }

        self.attribute_map = {
            'stream_arn': 'StreamARN',
            'current_version': 'CurrentVersion'
        }

        self._stream_arn = stream_arn
        self._current_version = current_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteStream_request of this DeleteStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_arn(self):
        """Gets the stream_arn of this DeleteStreamRequest.

        The Amazon Resource Name (ARN) of the stream that you want to delete. 

        :return: The stream_arn of this DeleteStreamRequest.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this DeleteStreamRequest.

        The Amazon Resource Name (ARN) of the stream that you want to delete. 

        :param stream_arn: The stream_arn of this DeleteStreamRequest.
        :type stream_arn: str
        """
        if stream_arn is None:
            raise ValueError("Invalid value for `stream_arn`, must not be `None`")
        if stream_arn is not None and len(stream_arn) > 1024:
            raise ValueError("Invalid value for `stream_arn`, length must be less than or equal to `1024`")
        if stream_arn is not None and len(stream_arn) < 1:
            raise ValueError("Invalid value for `stream_arn`, length must be greater than or equal to `1`")
        if stream_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', stream_arn):
            raise ValueError("Invalid value for `stream_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._stream_arn = stream_arn

    @property
    def current_version(self):
        """Gets the current_version of this DeleteStreamRequest.

        <p>Optional: The version of the stream that you want to delete. </p> <p>Specify the version as a safeguard to ensure that your are deleting the correct stream. To get the stream version, use the <code>DescribeStream</code> API.</p> <p>If not specified, only the <code>CreationTime</code> is checked before deleting the stream.</p>

        :return: The current_version of this DeleteStreamRequest.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this DeleteStreamRequest.

        <p>Optional: The version of the stream that you want to delete. </p> <p>Specify the version as a safeguard to ensure that your are deleting the correct stream. To get the stream version, use the <code>DescribeStream</code> API.</p> <p>If not specified, only the <code>CreationTime</code> is checked before deleting the stream.</p>

        :param current_version: The current_version of this DeleteStreamRequest.
        :type current_version: str
        """
        if current_version is not None and len(current_version) > 64:
            raise ValueError("Invalid value for `current_version`, length must be less than or equal to `64`")
        if current_version is not None and len(current_version) < 1:
            raise ValueError("Invalid value for `current_version`, length must be greater than or equal to `1`")
        if current_version is not None and not re.search(r'[a-zA-Z0-9]+', current_version):
            raise ValueError("Invalid value for `current_version`, must be a follow pattern or equal to `/[a-zA-Z0-9]+/`")

        self._current_version = current_version
