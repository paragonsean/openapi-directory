# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_status import ConfigurationStatus
from openapi_server.models.update_notification_configuration_request_notification_configuration_destination_config import UpdateNotificationConfigurationRequestNotificationConfigurationDestinationConfig
from openapi_server import util


class NotificationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: ConfigurationStatus=None, destination_config: UpdateNotificationConfigurationRequestNotificationConfigurationDestinationConfig=None):
        """NotificationConfiguration - a model defined in OpenAPI

        :param status: The status of this NotificationConfiguration.
        :param destination_config: The destination_config of this NotificationConfiguration.
        """
        self.openapi_types = {
            'status': ConfigurationStatus,
            'destination_config': UpdateNotificationConfigurationRequestNotificationConfigurationDestinationConfig
        }

        self.attribute_map = {
            'status': 'Status',
            'destination_config': 'DestinationConfig'
        }

        self._status = status
        self._destination_config = destination_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationConfiguration of this NotificationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this NotificationConfiguration.


        :return: The status of this NotificationConfiguration.
        :rtype: ConfigurationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationConfiguration.


        :param status: The status of this NotificationConfiguration.
        :type status: ConfigurationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def destination_config(self):
        """Gets the destination_config of this NotificationConfiguration.


        :return: The destination_config of this NotificationConfiguration.
        :rtype: UpdateNotificationConfigurationRequestNotificationConfigurationDestinationConfig
        """
        return self._destination_config

    @destination_config.setter
    def destination_config(self, destination_config):
        """Sets the destination_config of this NotificationConfiguration.


        :param destination_config: The destination_config of this NotificationConfiguration.
        :type destination_config: UpdateNotificationConfigurationRequestNotificationConfigurationDestinationConfig
        """
        if destination_config is None:
            raise ValueError("Invalid value for `destination_config`, must not be `None`")

        self._destination_config = destination_config
