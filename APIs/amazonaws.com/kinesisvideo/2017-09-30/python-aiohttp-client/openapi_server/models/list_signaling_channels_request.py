# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_signaling_channels_request_channel_name_condition import ListSignalingChannelsRequestChannelNameCondition
import re
from openapi_server import util


class ListSignalingChannelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, channel_name_condition: ListSignalingChannelsRequestChannelNameCondition=None):
        """ListSignalingChannelsRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListSignalingChannelsRequest.
        :param next_token: The next_token of this ListSignalingChannelsRequest.
        :param channel_name_condition: The channel_name_condition of this ListSignalingChannelsRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'channel_name_condition': ListSignalingChannelsRequestChannelNameCondition
        }

        self.attribute_map = {
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'channel_name_condition': 'ChannelNameCondition'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._channel_name_condition = channel_name_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListSignalingChannelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListSignalingChannels_request of this ListSignalingChannelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListSignalingChannelsRequest.

        The maximum number of channels to return in the response. The default is 500.

        :return: The max_results of this ListSignalingChannelsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListSignalingChannelsRequest.

        The maximum number of channels to return in the response. The default is 500.

        :param max_results: The max_results of this ListSignalingChannelsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 10000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `10000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListSignalingChannelsRequest.

        If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.

        :return: The next_token of this ListSignalingChannelsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListSignalingChannelsRequest.

        If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.

        :param next_token: The next_token of this ListSignalingChannelsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 512:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `512`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'[a-zA-Z0-9+\/=]*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[a-zA-Z0-9+\/=]*/`")

        self._next_token = next_token

    @property
    def channel_name_condition(self):
        """Gets the channel_name_condition of this ListSignalingChannelsRequest.


        :return: The channel_name_condition of this ListSignalingChannelsRequest.
        :rtype: ListSignalingChannelsRequestChannelNameCondition
        """
        return self._channel_name_condition

    @channel_name_condition.setter
    def channel_name_condition(self, channel_name_condition):
        """Sets the channel_name_condition of this ListSignalingChannelsRequest.


        :param channel_name_condition: The channel_name_condition of this ListSignalingChannelsRequest.
        :type channel_name_condition: ListSignalingChannelsRequestChannelNameCondition
        """

        self._channel_name_condition = channel_name_condition
