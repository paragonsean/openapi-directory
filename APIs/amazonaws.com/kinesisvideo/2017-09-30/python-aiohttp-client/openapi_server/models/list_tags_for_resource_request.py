# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListTagsForResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, resource_arn: str=None):
        """ListTagsForResourceRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListTagsForResourceRequest.
        :param resource_arn: The resource_arn of this ListTagsForResourceRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'resource_arn': str
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'resource_arn': 'ResourceARN'
        }

        self._next_token = next_token
        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTagsForResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTagsForResource_request of this ListTagsForResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListTagsForResourceRequest.

        If you specify this parameter and the result of a <code>ListTagsForResource</code> call is truncated, the response includes a token that you can use in the next request to fetch the next batch of tags. 

        :return: The next_token of this ListTagsForResourceRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTagsForResourceRequest.

        If you specify this parameter and the result of a <code>ListTagsForResource</code> call is truncated, the response includes a token that you can use in the next request to fetch the next batch of tags. 

        :param next_token: The next_token of this ListTagsForResourceRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 512:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `512`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'[a-zA-Z0-9+\/=]*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[a-zA-Z0-9+\/=]*/`")

        self._next_token = next_token

    @property
    def resource_arn(self):
        """Gets the resource_arn of this ListTagsForResourceRequest.

        The Amazon Resource Name (ARN) of the signaling channel for which you want to list tags.

        :return: The resource_arn of this ListTagsForResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this ListTagsForResourceRequest.

        The Amazon Resource Name (ARN) of the signaling channel for which you want to list tags.

        :param resource_arn: The resource_arn of this ListTagsForResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and len(resource_arn) > 1024:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `1024`")
        if resource_arn is not None and len(resource_arn) < 1:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `1`")
        if resource_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._resource_arn = resource_arn
