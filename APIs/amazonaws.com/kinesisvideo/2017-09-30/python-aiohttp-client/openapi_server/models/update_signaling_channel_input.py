# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_signaling_channel_input_single_master_configuration import UpdateSignalingChannelInputSingleMasterConfiguration
from openapi_server import util


class UpdateSignalingChannelInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, current_version: str=None, single_master_configuration: UpdateSignalingChannelInputSingleMasterConfiguration=None):
        """UpdateSignalingChannelInput - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this UpdateSignalingChannelInput.
        :param current_version: The current_version of this UpdateSignalingChannelInput.
        :param single_master_configuration: The single_master_configuration of this UpdateSignalingChannelInput.
        """
        self.openapi_types = {
            'channel_arn': str,
            'current_version': str,
            'single_master_configuration': UpdateSignalingChannelInputSingleMasterConfiguration
        }

        self.attribute_map = {
            'channel_arn': 'ChannelARN',
            'current_version': 'CurrentVersion',
            'single_master_configuration': 'SingleMasterConfiguration'
        }

        self._channel_arn = channel_arn
        self._current_version = current_version
        self._single_master_configuration = single_master_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSignalingChannelInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSignalingChannelInput of this UpdateSignalingChannelInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this UpdateSignalingChannelInput.


        :return: The channel_arn of this UpdateSignalingChannelInput.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this UpdateSignalingChannelInput.


        :param channel_arn: The channel_arn of this UpdateSignalingChannelInput.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")

        self._channel_arn = channel_arn

    @property
    def current_version(self):
        """Gets the current_version of this UpdateSignalingChannelInput.


        :return: The current_version of this UpdateSignalingChannelInput.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpdateSignalingChannelInput.


        :param current_version: The current_version of this UpdateSignalingChannelInput.
        :type current_version: str
        """
        if current_version is None:
            raise ValueError("Invalid value for `current_version`, must not be `None`")

        self._current_version = current_version

    @property
    def single_master_configuration(self):
        """Gets the single_master_configuration of this UpdateSignalingChannelInput.


        :return: The single_master_configuration of this UpdateSignalingChannelInput.
        :rtype: UpdateSignalingChannelInputSingleMasterConfiguration
        """
        return self._single_master_configuration

    @single_master_configuration.setter
    def single_master_configuration(self, single_master_configuration):
        """Sets the single_master_configuration of this UpdateSignalingChannelInput.


        :param single_master_configuration: The single_master_configuration of this UpdateSignalingChannelInput.
        :type single_master_configuration: UpdateSignalingChannelInputSingleMasterConfiguration
        """

        self._single_master_configuration = single_master_configuration
