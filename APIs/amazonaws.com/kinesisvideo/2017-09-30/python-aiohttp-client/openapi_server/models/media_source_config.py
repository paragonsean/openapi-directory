# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_uri_type import MediaUriType
from openapi_server import util


class MediaSourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_uri_secret_arn: str=None, media_uri_type: MediaUriType=None):
        """MediaSourceConfig - a model defined in OpenAPI

        :param media_uri_secret_arn: The media_uri_secret_arn of this MediaSourceConfig.
        :param media_uri_type: The media_uri_type of this MediaSourceConfig.
        """
        self.openapi_types = {
            'media_uri_secret_arn': str,
            'media_uri_type': MediaUriType
        }

        self.attribute_map = {
            'media_uri_secret_arn': 'MediaUriSecretArn',
            'media_uri_type': 'MediaUriType'
        }

        self._media_uri_secret_arn = media_uri_secret_arn
        self._media_uri_type = media_uri_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaSourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaSourceConfig of this MediaSourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_uri_secret_arn(self):
        """Gets the media_uri_secret_arn of this MediaSourceConfig.


        :return: The media_uri_secret_arn of this MediaSourceConfig.
        :rtype: str
        """
        return self._media_uri_secret_arn

    @media_uri_secret_arn.setter
    def media_uri_secret_arn(self, media_uri_secret_arn):
        """Sets the media_uri_secret_arn of this MediaSourceConfig.


        :param media_uri_secret_arn: The media_uri_secret_arn of this MediaSourceConfig.
        :type media_uri_secret_arn: str
        """
        if media_uri_secret_arn is None:
            raise ValueError("Invalid value for `media_uri_secret_arn`, must not be `None`")

        self._media_uri_secret_arn = media_uri_secret_arn

    @property
    def media_uri_type(self):
        """Gets the media_uri_type of this MediaSourceConfig.


        :return: The media_uri_type of this MediaSourceConfig.
        :rtype: MediaUriType
        """
        return self._media_uri_type

    @media_uri_type.setter
    def media_uri_type(self, media_uri_type):
        """Sets the media_uri_type of this MediaSourceConfig.


        :param media_uri_type: The media_uri_type of this MediaSourceConfig.
        :type media_uri_type: MediaUriType
        """
        if media_uri_type is None:
            raise ValueError("Invalid value for `media_uri_type`, must not be `None`")

        self._media_uri_type = media_uri_type
