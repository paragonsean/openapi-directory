# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TagStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_arn: str=None, stream_name: str=None, tags: Dict[str, str]=None):
        """TagStreamRequest - a model defined in OpenAPI

        :param stream_arn: The stream_arn of this TagStreamRequest.
        :param stream_name: The stream_name of this TagStreamRequest.
        :param tags: The tags of this TagStreamRequest.
        """
        self.openapi_types = {
            'stream_arn': str,
            'stream_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'stream_arn': 'StreamARN',
            'stream_name': 'StreamName',
            'tags': 'Tags'
        }

        self._stream_arn = stream_arn
        self._stream_name = stream_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagStream_request of this TagStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_arn(self):
        """Gets the stream_arn of this TagStreamRequest.

        The Amazon Resource Name (ARN) of the resource that you want to add the tag or tags to.

        :return: The stream_arn of this TagStreamRequest.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this TagStreamRequest.

        The Amazon Resource Name (ARN) of the resource that you want to add the tag or tags to.

        :param stream_arn: The stream_arn of this TagStreamRequest.
        :type stream_arn: str
        """
        if stream_arn is not None and len(stream_arn) > 1024:
            raise ValueError("Invalid value for `stream_arn`, length must be less than or equal to `1024`")
        if stream_arn is not None and len(stream_arn) < 1:
            raise ValueError("Invalid value for `stream_arn`, length must be greater than or equal to `1`")
        if stream_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', stream_arn):
            raise ValueError("Invalid value for `stream_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._stream_arn = stream_arn

    @property
    def stream_name(self):
        """Gets the stream_name of this TagStreamRequest.

        The name of the stream that you want to add the tag or tags to.

        :return: The stream_name of this TagStreamRequest.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this TagStreamRequest.

        The name of the stream that you want to add the tag or tags to.

        :param stream_name: The stream_name of this TagStreamRequest.
        :type stream_name: str
        """
        if stream_name is not None and len(stream_name) > 256:
            raise ValueError("Invalid value for `stream_name`, length must be less than or equal to `256`")
        if stream_name is not None and len(stream_name) < 1:
            raise ValueError("Invalid value for `stream_name`, length must be greater than or equal to `1`")
        if stream_name is not None and not re.search(r'[a-zA-Z0-9_.-]+', stream_name):
            raise ValueError("Invalid value for `stream_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._stream_name = stream_name

    @property
    def tags(self):
        """Gets the tags of this TagStreamRequest.

        A list of tags to associate with the specified stream. Each tag is a key-value pair (the value is optional).

        :return: The tags of this TagStreamRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagStreamRequest.

        A list of tags to associate with the specified stream. Each tag is a key-value pair (the value is optional).

        :param tags: The tags of this TagStreamRequest.
        :type tags: Dict[str, str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
