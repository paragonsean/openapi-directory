/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonKinesisVideoStreams);
  }
}(this, function(expect, AmazonKinesisVideoStreams) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonKinesisVideoStreams.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createSignalingChannel', function() {
      it('should call createSignalingChannel successfully', function(done) {
        //uncomment below and update the code to test createSignalingChannel
        //instance.createSignalingChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStream', function() {
      it('should call createStream successfully', function(done) {
        //uncomment below and update the code to test createStream
        //instance.createStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEdgeConfiguration', function() {
      it('should call deleteEdgeConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteEdgeConfiguration
        //instance.deleteEdgeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSignalingChannel', function() {
      it('should call deleteSignalingChannel successfully', function(done) {
        //uncomment below and update the code to test deleteSignalingChannel
        //instance.deleteSignalingChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStream', function() {
      it('should call deleteStream successfully', function(done) {
        //uncomment below and update the code to test deleteStream
        //instance.deleteStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEdgeConfiguration', function() {
      it('should call describeEdgeConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeEdgeConfiguration
        //instance.describeEdgeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImageGenerationConfiguration', function() {
      it('should call describeImageGenerationConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeImageGenerationConfiguration
        //instance.describeImageGenerationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMappedResourceConfiguration', function() {
      it('should call describeMappedResourceConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeMappedResourceConfiguration
        //instance.describeMappedResourceConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMediaStorageConfiguration', function() {
      it('should call describeMediaStorageConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeMediaStorageConfiguration
        //instance.describeMediaStorageConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeNotificationConfiguration', function() {
      it('should call describeNotificationConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeNotificationConfiguration
        //instance.describeNotificationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSignalingChannel', function() {
      it('should call describeSignalingChannel successfully', function(done) {
        //uncomment below and update the code to test describeSignalingChannel
        //instance.describeSignalingChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeStream', function() {
      it('should call describeStream successfully', function(done) {
        //uncomment below and update the code to test describeStream
        //instance.describeStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataEndpoint', function() {
      it('should call getDataEndpoint successfully', function(done) {
        //uncomment below and update the code to test getDataEndpoint
        //instance.getDataEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSignalingChannelEndpoint', function() {
      it('should call getSignalingChannelEndpoint successfully', function(done) {
        //uncomment below and update the code to test getSignalingChannelEndpoint
        //instance.getSignalingChannelEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEdgeAgentConfigurations', function() {
      it('should call listEdgeAgentConfigurations successfully', function(done) {
        //uncomment below and update the code to test listEdgeAgentConfigurations
        //instance.listEdgeAgentConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSignalingChannels', function() {
      it('should call listSignalingChannels successfully', function(done) {
        //uncomment below and update the code to test listSignalingChannels
        //instance.listSignalingChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStreams', function() {
      it('should call listStreams successfully', function(done) {
        //uncomment below and update the code to test listStreams
        //instance.listStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForStream', function() {
      it('should call listTagsForStream successfully', function(done) {
        //uncomment below and update the code to test listTagsForStream
        //instance.listTagsForStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startEdgeConfigurationUpdate', function() {
      it('should call startEdgeConfigurationUpdate successfully', function(done) {
        //uncomment below and update the code to test startEdgeConfigurationUpdate
        //instance.startEdgeConfigurationUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagStream', function() {
      it('should call tagStream successfully', function(done) {
        //uncomment below and update the code to test tagStream
        //instance.tagStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagStream', function() {
      it('should call untagStream successfully', function(done) {
        //uncomment below and update the code to test untagStream
        //instance.untagStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataRetention', function() {
      it('should call updateDataRetention successfully', function(done) {
        //uncomment below and update the code to test updateDataRetention
        //instance.updateDataRetention(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateImageGenerationConfiguration', function() {
      it('should call updateImageGenerationConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateImageGenerationConfiguration
        //instance.updateImageGenerationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMediaStorageConfiguration', function() {
      it('should call updateMediaStorageConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateMediaStorageConfiguration
        //instance.updateMediaStorageConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNotificationConfiguration', function() {
      it('should call updateNotificationConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateNotificationConfiguration
        //instance.updateNotificationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSignalingChannel', function() {
      it('should call updateSignalingChannel successfully', function(done) {
        //uncomment below and update the code to test updateSignalingChannel
        //instance.updateSignalingChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStream', function() {
      it('should call updateStream successfully', function(done) {
        //uncomment below and update the code to test updateStream
        //instance.updateStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
