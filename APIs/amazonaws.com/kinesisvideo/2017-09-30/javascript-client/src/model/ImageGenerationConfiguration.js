/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationStatus from './ConfigurationStatus';
import Format from './Format';
import ImageSelectorType from './ImageSelectorType';
import UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig from './UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig';

/**
 * The ImageGenerationConfiguration model module.
 * @module model/ImageGenerationConfiguration
 * @version 2017-09-30
 */
class ImageGenerationConfiguration {
    /**
     * Constructs a new <code>ImageGenerationConfiguration</code>.
     * The structure that contains the information required for the KVS images delivery. If null, the configuration will be deleted from the stream.
     * @alias module:model/ImageGenerationConfiguration
     * @param status {module:model/ConfigurationStatus} 
     * @param imageSelectorType {module:model/ImageSelectorType} 
     * @param destinationConfig {module:model/UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig} 
     * @param samplingInterval {Number} 
     * @param format {module:model/Format} 
     */
    constructor(status, imageSelectorType, destinationConfig, samplingInterval, format) { 
        
        ImageGenerationConfiguration.initialize(this, status, imageSelectorType, destinationConfig, samplingInterval, format);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, imageSelectorType, destinationConfig, samplingInterval, format) { 
        obj['Status'] = status;
        obj['ImageSelectorType'] = imageSelectorType;
        obj['DestinationConfig'] = destinationConfig;
        obj['SamplingInterval'] = samplingInterval;
        obj['Format'] = format;
    }

    /**
     * Constructs a <code>ImageGenerationConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageGenerationConfiguration} obj Optional instance to populate.
     * @return {module:model/ImageGenerationConfiguration} The populated <code>ImageGenerationConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageGenerationConfiguration();

            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], ConfigurationStatus);
            }
            if (data.hasOwnProperty('ImageSelectorType')) {
                obj['ImageSelectorType'] = ApiClient.convertToType(data['ImageSelectorType'], ImageSelectorType);
            }
            if (data.hasOwnProperty('DestinationConfig')) {
                obj['DestinationConfig'] = UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig.constructFromObject(data['DestinationConfig']);
            }
            if (data.hasOwnProperty('SamplingInterval')) {
                obj['SamplingInterval'] = ApiClient.convertToType(data['SamplingInterval'], 'Number');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], Format);
            }
            if (data.hasOwnProperty('FormatConfig')) {
                obj['FormatConfig'] = ApiClient.convertToType(data['FormatConfig'], Object);
            }
            if (data.hasOwnProperty('WidthPixels')) {
                obj['WidthPixels'] = ApiClient.convertToType(data['WidthPixels'], 'Number');
            }
            if (data.hasOwnProperty('HeightPixels')) {
                obj['HeightPixels'] = ApiClient.convertToType(data['HeightPixels'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageGenerationConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageGenerationConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageGenerationConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          ConfigurationStatus.validateJSON(data['Status']);
        }
        // validate the optional field `ImageSelectorType`
        if (data['ImageSelectorType']) { // data not null
          ImageSelectorType.validateJSON(data['ImageSelectorType']);
        }
        // validate the optional field `DestinationConfig`
        if (data['DestinationConfig']) { // data not null
          UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig.validateJSON(data['DestinationConfig']);
        }
        // validate the optional field `SamplingInterval`
        if (data['SamplingInterval']) { // data not null
          Number.validateJSON(data['SamplingInterval']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          Format.validateJSON(data['Format']);
        }
        // validate the optional field `FormatConfig`
        if (data['FormatConfig']) { // data not null
          Object.validateJSON(data['FormatConfig']);
        }
        // validate the optional field `WidthPixels`
        if (data['WidthPixels']) { // data not null
          Number.validateJSON(data['WidthPixels']);
        }
        // validate the optional field `HeightPixels`
        if (data['HeightPixels']) { // data not null
          Number.validateJSON(data['HeightPixels']);
        }

        return true;
    }


}

ImageGenerationConfiguration.RequiredProperties = ["Status", "ImageSelectorType", "DestinationConfig", "SamplingInterval", "Format"];

/**
 * @member {module:model/ConfigurationStatus} Status
 */
ImageGenerationConfiguration.prototype['Status'] = undefined;

/**
 * @member {module:model/ImageSelectorType} ImageSelectorType
 */
ImageGenerationConfiguration.prototype['ImageSelectorType'] = undefined;

/**
 * @member {module:model/UpdateImageGenerationConfigurationRequestImageGenerationConfigurationDestinationConfig} DestinationConfig
 */
ImageGenerationConfiguration.prototype['DestinationConfig'] = undefined;

/**
 * @member {Number} SamplingInterval
 */
ImageGenerationConfiguration.prototype['SamplingInterval'] = undefined;

/**
 * @member {module:model/Format} Format
 */
ImageGenerationConfiguration.prototype['Format'] = undefined;

/**
 * @member {Object} FormatConfig
 */
ImageGenerationConfiguration.prototype['FormatConfig'] = undefined;

/**
 * @member {Number} WidthPixels
 */
ImageGenerationConfiguration.prototype['WidthPixels'] = undefined;

/**
 * @member {Number} HeightPixels
 */
ImageGenerationConfiguration.prototype['HeightPixels'] = undefined;






export default ImageGenerationConfiguration;

