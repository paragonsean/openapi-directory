/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateStreamRequest model module.
 * @module model/UpdateStreamRequest
 * @version 2017-09-30
 */
class UpdateStreamRequest {
    /**
     * Constructs a new <code>UpdateStreamRequest</code>.
     * @alias module:model/UpdateStreamRequest
     * @param currentVersion {String} The version of the stream whose metadata you want to update.
     */
    constructor(currentVersion) { 
        
        UpdateStreamRequest.initialize(this, currentVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentVersion) { 
        obj['CurrentVersion'] = currentVersion;
    }

    /**
     * Constructs a <code>UpdateStreamRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateStreamRequest} obj Optional instance to populate.
     * @return {module:model/UpdateStreamRequest} The populated <code>UpdateStreamRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateStreamRequest();

            if (data.hasOwnProperty('StreamName')) {
                obj['StreamName'] = ApiClient.convertToType(data['StreamName'], 'String');
            }
            if (data.hasOwnProperty('StreamARN')) {
                obj['StreamARN'] = ApiClient.convertToType(data['StreamARN'], 'String');
            }
            if (data.hasOwnProperty('CurrentVersion')) {
                obj['CurrentVersion'] = ApiClient.convertToType(data['CurrentVersion'], 'String');
            }
            if (data.hasOwnProperty('DeviceName')) {
                obj['DeviceName'] = ApiClient.convertToType(data['DeviceName'], 'String');
            }
            if (data.hasOwnProperty('MediaType')) {
                obj['MediaType'] = ApiClient.convertToType(data['MediaType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateStreamRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateStreamRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateStreamRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['StreamName'] && !(typeof data['StreamName'] === 'string' || data['StreamName'] instanceof String)) {
            throw new Error("Expected the field `StreamName` to be a primitive type in the JSON string but got " + data['StreamName']);
        }
        // ensure the json data is a string
        if (data['StreamARN'] && !(typeof data['StreamARN'] === 'string' || data['StreamARN'] instanceof String)) {
            throw new Error("Expected the field `StreamARN` to be a primitive type in the JSON string but got " + data['StreamARN']);
        }
        // ensure the json data is a string
        if (data['CurrentVersion'] && !(typeof data['CurrentVersion'] === 'string' || data['CurrentVersion'] instanceof String)) {
            throw new Error("Expected the field `CurrentVersion` to be a primitive type in the JSON string but got " + data['CurrentVersion']);
        }
        // ensure the json data is a string
        if (data['DeviceName'] && !(typeof data['DeviceName'] === 'string' || data['DeviceName'] instanceof String)) {
            throw new Error("Expected the field `DeviceName` to be a primitive type in the JSON string but got " + data['DeviceName']);
        }
        // ensure the json data is a string
        if (data['MediaType'] && !(typeof data['MediaType'] === 'string' || data['MediaType'] instanceof String)) {
            throw new Error("Expected the field `MediaType` to be a primitive type in the JSON string but got " + data['MediaType']);
        }

        return true;
    }


}

UpdateStreamRequest.RequiredProperties = ["CurrentVersion"];

/**
 * <p>The name of the stream whose metadata you want to update.</p> <p>The stream name is an identifier for the stream, and must be unique for each account and region.</p>
 * @member {String} StreamName
 */
UpdateStreamRequest.prototype['StreamName'] = undefined;

/**
 * The ARN of the stream whose metadata you want to update.
 * @member {String} StreamARN
 */
UpdateStreamRequest.prototype['StreamARN'] = undefined;

/**
 * The version of the stream whose metadata you want to update.
 * @member {String} CurrentVersion
 */
UpdateStreamRequest.prototype['CurrentVersion'] = undefined;

/**
 * <p>The name of the device that is writing to the stream. </p> <note> <p> In the current implementation, Kinesis Video Streams does not use this name. </p> </note>
 * @member {String} DeviceName
 */
UpdateStreamRequest.prototype['DeviceName'] = undefined;

/**
 * <p>The stream's media type. Use <code>MediaType</code> to specify the type of content that the stream contains to the consumers of the stream. For more information about media types, see <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\">Media Types</a>. If you choose to specify the <code>MediaType</code>, see <a href=\"https://tools.ietf.org/html/rfc6838#section-4.2\">Naming Requirements</a>.</p> <p>To play video on the console, you must specify the correct video type. For example, if the video in the stream is H.264, specify <code>video/h264</code> as the <code>MediaType</code>.</p>
 * @member {String} MediaType
 */
UpdateStreamRequest.prototype['MediaType'] = undefined;






export default UpdateStreamRequest;

