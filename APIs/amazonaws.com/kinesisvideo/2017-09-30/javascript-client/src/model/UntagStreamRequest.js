/**
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UntagStreamRequest model module.
 * @module model/UntagStreamRequest
 * @version 2017-09-30
 */
class UntagStreamRequest {
    /**
     * Constructs a new <code>UntagStreamRequest</code>.
     * @alias module:model/UntagStreamRequest
     * @param tagKeyList {Array.<String>} A list of the keys of the tags that you want to remove.
     */
    constructor(tagKeyList) { 
        
        UntagStreamRequest.initialize(this, tagKeyList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tagKeyList) { 
        obj['TagKeyList'] = tagKeyList;
    }

    /**
     * Constructs a <code>UntagStreamRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UntagStreamRequest} obj Optional instance to populate.
     * @return {module:model/UntagStreamRequest} The populated <code>UntagStreamRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UntagStreamRequest();

            if (data.hasOwnProperty('StreamARN')) {
                obj['StreamARN'] = ApiClient.convertToType(data['StreamARN'], 'String');
            }
            if (data.hasOwnProperty('StreamName')) {
                obj['StreamName'] = ApiClient.convertToType(data['StreamName'], 'String');
            }
            if (data.hasOwnProperty('TagKeyList')) {
                obj['TagKeyList'] = ApiClient.convertToType(data['TagKeyList'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UntagStreamRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UntagStreamRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UntagStreamRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['StreamARN'] && !(typeof data['StreamARN'] === 'string' || data['StreamARN'] instanceof String)) {
            throw new Error("Expected the field `StreamARN` to be a primitive type in the JSON string but got " + data['StreamARN']);
        }
        // ensure the json data is a string
        if (data['StreamName'] && !(typeof data['StreamName'] === 'string' || data['StreamName'] instanceof String)) {
            throw new Error("Expected the field `StreamName` to be a primitive type in the JSON string but got " + data['StreamName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TagKeyList'])) {
            throw new Error("Expected the field `TagKeyList` to be an array in the JSON data but got " + data['TagKeyList']);
        }

        return true;
    }


}

UntagStreamRequest.RequiredProperties = ["TagKeyList"];

/**
 * The Amazon Resource Name (ARN) of the stream that you want to remove tags from.
 * @member {String} StreamARN
 */
UntagStreamRequest.prototype['StreamARN'] = undefined;

/**
 * The name of the stream that you want to remove tags from.
 * @member {String} StreamName
 */
UntagStreamRequest.prototype['StreamName'] = undefined;

/**
 * A list of the keys of the tags that you want to remove.
 * @member {Array.<String>} TagKeyList
 */
UntagStreamRequest.prototype['TagKeyList'] = undefined;






export default UntagStreamRequest;

