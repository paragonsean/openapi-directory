/*
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateSignalingChannelOutput;
import org.openapitools.client.model.CreateSignalingChannelRequest;
import org.openapitools.client.model.CreateStreamOutput;
import org.openapitools.client.model.CreateStreamRequest;
import org.openapitools.client.model.DeleteEdgeConfigurationRequest;
import org.openapitools.client.model.DeleteSignalingChannelRequest;
import org.openapitools.client.model.DeleteStreamRequest;
import org.openapitools.client.model.DescribeEdgeConfigurationOutput;
import org.openapitools.client.model.DescribeEdgeConfigurationRequest;
import org.openapitools.client.model.DescribeImageGenerationConfigurationOutput;
import org.openapitools.client.model.DescribeImageGenerationConfigurationRequest;
import org.openapitools.client.model.DescribeMappedResourceConfigurationOutput;
import org.openapitools.client.model.DescribeMappedResourceConfigurationRequest;
import org.openapitools.client.model.DescribeMediaStorageConfigurationOutput;
import org.openapitools.client.model.DescribeMediaStorageConfigurationRequest;
import org.openapitools.client.model.DescribeNotificationConfigurationOutput;
import org.openapitools.client.model.DescribeNotificationConfigurationRequest;
import org.openapitools.client.model.DescribeSignalingChannelOutput;
import org.openapitools.client.model.DescribeSignalingChannelRequest;
import org.openapitools.client.model.DescribeStreamOutput;
import org.openapitools.client.model.DescribeStreamRequest;
import org.openapitools.client.model.GetDataEndpointOutput;
import org.openapitools.client.model.GetDataEndpointRequest;
import org.openapitools.client.model.GetSignalingChannelEndpointOutput;
import org.openapitools.client.model.GetSignalingChannelEndpointRequest;
import org.openapitools.client.model.ListEdgeAgentConfigurationsOutput;
import org.openapitools.client.model.ListEdgeAgentConfigurationsRequest;
import org.openapitools.client.model.ListSignalingChannelsOutput;
import org.openapitools.client.model.ListSignalingChannelsRequest;
import org.openapitools.client.model.ListStreamsOutput;
import org.openapitools.client.model.ListStreamsRequest;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForStreamOutput;
import org.openapitools.client.model.ListTagsForStreamRequest;
import org.openapitools.client.model.StartEdgeConfigurationUpdateOutput;
import org.openapitools.client.model.StartEdgeConfigurationUpdateRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TagStreamRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UntagStreamRequest;
import org.openapitools.client.model.UpdateDataRetentionRequest;
import org.openapitools.client.model.UpdateImageGenerationConfigurationRequest;
import org.openapitools.client.model.UpdateMediaStorageConfigurationRequest;
import org.openapitools.client.model.UpdateNotificationConfigurationRequest;
import org.openapitools.client.model.UpdateSignalingChannelRequest;
import org.openapitools.client.model.UpdateStreamRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates a signaling channel. &lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateSignalingChannel&lt;/code&gt; is an asynchronous operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSignalingChannelTest() throws ApiException {
        CreateSignalingChannelRequest createSignalingChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSignalingChannelOutput response = api.createSignalingChannel(createSignalingChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Kinesis video stream. &lt;/p&gt; &lt;p&gt;When you create a new stream, Kinesis Video Streams assigns it a version number. When you change the stream&#39;s metadata, Kinesis Video Streams updates the version. &lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateStream&lt;/code&gt; is an asynchronous operation.&lt;/p&gt; &lt;p&gt;For information about how the service works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/how-it-works.html\&quot;&gt;How it Works&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;You must have permissions for the &lt;code&gt;KinesisVideo:CreateStream&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamTest() throws ApiException {
        CreateStreamRequest createStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamOutput response = api.createStream(createStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;An asynchronous API that deletes a stream’s existing edge configuration, as well as the corresponding media from the Edge Agent.&lt;/p&gt; &lt;p&gt;When you invoke this API, the sync status is set to &lt;code&gt;DELETING&lt;/code&gt;. A deletion process starts, in which active edge jobs are stopped and all media is deleted from the edge device. The time to delete varies, depending on the total amount of stored media. If the deletion process fails, the sync status changes to &lt;code&gt;DELETE_FAILED&lt;/code&gt;. You will need to re-try the deletion.&lt;/p&gt; &lt;p&gt;When the deletion process has completed successfully, the edge configuration is no longer accessible.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEdgeConfigurationTest() throws ApiException {
        DeleteEdgeConfigurationRequest deleteEdgeConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEdgeConfiguration(deleteEdgeConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified signaling channel. &lt;code&gt;DeleteSignalingChannel&lt;/code&gt; is an asynchronous operation. If you don&#39;t specify the channel&#39;s current version, the most recent version is deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSignalingChannelTest() throws ApiException {
        DeleteSignalingChannelRequest deleteSignalingChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSignalingChannel(deleteSignalingChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a Kinesis video stream and the data contained in the stream. &lt;/p&gt; &lt;p&gt;This method marks the stream for deletion, and makes the data in the stream inaccessible immediately.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;p&gt; To ensure that you have the latest version of the stream before deleting it, you can specify the stream version. Kinesis Video Streams assigns a version to each stream. When you update a stream, Kinesis Video Streams assigns a new version number. To get the latest stream version, use the &lt;code&gt;DescribeStream&lt;/code&gt; API. &lt;/p&gt; &lt;p&gt;This operation requires permission for the &lt;code&gt;KinesisVideo:DeleteStream&lt;/code&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamTest() throws ApiException {
        DeleteStreamRequest deleteStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteStream(deleteStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a stream’s edge configuration that was set using the &lt;code&gt;StartEdgeConfigurationUpdate&lt;/code&gt; API and the latest status of the edge agent&#39;s recorder and uploader jobs. Use this API to get the status of the configuration to determine if the configuration is in sync with the Edge Agent. Use this API to evaluate the health of the Edge Agent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEdgeConfigurationTest() throws ApiException {
        DescribeEdgeConfigurationRequest describeEdgeConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEdgeConfigurationOutput response = api.describeEdgeConfiguration(describeEdgeConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the &lt;code&gt;ImageGenerationConfiguration&lt;/code&gt; for a given Kinesis video stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageGenerationConfigurationTest() throws ApiException {
        DescribeImageGenerationConfigurationRequest describeImageGenerationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeImageGenerationConfigurationOutput response = api.describeImageGenerationConfiguration(describeImageGenerationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the most current information about the stream. The &lt;code&gt;streamName&lt;/code&gt; or &lt;code&gt;streamARN&lt;/code&gt; should be provided in the input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMappedResourceConfigurationTest() throws ApiException {
        DescribeMappedResourceConfigurationRequest describeMappedResourceConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeMappedResourceConfigurationOutput response = api.describeMappedResourceConfiguration(describeMappedResourceConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the most current information about the channel. Specify the &lt;code&gt;ChannelName&lt;/code&gt; or &lt;code&gt;ChannelARN&lt;/code&gt; in the input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMediaStorageConfigurationTest() throws ApiException {
        DescribeMediaStorageConfigurationRequest describeMediaStorageConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMediaStorageConfigurationOutput response = api.describeMediaStorageConfiguration(describeMediaStorageConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the &lt;code&gt;NotificationConfiguration&lt;/code&gt; for a given Kinesis video stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNotificationConfigurationTest() throws ApiException {
        DescribeNotificationConfigurationRequest describeNotificationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeNotificationConfigurationOutput response = api.describeNotificationConfiguration(describeNotificationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the most current information about the signaling channel. You must specify either the name or the Amazon Resource Name (ARN) of the channel that you want to describe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSignalingChannelTest() throws ApiException {
        DescribeSignalingChannelRequest describeSignalingChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSignalingChannelOutput response = api.describeSignalingChannel(describeSignalingChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the most current information about the specified stream. You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeStreamTest() throws ApiException {
        DescribeStreamRequest describeStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeStreamOutput response = api.describeStream(describeStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets an endpoint for a specified stream for either reading or writing. Use this endpoint in your application to read from the specified stream (using the &lt;code&gt;GetMedia&lt;/code&gt; or &lt;code&gt;GetMediaForFragmentList&lt;/code&gt; operations) or write to it (using the &lt;code&gt;PutMedia&lt;/code&gt; operation). &lt;/p&gt; &lt;note&gt; &lt;p&gt;The returned endpoint does not have the API name appended. The client needs to add the API name to the returned endpoint.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;In the request, specify the stream either by &lt;code&gt;StreamName&lt;/code&gt; or &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataEndpointTest() throws ApiException {
        GetDataEndpointRequest getDataEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataEndpointOutput response = api.getDataEndpoint(getDataEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides an endpoint for the specified signaling channel to send and receive messages. This API uses the &lt;code&gt;SingleMasterChannelEndpointConfiguration&lt;/code&gt; input parameter, which consists of the &lt;code&gt;Protocols&lt;/code&gt; and &lt;code&gt;Role&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Protocols&lt;/code&gt; is used to determine the communication mechanism. For example, if you specify &lt;code&gt;WSS&lt;/code&gt; as the protocol, this API produces a secure websocket endpoint. If you specify &lt;code&gt;HTTPS&lt;/code&gt; as the protocol, this API generates an HTTPS endpoint. &lt;/p&gt; &lt;p&gt; &lt;code&gt;Role&lt;/code&gt; determines the messaging permissions. A &lt;code&gt;MASTER&lt;/code&gt; role results in this API generating an endpoint that a client can use to communicate with any of the viewers on the channel. A &lt;code&gt;VIEWER&lt;/code&gt; role results in this API generating an endpoint that a client can use to communicate only with a &lt;code&gt;MASTER&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSignalingChannelEndpointTest() throws ApiException {
        GetSignalingChannelEndpointRequest getSignalingChannelEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSignalingChannelEndpointOutput response = api.getSignalingChannelEndpoint(getSignalingChannelEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns an array of edge configurations associated with the specified Edge Agent.&lt;/p&gt; &lt;p&gt;In the request, you must specify the Edge Agent &lt;code&gt;HubDeviceArn&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEdgeAgentConfigurationsTest() throws ApiException {
        ListEdgeAgentConfigurationsRequest listEdgeAgentConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEdgeAgentConfigurationsOutput response = api.listEdgeAgentConfigurations(listEdgeAgentConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;ChannelInfo&lt;/code&gt; objects. Each object describes a signaling channel. To retrieve only those channels that satisfy a specific condition, you can specify a &lt;code&gt;ChannelNameCondition&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSignalingChannelsTest() throws ApiException {
        ListSignalingChannelsRequest listSignalingChannelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSignalingChannelsOutput response = api.listSignalingChannels(listSignalingChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;StreamInfo&lt;/code&gt; objects. Each object describes a stream. To retrieve only streams that satisfy a specific condition, you can specify a &lt;code&gt;StreamNameCondition&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamsTest() throws ApiException {
        ListStreamsRequest listStreamsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListStreamsOutput response = api.listStreams(listStreamsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of tags associated with the specified signaling channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of tags associated with the specified stream.&lt;/p&gt; &lt;p&gt;In the request, you must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForStreamTest() throws ApiException {
        ListTagsForStreamRequest listTagsForStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForStreamOutput response = api.listTagsForStream(listTagsForStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;An asynchronous API that updates a stream’s existing edge configuration. The Kinesis Video Stream will sync the stream’s edge configuration with the Edge Agent IoT Greengrass component that runs on an IoT Hub Device, setup at your premise. The time to sync can vary and depends on the connectivity of the Hub Device. The &lt;code&gt;SyncStatus&lt;/code&gt; will be updated as the edge configuration is acknowledged, and synced with the Edge Agent. &lt;/p&gt; &lt;p&gt;If this API is invoked for the first time, a new edge configuration will be created for the stream, and the sync status will be set to &lt;code&gt;SYNCING&lt;/code&gt;. You will have to wait for the sync status to reach a terminal state such as: &lt;code&gt;IN_SYNC&lt;/code&gt;, or &lt;code&gt;SYNC_FAILED&lt;/code&gt;, before using this API again. If you invoke this API during the syncing process, a &lt;code&gt;ResourceInUseException&lt;/code&gt; will be thrown. The connectivity of the stream’s edge configuration and the Edge Agent will be retried for 15 minutes. After 15 minutes, the status will transition into the &lt;code&gt;SYNC_FAILED&lt;/code&gt; state.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startEdgeConfigurationUpdateTest() throws ApiException {
        StartEdgeConfigurationUpdateRequest startEdgeConfigurationUpdateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartEdgeConfigurationUpdateOutput response = api.startEdgeConfigurationUpdate(startEdgeConfigurationUpdateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags to a signaling channel. A &lt;i&gt;tag&lt;/i&gt; is a key-value pair (the value is optional) that you can define and assign to Amazon Web Services resources. If you specify a tag that already exists, the tag value is replaced with the value that you specify in the request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management and Cost Management User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds one or more tags to a stream. A &lt;i&gt;tag&lt;/i&gt; is a key-value pair (the value is optional) that you can define and assign to Amazon Web Services resources. If you specify a tag that already exists, the tag value is replaced with the value that you specify in the request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt; in the &lt;i&gt;Billing and Cost Management and Cost Management User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;You must provide either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permission for the &lt;code&gt;KinesisVideo:TagStream&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;A Kinesis video stream can support up to 50 tags.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagStreamTest() throws ApiException {
        TagStreamRequest tagStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagStream(tagStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a signaling channel. In the request, specify only a tag key or keys; don&#39;t specify the value. If you specify a tag key that does not exist, it&#39;s ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes one or more tags from a stream. In the request, specify only a tag key or keys; don&#39;t specify the value. If you specify a tag key that does not exist, it&#39;s ignored.&lt;/p&gt; &lt;p&gt;In the request, you must provide the &lt;code&gt;StreamName&lt;/code&gt; or &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagStreamTest() throws ApiException {
        UntagStreamRequest untagStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagStream(untagStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Increases or decreases the stream&#39;s data retention period by the value that you specify. To indicate whether you want to increase or decrease the data retention period, specify the &lt;code&gt;Operation&lt;/code&gt; parameter in the request body. In the request, you must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The retention period that you specify replaces the current value.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation requires permission for the &lt;code&gt;KinesisVideo:UpdateDataRetention&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;Changing the data retention period affects the data in the stream as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the data retention period is increased, existing data is retained for the new retention period. For example, if the data retention period is increased from one hour to seven hours, all existing data is retained for seven hours.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the data retention period is decreased, existing data is retained for the new retention period. For example, if the data retention period is decreased from seven hours to one hour, all existing data is retained for one hour, and any data older than one hour is deleted immediately.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataRetentionTest() throws ApiException {
        UpdateDataRetentionRequest updateDataRetentionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDataRetention(updateDataRetentionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the &lt;code&gt;StreamInfo&lt;/code&gt; and &lt;code&gt;ImageProcessingConfiguration&lt;/code&gt; fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateImageGenerationConfigurationTest() throws ApiException {
        UpdateImageGenerationConfigurationRequest updateImageGenerationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateImageGenerationConfiguration(updateImageGenerationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates a &lt;code&gt;SignalingChannel&lt;/code&gt; to a stream to store the media. There are two signaling modes that can specified :&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageStatus&lt;/code&gt; is disabled, no data will be stored, and the &lt;code&gt;StreamARN&lt;/code&gt; parameter will not be needed. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageStatus&lt;/code&gt; is enabled, the data will be stored in the &lt;code&gt;StreamARN&lt;/code&gt; provided. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;If &lt;code&gt;StorageStatus&lt;/code&gt; is enabled, direct peer-to-peer (master-viewer) connections no longer occur. Peers connect directly to the storage session. You must call the &lt;code&gt;JoinStorageSession&lt;/code&gt; API to trigger an SDP offer send and establish a connection between a peer and the storage session. &lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMediaStorageConfigurationTest() throws ApiException {
        UpdateMediaStorageConfigurationRequest updateMediaStorageConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateMediaStorageConfiguration(updateMediaStorageConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the notification information for a stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNotificationConfigurationTest() throws ApiException {
        UpdateNotificationConfigurationRequest updateNotificationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateNotificationConfiguration(updateNotificationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the existing signaling channel. This is an asynchronous operation and takes time to complete. &lt;/p&gt; &lt;p&gt;If the &lt;code&gt;MessageTtlSeconds&lt;/code&gt; value is updated (either increased or reduced), it only applies to new messages sent via this channel after it&#39;s been updated. Existing messages are still expired as per the previous &lt;code&gt;MessageTtlSeconds&lt;/code&gt; value.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSignalingChannelTest() throws ApiException {
        UpdateSignalingChannelRequest updateSignalingChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateSignalingChannel(updateSignalingChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates stream metadata, such as the device name and media type.&lt;/p&gt; &lt;p&gt;You must provide the stream name or the Amazon Resource Name (ARN) of the stream.&lt;/p&gt; &lt;p&gt;To make sure that you have the latest version of the stream before updating it, you can specify the stream version. Kinesis Video Streams assigns a version to each stream. When you update a stream, Kinesis Video Streams assigns a new version number. To get the latest stream version, use the &lt;code&gt;DescribeStream&lt;/code&gt; API. &lt;/p&gt; &lt;p&gt; &lt;code&gt;UpdateStream&lt;/code&gt; is an asynchronous operation, and takes time to complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamTest() throws ApiException {
        UpdateStreamRequest updateStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateStream(updateStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
