/*
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateStreamRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:54.410070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateStreamRequest {
  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STREAM_A_R_N = "StreamARN";
  @SerializedName(SERIALIZED_NAME_STREAM_A_R_N)
  private String streamARN;

  public static final String SERIALIZED_NAME_CURRENT_VERSION = "CurrentVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  private String currentVersion;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "MediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public UpdateStreamRequest() {
  }

  public UpdateStreamRequest streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the stream whose metadata you want to update.&lt;/p&gt; &lt;p&gt;The stream name is an identifier for the stream, and must be unique for each account and region.&lt;/p&gt;
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public UpdateStreamRequest streamARN(String streamARN) {
    this.streamARN = streamARN;
    return this;
  }

  /**
   * The ARN of the stream whose metadata you want to update.
   * @return streamARN
   */
  @javax.annotation.Nullable
  public String getStreamARN() {
    return streamARN;
  }

  public void setStreamARN(String streamARN) {
    this.streamARN = streamARN;
  }


  public UpdateStreamRequest currentVersion(String currentVersion) {
    this.currentVersion = currentVersion;
    return this;
  }

  /**
   * The version of the stream whose metadata you want to update.
   * @return currentVersion
   */
  @javax.annotation.Nonnull
  public String getCurrentVersion() {
    return currentVersion;
  }

  public void setCurrentVersion(String currentVersion) {
    this.currentVersion = currentVersion;
  }


  public UpdateStreamRequest deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the device that is writing to the stream. &lt;/p&gt; &lt;note&gt; &lt;p&gt; In the current implementation, Kinesis Video Streams does not use this name. &lt;/p&gt; &lt;/note&gt;
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public UpdateStreamRequest mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * &lt;p&gt;The stream&#39;s media type. Use &lt;code&gt;MediaType&lt;/code&gt; to specify the type of content that the stream contains to the consumers of the stream. For more information about media types, see &lt;a href&#x3D;\&quot;http://www.iana.org/assignments/media-types/media-types.xhtml\&quot;&gt;Media Types&lt;/a&gt;. If you choose to specify the &lt;code&gt;MediaType&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6838#section-4.2\&quot;&gt;Naming Requirements&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To play video on the console, you must specify the correct video type. For example, if the video in the stream is H.264, specify &lt;code&gt;video/h264&lt;/code&gt; as the &lt;code&gt;MediaType&lt;/code&gt;.&lt;/p&gt;
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateStreamRequest updateStreamRequest = (UpdateStreamRequest) o;
    return Objects.equals(this.streamName, updateStreamRequest.streamName) &&
        Objects.equals(this.streamARN, updateStreamRequest.streamARN) &&
        Objects.equals(this.currentVersion, updateStreamRequest.currentVersion) &&
        Objects.equals(this.deviceName, updateStreamRequest.deviceName) &&
        Objects.equals(this.mediaType, updateStreamRequest.mediaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamName, streamARN, currentVersion, deviceName, mediaType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateStreamRequest {\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamARN: ").append(toIndentedString(streamARN)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamName");
    openapiFields.add("StreamARN");
    openapiFields.add("CurrentVersion");
    openapiFields.add("DeviceName");
    openapiFields.add("MediaType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrentVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateStreamRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateStreamRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateStreamRequest is not found in the empty JSON string", UpdateStreamRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateStreamRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateStreamRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateStreamRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) && !jsonObj.get("StreamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamName").toString()));
      }
      if ((jsonObj.get("StreamARN") != null && !jsonObj.get("StreamARN").isJsonNull()) && !jsonObj.get("StreamARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamARN").toString()));
      }
      if (!jsonObj.get("CurrentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentVersion").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
      if ((jsonObj.get("MediaType") != null && !jsonObj.get("MediaType").isJsonNull()) && !jsonObj.get("MediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MediaType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateStreamRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateStreamRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateStreamRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateStreamRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateStreamRequest>() {
           @Override
           public void write(JsonWriter out, UpdateStreamRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateStreamRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateStreamRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateStreamRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateStreamRequest
   */
  public static UpdateStreamRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateStreamRequest.class);
  }

  /**
   * Convert an instance of UpdateStreamRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

