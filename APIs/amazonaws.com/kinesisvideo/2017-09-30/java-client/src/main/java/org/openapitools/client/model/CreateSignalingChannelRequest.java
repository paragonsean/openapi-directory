/*
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSignalingChannelRequestSingleMasterConfiguration;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSignalingChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:54.410070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSignalingChannelRequest {
  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  /**
   * A type of the signaling channel that you are creating. Currently, &lt;code&gt;SINGLE_MASTER&lt;/code&gt; is the only supported channel type. 
   */
  @JsonAdapter(ChannelTypeEnum.Adapter.class)
  public enum ChannelTypeEnum {
    SINGLE_MASTER("SINGLE_MASTER"),
    
    FULL_MESH("FULL_MESH");

    private String value;

    ChannelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelTypeEnum fromValue(String value) {
      for (ChannelTypeEnum b : ChannelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "ChannelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private ChannelTypeEnum channelType;

  public static final String SERIALIZED_NAME_SINGLE_MASTER_CONFIGURATION = "SingleMasterConfiguration";
  @SerializedName(SERIALIZED_NAME_SINGLE_MASTER_CONFIGURATION)
  private CreateSignalingChannelRequestSingleMasterConfiguration singleMasterConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public CreateSignalingChannelRequest() {
  }

  public CreateSignalingChannelRequest channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * A name for the signaling channel that you are creating. It must be unique for each Amazon Web Services account and Amazon Web Services Region.
   * @return channelName
   */
  @javax.annotation.Nonnull
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public CreateSignalingChannelRequest channelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
    return this;
  }

  /**
   * A type of the signaling channel that you are creating. Currently, &lt;code&gt;SINGLE_MASTER&lt;/code&gt; is the only supported channel type. 
   * @return channelType
   */
  @javax.annotation.Nullable
  public ChannelTypeEnum getChannelType() {
    return channelType;
  }

  public void setChannelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
  }


  public CreateSignalingChannelRequest singleMasterConfiguration(CreateSignalingChannelRequestSingleMasterConfiguration singleMasterConfiguration) {
    this.singleMasterConfiguration = singleMasterConfiguration;
    return this;
  }

  /**
   * Get singleMasterConfiguration
   * @return singleMasterConfiguration
   */
  @javax.annotation.Nullable
  public CreateSignalingChannelRequestSingleMasterConfiguration getSingleMasterConfiguration() {
    return singleMasterConfiguration;
  }

  public void setSingleMasterConfiguration(CreateSignalingChannelRequestSingleMasterConfiguration singleMasterConfiguration) {
    this.singleMasterConfiguration = singleMasterConfiguration;
  }


  public CreateSignalingChannelRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateSignalingChannelRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A set of tags (key-value pairs) that you want to associate with this channel.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSignalingChannelRequest createSignalingChannelRequest = (CreateSignalingChannelRequest) o;
    return Objects.equals(this.channelName, createSignalingChannelRequest.channelName) &&
        Objects.equals(this.channelType, createSignalingChannelRequest.channelType) &&
        Objects.equals(this.singleMasterConfiguration, createSignalingChannelRequest.singleMasterConfiguration) &&
        Objects.equals(this.tags, createSignalingChannelRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelName, channelType, singleMasterConfiguration, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSignalingChannelRequest {\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    singleMasterConfiguration: ").append(toIndentedString(singleMasterConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelName");
    openapiFields.add("ChannelType");
    openapiFields.add("SingleMasterConfiguration");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ChannelName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSignalingChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSignalingChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSignalingChannelRequest is not found in the empty JSON string", CreateSignalingChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSignalingChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSignalingChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSignalingChannelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ChannelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelName").toString()));
      }
      if ((jsonObj.get("ChannelType") != null && !jsonObj.get("ChannelType").isJsonNull()) && !jsonObj.get("ChannelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelType").toString()));
      }
      // validate the optional field `ChannelType`
      if (jsonObj.get("ChannelType") != null && !jsonObj.get("ChannelType").isJsonNull()) {
        ChannelTypeEnum.validateJsonElement(jsonObj.get("ChannelType"));
      }
      // validate the optional field `SingleMasterConfiguration`
      if (jsonObj.get("SingleMasterConfiguration") != null && !jsonObj.get("SingleMasterConfiguration").isJsonNull()) {
        CreateSignalingChannelRequestSingleMasterConfiguration.validateJsonElement(jsonObj.get("SingleMasterConfiguration"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSignalingChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSignalingChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSignalingChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSignalingChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSignalingChannelRequest>() {
           @Override
           public void write(JsonWriter out, CreateSignalingChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSignalingChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSignalingChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSignalingChannelRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSignalingChannelRequest
   */
  public static CreateSignalingChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSignalingChannelRequest.class);
  }

  /**
   * Convert an instance of CreateSignalingChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

