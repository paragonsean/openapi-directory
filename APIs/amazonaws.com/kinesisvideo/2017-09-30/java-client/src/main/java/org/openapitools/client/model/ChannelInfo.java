/*
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChannelInfoSingleMasterConfiguration;
import org.openapitools.client.model.ChannelType;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure that encapsulates a signaling channel&#39;s metadata and properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:54.410070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelInfo {
  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CHANNEL_A_R_N = "ChannelARN";
  @SerializedName(SERIALIZED_NAME_CHANNEL_A_R_N)
  private String channelARN;

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "ChannelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private ChannelType channelType;

  public static final String SERIALIZED_NAME_CHANNEL_STATUS = "ChannelStatus";
  @SerializedName(SERIALIZED_NAME_CHANNEL_STATUS)
  private Status channelStatus;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_SINGLE_MASTER_CONFIGURATION = "SingleMasterConfiguration";
  @SerializedName(SERIALIZED_NAME_SINGLE_MASTER_CONFIGURATION)
  private ChannelInfoSingleMasterConfiguration singleMasterConfiguration;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ChannelInfo() {
  }

  public ChannelInfo channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Get channelName
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public ChannelInfo channelARN(String channelARN) {
    this.channelARN = channelARN;
    return this;
  }

  /**
   * Get channelARN
   * @return channelARN
   */
  @javax.annotation.Nullable
  public String getChannelARN() {
    return channelARN;
  }

  public void setChannelARN(String channelARN) {
    this.channelARN = channelARN;
  }


  public ChannelInfo channelType(ChannelType channelType) {
    this.channelType = channelType;
    return this;
  }

  /**
   * Get channelType
   * @return channelType
   */
  @javax.annotation.Nullable
  public ChannelType getChannelType() {
    return channelType;
  }

  public void setChannelType(ChannelType channelType) {
    this.channelType = channelType;
  }


  public ChannelInfo channelStatus(Status channelStatus) {
    this.channelStatus = channelStatus;
    return this;
  }

  /**
   * Get channelStatus
   * @return channelStatus
   */
  @javax.annotation.Nullable
  public Status getChannelStatus() {
    return channelStatus;
  }

  public void setChannelStatus(Status channelStatus) {
    this.channelStatus = channelStatus;
  }


  public ChannelInfo creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ChannelInfo singleMasterConfiguration(ChannelInfoSingleMasterConfiguration singleMasterConfiguration) {
    this.singleMasterConfiguration = singleMasterConfiguration;
    return this;
  }

  /**
   * Get singleMasterConfiguration
   * @return singleMasterConfiguration
   */
  @javax.annotation.Nullable
  public ChannelInfoSingleMasterConfiguration getSingleMasterConfiguration() {
    return singleMasterConfiguration;
  }

  public void setSingleMasterConfiguration(ChannelInfoSingleMasterConfiguration singleMasterConfiguration) {
    this.singleMasterConfiguration = singleMasterConfiguration;
  }


  public ChannelInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelInfo channelInfo = (ChannelInfo) o;
    return Objects.equals(this.channelName, channelInfo.channelName) &&
        Objects.equals(this.channelARN, channelInfo.channelARN) &&
        Objects.equals(this.channelType, channelInfo.channelType) &&
        Objects.equals(this.channelStatus, channelInfo.channelStatus) &&
        Objects.equals(this.creationTime, channelInfo.creationTime) &&
        Objects.equals(this.singleMasterConfiguration, channelInfo.singleMasterConfiguration) &&
        Objects.equals(this.version, channelInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelName, channelARN, channelType, channelStatus, creationTime, singleMasterConfiguration, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelInfo {\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelARN: ").append(toIndentedString(channelARN)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    channelStatus: ").append(toIndentedString(channelStatus)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    singleMasterConfiguration: ").append(toIndentedString(singleMasterConfiguration)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelName");
    openapiFields.add("ChannelARN");
    openapiFields.add("ChannelType");
    openapiFields.add("ChannelStatus");
    openapiFields.add("CreationTime");
    openapiFields.add("SingleMasterConfiguration");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelInfo is not found in the empty JSON string", ChannelInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelName`
      if (jsonObj.get("ChannelName") != null && !jsonObj.get("ChannelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelName"));
      }
      // validate the optional field `ChannelARN`
      if (jsonObj.get("ChannelARN") != null && !jsonObj.get("ChannelARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelARN"));
      }
      // validate the optional field `ChannelType`
      if (jsonObj.get("ChannelType") != null && !jsonObj.get("ChannelType").isJsonNull()) {
        ChannelType.validateJsonElement(jsonObj.get("ChannelType"));
      }
      // validate the optional field `ChannelStatus`
      if (jsonObj.get("ChannelStatus") != null && !jsonObj.get("ChannelStatus").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("ChannelStatus"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `SingleMasterConfiguration`
      if (jsonObj.get("SingleMasterConfiguration") != null && !jsonObj.get("SingleMasterConfiguration").isJsonNull()) {
        ChannelInfoSingleMasterConfiguration.validateJsonElement(jsonObj.get("SingleMasterConfiguration"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelInfo>() {
           @Override
           public void write(JsonWriter out, ChannelInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelInfo
   * @throws IOException if the JSON string is invalid with respect to ChannelInfo
   */
  public static ChannelInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelInfo.class);
  }

  /**
   * Convert an instance of ChannelInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

