/*
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStreamOutputStreamInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:54.410070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStreamOutputStreamInfo {
  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STREAM_A_R_N = "StreamARN";
  @SerializedName(SERIALIZED_NAME_STREAM_A_R_N)
  private String streamARN;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "MediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DATA_RETENTION_IN_HOURS = "DataRetentionInHours";
  @SerializedName(SERIALIZED_NAME_DATA_RETENTION_IN_HOURS)
  private Integer dataRetentionInHours;

  public DescribeStreamOutputStreamInfo() {
  }

  public DescribeStreamOutputStreamInfo deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public DescribeStreamOutputStreamInfo streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Get streamName
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public DescribeStreamOutputStreamInfo streamARN(String streamARN) {
    this.streamARN = streamARN;
    return this;
  }

  /**
   * Get streamARN
   * @return streamARN
   */
  @javax.annotation.Nullable
  public String getStreamARN() {
    return streamARN;
  }

  public void setStreamARN(String streamARN) {
    this.streamARN = streamARN;
  }


  public DescribeStreamOutputStreamInfo mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public DescribeStreamOutputStreamInfo kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public DescribeStreamOutputStreamInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public DescribeStreamOutputStreamInfo status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public DescribeStreamOutputStreamInfo creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeStreamOutputStreamInfo dataRetentionInHours(Integer dataRetentionInHours) {
    this.dataRetentionInHours = dataRetentionInHours;
    return this;
  }

  /**
   * Get dataRetentionInHours
   * @return dataRetentionInHours
   */
  @javax.annotation.Nullable
  public Integer getDataRetentionInHours() {
    return dataRetentionInHours;
  }

  public void setDataRetentionInHours(Integer dataRetentionInHours) {
    this.dataRetentionInHours = dataRetentionInHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStreamOutputStreamInfo describeStreamOutputStreamInfo = (DescribeStreamOutputStreamInfo) o;
    return Objects.equals(this.deviceName, describeStreamOutputStreamInfo.deviceName) &&
        Objects.equals(this.streamName, describeStreamOutputStreamInfo.streamName) &&
        Objects.equals(this.streamARN, describeStreamOutputStreamInfo.streamARN) &&
        Objects.equals(this.mediaType, describeStreamOutputStreamInfo.mediaType) &&
        Objects.equals(this.kmsKeyId, describeStreamOutputStreamInfo.kmsKeyId) &&
        Objects.equals(this.version, describeStreamOutputStreamInfo.version) &&
        Objects.equals(this.status, describeStreamOutputStreamInfo.status) &&
        Objects.equals(this.creationTime, describeStreamOutputStreamInfo.creationTime) &&
        Objects.equals(this.dataRetentionInHours, describeStreamOutputStreamInfo.dataRetentionInHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceName, streamName, streamARN, mediaType, kmsKeyId, version, status, creationTime, dataRetentionInHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStreamOutputStreamInfo {\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamARN: ").append(toIndentedString(streamARN)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    dataRetentionInHours: ").append(toIndentedString(dataRetentionInHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceName");
    openapiFields.add("StreamName");
    openapiFields.add("StreamARN");
    openapiFields.add("MediaType");
    openapiFields.add("KmsKeyId");
    openapiFields.add("Version");
    openapiFields.add("Status");
    openapiFields.add("CreationTime");
    openapiFields.add("DataRetentionInHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStreamOutputStreamInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStreamOutputStreamInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStreamOutputStreamInfo is not found in the empty JSON string", DescribeStreamOutputStreamInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStreamOutputStreamInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStreamOutputStreamInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DeviceName`
      if (jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceName"));
      }
      // validate the optional field `StreamName`
      if (jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamName"));
      }
      // validate the optional field `StreamARN`
      if (jsonObj.get("StreamARN") != null && !jsonObj.get("StreamARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamARN"));
      }
      // validate the optional field `MediaType`
      if (jsonObj.get("MediaType") != null && !jsonObj.get("MediaType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaType"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Version"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `DataRetentionInHours`
      if (jsonObj.get("DataRetentionInHours") != null && !jsonObj.get("DataRetentionInHours").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataRetentionInHours"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStreamOutputStreamInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStreamOutputStreamInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStreamOutputStreamInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStreamOutputStreamInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStreamOutputStreamInfo>() {
           @Override
           public void write(JsonWriter out, DescribeStreamOutputStreamInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStreamOutputStreamInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStreamOutputStreamInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStreamOutputStreamInfo
   * @throws IOException if the JSON string is invalid with respect to DescribeStreamOutputStreamInfo
   */
  public static DescribeStreamOutputStreamInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStreamOutputStreamInfo.class);
  }

  /**
   * Convert an instance of DescribeStreamOutputStreamInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

