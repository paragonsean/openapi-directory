/*
 * Amazon Kinesis Video Streams
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeletionConfigLocalSizeConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration details required to delete the connection of the stream from the Edge Agent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:54.410070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeletionConfig {
  public static final String SERIALIZED_NAME_EDGE_RETENTION_IN_HOURS = "EdgeRetentionInHours";
  @SerializedName(SERIALIZED_NAME_EDGE_RETENTION_IN_HOURS)
  private Integer edgeRetentionInHours;

  public static final String SERIALIZED_NAME_LOCAL_SIZE_CONFIG = "LocalSizeConfig";
  @SerializedName(SERIALIZED_NAME_LOCAL_SIZE_CONFIG)
  private DeletionConfigLocalSizeConfig localSizeConfig;

  public static final String SERIALIZED_NAME_DELETE_AFTER_UPLOAD = "DeleteAfterUpload";
  @SerializedName(SERIALIZED_NAME_DELETE_AFTER_UPLOAD)
  private Boolean deleteAfterUpload;

  public DeletionConfig() {
  }

  public DeletionConfig edgeRetentionInHours(Integer edgeRetentionInHours) {
    this.edgeRetentionInHours = edgeRetentionInHours;
    return this;
  }

  /**
   * Get edgeRetentionInHours
   * @return edgeRetentionInHours
   */
  @javax.annotation.Nullable
  public Integer getEdgeRetentionInHours() {
    return edgeRetentionInHours;
  }

  public void setEdgeRetentionInHours(Integer edgeRetentionInHours) {
    this.edgeRetentionInHours = edgeRetentionInHours;
  }


  public DeletionConfig localSizeConfig(DeletionConfigLocalSizeConfig localSizeConfig) {
    this.localSizeConfig = localSizeConfig;
    return this;
  }

  /**
   * Get localSizeConfig
   * @return localSizeConfig
   */
  @javax.annotation.Nullable
  public DeletionConfigLocalSizeConfig getLocalSizeConfig() {
    return localSizeConfig;
  }

  public void setLocalSizeConfig(DeletionConfigLocalSizeConfig localSizeConfig) {
    this.localSizeConfig = localSizeConfig;
  }


  public DeletionConfig deleteAfterUpload(Boolean deleteAfterUpload) {
    this.deleteAfterUpload = deleteAfterUpload;
    return this;
  }

  /**
   * Get deleteAfterUpload
   * @return deleteAfterUpload
   */
  @javax.annotation.Nullable
  public Boolean getDeleteAfterUpload() {
    return deleteAfterUpload;
  }

  public void setDeleteAfterUpload(Boolean deleteAfterUpload) {
    this.deleteAfterUpload = deleteAfterUpload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletionConfig deletionConfig = (DeletionConfig) o;
    return Objects.equals(this.edgeRetentionInHours, deletionConfig.edgeRetentionInHours) &&
        Objects.equals(this.localSizeConfig, deletionConfig.localSizeConfig) &&
        Objects.equals(this.deleteAfterUpload, deletionConfig.deleteAfterUpload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edgeRetentionInHours, localSizeConfig, deleteAfterUpload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletionConfig {\n");
    sb.append("    edgeRetentionInHours: ").append(toIndentedString(edgeRetentionInHours)).append("\n");
    sb.append("    localSizeConfig: ").append(toIndentedString(localSizeConfig)).append("\n");
    sb.append("    deleteAfterUpload: ").append(toIndentedString(deleteAfterUpload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EdgeRetentionInHours");
    openapiFields.add("LocalSizeConfig");
    openapiFields.add("DeleteAfterUpload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletionConfig is not found in the empty JSON string", DeletionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EdgeRetentionInHours`
      if (jsonObj.get("EdgeRetentionInHours") != null && !jsonObj.get("EdgeRetentionInHours").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EdgeRetentionInHours"));
      }
      // validate the optional field `LocalSizeConfig`
      if (jsonObj.get("LocalSizeConfig") != null && !jsonObj.get("LocalSizeConfig").isJsonNull()) {
        DeletionConfigLocalSizeConfig.validateJsonElement(jsonObj.get("LocalSizeConfig"));
      }
      // validate the optional field `DeleteAfterUpload`
      if (jsonObj.get("DeleteAfterUpload") != null && !jsonObj.get("DeleteAfterUpload").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeleteAfterUpload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletionConfig>() {
           @Override
           public void write(JsonWriter out, DeletionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletionConfig
   * @throws IOException if the JSON string is invalid with respect to DeletionConfig
   */
  public static DeletionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletionConfig.class);
  }

  /**
   * Convert an instance of DeletionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

