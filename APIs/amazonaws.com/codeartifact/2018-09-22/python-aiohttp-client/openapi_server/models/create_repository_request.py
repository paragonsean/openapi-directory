# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server.models.upstream_repository import UpstreamRepository
import re
from openapi_server import util


class CreateRepositoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, upstreams: List[UpstreamRepository]=None, tags: List[Tag]=None):
        """CreateRepositoryRequest - a model defined in OpenAPI

        :param description: The description of this CreateRepositoryRequest.
        :param upstreams: The upstreams of this CreateRepositoryRequest.
        :param tags: The tags of this CreateRepositoryRequest.
        """
        self.openapi_types = {
            'description': str,
            'upstreams': List[UpstreamRepository],
            'tags': List[Tag]
        }

        self.attribute_map = {
            'description': 'description',
            'upstreams': 'upstreams',
            'tags': 'tags'
        }

        self._description = description
        self._upstreams = upstreams
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRepositoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRepository_request of this CreateRepositoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateRepositoryRequest.

         A description of the created repository. 

        :return: The description of this CreateRepositoryRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRepositoryRequest.

         A description of the created repository. 

        :param description: The description of this CreateRepositoryRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and not re.search(r'\P{C}*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/\P{C}*/`")

        self._description = description

    @property
    def upstreams(self):
        """Gets the upstreams of this CreateRepositoryRequest.

         A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when CodeArtifact looks for a requested package version. For more information, see <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html\">Working with upstream repositories</a>. 

        :return: The upstreams of this CreateRepositoryRequest.
        :rtype: List[UpstreamRepository]
        """
        return self._upstreams

    @upstreams.setter
    def upstreams(self, upstreams):
        """Sets the upstreams of this CreateRepositoryRequest.

         A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when CodeArtifact looks for a requested package version. For more information, see <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html\">Working with upstream repositories</a>. 

        :param upstreams: The upstreams of this CreateRepositoryRequest.
        :type upstreams: List[UpstreamRepository]
        """

        self._upstreams = upstreams

    @property
    def tags(self):
        """Gets the tags of this CreateRepositoryRequest.

        One or more tag key-value pairs for the repository.

        :return: The tags of this CreateRepositoryRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRepositoryRequest.

        One or more tag key-value pairs for the repository.

        :param tags: The tags of this CreateRepositoryRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
