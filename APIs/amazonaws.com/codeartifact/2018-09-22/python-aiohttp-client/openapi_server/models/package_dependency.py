# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageDependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, package: str=None, dependency_type: str=None, version_requirement: str=None):
        """PackageDependency - a model defined in OpenAPI

        :param namespace: The namespace of this PackageDependency.
        :param package: The package of this PackageDependency.
        :param dependency_type: The dependency_type of this PackageDependency.
        :param version_requirement: The version_requirement of this PackageDependency.
        """
        self.openapi_types = {
            'namespace': str,
            'package': str,
            'dependency_type': str,
            'version_requirement': str
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'package': 'package',
            'dependency_type': 'dependencyType',
            'version_requirement': 'versionRequirement'
        }

        self._namespace = namespace
        self._package = package
        self._dependency_type = dependency_type
        self._version_requirement = version_requirement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageDependency of this PackageDependency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this PackageDependency.


        :return: The namespace of this PackageDependency.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this PackageDependency.


        :param namespace: The namespace of this PackageDependency.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def package(self):
        """Gets the package of this PackageDependency.


        :return: The package of this PackageDependency.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this PackageDependency.


        :param package: The package of this PackageDependency.
        :type package: str
        """

        self._package = package

    @property
    def dependency_type(self):
        """Gets the dependency_type of this PackageDependency.


        :return: The dependency_type of this PackageDependency.
        :rtype: str
        """
        return self._dependency_type

    @dependency_type.setter
    def dependency_type(self, dependency_type):
        """Sets the dependency_type of this PackageDependency.


        :param dependency_type: The dependency_type of this PackageDependency.
        :type dependency_type: str
        """

        self._dependency_type = dependency_type

    @property
    def version_requirement(self):
        """Gets the version_requirement of this PackageDependency.


        :return: The version_requirement of this PackageDependency.
        :rtype: str
        """
        return self._version_requirement

    @version_requirement.setter
    def version_requirement(self, version_requirement):
        """Sets the version_requirement of this PackageDependency.


        :param version_requirement: The version_requirement of this PackageDependency.
        :type version_requirement: str
        """

        self._version_requirement = version_requirement
