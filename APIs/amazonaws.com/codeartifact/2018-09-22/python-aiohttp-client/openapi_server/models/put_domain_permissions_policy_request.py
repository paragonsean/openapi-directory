# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutDomainPermissionsPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, domain_owner: str=None, policy_revision: str=None, policy_document: str=None):
        """PutDomainPermissionsPolicyRequest - a model defined in OpenAPI

        :param domain: The domain of this PutDomainPermissionsPolicyRequest.
        :param domain_owner: The domain_owner of this PutDomainPermissionsPolicyRequest.
        :param policy_revision: The policy_revision of this PutDomainPermissionsPolicyRequest.
        :param policy_document: The policy_document of this PutDomainPermissionsPolicyRequest.
        """
        self.openapi_types = {
            'domain': str,
            'domain_owner': str,
            'policy_revision': str,
            'policy_document': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'domain_owner': 'domainOwner',
            'policy_revision': 'policyRevision',
            'policy_document': 'policyDocument'
        }

        self._domain = domain
        self._domain_owner = domain_owner
        self._policy_revision = policy_revision
        self._policy_document = policy_document

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDomainPermissionsPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDomainPermissionsPolicy_request of this PutDomainPermissionsPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this PutDomainPermissionsPolicyRequest.

         The name of the domain on which to set the resource policy. 

        :return: The domain of this PutDomainPermissionsPolicyRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PutDomainPermissionsPolicyRequest.

         The name of the domain on which to set the resource policy. 

        :param domain: The domain of this PutDomainPermissionsPolicyRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")
        if domain is not None and len(domain) > 50:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `50`")
        if domain is not None and len(domain) < 2:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `2`")
        if domain is not None and not re.search(r'[a-z][a-z0-9\-]{0,48}[a-z0-9]', domain):
            raise ValueError("Invalid value for `domain`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]{0,48}[a-z0-9]/`")

        self._domain = domain

    @property
    def domain_owner(self):
        """Gets the domain_owner of this PutDomainPermissionsPolicyRequest.

         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 

        :return: The domain_owner of this PutDomainPermissionsPolicyRequest.
        :rtype: str
        """
        return self._domain_owner

    @domain_owner.setter
    def domain_owner(self, domain_owner):
        """Sets the domain_owner of this PutDomainPermissionsPolicyRequest.

         The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 

        :param domain_owner: The domain_owner of this PutDomainPermissionsPolicyRequest.
        :type domain_owner: str
        """
        if domain_owner is not None and len(domain_owner) > 12:
            raise ValueError("Invalid value for `domain_owner`, length must be less than or equal to `12`")
        if domain_owner is not None and len(domain_owner) < 12:
            raise ValueError("Invalid value for `domain_owner`, length must be greater than or equal to `12`")
        if domain_owner is not None and not re.search(r'[0-9]{12}', domain_owner):
            raise ValueError("Invalid value for `domain_owner`, must be a follow pattern or equal to `/[0-9]{12}/`")

        self._domain_owner = domain_owner

    @property
    def policy_revision(self):
        """Gets the policy_revision of this PutDomainPermissionsPolicyRequest.

         The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. 

        :return: The policy_revision of this PutDomainPermissionsPolicyRequest.
        :rtype: str
        """
        return self._policy_revision

    @policy_revision.setter
    def policy_revision(self, policy_revision):
        """Sets the policy_revision of this PutDomainPermissionsPolicyRequest.

         The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. 

        :param policy_revision: The policy_revision of this PutDomainPermissionsPolicyRequest.
        :type policy_revision: str
        """
        if policy_revision is not None and len(policy_revision) > 100:
            raise ValueError("Invalid value for `policy_revision`, length must be less than or equal to `100`")
        if policy_revision is not None and len(policy_revision) < 1:
            raise ValueError("Invalid value for `policy_revision`, length must be greater than or equal to `1`")
        if policy_revision is not None and not re.search(r'\S+', policy_revision):
            raise ValueError("Invalid value for `policy_revision`, must be a follow pattern or equal to `/\S+/`")

        self._policy_revision = policy_revision

    @property
    def policy_document(self):
        """Gets the policy_document of this PutDomainPermissionsPolicyRequest.

         A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. 

        :return: The policy_document of this PutDomainPermissionsPolicyRequest.
        :rtype: str
        """
        return self._policy_document

    @policy_document.setter
    def policy_document(self, policy_document):
        """Sets the policy_document of this PutDomainPermissionsPolicyRequest.

         A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. 

        :param policy_document: The policy_document of this PutDomainPermissionsPolicyRequest.
        :type policy_document: str
        """
        if policy_document is None:
            raise ValueError("Invalid value for `policy_document`, must not be `None`")
        if policy_document is not None and len(policy_document) > 7168:
            raise ValueError("Invalid value for `policy_document`, length must be less than or equal to `7168`")
        if policy_document is not None and len(policy_document) < 1:
            raise ValueError("Invalid value for `policy_document`, length must be greater than or equal to `1`")
        if policy_document is not None and not re.search(r'[\P{C}\s]+', policy_document):
            raise ValueError("Invalid value for `policy_document`, must be a follow pattern or equal to `/[\P{C}\s]+/`")

        self._policy_document = policy_document
