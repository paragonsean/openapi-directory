# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePackageVersionsStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, versions: List[str]=None, version_revisions: Dict[str, str]=None, expected_status: str=None, target_status: str=None):
        """UpdatePackageVersionsStatusRequest - a model defined in OpenAPI

        :param versions: The versions of this UpdatePackageVersionsStatusRequest.
        :param version_revisions: The version_revisions of this UpdatePackageVersionsStatusRequest.
        :param expected_status: The expected_status of this UpdatePackageVersionsStatusRequest.
        :param target_status: The target_status of this UpdatePackageVersionsStatusRequest.
        """
        self.openapi_types = {
            'versions': List[str],
            'version_revisions': Dict[str, str],
            'expected_status': str,
            'target_status': str
        }

        self.attribute_map = {
            'versions': 'versions',
            'version_revisions': 'versionRevisions',
            'expected_status': 'expectedStatus',
            'target_status': 'targetStatus'
        }

        self._versions = versions
        self._version_revisions = version_revisions
        self._expected_status = expected_status
        self._target_status = target_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePackageVersionsStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePackageVersionsStatus_request of this UpdatePackageVersionsStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def versions(self):
        """Gets the versions of this UpdatePackageVersionsStatusRequest.

         An array of strings that specify the versions of the package with the statuses to update. 

        :return: The versions of this UpdatePackageVersionsStatusRequest.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this UpdatePackageVersionsStatusRequest.

         An array of strings that specify the versions of the package with the statuses to update. 

        :param versions: The versions of this UpdatePackageVersionsStatusRequest.
        :type versions: List[str]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")
        if versions is not None and len(versions) > 100:
            raise ValueError("Invalid value for `versions`, number of items must be less than or equal to `100`")

        self._versions = versions

    @property
    def version_revisions(self):
        """Gets the version_revisions of this UpdatePackageVersionsStatusRequest.

         A map of package versions and package version revisions. The map <code>key</code> is the package version (for example, <code>3.5.2</code>), and the map <code>value</code> is the package version revision. 

        :return: The version_revisions of this UpdatePackageVersionsStatusRequest.
        :rtype: Dict[str, str]
        """
        return self._version_revisions

    @version_revisions.setter
    def version_revisions(self, version_revisions):
        """Sets the version_revisions of this UpdatePackageVersionsStatusRequest.

         A map of package versions and package version revisions. The map <code>key</code> is the package version (for example, <code>3.5.2</code>), and the map <code>value</code> is the package version revision. 

        :param version_revisions: The version_revisions of this UpdatePackageVersionsStatusRequest.
        :type version_revisions: Dict[str, str]
        """

        self._version_revisions = version_revisions

    @property
    def expected_status(self):
        """Gets the expected_status of this UpdatePackageVersionsStatusRequest.

         The package version’s expected status before it is updated. If <code>expectedStatus</code> is provided, the package version's status is updated only if its status at the time <code>UpdatePackageVersionsStatus</code> is called matches <code>expectedStatus</code>. 

        :return: The expected_status of this UpdatePackageVersionsStatusRequest.
        :rtype: str
        """
        return self._expected_status

    @expected_status.setter
    def expected_status(self, expected_status):
        """Sets the expected_status of this UpdatePackageVersionsStatusRequest.

         The package version’s expected status before it is updated. If <code>expectedStatus</code> is provided, the package version's status is updated only if its status at the time <code>UpdatePackageVersionsStatus</code> is called matches <code>expectedStatus</code>. 

        :param expected_status: The expected_status of this UpdatePackageVersionsStatusRequest.
        :type expected_status: str
        """
        allowed_values = ["Published", "Unfinished", "Unlisted", "Archived", "Disposed", "Deleted"]  # noqa: E501
        if expected_status not in allowed_values:
            raise ValueError(
                "Invalid value for `expected_status` ({0}), must be one of {1}"
                .format(expected_status, allowed_values)
            )

        self._expected_status = expected_status

    @property
    def target_status(self):
        """Gets the target_status of this UpdatePackageVersionsStatusRequest.

         The status you want to change the package version status to. 

        :return: The target_status of this UpdatePackageVersionsStatusRequest.
        :rtype: str
        """
        return self._target_status

    @target_status.setter
    def target_status(self, target_status):
        """Sets the target_status of this UpdatePackageVersionsStatusRequest.

         The status you want to change the package version status to. 

        :param target_status: The target_status of this UpdatePackageVersionsStatusRequest.
        :type target_status: str
        """
        allowed_values = ["Published", "Unfinished", "Unlisted", "Archived", "Disposed", "Deleted"]  # noqa: E501
        if target_status not in allowed_values:
            raise ValueError(
                "Invalid value for `target_status` ({0}), must be one of {1}"
                .format(target_status, allowed_values)
            )

        self._target_status = target_status
