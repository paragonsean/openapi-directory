# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyPackageVersionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, versions: List[str]=None, version_revisions: Dict[str, str]=None, allow_overwrite: bool=None, include_from_upstream: bool=None):
        """CopyPackageVersionsRequest - a model defined in OpenAPI

        :param versions: The versions of this CopyPackageVersionsRequest.
        :param version_revisions: The version_revisions of this CopyPackageVersionsRequest.
        :param allow_overwrite: The allow_overwrite of this CopyPackageVersionsRequest.
        :param include_from_upstream: The include_from_upstream of this CopyPackageVersionsRequest.
        """
        self.openapi_types = {
            'versions': List[str],
            'version_revisions': Dict[str, str],
            'allow_overwrite': bool,
            'include_from_upstream': bool
        }

        self.attribute_map = {
            'versions': 'versions',
            'version_revisions': 'versionRevisions',
            'allow_overwrite': 'allowOverwrite',
            'include_from_upstream': 'includeFromUpstream'
        }

        self._versions = versions
        self._version_revisions = version_revisions
        self._allow_overwrite = allow_overwrite
        self._include_from_upstream = include_from_upstream

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyPackageVersionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyPackageVersions_request of this CopyPackageVersionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def versions(self):
        """Gets the versions of this CopyPackageVersionsRequest.

        <p> The versions of the package to be copied. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>

        :return: The versions of this CopyPackageVersionsRequest.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this CopyPackageVersionsRequest.

        <p> The versions of the package to be copied. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>

        :param versions: The versions of this CopyPackageVersionsRequest.
        :type versions: List[str]
        """
        if versions is not None and len(versions) > 100:
            raise ValueError("Invalid value for `versions`, number of items must be less than or equal to `100`")

        self._versions = versions

    @property
    def version_revisions(self):
        """Gets the version_revisions of this CopyPackageVersionsRequest.

        <p> A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>

        :return: The version_revisions of this CopyPackageVersionsRequest.
        :rtype: Dict[str, str]
        """
        return self._version_revisions

    @version_revisions.setter
    def version_revisions(self, version_revisions):
        """Sets the version_revisions of this CopyPackageVersionsRequest.

        <p> A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>

        :param version_revisions: The version_revisions of this CopyPackageVersionsRequest.
        :type version_revisions: Dict[str, str]
        """

        self._version_revisions = version_revisions

    @property
    def allow_overwrite(self):
        """Gets the allow_overwrite of this CopyPackageVersionsRequest.

         Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code. 

        :return: The allow_overwrite of this CopyPackageVersionsRequest.
        :rtype: bool
        """
        return self._allow_overwrite

    @allow_overwrite.setter
    def allow_overwrite(self, allow_overwrite):
        """Sets the allow_overwrite of this CopyPackageVersionsRequest.

         Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code. 

        :param allow_overwrite: The allow_overwrite of this CopyPackageVersionsRequest.
        :type allow_overwrite: bool
        """

        self._allow_overwrite = allow_overwrite

    @property
    def include_from_upstream(self):
        """Gets the include_from_upstream of this CopyPackageVersionsRequest.

         Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html\">Working with upstream repositories</a>. 

        :return: The include_from_upstream of this CopyPackageVersionsRequest.
        :rtype: bool
        """
        return self._include_from_upstream

    @include_from_upstream.setter
    def include_from_upstream(self, include_from_upstream):
        """Sets the include_from_upstream of this CopyPackageVersionsRequest.

         Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href=\"https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html\">Working with upstream repositories</a>. 

        :param include_from_upstream: The include_from_upstream of this CopyPackageVersionsRequest.
        :type include_from_upstream: bool
        """

        self._include_from_upstream = include_from_upstream
