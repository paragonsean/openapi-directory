# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_connection_status import ExternalConnectionStatus
from openapi_server.models.package_format import PackageFormat
from openapi_server import util


class RepositoryExternalConnectionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_connection_name: str=None, package_format: PackageFormat=None, status: ExternalConnectionStatus=None):
        """RepositoryExternalConnectionInfo - a model defined in OpenAPI

        :param external_connection_name: The external_connection_name of this RepositoryExternalConnectionInfo.
        :param package_format: The package_format of this RepositoryExternalConnectionInfo.
        :param status: The status of this RepositoryExternalConnectionInfo.
        """
        self.openapi_types = {
            'external_connection_name': str,
            'package_format': PackageFormat,
            'status': ExternalConnectionStatus
        }

        self.attribute_map = {
            'external_connection_name': 'externalConnectionName',
            'package_format': 'packageFormat',
            'status': 'status'
        }

        self._external_connection_name = external_connection_name
        self._package_format = package_format
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryExternalConnectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryExternalConnectionInfo of this RepositoryExternalConnectionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_connection_name(self):
        """Gets the external_connection_name of this RepositoryExternalConnectionInfo.


        :return: The external_connection_name of this RepositoryExternalConnectionInfo.
        :rtype: str
        """
        return self._external_connection_name

    @external_connection_name.setter
    def external_connection_name(self, external_connection_name):
        """Sets the external_connection_name of this RepositoryExternalConnectionInfo.


        :param external_connection_name: The external_connection_name of this RepositoryExternalConnectionInfo.
        :type external_connection_name: str
        """

        self._external_connection_name = external_connection_name

    @property
    def package_format(self):
        """Gets the package_format of this RepositoryExternalConnectionInfo.


        :return: The package_format of this RepositoryExternalConnectionInfo.
        :rtype: PackageFormat
        """
        return self._package_format

    @package_format.setter
    def package_format(self, package_format):
        """Sets the package_format of this RepositoryExternalConnectionInfo.


        :param package_format: The package_format of this RepositoryExternalConnectionInfo.
        :type package_format: PackageFormat
        """

        self._package_format = package_format

    @property
    def status(self):
        """Gets the status of this RepositoryExternalConnectionInfo.


        :return: The status of this RepositoryExternalConnectionInfo.
        :rtype: ExternalConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepositoryExternalConnectionInfo.


        :param status: The status of this RepositoryExternalConnectionInfo.
        :type status: ExternalConnectionStatus
        """

        self._status = status
