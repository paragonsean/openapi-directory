# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpstreamRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None):
        """UpstreamRepository - a model defined in OpenAPI

        :param repository_name: The repository_name of this UpstreamRepository.
        """
        self.openapi_types = {
            'repository_name': str
        }

        self.attribute_map = {
            'repository_name': 'repositoryName'
        }

        self._repository_name = repository_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpstreamRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpstreamRepository of this UpstreamRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this UpstreamRepository.


        :return: The repository_name of this UpstreamRepository.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this UpstreamRepository.


        :param repository_name: The repository_name of this UpstreamRepository.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name
