# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutRepositoryPermissionsPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_revision: str=None, policy_document: str=None):
        """PutRepositoryPermissionsPolicyRequest - a model defined in OpenAPI

        :param policy_revision: The policy_revision of this PutRepositoryPermissionsPolicyRequest.
        :param policy_document: The policy_document of this PutRepositoryPermissionsPolicyRequest.
        """
        self.openapi_types = {
            'policy_revision': str,
            'policy_document': str
        }

        self.attribute_map = {
            'policy_revision': 'policyRevision',
            'policy_document': 'policyDocument'
        }

        self._policy_revision = policy_revision
        self._policy_document = policy_document

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRepositoryPermissionsPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRepositoryPermissionsPolicy_request of this PutRepositoryPermissionsPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_revision(self):
        """Gets the policy_revision of this PutRepositoryPermissionsPolicyRequest.

         Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. 

        :return: The policy_revision of this PutRepositoryPermissionsPolicyRequest.
        :rtype: str
        """
        return self._policy_revision

    @policy_revision.setter
    def policy_revision(self, policy_revision):
        """Sets the policy_revision of this PutRepositoryPermissionsPolicyRequest.

         Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. 

        :param policy_revision: The policy_revision of this PutRepositoryPermissionsPolicyRequest.
        :type policy_revision: str
        """
        if policy_revision is not None and len(policy_revision) > 100:
            raise ValueError("Invalid value for `policy_revision`, length must be less than or equal to `100`")
        if policy_revision is not None and len(policy_revision) < 1:
            raise ValueError("Invalid value for `policy_revision`, length must be greater than or equal to `1`")
        if policy_revision is not None and not re.search(r'\S+', policy_revision):
            raise ValueError("Invalid value for `policy_revision`, must be a follow pattern or equal to `/\S+/`")

        self._policy_revision = policy_revision

    @property
    def policy_document(self):
        """Gets the policy_document of this PutRepositoryPermissionsPolicyRequest.

         A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. 

        :return: The policy_document of this PutRepositoryPermissionsPolicyRequest.
        :rtype: str
        """
        return self._policy_document

    @policy_document.setter
    def policy_document(self, policy_document):
        """Sets the policy_document of this PutRepositoryPermissionsPolicyRequest.

         A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. 

        :param policy_document: The policy_document of this PutRepositoryPermissionsPolicyRequest.
        :type policy_document: str
        """
        if policy_document is None:
            raise ValueError("Invalid value for `policy_document`, must not be `None`")
        if policy_document is not None and len(policy_document) > 7168:
            raise ValueError("Invalid value for `policy_document`, length must be less than or equal to `7168`")
        if policy_document is not None and len(policy_document) < 1:
            raise ValueError("Invalid value for `policy_document`, length must be greater than or equal to `1`")
        if policy_document is not None and not re.search(r'[\P{C}\s]+', policy_document):
            raise ValueError("Invalid value for `policy_document`, must be a follow pattern or equal to `/[\P{C}\s]+/`")

        self._policy_document = policy_document
