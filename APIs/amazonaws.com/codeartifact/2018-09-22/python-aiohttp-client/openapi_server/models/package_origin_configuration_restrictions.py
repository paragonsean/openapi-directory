# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allow_publish import AllowPublish
from openapi_server.models.allow_upstream import AllowUpstream
from openapi_server import util


class PackageOriginConfigurationRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, publish: AllowPublish=None, upstream: AllowUpstream=None):
        """PackageOriginConfigurationRestrictions - a model defined in OpenAPI

        :param publish: The publish of this PackageOriginConfigurationRestrictions.
        :param upstream: The upstream of this PackageOriginConfigurationRestrictions.
        """
        self.openapi_types = {
            'publish': AllowPublish,
            'upstream': AllowUpstream
        }

        self.attribute_map = {
            'publish': 'publish',
            'upstream': 'upstream'
        }

        self._publish = publish
        self._upstream = upstream

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageOriginConfigurationRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageOriginConfiguration_restrictions of this PackageOriginConfigurationRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def publish(self):
        """Gets the publish of this PackageOriginConfigurationRestrictions.


        :return: The publish of this PackageOriginConfigurationRestrictions.
        :rtype: AllowPublish
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this PackageOriginConfigurationRestrictions.


        :param publish: The publish of this PackageOriginConfigurationRestrictions.
        :type publish: AllowPublish
        """
        if publish is None:
            raise ValueError("Invalid value for `publish`, must not be `None`")

        self._publish = publish

    @property
    def upstream(self):
        """Gets the upstream of this PackageOriginConfigurationRestrictions.


        :return: The upstream of this PackageOriginConfigurationRestrictions.
        :rtype: AllowUpstream
        """
        return self._upstream

    @upstream.setter
    def upstream(self, upstream):
        """Sets the upstream of this PackageOriginConfigurationRestrictions.


        :param upstream: The upstream of this PackageOriginConfigurationRestrictions.
        :type upstream: AllowUpstream
        """
        if upstream is None:
            raise ValueError("Invalid value for `upstream`, must not be `None`")

        self._upstream = upstream
