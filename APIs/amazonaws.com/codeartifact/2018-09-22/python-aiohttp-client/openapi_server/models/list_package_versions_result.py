# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.package_format import PackageFormat
from openapi_server import util


class ListPackageVersionsResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_display_version: str=None, format: PackageFormat=None, namespace: str=None, package: str=None, versions: List=None, next_token: str=None):
        """ListPackageVersionsResult - a model defined in OpenAPI

        :param default_display_version: The default_display_version of this ListPackageVersionsResult.
        :param format: The format of this ListPackageVersionsResult.
        :param namespace: The namespace of this ListPackageVersionsResult.
        :param package: The package of this ListPackageVersionsResult.
        :param versions: The versions of this ListPackageVersionsResult.
        :param next_token: The next_token of this ListPackageVersionsResult.
        """
        self.openapi_types = {
            'default_display_version': str,
            'format': PackageFormat,
            'namespace': str,
            'package': str,
            'versions': List,
            'next_token': str
        }

        self.attribute_map = {
            'default_display_version': 'defaultDisplayVersion',
            'format': 'format',
            'namespace': 'namespace',
            'package': 'package',
            'versions': 'versions',
            'next_token': 'nextToken'
        }

        self._default_display_version = default_display_version
        self._format = format
        self._namespace = namespace
        self._package = package
        self._versions = versions
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPackageVersionsResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPackageVersionsResult of this ListPackageVersionsResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_display_version(self):
        """Gets the default_display_version of this ListPackageVersionsResult.


        :return: The default_display_version of this ListPackageVersionsResult.
        :rtype: str
        """
        return self._default_display_version

    @default_display_version.setter
    def default_display_version(self, default_display_version):
        """Sets the default_display_version of this ListPackageVersionsResult.


        :param default_display_version: The default_display_version of this ListPackageVersionsResult.
        :type default_display_version: str
        """

        self._default_display_version = default_display_version

    @property
    def format(self):
        """Gets the format of this ListPackageVersionsResult.


        :return: The format of this ListPackageVersionsResult.
        :rtype: PackageFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ListPackageVersionsResult.


        :param format: The format of this ListPackageVersionsResult.
        :type format: PackageFormat
        """

        self._format = format

    @property
    def namespace(self):
        """Gets the namespace of this ListPackageVersionsResult.


        :return: The namespace of this ListPackageVersionsResult.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ListPackageVersionsResult.


        :param namespace: The namespace of this ListPackageVersionsResult.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def package(self):
        """Gets the package of this ListPackageVersionsResult.


        :return: The package of this ListPackageVersionsResult.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this ListPackageVersionsResult.


        :param package: The package of this ListPackageVersionsResult.
        :type package: str
        """

        self._package = package

    @property
    def versions(self):
        """Gets the versions of this ListPackageVersionsResult.


        :return: The versions of this ListPackageVersionsResult.
        :rtype: List
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this ListPackageVersionsResult.


        :param versions: The versions of this ListPackageVersionsResult.
        :type versions: List
        """

        self._versions = versions

    @property
    def next_token(self):
        """Gets the next_token of this ListPackageVersionsResult.


        :return: The next_token of this ListPackageVersionsResult.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPackageVersionsResult.


        :param next_token: The next_token of this ListPackageVersionsResult.
        :type next_token: str
        """

        self._next_token = next_token
