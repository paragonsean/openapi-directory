# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeletePackageVersionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, versions: List[str]=None, expected_status: str=None):
        """DeletePackageVersionsRequest - a model defined in OpenAPI

        :param versions: The versions of this DeletePackageVersionsRequest.
        :param expected_status: The expected_status of this DeletePackageVersionsRequest.
        """
        self.openapi_types = {
            'versions': List[str],
            'expected_status': str
        }

        self.attribute_map = {
            'versions': 'versions',
            'expected_status': 'expectedStatus'
        }

        self._versions = versions
        self._expected_status = expected_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePackageVersionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePackageVersions_request of this DeletePackageVersionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def versions(self):
        """Gets the versions of this DeletePackageVersionsRequest.

         An array of strings that specify the versions of the package to delete. 

        :return: The versions of this DeletePackageVersionsRequest.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DeletePackageVersionsRequest.

         An array of strings that specify the versions of the package to delete. 

        :param versions: The versions of this DeletePackageVersionsRequest.
        :type versions: List[str]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")
        if versions is not None and len(versions) > 100:
            raise ValueError("Invalid value for `versions`, number of items must be less than or equal to `100`")

        self._versions = versions

    @property
    def expected_status(self):
        """Gets the expected_status of this DeletePackageVersionsRequest.

         The expected status of the package version to delete. 

        :return: The expected_status of this DeletePackageVersionsRequest.
        :rtype: str
        """
        return self._expected_status

    @expected_status.setter
    def expected_status(self, expected_status):
        """Sets the expected_status of this DeletePackageVersionsRequest.

         The expected status of the package version to delete. 

        :param expected_status: The expected_status of this DeletePackageVersionsRequest.
        :type expected_status: str
        """
        allowed_values = ["Published", "Unfinished", "Unlisted", "Archived", "Disposed", "Deleted"]  # noqa: E501
        if expected_status not in allowed_values:
            raise ValueError(
                "Invalid value for `expected_status` ({0}), must be one of {1}"
                .format(expected_status, allowed_values)
            )

        self._expected_status = expected_status
