# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_external_connection_result_repository import AssociateExternalConnectionResultRepository
from openapi_server import util


class AssociateExternalConnectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository: AssociateExternalConnectionResultRepository=None):
        """AssociateExternalConnectionResult - a model defined in OpenAPI

        :param repository: The repository of this AssociateExternalConnectionResult.
        """
        self.openapi_types = {
            'repository': AssociateExternalConnectionResultRepository
        }

        self.attribute_map = {
            'repository': 'repository'
        }

        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateExternalConnectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateExternalConnectionResult of this AssociateExternalConnectionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository(self):
        """Gets the repository of this AssociateExternalConnectionResult.


        :return: The repository of this AssociateExternalConnectionResult.
        :rtype: AssociateExternalConnectionResultRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this AssociateExternalConnectionResult.


        :param repository: The repository of this AssociateExternalConnectionResult.
        :type repository: AssociateExternalConnectionResultRepository
        """

        self._repository = repository
