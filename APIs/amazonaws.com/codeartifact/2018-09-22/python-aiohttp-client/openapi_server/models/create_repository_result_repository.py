# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRepositoryResultRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, administrator_account: str=None, domain_name: str=None, domain_owner: str=None, arn: str=None, description: str=None, upstreams: List=None, external_connections: List=None, created_time: datetime=None):
        """CreateRepositoryResultRepository - a model defined in OpenAPI

        :param name: The name of this CreateRepositoryResultRepository.
        :param administrator_account: The administrator_account of this CreateRepositoryResultRepository.
        :param domain_name: The domain_name of this CreateRepositoryResultRepository.
        :param domain_owner: The domain_owner of this CreateRepositoryResultRepository.
        :param arn: The arn of this CreateRepositoryResultRepository.
        :param description: The description of this CreateRepositoryResultRepository.
        :param upstreams: The upstreams of this CreateRepositoryResultRepository.
        :param external_connections: The external_connections of this CreateRepositoryResultRepository.
        :param created_time: The created_time of this CreateRepositoryResultRepository.
        """
        self.openapi_types = {
            'name': str,
            'administrator_account': str,
            'domain_name': str,
            'domain_owner': str,
            'arn': str,
            'description': str,
            'upstreams': List,
            'external_connections': List,
            'created_time': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'administrator_account': 'administratorAccount',
            'domain_name': 'domainName',
            'domain_owner': 'domainOwner',
            'arn': 'arn',
            'description': 'description',
            'upstreams': 'upstreams',
            'external_connections': 'externalConnections',
            'created_time': 'createdTime'
        }

        self._name = name
        self._administrator_account = administrator_account
        self._domain_name = domain_name
        self._domain_owner = domain_owner
        self._arn = arn
        self._description = description
        self._upstreams = upstreams
        self._external_connections = external_connections
        self._created_time = created_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRepositoryResultRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRepositoryResult_repository of this CreateRepositoryResultRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRepositoryResultRepository.


        :return: The name of this CreateRepositoryResultRepository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRepositoryResultRepository.


        :param name: The name of this CreateRepositoryResultRepository.
        :type name: str
        """

        self._name = name

    @property
    def administrator_account(self):
        """Gets the administrator_account of this CreateRepositoryResultRepository.


        :return: The administrator_account of this CreateRepositoryResultRepository.
        :rtype: str
        """
        return self._administrator_account

    @administrator_account.setter
    def administrator_account(self, administrator_account):
        """Sets the administrator_account of this CreateRepositoryResultRepository.


        :param administrator_account: The administrator_account of this CreateRepositoryResultRepository.
        :type administrator_account: str
        """

        self._administrator_account = administrator_account

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateRepositoryResultRepository.


        :return: The domain_name of this CreateRepositoryResultRepository.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateRepositoryResultRepository.


        :param domain_name: The domain_name of this CreateRepositoryResultRepository.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def domain_owner(self):
        """Gets the domain_owner of this CreateRepositoryResultRepository.


        :return: The domain_owner of this CreateRepositoryResultRepository.
        :rtype: str
        """
        return self._domain_owner

    @domain_owner.setter
    def domain_owner(self, domain_owner):
        """Sets the domain_owner of this CreateRepositoryResultRepository.


        :param domain_owner: The domain_owner of this CreateRepositoryResultRepository.
        :type domain_owner: str
        """

        self._domain_owner = domain_owner

    @property
    def arn(self):
        """Gets the arn of this CreateRepositoryResultRepository.


        :return: The arn of this CreateRepositoryResultRepository.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateRepositoryResultRepository.


        :param arn: The arn of this CreateRepositoryResultRepository.
        :type arn: str
        """

        self._arn = arn

    @property
    def description(self):
        """Gets the description of this CreateRepositoryResultRepository.


        :return: The description of this CreateRepositoryResultRepository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRepositoryResultRepository.


        :param description: The description of this CreateRepositoryResultRepository.
        :type description: str
        """

        self._description = description

    @property
    def upstreams(self):
        """Gets the upstreams of this CreateRepositoryResultRepository.


        :return: The upstreams of this CreateRepositoryResultRepository.
        :rtype: List
        """
        return self._upstreams

    @upstreams.setter
    def upstreams(self, upstreams):
        """Sets the upstreams of this CreateRepositoryResultRepository.


        :param upstreams: The upstreams of this CreateRepositoryResultRepository.
        :type upstreams: List
        """

        self._upstreams = upstreams

    @property
    def external_connections(self):
        """Gets the external_connections of this CreateRepositoryResultRepository.


        :return: The external_connections of this CreateRepositoryResultRepository.
        :rtype: List
        """
        return self._external_connections

    @external_connections.setter
    def external_connections(self, external_connections):
        """Sets the external_connections of this CreateRepositoryResultRepository.


        :param external_connections: The external_connections of this CreateRepositoryResultRepository.
        :type external_connections: List
        """

        self._external_connections = external_connections

    @property
    def created_time(self):
        """Gets the created_time of this CreateRepositoryResultRepository.


        :return: The created_time of this CreateRepositoryResultRepository.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CreateRepositoryResultRepository.


        :param created_time: The created_time of this CreateRepositoryResultRepository.
        :type created_time: datetime
        """

        self._created_time = created_time
