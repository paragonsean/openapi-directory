# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_key: str=None, tags: List[Tag]=None):
        """CreateDomainRequest - a model defined in OpenAPI

        :param encryption_key: The encryption_key of this CreateDomainRequest.
        :param tags: The tags of this CreateDomainRequest.
        """
        self.openapi_types = {
            'encryption_key': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'encryption_key': 'encryptionKey',
            'tags': 'tags'
        }

        self._encryption_key = encryption_key
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDomain_request of this CreateDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_key(self):
        """Gets the encryption_key of this CreateDomainRequest.

        <p> The encryption key for the domain. This is used to encrypt content stored in a domain. An encryption key can be a key ID, a key Amazon Resource Name (ARN), a key alias, or a key alias ARN. To specify an <code>encryptionKey</code>, your IAM role must have <code>kms:DescribeKey</code> and <code>kms:CreateGrant</code> permissions on the encryption key that is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax\">DescribeKey</a> in the <i>Key Management Service API Reference</i> and <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html\">Key Management Service API Permissions Reference</a> in the <i>Key Management Service Developer Guide</i>. </p> <important> <p> CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric CMK with your domain. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using symmetric and asymmetric keys</a> in the <i>Key Management Service Developer Guide</i>. </p> </important>

        :return: The encryption_key of this CreateDomainRequest.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this CreateDomainRequest.

        <p> The encryption key for the domain. This is used to encrypt content stored in a domain. An encryption key can be a key ID, a key Amazon Resource Name (ARN), a key alias, or a key alias ARN. To specify an <code>encryptionKey</code>, your IAM role must have <code>kms:DescribeKey</code> and <code>kms:CreateGrant</code> permissions on the encryption key that is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax\">DescribeKey</a> in the <i>Key Management Service API Reference</i> and <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html\">Key Management Service API Permissions Reference</a> in the <i>Key Management Service Developer Guide</i>. </p> <important> <p> CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric CMK with your domain. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using symmetric and asymmetric keys</a> in the <i>Key Management Service Developer Guide</i>. </p> </important>

        :param encryption_key: The encryption_key of this CreateDomainRequest.
        :type encryption_key: str
        """
        if encryption_key is not None and len(encryption_key) > 1011:
            raise ValueError("Invalid value for `encryption_key`, length must be less than or equal to `1011`")
        if encryption_key is not None and len(encryption_key) < 1:
            raise ValueError("Invalid value for `encryption_key`, length must be greater than or equal to `1`")
        if encryption_key is not None and not re.search(r'\S+', encryption_key):
            raise ValueError("Invalid value for `encryption_key`, must be a follow pattern or equal to `/\S+/`")

        self._encryption_key = encryption_key

    @property
    def tags(self):
        """Gets the tags of this CreateDomainRequest.

        One or more tag key-value pairs for the domain.

        :return: The tags of this CreateDomainRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDomainRequest.

        One or more tag key-value pairs for the domain.

        :param tags: The tags of this CreateDomainRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
