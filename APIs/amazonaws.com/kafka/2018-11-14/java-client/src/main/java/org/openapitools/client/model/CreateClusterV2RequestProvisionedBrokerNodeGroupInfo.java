/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BrokerAZDistribution;
import org.openapitools.client.model.CreateClusterRequestBrokerNodeGroupInfoConnectivityInfo;
import org.openapitools.client.model.CreateClusterRequestBrokerNodeGroupInfoStorageInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateClusterV2RequestProvisionedBrokerNodeGroupInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateClusterV2RequestProvisionedBrokerNodeGroupInfo {
  public static final String SERIALIZED_NAME_BROKER_A_Z_DISTRIBUTION = "BrokerAZDistribution";
  @SerializedName(SERIALIZED_NAME_BROKER_A_Z_DISTRIBUTION)
  private BrokerAZDistribution brokerAZDistribution;

  public static final String SERIALIZED_NAME_CLIENT_SUBNETS = "ClientSubnets";
  @SerializedName(SERIALIZED_NAME_CLIENT_SUBNETS)
  private List clientSubnets;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public static final String SERIALIZED_NAME_STORAGE_INFO = "StorageInfo";
  @SerializedName(SERIALIZED_NAME_STORAGE_INFO)
  private CreateClusterRequestBrokerNodeGroupInfoStorageInfo storageInfo;

  public static final String SERIALIZED_NAME_CONNECTIVITY_INFO = "ConnectivityInfo";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY_INFO)
  private CreateClusterRequestBrokerNodeGroupInfoConnectivityInfo connectivityInfo;

  public static final String SERIALIZED_NAME_ZONE_IDS = "ZoneIds";
  @SerializedName(SERIALIZED_NAME_ZONE_IDS)
  private List zoneIds;

  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo() {
  }

  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo brokerAZDistribution(BrokerAZDistribution brokerAZDistribution) {
    this.brokerAZDistribution = brokerAZDistribution;
    return this;
  }

  /**
   * Get brokerAZDistribution
   * @return brokerAZDistribution
   */
  @javax.annotation.Nullable
  public BrokerAZDistribution getBrokerAZDistribution() {
    return brokerAZDistribution;
  }

  public void setBrokerAZDistribution(BrokerAZDistribution brokerAZDistribution) {
    this.brokerAZDistribution = brokerAZDistribution;
  }


  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo clientSubnets(List clientSubnets) {
    this.clientSubnets = clientSubnets;
    return this;
  }

  /**
   * Get clientSubnets
   * @return clientSubnets
   */
  @javax.annotation.Nonnull
  public List getClientSubnets() {
    return clientSubnets;
  }

  public void setClientSubnets(List clientSubnets) {
    this.clientSubnets = clientSubnets;
  }


  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }


  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo storageInfo(CreateClusterRequestBrokerNodeGroupInfoStorageInfo storageInfo) {
    this.storageInfo = storageInfo;
    return this;
  }

  /**
   * Get storageInfo
   * @return storageInfo
   */
  @javax.annotation.Nullable
  public CreateClusterRequestBrokerNodeGroupInfoStorageInfo getStorageInfo() {
    return storageInfo;
  }

  public void setStorageInfo(CreateClusterRequestBrokerNodeGroupInfoStorageInfo storageInfo) {
    this.storageInfo = storageInfo;
  }


  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo connectivityInfo(CreateClusterRequestBrokerNodeGroupInfoConnectivityInfo connectivityInfo) {
    this.connectivityInfo = connectivityInfo;
    return this;
  }

  /**
   * Get connectivityInfo
   * @return connectivityInfo
   */
  @javax.annotation.Nullable
  public CreateClusterRequestBrokerNodeGroupInfoConnectivityInfo getConnectivityInfo() {
    return connectivityInfo;
  }

  public void setConnectivityInfo(CreateClusterRequestBrokerNodeGroupInfoConnectivityInfo connectivityInfo) {
    this.connectivityInfo = connectivityInfo;
  }


  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo zoneIds(List zoneIds) {
    this.zoneIds = zoneIds;
    return this;
  }

  /**
   * Get zoneIds
   * @return zoneIds
   */
  @javax.annotation.Nullable
  public List getZoneIds() {
    return zoneIds;
  }

  public void setZoneIds(List zoneIds) {
    this.zoneIds = zoneIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClusterV2RequestProvisionedBrokerNodeGroupInfo createClusterV2RequestProvisionedBrokerNodeGroupInfo = (CreateClusterV2RequestProvisionedBrokerNodeGroupInfo) o;
    return Objects.equals(this.brokerAZDistribution, createClusterV2RequestProvisionedBrokerNodeGroupInfo.brokerAZDistribution) &&
        Objects.equals(this.clientSubnets, createClusterV2RequestProvisionedBrokerNodeGroupInfo.clientSubnets) &&
        Objects.equals(this.instanceType, createClusterV2RequestProvisionedBrokerNodeGroupInfo.instanceType) &&
        Objects.equals(this.securityGroups, createClusterV2RequestProvisionedBrokerNodeGroupInfo.securityGroups) &&
        Objects.equals(this.storageInfo, createClusterV2RequestProvisionedBrokerNodeGroupInfo.storageInfo) &&
        Objects.equals(this.connectivityInfo, createClusterV2RequestProvisionedBrokerNodeGroupInfo.connectivityInfo) &&
        Objects.equals(this.zoneIds, createClusterV2RequestProvisionedBrokerNodeGroupInfo.zoneIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brokerAZDistribution, clientSubnets, instanceType, securityGroups, storageInfo, connectivityInfo, zoneIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClusterV2RequestProvisionedBrokerNodeGroupInfo {\n");
    sb.append("    brokerAZDistribution: ").append(toIndentedString(brokerAZDistribution)).append("\n");
    sb.append("    clientSubnets: ").append(toIndentedString(clientSubnets)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    storageInfo: ").append(toIndentedString(storageInfo)).append("\n");
    sb.append("    connectivityInfo: ").append(toIndentedString(connectivityInfo)).append("\n");
    sb.append("    zoneIds: ").append(toIndentedString(zoneIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BrokerAZDistribution");
    openapiFields.add("ClientSubnets");
    openapiFields.add("InstanceType");
    openapiFields.add("SecurityGroups");
    openapiFields.add("StorageInfo");
    openapiFields.add("ConnectivityInfo");
    openapiFields.add("ZoneIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClientSubnets");
    openapiRequiredFields.add("InstanceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateClusterV2RequestProvisionedBrokerNodeGroupInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClusterV2RequestProvisionedBrokerNodeGroupInfo is not found in the empty JSON string", CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClusterV2RequestProvisionedBrokerNodeGroupInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BrokerAZDistribution`
      if (jsonObj.get("BrokerAZDistribution") != null && !jsonObj.get("BrokerAZDistribution").isJsonNull()) {
        BrokerAZDistribution.validateJsonElement(jsonObj.get("BrokerAZDistribution"));
      }
      // validate the required field `ClientSubnets`
      List.validateJsonElement(jsonObj.get("ClientSubnets"));
      // validate the required field `InstanceType`
      String.validateJsonElement(jsonObj.get("InstanceType"));
      // validate the optional field `SecurityGroups`
      if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroups"));
      }
      // validate the optional field `StorageInfo`
      if (jsonObj.get("StorageInfo") != null && !jsonObj.get("StorageInfo").isJsonNull()) {
        CreateClusterRequestBrokerNodeGroupInfoStorageInfo.validateJsonElement(jsonObj.get("StorageInfo"));
      }
      // validate the optional field `ConnectivityInfo`
      if (jsonObj.get("ConnectivityInfo") != null && !jsonObj.get("ConnectivityInfo").isJsonNull()) {
        CreateClusterRequestBrokerNodeGroupInfoConnectivityInfo.validateJsonElement(jsonObj.get("ConnectivityInfo"));
      }
      // validate the optional field `ZoneIds`
      if (jsonObj.get("ZoneIds") != null && !jsonObj.get("ZoneIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ZoneIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClusterV2RequestProvisionedBrokerNodeGroupInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClusterV2RequestProvisionedBrokerNodeGroupInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClusterV2RequestProvisionedBrokerNodeGroupInfo>() {
           @Override
           public void write(JsonWriter out, CreateClusterV2RequestProvisionedBrokerNodeGroupInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateClusterV2RequestProvisionedBrokerNodeGroupInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateClusterV2RequestProvisionedBrokerNodeGroupInfo
   * @throws IOException if the JSON string is invalid with respect to CreateClusterV2RequestProvisionedBrokerNodeGroupInfo
   */
  public static CreateClusterV2RequestProvisionedBrokerNodeGroupInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.class);
  }

  /**
   * Convert an instance of CreateClusterV2RequestProvisionedBrokerNodeGroupInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

