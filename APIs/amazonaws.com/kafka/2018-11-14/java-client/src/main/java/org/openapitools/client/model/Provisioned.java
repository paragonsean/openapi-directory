/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateClusterV2RequestProvisionedBrokerNodeGroupInfo;
import org.openapitools.client.model.CreateClusterV2RequestProvisionedClientAuthentication;
import org.openapitools.client.model.CreateClusterV2RequestProvisionedEncryptionInfo;
import org.openapitools.client.model.CreateClusterV2RequestProvisionedLoggingInfo;
import org.openapitools.client.model.CreateClusterV2RequestProvisionedOpenMonitoring;
import org.openapitools.client.model.EnhancedMonitoring;
import org.openapitools.client.model.ProvisionedCurrentBrokerSoftwareInfo;
import org.openapitools.client.model.StorageMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *              &lt;p&gt;Provisioned cluster.&lt;/p&gt;          
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Provisioned {
  public static final String SERIALIZED_NAME_BROKER_NODE_GROUP_INFO = "BrokerNodeGroupInfo";
  @SerializedName(SERIALIZED_NAME_BROKER_NODE_GROUP_INFO)
  private CreateClusterV2RequestProvisionedBrokerNodeGroupInfo brokerNodeGroupInfo;

  public static final String SERIALIZED_NAME_CURRENT_BROKER_SOFTWARE_INFO = "CurrentBrokerSoftwareInfo";
  @SerializedName(SERIALIZED_NAME_CURRENT_BROKER_SOFTWARE_INFO)
  private ProvisionedCurrentBrokerSoftwareInfo currentBrokerSoftwareInfo;

  public static final String SERIALIZED_NAME_CLIENT_AUTHENTICATION = "ClientAuthentication";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTHENTICATION)
  private CreateClusterV2RequestProvisionedClientAuthentication clientAuthentication;

  public static final String SERIALIZED_NAME_ENCRYPTION_INFO = "EncryptionInfo";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_INFO)
  private CreateClusterV2RequestProvisionedEncryptionInfo encryptionInfo;

  public static final String SERIALIZED_NAME_ENHANCED_MONITORING = "EnhancedMonitoring";
  @SerializedName(SERIALIZED_NAME_ENHANCED_MONITORING)
  private EnhancedMonitoring enhancedMonitoring;

  public static final String SERIALIZED_NAME_OPEN_MONITORING = "OpenMonitoring";
  @SerializedName(SERIALIZED_NAME_OPEN_MONITORING)
  private CreateClusterV2RequestProvisionedOpenMonitoring openMonitoring;

  public static final String SERIALIZED_NAME_LOGGING_INFO = "LoggingInfo";
  @SerializedName(SERIALIZED_NAME_LOGGING_INFO)
  private CreateClusterV2RequestProvisionedLoggingInfo loggingInfo;

  public static final String SERIALIZED_NAME_NUMBER_OF_BROKER_NODES = "NumberOfBrokerNodes";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_BROKER_NODES)
  private Integer numberOfBrokerNodes;

  public static final String SERIALIZED_NAME_ZOOKEEPER_CONNECT_STRING = "ZookeeperConnectString";
  @SerializedName(SERIALIZED_NAME_ZOOKEEPER_CONNECT_STRING)
  private String zookeeperConnectString;

  public static final String SERIALIZED_NAME_ZOOKEEPER_CONNECT_STRING_TLS = "ZookeeperConnectStringTls";
  @SerializedName(SERIALIZED_NAME_ZOOKEEPER_CONNECT_STRING_TLS)
  private String zookeeperConnectStringTls;

  public static final String SERIALIZED_NAME_STORAGE_MODE = "StorageMode";
  @SerializedName(SERIALIZED_NAME_STORAGE_MODE)
  private StorageMode storageMode;

  public Provisioned() {
  }

  public Provisioned brokerNodeGroupInfo(CreateClusterV2RequestProvisionedBrokerNodeGroupInfo brokerNodeGroupInfo) {
    this.brokerNodeGroupInfo = brokerNodeGroupInfo;
    return this;
  }

  /**
   * Get brokerNodeGroupInfo
   * @return brokerNodeGroupInfo
   */
  @javax.annotation.Nonnull
  public CreateClusterV2RequestProvisionedBrokerNodeGroupInfo getBrokerNodeGroupInfo() {
    return brokerNodeGroupInfo;
  }

  public void setBrokerNodeGroupInfo(CreateClusterV2RequestProvisionedBrokerNodeGroupInfo brokerNodeGroupInfo) {
    this.brokerNodeGroupInfo = brokerNodeGroupInfo;
  }


  public Provisioned currentBrokerSoftwareInfo(ProvisionedCurrentBrokerSoftwareInfo currentBrokerSoftwareInfo) {
    this.currentBrokerSoftwareInfo = currentBrokerSoftwareInfo;
    return this;
  }

  /**
   * Get currentBrokerSoftwareInfo
   * @return currentBrokerSoftwareInfo
   */
  @javax.annotation.Nullable
  public ProvisionedCurrentBrokerSoftwareInfo getCurrentBrokerSoftwareInfo() {
    return currentBrokerSoftwareInfo;
  }

  public void setCurrentBrokerSoftwareInfo(ProvisionedCurrentBrokerSoftwareInfo currentBrokerSoftwareInfo) {
    this.currentBrokerSoftwareInfo = currentBrokerSoftwareInfo;
  }


  public Provisioned clientAuthentication(CreateClusterV2RequestProvisionedClientAuthentication clientAuthentication) {
    this.clientAuthentication = clientAuthentication;
    return this;
  }

  /**
   * Get clientAuthentication
   * @return clientAuthentication
   */
  @javax.annotation.Nullable
  public CreateClusterV2RequestProvisionedClientAuthentication getClientAuthentication() {
    return clientAuthentication;
  }

  public void setClientAuthentication(CreateClusterV2RequestProvisionedClientAuthentication clientAuthentication) {
    this.clientAuthentication = clientAuthentication;
  }


  public Provisioned encryptionInfo(CreateClusterV2RequestProvisionedEncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
    return this;
  }

  /**
   * Get encryptionInfo
   * @return encryptionInfo
   */
  @javax.annotation.Nullable
  public CreateClusterV2RequestProvisionedEncryptionInfo getEncryptionInfo() {
    return encryptionInfo;
  }

  public void setEncryptionInfo(CreateClusterV2RequestProvisionedEncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
  }


  public Provisioned enhancedMonitoring(EnhancedMonitoring enhancedMonitoring) {
    this.enhancedMonitoring = enhancedMonitoring;
    return this;
  }

  /**
   * Get enhancedMonitoring
   * @return enhancedMonitoring
   */
  @javax.annotation.Nullable
  public EnhancedMonitoring getEnhancedMonitoring() {
    return enhancedMonitoring;
  }

  public void setEnhancedMonitoring(EnhancedMonitoring enhancedMonitoring) {
    this.enhancedMonitoring = enhancedMonitoring;
  }


  public Provisioned openMonitoring(CreateClusterV2RequestProvisionedOpenMonitoring openMonitoring) {
    this.openMonitoring = openMonitoring;
    return this;
  }

  /**
   * Get openMonitoring
   * @return openMonitoring
   */
  @javax.annotation.Nullable
  public CreateClusterV2RequestProvisionedOpenMonitoring getOpenMonitoring() {
    return openMonitoring;
  }

  public void setOpenMonitoring(CreateClusterV2RequestProvisionedOpenMonitoring openMonitoring) {
    this.openMonitoring = openMonitoring;
  }


  public Provisioned loggingInfo(CreateClusterV2RequestProvisionedLoggingInfo loggingInfo) {
    this.loggingInfo = loggingInfo;
    return this;
  }

  /**
   * Get loggingInfo
   * @return loggingInfo
   */
  @javax.annotation.Nullable
  public CreateClusterV2RequestProvisionedLoggingInfo getLoggingInfo() {
    return loggingInfo;
  }

  public void setLoggingInfo(CreateClusterV2RequestProvisionedLoggingInfo loggingInfo) {
    this.loggingInfo = loggingInfo;
  }


  public Provisioned numberOfBrokerNodes(Integer numberOfBrokerNodes) {
    this.numberOfBrokerNodes = numberOfBrokerNodes;
    return this;
  }

  /**
   * Get numberOfBrokerNodes
   * @return numberOfBrokerNodes
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfBrokerNodes() {
    return numberOfBrokerNodes;
  }

  public void setNumberOfBrokerNodes(Integer numberOfBrokerNodes) {
    this.numberOfBrokerNodes = numberOfBrokerNodes;
  }


  public Provisioned zookeeperConnectString(String zookeeperConnectString) {
    this.zookeeperConnectString = zookeeperConnectString;
    return this;
  }

  /**
   * Get zookeeperConnectString
   * @return zookeeperConnectString
   */
  @javax.annotation.Nullable
  public String getZookeeperConnectString() {
    return zookeeperConnectString;
  }

  public void setZookeeperConnectString(String zookeeperConnectString) {
    this.zookeeperConnectString = zookeeperConnectString;
  }


  public Provisioned zookeeperConnectStringTls(String zookeeperConnectStringTls) {
    this.zookeeperConnectStringTls = zookeeperConnectStringTls;
    return this;
  }

  /**
   * Get zookeeperConnectStringTls
   * @return zookeeperConnectStringTls
   */
  @javax.annotation.Nullable
  public String getZookeeperConnectStringTls() {
    return zookeeperConnectStringTls;
  }

  public void setZookeeperConnectStringTls(String zookeeperConnectStringTls) {
    this.zookeeperConnectStringTls = zookeeperConnectStringTls;
  }


  public Provisioned storageMode(StorageMode storageMode) {
    this.storageMode = storageMode;
    return this;
  }

  /**
   * Get storageMode
   * @return storageMode
   */
  @javax.annotation.Nullable
  public StorageMode getStorageMode() {
    return storageMode;
  }

  public void setStorageMode(StorageMode storageMode) {
    this.storageMode = storageMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Provisioned provisioned = (Provisioned) o;
    return Objects.equals(this.brokerNodeGroupInfo, provisioned.brokerNodeGroupInfo) &&
        Objects.equals(this.currentBrokerSoftwareInfo, provisioned.currentBrokerSoftwareInfo) &&
        Objects.equals(this.clientAuthentication, provisioned.clientAuthentication) &&
        Objects.equals(this.encryptionInfo, provisioned.encryptionInfo) &&
        Objects.equals(this.enhancedMonitoring, provisioned.enhancedMonitoring) &&
        Objects.equals(this.openMonitoring, provisioned.openMonitoring) &&
        Objects.equals(this.loggingInfo, provisioned.loggingInfo) &&
        Objects.equals(this.numberOfBrokerNodes, provisioned.numberOfBrokerNodes) &&
        Objects.equals(this.zookeeperConnectString, provisioned.zookeeperConnectString) &&
        Objects.equals(this.zookeeperConnectStringTls, provisioned.zookeeperConnectStringTls) &&
        Objects.equals(this.storageMode, provisioned.storageMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brokerNodeGroupInfo, currentBrokerSoftwareInfo, clientAuthentication, encryptionInfo, enhancedMonitoring, openMonitoring, loggingInfo, numberOfBrokerNodes, zookeeperConnectString, zookeeperConnectStringTls, storageMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Provisioned {\n");
    sb.append("    brokerNodeGroupInfo: ").append(toIndentedString(brokerNodeGroupInfo)).append("\n");
    sb.append("    currentBrokerSoftwareInfo: ").append(toIndentedString(currentBrokerSoftwareInfo)).append("\n");
    sb.append("    clientAuthentication: ").append(toIndentedString(clientAuthentication)).append("\n");
    sb.append("    encryptionInfo: ").append(toIndentedString(encryptionInfo)).append("\n");
    sb.append("    enhancedMonitoring: ").append(toIndentedString(enhancedMonitoring)).append("\n");
    sb.append("    openMonitoring: ").append(toIndentedString(openMonitoring)).append("\n");
    sb.append("    loggingInfo: ").append(toIndentedString(loggingInfo)).append("\n");
    sb.append("    numberOfBrokerNodes: ").append(toIndentedString(numberOfBrokerNodes)).append("\n");
    sb.append("    zookeeperConnectString: ").append(toIndentedString(zookeeperConnectString)).append("\n");
    sb.append("    zookeeperConnectStringTls: ").append(toIndentedString(zookeeperConnectStringTls)).append("\n");
    sb.append("    storageMode: ").append(toIndentedString(storageMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BrokerNodeGroupInfo");
    openapiFields.add("CurrentBrokerSoftwareInfo");
    openapiFields.add("ClientAuthentication");
    openapiFields.add("EncryptionInfo");
    openapiFields.add("EnhancedMonitoring");
    openapiFields.add("OpenMonitoring");
    openapiFields.add("LoggingInfo");
    openapiFields.add("NumberOfBrokerNodes");
    openapiFields.add("ZookeeperConnectString");
    openapiFields.add("ZookeeperConnectStringTls");
    openapiFields.add("StorageMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BrokerNodeGroupInfo");
    openapiRequiredFields.add("NumberOfBrokerNodes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Provisioned
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Provisioned.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Provisioned is not found in the empty JSON string", Provisioned.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Provisioned.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Provisioned` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Provisioned.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BrokerNodeGroupInfo`
      CreateClusterV2RequestProvisionedBrokerNodeGroupInfo.validateJsonElement(jsonObj.get("BrokerNodeGroupInfo"));
      // validate the optional field `CurrentBrokerSoftwareInfo`
      if (jsonObj.get("CurrentBrokerSoftwareInfo") != null && !jsonObj.get("CurrentBrokerSoftwareInfo").isJsonNull()) {
        ProvisionedCurrentBrokerSoftwareInfo.validateJsonElement(jsonObj.get("CurrentBrokerSoftwareInfo"));
      }
      // validate the optional field `ClientAuthentication`
      if (jsonObj.get("ClientAuthentication") != null && !jsonObj.get("ClientAuthentication").isJsonNull()) {
        CreateClusterV2RequestProvisionedClientAuthentication.validateJsonElement(jsonObj.get("ClientAuthentication"));
      }
      // validate the optional field `EncryptionInfo`
      if (jsonObj.get("EncryptionInfo") != null && !jsonObj.get("EncryptionInfo").isJsonNull()) {
        CreateClusterV2RequestProvisionedEncryptionInfo.validateJsonElement(jsonObj.get("EncryptionInfo"));
      }
      // validate the optional field `EnhancedMonitoring`
      if (jsonObj.get("EnhancedMonitoring") != null && !jsonObj.get("EnhancedMonitoring").isJsonNull()) {
        EnhancedMonitoring.validateJsonElement(jsonObj.get("EnhancedMonitoring"));
      }
      // validate the optional field `OpenMonitoring`
      if (jsonObj.get("OpenMonitoring") != null && !jsonObj.get("OpenMonitoring").isJsonNull()) {
        CreateClusterV2RequestProvisionedOpenMonitoring.validateJsonElement(jsonObj.get("OpenMonitoring"));
      }
      // validate the optional field `LoggingInfo`
      if (jsonObj.get("LoggingInfo") != null && !jsonObj.get("LoggingInfo").isJsonNull()) {
        CreateClusterV2RequestProvisionedLoggingInfo.validateJsonElement(jsonObj.get("LoggingInfo"));
      }
      // validate the required field `NumberOfBrokerNodes`
      Integer.validateJsonElement(jsonObj.get("NumberOfBrokerNodes"));
      // validate the optional field `ZookeeperConnectString`
      if (jsonObj.get("ZookeeperConnectString") != null && !jsonObj.get("ZookeeperConnectString").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZookeeperConnectString"));
      }
      // validate the optional field `ZookeeperConnectStringTls`
      if (jsonObj.get("ZookeeperConnectStringTls") != null && !jsonObj.get("ZookeeperConnectStringTls").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZookeeperConnectStringTls"));
      }
      // validate the optional field `StorageMode`
      if (jsonObj.get("StorageMode") != null && !jsonObj.get("StorageMode").isJsonNull()) {
        StorageMode.validateJsonElement(jsonObj.get("StorageMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Provisioned.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Provisioned' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Provisioned> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Provisioned.class));

       return (TypeAdapter<T>) new TypeAdapter<Provisioned>() {
           @Override
           public void write(JsonWriter out, Provisioned value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Provisioned read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Provisioned given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Provisioned
   * @throws IOException if the JSON string is invalid with respect to Provisioned
   */
  public static Provisioned fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Provisioned.class);
  }

  /**
   * Convert an instance of Provisioned to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

