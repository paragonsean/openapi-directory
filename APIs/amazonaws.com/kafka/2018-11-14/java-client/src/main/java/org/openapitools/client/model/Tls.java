/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *              &lt;p&gt;Details for client authentication using TLS.&lt;/p&gt;          
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tls {
  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN_LIST = "CertificateAuthorityArnList";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN_LIST)
  private List certificateAuthorityArnList;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public Tls() {
  }

  public Tls certificateAuthorityArnList(List certificateAuthorityArnList) {
    this.certificateAuthorityArnList = certificateAuthorityArnList;
    return this;
  }

  /**
   * Get certificateAuthorityArnList
   * @return certificateAuthorityArnList
   */
  @javax.annotation.Nullable
  public List getCertificateAuthorityArnList() {
    return certificateAuthorityArnList;
  }

  public void setCertificateAuthorityArnList(List certificateAuthorityArnList) {
    this.certificateAuthorityArnList = certificateAuthorityArnList;
  }


  public Tls enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tls tls = (Tls) o;
    return Objects.equals(this.certificateAuthorityArnList, tls.certificateAuthorityArnList) &&
        Objects.equals(this.enabled, tls.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateAuthorityArnList, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tls {\n");
    sb.append("    certificateAuthorityArnList: ").append(toIndentedString(certificateAuthorityArnList)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateAuthorityArnList");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tls is not found in the empty JSON string", Tls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CertificateAuthorityArnList`
      if (jsonObj.get("CertificateAuthorityArnList") != null && !jsonObj.get("CertificateAuthorityArnList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CertificateAuthorityArnList"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tls.class));

       return (TypeAdapter<T>) new TypeAdapter<Tls>() {
           @Override
           public void write(JsonWriter out, Tls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tls
   * @throws IOException if the JSON string is invalid with respect to Tls
   */
  public static Tls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tls.class);
  }

  /**
   * Convert an instance of Tls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

