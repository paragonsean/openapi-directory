/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigurationState;
import org.openapitools.client.model.CreateConfigurationResponseLatestRevision;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeConfigurationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeConfigurationResponse {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KAFKA_VERSIONS = "KafkaVersions";
  @SerializedName(SERIALIZED_NAME_KAFKA_VERSIONS)
  private List kafkaVersions;

  public static final String SERIALIZED_NAME_LATEST_REVISION = "LatestRevision";
  @SerializedName(SERIALIZED_NAME_LATEST_REVISION)
  private CreateConfigurationResponseLatestRevision latestRevision;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ConfigurationState state;

  public DescribeConfigurationResponse() {
  }

  public DescribeConfigurationResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeConfigurationResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeConfigurationResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeConfigurationResponse kafkaVersions(List kafkaVersions) {
    this.kafkaVersions = kafkaVersions;
    return this;
  }

  /**
   * Get kafkaVersions
   * @return kafkaVersions
   */
  @javax.annotation.Nullable
  public List getKafkaVersions() {
    return kafkaVersions;
  }

  public void setKafkaVersions(List kafkaVersions) {
    this.kafkaVersions = kafkaVersions;
  }


  public DescribeConfigurationResponse latestRevision(CreateConfigurationResponseLatestRevision latestRevision) {
    this.latestRevision = latestRevision;
    return this;
  }

  /**
   * Get latestRevision
   * @return latestRevision
   */
  @javax.annotation.Nullable
  public CreateConfigurationResponseLatestRevision getLatestRevision() {
    return latestRevision;
  }

  public void setLatestRevision(CreateConfigurationResponseLatestRevision latestRevision) {
    this.latestRevision = latestRevision;
  }


  public DescribeConfigurationResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeConfigurationResponse state(ConfigurationState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ConfigurationState getState() {
    return state;
  }

  public void setState(ConfigurationState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeConfigurationResponse describeConfigurationResponse = (DescribeConfigurationResponse) o;
    return Objects.equals(this.arn, describeConfigurationResponse.arn) &&
        Objects.equals(this.creationTime, describeConfigurationResponse.creationTime) &&
        Objects.equals(this.description, describeConfigurationResponse.description) &&
        Objects.equals(this.kafkaVersions, describeConfigurationResponse.kafkaVersions) &&
        Objects.equals(this.latestRevision, describeConfigurationResponse.latestRevision) &&
        Objects.equals(this.name, describeConfigurationResponse.name) &&
        Objects.equals(this.state, describeConfigurationResponse.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, creationTime, description, kafkaVersions, latestRevision, name, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeConfigurationResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    kafkaVersions: ").append(toIndentedString(kafkaVersions)).append("\n");
    sb.append("    latestRevision: ").append(toIndentedString(latestRevision)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("CreationTime");
    openapiFields.add("Description");
    openapiFields.add("KafkaVersions");
    openapiFields.add("LatestRevision");
    openapiFields.add("Name");
    openapiFields.add("State");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeConfigurationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeConfigurationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeConfigurationResponse is not found in the empty JSON string", DescribeConfigurationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeConfigurationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeConfigurationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `KafkaVersions`
      if (jsonObj.get("KafkaVersions") != null && !jsonObj.get("KafkaVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KafkaVersions"));
      }
      // validate the optional field `LatestRevision`
      if (jsonObj.get("LatestRevision") != null && !jsonObj.get("LatestRevision").isJsonNull()) {
        CreateConfigurationResponseLatestRevision.validateJsonElement(jsonObj.get("LatestRevision"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        ConfigurationState.validateJsonElement(jsonObj.get("State"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeConfigurationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeConfigurationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeConfigurationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeConfigurationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeConfigurationResponse>() {
           @Override
           public void write(JsonWriter out, DescribeConfigurationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeConfigurationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeConfigurationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeConfigurationResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeConfigurationResponse
   */
  public static DescribeConfigurationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeConfigurationResponse.class);
  }

  /**
   * Convert an instance of DescribeConfigurationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

