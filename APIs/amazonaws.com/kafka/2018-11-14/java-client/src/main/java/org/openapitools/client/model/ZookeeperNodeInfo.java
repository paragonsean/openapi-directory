/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *              &lt;p&gt;Zookeeper node information.&lt;/p&gt;          
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZookeeperNodeInfo {
  public static final String SERIALIZED_NAME_ATTACHED_E_N_I_ID = "AttachedENIId";
  @SerializedName(SERIALIZED_NAME_ATTACHED_E_N_I_ID)
  private String attachedENIId;

  public static final String SERIALIZED_NAME_CLIENT_VPC_IP_ADDRESS = "ClientVpcIpAddress";
  @SerializedName(SERIALIZED_NAME_CLIENT_VPC_IP_ADDRESS)
  private String clientVpcIpAddress;

  public static final String SERIALIZED_NAME_ENDPOINTS = "Endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List endpoints;

  public static final String SERIALIZED_NAME_ZOOKEEPER_ID = "ZookeeperId";
  @SerializedName(SERIALIZED_NAME_ZOOKEEPER_ID)
  private Double zookeeperId;

  public static final String SERIALIZED_NAME_ZOOKEEPER_VERSION = "ZookeeperVersion";
  @SerializedName(SERIALIZED_NAME_ZOOKEEPER_VERSION)
  private String zookeeperVersion;

  public ZookeeperNodeInfo() {
  }

  public ZookeeperNodeInfo attachedENIId(String attachedENIId) {
    this.attachedENIId = attachedENIId;
    return this;
  }

  /**
   * Get attachedENIId
   * @return attachedENIId
   */
  @javax.annotation.Nullable
  public String getAttachedENIId() {
    return attachedENIId;
  }

  public void setAttachedENIId(String attachedENIId) {
    this.attachedENIId = attachedENIId;
  }


  public ZookeeperNodeInfo clientVpcIpAddress(String clientVpcIpAddress) {
    this.clientVpcIpAddress = clientVpcIpAddress;
    return this;
  }

  /**
   * Get clientVpcIpAddress
   * @return clientVpcIpAddress
   */
  @javax.annotation.Nullable
  public String getClientVpcIpAddress() {
    return clientVpcIpAddress;
  }

  public void setClientVpcIpAddress(String clientVpcIpAddress) {
    this.clientVpcIpAddress = clientVpcIpAddress;
  }


  public ZookeeperNodeInfo endpoints(List endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * Get endpoints
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List endpoints) {
    this.endpoints = endpoints;
  }


  public ZookeeperNodeInfo zookeeperId(Double zookeeperId) {
    this.zookeeperId = zookeeperId;
    return this;
  }

  /**
   * Get zookeeperId
   * @return zookeeperId
   */
  @javax.annotation.Nullable
  public Double getZookeeperId() {
    return zookeeperId;
  }

  public void setZookeeperId(Double zookeeperId) {
    this.zookeeperId = zookeeperId;
  }


  public ZookeeperNodeInfo zookeeperVersion(String zookeeperVersion) {
    this.zookeeperVersion = zookeeperVersion;
    return this;
  }

  /**
   * Get zookeeperVersion
   * @return zookeeperVersion
   */
  @javax.annotation.Nullable
  public String getZookeeperVersion() {
    return zookeeperVersion;
  }

  public void setZookeeperVersion(String zookeeperVersion) {
    this.zookeeperVersion = zookeeperVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZookeeperNodeInfo zookeeperNodeInfo = (ZookeeperNodeInfo) o;
    return Objects.equals(this.attachedENIId, zookeeperNodeInfo.attachedENIId) &&
        Objects.equals(this.clientVpcIpAddress, zookeeperNodeInfo.clientVpcIpAddress) &&
        Objects.equals(this.endpoints, zookeeperNodeInfo.endpoints) &&
        Objects.equals(this.zookeeperId, zookeeperNodeInfo.zookeeperId) &&
        Objects.equals(this.zookeeperVersion, zookeeperNodeInfo.zookeeperVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachedENIId, clientVpcIpAddress, endpoints, zookeeperId, zookeeperVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZookeeperNodeInfo {\n");
    sb.append("    attachedENIId: ").append(toIndentedString(attachedENIId)).append("\n");
    sb.append("    clientVpcIpAddress: ").append(toIndentedString(clientVpcIpAddress)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    zookeeperId: ").append(toIndentedString(zookeeperId)).append("\n");
    sb.append("    zookeeperVersion: ").append(toIndentedString(zookeeperVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttachedENIId");
    openapiFields.add("ClientVpcIpAddress");
    openapiFields.add("Endpoints");
    openapiFields.add("ZookeeperId");
    openapiFields.add("ZookeeperVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZookeeperNodeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZookeeperNodeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZookeeperNodeInfo is not found in the empty JSON string", ZookeeperNodeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZookeeperNodeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZookeeperNodeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AttachedENIId`
      if (jsonObj.get("AttachedENIId") != null && !jsonObj.get("AttachedENIId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AttachedENIId"));
      }
      // validate the optional field `ClientVpcIpAddress`
      if (jsonObj.get("ClientVpcIpAddress") != null && !jsonObj.get("ClientVpcIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientVpcIpAddress"));
      }
      // validate the optional field `Endpoints`
      if (jsonObj.get("Endpoints") != null && !jsonObj.get("Endpoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Endpoints"));
      }
      // validate the optional field `ZookeeperId`
      if (jsonObj.get("ZookeeperId") != null && !jsonObj.get("ZookeeperId").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ZookeeperId"));
      }
      // validate the optional field `ZookeeperVersion`
      if (jsonObj.get("ZookeeperVersion") != null && !jsonObj.get("ZookeeperVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZookeeperVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZookeeperNodeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZookeeperNodeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZookeeperNodeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZookeeperNodeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ZookeeperNodeInfo>() {
           @Override
           public void write(JsonWriter out, ZookeeperNodeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZookeeperNodeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZookeeperNodeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZookeeperNodeInfo
   * @throws IOException if the JSON string is invalid with respect to ZookeeperNodeInfo
   */
  public static ZookeeperNodeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZookeeperNodeInfo.class);
  }

  /**
   * Convert an instance of ZookeeperNodeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

