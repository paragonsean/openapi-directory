/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfigurationRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KAFKA_VERSIONS = "kafkaVersions";
  @SerializedName(SERIALIZED_NAME_KAFKA_VERSIONS)
  private List<String> kafkaVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVER_PROPERTIES = "serverProperties";
  @SerializedName(SERIALIZED_NAME_SERVER_PROPERTIES)
  private String serverProperties;

  public CreateConfigurationRequest() {
  }

  public CreateConfigurationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   *              &lt;p&gt;The description of the configuration.&lt;/p&gt;          
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateConfigurationRequest kafkaVersions(List<String> kafkaVersions) {
    this.kafkaVersions = kafkaVersions;
    return this;
  }

  public CreateConfigurationRequest addKafkaVersionsItem(String kafkaVersionsItem) {
    if (this.kafkaVersions == null) {
      this.kafkaVersions = new ArrayList<>();
    }
    this.kafkaVersions.add(kafkaVersionsItem);
    return this;
  }

  /**
   *              &lt;p&gt;The versions of Apache Kafka with which you can use this MSK configuration.&lt;/p&gt;          
   * @return kafkaVersions
   */
  @javax.annotation.Nullable
  public List<String> getKafkaVersions() {
    return kafkaVersions;
  }

  public void setKafkaVersions(List<String> kafkaVersions) {
    this.kafkaVersions = kafkaVersions;
  }


  public CreateConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   *              &lt;p&gt;The name of the configuration.&lt;/p&gt;          
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConfigurationRequest serverProperties(String serverProperties) {
    this.serverProperties = serverProperties;
    return this;
  }

  /**
   *              &lt;p&gt;Contents of the &lt;filename&gt;server.properties&lt;/filename&gt; file. When using the API, you must ensure that the contents of the file are base64 encoded.                 When using the AWS Management Console, the SDK, or the AWS CLI, the contents of &lt;filename&gt;server.properties&lt;/filename&gt; can be in plaintext.&lt;/p&gt;          
   * @return serverProperties
   */
  @javax.annotation.Nonnull
  public String getServerProperties() {
    return serverProperties;
  }

  public void setServerProperties(String serverProperties) {
    this.serverProperties = serverProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfigurationRequest createConfigurationRequest = (CreateConfigurationRequest) o;
    return Objects.equals(this.description, createConfigurationRequest.description) &&
        Objects.equals(this.kafkaVersions, createConfigurationRequest.kafkaVersions) &&
        Objects.equals(this.name, createConfigurationRequest.name) &&
        Objects.equals(this.serverProperties, createConfigurationRequest.serverProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, kafkaVersions, name, serverProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfigurationRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    kafkaVersions: ").append(toIndentedString(kafkaVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverProperties: ").append(toIndentedString(serverProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("kafkaVersions");
    openapiFields.add("name");
    openapiFields.add("serverProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("serverProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfigurationRequest is not found in the empty JSON string", CreateConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("kafkaVersions") != null && !jsonObj.get("kafkaVersions").isJsonNull() && !jsonObj.get("kafkaVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kafkaVersions` to be an array in the JSON string but got `%s`", jsonObj.get("kafkaVersions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("serverProperties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverProperties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverProperties").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, CreateConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConfigurationRequest
   */
  public static CreateConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfigurationRequest.class);
  }

  /**
   * Convert an instance of CreateConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

