/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ClusterProvisioned;
import org.openapitools.client.model.ClusterServerless;
import org.openapitools.client.model.ClusterState;
import org.openapitools.client.model.ClusterStateInfo;
import org.openapitools.client.model.ClusterType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *              &lt;p&gt;Returns information about a cluster.&lt;/p&gt;          
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cluster {
  public static final String SERIALIZED_NAME_ACTIVE_OPERATION_ARN = "ActiveOperationArn";
  @SerializedName(SERIALIZED_NAME_ACTIVE_OPERATION_ARN)
  private String activeOperationArn;

  public static final String SERIALIZED_NAME_CLUSTER_TYPE = "ClusterType";
  @SerializedName(SERIALIZED_NAME_CLUSTER_TYPE)
  private ClusterType clusterType;

  public static final String SERIALIZED_NAME_CLUSTER_ARN = "ClusterArn";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ARN)
  private String clusterArn;

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "ClusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_CURRENT_VERSION = "CurrentVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  private String currentVersion;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ClusterState state;

  public static final String SERIALIZED_NAME_STATE_INFO = "StateInfo";
  @SerializedName(SERIALIZED_NAME_STATE_INFO)
  private ClusterStateInfo stateInfo;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_PROVISIONED = "Provisioned";
  @SerializedName(SERIALIZED_NAME_PROVISIONED)
  private ClusterProvisioned provisioned;

  public static final String SERIALIZED_NAME_SERVERLESS = "Serverless";
  @SerializedName(SERIALIZED_NAME_SERVERLESS)
  private ClusterServerless serverless;

  public Cluster() {
  }

  public Cluster activeOperationArn(String activeOperationArn) {
    this.activeOperationArn = activeOperationArn;
    return this;
  }

  /**
   * Get activeOperationArn
   * @return activeOperationArn
   */
  @javax.annotation.Nullable
  public String getActiveOperationArn() {
    return activeOperationArn;
  }

  public void setActiveOperationArn(String activeOperationArn) {
    this.activeOperationArn = activeOperationArn;
  }


  public Cluster clusterType(ClusterType clusterType) {
    this.clusterType = clusterType;
    return this;
  }

  /**
   * Get clusterType
   * @return clusterType
   */
  @javax.annotation.Nullable
  public ClusterType getClusterType() {
    return clusterType;
  }

  public void setClusterType(ClusterType clusterType) {
    this.clusterType = clusterType;
  }


  public Cluster clusterArn(String clusterArn) {
    this.clusterArn = clusterArn;
    return this;
  }

  /**
   * Get clusterArn
   * @return clusterArn
   */
  @javax.annotation.Nullable
  public String getClusterArn() {
    return clusterArn;
  }

  public void setClusterArn(String clusterArn) {
    this.clusterArn = clusterArn;
  }


  public Cluster clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * Get clusterName
   * @return clusterName
   */
  @javax.annotation.Nullable
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public Cluster creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Cluster currentVersion(String currentVersion) {
    this.currentVersion = currentVersion;
    return this;
  }

  /**
   * Get currentVersion
   * @return currentVersion
   */
  @javax.annotation.Nullable
  public String getCurrentVersion() {
    return currentVersion;
  }

  public void setCurrentVersion(String currentVersion) {
    this.currentVersion = currentVersion;
  }


  public Cluster state(ClusterState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ClusterState getState() {
    return state;
  }

  public void setState(ClusterState state) {
    this.state = state;
  }


  public Cluster stateInfo(ClusterStateInfo stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  /**
   * Get stateInfo
   * @return stateInfo
   */
  @javax.annotation.Nullable
  public ClusterStateInfo getStateInfo() {
    return stateInfo;
  }

  public void setStateInfo(ClusterStateInfo stateInfo) {
    this.stateInfo = stateInfo;
  }


  public Cluster tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public Cluster provisioned(ClusterProvisioned provisioned) {
    this.provisioned = provisioned;
    return this;
  }

  /**
   * Get provisioned
   * @return provisioned
   */
  @javax.annotation.Nullable
  public ClusterProvisioned getProvisioned() {
    return provisioned;
  }

  public void setProvisioned(ClusterProvisioned provisioned) {
    this.provisioned = provisioned;
  }


  public Cluster serverless(ClusterServerless serverless) {
    this.serverless = serverless;
    return this;
  }

  /**
   * Get serverless
   * @return serverless
   */
  @javax.annotation.Nullable
  public ClusterServerless getServerless() {
    return serverless;
  }

  public void setServerless(ClusterServerless serverless) {
    this.serverless = serverless;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cluster cluster = (Cluster) o;
    return Objects.equals(this.activeOperationArn, cluster.activeOperationArn) &&
        Objects.equals(this.clusterType, cluster.clusterType) &&
        Objects.equals(this.clusterArn, cluster.clusterArn) &&
        Objects.equals(this.clusterName, cluster.clusterName) &&
        Objects.equals(this.creationTime, cluster.creationTime) &&
        Objects.equals(this.currentVersion, cluster.currentVersion) &&
        Objects.equals(this.state, cluster.state) &&
        Objects.equals(this.stateInfo, cluster.stateInfo) &&
        Objects.equals(this.tags, cluster.tags) &&
        Objects.equals(this.provisioned, cluster.provisioned) &&
        Objects.equals(this.serverless, cluster.serverless);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeOperationArn, clusterType, clusterArn, clusterName, creationTime, currentVersion, state, stateInfo, tags, provisioned, serverless);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cluster {\n");
    sb.append("    activeOperationArn: ").append(toIndentedString(activeOperationArn)).append("\n");
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    clusterArn: ").append(toIndentedString(clusterArn)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateInfo: ").append(toIndentedString(stateInfo)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    provisioned: ").append(toIndentedString(provisioned)).append("\n");
    sb.append("    serverless: ").append(toIndentedString(serverless)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveOperationArn");
    openapiFields.add("ClusterType");
    openapiFields.add("ClusterArn");
    openapiFields.add("ClusterName");
    openapiFields.add("CreationTime");
    openapiFields.add("CurrentVersion");
    openapiFields.add("State");
    openapiFields.add("StateInfo");
    openapiFields.add("Tags");
    openapiFields.add("Provisioned");
    openapiFields.add("Serverless");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cluster is not found in the empty JSON string", Cluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActiveOperationArn`
      if (jsonObj.get("ActiveOperationArn") != null && !jsonObj.get("ActiveOperationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActiveOperationArn"));
      }
      // validate the optional field `ClusterType`
      if (jsonObj.get("ClusterType") != null && !jsonObj.get("ClusterType").isJsonNull()) {
        ClusterType.validateJsonElement(jsonObj.get("ClusterType"));
      }
      // validate the optional field `ClusterArn`
      if (jsonObj.get("ClusterArn") != null && !jsonObj.get("ClusterArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterArn"));
      }
      // validate the optional field `ClusterName`
      if (jsonObj.get("ClusterName") != null && !jsonObj.get("ClusterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterName"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `CurrentVersion`
      if (jsonObj.get("CurrentVersion") != null && !jsonObj.get("CurrentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentVersion"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        ClusterState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StateInfo`
      if (jsonObj.get("StateInfo") != null && !jsonObj.get("StateInfo").isJsonNull()) {
        ClusterStateInfo.validateJsonElement(jsonObj.get("StateInfo"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Provisioned`
      if (jsonObj.get("Provisioned") != null && !jsonObj.get("Provisioned").isJsonNull()) {
        ClusterProvisioned.validateJsonElement(jsonObj.get("Provisioned"));
      }
      // validate the optional field `Serverless`
      if (jsonObj.get("Serverless") != null && !jsonObj.get("Serverless").isJsonNull()) {
        ClusterServerless.validateJsonElement(jsonObj.get("Serverless"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cluster.class));

       return (TypeAdapter<T>) new TypeAdapter<Cluster>() {
           @Override
           public void write(JsonWriter out, Cluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cluster
   * @throws IOException if the JSON string is invalid with respect to Cluster
   */
  public static Cluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cluster.class);
  }

  /**
   * Convert an instance of Cluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

