/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.VpcConnectionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeVpcConnectionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:48.211683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeVpcConnectionResponse {
  public static final String SERIALIZED_NAME_VPC_CONNECTION_ARN = "VpcConnectionArn";
  @SerializedName(SERIALIZED_NAME_VPC_CONNECTION_ARN)
  private String vpcConnectionArn;

  public static final String SERIALIZED_NAME_TARGET_CLUSTER_ARN = "TargetClusterArn";
  @SerializedName(SERIALIZED_NAME_TARGET_CLUSTER_ARN)
  private String targetClusterArn;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private VpcConnectionState state;

  public static final String SERIALIZED_NAME_AUTHENTICATION = "Authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private String authentication;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SUBNETS = "Subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List subnets;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public DescribeVpcConnectionResponse() {
  }

  public DescribeVpcConnectionResponse vpcConnectionArn(String vpcConnectionArn) {
    this.vpcConnectionArn = vpcConnectionArn;
    return this;
  }

  /**
   * Get vpcConnectionArn
   * @return vpcConnectionArn
   */
  @javax.annotation.Nullable
  public String getVpcConnectionArn() {
    return vpcConnectionArn;
  }

  public void setVpcConnectionArn(String vpcConnectionArn) {
    this.vpcConnectionArn = vpcConnectionArn;
  }


  public DescribeVpcConnectionResponse targetClusterArn(String targetClusterArn) {
    this.targetClusterArn = targetClusterArn;
    return this;
  }

  /**
   * Get targetClusterArn
   * @return targetClusterArn
   */
  @javax.annotation.Nullable
  public String getTargetClusterArn() {
    return targetClusterArn;
  }

  public void setTargetClusterArn(String targetClusterArn) {
    this.targetClusterArn = targetClusterArn;
  }


  public DescribeVpcConnectionResponse state(VpcConnectionState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public VpcConnectionState getState() {
    return state;
  }

  public void setState(VpcConnectionState state) {
    this.state = state;
  }


  public DescribeVpcConnectionResponse authentication(String authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public String getAuthentication() {
    return authentication;
  }

  public void setAuthentication(String authentication) {
    this.authentication = authentication;
  }


  public DescribeVpcConnectionResponse vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public DescribeVpcConnectionResponse subnets(List subnets) {
    this.subnets = subnets;
    return this;
  }

  /**
   * Get subnets
   * @return subnets
   */
  @javax.annotation.Nullable
  public List getSubnets() {
    return subnets;
  }

  public void setSubnets(List subnets) {
    this.subnets = subnets;
  }


  public DescribeVpcConnectionResponse securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }


  public DescribeVpcConnectionResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeVpcConnectionResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeVpcConnectionResponse describeVpcConnectionResponse = (DescribeVpcConnectionResponse) o;
    return Objects.equals(this.vpcConnectionArn, describeVpcConnectionResponse.vpcConnectionArn) &&
        Objects.equals(this.targetClusterArn, describeVpcConnectionResponse.targetClusterArn) &&
        Objects.equals(this.state, describeVpcConnectionResponse.state) &&
        Objects.equals(this.authentication, describeVpcConnectionResponse.authentication) &&
        Objects.equals(this.vpcId, describeVpcConnectionResponse.vpcId) &&
        Objects.equals(this.subnets, describeVpcConnectionResponse.subnets) &&
        Objects.equals(this.securityGroups, describeVpcConnectionResponse.securityGroups) &&
        Objects.equals(this.creationTime, describeVpcConnectionResponse.creationTime) &&
        Objects.equals(this.tags, describeVpcConnectionResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcConnectionArn, targetClusterArn, state, authentication, vpcId, subnets, securityGroups, creationTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeVpcConnectionResponse {\n");
    sb.append("    vpcConnectionArn: ").append(toIndentedString(vpcConnectionArn)).append("\n");
    sb.append("    targetClusterArn: ").append(toIndentedString(targetClusterArn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcConnectionArn");
    openapiFields.add("TargetClusterArn");
    openapiFields.add("State");
    openapiFields.add("Authentication");
    openapiFields.add("VpcId");
    openapiFields.add("Subnets");
    openapiFields.add("SecurityGroups");
    openapiFields.add("CreationTime");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeVpcConnectionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeVpcConnectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeVpcConnectionResponse is not found in the empty JSON string", DescribeVpcConnectionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeVpcConnectionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeVpcConnectionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VpcConnectionArn`
      if (jsonObj.get("VpcConnectionArn") != null && !jsonObj.get("VpcConnectionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcConnectionArn"));
      }
      // validate the optional field `TargetClusterArn`
      if (jsonObj.get("TargetClusterArn") != null && !jsonObj.get("TargetClusterArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetClusterArn"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        VpcConnectionState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Authentication`
      if (jsonObj.get("Authentication") != null && !jsonObj.get("Authentication").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Authentication"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `Subnets`
      if (jsonObj.get("Subnets") != null && !jsonObj.get("Subnets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Subnets"));
      }
      // validate the optional field `SecurityGroups`
      if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroups"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeVpcConnectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeVpcConnectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeVpcConnectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeVpcConnectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeVpcConnectionResponse>() {
           @Override
           public void write(JsonWriter out, DescribeVpcConnectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeVpcConnectionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeVpcConnectionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeVpcConnectionResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeVpcConnectionResponse
   */
  public static DescribeVpcConnectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeVpcConnectionResponse.class);
  }

  /**
   * Convert an instance of DescribeVpcConnectionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

