/*
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchAssociateScramSecretRequest;
import org.openapitools.client.model.BatchAssociateScramSecretResponse;
import org.openapitools.client.model.BatchDisassociateScramSecretResponse;
import org.openapitools.client.model.CreateClusterRequest;
import org.openapitools.client.model.CreateClusterResponse;
import org.openapitools.client.model.CreateClusterV2Request;
import org.openapitools.client.model.CreateClusterV2Response;
import org.openapitools.client.model.CreateConfigurationRequest;
import org.openapitools.client.model.CreateConfigurationResponse;
import org.openapitools.client.model.CreateVpcConnectionRequest;
import org.openapitools.client.model.CreateVpcConnectionResponse;
import org.openapitools.client.model.DeleteClusterResponse;
import org.openapitools.client.model.DeleteConfigurationResponse;
import org.openapitools.client.model.DeleteVpcConnectionResponse;
import org.openapitools.client.model.DescribeClusterOperationResponse;
import org.openapitools.client.model.DescribeClusterOperationV2Response;
import org.openapitools.client.model.DescribeClusterResponse;
import org.openapitools.client.model.DescribeClusterV2Response;
import org.openapitools.client.model.DescribeConfigurationResponse;
import org.openapitools.client.model.DescribeConfigurationRevisionResponse;
import org.openapitools.client.model.DescribeVpcConnectionResponse;
import org.openapitools.client.model.GetBootstrapBrokersResponse;
import org.openapitools.client.model.GetClusterPolicyResponse;
import org.openapitools.client.model.GetCompatibleKafkaVersionsResponse;
import org.openapitools.client.model.ListClientVpcConnectionsResponse;
import org.openapitools.client.model.ListClusterOperationsResponse;
import org.openapitools.client.model.ListClusterOperationsV2Response;
import org.openapitools.client.model.ListClustersResponse;
import org.openapitools.client.model.ListClustersV2Response;
import org.openapitools.client.model.ListConfigurationRevisionsResponse;
import org.openapitools.client.model.ListConfigurationsResponse;
import org.openapitools.client.model.ListKafkaVersionsResponse;
import org.openapitools.client.model.ListNodesResponse;
import org.openapitools.client.model.ListScramSecretsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListVpcConnectionsResponse;
import org.openapitools.client.model.PutClusterPolicyRequest;
import org.openapitools.client.model.PutClusterPolicyResponse;
import org.openapitools.client.model.RebootBrokerRequest;
import org.openapitools.client.model.RebootBrokerResponse;
import org.openapitools.client.model.RejectClientVpcConnectionRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateBrokerCountRequest;
import org.openapitools.client.model.UpdateBrokerCountResponse;
import org.openapitools.client.model.UpdateBrokerStorageRequest;
import org.openapitools.client.model.UpdateBrokerStorageResponse;
import org.openapitools.client.model.UpdateBrokerTypeRequest;
import org.openapitools.client.model.UpdateBrokerTypeResponse;
import org.openapitools.client.model.UpdateClusterConfigurationRequest;
import org.openapitools.client.model.UpdateClusterConfigurationResponse;
import org.openapitools.client.model.UpdateClusterKafkaVersionRequest;
import org.openapitools.client.model.UpdateClusterKafkaVersionResponse;
import org.openapitools.client.model.UpdateConfigurationRequest;
import org.openapitools.client.model.UpdateConfigurationResponse;
import org.openapitools.client.model.UpdateConnectivityRequest;
import org.openapitools.client.model.UpdateConnectivityResponse;
import org.openapitools.client.model.UpdateMonitoringRequest;
import org.openapitools.client.model.UpdateMonitoringResponse;
import org.openapitools.client.model.UpdateSecurityRequest;
import org.openapitools.client.model.UpdateSecurityResponse;
import org.openapitools.client.model.UpdateStorageRequest;
import org.openapitools.client.model.UpdateStorageResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     *              &lt;p&gt;Associates one or more Scram Secrets with an Amazon MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAssociateScramSecretTest() throws ApiException {
        String clusterArn = null;
        BatchAssociateScramSecretRequest batchAssociateScramSecretRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchAssociateScramSecretResponse response = api.batchAssociateScramSecret(clusterArn, batchAssociateScramSecretRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Disassociates one or more Scram Secrets from an Amazon MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisassociateScramSecretTest() throws ApiException {
        String clusterArn = null;
        BatchAssociateScramSecretRequest batchAssociateScramSecretRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisassociateScramSecretResponse response = api.batchDisassociateScramSecret(clusterArn, batchAssociateScramSecretRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Creates a new MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClusterTest() throws ApiException {
        CreateClusterRequest createClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterResponse response = api.createCluster(createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Creates a new MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClusterV2Test() throws ApiException {
        CreateClusterV2Request createClusterV2Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterV2Response response = api.createClusterV2(createClusterV2Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Creates a new MSK configuration.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigurationTest() throws ApiException {
        CreateConfigurationRequest createConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConfigurationResponse response = api.createConfiguration(createConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Creates a new MSK VPC connection.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVpcConnectionTest() throws ApiException {
        CreateVpcConnectionRequest createVpcConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVpcConnectionResponse response = api.createVpcConnection(createVpcConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClusterTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String currentVersion = null;
        DeleteClusterResponse response = api.deleteCluster(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, currentVersion);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Deletes the MSK cluster policy specified by the Amazon Resource Name (ARN) in the request.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClusterPolicyTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteClusterPolicy(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Deletes an MSK Configuration.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfigurationTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteConfigurationResponse response = api.deleteConfiguration(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Deletes a MSK VPC connection.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVpcConnectionTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVpcConnectionResponse response = api.deleteVpcConnection(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClusterTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClusterResponse response = api.describeCluster(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of the cluster operation specified by the ARN.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClusterOperationTest() throws ApiException {
        String clusterOperationArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClusterOperationResponse response = api.describeClusterOperation(clusterOperationArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of the cluster operation specified by the ARN.&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClusterOperationV2Test() throws ApiException {
        String clusterOperationArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClusterOperationV2Response response = api.describeClusterOperationV2(clusterOperationArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClusterV2Test() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClusterV2Response response = api.describeClusterV2(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of this MSK configuration.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConfigurationTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConfigurationResponse response = api.describeConfiguration(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of this revision of the configuration.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConfigurationRevisionTest() throws ApiException {
        String arn = null;
        Integer revision = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConfigurationRevisionResponse response = api.describeConfigurationRevision(arn, revision, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a description of this MSK VPC connection.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVpcConnectionTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVpcConnectionResponse response = api.describeVpcConnection(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;A list of brokers that a client application can use to bootstrap.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBootstrapBrokersTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBootstrapBrokersResponse response = api.getBootstrapBrokers(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Get the MSK cluster policy specified by the Amazon Resource Name (ARN) in the request.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterPolicyTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetClusterPolicyResponse response = api.getClusterPolicy(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Gets the Apache Kafka versions to which you can update the MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompatibleKafkaVersionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterArn = null;
        GetCompatibleKafkaVersionsResponse response = api.getCompatibleKafkaVersions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterArn);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the VPC connections in this Region.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClientVpcConnectionsTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListClientVpcConnectionsResponse response = api.listClientVpcConnections(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the operations that have been performed on the specified MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClusterOperationsTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListClusterOperationsResponse response = api.listClusterOperations(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the operations that have been performed on the specified MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClusterOperationsV2Test() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListClusterOperationsV2Response response = api.listClusterOperationsV2(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the MSK clusters in the current Region.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClustersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterNameFilter = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListClustersResponse response = api.listClusters(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterNameFilter, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the MSK clusters in the current Region.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClustersV2Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterNameFilter = null;
        String clusterTypeFilter = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListClustersV2Response response = api.listClustersV2(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterNameFilter, clusterTypeFilter, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the MSK configurations in this Region.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationRevisionsTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListConfigurationRevisionsResponse response = api.listConfigurationRevisions(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the MSK configurations in this Region.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListConfigurationsResponse response = api.listConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of Apache Kafka versions.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKafkaVersionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListKafkaVersionsResponse response = api.listKafkaVersions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of the broker nodes in the cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNodesTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListNodesResponse response = api.listNodes(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of the Scram Secrets associated with an Amazon MSK cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScramSecretsTest() throws ApiException {
        String clusterArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListScramSecretsResponse response = api.listScramSecrets(clusterArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of the tags associated with the specified resource.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns a list of all the VPC connections in this Region.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVpcConnectionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListVpcConnectionsResponse response = api.listVpcConnections(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Creates or updates the MSK cluster policy specified by the cluster Amazon Resource Name (ARN) in the request.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putClusterPolicyTest() throws ApiException {
        String clusterArn = null;
        PutClusterPolicyRequest putClusterPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutClusterPolicyResponse response = api.putClusterPolicy(clusterArn, putClusterPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Reboots brokers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootBrokerTest() throws ApiException {
        String clusterArn = null;
        RebootBrokerRequest rebootBrokerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootBrokerResponse response = api.rebootBroker(clusterArn, rebootBrokerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Returns empty response.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectClientVpcConnectionTest() throws ApiException {
        String clusterArn = null;
        RejectClientVpcConnectionRequest rejectClientVpcConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.rejectClientVpcConnection(clusterArn, rejectClientVpcConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Adds tags to the specified MSK resource.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Removes the tags associated with the keys that are provided in the query.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the number of broker nodes in the cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrokerCountTest() throws ApiException {
        String clusterArn = null;
        UpdateBrokerCountRequest updateBrokerCountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBrokerCountResponse response = api.updateBrokerCount(clusterArn, updateBrokerCountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the EBS storage associated with MSK brokers.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrokerStorageTest() throws ApiException {
        String clusterArn = null;
        UpdateBrokerStorageRequest updateBrokerStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBrokerStorageResponse response = api.updateBrokerStorage(clusterArn, updateBrokerStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates EC2 instance type.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrokerTypeTest() throws ApiException {
        String clusterArn = null;
        UpdateBrokerTypeRequest updateBrokerTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBrokerTypeResponse response = api.updateBrokerType(clusterArn, updateBrokerTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the cluster with the configuration that is specified in the request body.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClusterConfigurationTest() throws ApiException {
        String clusterArn = null;
        UpdateClusterConfigurationRequest updateClusterConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateClusterConfigurationResponse response = api.updateClusterConfiguration(clusterArn, updateClusterConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the Apache Kafka version for the cluster.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClusterKafkaVersionTest() throws ApiException {
        String clusterArn = null;
        UpdateClusterKafkaVersionRequest updateClusterKafkaVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateClusterKafkaVersionResponse response = api.updateClusterKafkaVersion(clusterArn, updateClusterKafkaVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates an MSK configuration.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        String arn = null;
        UpdateConfigurationRequest updateConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConfigurationResponse response = api.updateConfiguration(arn, updateConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the cluster&#39;s connectivity configuration.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectivityTest() throws ApiException {
        String clusterArn = null;
        UpdateConnectivityRequest updateConnectivityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConnectivityResponse response = api.updateConnectivity(clusterArn, updateConnectivityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMonitoringTest() throws ApiException {
        String clusterArn = null;
        UpdateMonitoringRequest updateMonitoringRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMonitoringResponse response = api.updateMonitoring(clusterArn, updateMonitoringRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *              &lt;p&gt;Updates the security settings for the cluster. You can use this operation to specify encryption and authentication on existing clusters.&lt;/p&gt;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecurityTest() throws ApiException {
        String clusterArn = null;
        UpdateSecurityRequest updateSecurityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSecurityResponse response = api.updateSecurity(clusterArn, updateSecurityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates cluster broker volume size (or) sets cluster storage mode to TIERED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStorageTest() throws ApiException {
        String clusterArn = null;
        UpdateStorageRequest updateStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateStorageResponse response = api.updateStorage(clusterArn, updateStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
