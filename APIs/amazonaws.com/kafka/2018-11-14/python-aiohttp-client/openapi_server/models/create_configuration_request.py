# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, kafka_versions: List[str]=None, name: str=None, server_properties: str=None):
        """CreateConfigurationRequest - a model defined in OpenAPI

        :param description: The description of this CreateConfigurationRequest.
        :param kafka_versions: The kafka_versions of this CreateConfigurationRequest.
        :param name: The name of this CreateConfigurationRequest.
        :param server_properties: The server_properties of this CreateConfigurationRequest.
        """
        self.openapi_types = {
            'description': str,
            'kafka_versions': List[str],
            'name': str,
            'server_properties': str
        }

        self.attribute_map = {
            'description': 'description',
            'kafka_versions': 'kafkaVersions',
            'name': 'name',
            'server_properties': 'serverProperties'
        }

        self._description = description
        self._kafka_versions = kafka_versions
        self._name = name
        self._server_properties = server_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguration_request of this CreateConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateConfigurationRequest.

                     <p>The description of the configuration.</p>          

        :return: The description of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfigurationRequest.

                     <p>The description of the configuration.</p>          

        :param description: The description of this CreateConfigurationRequest.
        :type description: str
        """

        self._description = description

    @property
    def kafka_versions(self):
        """Gets the kafka_versions of this CreateConfigurationRequest.

                     <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>          

        :return: The kafka_versions of this CreateConfigurationRequest.
        :rtype: List[str]
        """
        return self._kafka_versions

    @kafka_versions.setter
    def kafka_versions(self, kafka_versions):
        """Sets the kafka_versions of this CreateConfigurationRequest.

                     <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>          

        :param kafka_versions: The kafka_versions of this CreateConfigurationRequest.
        :type kafka_versions: List[str]
        """

        self._kafka_versions = kafka_versions

    @property
    def name(self):
        """Gets the name of this CreateConfigurationRequest.

                     <p>The name of the configuration.</p>          

        :return: The name of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfigurationRequest.

                     <p>The name of the configuration.</p>          

        :param name: The name of this CreateConfigurationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def server_properties(self):
        """Gets the server_properties of this CreateConfigurationRequest.

                     <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.                 When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>          

        :return: The server_properties of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._server_properties

    @server_properties.setter
    def server_properties(self, server_properties):
        """Sets the server_properties of this CreateConfigurationRequest.

                     <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.                 When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>          

        :param server_properties: The server_properties of this CreateConfigurationRequest.
        :type server_properties: str
        """
        if server_properties is None:
            raise ValueError("Invalid value for `server_properties`, must not be `None`")

        self._server_properties = server_properties
