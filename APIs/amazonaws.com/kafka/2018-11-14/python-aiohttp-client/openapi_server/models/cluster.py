# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_provisioned import ClusterProvisioned
from openapi_server.models.cluster_serverless import ClusterServerless
from openapi_server.models.cluster_state import ClusterState
from openapi_server.models.cluster_state_info import ClusterStateInfo
from openapi_server.models.cluster_type import ClusterType
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_operation_arn: str=None, cluster_type: ClusterType=None, cluster_arn: str=None, cluster_name: str=None, creation_time: datetime=None, current_version: str=None, state: ClusterState=None, state_info: ClusterStateInfo=None, tags: Dict=None, provisioned: ClusterProvisioned=None, serverless: ClusterServerless=None):
        """Cluster - a model defined in OpenAPI

        :param active_operation_arn: The active_operation_arn of this Cluster.
        :param cluster_type: The cluster_type of this Cluster.
        :param cluster_arn: The cluster_arn of this Cluster.
        :param cluster_name: The cluster_name of this Cluster.
        :param creation_time: The creation_time of this Cluster.
        :param current_version: The current_version of this Cluster.
        :param state: The state of this Cluster.
        :param state_info: The state_info of this Cluster.
        :param tags: The tags of this Cluster.
        :param provisioned: The provisioned of this Cluster.
        :param serverless: The serverless of this Cluster.
        """
        self.openapi_types = {
            'active_operation_arn': str,
            'cluster_type': ClusterType,
            'cluster_arn': str,
            'cluster_name': str,
            'creation_time': datetime,
            'current_version': str,
            'state': ClusterState,
            'state_info': ClusterStateInfo,
            'tags': Dict,
            'provisioned': ClusterProvisioned,
            'serverless': ClusterServerless
        }

        self.attribute_map = {
            'active_operation_arn': 'ActiveOperationArn',
            'cluster_type': 'ClusterType',
            'cluster_arn': 'ClusterArn',
            'cluster_name': 'ClusterName',
            'creation_time': 'CreationTime',
            'current_version': 'CurrentVersion',
            'state': 'State',
            'state_info': 'StateInfo',
            'tags': 'Tags',
            'provisioned': 'Provisioned',
            'serverless': 'Serverless'
        }

        self._active_operation_arn = active_operation_arn
        self._cluster_type = cluster_type
        self._cluster_arn = cluster_arn
        self._cluster_name = cluster_name
        self._creation_time = creation_time
        self._current_version = current_version
        self._state = state
        self._state_info = state_info
        self._tags = tags
        self._provisioned = provisioned
        self._serverless = serverless

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_operation_arn(self):
        """Gets the active_operation_arn of this Cluster.


        :return: The active_operation_arn of this Cluster.
        :rtype: str
        """
        return self._active_operation_arn

    @active_operation_arn.setter
    def active_operation_arn(self, active_operation_arn):
        """Sets the active_operation_arn of this Cluster.


        :param active_operation_arn: The active_operation_arn of this Cluster.
        :type active_operation_arn: str
        """

        self._active_operation_arn = active_operation_arn

    @property
    def cluster_type(self):
        """Gets the cluster_type of this Cluster.


        :return: The cluster_type of this Cluster.
        :rtype: ClusterType
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this Cluster.


        :param cluster_type: The cluster_type of this Cluster.
        :type cluster_type: ClusterType
        """

        self._cluster_type = cluster_type

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this Cluster.


        :return: The cluster_arn of this Cluster.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this Cluster.


        :param cluster_arn: The cluster_arn of this Cluster.
        :type cluster_arn: str
        """

        self._cluster_arn = cluster_arn

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Cluster.


        :return: The cluster_name of this Cluster.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Cluster.


        :param cluster_name: The cluster_name of this Cluster.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def creation_time(self):
        """Gets the creation_time of this Cluster.


        :return: The creation_time of this Cluster.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Cluster.


        :param creation_time: The creation_time of this Cluster.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def current_version(self):
        """Gets the current_version of this Cluster.


        :return: The current_version of this Cluster.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this Cluster.


        :param current_version: The current_version of this Cluster.
        :type current_version: str
        """

        self._current_version = current_version

    @property
    def state(self):
        """Gets the state of this Cluster.


        :return: The state of this Cluster.
        :rtype: ClusterState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cluster.


        :param state: The state of this Cluster.
        :type state: ClusterState
        """

        self._state = state

    @property
    def state_info(self):
        """Gets the state_info of this Cluster.


        :return: The state_info of this Cluster.
        :rtype: ClusterStateInfo
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this Cluster.


        :param state_info: The state_info of this Cluster.
        :type state_info: ClusterStateInfo
        """

        self._state_info = state_info

    @property
    def tags(self):
        """Gets the tags of this Cluster.


        :return: The tags of this Cluster.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Cluster.


        :param tags: The tags of this Cluster.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def provisioned(self):
        """Gets the provisioned of this Cluster.


        :return: The provisioned of this Cluster.
        :rtype: ClusterProvisioned
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this Cluster.


        :param provisioned: The provisioned of this Cluster.
        :type provisioned: ClusterProvisioned
        """

        self._provisioned = provisioned

    @property
    def serverless(self):
        """Gets the serverless of this Cluster.


        :return: The serverless of this Cluster.
        :rtype: ClusterServerless
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this Cluster.


        :param serverless: The serverless of this Cluster.
        :type serverless: ClusterServerless
        """

        self._serverless = serverless
