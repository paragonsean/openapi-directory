# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrokerLogsS3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, enabled: bool=None, prefix: str=None):
        """BrokerLogsS3 - a model defined in OpenAPI

        :param bucket: The bucket of this BrokerLogsS3.
        :param enabled: The enabled of this BrokerLogsS3.
        :param prefix: The prefix of this BrokerLogsS3.
        """
        self.openapi_types = {
            'bucket': str,
            'enabled': bool,
            'prefix': str
        }

        self.attribute_map = {
            'bucket': 'Bucket',
            'enabled': 'Enabled',
            'prefix': 'Prefix'
        }

        self._bucket = bucket
        self._enabled = enabled
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrokerLogsS3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrokerLogs_S3 of this BrokerLogsS3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this BrokerLogsS3.


        :return: The bucket of this BrokerLogsS3.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this BrokerLogsS3.


        :param bucket: The bucket of this BrokerLogsS3.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def enabled(self):
        """Gets the enabled of this BrokerLogsS3.


        :return: The enabled of this BrokerLogsS3.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BrokerLogsS3.


        :param enabled: The enabled of this BrokerLogsS3.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def prefix(self):
        """Gets the prefix of this BrokerLogsS3.


        :return: The prefix of this BrokerLogsS3.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BrokerLogsS3.


        :param prefix: The prefix of this BrokerLogsS3.
        :type prefix: str
        """

        self._prefix = prefix
