# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broker_ebs_volume_info_provisioned_throughput import BrokerEBSVolumeInfoProvisionedThroughput
from openapi_server import util


class BrokerEBSVolumeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kafka_broker_node_id: str=None, provisioned_throughput: BrokerEBSVolumeInfoProvisionedThroughput=None, volume_size_gb: int=None):
        """BrokerEBSVolumeInfo - a model defined in OpenAPI

        :param kafka_broker_node_id: The kafka_broker_node_id of this BrokerEBSVolumeInfo.
        :param provisioned_throughput: The provisioned_throughput of this BrokerEBSVolumeInfo.
        :param volume_size_gb: The volume_size_gb of this BrokerEBSVolumeInfo.
        """
        self.openapi_types = {
            'kafka_broker_node_id': str,
            'provisioned_throughput': BrokerEBSVolumeInfoProvisionedThroughput,
            'volume_size_gb': int
        }

        self.attribute_map = {
            'kafka_broker_node_id': 'KafkaBrokerNodeId',
            'provisioned_throughput': 'ProvisionedThroughput',
            'volume_size_gb': 'VolumeSizeGB'
        }

        self._kafka_broker_node_id = kafka_broker_node_id
        self._provisioned_throughput = provisioned_throughput
        self._volume_size_gb = volume_size_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrokerEBSVolumeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrokerEBSVolumeInfo of this BrokerEBSVolumeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kafka_broker_node_id(self):
        """Gets the kafka_broker_node_id of this BrokerEBSVolumeInfo.


        :return: The kafka_broker_node_id of this BrokerEBSVolumeInfo.
        :rtype: str
        """
        return self._kafka_broker_node_id

    @kafka_broker_node_id.setter
    def kafka_broker_node_id(self, kafka_broker_node_id):
        """Sets the kafka_broker_node_id of this BrokerEBSVolumeInfo.


        :param kafka_broker_node_id: The kafka_broker_node_id of this BrokerEBSVolumeInfo.
        :type kafka_broker_node_id: str
        """
        if kafka_broker_node_id is None:
            raise ValueError("Invalid value for `kafka_broker_node_id`, must not be `None`")

        self._kafka_broker_node_id = kafka_broker_node_id

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this BrokerEBSVolumeInfo.


        :return: The provisioned_throughput of this BrokerEBSVolumeInfo.
        :rtype: BrokerEBSVolumeInfoProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this BrokerEBSVolumeInfo.


        :param provisioned_throughput: The provisioned_throughput of this BrokerEBSVolumeInfo.
        :type provisioned_throughput: BrokerEBSVolumeInfoProvisionedThroughput
        """

        self._provisioned_throughput = provisioned_throughput

    @property
    def volume_size_gb(self):
        """Gets the volume_size_gb of this BrokerEBSVolumeInfo.


        :return: The volume_size_gb of this BrokerEBSVolumeInfo.
        :rtype: int
        """
        return self._volume_size_gb

    @volume_size_gb.setter
    def volume_size_gb(self, volume_size_gb):
        """Sets the volume_size_gb of this BrokerEBSVolumeInfo.


        :param volume_size_gb: The volume_size_gb of this BrokerEBSVolumeInfo.
        :type volume_size_gb: int
        """

        self._volume_size_gb = volume_size_gb
