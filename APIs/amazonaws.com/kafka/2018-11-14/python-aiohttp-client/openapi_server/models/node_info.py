# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_info_broker_node_info import NodeInfoBrokerNodeInfo
from openapi_server.models.node_info_zookeeper_node_info import NodeInfoZookeeperNodeInfo
from openapi_server.models.node_type import NodeType
from openapi_server import util


class NodeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_to_cluster_time: str=None, broker_node_info: NodeInfoBrokerNodeInfo=None, instance_type: str=None, node_arn: str=None, node_type: NodeType=None, zookeeper_node_info: NodeInfoZookeeperNodeInfo=None):
        """NodeInfo - a model defined in OpenAPI

        :param added_to_cluster_time: The added_to_cluster_time of this NodeInfo.
        :param broker_node_info: The broker_node_info of this NodeInfo.
        :param instance_type: The instance_type of this NodeInfo.
        :param node_arn: The node_arn of this NodeInfo.
        :param node_type: The node_type of this NodeInfo.
        :param zookeeper_node_info: The zookeeper_node_info of this NodeInfo.
        """
        self.openapi_types = {
            'added_to_cluster_time': str,
            'broker_node_info': NodeInfoBrokerNodeInfo,
            'instance_type': str,
            'node_arn': str,
            'node_type': NodeType,
            'zookeeper_node_info': NodeInfoZookeeperNodeInfo
        }

        self.attribute_map = {
            'added_to_cluster_time': 'AddedToClusterTime',
            'broker_node_info': 'BrokerNodeInfo',
            'instance_type': 'InstanceType',
            'node_arn': 'NodeARN',
            'node_type': 'NodeType',
            'zookeeper_node_info': 'ZookeeperNodeInfo'
        }

        self._added_to_cluster_time = added_to_cluster_time
        self._broker_node_info = broker_node_info
        self._instance_type = instance_type
        self._node_arn = node_arn
        self._node_type = node_type
        self._zookeeper_node_info = zookeeper_node_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInfo of this NodeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_to_cluster_time(self):
        """Gets the added_to_cluster_time of this NodeInfo.


        :return: The added_to_cluster_time of this NodeInfo.
        :rtype: str
        """
        return self._added_to_cluster_time

    @added_to_cluster_time.setter
    def added_to_cluster_time(self, added_to_cluster_time):
        """Sets the added_to_cluster_time of this NodeInfo.


        :param added_to_cluster_time: The added_to_cluster_time of this NodeInfo.
        :type added_to_cluster_time: str
        """

        self._added_to_cluster_time = added_to_cluster_time

    @property
    def broker_node_info(self):
        """Gets the broker_node_info of this NodeInfo.


        :return: The broker_node_info of this NodeInfo.
        :rtype: NodeInfoBrokerNodeInfo
        """
        return self._broker_node_info

    @broker_node_info.setter
    def broker_node_info(self, broker_node_info):
        """Sets the broker_node_info of this NodeInfo.


        :param broker_node_info: The broker_node_info of this NodeInfo.
        :type broker_node_info: NodeInfoBrokerNodeInfo
        """

        self._broker_node_info = broker_node_info

    @property
    def instance_type(self):
        """Gets the instance_type of this NodeInfo.


        :return: The instance_type of this NodeInfo.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this NodeInfo.


        :param instance_type: The instance_type of this NodeInfo.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def node_arn(self):
        """Gets the node_arn of this NodeInfo.


        :return: The node_arn of this NodeInfo.
        :rtype: str
        """
        return self._node_arn

    @node_arn.setter
    def node_arn(self, node_arn):
        """Sets the node_arn of this NodeInfo.


        :param node_arn: The node_arn of this NodeInfo.
        :type node_arn: str
        """

        self._node_arn = node_arn

    @property
    def node_type(self):
        """Gets the node_type of this NodeInfo.


        :return: The node_type of this NodeInfo.
        :rtype: NodeType
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this NodeInfo.


        :param node_type: The node_type of this NodeInfo.
        :type node_type: NodeType
        """

        self._node_type = node_type

    @property
    def zookeeper_node_info(self):
        """Gets the zookeeper_node_info of this NodeInfo.


        :return: The zookeeper_node_info of this NodeInfo.
        :rtype: NodeInfoZookeeperNodeInfo
        """
        return self._zookeeper_node_info

    @zookeeper_node_info.setter
    def zookeeper_node_info(self, zookeeper_node_info):
        """Sets the zookeeper_node_info of this NodeInfo.


        :param zookeeper_node_info: The zookeeper_node_info of this NodeInfo.
        :type zookeeper_node_info: NodeInfoZookeeperNodeInfo
        """

        self._zookeeper_node_info = zookeeper_node_info
