# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_v2_request_provisioned import CreateClusterV2RequestProvisioned
from openapi_server.models.create_cluster_v2_request_serverless import CreateClusterV2RequestServerless
from openapi_server import util


class CreateClusterV2Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name: str=None, tags: Dict[str, str]=None, provisioned: CreateClusterV2RequestProvisioned=None, serverless: CreateClusterV2RequestServerless=None):
        """CreateClusterV2Request - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this CreateClusterV2Request.
        :param tags: The tags of this CreateClusterV2Request.
        :param provisioned: The provisioned of this CreateClusterV2Request.
        :param serverless: The serverless of this CreateClusterV2Request.
        """
        self.openapi_types = {
            'cluster_name': str,
            'tags': Dict[str, str],
            'provisioned': CreateClusterV2RequestProvisioned,
            'serverless': CreateClusterV2RequestServerless
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'tags': 'tags',
            'provisioned': 'provisioned',
            'serverless': 'serverless'
        }

        self._cluster_name = cluster_name
        self._tags = tags
        self._provisioned = provisioned
        self._serverless = serverless

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterV2Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateClusterV2_request of this CreateClusterV2Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this CreateClusterV2Request.

                     <p>The name of the cluster.</p>          

        :return: The cluster_name of this CreateClusterV2Request.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this CreateClusterV2Request.

                     <p>The name of the cluster.</p>          

        :param cluster_name: The cluster_name of this CreateClusterV2Request.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")
        if cluster_name is not None and len(cluster_name) > 64:
            raise ValueError("Invalid value for `cluster_name`, length must be less than or equal to `64`")
        if cluster_name is not None and len(cluster_name) < 1:
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")

        self._cluster_name = cluster_name

    @property
    def tags(self):
        """Gets the tags of this CreateClusterV2Request.

                     <p>A map of tags that you want the cluster to have.</p>          

        :return: The tags of this CreateClusterV2Request.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateClusterV2Request.

                     <p>A map of tags that you want the cluster to have.</p>          

        :param tags: The tags of this CreateClusterV2Request.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def provisioned(self):
        """Gets the provisioned of this CreateClusterV2Request.


        :return: The provisioned of this CreateClusterV2Request.
        :rtype: CreateClusterV2RequestProvisioned
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this CreateClusterV2Request.


        :param provisioned: The provisioned of this CreateClusterV2Request.
        :type provisioned: CreateClusterV2RequestProvisioned
        """

        self._provisioned = provisioned

    @property
    def serverless(self):
        """Gets the serverless of this CreateClusterV2Request.


        :return: The serverless of this CreateClusterV2Request.
        :rtype: CreateClusterV2RequestServerless
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this CreateClusterV2Request.


        :param serverless: The serverless of this CreateClusterV2Request.
        :type serverless: CreateClusterV2RequestServerless
        """

        self._serverless = serverless
