# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_request_logging_info_broker_logs import CreateClusterRequestLoggingInfoBrokerLogs
from openapi_server import util


class CreateClusterV2RequestProvisionedLoggingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broker_logs: CreateClusterRequestLoggingInfoBrokerLogs=None):
        """CreateClusterV2RequestProvisionedLoggingInfo - a model defined in OpenAPI

        :param broker_logs: The broker_logs of this CreateClusterV2RequestProvisionedLoggingInfo.
        """
        self.openapi_types = {
            'broker_logs': CreateClusterRequestLoggingInfoBrokerLogs
        }

        self.attribute_map = {
            'broker_logs': 'BrokerLogs'
        }

        self._broker_logs = broker_logs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterV2RequestProvisionedLoggingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateClusterV2_request_provisioned_LoggingInfo of this CreateClusterV2RequestProvisionedLoggingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broker_logs(self):
        """Gets the broker_logs of this CreateClusterV2RequestProvisionedLoggingInfo.


        :return: The broker_logs of this CreateClusterV2RequestProvisionedLoggingInfo.
        :rtype: CreateClusterRequestLoggingInfoBrokerLogs
        """
        return self._broker_logs

    @broker_logs.setter
    def broker_logs(self, broker_logs):
        """Sets the broker_logs of this CreateClusterV2RequestProvisionedLoggingInfo.


        :param broker_logs: The broker_logs of this CreateClusterV2RequestProvisionedLoggingInfo.
        :type broker_logs: CreateClusterRequestLoggingInfoBrokerLogs
        """
        if broker_logs is None:
            raise ValueError("Invalid value for `broker_logs`, must not be `None`")

        self._broker_logs = broker_logs
