# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZookeeperNodeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached_eniid: str=None, client_vpc_ip_address: str=None, endpoints: List=None, zookeeper_id: float=None, zookeeper_version: str=None):
        """ZookeeperNodeInfo - a model defined in OpenAPI

        :param attached_eniid: The attached_eniid of this ZookeeperNodeInfo.
        :param client_vpc_ip_address: The client_vpc_ip_address of this ZookeeperNodeInfo.
        :param endpoints: The endpoints of this ZookeeperNodeInfo.
        :param zookeeper_id: The zookeeper_id of this ZookeeperNodeInfo.
        :param zookeeper_version: The zookeeper_version of this ZookeeperNodeInfo.
        """
        self.openapi_types = {
            'attached_eniid': str,
            'client_vpc_ip_address': str,
            'endpoints': List,
            'zookeeper_id': float,
            'zookeeper_version': str
        }

        self.attribute_map = {
            'attached_eniid': 'AttachedENIId',
            'client_vpc_ip_address': 'ClientVpcIpAddress',
            'endpoints': 'Endpoints',
            'zookeeper_id': 'ZookeeperId',
            'zookeeper_version': 'ZookeeperVersion'
        }

        self._attached_eniid = attached_eniid
        self._client_vpc_ip_address = client_vpc_ip_address
        self._endpoints = endpoints
        self._zookeeper_id = zookeeper_id
        self._zookeeper_version = zookeeper_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZookeeperNodeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZookeeperNodeInfo of this ZookeeperNodeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_eniid(self):
        """Gets the attached_eniid of this ZookeeperNodeInfo.


        :return: The attached_eniid of this ZookeeperNodeInfo.
        :rtype: str
        """
        return self._attached_eniid

    @attached_eniid.setter
    def attached_eniid(self, attached_eniid):
        """Sets the attached_eniid of this ZookeeperNodeInfo.


        :param attached_eniid: The attached_eniid of this ZookeeperNodeInfo.
        :type attached_eniid: str
        """

        self._attached_eniid = attached_eniid

    @property
    def client_vpc_ip_address(self):
        """Gets the client_vpc_ip_address of this ZookeeperNodeInfo.


        :return: The client_vpc_ip_address of this ZookeeperNodeInfo.
        :rtype: str
        """
        return self._client_vpc_ip_address

    @client_vpc_ip_address.setter
    def client_vpc_ip_address(self, client_vpc_ip_address):
        """Sets the client_vpc_ip_address of this ZookeeperNodeInfo.


        :param client_vpc_ip_address: The client_vpc_ip_address of this ZookeeperNodeInfo.
        :type client_vpc_ip_address: str
        """

        self._client_vpc_ip_address = client_vpc_ip_address

    @property
    def endpoints(self):
        """Gets the endpoints of this ZookeeperNodeInfo.


        :return: The endpoints of this ZookeeperNodeInfo.
        :rtype: List
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ZookeeperNodeInfo.


        :param endpoints: The endpoints of this ZookeeperNodeInfo.
        :type endpoints: List
        """

        self._endpoints = endpoints

    @property
    def zookeeper_id(self):
        """Gets the zookeeper_id of this ZookeeperNodeInfo.


        :return: The zookeeper_id of this ZookeeperNodeInfo.
        :rtype: float
        """
        return self._zookeeper_id

    @zookeeper_id.setter
    def zookeeper_id(self, zookeeper_id):
        """Sets the zookeeper_id of this ZookeeperNodeInfo.


        :param zookeeper_id: The zookeeper_id of this ZookeeperNodeInfo.
        :type zookeeper_id: float
        """

        self._zookeeper_id = zookeeper_id

    @property
    def zookeeper_version(self):
        """Gets the zookeeper_version of this ZookeeperNodeInfo.


        :return: The zookeeper_version of this ZookeeperNodeInfo.
        :rtype: str
        """
        return self._zookeeper_version

    @zookeeper_version.setter
    def zookeeper_version(self, zookeeper_version):
        """Sets the zookeeper_version of this ZookeeperNodeInfo.


        :param zookeeper_version: The zookeeper_version of this ZookeeperNodeInfo.
        :type zookeeper_version: str
        """

        self._zookeeper_version = zookeeper_version
