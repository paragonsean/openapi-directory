# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrokerLogsFirehose(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_stream: str=None, enabled: bool=None):
        """BrokerLogsFirehose - a model defined in OpenAPI

        :param delivery_stream: The delivery_stream of this BrokerLogsFirehose.
        :param enabled: The enabled of this BrokerLogsFirehose.
        """
        self.openapi_types = {
            'delivery_stream': str,
            'enabled': bool
        }

        self.attribute_map = {
            'delivery_stream': 'DeliveryStream',
            'enabled': 'Enabled'
        }

        self._delivery_stream = delivery_stream
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrokerLogsFirehose':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrokerLogs_Firehose of this BrokerLogsFirehose.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_stream(self):
        """Gets the delivery_stream of this BrokerLogsFirehose.


        :return: The delivery_stream of this BrokerLogsFirehose.
        :rtype: str
        """
        return self._delivery_stream

    @delivery_stream.setter
    def delivery_stream(self, delivery_stream):
        """Sets the delivery_stream of this BrokerLogsFirehose.


        :param delivery_stream: The delivery_stream of this BrokerLogsFirehose.
        :type delivery_stream: str
        """

        self._delivery_stream = delivery_stream

    @property
    def enabled(self):
        """Gets the enabled of this BrokerLogsFirehose.


        :return: The enabled of this BrokerLogsFirehose.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BrokerLogsFirehose.


        :param enabled: The enabled of this BrokerLogsFirehose.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
