# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateBrokerCountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_version: str=None, target_number_of_broker_nodes: int=None):
        """UpdateBrokerCountRequest - a model defined in OpenAPI

        :param current_version: The current_version of this UpdateBrokerCountRequest.
        :param target_number_of_broker_nodes: The target_number_of_broker_nodes of this UpdateBrokerCountRequest.
        """
        self.openapi_types = {
            'current_version': str,
            'target_number_of_broker_nodes': int
        }

        self.attribute_map = {
            'current_version': 'currentVersion',
            'target_number_of_broker_nodes': 'targetNumberOfBrokerNodes'
        }

        self._current_version = current_version
        self._target_number_of_broker_nodes = target_number_of_broker_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBrokerCountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBrokerCount_request of this UpdateBrokerCountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_version(self):
        """Gets the current_version of this UpdateBrokerCountRequest.

                     <p>The version of cluster to update from. A successful operation will then generate a new version.</p>          

        :return: The current_version of this UpdateBrokerCountRequest.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpdateBrokerCountRequest.

                     <p>The version of cluster to update from. A successful operation will then generate a new version.</p>          

        :param current_version: The current_version of this UpdateBrokerCountRequest.
        :type current_version: str
        """
        if current_version is None:
            raise ValueError("Invalid value for `current_version`, must not be `None`")

        self._current_version = current_version

    @property
    def target_number_of_broker_nodes(self):
        """Gets the target_number_of_broker_nodes of this UpdateBrokerCountRequest.

                     <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>          

        :return: The target_number_of_broker_nodes of this UpdateBrokerCountRequest.
        :rtype: int
        """
        return self._target_number_of_broker_nodes

    @target_number_of_broker_nodes.setter
    def target_number_of_broker_nodes(self, target_number_of_broker_nodes):
        """Sets the target_number_of_broker_nodes of this UpdateBrokerCountRequest.

                     <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>          

        :param target_number_of_broker_nodes: The target_number_of_broker_nodes of this UpdateBrokerCountRequest.
        :type target_number_of_broker_nodes: int
        """
        if target_number_of_broker_nodes is None:
            raise ValueError("Invalid value for `target_number_of_broker_nodes`, must not be `None`")
        if target_number_of_broker_nodes is not None and target_number_of_broker_nodes > 15:
            raise ValueError("Invalid value for `target_number_of_broker_nodes`, must be a value less than or equal to `15`")
        if target_number_of_broker_nodes is not None and target_number_of_broker_nodes < 1:
            raise ValueError("Invalid value for `target_number_of_broker_nodes`, must be a value greater than or equal to `1`")

        self._target_number_of_broker_nodes = target_number_of_broker_nodes
