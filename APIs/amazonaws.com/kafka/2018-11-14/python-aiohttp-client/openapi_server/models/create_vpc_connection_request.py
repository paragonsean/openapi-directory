# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateVpcConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_cluster_arn: str=None, authentication: str=None, vpc_id: str=None, client_subnets: List[str]=None, security_groups: List[str]=None, tags: Dict[str, str]=None):
        """CreateVpcConnectionRequest - a model defined in OpenAPI

        :param target_cluster_arn: The target_cluster_arn of this CreateVpcConnectionRequest.
        :param authentication: The authentication of this CreateVpcConnectionRequest.
        :param vpc_id: The vpc_id of this CreateVpcConnectionRequest.
        :param client_subnets: The client_subnets of this CreateVpcConnectionRequest.
        :param security_groups: The security_groups of this CreateVpcConnectionRequest.
        :param tags: The tags of this CreateVpcConnectionRequest.
        """
        self.openapi_types = {
            'target_cluster_arn': str,
            'authentication': str,
            'vpc_id': str,
            'client_subnets': List[str],
            'security_groups': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'target_cluster_arn': 'targetClusterArn',
            'authentication': 'authentication',
            'vpc_id': 'vpcId',
            'client_subnets': 'clientSubnets',
            'security_groups': 'securityGroups',
            'tags': 'tags'
        }

        self._target_cluster_arn = target_cluster_arn
        self._authentication = authentication
        self._vpc_id = vpc_id
        self._client_subnets = client_subnets
        self._security_groups = security_groups
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVpcConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVpcConnection_request of this CreateVpcConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_cluster_arn(self):
        """Gets the target_cluster_arn of this CreateVpcConnectionRequest.

                     <p>The cluster Amazon Resource Name (ARN) for the VPC connection.</p>          

        :return: The target_cluster_arn of this CreateVpcConnectionRequest.
        :rtype: str
        """
        return self._target_cluster_arn

    @target_cluster_arn.setter
    def target_cluster_arn(self, target_cluster_arn):
        """Sets the target_cluster_arn of this CreateVpcConnectionRequest.

                     <p>The cluster Amazon Resource Name (ARN) for the VPC connection.</p>          

        :param target_cluster_arn: The target_cluster_arn of this CreateVpcConnectionRequest.
        :type target_cluster_arn: str
        """
        if target_cluster_arn is None:
            raise ValueError("Invalid value for `target_cluster_arn`, must not be `None`")

        self._target_cluster_arn = target_cluster_arn

    @property
    def authentication(self):
        """Gets the authentication of this CreateVpcConnectionRequest.

                     <p>The authentication type of VPC connection.</p>          

        :return: The authentication of this CreateVpcConnectionRequest.
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this CreateVpcConnectionRequest.

                     <p>The authentication type of VPC connection.</p>          

        :param authentication: The authentication of this CreateVpcConnectionRequest.
        :type authentication: str
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateVpcConnectionRequest.

                     <p>The VPC ID of VPC connection.</p>          

        :return: The vpc_id of this CreateVpcConnectionRequest.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateVpcConnectionRequest.

                     <p>The VPC ID of VPC connection.</p>          

        :param vpc_id: The vpc_id of this CreateVpcConnectionRequest.
        :type vpc_id: str
        """
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")

        self._vpc_id = vpc_id

    @property
    def client_subnets(self):
        """Gets the client_subnets of this CreateVpcConnectionRequest.

                     <p>The list of client subnets.</p>          

        :return: The client_subnets of this CreateVpcConnectionRequest.
        :rtype: List[str]
        """
        return self._client_subnets

    @client_subnets.setter
    def client_subnets(self, client_subnets):
        """Sets the client_subnets of this CreateVpcConnectionRequest.

                     <p>The list of client subnets.</p>          

        :param client_subnets: The client_subnets of this CreateVpcConnectionRequest.
        :type client_subnets: List[str]
        """
        if client_subnets is None:
            raise ValueError("Invalid value for `client_subnets`, must not be `None`")

        self._client_subnets = client_subnets

    @property
    def security_groups(self):
        """Gets the security_groups of this CreateVpcConnectionRequest.

                     <p>The list of security groups.</p>          

        :return: The security_groups of this CreateVpcConnectionRequest.
        :rtype: List[str]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this CreateVpcConnectionRequest.

                     <p>The list of security groups.</p>          

        :param security_groups: The security_groups of this CreateVpcConnectionRequest.
        :type security_groups: List[str]
        """
        if security_groups is None:
            raise ValueError("Invalid value for `security_groups`, must not be `None`")

        self._security_groups = security_groups

    @property
    def tags(self):
        """Gets the tags of this CreateVpcConnectionRequest.

                     <p>A map of tags for the VPC connection.</p>          

        :return: The tags of this CreateVpcConnectionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVpcConnectionRequest.

                     <p>A map of tags for the VPC connection.</p>          

        :param tags: The tags of this CreateVpcConnectionRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
