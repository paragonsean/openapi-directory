# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_request_broker_node_group_info import CreateClusterRequestBrokerNodeGroupInfo
from openapi_server.models.create_cluster_request_client_authentication import CreateClusterRequestClientAuthentication
from openapi_server.models.create_cluster_request_configuration_info import CreateClusterRequestConfigurationInfo
from openapi_server.models.create_cluster_request_encryption_info import CreateClusterRequestEncryptionInfo
from openapi_server.models.create_cluster_request_logging_info import CreateClusterRequestLoggingInfo
from openapi_server.models.create_cluster_request_open_monitoring import CreateClusterRequestOpenMonitoring
from openapi_server import util


class CreateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broker_node_group_info: CreateClusterRequestBrokerNodeGroupInfo=None, client_authentication: CreateClusterRequestClientAuthentication=None, cluster_name: str=None, configuration_info: CreateClusterRequestConfigurationInfo=None, encryption_info: CreateClusterRequestEncryptionInfo=None, enhanced_monitoring: str=None, open_monitoring: CreateClusterRequestOpenMonitoring=None, kafka_version: str=None, logging_info: CreateClusterRequestLoggingInfo=None, number_of_broker_nodes: int=None, tags: Dict[str, str]=None, storage_mode: str=None):
        """CreateClusterRequest - a model defined in OpenAPI

        :param broker_node_group_info: The broker_node_group_info of this CreateClusterRequest.
        :param client_authentication: The client_authentication of this CreateClusterRequest.
        :param cluster_name: The cluster_name of this CreateClusterRequest.
        :param configuration_info: The configuration_info of this CreateClusterRequest.
        :param encryption_info: The encryption_info of this CreateClusterRequest.
        :param enhanced_monitoring: The enhanced_monitoring of this CreateClusterRequest.
        :param open_monitoring: The open_monitoring of this CreateClusterRequest.
        :param kafka_version: The kafka_version of this CreateClusterRequest.
        :param logging_info: The logging_info of this CreateClusterRequest.
        :param number_of_broker_nodes: The number_of_broker_nodes of this CreateClusterRequest.
        :param tags: The tags of this CreateClusterRequest.
        :param storage_mode: The storage_mode of this CreateClusterRequest.
        """
        self.openapi_types = {
            'broker_node_group_info': CreateClusterRequestBrokerNodeGroupInfo,
            'client_authentication': CreateClusterRequestClientAuthentication,
            'cluster_name': str,
            'configuration_info': CreateClusterRequestConfigurationInfo,
            'encryption_info': CreateClusterRequestEncryptionInfo,
            'enhanced_monitoring': str,
            'open_monitoring': CreateClusterRequestOpenMonitoring,
            'kafka_version': str,
            'logging_info': CreateClusterRequestLoggingInfo,
            'number_of_broker_nodes': int,
            'tags': Dict[str, str],
            'storage_mode': str
        }

        self.attribute_map = {
            'broker_node_group_info': 'brokerNodeGroupInfo',
            'client_authentication': 'clientAuthentication',
            'cluster_name': 'clusterName',
            'configuration_info': 'configurationInfo',
            'encryption_info': 'encryptionInfo',
            'enhanced_monitoring': 'enhancedMonitoring',
            'open_monitoring': 'openMonitoring',
            'kafka_version': 'kafkaVersion',
            'logging_info': 'loggingInfo',
            'number_of_broker_nodes': 'numberOfBrokerNodes',
            'tags': 'tags',
            'storage_mode': 'storageMode'
        }

        self._broker_node_group_info = broker_node_group_info
        self._client_authentication = client_authentication
        self._cluster_name = cluster_name
        self._configuration_info = configuration_info
        self._encryption_info = encryption_info
        self._enhanced_monitoring = enhanced_monitoring
        self._open_monitoring = open_monitoring
        self._kafka_version = kafka_version
        self._logging_info = logging_info
        self._number_of_broker_nodes = number_of_broker_nodes
        self._tags = tags
        self._storage_mode = storage_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCluster_request of this CreateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broker_node_group_info(self):
        """Gets the broker_node_group_info of this CreateClusterRequest.


        :return: The broker_node_group_info of this CreateClusterRequest.
        :rtype: CreateClusterRequestBrokerNodeGroupInfo
        """
        return self._broker_node_group_info

    @broker_node_group_info.setter
    def broker_node_group_info(self, broker_node_group_info):
        """Sets the broker_node_group_info of this CreateClusterRequest.


        :param broker_node_group_info: The broker_node_group_info of this CreateClusterRequest.
        :type broker_node_group_info: CreateClusterRequestBrokerNodeGroupInfo
        """
        if broker_node_group_info is None:
            raise ValueError("Invalid value for `broker_node_group_info`, must not be `None`")

        self._broker_node_group_info = broker_node_group_info

    @property
    def client_authentication(self):
        """Gets the client_authentication of this CreateClusterRequest.


        :return: The client_authentication of this CreateClusterRequest.
        :rtype: CreateClusterRequestClientAuthentication
        """
        return self._client_authentication

    @client_authentication.setter
    def client_authentication(self, client_authentication):
        """Sets the client_authentication of this CreateClusterRequest.


        :param client_authentication: The client_authentication of this CreateClusterRequest.
        :type client_authentication: CreateClusterRequestClientAuthentication
        """

        self._client_authentication = client_authentication

    @property
    def cluster_name(self):
        """Gets the cluster_name of this CreateClusterRequest.

                     <p>The name of the cluster.</p>          

        :return: The cluster_name of this CreateClusterRequest.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this CreateClusterRequest.

                     <p>The name of the cluster.</p>          

        :param cluster_name: The cluster_name of this CreateClusterRequest.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")
        if cluster_name is not None and len(cluster_name) > 64:
            raise ValueError("Invalid value for `cluster_name`, length must be less than or equal to `64`")
        if cluster_name is not None and len(cluster_name) < 1:
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")

        self._cluster_name = cluster_name

    @property
    def configuration_info(self):
        """Gets the configuration_info of this CreateClusterRequest.


        :return: The configuration_info of this CreateClusterRequest.
        :rtype: CreateClusterRequestConfigurationInfo
        """
        return self._configuration_info

    @configuration_info.setter
    def configuration_info(self, configuration_info):
        """Sets the configuration_info of this CreateClusterRequest.


        :param configuration_info: The configuration_info of this CreateClusterRequest.
        :type configuration_info: CreateClusterRequestConfigurationInfo
        """

        self._configuration_info = configuration_info

    @property
    def encryption_info(self):
        """Gets the encryption_info of this CreateClusterRequest.


        :return: The encryption_info of this CreateClusterRequest.
        :rtype: CreateClusterRequestEncryptionInfo
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this CreateClusterRequest.


        :param encryption_info: The encryption_info of this CreateClusterRequest.
        :type encryption_info: CreateClusterRequestEncryptionInfo
        """

        self._encryption_info = encryption_info

    @property
    def enhanced_monitoring(self):
        """Gets the enhanced_monitoring of this CreateClusterRequest.

                     <p>Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html\">Monitoring</a>.</p>          

        :return: The enhanced_monitoring of this CreateClusterRequest.
        :rtype: str
        """
        return self._enhanced_monitoring

    @enhanced_monitoring.setter
    def enhanced_monitoring(self, enhanced_monitoring):
        """Sets the enhanced_monitoring of this CreateClusterRequest.

                     <p>Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html\">Monitoring</a>.</p>          

        :param enhanced_monitoring: The enhanced_monitoring of this CreateClusterRequest.
        :type enhanced_monitoring: str
        """
        allowed_values = ["DEFAULT", "PER_BROKER", "PER_TOPIC_PER_BROKER", "PER_TOPIC_PER_PARTITION"]  # noqa: E501
        if enhanced_monitoring not in allowed_values:
            raise ValueError(
                "Invalid value for `enhanced_monitoring` ({0}), must be one of {1}"
                .format(enhanced_monitoring, allowed_values)
            )

        self._enhanced_monitoring = enhanced_monitoring

    @property
    def open_monitoring(self):
        """Gets the open_monitoring of this CreateClusterRequest.


        :return: The open_monitoring of this CreateClusterRequest.
        :rtype: CreateClusterRequestOpenMonitoring
        """
        return self._open_monitoring

    @open_monitoring.setter
    def open_monitoring(self, open_monitoring):
        """Sets the open_monitoring of this CreateClusterRequest.


        :param open_monitoring: The open_monitoring of this CreateClusterRequest.
        :type open_monitoring: CreateClusterRequestOpenMonitoring
        """

        self._open_monitoring = open_monitoring

    @property
    def kafka_version(self):
        """Gets the kafka_version of this CreateClusterRequest.

                     <p>The version of Apache Kafka.</p>          

        :return: The kafka_version of this CreateClusterRequest.
        :rtype: str
        """
        return self._kafka_version

    @kafka_version.setter
    def kafka_version(self, kafka_version):
        """Sets the kafka_version of this CreateClusterRequest.

                     <p>The version of Apache Kafka.</p>          

        :param kafka_version: The kafka_version of this CreateClusterRequest.
        :type kafka_version: str
        """
        if kafka_version is None:
            raise ValueError("Invalid value for `kafka_version`, must not be `None`")
        if kafka_version is not None and len(kafka_version) > 128:
            raise ValueError("Invalid value for `kafka_version`, length must be less than or equal to `128`")
        if kafka_version is not None and len(kafka_version) < 1:
            raise ValueError("Invalid value for `kafka_version`, length must be greater than or equal to `1`")

        self._kafka_version = kafka_version

    @property
    def logging_info(self):
        """Gets the logging_info of this CreateClusterRequest.


        :return: The logging_info of this CreateClusterRequest.
        :rtype: CreateClusterRequestLoggingInfo
        """
        return self._logging_info

    @logging_info.setter
    def logging_info(self, logging_info):
        """Sets the logging_info of this CreateClusterRequest.


        :param logging_info: The logging_info of this CreateClusterRequest.
        :type logging_info: CreateClusterRequestLoggingInfo
        """

        self._logging_info = logging_info

    @property
    def number_of_broker_nodes(self):
        """Gets the number_of_broker_nodes of this CreateClusterRequest.

                     <p>The number of broker nodes in the cluster.</p>          

        :return: The number_of_broker_nodes of this CreateClusterRequest.
        :rtype: int
        """
        return self._number_of_broker_nodes

    @number_of_broker_nodes.setter
    def number_of_broker_nodes(self, number_of_broker_nodes):
        """Sets the number_of_broker_nodes of this CreateClusterRequest.

                     <p>The number of broker nodes in the cluster.</p>          

        :param number_of_broker_nodes: The number_of_broker_nodes of this CreateClusterRequest.
        :type number_of_broker_nodes: int
        """
        if number_of_broker_nodes is None:
            raise ValueError("Invalid value for `number_of_broker_nodes`, must not be `None`")
        if number_of_broker_nodes is not None and number_of_broker_nodes > 15:
            raise ValueError("Invalid value for `number_of_broker_nodes`, must be a value less than or equal to `15`")
        if number_of_broker_nodes is not None and number_of_broker_nodes < 1:
            raise ValueError("Invalid value for `number_of_broker_nodes`, must be a value greater than or equal to `1`")

        self._number_of_broker_nodes = number_of_broker_nodes

    @property
    def tags(self):
        """Gets the tags of this CreateClusterRequest.

                     <p>Create tags when creating the cluster.</p>          

        :return: The tags of this CreateClusterRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateClusterRequest.

                     <p>Create tags when creating the cluster.</p>          

        :param tags: The tags of this CreateClusterRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def storage_mode(self):
        """Gets the storage_mode of this CreateClusterRequest.

        Controls storage mode for various supported storage tiers.

        :return: The storage_mode of this CreateClusterRequest.
        :rtype: str
        """
        return self._storage_mode

    @storage_mode.setter
    def storage_mode(self, storage_mode):
        """Sets the storage_mode of this CreateClusterRequest.

        Controls storage mode for various supported storage tiers.

        :param storage_mode: The storage_mode of this CreateClusterRequest.
        :type storage_mode: str
        """
        allowed_values = ["LOCAL", "TIERED"]  # noqa: E501
        if storage_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_mode` ({0}), must be one of {1}"
                .format(storage_mode, allowed_values)
            )

        self._storage_mode = storage_mode
