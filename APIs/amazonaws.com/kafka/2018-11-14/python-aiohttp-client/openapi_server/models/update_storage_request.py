# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_storage_request_provisioned_throughput import UpdateStorageRequestProvisionedThroughput
from openapi_server import util


class UpdateStorageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_version: str=None, provisioned_throughput: UpdateStorageRequestProvisionedThroughput=None, storage_mode: str=None, volume_size_gb: int=None):
        """UpdateStorageRequest - a model defined in OpenAPI

        :param current_version: The current_version of this UpdateStorageRequest.
        :param provisioned_throughput: The provisioned_throughput of this UpdateStorageRequest.
        :param storage_mode: The storage_mode of this UpdateStorageRequest.
        :param volume_size_gb: The volume_size_gb of this UpdateStorageRequest.
        """
        self.openapi_types = {
            'current_version': str,
            'provisioned_throughput': UpdateStorageRequestProvisionedThroughput,
            'storage_mode': str,
            'volume_size_gb': int
        }

        self.attribute_map = {
            'current_version': 'currentVersion',
            'provisioned_throughput': 'provisionedThroughput',
            'storage_mode': 'storageMode',
            'volume_size_gb': 'volumeSizeGB'
        }

        self._current_version = current_version
        self._provisioned_throughput = provisioned_throughput
        self._storage_mode = storage_mode
        self._volume_size_gb = volume_size_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStorageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStorage_request of this UpdateStorageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_version(self):
        """Gets the current_version of this UpdateStorageRequest.

                     <p>The version of cluster to update from. A successful operation will then generate a new version.</p>          

        :return: The current_version of this UpdateStorageRequest.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpdateStorageRequest.

                     <p>The version of cluster to update from. A successful operation will then generate a new version.</p>          

        :param current_version: The current_version of this UpdateStorageRequest.
        :type current_version: str
        """
        if current_version is None:
            raise ValueError("Invalid value for `current_version`, must not be `None`")

        self._current_version = current_version

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this UpdateStorageRequest.


        :return: The provisioned_throughput of this UpdateStorageRequest.
        :rtype: UpdateStorageRequestProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this UpdateStorageRequest.


        :param provisioned_throughput: The provisioned_throughput of this UpdateStorageRequest.
        :type provisioned_throughput: UpdateStorageRequestProvisionedThroughput
        """

        self._provisioned_throughput = provisioned_throughput

    @property
    def storage_mode(self):
        """Gets the storage_mode of this UpdateStorageRequest.

        Controls storage mode for various supported storage tiers.

        :return: The storage_mode of this UpdateStorageRequest.
        :rtype: str
        """
        return self._storage_mode

    @storage_mode.setter
    def storage_mode(self, storage_mode):
        """Sets the storage_mode of this UpdateStorageRequest.

        Controls storage mode for various supported storage tiers.

        :param storage_mode: The storage_mode of this UpdateStorageRequest.
        :type storage_mode: str
        """
        allowed_values = ["LOCAL", "TIERED"]  # noqa: E501
        if storage_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_mode` ({0}), must be one of {1}"
                .format(storage_mode, allowed_values)
            )

        self._storage_mode = storage_mode

    @property
    def volume_size_gb(self):
        """Gets the volume_size_gb of this UpdateStorageRequest.

                     <p>size of the EBS volume to update.</p>          

        :return: The volume_size_gb of this UpdateStorageRequest.
        :rtype: int
        """
        return self._volume_size_gb

    @volume_size_gb.setter
    def volume_size_gb(self, volume_size_gb):
        """Sets the volume_size_gb of this UpdateStorageRequest.

                     <p>size of the EBS volume to update.</p>          

        :param volume_size_gb: The volume_size_gb of this UpdateStorageRequest.
        :type volume_size_gb: int
        """

        self._volume_size_gb = volume_size_gb
