# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broker_node_info_current_broker_software_info import BrokerNodeInfoCurrentBrokerSoftwareInfo
from openapi_server import util


class NodeInfoBrokerNodeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached_eniid: str=None, broker_id: float=None, client_subnet: str=None, client_vpc_ip_address: str=None, current_broker_software_info: BrokerNodeInfoCurrentBrokerSoftwareInfo=None, endpoints: List=None):
        """NodeInfoBrokerNodeInfo - a model defined in OpenAPI

        :param attached_eniid: The attached_eniid of this NodeInfoBrokerNodeInfo.
        :param broker_id: The broker_id of this NodeInfoBrokerNodeInfo.
        :param client_subnet: The client_subnet of this NodeInfoBrokerNodeInfo.
        :param client_vpc_ip_address: The client_vpc_ip_address of this NodeInfoBrokerNodeInfo.
        :param current_broker_software_info: The current_broker_software_info of this NodeInfoBrokerNodeInfo.
        :param endpoints: The endpoints of this NodeInfoBrokerNodeInfo.
        """
        self.openapi_types = {
            'attached_eniid': str,
            'broker_id': float,
            'client_subnet': str,
            'client_vpc_ip_address': str,
            'current_broker_software_info': BrokerNodeInfoCurrentBrokerSoftwareInfo,
            'endpoints': List
        }

        self.attribute_map = {
            'attached_eniid': 'AttachedENIId',
            'broker_id': 'BrokerId',
            'client_subnet': 'ClientSubnet',
            'client_vpc_ip_address': 'ClientVpcIpAddress',
            'current_broker_software_info': 'CurrentBrokerSoftwareInfo',
            'endpoints': 'Endpoints'
        }

        self._attached_eniid = attached_eniid
        self._broker_id = broker_id
        self._client_subnet = client_subnet
        self._client_vpc_ip_address = client_vpc_ip_address
        self._current_broker_software_info = current_broker_software_info
        self._endpoints = endpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInfoBrokerNodeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInfo_BrokerNodeInfo of this NodeInfoBrokerNodeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_eniid(self):
        """Gets the attached_eniid of this NodeInfoBrokerNodeInfo.


        :return: The attached_eniid of this NodeInfoBrokerNodeInfo.
        :rtype: str
        """
        return self._attached_eniid

    @attached_eniid.setter
    def attached_eniid(self, attached_eniid):
        """Sets the attached_eniid of this NodeInfoBrokerNodeInfo.


        :param attached_eniid: The attached_eniid of this NodeInfoBrokerNodeInfo.
        :type attached_eniid: str
        """

        self._attached_eniid = attached_eniid

    @property
    def broker_id(self):
        """Gets the broker_id of this NodeInfoBrokerNodeInfo.


        :return: The broker_id of this NodeInfoBrokerNodeInfo.
        :rtype: float
        """
        return self._broker_id

    @broker_id.setter
    def broker_id(self, broker_id):
        """Sets the broker_id of this NodeInfoBrokerNodeInfo.


        :param broker_id: The broker_id of this NodeInfoBrokerNodeInfo.
        :type broker_id: float
        """

        self._broker_id = broker_id

    @property
    def client_subnet(self):
        """Gets the client_subnet of this NodeInfoBrokerNodeInfo.


        :return: The client_subnet of this NodeInfoBrokerNodeInfo.
        :rtype: str
        """
        return self._client_subnet

    @client_subnet.setter
    def client_subnet(self, client_subnet):
        """Sets the client_subnet of this NodeInfoBrokerNodeInfo.


        :param client_subnet: The client_subnet of this NodeInfoBrokerNodeInfo.
        :type client_subnet: str
        """

        self._client_subnet = client_subnet

    @property
    def client_vpc_ip_address(self):
        """Gets the client_vpc_ip_address of this NodeInfoBrokerNodeInfo.


        :return: The client_vpc_ip_address of this NodeInfoBrokerNodeInfo.
        :rtype: str
        """
        return self._client_vpc_ip_address

    @client_vpc_ip_address.setter
    def client_vpc_ip_address(self, client_vpc_ip_address):
        """Sets the client_vpc_ip_address of this NodeInfoBrokerNodeInfo.


        :param client_vpc_ip_address: The client_vpc_ip_address of this NodeInfoBrokerNodeInfo.
        :type client_vpc_ip_address: str
        """

        self._client_vpc_ip_address = client_vpc_ip_address

    @property
    def current_broker_software_info(self):
        """Gets the current_broker_software_info of this NodeInfoBrokerNodeInfo.


        :return: The current_broker_software_info of this NodeInfoBrokerNodeInfo.
        :rtype: BrokerNodeInfoCurrentBrokerSoftwareInfo
        """
        return self._current_broker_software_info

    @current_broker_software_info.setter
    def current_broker_software_info(self, current_broker_software_info):
        """Sets the current_broker_software_info of this NodeInfoBrokerNodeInfo.


        :param current_broker_software_info: The current_broker_software_info of this NodeInfoBrokerNodeInfo.
        :type current_broker_software_info: BrokerNodeInfoCurrentBrokerSoftwareInfo
        """

        self._current_broker_software_info = current_broker_software_info

    @property
    def endpoints(self):
        """Gets the endpoints of this NodeInfoBrokerNodeInfo.


        :return: The endpoints of this NodeInfoBrokerNodeInfo.
        :rtype: List
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this NodeInfoBrokerNodeInfo.


        :param endpoints: The endpoints of this NodeInfoBrokerNodeInfo.
        :type endpoints: List
        """

        self._endpoints = endpoints
