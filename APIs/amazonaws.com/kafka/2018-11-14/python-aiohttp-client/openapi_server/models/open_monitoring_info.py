# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_request_open_monitoring_prometheus import CreateClusterRequestOpenMonitoringPrometheus
from openapi_server import util


class OpenMonitoringInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prometheus: CreateClusterRequestOpenMonitoringPrometheus=None):
        """OpenMonitoringInfo - a model defined in OpenAPI

        :param prometheus: The prometheus of this OpenMonitoringInfo.
        """
        self.openapi_types = {
            'prometheus': CreateClusterRequestOpenMonitoringPrometheus
        }

        self.attribute_map = {
            'prometheus': 'Prometheus'
        }

        self._prometheus = prometheus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenMonitoringInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenMonitoringInfo of this OpenMonitoringInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prometheus(self):
        """Gets the prometheus of this OpenMonitoringInfo.


        :return: The prometheus of this OpenMonitoringInfo.
        :rtype: CreateClusterRequestOpenMonitoringPrometheus
        """
        return self._prometheus

    @prometheus.setter
    def prometheus(self, prometheus):
        """Sets the prometheus of this OpenMonitoringInfo.


        :param prometheus: The prometheus of this OpenMonitoringInfo.
        :type prometheus: CreateClusterRequestOpenMonitoringPrometheus
        """
        if prometheus is None:
            raise ValueError("Invalid value for `prometheus`, must not be `None`")

        self._prometheus = prometheus
