# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vpc_connection_state import VpcConnectionState
from openapi_server import util


class ClientVpcConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: str=None, creation_time: datetime=None, state: VpcConnectionState=None, vpc_connection_arn: str=None, owner: str=None):
        """ClientVpcConnection - a model defined in OpenAPI

        :param authentication: The authentication of this ClientVpcConnection.
        :param creation_time: The creation_time of this ClientVpcConnection.
        :param state: The state of this ClientVpcConnection.
        :param vpc_connection_arn: The vpc_connection_arn of this ClientVpcConnection.
        :param owner: The owner of this ClientVpcConnection.
        """
        self.openapi_types = {
            'authentication': str,
            'creation_time': datetime,
            'state': VpcConnectionState,
            'vpc_connection_arn': str,
            'owner': str
        }

        self.attribute_map = {
            'authentication': 'Authentication',
            'creation_time': 'CreationTime',
            'state': 'State',
            'vpc_connection_arn': 'VpcConnectionArn',
            'owner': 'Owner'
        }

        self._authentication = authentication
        self._creation_time = creation_time
        self._state = state
        self._vpc_connection_arn = vpc_connection_arn
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientVpcConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientVpcConnection of this ClientVpcConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this ClientVpcConnection.


        :return: The authentication of this ClientVpcConnection.
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ClientVpcConnection.


        :param authentication: The authentication of this ClientVpcConnection.
        :type authentication: str
        """

        self._authentication = authentication

    @property
    def creation_time(self):
        """Gets the creation_time of this ClientVpcConnection.


        :return: The creation_time of this ClientVpcConnection.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ClientVpcConnection.


        :param creation_time: The creation_time of this ClientVpcConnection.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def state(self):
        """Gets the state of this ClientVpcConnection.


        :return: The state of this ClientVpcConnection.
        :rtype: VpcConnectionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientVpcConnection.


        :param state: The state of this ClientVpcConnection.
        :type state: VpcConnectionState
        """

        self._state = state

    @property
    def vpc_connection_arn(self):
        """Gets the vpc_connection_arn of this ClientVpcConnection.


        :return: The vpc_connection_arn of this ClientVpcConnection.
        :rtype: str
        """
        return self._vpc_connection_arn

    @vpc_connection_arn.setter
    def vpc_connection_arn(self, vpc_connection_arn):
        """Sets the vpc_connection_arn of this ClientVpcConnection.


        :param vpc_connection_arn: The vpc_connection_arn of this ClientVpcConnection.
        :type vpc_connection_arn: str
        """
        if vpc_connection_arn is None:
            raise ValueError("Invalid value for `vpc_connection_arn`, must not be `None`")

        self._vpc_connection_arn = vpc_connection_arn

    @property
    def owner(self):
        """Gets the owner of this ClientVpcConnection.


        :return: The owner of this ClientVpcConnection.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ClientVpcConnection.


        :param owner: The owner of this ClientVpcConnection.
        :type owner: str
        """

        self._owner = owner
