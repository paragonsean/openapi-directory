/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterV2_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterV2_request::OAICreateClusterV2_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterV2_request::OAICreateClusterV2_request() {
    this->initializeModel();
}

OAICreateClusterV2_request::~OAICreateClusterV2_request() {}

void OAICreateClusterV2_request::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_provisioned_isSet = false;
    m_provisioned_isValid = false;

    m_serverless_isSet = false;
    m_serverless_isValid = false;
}

void OAICreateClusterV2_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterV2_request::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_provisioned_isValid = ::OpenAPI::fromJsonValue(m_provisioned, json[QString("provisioned")]);
    m_provisioned_isSet = !json[QString("provisioned")].isNull() && m_provisioned_isValid;

    m_serverless_isValid = ::OpenAPI::fromJsonValue(m_serverless, json[QString("serverless")]);
    m_serverless_isSet = !json[QString("serverless")].isNull() && m_serverless_isValid;
}

QString OAICreateClusterV2_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterV2_request::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_provisioned.isSet()) {
        obj.insert(QString("provisioned"), ::OpenAPI::toJsonValue(m_provisioned));
    }
    if (m_serverless.isSet()) {
        obj.insert(QString("serverless"), ::OpenAPI::toJsonValue(m_serverless));
    }
    return obj;
}

QString OAICreateClusterV2_request::getClusterName() const {
    return m_cluster_name;
}
void OAICreateClusterV2_request::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateClusterV2_request::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateClusterV2_request::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QMap<QString, QString> OAICreateClusterV2_request::getTags() const {
    return m_tags;
}
void OAICreateClusterV2_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClusterV2_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClusterV2_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateClusterV2_request_provisioned OAICreateClusterV2_request::getProvisioned() const {
    return m_provisioned;
}
void OAICreateClusterV2_request::setProvisioned(const OAICreateClusterV2_request_provisioned &provisioned) {
    m_provisioned = provisioned;
    m_provisioned_isSet = true;
}

bool OAICreateClusterV2_request::is_provisioned_Set() const{
    return m_provisioned_isSet;
}

bool OAICreateClusterV2_request::is_provisioned_Valid() const{
    return m_provisioned_isValid;
}

OAICreateClusterV2_request_serverless OAICreateClusterV2_request::getServerless() const {
    return m_serverless;
}
void OAICreateClusterV2_request::setServerless(const OAICreateClusterV2_request_serverless &serverless) {
    m_serverless = serverless;
    m_serverless_isSet = true;
}

bool OAICreateClusterV2_request::is_serverless_Set() const{
    return m_serverless_isSet;
}

bool OAICreateClusterV2_request::is_serverless_Valid() const{
    return m_serverless_isValid;
}

bool OAICreateClusterV2_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterV2_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_name_isValid && true;
}

} // namespace OpenAPI
