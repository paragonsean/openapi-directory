/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterOperationV2Provisioned_TargetClusterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterOperationV2Provisioned_TargetClusterInfo::OAIClusterOperationV2Provisioned_TargetClusterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterOperationV2Provisioned_TargetClusterInfo::OAIClusterOperationV2Provisioned_TargetClusterInfo() {
    this->initializeModel();
}

OAIClusterOperationV2Provisioned_TargetClusterInfo::~OAIClusterOperationV2Provisioned_TargetClusterInfo() {}

void OAIClusterOperationV2Provisioned_TargetClusterInfo::initializeModel() {

    m_broker_ebs_volume_info_isSet = false;
    m_broker_ebs_volume_info_isValid = false;

    m_configuration_info_isSet = false;
    m_configuration_info_isValid = false;

    m_number_of_broker_nodes_isSet = false;
    m_number_of_broker_nodes_isValid = false;

    m_enhanced_monitoring_isSet = false;
    m_enhanced_monitoring_isValid = false;

    m_open_monitoring_isSet = false;
    m_open_monitoring_isValid = false;

    m_kafka_version_isSet = false;
    m_kafka_version_isValid = false;

    m_logging_info_isSet = false;
    m_logging_info_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_client_authentication_isSet = false;
    m_client_authentication_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_connectivity_info_isSet = false;
    m_connectivity_info_isValid = false;

    m_storage_mode_isSet = false;
    m_storage_mode_isValid = false;
}

void OAIClusterOperationV2Provisioned_TargetClusterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterOperationV2Provisioned_TargetClusterInfo::fromJsonObject(QJsonObject json) {

    m_broker_ebs_volume_info_isValid = ::OpenAPI::fromJsonValue(m_broker_ebs_volume_info, json[QString("BrokerEBSVolumeInfo")]);
    m_broker_ebs_volume_info_isSet = !json[QString("BrokerEBSVolumeInfo")].isNull() && m_broker_ebs_volume_info_isValid;

    m_configuration_info_isValid = ::OpenAPI::fromJsonValue(m_configuration_info, json[QString("ConfigurationInfo")]);
    m_configuration_info_isSet = !json[QString("ConfigurationInfo")].isNull() && m_configuration_info_isValid;

    m_number_of_broker_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_broker_nodes, json[QString("NumberOfBrokerNodes")]);
    m_number_of_broker_nodes_isSet = !json[QString("NumberOfBrokerNodes")].isNull() && m_number_of_broker_nodes_isValid;

    m_enhanced_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enhanced_monitoring, json[QString("EnhancedMonitoring")]);
    m_enhanced_monitoring_isSet = !json[QString("EnhancedMonitoring")].isNull() && m_enhanced_monitoring_isValid;

    m_open_monitoring_isValid = ::OpenAPI::fromJsonValue(m_open_monitoring, json[QString("OpenMonitoring")]);
    m_open_monitoring_isSet = !json[QString("OpenMonitoring")].isNull() && m_open_monitoring_isValid;

    m_kafka_version_isValid = ::OpenAPI::fromJsonValue(m_kafka_version, json[QString("KafkaVersion")]);
    m_kafka_version_isSet = !json[QString("KafkaVersion")].isNull() && m_kafka_version_isValid;

    m_logging_info_isValid = ::OpenAPI::fromJsonValue(m_logging_info, json[QString("LoggingInfo")]);
    m_logging_info_isSet = !json[QString("LoggingInfo")].isNull() && m_logging_info_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_client_authentication_isValid = ::OpenAPI::fromJsonValue(m_client_authentication, json[QString("ClientAuthentication")]);
    m_client_authentication_isSet = !json[QString("ClientAuthentication")].isNull() && m_client_authentication_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("EncryptionInfo")]);
    m_encryption_info_isSet = !json[QString("EncryptionInfo")].isNull() && m_encryption_info_isValid;

    m_connectivity_info_isValid = ::OpenAPI::fromJsonValue(m_connectivity_info, json[QString("ConnectivityInfo")]);
    m_connectivity_info_isSet = !json[QString("ConnectivityInfo")].isNull() && m_connectivity_info_isValid;

    m_storage_mode_isValid = ::OpenAPI::fromJsonValue(m_storage_mode, json[QString("StorageMode")]);
    m_storage_mode_isSet = !json[QString("StorageMode")].isNull() && m_storage_mode_isValid;
}

QString OAIClusterOperationV2Provisioned_TargetClusterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterOperationV2Provisioned_TargetClusterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_broker_ebs_volume_info.isSet()) {
        obj.insert(QString("BrokerEBSVolumeInfo"), ::OpenAPI::toJsonValue(m_broker_ebs_volume_info));
    }
    if (m_configuration_info.isSet()) {
        obj.insert(QString("ConfigurationInfo"), ::OpenAPI::toJsonValue(m_configuration_info));
    }
    if (m_number_of_broker_nodes_isSet) {
        obj.insert(QString("NumberOfBrokerNodes"), ::OpenAPI::toJsonValue(m_number_of_broker_nodes));
    }
    if (m_enhanced_monitoring.isSet()) {
        obj.insert(QString("EnhancedMonitoring"), ::OpenAPI::toJsonValue(m_enhanced_monitoring));
    }
    if (m_open_monitoring.isSet()) {
        obj.insert(QString("OpenMonitoring"), ::OpenAPI::toJsonValue(m_open_monitoring));
    }
    if (m_kafka_version_isSet) {
        obj.insert(QString("KafkaVersion"), ::OpenAPI::toJsonValue(m_kafka_version));
    }
    if (m_logging_info.isSet()) {
        obj.insert(QString("LoggingInfo"), ::OpenAPI::toJsonValue(m_logging_info));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_client_authentication.isSet()) {
        obj.insert(QString("ClientAuthentication"), ::OpenAPI::toJsonValue(m_client_authentication));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("EncryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_connectivity_info.isSet()) {
        obj.insert(QString("ConnectivityInfo"), ::OpenAPI::toJsonValue(m_connectivity_info));
    }
    if (m_storage_mode.isSet()) {
        obj.insert(QString("StorageMode"), ::OpenAPI::toJsonValue(m_storage_mode));
    }
    return obj;
}

QList OAIClusterOperationV2Provisioned_TargetClusterInfo::getBrokerEbsVolumeInfo() const {
    return m_broker_ebs_volume_info;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setBrokerEbsVolumeInfo(const QList &broker_ebs_volume_info) {
    m_broker_ebs_volume_info = broker_ebs_volume_info;
    m_broker_ebs_volume_info_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_broker_ebs_volume_info_Set() const{
    return m_broker_ebs_volume_info_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_broker_ebs_volume_info_Valid() const{
    return m_broker_ebs_volume_info_isValid;
}

OAIMutableClusterInfo_ConfigurationInfo OAIClusterOperationV2Provisioned_TargetClusterInfo::getConfigurationInfo() const {
    return m_configuration_info;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setConfigurationInfo(const OAIMutableClusterInfo_ConfigurationInfo &configuration_info) {
    m_configuration_info = configuration_info;
    m_configuration_info_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_configuration_info_Set() const{
    return m_configuration_info_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_configuration_info_Valid() const{
    return m_configuration_info_isValid;
}

qint32 OAIClusterOperationV2Provisioned_TargetClusterInfo::getNumberOfBrokerNodes() const {
    return m_number_of_broker_nodes;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setNumberOfBrokerNodes(const qint32 &number_of_broker_nodes) {
    m_number_of_broker_nodes = number_of_broker_nodes;
    m_number_of_broker_nodes_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_number_of_broker_nodes_Set() const{
    return m_number_of_broker_nodes_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_number_of_broker_nodes_Valid() const{
    return m_number_of_broker_nodes_isValid;
}

OAIEnhancedMonitoring OAIClusterOperationV2Provisioned_TargetClusterInfo::getEnhancedMonitoring() const {
    return m_enhanced_monitoring;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setEnhancedMonitoring(const OAIEnhancedMonitoring &enhanced_monitoring) {
    m_enhanced_monitoring = enhanced_monitoring;
    m_enhanced_monitoring_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_enhanced_monitoring_Set() const{
    return m_enhanced_monitoring_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_enhanced_monitoring_Valid() const{
    return m_enhanced_monitoring_isValid;
}

OAIMutableClusterInfo_OpenMonitoring OAIClusterOperationV2Provisioned_TargetClusterInfo::getOpenMonitoring() const {
    return m_open_monitoring;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setOpenMonitoring(const OAIMutableClusterInfo_OpenMonitoring &open_monitoring) {
    m_open_monitoring = open_monitoring;
    m_open_monitoring_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_open_monitoring_Set() const{
    return m_open_monitoring_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_open_monitoring_Valid() const{
    return m_open_monitoring_isValid;
}

QString OAIClusterOperationV2Provisioned_TargetClusterInfo::getKafkaVersion() const {
    return m_kafka_version;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setKafkaVersion(const QString &kafka_version) {
    m_kafka_version = kafka_version;
    m_kafka_version_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_kafka_version_Set() const{
    return m_kafka_version_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_kafka_version_Valid() const{
    return m_kafka_version_isValid;
}

OAIMutableClusterInfo_LoggingInfo OAIClusterOperationV2Provisioned_TargetClusterInfo::getLoggingInfo() const {
    return m_logging_info;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setLoggingInfo(const OAIMutableClusterInfo_LoggingInfo &logging_info) {
    m_logging_info = logging_info;
    m_logging_info_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_logging_info_Set() const{
    return m_logging_info_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_logging_info_Valid() const{
    return m_logging_info_isValid;
}

QString OAIClusterOperationV2Provisioned_TargetClusterInfo::getInstanceType() const {
    return m_instance_type;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAICreateClusterV2_request_provisioned_ClientAuthentication OAIClusterOperationV2Provisioned_TargetClusterInfo::getClientAuthentication() const {
    return m_client_authentication;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setClientAuthentication(const OAICreateClusterV2_request_provisioned_ClientAuthentication &client_authentication) {
    m_client_authentication = client_authentication;
    m_client_authentication_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_client_authentication_Set() const{
    return m_client_authentication_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_client_authentication_Valid() const{
    return m_client_authentication_isValid;
}

OAICreateClusterV2_request_provisioned_EncryptionInfo OAIClusterOperationV2Provisioned_TargetClusterInfo::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setEncryptionInfo(const OAICreateClusterV2_request_provisioned_EncryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

OAICreateCluster_request_brokerNodeGroupInfo_ConnectivityInfo OAIClusterOperationV2Provisioned_TargetClusterInfo::getConnectivityInfo() const {
    return m_connectivity_info;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setConnectivityInfo(const OAICreateCluster_request_brokerNodeGroupInfo_ConnectivityInfo &connectivity_info) {
    m_connectivity_info = connectivity_info;
    m_connectivity_info_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_connectivity_info_Set() const{
    return m_connectivity_info_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_connectivity_info_Valid() const{
    return m_connectivity_info_isValid;
}

OAIStorageMode OAIClusterOperationV2Provisioned_TargetClusterInfo::getStorageMode() const {
    return m_storage_mode;
}
void OAIClusterOperationV2Provisioned_TargetClusterInfo::setStorageMode(const OAIStorageMode &storage_mode) {
    m_storage_mode = storage_mode;
    m_storage_mode_isSet = true;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_storage_mode_Set() const{
    return m_storage_mode_isSet;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::is_storage_mode_Valid() const{
    return m_storage_mode_isValid;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broker_ebs_volume_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_broker_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kafka_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterOperationV2Provisioned_TargetClusterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
