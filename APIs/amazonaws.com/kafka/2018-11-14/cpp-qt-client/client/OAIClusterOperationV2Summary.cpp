/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterOperationV2Summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterOperationV2Summary::OAIClusterOperationV2Summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterOperationV2Summary::OAIClusterOperationV2Summary() {
    this->initializeModel();
}

OAIClusterOperationV2Summary::~OAIClusterOperationV2Summary() {}

void OAIClusterOperationV2Summary::initializeModel() {

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_operation_arn_isSet = false;
    m_operation_arn_isValid = false;

    m_operation_state_isSet = false;
    m_operation_state_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;
}

void OAIClusterOperationV2Summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterOperationV2Summary::fromJsonObject(QJsonObject json) {

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("ClusterType")]);
    m_cluster_type_isSet = !json[QString("ClusterType")].isNull() && m_cluster_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_operation_arn_isValid = ::OpenAPI::fromJsonValue(m_operation_arn, json[QString("OperationArn")]);
    m_operation_arn_isSet = !json[QString("OperationArn")].isNull() && m_operation_arn_isValid;

    m_operation_state_isValid = ::OpenAPI::fromJsonValue(m_operation_state, json[QString("OperationState")]);
    m_operation_state_isSet = !json[QString("OperationState")].isNull() && m_operation_state_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("OperationType")]);
    m_operation_type_isSet = !json[QString("OperationType")].isNull() && m_operation_type_isValid;
}

QString OAIClusterOperationV2Summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterOperationV2Summary::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_cluster_type.isSet()) {
        obj.insert(QString("ClusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_operation_arn_isSet) {
        obj.insert(QString("OperationArn"), ::OpenAPI::toJsonValue(m_operation_arn));
    }
    if (m_operation_state_isSet) {
        obj.insert(QString("OperationState"), ::OpenAPI::toJsonValue(m_operation_state));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("OperationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    return obj;
}

QString OAIClusterOperationV2Summary::getClusterArn() const {
    return m_cluster_arn;
}
void OAIClusterOperationV2Summary::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIClusterOperationV2Summary::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIClusterOperationV2Summary::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

OAIClusterType OAIClusterOperationV2Summary::getClusterType() const {
    return m_cluster_type;
}
void OAIClusterOperationV2Summary::setClusterType(const OAIClusterType &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAIClusterOperationV2Summary::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAIClusterOperationV2Summary::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QDateTime OAIClusterOperationV2Summary::getStartTime() const {
    return m_start_time;
}
void OAIClusterOperationV2Summary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIClusterOperationV2Summary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIClusterOperationV2Summary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIClusterOperationV2Summary::getEndTime() const {
    return m_end_time;
}
void OAIClusterOperationV2Summary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIClusterOperationV2Summary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIClusterOperationV2Summary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIClusterOperationV2Summary::getOperationArn() const {
    return m_operation_arn;
}
void OAIClusterOperationV2Summary::setOperationArn(const QString &operation_arn) {
    m_operation_arn = operation_arn;
    m_operation_arn_isSet = true;
}

bool OAIClusterOperationV2Summary::is_operation_arn_Set() const{
    return m_operation_arn_isSet;
}

bool OAIClusterOperationV2Summary::is_operation_arn_Valid() const{
    return m_operation_arn_isValid;
}

QString OAIClusterOperationV2Summary::getOperationState() const {
    return m_operation_state;
}
void OAIClusterOperationV2Summary::setOperationState(const QString &operation_state) {
    m_operation_state = operation_state;
    m_operation_state_isSet = true;
}

bool OAIClusterOperationV2Summary::is_operation_state_Set() const{
    return m_operation_state_isSet;
}

bool OAIClusterOperationV2Summary::is_operation_state_Valid() const{
    return m_operation_state_isValid;
}

QString OAIClusterOperationV2Summary::getOperationType() const {
    return m_operation_type;
}
void OAIClusterOperationV2Summary::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIClusterOperationV2Summary::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIClusterOperationV2Summary::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

bool OAIClusterOperationV2Summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterOperationV2Summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
