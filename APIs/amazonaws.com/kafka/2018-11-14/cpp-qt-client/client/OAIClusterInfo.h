/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClusterInfo.h
 *
 *              &lt;p&gt;Returns information about a cluster.&lt;/p&gt;          
 */

#ifndef OAIClusterInfo_H
#define OAIClusterInfo_H

#include <QJsonObject>

#include "OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo.h"
#include "OAIClusterInfo_BrokerNodeGroupInfo.h"
#include "OAIClusterInfo_LoggingInfo.h"
#include "OAIClusterInfo_OpenMonitoring.h"
#include "OAIClusterInfo_StateInfo.h"
#include "OAIClusterState.h"
#include "OAICreateClusterV2_request_provisioned_ClientAuthentication.h"
#include "OAICreateClusterV2_request_provisioned_EncryptionInfo.h"
#include "OAIEnhancedMonitoring.h"
#include "OAIStorageMode.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClusterInfo_BrokerNodeGroupInfo;
class OAICreateClusterV2_request_provisioned_ClientAuthentication;
class OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo;
class OAICreateClusterV2_request_provisioned_EncryptionInfo;
class OAIClusterInfo_OpenMonitoring;
class OAIClusterInfo_LoggingInfo;
class OAIClusterInfo_StateInfo;

class OAIClusterInfo : public OAIObject {
public:
    OAIClusterInfo();
    OAIClusterInfo(QString json);
    ~OAIClusterInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActiveOperationArn() const;
    void setActiveOperationArn(const QString &active_operation_arn);
    bool is_active_operation_arn_Set() const;
    bool is_active_operation_arn_Valid() const;

    OAIClusterInfo_BrokerNodeGroupInfo getBrokerNodeGroupInfo() const;
    void setBrokerNodeGroupInfo(const OAIClusterInfo_BrokerNodeGroupInfo &broker_node_group_info);
    bool is_broker_node_group_info_Set() const;
    bool is_broker_node_group_info_Valid() const;

    OAICreateClusterV2_request_provisioned_ClientAuthentication getClientAuthentication() const;
    void setClientAuthentication(const OAICreateClusterV2_request_provisioned_ClientAuthentication &client_authentication);
    bool is_client_authentication_Set() const;
    bool is_client_authentication_Valid() const;

    QString getClusterArn() const;
    void setClusterArn(const QString &cluster_arn);
    bool is_cluster_arn_Set() const;
    bool is_cluster_arn_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo getCurrentBrokerSoftwareInfo() const;
    void setCurrentBrokerSoftwareInfo(const OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo &current_broker_software_info);
    bool is_current_broker_software_info_Set() const;
    bool is_current_broker_software_info_Valid() const;

    QString getCurrentVersion() const;
    void setCurrentVersion(const QString &current_version);
    bool is_current_version_Set() const;
    bool is_current_version_Valid() const;

    OAICreateClusterV2_request_provisioned_EncryptionInfo getEncryptionInfo() const;
    void setEncryptionInfo(const OAICreateClusterV2_request_provisioned_EncryptionInfo &encryption_info);
    bool is_encryption_info_Set() const;
    bool is_encryption_info_Valid() const;

    OAIEnhancedMonitoring getEnhancedMonitoring() const;
    void setEnhancedMonitoring(const OAIEnhancedMonitoring &enhanced_monitoring);
    bool is_enhanced_monitoring_Set() const;
    bool is_enhanced_monitoring_Valid() const;

    OAIClusterInfo_OpenMonitoring getOpenMonitoring() const;
    void setOpenMonitoring(const OAIClusterInfo_OpenMonitoring &open_monitoring);
    bool is_open_monitoring_Set() const;
    bool is_open_monitoring_Valid() const;

    OAIClusterInfo_LoggingInfo getLoggingInfo() const;
    void setLoggingInfo(const OAIClusterInfo_LoggingInfo &logging_info);
    bool is_logging_info_Set() const;
    bool is_logging_info_Valid() const;

    qint32 getNumberOfBrokerNodes() const;
    void setNumberOfBrokerNodes(const qint32 &number_of_broker_nodes);
    bool is_number_of_broker_nodes_Set() const;
    bool is_number_of_broker_nodes_Valid() const;

    OAIClusterState getState() const;
    void setState(const OAIClusterState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIClusterInfo_StateInfo getStateInfo() const;
    void setStateInfo(const OAIClusterInfo_StateInfo &state_info);
    bool is_state_info_Set() const;
    bool is_state_info_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getZookeeperConnectString() const;
    void setZookeeperConnectString(const QString &zookeeper_connect_string);
    bool is_zookeeper_connect_string_Set() const;
    bool is_zookeeper_connect_string_Valid() const;

    QString getZookeeperConnectStringTls() const;
    void setZookeeperConnectStringTls(const QString &zookeeper_connect_string_tls);
    bool is_zookeeper_connect_string_tls_Set() const;
    bool is_zookeeper_connect_string_tls_Valid() const;

    OAIStorageMode getStorageMode() const;
    void setStorageMode(const OAIStorageMode &storage_mode);
    bool is_storage_mode_Set() const;
    bool is_storage_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_active_operation_arn;
    bool m_active_operation_arn_isSet;
    bool m_active_operation_arn_isValid;

    OAIClusterInfo_BrokerNodeGroupInfo m_broker_node_group_info;
    bool m_broker_node_group_info_isSet;
    bool m_broker_node_group_info_isValid;

    OAICreateClusterV2_request_provisioned_ClientAuthentication m_client_authentication;
    bool m_client_authentication_isSet;
    bool m_client_authentication_isValid;

    QString m_cluster_arn;
    bool m_cluster_arn_isSet;
    bool m_cluster_arn_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo m_current_broker_software_info;
    bool m_current_broker_software_info_isSet;
    bool m_current_broker_software_info_isValid;

    QString m_current_version;
    bool m_current_version_isSet;
    bool m_current_version_isValid;

    OAICreateClusterV2_request_provisioned_EncryptionInfo m_encryption_info;
    bool m_encryption_info_isSet;
    bool m_encryption_info_isValid;

    OAIEnhancedMonitoring m_enhanced_monitoring;
    bool m_enhanced_monitoring_isSet;
    bool m_enhanced_monitoring_isValid;

    OAIClusterInfo_OpenMonitoring m_open_monitoring;
    bool m_open_monitoring_isSet;
    bool m_open_monitoring_isValid;

    OAIClusterInfo_LoggingInfo m_logging_info;
    bool m_logging_info_isSet;
    bool m_logging_info_isValid;

    qint32 m_number_of_broker_nodes;
    bool m_number_of_broker_nodes_isSet;
    bool m_number_of_broker_nodes_isValid;

    OAIClusterState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIClusterInfo_StateInfo m_state_info;
    bool m_state_info_isSet;
    bool m_state_info_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_zookeeper_connect_string;
    bool m_zookeeper_connect_string_isSet;
    bool m_zookeeper_connect_string_isValid;

    QString m_zookeeper_connect_string_tls;
    bool m_zookeeper_connect_string_tls_isSet;
    bool m_zookeeper_connect_string_tls_isValid;

    OAIStorageMode m_storage_mode;
    bool m_storage_mode_isSet;
    bool m_storage_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClusterInfo)

#endif // OAIClusterInfo_H
