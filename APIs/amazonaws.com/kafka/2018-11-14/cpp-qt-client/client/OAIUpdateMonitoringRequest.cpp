/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMonitoringRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMonitoringRequest::OAIUpdateMonitoringRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMonitoringRequest::OAIUpdateMonitoringRequest() {
    this->initializeModel();
}

OAIUpdateMonitoringRequest::~OAIUpdateMonitoringRequest() {}

void OAIUpdateMonitoringRequest::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_enhanced_monitoring_isSet = false;
    m_enhanced_monitoring_isValid = false;

    m_open_monitoring_isSet = false;
    m_open_monitoring_isValid = false;

    m_logging_info_isSet = false;
    m_logging_info_isValid = false;
}

void OAIUpdateMonitoringRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMonitoringRequest::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_enhanced_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enhanced_monitoring, json[QString("EnhancedMonitoring")]);
    m_enhanced_monitoring_isSet = !json[QString("EnhancedMonitoring")].isNull() && m_enhanced_monitoring_isValid;

    m_open_monitoring_isValid = ::OpenAPI::fromJsonValue(m_open_monitoring, json[QString("OpenMonitoring")]);
    m_open_monitoring_isSet = !json[QString("OpenMonitoring")].isNull() && m_open_monitoring_isValid;

    m_logging_info_isValid = ::OpenAPI::fromJsonValue(m_logging_info, json[QString("LoggingInfo")]);
    m_logging_info_isSet = !json[QString("LoggingInfo")].isNull() && m_logging_info_isValid;
}

QString OAIUpdateMonitoringRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMonitoringRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_enhanced_monitoring.isSet()) {
        obj.insert(QString("EnhancedMonitoring"), ::OpenAPI::toJsonValue(m_enhanced_monitoring));
    }
    if (m_open_monitoring.isSet()) {
        obj.insert(QString("OpenMonitoring"), ::OpenAPI::toJsonValue(m_open_monitoring));
    }
    if (m_logging_info.isSet()) {
        obj.insert(QString("LoggingInfo"), ::OpenAPI::toJsonValue(m_logging_info));
    }
    return obj;
}

QString OAIUpdateMonitoringRequest::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateMonitoringRequest::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateMonitoringRequest::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateMonitoringRequest::is_current_version_Valid() const{
    return m_current_version_isValid;
}

OAIEnhancedMonitoring OAIUpdateMonitoringRequest::getEnhancedMonitoring() const {
    return m_enhanced_monitoring;
}
void OAIUpdateMonitoringRequest::setEnhancedMonitoring(const OAIEnhancedMonitoring &enhanced_monitoring) {
    m_enhanced_monitoring = enhanced_monitoring;
    m_enhanced_monitoring_isSet = true;
}

bool OAIUpdateMonitoringRequest::is_enhanced_monitoring_Set() const{
    return m_enhanced_monitoring_isSet;
}

bool OAIUpdateMonitoringRequest::is_enhanced_monitoring_Valid() const{
    return m_enhanced_monitoring_isValid;
}

OAICreateClusterV2_request_provisioned_OpenMonitoring OAIUpdateMonitoringRequest::getOpenMonitoring() const {
    return m_open_monitoring;
}
void OAIUpdateMonitoringRequest::setOpenMonitoring(const OAICreateClusterV2_request_provisioned_OpenMonitoring &open_monitoring) {
    m_open_monitoring = open_monitoring;
    m_open_monitoring_isSet = true;
}

bool OAIUpdateMonitoringRequest::is_open_monitoring_Set() const{
    return m_open_monitoring_isSet;
}

bool OAIUpdateMonitoringRequest::is_open_monitoring_Valid() const{
    return m_open_monitoring_isValid;
}

OAIClusterInfo_LoggingInfo OAIUpdateMonitoringRequest::getLoggingInfo() const {
    return m_logging_info;
}
void OAIUpdateMonitoringRequest::setLoggingInfo(const OAIClusterInfo_LoggingInfo &logging_info) {
    m_logging_info = logging_info;
    m_logging_info_isSet = true;
}

bool OAIUpdateMonitoringRequest::is_logging_info_Set() const{
    return m_logging_info_isSet;
}

bool OAIUpdateMonitoringRequest::is_logging_info_Valid() const{
    return m_logging_info_isValid;
}

bool OAIUpdateMonitoringRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMonitoringRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_version_isValid && true;
}

} // namespace OpenAPI
