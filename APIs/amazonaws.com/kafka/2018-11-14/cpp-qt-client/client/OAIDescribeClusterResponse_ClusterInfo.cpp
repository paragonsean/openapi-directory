/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeClusterResponse_ClusterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeClusterResponse_ClusterInfo::OAIDescribeClusterResponse_ClusterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeClusterResponse_ClusterInfo::OAIDescribeClusterResponse_ClusterInfo() {
    this->initializeModel();
}

OAIDescribeClusterResponse_ClusterInfo::~OAIDescribeClusterResponse_ClusterInfo() {}

void OAIDescribeClusterResponse_ClusterInfo::initializeModel() {

    m_active_operation_arn_isSet = false;
    m_active_operation_arn_isValid = false;

    m_broker_node_group_info_isSet = false;
    m_broker_node_group_info_isValid = false;

    m_client_authentication_isSet = false;
    m_client_authentication_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_broker_software_info_isSet = false;
    m_current_broker_software_info_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_enhanced_monitoring_isSet = false;
    m_enhanced_monitoring_isValid = false;

    m_open_monitoring_isSet = false;
    m_open_monitoring_isValid = false;

    m_logging_info_isSet = false;
    m_logging_info_isValid = false;

    m_number_of_broker_nodes_isSet = false;
    m_number_of_broker_nodes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_info_isSet = false;
    m_state_info_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_zookeeper_connect_string_isSet = false;
    m_zookeeper_connect_string_isValid = false;

    m_zookeeper_connect_string_tls_isSet = false;
    m_zookeeper_connect_string_tls_isValid = false;

    m_storage_mode_isSet = false;
    m_storage_mode_isValid = false;
}

void OAIDescribeClusterResponse_ClusterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeClusterResponse_ClusterInfo::fromJsonObject(QJsonObject json) {

    m_active_operation_arn_isValid = ::OpenAPI::fromJsonValue(m_active_operation_arn, json[QString("ActiveOperationArn")]);
    m_active_operation_arn_isSet = !json[QString("ActiveOperationArn")].isNull() && m_active_operation_arn_isValid;

    m_broker_node_group_info_isValid = ::OpenAPI::fromJsonValue(m_broker_node_group_info, json[QString("BrokerNodeGroupInfo")]);
    m_broker_node_group_info_isSet = !json[QString("BrokerNodeGroupInfo")].isNull() && m_broker_node_group_info_isValid;

    m_client_authentication_isValid = ::OpenAPI::fromJsonValue(m_client_authentication, json[QString("ClientAuthentication")]);
    m_client_authentication_isSet = !json[QString("ClientAuthentication")].isNull() && m_client_authentication_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_current_broker_software_info_isValid = ::OpenAPI::fromJsonValue(m_current_broker_software_info, json[QString("CurrentBrokerSoftwareInfo")]);
    m_current_broker_software_info_isSet = !json[QString("CurrentBrokerSoftwareInfo")].isNull() && m_current_broker_software_info_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("EncryptionInfo")]);
    m_encryption_info_isSet = !json[QString("EncryptionInfo")].isNull() && m_encryption_info_isValid;

    m_enhanced_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enhanced_monitoring, json[QString("EnhancedMonitoring")]);
    m_enhanced_monitoring_isSet = !json[QString("EnhancedMonitoring")].isNull() && m_enhanced_monitoring_isValid;

    m_open_monitoring_isValid = ::OpenAPI::fromJsonValue(m_open_monitoring, json[QString("OpenMonitoring")]);
    m_open_monitoring_isSet = !json[QString("OpenMonitoring")].isNull() && m_open_monitoring_isValid;

    m_logging_info_isValid = ::OpenAPI::fromJsonValue(m_logging_info, json[QString("LoggingInfo")]);
    m_logging_info_isSet = !json[QString("LoggingInfo")].isNull() && m_logging_info_isValid;

    m_number_of_broker_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_broker_nodes, json[QString("NumberOfBrokerNodes")]);
    m_number_of_broker_nodes_isSet = !json[QString("NumberOfBrokerNodes")].isNull() && m_number_of_broker_nodes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_info_isValid = ::OpenAPI::fromJsonValue(m_state_info, json[QString("StateInfo")]);
    m_state_info_isSet = !json[QString("StateInfo")].isNull() && m_state_info_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_zookeeper_connect_string_isValid = ::OpenAPI::fromJsonValue(m_zookeeper_connect_string, json[QString("ZookeeperConnectString")]);
    m_zookeeper_connect_string_isSet = !json[QString("ZookeeperConnectString")].isNull() && m_zookeeper_connect_string_isValid;

    m_zookeeper_connect_string_tls_isValid = ::OpenAPI::fromJsonValue(m_zookeeper_connect_string_tls, json[QString("ZookeeperConnectStringTls")]);
    m_zookeeper_connect_string_tls_isSet = !json[QString("ZookeeperConnectStringTls")].isNull() && m_zookeeper_connect_string_tls_isValid;

    m_storage_mode_isValid = ::OpenAPI::fromJsonValue(m_storage_mode, json[QString("StorageMode")]);
    m_storage_mode_isSet = !json[QString("StorageMode")].isNull() && m_storage_mode_isValid;
}

QString OAIDescribeClusterResponse_ClusterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeClusterResponse_ClusterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_active_operation_arn_isSet) {
        obj.insert(QString("ActiveOperationArn"), ::OpenAPI::toJsonValue(m_active_operation_arn));
    }
    if (m_broker_node_group_info.isSet()) {
        obj.insert(QString("BrokerNodeGroupInfo"), ::OpenAPI::toJsonValue(m_broker_node_group_info));
    }
    if (m_client_authentication.isSet()) {
        obj.insert(QString("ClientAuthentication"), ::OpenAPI::toJsonValue(m_client_authentication));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_broker_software_info.isSet()) {
        obj.insert(QString("CurrentBrokerSoftwareInfo"), ::OpenAPI::toJsonValue(m_current_broker_software_info));
    }
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("EncryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_enhanced_monitoring.isSet()) {
        obj.insert(QString("EnhancedMonitoring"), ::OpenAPI::toJsonValue(m_enhanced_monitoring));
    }
    if (m_open_monitoring.isSet()) {
        obj.insert(QString("OpenMonitoring"), ::OpenAPI::toJsonValue(m_open_monitoring));
    }
    if (m_logging_info.isSet()) {
        obj.insert(QString("LoggingInfo"), ::OpenAPI::toJsonValue(m_logging_info));
    }
    if (m_number_of_broker_nodes_isSet) {
        obj.insert(QString("NumberOfBrokerNodes"), ::OpenAPI::toJsonValue(m_number_of_broker_nodes));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_info.isSet()) {
        obj.insert(QString("StateInfo"), ::OpenAPI::toJsonValue(m_state_info));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_zookeeper_connect_string_isSet) {
        obj.insert(QString("ZookeeperConnectString"), ::OpenAPI::toJsonValue(m_zookeeper_connect_string));
    }
    if (m_zookeeper_connect_string_tls_isSet) {
        obj.insert(QString("ZookeeperConnectStringTls"), ::OpenAPI::toJsonValue(m_zookeeper_connect_string_tls));
    }
    if (m_storage_mode.isSet()) {
        obj.insert(QString("StorageMode"), ::OpenAPI::toJsonValue(m_storage_mode));
    }
    return obj;
}

QString OAIDescribeClusterResponse_ClusterInfo::getActiveOperationArn() const {
    return m_active_operation_arn;
}
void OAIDescribeClusterResponse_ClusterInfo::setActiveOperationArn(const QString &active_operation_arn) {
    m_active_operation_arn = active_operation_arn;
    m_active_operation_arn_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_active_operation_arn_Set() const{
    return m_active_operation_arn_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_active_operation_arn_Valid() const{
    return m_active_operation_arn_isValid;
}

OAIClusterInfo_BrokerNodeGroupInfo OAIDescribeClusterResponse_ClusterInfo::getBrokerNodeGroupInfo() const {
    return m_broker_node_group_info;
}
void OAIDescribeClusterResponse_ClusterInfo::setBrokerNodeGroupInfo(const OAIClusterInfo_BrokerNodeGroupInfo &broker_node_group_info) {
    m_broker_node_group_info = broker_node_group_info;
    m_broker_node_group_info_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_broker_node_group_info_Set() const{
    return m_broker_node_group_info_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_broker_node_group_info_Valid() const{
    return m_broker_node_group_info_isValid;
}

OAICreateClusterV2_request_provisioned_ClientAuthentication OAIDescribeClusterResponse_ClusterInfo::getClientAuthentication() const {
    return m_client_authentication;
}
void OAIDescribeClusterResponse_ClusterInfo::setClientAuthentication(const OAICreateClusterV2_request_provisioned_ClientAuthentication &client_authentication) {
    m_client_authentication = client_authentication;
    m_client_authentication_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_client_authentication_Set() const{
    return m_client_authentication_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_client_authentication_Valid() const{
    return m_client_authentication_isValid;
}

QString OAIDescribeClusterResponse_ClusterInfo::getClusterArn() const {
    return m_cluster_arn;
}
void OAIDescribeClusterResponse_ClusterInfo::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAIDescribeClusterResponse_ClusterInfo::getClusterName() const {
    return m_cluster_name;
}
void OAIDescribeClusterResponse_ClusterInfo::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QDateTime OAIDescribeClusterResponse_ClusterInfo::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeClusterResponse_ClusterInfo::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo OAIDescribeClusterResponse_ClusterInfo::getCurrentBrokerSoftwareInfo() const {
    return m_current_broker_software_info;
}
void OAIDescribeClusterResponse_ClusterInfo::setCurrentBrokerSoftwareInfo(const OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo &current_broker_software_info) {
    m_current_broker_software_info = current_broker_software_info;
    m_current_broker_software_info_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_current_broker_software_info_Set() const{
    return m_current_broker_software_info_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_current_broker_software_info_Valid() const{
    return m_current_broker_software_info_isValid;
}

QString OAIDescribeClusterResponse_ClusterInfo::getCurrentVersion() const {
    return m_current_version;
}
void OAIDescribeClusterResponse_ClusterInfo::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_current_version_Valid() const{
    return m_current_version_isValid;
}

OAICreateClusterV2_request_provisioned_EncryptionInfo OAIDescribeClusterResponse_ClusterInfo::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIDescribeClusterResponse_ClusterInfo::setEncryptionInfo(const OAICreateClusterV2_request_provisioned_EncryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

OAIEnhancedMonitoring OAIDescribeClusterResponse_ClusterInfo::getEnhancedMonitoring() const {
    return m_enhanced_monitoring;
}
void OAIDescribeClusterResponse_ClusterInfo::setEnhancedMonitoring(const OAIEnhancedMonitoring &enhanced_monitoring) {
    m_enhanced_monitoring = enhanced_monitoring;
    m_enhanced_monitoring_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_enhanced_monitoring_Set() const{
    return m_enhanced_monitoring_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_enhanced_monitoring_Valid() const{
    return m_enhanced_monitoring_isValid;
}

OAIClusterInfo_OpenMonitoring OAIDescribeClusterResponse_ClusterInfo::getOpenMonitoring() const {
    return m_open_monitoring;
}
void OAIDescribeClusterResponse_ClusterInfo::setOpenMonitoring(const OAIClusterInfo_OpenMonitoring &open_monitoring) {
    m_open_monitoring = open_monitoring;
    m_open_monitoring_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_open_monitoring_Set() const{
    return m_open_monitoring_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_open_monitoring_Valid() const{
    return m_open_monitoring_isValid;
}

OAIClusterInfo_LoggingInfo OAIDescribeClusterResponse_ClusterInfo::getLoggingInfo() const {
    return m_logging_info;
}
void OAIDescribeClusterResponse_ClusterInfo::setLoggingInfo(const OAIClusterInfo_LoggingInfo &logging_info) {
    m_logging_info = logging_info;
    m_logging_info_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_logging_info_Set() const{
    return m_logging_info_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_logging_info_Valid() const{
    return m_logging_info_isValid;
}

qint32 OAIDescribeClusterResponse_ClusterInfo::getNumberOfBrokerNodes() const {
    return m_number_of_broker_nodes;
}
void OAIDescribeClusterResponse_ClusterInfo::setNumberOfBrokerNodes(const qint32 &number_of_broker_nodes) {
    m_number_of_broker_nodes = number_of_broker_nodes;
    m_number_of_broker_nodes_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_number_of_broker_nodes_Set() const{
    return m_number_of_broker_nodes_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_number_of_broker_nodes_Valid() const{
    return m_number_of_broker_nodes_isValid;
}

OAIClusterState OAIDescribeClusterResponse_ClusterInfo::getState() const {
    return m_state;
}
void OAIDescribeClusterResponse_ClusterInfo::setState(const OAIClusterState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_state_Valid() const{
    return m_state_isValid;
}

OAIClusterInfo_StateInfo OAIDescribeClusterResponse_ClusterInfo::getStateInfo() const {
    return m_state_info;
}
void OAIDescribeClusterResponse_ClusterInfo::setStateInfo(const OAIClusterInfo_StateInfo &state_info) {
    m_state_info = state_info;
    m_state_info_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_state_info_Set() const{
    return m_state_info_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_state_info_Valid() const{
    return m_state_info_isValid;
}

QMap OAIDescribeClusterResponse_ClusterInfo::getTags() const {
    return m_tags;
}
void OAIDescribeClusterResponse_ClusterInfo::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeClusterResponse_ClusterInfo::getZookeeperConnectString() const {
    return m_zookeeper_connect_string;
}
void OAIDescribeClusterResponse_ClusterInfo::setZookeeperConnectString(const QString &zookeeper_connect_string) {
    m_zookeeper_connect_string = zookeeper_connect_string;
    m_zookeeper_connect_string_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_zookeeper_connect_string_Set() const{
    return m_zookeeper_connect_string_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_zookeeper_connect_string_Valid() const{
    return m_zookeeper_connect_string_isValid;
}

QString OAIDescribeClusterResponse_ClusterInfo::getZookeeperConnectStringTls() const {
    return m_zookeeper_connect_string_tls;
}
void OAIDescribeClusterResponse_ClusterInfo::setZookeeperConnectStringTls(const QString &zookeeper_connect_string_tls) {
    m_zookeeper_connect_string_tls = zookeeper_connect_string_tls;
    m_zookeeper_connect_string_tls_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_zookeeper_connect_string_tls_Set() const{
    return m_zookeeper_connect_string_tls_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_zookeeper_connect_string_tls_Valid() const{
    return m_zookeeper_connect_string_tls_isValid;
}

OAIStorageMode OAIDescribeClusterResponse_ClusterInfo::getStorageMode() const {
    return m_storage_mode;
}
void OAIDescribeClusterResponse_ClusterInfo::setStorageMode(const OAIStorageMode &storage_mode) {
    m_storage_mode = storage_mode;
    m_storage_mode_isSet = true;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_storage_mode_Set() const{
    return m_storage_mode_isSet;
}

bool OAIDescribeClusterResponse_ClusterInfo::is_storage_mode_Valid() const{
    return m_storage_mode_isValid;
}

bool OAIDescribeClusterResponse_ClusterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_operation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_node_group_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_broker_software_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_broker_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zookeeper_connect_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zookeeper_connect_string_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeClusterResponse_ClusterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
