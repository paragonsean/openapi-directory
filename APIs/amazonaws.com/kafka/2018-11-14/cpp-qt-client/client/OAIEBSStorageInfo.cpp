/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEBSStorageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEBSStorageInfo::OAIEBSStorageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEBSStorageInfo::OAIEBSStorageInfo() {
    this->initializeModel();
}

OAIEBSStorageInfo::~OAIEBSStorageInfo() {}

void OAIEBSStorageInfo::initializeModel() {

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_volume_size_isSet = false;
    m_volume_size_isValid = false;
}

void OAIEBSStorageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEBSStorageInfo::fromJsonObject(QJsonObject json) {

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_volume_size_isValid = ::OpenAPI::fromJsonValue(m_volume_size, json[QString("VolumeSize")]);
    m_volume_size_isSet = !json[QString("VolumeSize")].isNull() && m_volume_size_isValid;
}

QString OAIEBSStorageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEBSStorageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_volume_size_isSet) {
        obj.insert(QString("VolumeSize"), ::OpenAPI::toJsonValue(m_volume_size));
    }
    return obj;
}

OAIBrokerEBSVolumeInfo_ProvisionedThroughput OAIEBSStorageInfo::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAIEBSStorageInfo::setProvisionedThroughput(const OAIBrokerEBSVolumeInfo_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAIEBSStorageInfo::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAIEBSStorageInfo::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

qint32 OAIEBSStorageInfo::getVolumeSize() const {
    return m_volume_size;
}
void OAIEBSStorageInfo::setVolumeSize(const qint32 &volume_size) {
    m_volume_size = volume_size;
    m_volume_size_isSet = true;
}

bool OAIEBSStorageInfo::is_volume_size_Set() const{
    return m_volume_size_isSet;
}

bool OAIEBSStorageInfo::is_volume_size_Valid() const{
    return m_volume_size_isValid;
}

bool OAIEBSStorageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEBSStorageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
