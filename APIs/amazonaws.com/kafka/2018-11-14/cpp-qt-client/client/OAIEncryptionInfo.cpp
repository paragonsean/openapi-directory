/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionInfo::OAIEncryptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionInfo::OAIEncryptionInfo() {
    this->initializeModel();
}

OAIEncryptionInfo::~OAIEncryptionInfo() {}

void OAIEncryptionInfo::initializeModel() {

    m_encryption_at_rest_isSet = false;
    m_encryption_at_rest_isValid = false;

    m_encryption_in_transit_isSet = false;
    m_encryption_in_transit_isValid = false;
}

void OAIEncryptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionInfo::fromJsonObject(QJsonObject json) {

    m_encryption_at_rest_isValid = ::OpenAPI::fromJsonValue(m_encryption_at_rest, json[QString("EncryptionAtRest")]);
    m_encryption_at_rest_isSet = !json[QString("EncryptionAtRest")].isNull() && m_encryption_at_rest_isValid;

    m_encryption_in_transit_isValid = ::OpenAPI::fromJsonValue(m_encryption_in_transit, json[QString("EncryptionInTransit")]);
    m_encryption_in_transit_isSet = !json[QString("EncryptionInTransit")].isNull() && m_encryption_in_transit_isValid;
}

QString OAIEncryptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_at_rest.isSet()) {
        obj.insert(QString("EncryptionAtRest"), ::OpenAPI::toJsonValue(m_encryption_at_rest));
    }
    if (m_encryption_in_transit.isSet()) {
        obj.insert(QString("EncryptionInTransit"), ::OpenAPI::toJsonValue(m_encryption_in_transit));
    }
    return obj;
}

OAICreateCluster_request_encryptionInfo_EncryptionAtRest OAIEncryptionInfo::getEncryptionAtRest() const {
    return m_encryption_at_rest;
}
void OAIEncryptionInfo::setEncryptionAtRest(const OAICreateCluster_request_encryptionInfo_EncryptionAtRest &encryption_at_rest) {
    m_encryption_at_rest = encryption_at_rest;
    m_encryption_at_rest_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_at_rest_Set() const{
    return m_encryption_at_rest_isSet;
}

bool OAIEncryptionInfo::is_encryption_at_rest_Valid() const{
    return m_encryption_at_rest_isValid;
}

OAICreateCluster_request_encryptionInfo_EncryptionInTransit OAIEncryptionInfo::getEncryptionInTransit() const {
    return m_encryption_in_transit;
}
void OAIEncryptionInfo::setEncryptionInTransit(const OAICreateCluster_request_encryptionInfo_EncryptionInTransit &encryption_in_transit) {
    m_encryption_in_transit = encryption_in_transit;
    m_encryption_in_transit_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_in_transit_Set() const{
    return m_encryption_in_transit_isSet;
}

bool OAIEncryptionInfo::is_encryption_in_transit_Valid() const{
    return m_encryption_in_transit_isValid;
}

bool OAIEncryptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_at_rest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_in_transit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
