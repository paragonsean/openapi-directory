/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerless.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerless::OAIServerless(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerless::OAIServerless() {
    this->initializeModel();
}

OAIServerless::~OAIServerless() {}

void OAIServerless::initializeModel() {

    m_vpc_configs_isSet = false;
    m_vpc_configs_isValid = false;

    m_client_authentication_isSet = false;
    m_client_authentication_isValid = false;
}

void OAIServerless::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerless::fromJsonObject(QJsonObject json) {

    m_vpc_configs_isValid = ::OpenAPI::fromJsonValue(m_vpc_configs, json[QString("VpcConfigs")]);
    m_vpc_configs_isSet = !json[QString("VpcConfigs")].isNull() && m_vpc_configs_isValid;

    m_client_authentication_isValid = ::OpenAPI::fromJsonValue(m_client_authentication, json[QString("ClientAuthentication")]);
    m_client_authentication_isSet = !json[QString("ClientAuthentication")].isNull() && m_client_authentication_isValid;
}

QString OAIServerless::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerless::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_configs.isSet()) {
        obj.insert(QString("VpcConfigs"), ::OpenAPI::toJsonValue(m_vpc_configs));
    }
    if (m_client_authentication.isSet()) {
        obj.insert(QString("ClientAuthentication"), ::OpenAPI::toJsonValue(m_client_authentication));
    }
    return obj;
}

QList OAIServerless::getVpcConfigs() const {
    return m_vpc_configs;
}
void OAIServerless::setVpcConfigs(const QList &vpc_configs) {
    m_vpc_configs = vpc_configs;
    m_vpc_configs_isSet = true;
}

bool OAIServerless::is_vpc_configs_Set() const{
    return m_vpc_configs_isSet;
}

bool OAIServerless::is_vpc_configs_Valid() const{
    return m_vpc_configs_isValid;
}

OAICreateClusterV2_request_serverless_ClientAuthentication OAIServerless::getClientAuthentication() const {
    return m_client_authentication;
}
void OAIServerless::setClientAuthentication(const OAICreateClusterV2_request_serverless_ClientAuthentication &client_authentication) {
    m_client_authentication = client_authentication;
    m_client_authentication_isSet = true;
}

bool OAIServerless::is_client_authentication_Set() const{
    return m_client_authentication_isSet;
}

bool OAIServerless::is_client_authentication_Valid() const{
    return m_client_authentication_isValid;
}

bool OAIServerless::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerless::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_configs_isValid && true;
}

} // namespace OpenAPI
