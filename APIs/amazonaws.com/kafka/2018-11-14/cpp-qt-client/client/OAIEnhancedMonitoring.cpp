/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnhancedMonitoring.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnhancedMonitoring::OAIEnhancedMonitoring(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnhancedMonitoring::OAIEnhancedMonitoring() {
    this->initializeModel();
}

OAIEnhancedMonitoring::~OAIEnhancedMonitoring() {}

void OAIEnhancedMonitoring::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnhancedMonitoring::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnhancedMonitoring::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEFAULT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnhancedMonitoring::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PER_BROKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnhancedMonitoring::PER_BROKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PER_TOPIC_PER_BROKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnhancedMonitoring::PER_TOPIC_PER_BROKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PER_TOPIC_PER_PARTITION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnhancedMonitoring::PER_TOPIC_PER_PARTITION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnhancedMonitoring::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnhancedMonitoring::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnhancedMonitoring::DEFAULT:
            val = "DEFAULT";
            break;
        case eOAIEnhancedMonitoring::PER_BROKER:
            val = "PER_BROKER";
            break;
        case eOAIEnhancedMonitoring::PER_TOPIC_PER_BROKER:
            val = "PER_TOPIC_PER_BROKER";
            break;
        case eOAIEnhancedMonitoring::PER_TOPIC_PER_PARTITION:
            val = "PER_TOPIC_PER_PARTITION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnhancedMonitoring::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnhancedMonitoring::eOAIEnhancedMonitoring OAIEnhancedMonitoring::getValue() const {
    return m_value;
}

void OAIEnhancedMonitoring::setValue(const OAIEnhancedMonitoring::eOAIEnhancedMonitoring& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnhancedMonitoring::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnhancedMonitoring::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
