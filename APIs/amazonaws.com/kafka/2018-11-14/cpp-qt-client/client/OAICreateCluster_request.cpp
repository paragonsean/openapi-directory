/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCluster_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCluster_request::OAICreateCluster_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCluster_request::OAICreateCluster_request() {
    this->initializeModel();
}

OAICreateCluster_request::~OAICreateCluster_request() {}

void OAICreateCluster_request::initializeModel() {

    m_broker_node_group_info_isSet = false;
    m_broker_node_group_info_isValid = false;

    m_client_authentication_isSet = false;
    m_client_authentication_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_configuration_info_isSet = false;
    m_configuration_info_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_enhanced_monitoring_isSet = false;
    m_enhanced_monitoring_isValid = false;

    m_open_monitoring_isSet = false;
    m_open_monitoring_isValid = false;

    m_kafka_version_isSet = false;
    m_kafka_version_isValid = false;

    m_logging_info_isSet = false;
    m_logging_info_isValid = false;

    m_number_of_broker_nodes_isSet = false;
    m_number_of_broker_nodes_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_storage_mode_isSet = false;
    m_storage_mode_isValid = false;
}

void OAICreateCluster_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCluster_request::fromJsonObject(QJsonObject json) {

    m_broker_node_group_info_isValid = ::OpenAPI::fromJsonValue(m_broker_node_group_info, json[QString("brokerNodeGroupInfo")]);
    m_broker_node_group_info_isSet = !json[QString("brokerNodeGroupInfo")].isNull() && m_broker_node_group_info_isValid;

    m_client_authentication_isValid = ::OpenAPI::fromJsonValue(m_client_authentication, json[QString("clientAuthentication")]);
    m_client_authentication_isSet = !json[QString("clientAuthentication")].isNull() && m_client_authentication_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_configuration_info_isValid = ::OpenAPI::fromJsonValue(m_configuration_info, json[QString("configurationInfo")]);
    m_configuration_info_isSet = !json[QString("configurationInfo")].isNull() && m_configuration_info_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;

    m_enhanced_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enhanced_monitoring, json[QString("enhancedMonitoring")]);
    m_enhanced_monitoring_isSet = !json[QString("enhancedMonitoring")].isNull() && m_enhanced_monitoring_isValid;

    m_open_monitoring_isValid = ::OpenAPI::fromJsonValue(m_open_monitoring, json[QString("openMonitoring")]);
    m_open_monitoring_isSet = !json[QString("openMonitoring")].isNull() && m_open_monitoring_isValid;

    m_kafka_version_isValid = ::OpenAPI::fromJsonValue(m_kafka_version, json[QString("kafkaVersion")]);
    m_kafka_version_isSet = !json[QString("kafkaVersion")].isNull() && m_kafka_version_isValid;

    m_logging_info_isValid = ::OpenAPI::fromJsonValue(m_logging_info, json[QString("loggingInfo")]);
    m_logging_info_isSet = !json[QString("loggingInfo")].isNull() && m_logging_info_isValid;

    m_number_of_broker_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_broker_nodes, json[QString("numberOfBrokerNodes")]);
    m_number_of_broker_nodes_isSet = !json[QString("numberOfBrokerNodes")].isNull() && m_number_of_broker_nodes_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_storage_mode_isValid = ::OpenAPI::fromJsonValue(m_storage_mode, json[QString("storageMode")]);
    m_storage_mode_isSet = !json[QString("storageMode")].isNull() && m_storage_mode_isValid;
}

QString OAICreateCluster_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCluster_request::asJsonObject() const {
    QJsonObject obj;
    if (m_broker_node_group_info.isSet()) {
        obj.insert(QString("brokerNodeGroupInfo"), ::OpenAPI::toJsonValue(m_broker_node_group_info));
    }
    if (m_client_authentication.isSet()) {
        obj.insert(QString("clientAuthentication"), ::OpenAPI::toJsonValue(m_client_authentication));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_configuration_info.isSet()) {
        obj.insert(QString("configurationInfo"), ::OpenAPI::toJsonValue(m_configuration_info));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_enhanced_monitoring_isSet) {
        obj.insert(QString("enhancedMonitoring"), ::OpenAPI::toJsonValue(m_enhanced_monitoring));
    }
    if (m_open_monitoring.isSet()) {
        obj.insert(QString("openMonitoring"), ::OpenAPI::toJsonValue(m_open_monitoring));
    }
    if (m_kafka_version_isSet) {
        obj.insert(QString("kafkaVersion"), ::OpenAPI::toJsonValue(m_kafka_version));
    }
    if (m_logging_info.isSet()) {
        obj.insert(QString("loggingInfo"), ::OpenAPI::toJsonValue(m_logging_info));
    }
    if (m_number_of_broker_nodes_isSet) {
        obj.insert(QString("numberOfBrokerNodes"), ::OpenAPI::toJsonValue(m_number_of_broker_nodes));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_storage_mode_isSet) {
        obj.insert(QString("storageMode"), ::OpenAPI::toJsonValue(m_storage_mode));
    }
    return obj;
}

OAICreateCluster_request_brokerNodeGroupInfo OAICreateCluster_request::getBrokerNodeGroupInfo() const {
    return m_broker_node_group_info;
}
void OAICreateCluster_request::setBrokerNodeGroupInfo(const OAICreateCluster_request_brokerNodeGroupInfo &broker_node_group_info) {
    m_broker_node_group_info = broker_node_group_info;
    m_broker_node_group_info_isSet = true;
}

bool OAICreateCluster_request::is_broker_node_group_info_Set() const{
    return m_broker_node_group_info_isSet;
}

bool OAICreateCluster_request::is_broker_node_group_info_Valid() const{
    return m_broker_node_group_info_isValid;
}

OAICreateCluster_request_clientAuthentication OAICreateCluster_request::getClientAuthentication() const {
    return m_client_authentication;
}
void OAICreateCluster_request::setClientAuthentication(const OAICreateCluster_request_clientAuthentication &client_authentication) {
    m_client_authentication = client_authentication;
    m_client_authentication_isSet = true;
}

bool OAICreateCluster_request::is_client_authentication_Set() const{
    return m_client_authentication_isSet;
}

bool OAICreateCluster_request::is_client_authentication_Valid() const{
    return m_client_authentication_isValid;
}

QString OAICreateCluster_request::getClusterName() const {
    return m_cluster_name;
}
void OAICreateCluster_request::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateCluster_request::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateCluster_request::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

OAICreateCluster_request_configurationInfo OAICreateCluster_request::getConfigurationInfo() const {
    return m_configuration_info;
}
void OAICreateCluster_request::setConfigurationInfo(const OAICreateCluster_request_configurationInfo &configuration_info) {
    m_configuration_info = configuration_info;
    m_configuration_info_isSet = true;
}

bool OAICreateCluster_request::is_configuration_info_Set() const{
    return m_configuration_info_isSet;
}

bool OAICreateCluster_request::is_configuration_info_Valid() const{
    return m_configuration_info_isValid;
}

OAICreateCluster_request_encryptionInfo OAICreateCluster_request::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAICreateCluster_request::setEncryptionInfo(const OAICreateCluster_request_encryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAICreateCluster_request::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAICreateCluster_request::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

QString OAICreateCluster_request::getEnhancedMonitoring() const {
    return m_enhanced_monitoring;
}
void OAICreateCluster_request::setEnhancedMonitoring(const QString &enhanced_monitoring) {
    m_enhanced_monitoring = enhanced_monitoring;
    m_enhanced_monitoring_isSet = true;
}

bool OAICreateCluster_request::is_enhanced_monitoring_Set() const{
    return m_enhanced_monitoring_isSet;
}

bool OAICreateCluster_request::is_enhanced_monitoring_Valid() const{
    return m_enhanced_monitoring_isValid;
}

OAICreateCluster_request_openMonitoring OAICreateCluster_request::getOpenMonitoring() const {
    return m_open_monitoring;
}
void OAICreateCluster_request::setOpenMonitoring(const OAICreateCluster_request_openMonitoring &open_monitoring) {
    m_open_monitoring = open_monitoring;
    m_open_monitoring_isSet = true;
}

bool OAICreateCluster_request::is_open_monitoring_Set() const{
    return m_open_monitoring_isSet;
}

bool OAICreateCluster_request::is_open_monitoring_Valid() const{
    return m_open_monitoring_isValid;
}

QString OAICreateCluster_request::getKafkaVersion() const {
    return m_kafka_version;
}
void OAICreateCluster_request::setKafkaVersion(const QString &kafka_version) {
    m_kafka_version = kafka_version;
    m_kafka_version_isSet = true;
}

bool OAICreateCluster_request::is_kafka_version_Set() const{
    return m_kafka_version_isSet;
}

bool OAICreateCluster_request::is_kafka_version_Valid() const{
    return m_kafka_version_isValid;
}

OAICreateCluster_request_loggingInfo OAICreateCluster_request::getLoggingInfo() const {
    return m_logging_info;
}
void OAICreateCluster_request::setLoggingInfo(const OAICreateCluster_request_loggingInfo &logging_info) {
    m_logging_info = logging_info;
    m_logging_info_isSet = true;
}

bool OAICreateCluster_request::is_logging_info_Set() const{
    return m_logging_info_isSet;
}

bool OAICreateCluster_request::is_logging_info_Valid() const{
    return m_logging_info_isValid;
}

qint32 OAICreateCluster_request::getNumberOfBrokerNodes() const {
    return m_number_of_broker_nodes;
}
void OAICreateCluster_request::setNumberOfBrokerNodes(const qint32 &number_of_broker_nodes) {
    m_number_of_broker_nodes = number_of_broker_nodes;
    m_number_of_broker_nodes_isSet = true;
}

bool OAICreateCluster_request::is_number_of_broker_nodes_Set() const{
    return m_number_of_broker_nodes_isSet;
}

bool OAICreateCluster_request::is_number_of_broker_nodes_Valid() const{
    return m_number_of_broker_nodes_isValid;
}

QMap<QString, QString> OAICreateCluster_request::getTags() const {
    return m_tags;
}
void OAICreateCluster_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCluster_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCluster_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateCluster_request::getStorageMode() const {
    return m_storage_mode;
}
void OAICreateCluster_request::setStorageMode(const QString &storage_mode) {
    m_storage_mode = storage_mode;
    m_storage_mode_isSet = true;
}

bool OAICreateCluster_request::is_storage_mode_Set() const{
    return m_storage_mode_isSet;
}

bool OAICreateCluster_request::is_storage_mode_Valid() const{
    return m_storage_mode_isValid;
}

bool OAICreateCluster_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broker_node_group_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kafka_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_broker_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCluster_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_broker_node_group_info_isValid && m_cluster_name_isValid && m_kafka_version_isValid && m_number_of_broker_nodes_isValid && true;
}

} // namespace OpenAPI
