/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInfo::OAINodeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInfo::OAINodeInfo() {
    this->initializeModel();
}

OAINodeInfo::~OAINodeInfo() {}

void OAINodeInfo::initializeModel() {

    m_added_to_cluster_time_isSet = false;
    m_added_to_cluster_time_isValid = false;

    m_broker_node_info_isSet = false;
    m_broker_node_info_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_node_arn_isSet = false;
    m_node_arn_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_zookeeper_node_info_isSet = false;
    m_zookeeper_node_info_isValid = false;
}

void OAINodeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInfo::fromJsonObject(QJsonObject json) {

    m_added_to_cluster_time_isValid = ::OpenAPI::fromJsonValue(m_added_to_cluster_time, json[QString("AddedToClusterTime")]);
    m_added_to_cluster_time_isSet = !json[QString("AddedToClusterTime")].isNull() && m_added_to_cluster_time_isValid;

    m_broker_node_info_isValid = ::OpenAPI::fromJsonValue(m_broker_node_info, json[QString("BrokerNodeInfo")]);
    m_broker_node_info_isSet = !json[QString("BrokerNodeInfo")].isNull() && m_broker_node_info_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_node_arn_isValid = ::OpenAPI::fromJsonValue(m_node_arn, json[QString("NodeARN")]);
    m_node_arn_isSet = !json[QString("NodeARN")].isNull() && m_node_arn_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_zookeeper_node_info_isValid = ::OpenAPI::fromJsonValue(m_zookeeper_node_info, json[QString("ZookeeperNodeInfo")]);
    m_zookeeper_node_info_isSet = !json[QString("ZookeeperNodeInfo")].isNull() && m_zookeeper_node_info_isValid;
}

QString OAINodeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_added_to_cluster_time_isSet) {
        obj.insert(QString("AddedToClusterTime"), ::OpenAPI::toJsonValue(m_added_to_cluster_time));
    }
    if (m_broker_node_info.isSet()) {
        obj.insert(QString("BrokerNodeInfo"), ::OpenAPI::toJsonValue(m_broker_node_info));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_node_arn_isSet) {
        obj.insert(QString("NodeARN"), ::OpenAPI::toJsonValue(m_node_arn));
    }
    if (m_node_type.isSet()) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_zookeeper_node_info.isSet()) {
        obj.insert(QString("ZookeeperNodeInfo"), ::OpenAPI::toJsonValue(m_zookeeper_node_info));
    }
    return obj;
}

QString OAINodeInfo::getAddedToClusterTime() const {
    return m_added_to_cluster_time;
}
void OAINodeInfo::setAddedToClusterTime(const QString &added_to_cluster_time) {
    m_added_to_cluster_time = added_to_cluster_time;
    m_added_to_cluster_time_isSet = true;
}

bool OAINodeInfo::is_added_to_cluster_time_Set() const{
    return m_added_to_cluster_time_isSet;
}

bool OAINodeInfo::is_added_to_cluster_time_Valid() const{
    return m_added_to_cluster_time_isValid;
}

OAINodeInfo_BrokerNodeInfo OAINodeInfo::getBrokerNodeInfo() const {
    return m_broker_node_info;
}
void OAINodeInfo::setBrokerNodeInfo(const OAINodeInfo_BrokerNodeInfo &broker_node_info) {
    m_broker_node_info = broker_node_info;
    m_broker_node_info_isSet = true;
}

bool OAINodeInfo::is_broker_node_info_Set() const{
    return m_broker_node_info_isSet;
}

bool OAINodeInfo::is_broker_node_info_Valid() const{
    return m_broker_node_info_isValid;
}

QString OAINodeInfo::getInstanceType() const {
    return m_instance_type;
}
void OAINodeInfo::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAINodeInfo::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAINodeInfo::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAINodeInfo::getNodeArn() const {
    return m_node_arn;
}
void OAINodeInfo::setNodeArn(const QString &node_arn) {
    m_node_arn = node_arn;
    m_node_arn_isSet = true;
}

bool OAINodeInfo::is_node_arn_Set() const{
    return m_node_arn_isSet;
}

bool OAINodeInfo::is_node_arn_Valid() const{
    return m_node_arn_isValid;
}

OAINodeType OAINodeInfo::getNodeType() const {
    return m_node_type;
}
void OAINodeInfo::setNodeType(const OAINodeType &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAINodeInfo::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAINodeInfo::is_node_type_Valid() const{
    return m_node_type_isValid;
}

OAINodeInfo_ZookeeperNodeInfo OAINodeInfo::getZookeeperNodeInfo() const {
    return m_zookeeper_node_info;
}
void OAINodeInfo::setZookeeperNodeInfo(const OAINodeInfo_ZookeeperNodeInfo &zookeeper_node_info) {
    m_zookeeper_node_info = zookeeper_node_info;
    m_zookeeper_node_info_isSet = true;
}

bool OAINodeInfo::is_zookeeper_node_info_Set() const{
    return m_zookeeper_node_info_isSet;
}

bool OAINodeInfo::is_zookeeper_node_info_Valid() const{
    return m_zookeeper_node_info_isValid;
}

bool OAINodeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_to_cluster_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_node_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zookeeper_node_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
