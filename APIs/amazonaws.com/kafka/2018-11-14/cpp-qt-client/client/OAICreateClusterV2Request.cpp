/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterV2Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterV2Request::OAICreateClusterV2Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterV2Request::OAICreateClusterV2Request() {
    this->initializeModel();
}

OAICreateClusterV2Request::~OAICreateClusterV2Request() {}

void OAICreateClusterV2Request::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_provisioned_isSet = false;
    m_provisioned_isValid = false;

    m_serverless_isSet = false;
    m_serverless_isValid = false;
}

void OAICreateClusterV2Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterV2Request::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_provisioned_isValid = ::OpenAPI::fromJsonValue(m_provisioned, json[QString("Provisioned")]);
    m_provisioned_isSet = !json[QString("Provisioned")].isNull() && m_provisioned_isValid;

    m_serverless_isValid = ::OpenAPI::fromJsonValue(m_serverless, json[QString("Serverless")]);
    m_serverless_isSet = !json[QString("Serverless")].isNull() && m_serverless_isValid;
}

QString OAICreateClusterV2Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterV2Request::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_provisioned.isSet()) {
        obj.insert(QString("Provisioned"), ::OpenAPI::toJsonValue(m_provisioned));
    }
    if (m_serverless.isSet()) {
        obj.insert(QString("Serverless"), ::OpenAPI::toJsonValue(m_serverless));
    }
    return obj;
}

QString OAICreateClusterV2Request::getClusterName() const {
    return m_cluster_name;
}
void OAICreateClusterV2Request::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateClusterV2Request::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateClusterV2Request::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QMap OAICreateClusterV2Request::getTags() const {
    return m_tags;
}
void OAICreateClusterV2Request::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClusterV2Request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClusterV2Request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateClusterV2Request_Provisioned OAICreateClusterV2Request::getProvisioned() const {
    return m_provisioned;
}
void OAICreateClusterV2Request::setProvisioned(const OAICreateClusterV2Request_Provisioned &provisioned) {
    m_provisioned = provisioned;
    m_provisioned_isSet = true;
}

bool OAICreateClusterV2Request::is_provisioned_Set() const{
    return m_provisioned_isSet;
}

bool OAICreateClusterV2Request::is_provisioned_Valid() const{
    return m_provisioned_isValid;
}

OAICreateClusterV2Request_Serverless OAICreateClusterV2Request::getServerless() const {
    return m_serverless;
}
void OAICreateClusterV2Request::setServerless(const OAICreateClusterV2Request_Serverless &serverless) {
    m_serverless = serverless;
    m_serverless_isSet = true;
}

bool OAICreateClusterV2Request::is_serverless_Set() const{
    return m_serverless_isSet;
}

bool OAICreateClusterV2Request::is_serverless_Valid() const{
    return m_serverless_isValid;
}

bool OAICreateClusterV2Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterV2Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_name_isValid && true;
}

} // namespace OpenAPI
