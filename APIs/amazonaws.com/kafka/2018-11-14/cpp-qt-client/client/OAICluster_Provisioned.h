/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICluster_Provisioned.h
 *
 * 
 */

#ifndef OAICluster_Provisioned_H
#define OAICluster_Provisioned_H

#include <QJsonObject>

#include "OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo.h"
#include "OAICreateClusterV2_request_provisioned_ClientAuthentication.h"
#include "OAICreateClusterV2_request_provisioned_EncryptionInfo.h"
#include "OAICreateClusterV2_request_provisioned_LoggingInfo.h"
#include "OAICreateClusterV2_request_provisioned_OpenMonitoring.h"
#include "OAIEnhancedMonitoring.h"
#include "OAIProvisioned_CurrentBrokerSoftwareInfo.h"
#include "OAIStorageMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo;
class OAIProvisioned_CurrentBrokerSoftwareInfo;
class OAICreateClusterV2_request_provisioned_ClientAuthentication;
class OAICreateClusterV2_request_provisioned_EncryptionInfo;
class OAICreateClusterV2_request_provisioned_OpenMonitoring;
class OAICreateClusterV2_request_provisioned_LoggingInfo;

class OAICluster_Provisioned : public OAIObject {
public:
    OAICluster_Provisioned();
    OAICluster_Provisioned(QString json);
    ~OAICluster_Provisioned() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo getBrokerNodeGroupInfo() const;
    void setBrokerNodeGroupInfo(const OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo &broker_node_group_info);
    bool is_broker_node_group_info_Set() const;
    bool is_broker_node_group_info_Valid() const;

    OAIProvisioned_CurrentBrokerSoftwareInfo getCurrentBrokerSoftwareInfo() const;
    void setCurrentBrokerSoftwareInfo(const OAIProvisioned_CurrentBrokerSoftwareInfo &current_broker_software_info);
    bool is_current_broker_software_info_Set() const;
    bool is_current_broker_software_info_Valid() const;

    OAICreateClusterV2_request_provisioned_ClientAuthentication getClientAuthentication() const;
    void setClientAuthentication(const OAICreateClusterV2_request_provisioned_ClientAuthentication &client_authentication);
    bool is_client_authentication_Set() const;
    bool is_client_authentication_Valid() const;

    OAICreateClusterV2_request_provisioned_EncryptionInfo getEncryptionInfo() const;
    void setEncryptionInfo(const OAICreateClusterV2_request_provisioned_EncryptionInfo &encryption_info);
    bool is_encryption_info_Set() const;
    bool is_encryption_info_Valid() const;

    OAIEnhancedMonitoring getEnhancedMonitoring() const;
    void setEnhancedMonitoring(const OAIEnhancedMonitoring &enhanced_monitoring);
    bool is_enhanced_monitoring_Set() const;
    bool is_enhanced_monitoring_Valid() const;

    OAICreateClusterV2_request_provisioned_OpenMonitoring getOpenMonitoring() const;
    void setOpenMonitoring(const OAICreateClusterV2_request_provisioned_OpenMonitoring &open_monitoring);
    bool is_open_monitoring_Set() const;
    bool is_open_monitoring_Valid() const;

    OAICreateClusterV2_request_provisioned_LoggingInfo getLoggingInfo() const;
    void setLoggingInfo(const OAICreateClusterV2_request_provisioned_LoggingInfo &logging_info);
    bool is_logging_info_Set() const;
    bool is_logging_info_Valid() const;

    qint32 getNumberOfBrokerNodes() const;
    void setNumberOfBrokerNodes(const qint32 &number_of_broker_nodes);
    bool is_number_of_broker_nodes_Set() const;
    bool is_number_of_broker_nodes_Valid() const;

    QString getZookeeperConnectString() const;
    void setZookeeperConnectString(const QString &zookeeper_connect_string);
    bool is_zookeeper_connect_string_Set() const;
    bool is_zookeeper_connect_string_Valid() const;

    QString getZookeeperConnectStringTls() const;
    void setZookeeperConnectStringTls(const QString &zookeeper_connect_string_tls);
    bool is_zookeeper_connect_string_tls_Set() const;
    bool is_zookeeper_connect_string_tls_Valid() const;

    OAIStorageMode getStorageMode() const;
    void setStorageMode(const OAIStorageMode &storage_mode);
    bool is_storage_mode_Set() const;
    bool is_storage_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo m_broker_node_group_info;
    bool m_broker_node_group_info_isSet;
    bool m_broker_node_group_info_isValid;

    OAIProvisioned_CurrentBrokerSoftwareInfo m_current_broker_software_info;
    bool m_current_broker_software_info_isSet;
    bool m_current_broker_software_info_isValid;

    OAICreateClusterV2_request_provisioned_ClientAuthentication m_client_authentication;
    bool m_client_authentication_isSet;
    bool m_client_authentication_isValid;

    OAICreateClusterV2_request_provisioned_EncryptionInfo m_encryption_info;
    bool m_encryption_info_isSet;
    bool m_encryption_info_isValid;

    OAIEnhancedMonitoring m_enhanced_monitoring;
    bool m_enhanced_monitoring_isSet;
    bool m_enhanced_monitoring_isValid;

    OAICreateClusterV2_request_provisioned_OpenMonitoring m_open_monitoring;
    bool m_open_monitoring_isSet;
    bool m_open_monitoring_isValid;

    OAICreateClusterV2_request_provisioned_LoggingInfo m_logging_info;
    bool m_logging_info_isSet;
    bool m_logging_info_isValid;

    qint32 m_number_of_broker_nodes;
    bool m_number_of_broker_nodes_isSet;
    bool m_number_of_broker_nodes_isValid;

    QString m_zookeeper_connect_string;
    bool m_zookeeper_connect_string_isSet;
    bool m_zookeeper_connect_string_isValid;

    QString m_zookeeper_connect_string_tls;
    bool m_zookeeper_connect_string_tls_isSet;
    bool m_zookeeper_connect_string_tls_isValid;

    OAIStorageMode m_storage_mode;
    bool m_storage_mode_isSet;
    bool m_storage_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICluster_Provisioned)

#endif // OAICluster_Provisioned_H
