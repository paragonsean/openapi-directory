/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInfo_BrokerNodeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInfo_BrokerNodeInfo::OAINodeInfo_BrokerNodeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInfo_BrokerNodeInfo::OAINodeInfo_BrokerNodeInfo() {
    this->initializeModel();
}

OAINodeInfo_BrokerNodeInfo::~OAINodeInfo_BrokerNodeInfo() {}

void OAINodeInfo_BrokerNodeInfo::initializeModel() {

    m_attached_eniid_isSet = false;
    m_attached_eniid_isValid = false;

    m_broker_id_isSet = false;
    m_broker_id_isValid = false;

    m_client_subnet_isSet = false;
    m_client_subnet_isValid = false;

    m_client_vpc_ip_address_isSet = false;
    m_client_vpc_ip_address_isValid = false;

    m_current_broker_software_info_isSet = false;
    m_current_broker_software_info_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;
}

void OAINodeInfo_BrokerNodeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInfo_BrokerNodeInfo::fromJsonObject(QJsonObject json) {

    m_attached_eniid_isValid = ::OpenAPI::fromJsonValue(m_attached_eniid, json[QString("AttachedENIId")]);
    m_attached_eniid_isSet = !json[QString("AttachedENIId")].isNull() && m_attached_eniid_isValid;

    m_broker_id_isValid = ::OpenAPI::fromJsonValue(m_broker_id, json[QString("BrokerId")]);
    m_broker_id_isSet = !json[QString("BrokerId")].isNull() && m_broker_id_isValid;

    m_client_subnet_isValid = ::OpenAPI::fromJsonValue(m_client_subnet, json[QString("ClientSubnet")]);
    m_client_subnet_isSet = !json[QString("ClientSubnet")].isNull() && m_client_subnet_isValid;

    m_client_vpc_ip_address_isValid = ::OpenAPI::fromJsonValue(m_client_vpc_ip_address, json[QString("ClientVpcIpAddress")]);
    m_client_vpc_ip_address_isSet = !json[QString("ClientVpcIpAddress")].isNull() && m_client_vpc_ip_address_isValid;

    m_current_broker_software_info_isValid = ::OpenAPI::fromJsonValue(m_current_broker_software_info, json[QString("CurrentBrokerSoftwareInfo")]);
    m_current_broker_software_info_isSet = !json[QString("CurrentBrokerSoftwareInfo")].isNull() && m_current_broker_software_info_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;
}

QString OAINodeInfo_BrokerNodeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInfo_BrokerNodeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_eniid_isSet) {
        obj.insert(QString("AttachedENIId"), ::OpenAPI::toJsonValue(m_attached_eniid));
    }
    if (m_broker_id_isSet) {
        obj.insert(QString("BrokerId"), ::OpenAPI::toJsonValue(m_broker_id));
    }
    if (m_client_subnet_isSet) {
        obj.insert(QString("ClientSubnet"), ::OpenAPI::toJsonValue(m_client_subnet));
    }
    if (m_client_vpc_ip_address_isSet) {
        obj.insert(QString("ClientVpcIpAddress"), ::OpenAPI::toJsonValue(m_client_vpc_ip_address));
    }
    if (m_current_broker_software_info.isSet()) {
        obj.insert(QString("CurrentBrokerSoftwareInfo"), ::OpenAPI::toJsonValue(m_current_broker_software_info));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    return obj;
}

QString OAINodeInfo_BrokerNodeInfo::getAttachedEniid() const {
    return m_attached_eniid;
}
void OAINodeInfo_BrokerNodeInfo::setAttachedEniid(const QString &attached_eniid) {
    m_attached_eniid = attached_eniid;
    m_attached_eniid_isSet = true;
}

bool OAINodeInfo_BrokerNodeInfo::is_attached_eniid_Set() const{
    return m_attached_eniid_isSet;
}

bool OAINodeInfo_BrokerNodeInfo::is_attached_eniid_Valid() const{
    return m_attached_eniid_isValid;
}

double OAINodeInfo_BrokerNodeInfo::getBrokerId() const {
    return m_broker_id;
}
void OAINodeInfo_BrokerNodeInfo::setBrokerId(const double &broker_id) {
    m_broker_id = broker_id;
    m_broker_id_isSet = true;
}

bool OAINodeInfo_BrokerNodeInfo::is_broker_id_Set() const{
    return m_broker_id_isSet;
}

bool OAINodeInfo_BrokerNodeInfo::is_broker_id_Valid() const{
    return m_broker_id_isValid;
}

QString OAINodeInfo_BrokerNodeInfo::getClientSubnet() const {
    return m_client_subnet;
}
void OAINodeInfo_BrokerNodeInfo::setClientSubnet(const QString &client_subnet) {
    m_client_subnet = client_subnet;
    m_client_subnet_isSet = true;
}

bool OAINodeInfo_BrokerNodeInfo::is_client_subnet_Set() const{
    return m_client_subnet_isSet;
}

bool OAINodeInfo_BrokerNodeInfo::is_client_subnet_Valid() const{
    return m_client_subnet_isValid;
}

QString OAINodeInfo_BrokerNodeInfo::getClientVpcIpAddress() const {
    return m_client_vpc_ip_address;
}
void OAINodeInfo_BrokerNodeInfo::setClientVpcIpAddress(const QString &client_vpc_ip_address) {
    m_client_vpc_ip_address = client_vpc_ip_address;
    m_client_vpc_ip_address_isSet = true;
}

bool OAINodeInfo_BrokerNodeInfo::is_client_vpc_ip_address_Set() const{
    return m_client_vpc_ip_address_isSet;
}

bool OAINodeInfo_BrokerNodeInfo::is_client_vpc_ip_address_Valid() const{
    return m_client_vpc_ip_address_isValid;
}

OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo OAINodeInfo_BrokerNodeInfo::getCurrentBrokerSoftwareInfo() const {
    return m_current_broker_software_info;
}
void OAINodeInfo_BrokerNodeInfo::setCurrentBrokerSoftwareInfo(const OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo &current_broker_software_info) {
    m_current_broker_software_info = current_broker_software_info;
    m_current_broker_software_info_isSet = true;
}

bool OAINodeInfo_BrokerNodeInfo::is_current_broker_software_info_Set() const{
    return m_current_broker_software_info_isSet;
}

bool OAINodeInfo_BrokerNodeInfo::is_current_broker_software_info_Valid() const{
    return m_current_broker_software_info_isValid;
}

QList OAINodeInfo_BrokerNodeInfo::getEndpoints() const {
    return m_endpoints;
}
void OAINodeInfo_BrokerNodeInfo::setEndpoints(const QList &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAINodeInfo_BrokerNodeInfo::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAINodeInfo_BrokerNodeInfo::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

bool OAINodeInfo_BrokerNodeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_eniid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_vpc_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_broker_software_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInfo_BrokerNodeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
