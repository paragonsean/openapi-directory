/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcConnectionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcConnectionInfo::OAIVpcConnectionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcConnectionInfo::OAIVpcConnectionInfo() {
    this->initializeModel();
}

OAIVpcConnectionInfo::~OAIVpcConnectionInfo() {}

void OAIVpcConnectionInfo::initializeModel() {

    m_vpc_connection_arn_isSet = false;
    m_vpc_connection_arn_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_user_identity_isSet = false;
    m_user_identity_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIVpcConnectionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcConnectionInfo::fromJsonObject(QJsonObject json) {

    m_vpc_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_arn, json[QString("VpcConnectionArn")]);
    m_vpc_connection_arn_isSet = !json[QString("VpcConnectionArn")].isNull() && m_vpc_connection_arn_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_user_identity_isValid = ::OpenAPI::fromJsonValue(m_user_identity, json[QString("UserIdentity")]);
    m_user_identity_isSet = !json[QString("UserIdentity")].isNull() && m_user_identity_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIVpcConnectionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcConnectionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_arn_isSet) {
        obj.insert(QString("VpcConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_connection_arn));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_user_identity.isSet()) {
        obj.insert(QString("UserIdentity"), ::OpenAPI::toJsonValue(m_user_identity));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIVpcConnectionInfo::getVpcConnectionArn() const {
    return m_vpc_connection_arn;
}
void OAIVpcConnectionInfo::setVpcConnectionArn(const QString &vpc_connection_arn) {
    m_vpc_connection_arn = vpc_connection_arn;
    m_vpc_connection_arn_isSet = true;
}

bool OAIVpcConnectionInfo::is_vpc_connection_arn_Set() const{
    return m_vpc_connection_arn_isSet;
}

bool OAIVpcConnectionInfo::is_vpc_connection_arn_Valid() const{
    return m_vpc_connection_arn_isValid;
}

QString OAIVpcConnectionInfo::getOwner() const {
    return m_owner;
}
void OAIVpcConnectionInfo::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIVpcConnectionInfo::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIVpcConnectionInfo::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIVpcConnectionInfo_UserIdentity OAIVpcConnectionInfo::getUserIdentity() const {
    return m_user_identity;
}
void OAIVpcConnectionInfo::setUserIdentity(const OAIVpcConnectionInfo_UserIdentity &user_identity) {
    m_user_identity = user_identity;
    m_user_identity_isSet = true;
}

bool OAIVpcConnectionInfo::is_user_identity_Set() const{
    return m_user_identity_isSet;
}

bool OAIVpcConnectionInfo::is_user_identity_Valid() const{
    return m_user_identity_isValid;
}

QDateTime OAIVpcConnectionInfo::getCreationTime() const {
    return m_creation_time;
}
void OAIVpcConnectionInfo::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIVpcConnectionInfo::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIVpcConnectionInfo::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIVpcConnectionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcConnectionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
