/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCluster_request_loggingInfo_BrokerLogs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCluster_request_loggingInfo_BrokerLogs::OAICreateCluster_request_loggingInfo_BrokerLogs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCluster_request_loggingInfo_BrokerLogs::OAICreateCluster_request_loggingInfo_BrokerLogs() {
    this->initializeModel();
}

OAICreateCluster_request_loggingInfo_BrokerLogs::~OAICreateCluster_request_loggingInfo_BrokerLogs() {}

void OAICreateCluster_request_loggingInfo_BrokerLogs::initializeModel() {

    m_cloud_watch_logs_isSet = false;
    m_cloud_watch_logs_isValid = false;

    m_firehose_isSet = false;
    m_firehose_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;
}

void OAICreateCluster_request_loggingInfo_BrokerLogs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCluster_request_loggingInfo_BrokerLogs::fromJsonObject(QJsonObject json) {

    m_cloud_watch_logs_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs, json[QString("CloudWatchLogs")]);
    m_cloud_watch_logs_isSet = !json[QString("CloudWatchLogs")].isNull() && m_cloud_watch_logs_isValid;

    m_firehose_isValid = ::OpenAPI::fromJsonValue(m_firehose, json[QString("Firehose")]);
    m_firehose_isSet = !json[QString("Firehose")].isNull() && m_firehose_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;
}

QString OAICreateCluster_request_loggingInfo_BrokerLogs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCluster_request_loggingInfo_BrokerLogs::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_logs.isSet()) {
        obj.insert(QString("CloudWatchLogs"), ::OpenAPI::toJsonValue(m_cloud_watch_logs));
    }
    if (m_firehose.isSet()) {
        obj.insert(QString("Firehose"), ::OpenAPI::toJsonValue(m_firehose));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    return obj;
}

OAIBrokerLogs_CloudWatchLogs OAICreateCluster_request_loggingInfo_BrokerLogs::getCloudWatchLogs() const {
    return m_cloud_watch_logs;
}
void OAICreateCluster_request_loggingInfo_BrokerLogs::setCloudWatchLogs(const OAIBrokerLogs_CloudWatchLogs &cloud_watch_logs) {
    m_cloud_watch_logs = cloud_watch_logs;
    m_cloud_watch_logs_isSet = true;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::is_cloud_watch_logs_Set() const{
    return m_cloud_watch_logs_isSet;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::is_cloud_watch_logs_Valid() const{
    return m_cloud_watch_logs_isValid;
}

OAIBrokerLogs_Firehose OAICreateCluster_request_loggingInfo_BrokerLogs::getFirehose() const {
    return m_firehose;
}
void OAICreateCluster_request_loggingInfo_BrokerLogs::setFirehose(const OAIBrokerLogs_Firehose &firehose) {
    m_firehose = firehose;
    m_firehose_isSet = true;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::is_firehose_Set() const{
    return m_firehose_isSet;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::is_firehose_Valid() const{
    return m_firehose_isValid;
}

OAIBrokerLogs_S3 OAICreateCluster_request_loggingInfo_BrokerLogs::getS3() const {
    return m_s3;
}
void OAICreateCluster_request_loggingInfo_BrokerLogs::setS3(const OAIBrokerLogs_S3 &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::is_s3_Valid() const{
    return m_s3_isValid;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firehose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCluster_request_loggingInfo_BrokerLogs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
