/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConfiguration_request::OAICreateConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConfiguration_request::OAICreateConfiguration_request() {
    this->initializeModel();
}

OAICreateConfiguration_request::~OAICreateConfiguration_request() {}

void OAICreateConfiguration_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_kafka_versions_isSet = false;
    m_kafka_versions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_properties_isSet = false;
    m_server_properties_isValid = false;
}

void OAICreateConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConfiguration_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_kafka_versions_isValid = ::OpenAPI::fromJsonValue(m_kafka_versions, json[QString("kafkaVersions")]);
    m_kafka_versions_isSet = !json[QString("kafkaVersions")].isNull() && m_kafka_versions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_server_properties_isValid = ::OpenAPI::fromJsonValue(m_server_properties, json[QString("serverProperties")]);
    m_server_properties_isSet = !json[QString("serverProperties")].isNull() && m_server_properties_isValid;
}

QString OAICreateConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kafka_versions.size() > 0) {
        obj.insert(QString("kafkaVersions"), ::OpenAPI::toJsonValue(m_kafka_versions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_properties_isSet) {
        obj.insert(QString("serverProperties"), ::OpenAPI::toJsonValue(m_server_properties));
    }
    return obj;
}

QString OAICreateConfiguration_request::getDescription() const {
    return m_description;
}
void OAICreateConfiguration_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateConfiguration_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateConfiguration_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAICreateConfiguration_request::getKafkaVersions() const {
    return m_kafka_versions;
}
void OAICreateConfiguration_request::setKafkaVersions(const QList<QString> &kafka_versions) {
    m_kafka_versions = kafka_versions;
    m_kafka_versions_isSet = true;
}

bool OAICreateConfiguration_request::is_kafka_versions_Set() const{
    return m_kafka_versions_isSet;
}

bool OAICreateConfiguration_request::is_kafka_versions_Valid() const{
    return m_kafka_versions_isValid;
}

QString OAICreateConfiguration_request::getName() const {
    return m_name;
}
void OAICreateConfiguration_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConfiguration_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConfiguration_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateConfiguration_request::getServerProperties() const {
    return m_server_properties;
}
void OAICreateConfiguration_request::setServerProperties(const QString &server_properties) {
    m_server_properties = server_properties;
    m_server_properties_isSet = true;
}

bool OAICreateConfiguration_request::is_server_properties_Set() const{
    return m_server_properties_isSet;
}

bool OAICreateConfiguration_request::is_server_properties_Valid() const{
    return m_server_properties_isValid;
}

bool OAICreateConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kafka_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_properties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_server_properties_isValid && true;
}

} // namespace OpenAPI
