/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrometheusInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrometheusInfo::OAIPrometheusInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrometheusInfo::OAIPrometheusInfo() {
    this->initializeModel();
}

OAIPrometheusInfo::~OAIPrometheusInfo() {}

void OAIPrometheusInfo::initializeModel() {

    m_jmx_exporter_isSet = false;
    m_jmx_exporter_isValid = false;

    m_node_exporter_isSet = false;
    m_node_exporter_isValid = false;
}

void OAIPrometheusInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrometheusInfo::fromJsonObject(QJsonObject json) {

    m_jmx_exporter_isValid = ::OpenAPI::fromJsonValue(m_jmx_exporter, json[QString("JmxExporter")]);
    m_jmx_exporter_isSet = !json[QString("JmxExporter")].isNull() && m_jmx_exporter_isValid;

    m_node_exporter_isValid = ::OpenAPI::fromJsonValue(m_node_exporter, json[QString("NodeExporter")]);
    m_node_exporter_isSet = !json[QString("NodeExporter")].isNull() && m_node_exporter_isValid;
}

QString OAIPrometheusInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrometheusInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_jmx_exporter.isSet()) {
        obj.insert(QString("JmxExporter"), ::OpenAPI::toJsonValue(m_jmx_exporter));
    }
    if (m_node_exporter.isSet()) {
        obj.insert(QString("NodeExporter"), ::OpenAPI::toJsonValue(m_node_exporter));
    }
    return obj;
}

OAIPrometheusInfo_JmxExporter OAIPrometheusInfo::getJmxExporter() const {
    return m_jmx_exporter;
}
void OAIPrometheusInfo::setJmxExporter(const OAIPrometheusInfo_JmxExporter &jmx_exporter) {
    m_jmx_exporter = jmx_exporter;
    m_jmx_exporter_isSet = true;
}

bool OAIPrometheusInfo::is_jmx_exporter_Set() const{
    return m_jmx_exporter_isSet;
}

bool OAIPrometheusInfo::is_jmx_exporter_Valid() const{
    return m_jmx_exporter_isValid;
}

OAIPrometheusInfo_NodeExporter OAIPrometheusInfo::getNodeExporter() const {
    return m_node_exporter;
}
void OAIPrometheusInfo::setNodeExporter(const OAIPrometheusInfo_NodeExporter &node_exporter) {
    m_node_exporter = node_exporter;
    m_node_exporter_isSet = true;
}

bool OAIPrometheusInfo::is_node_exporter_Set() const{
    return m_node_exporter_isSet;
}

bool OAIPrometheusInfo::is_node_exporter_Valid() const{
    return m_node_exporter_isValid;
}

bool OAIPrometheusInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jmx_exporter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_exporter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrometheusInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
