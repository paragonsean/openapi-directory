/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVpcConnection_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVpcConnection_request::OAICreateVpcConnection_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVpcConnection_request::OAICreateVpcConnection_request() {
    this->initializeModel();
}

OAICreateVpcConnection_request::~OAICreateVpcConnection_request() {}

void OAICreateVpcConnection_request::initializeModel() {

    m_target_cluster_arn_isSet = false;
    m_target_cluster_arn_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_client_subnets_isSet = false;
    m_client_subnets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVpcConnection_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVpcConnection_request::fromJsonObject(QJsonObject json) {

    m_target_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_target_cluster_arn, json[QString("targetClusterArn")]);
    m_target_cluster_arn_isSet = !json[QString("targetClusterArn")].isNull() && m_target_cluster_arn_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;

    m_client_subnets_isValid = ::OpenAPI::fromJsonValue(m_client_subnets, json[QString("clientSubnets")]);
    m_client_subnets_isSet = !json[QString("clientSubnets")].isNull() && m_client_subnets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("securityGroups")]);
    m_security_groups_isSet = !json[QString("securityGroups")].isNull() && m_security_groups_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateVpcConnection_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVpcConnection_request::asJsonObject() const {
    QJsonObject obj;
    if (m_target_cluster_arn_isSet) {
        obj.insert(QString("targetClusterArn"), ::OpenAPI::toJsonValue(m_target_cluster_arn));
    }
    if (m_authentication_isSet) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_client_subnets.size() > 0) {
        obj.insert(QString("clientSubnets"), ::OpenAPI::toJsonValue(m_client_subnets));
    }
    if (m_security_groups.size() > 0) {
        obj.insert(QString("securityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateVpcConnection_request::getTargetClusterArn() const {
    return m_target_cluster_arn;
}
void OAICreateVpcConnection_request::setTargetClusterArn(const QString &target_cluster_arn) {
    m_target_cluster_arn = target_cluster_arn;
    m_target_cluster_arn_isSet = true;
}

bool OAICreateVpcConnection_request::is_target_cluster_arn_Set() const{
    return m_target_cluster_arn_isSet;
}

bool OAICreateVpcConnection_request::is_target_cluster_arn_Valid() const{
    return m_target_cluster_arn_isValid;
}

QString OAICreateVpcConnection_request::getAuthentication() const {
    return m_authentication;
}
void OAICreateVpcConnection_request::setAuthentication(const QString &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAICreateVpcConnection_request::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAICreateVpcConnection_request::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAICreateVpcConnection_request::getVpcId() const {
    return m_vpc_id;
}
void OAICreateVpcConnection_request::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateVpcConnection_request::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateVpcConnection_request::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QList<QString> OAICreateVpcConnection_request::getClientSubnets() const {
    return m_client_subnets;
}
void OAICreateVpcConnection_request::setClientSubnets(const QList<QString> &client_subnets) {
    m_client_subnets = client_subnets;
    m_client_subnets_isSet = true;
}

bool OAICreateVpcConnection_request::is_client_subnets_Set() const{
    return m_client_subnets_isSet;
}

bool OAICreateVpcConnection_request::is_client_subnets_Valid() const{
    return m_client_subnets_isValid;
}

QList<QString> OAICreateVpcConnection_request::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateVpcConnection_request::setSecurityGroups(const QList<QString> &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateVpcConnection_request::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateVpcConnection_request::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QMap<QString, QString> OAICreateVpcConnection_request::getTags() const {
    return m_tags;
}
void OAICreateVpcConnection_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVpcConnection_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVpcConnection_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVpcConnection_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVpcConnection_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_cluster_arn_isValid && m_authentication_isValid && m_vpc_id_isValid && m_client_subnets_isValid && m_security_groups_isValid && true;
}

} // namespace OpenAPI
