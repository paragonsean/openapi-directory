/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutClusterPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutClusterPolicyRequest::OAIPutClusterPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutClusterPolicyRequest::OAIPutClusterPolicyRequest() {
    this->initializeModel();
}

OAIPutClusterPolicyRequest::~OAIPutClusterPolicyRequest() {}

void OAIPutClusterPolicyRequest::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPutClusterPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutClusterPolicyRequest::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;
}

QString OAIPutClusterPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutClusterPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPutClusterPolicyRequest::getCurrentVersion() const {
    return m_current_version;
}
void OAIPutClusterPolicyRequest::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIPutClusterPolicyRequest::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIPutClusterPolicyRequest::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIPutClusterPolicyRequest::getPolicy() const {
    return m_policy;
}
void OAIPutClusterPolicyRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutClusterPolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutClusterPolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutClusterPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutClusterPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
