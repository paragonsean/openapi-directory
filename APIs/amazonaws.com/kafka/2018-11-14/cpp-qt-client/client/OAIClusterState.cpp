/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterState::OAIClusterState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterState::OAIClusterState() {
    this->initializeModel();
}

OAIClusterState::~OAIClusterState() {}

void OAIClusterState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIClusterState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIClusterState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEALING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::HEALING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAINTENANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::MAINTENANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBOOTING_BROKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::REBOOTING_BROKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIClusterState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIClusterState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIClusterState::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIClusterState::CREATING:
            val = "CREATING";
            break;
        case eOAIClusterState::DELETING:
            val = "DELETING";
            break;
        case eOAIClusterState::FAILED:
            val = "FAILED";
            break;
        case eOAIClusterState::HEALING:
            val = "HEALING";
            break;
        case eOAIClusterState::MAINTENANCE:
            val = "MAINTENANCE";
            break;
        case eOAIClusterState::REBOOTING_BROKER:
            val = "REBOOTING_BROKER";
            break;
        case eOAIClusterState::UPDATING:
            val = "UPDATING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIClusterState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIClusterState::eOAIClusterState OAIClusterState::getValue() const {
    return m_value;
}

void OAIClusterState::setValue(const OAIClusterState::eOAIClusterState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIClusterState::isSet() const {
    
    return m_value_isSet;
}

bool OAIClusterState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
