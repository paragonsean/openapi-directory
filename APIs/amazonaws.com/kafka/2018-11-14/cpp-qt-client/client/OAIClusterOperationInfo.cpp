/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterOperationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterOperationInfo::OAIClusterOperationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterOperationInfo::OAIClusterOperationInfo() {
    this->initializeModel();
}

OAIClusterOperationInfo::~OAIClusterOperationInfo() {}

void OAIClusterOperationInfo::initializeModel() {

    m_client_request_id_isSet = false;
    m_client_request_id_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_operation_arn_isSet = false;
    m_operation_arn_isValid = false;

    m_operation_state_isSet = false;
    m_operation_state_isValid = false;

    m_operation_steps_isSet = false;
    m_operation_steps_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_source_cluster_info_isSet = false;
    m_source_cluster_info_isValid = false;

    m_target_cluster_info_isSet = false;
    m_target_cluster_info_isValid = false;

    m_vpc_connection_info_isSet = false;
    m_vpc_connection_info_isValid = false;
}

void OAIClusterOperationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterOperationInfo::fromJsonObject(QJsonObject json) {

    m_client_request_id_isValid = ::OpenAPI::fromJsonValue(m_client_request_id, json[QString("ClientRequestId")]);
    m_client_request_id_isSet = !json[QString("ClientRequestId")].isNull() && m_client_request_id_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("ErrorInfo")]);
    m_error_info_isSet = !json[QString("ErrorInfo")].isNull() && m_error_info_isValid;

    m_operation_arn_isValid = ::OpenAPI::fromJsonValue(m_operation_arn, json[QString("OperationArn")]);
    m_operation_arn_isSet = !json[QString("OperationArn")].isNull() && m_operation_arn_isValid;

    m_operation_state_isValid = ::OpenAPI::fromJsonValue(m_operation_state, json[QString("OperationState")]);
    m_operation_state_isSet = !json[QString("OperationState")].isNull() && m_operation_state_isValid;

    m_operation_steps_isValid = ::OpenAPI::fromJsonValue(m_operation_steps, json[QString("OperationSteps")]);
    m_operation_steps_isSet = !json[QString("OperationSteps")].isNull() && m_operation_steps_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("OperationType")]);
    m_operation_type_isSet = !json[QString("OperationType")].isNull() && m_operation_type_isValid;

    m_source_cluster_info_isValid = ::OpenAPI::fromJsonValue(m_source_cluster_info, json[QString("SourceClusterInfo")]);
    m_source_cluster_info_isSet = !json[QString("SourceClusterInfo")].isNull() && m_source_cluster_info_isValid;

    m_target_cluster_info_isValid = ::OpenAPI::fromJsonValue(m_target_cluster_info, json[QString("TargetClusterInfo")]);
    m_target_cluster_info_isSet = !json[QString("TargetClusterInfo")].isNull() && m_target_cluster_info_isValid;

    m_vpc_connection_info_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_info, json[QString("VpcConnectionInfo")]);
    m_vpc_connection_info_isSet = !json[QString("VpcConnectionInfo")].isNull() && m_vpc_connection_info_isValid;
}

QString OAIClusterOperationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterOperationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_id_isSet) {
        obj.insert(QString("ClientRequestId"), ::OpenAPI::toJsonValue(m_client_request_id));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("ErrorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_operation_arn_isSet) {
        obj.insert(QString("OperationArn"), ::OpenAPI::toJsonValue(m_operation_arn));
    }
    if (m_operation_state_isSet) {
        obj.insert(QString("OperationState"), ::OpenAPI::toJsonValue(m_operation_state));
    }
    if (m_operation_steps.isSet()) {
        obj.insert(QString("OperationSteps"), ::OpenAPI::toJsonValue(m_operation_steps));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("OperationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_source_cluster_info.isSet()) {
        obj.insert(QString("SourceClusterInfo"), ::OpenAPI::toJsonValue(m_source_cluster_info));
    }
    if (m_target_cluster_info.isSet()) {
        obj.insert(QString("TargetClusterInfo"), ::OpenAPI::toJsonValue(m_target_cluster_info));
    }
    if (m_vpc_connection_info.isSet()) {
        obj.insert(QString("VpcConnectionInfo"), ::OpenAPI::toJsonValue(m_vpc_connection_info));
    }
    return obj;
}

QString OAIClusterOperationInfo::getClientRequestId() const {
    return m_client_request_id;
}
void OAIClusterOperationInfo::setClientRequestId(const QString &client_request_id) {
    m_client_request_id = client_request_id;
    m_client_request_id_isSet = true;
}

bool OAIClusterOperationInfo::is_client_request_id_Set() const{
    return m_client_request_id_isSet;
}

bool OAIClusterOperationInfo::is_client_request_id_Valid() const{
    return m_client_request_id_isValid;
}

QString OAIClusterOperationInfo::getClusterArn() const {
    return m_cluster_arn;
}
void OAIClusterOperationInfo::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIClusterOperationInfo::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIClusterOperationInfo::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QDateTime OAIClusterOperationInfo::getCreationTime() const {
    return m_creation_time;
}
void OAIClusterOperationInfo::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIClusterOperationInfo::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIClusterOperationInfo::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIClusterOperationInfo::getEndTime() const {
    return m_end_time;
}
void OAIClusterOperationInfo::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIClusterOperationInfo::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIClusterOperationInfo::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIClusterOperationInfo_ErrorInfo OAIClusterOperationInfo::getErrorInfo() const {
    return m_error_info;
}
void OAIClusterOperationInfo::setErrorInfo(const OAIClusterOperationInfo_ErrorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIClusterOperationInfo::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIClusterOperationInfo::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIClusterOperationInfo::getOperationArn() const {
    return m_operation_arn;
}
void OAIClusterOperationInfo::setOperationArn(const QString &operation_arn) {
    m_operation_arn = operation_arn;
    m_operation_arn_isSet = true;
}

bool OAIClusterOperationInfo::is_operation_arn_Set() const{
    return m_operation_arn_isSet;
}

bool OAIClusterOperationInfo::is_operation_arn_Valid() const{
    return m_operation_arn_isValid;
}

QString OAIClusterOperationInfo::getOperationState() const {
    return m_operation_state;
}
void OAIClusterOperationInfo::setOperationState(const QString &operation_state) {
    m_operation_state = operation_state;
    m_operation_state_isSet = true;
}

bool OAIClusterOperationInfo::is_operation_state_Set() const{
    return m_operation_state_isSet;
}

bool OAIClusterOperationInfo::is_operation_state_Valid() const{
    return m_operation_state_isValid;
}

QList OAIClusterOperationInfo::getOperationSteps() const {
    return m_operation_steps;
}
void OAIClusterOperationInfo::setOperationSteps(const QList &operation_steps) {
    m_operation_steps = operation_steps;
    m_operation_steps_isSet = true;
}

bool OAIClusterOperationInfo::is_operation_steps_Set() const{
    return m_operation_steps_isSet;
}

bool OAIClusterOperationInfo::is_operation_steps_Valid() const{
    return m_operation_steps_isValid;
}

QString OAIClusterOperationInfo::getOperationType() const {
    return m_operation_type;
}
void OAIClusterOperationInfo::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIClusterOperationInfo::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIClusterOperationInfo::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

OAIClusterOperationInfo_SourceClusterInfo OAIClusterOperationInfo::getSourceClusterInfo() const {
    return m_source_cluster_info;
}
void OAIClusterOperationInfo::setSourceClusterInfo(const OAIClusterOperationInfo_SourceClusterInfo &source_cluster_info) {
    m_source_cluster_info = source_cluster_info;
    m_source_cluster_info_isSet = true;
}

bool OAIClusterOperationInfo::is_source_cluster_info_Set() const{
    return m_source_cluster_info_isSet;
}

bool OAIClusterOperationInfo::is_source_cluster_info_Valid() const{
    return m_source_cluster_info_isValid;
}

OAIClusterOperationInfo_TargetClusterInfo OAIClusterOperationInfo::getTargetClusterInfo() const {
    return m_target_cluster_info;
}
void OAIClusterOperationInfo::setTargetClusterInfo(const OAIClusterOperationInfo_TargetClusterInfo &target_cluster_info) {
    m_target_cluster_info = target_cluster_info;
    m_target_cluster_info_isSet = true;
}

bool OAIClusterOperationInfo::is_target_cluster_info_Set() const{
    return m_target_cluster_info_isSet;
}

bool OAIClusterOperationInfo::is_target_cluster_info_Valid() const{
    return m_target_cluster_info_isValid;
}

OAIClusterOperationInfo_VpcConnectionInfo OAIClusterOperationInfo::getVpcConnectionInfo() const {
    return m_vpc_connection_info;
}
void OAIClusterOperationInfo::setVpcConnectionInfo(const OAIClusterOperationInfo_VpcConnectionInfo &vpc_connection_info) {
    m_vpc_connection_info = vpc_connection_info;
    m_vpc_connection_info_isSet = true;
}

bool OAIClusterOperationInfo::is_vpc_connection_info_Set() const{
    return m_vpc_connection_info_isSet;
}

bool OAIClusterOperationInfo::is_vpc_connection_info_Valid() const{
    return m_vpc_connection_info_isValid;
}

bool OAIClusterOperationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_cluster_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cluster_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connection_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterOperationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
