/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAssociateScramSecretResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAssociateScramSecretResponse::OAIBatchAssociateScramSecretResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAssociateScramSecretResponse::OAIBatchAssociateScramSecretResponse() {
    this->initializeModel();
}

OAIBatchAssociateScramSecretResponse::~OAIBatchAssociateScramSecretResponse() {}

void OAIBatchAssociateScramSecretResponse::initializeModel() {

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_unprocessed_scram_secrets_isSet = false;
    m_unprocessed_scram_secrets_isValid = false;
}

void OAIBatchAssociateScramSecretResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAssociateScramSecretResponse::fromJsonObject(QJsonObject json) {

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_unprocessed_scram_secrets_isValid = ::OpenAPI::fromJsonValue(m_unprocessed_scram_secrets, json[QString("UnprocessedScramSecrets")]);
    m_unprocessed_scram_secrets_isSet = !json[QString("UnprocessedScramSecrets")].isNull() && m_unprocessed_scram_secrets_isValid;
}

QString OAIBatchAssociateScramSecretResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAssociateScramSecretResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_unprocessed_scram_secrets.isSet()) {
        obj.insert(QString("UnprocessedScramSecrets"), ::OpenAPI::toJsonValue(m_unprocessed_scram_secrets));
    }
    return obj;
}

QString OAIBatchAssociateScramSecretResponse::getClusterArn() const {
    return m_cluster_arn;
}
void OAIBatchAssociateScramSecretResponse::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIBatchAssociateScramSecretResponse::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIBatchAssociateScramSecretResponse::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QList OAIBatchAssociateScramSecretResponse::getUnprocessedScramSecrets() const {
    return m_unprocessed_scram_secrets;
}
void OAIBatchAssociateScramSecretResponse::setUnprocessedScramSecrets(const QList &unprocessed_scram_secrets) {
    m_unprocessed_scram_secrets = unprocessed_scram_secrets;
    m_unprocessed_scram_secrets_isSet = true;
}

bool OAIBatchAssociateScramSecretResponse::is_unprocessed_scram_secrets_Set() const{
    return m_unprocessed_scram_secrets_isSet;
}

bool OAIBatchAssociateScramSecretResponse::is_unprocessed_scram_secrets_Valid() const{
    return m_unprocessed_scram_secrets_isValid;
}

bool OAIBatchAssociateScramSecretResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprocessed_scram_secrets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAssociateScramSecretResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
