/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStorageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStorageRequest::OAIUpdateStorageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStorageRequest::OAIUpdateStorageRequest() {
    this->initializeModel();
}

OAIUpdateStorageRequest::~OAIUpdateStorageRequest() {}

void OAIUpdateStorageRequest::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_storage_mode_isSet = false;
    m_storage_mode_isValid = false;

    m_volume_size_gb_isSet = false;
    m_volume_size_gb_isValid = false;
}

void OAIUpdateStorageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStorageRequest::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_storage_mode_isValid = ::OpenAPI::fromJsonValue(m_storage_mode, json[QString("StorageMode")]);
    m_storage_mode_isSet = !json[QString("StorageMode")].isNull() && m_storage_mode_isValid;

    m_volume_size_gb_isValid = ::OpenAPI::fromJsonValue(m_volume_size_gb, json[QString("VolumeSizeGB")]);
    m_volume_size_gb_isSet = !json[QString("VolumeSizeGB")].isNull() && m_volume_size_gb_isValid;
}

QString OAIUpdateStorageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStorageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_storage_mode.isSet()) {
        obj.insert(QString("StorageMode"), ::OpenAPI::toJsonValue(m_storage_mode));
    }
    if (m_volume_size_gb_isSet) {
        obj.insert(QString("VolumeSizeGB"), ::OpenAPI::toJsonValue(m_volume_size_gb));
    }
    return obj;
}

QString OAIUpdateStorageRequest::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateStorageRequest::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateStorageRequest::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateStorageRequest::is_current_version_Valid() const{
    return m_current_version_isValid;
}

OAIBrokerEBSVolumeInfo_ProvisionedThroughput OAIUpdateStorageRequest::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAIUpdateStorageRequest::setProvisionedThroughput(const OAIBrokerEBSVolumeInfo_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAIUpdateStorageRequest::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAIUpdateStorageRequest::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

OAIStorageMode OAIUpdateStorageRequest::getStorageMode() const {
    return m_storage_mode;
}
void OAIUpdateStorageRequest::setStorageMode(const OAIStorageMode &storage_mode) {
    m_storage_mode = storage_mode;
    m_storage_mode_isSet = true;
}

bool OAIUpdateStorageRequest::is_storage_mode_Set() const{
    return m_storage_mode_isSet;
}

bool OAIUpdateStorageRequest::is_storage_mode_Valid() const{
    return m_storage_mode_isValid;
}

qint32 OAIUpdateStorageRequest::getVolumeSizeGb() const {
    return m_volume_size_gb;
}
void OAIUpdateStorageRequest::setVolumeSizeGb(const qint32 &volume_size_gb) {
    m_volume_size_gb = volume_size_gb;
    m_volume_size_gb_isSet = true;
}

bool OAIUpdateStorageRequest::is_volume_size_gb_Set() const{
    return m_volume_size_gb_isSet;
}

bool OAIUpdateStorageRequest::is_volume_size_gb_Valid() const{
    return m_volume_size_gb_isValid;
}

bool OAIUpdateStorageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStorageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_version_isValid && true;
}

} // namespace OpenAPI
