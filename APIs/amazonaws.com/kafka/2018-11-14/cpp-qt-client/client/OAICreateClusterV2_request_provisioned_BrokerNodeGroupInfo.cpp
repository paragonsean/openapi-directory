/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo() {
    this->initializeModel();
}

OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::~OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo() {}

void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::initializeModel() {

    m_broker_az_distribution_isSet = false;
    m_broker_az_distribution_isValid = false;

    m_client_subnets_isSet = false;
    m_client_subnets_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_storage_info_isSet = false;
    m_storage_info_isValid = false;

    m_connectivity_info_isSet = false;
    m_connectivity_info_isValid = false;

    m_zone_ids_isSet = false;
    m_zone_ids_isValid = false;
}

void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::fromJsonObject(QJsonObject json) {

    m_broker_az_distribution_isValid = ::OpenAPI::fromJsonValue(m_broker_az_distribution, json[QString("BrokerAZDistribution")]);
    m_broker_az_distribution_isSet = !json[QString("BrokerAZDistribution")].isNull() && m_broker_az_distribution_isValid;

    m_client_subnets_isValid = ::OpenAPI::fromJsonValue(m_client_subnets, json[QString("ClientSubnets")]);
    m_client_subnets_isSet = !json[QString("ClientSubnets")].isNull() && m_client_subnets_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_storage_info_isValid = ::OpenAPI::fromJsonValue(m_storage_info, json[QString("StorageInfo")]);
    m_storage_info_isSet = !json[QString("StorageInfo")].isNull() && m_storage_info_isValid;

    m_connectivity_info_isValid = ::OpenAPI::fromJsonValue(m_connectivity_info, json[QString("ConnectivityInfo")]);
    m_connectivity_info_isSet = !json[QString("ConnectivityInfo")].isNull() && m_connectivity_info_isValid;

    m_zone_ids_isValid = ::OpenAPI::fromJsonValue(m_zone_ids, json[QString("ZoneIds")]);
    m_zone_ids_isSet = !json[QString("ZoneIds")].isNull() && m_zone_ids_isValid;
}

QString OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_broker_az_distribution.isSet()) {
        obj.insert(QString("BrokerAZDistribution"), ::OpenAPI::toJsonValue(m_broker_az_distribution));
    }
    if (m_client_subnets.isSet()) {
        obj.insert(QString("ClientSubnets"), ::OpenAPI::toJsonValue(m_client_subnets));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_storage_info.isSet()) {
        obj.insert(QString("StorageInfo"), ::OpenAPI::toJsonValue(m_storage_info));
    }
    if (m_connectivity_info.isSet()) {
        obj.insert(QString("ConnectivityInfo"), ::OpenAPI::toJsonValue(m_connectivity_info));
    }
    if (m_zone_ids.isSet()) {
        obj.insert(QString("ZoneIds"), ::OpenAPI::toJsonValue(m_zone_ids));
    }
    return obj;
}

OAIBrokerAZDistribution OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getBrokerAzDistribution() const {
    return m_broker_az_distribution;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setBrokerAzDistribution(const OAIBrokerAZDistribution &broker_az_distribution) {
    m_broker_az_distribution = broker_az_distribution;
    m_broker_az_distribution_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_broker_az_distribution_Set() const{
    return m_broker_az_distribution_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_broker_az_distribution_Valid() const{
    return m_broker_az_distribution_isValid;
}

QList OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getClientSubnets() const {
    return m_client_subnets;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setClientSubnets(const QList &client_subnets) {
    m_client_subnets = client_subnets;
    m_client_subnets_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_client_subnets_Set() const{
    return m_client_subnets_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_client_subnets_Valid() const{
    return m_client_subnets_isValid;
}

QString OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getInstanceType() const {
    return m_instance_type;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QList OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAICreateCluster_request_brokerNodeGroupInfo_StorageInfo OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getStorageInfo() const {
    return m_storage_info;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setStorageInfo(const OAICreateCluster_request_brokerNodeGroupInfo_StorageInfo &storage_info) {
    m_storage_info = storage_info;
    m_storage_info_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_storage_info_Set() const{
    return m_storage_info_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_storage_info_Valid() const{
    return m_storage_info_isValid;
}

OAICreateCluster_request_brokerNodeGroupInfo_ConnectivityInfo OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getConnectivityInfo() const {
    return m_connectivity_info;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setConnectivityInfo(const OAICreateCluster_request_brokerNodeGroupInfo_ConnectivityInfo &connectivity_info) {
    m_connectivity_info = connectivity_info;
    m_connectivity_info_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_connectivity_info_Set() const{
    return m_connectivity_info_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_connectivity_info_Valid() const{
    return m_connectivity_info_isValid;
}

QList OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::getZoneIds() const {
    return m_zone_ids;
}
void OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::setZoneIds(const QList &zone_ids) {
    m_zone_ids = zone_ids;
    m_zone_ids_isSet = true;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_zone_ids_Set() const{
    return m_zone_ids_isSet;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::is_zone_ids_Valid() const{
    return m_zone_ids_isValid;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broker_az_distribution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterV2_request_provisioned_BrokerNodeGroupInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_subnets_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
