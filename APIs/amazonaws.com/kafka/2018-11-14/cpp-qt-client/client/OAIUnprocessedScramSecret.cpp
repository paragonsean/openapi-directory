/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnprocessedScramSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnprocessedScramSecret::OAIUnprocessedScramSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnprocessedScramSecret::OAIUnprocessedScramSecret() {
    this->initializeModel();
}

OAIUnprocessedScramSecret::~OAIUnprocessedScramSecret() {}

void OAIUnprocessedScramSecret::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;
}

void OAIUnprocessedScramSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnprocessedScramSecret::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;
}

QString OAIUnprocessedScramSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnprocessedScramSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    return obj;
}

QString OAIUnprocessedScramSecret::getErrorCode() const {
    return m_error_code;
}
void OAIUnprocessedScramSecret::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIUnprocessedScramSecret::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIUnprocessedScramSecret::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIUnprocessedScramSecret::getErrorMessage() const {
    return m_error_message;
}
void OAIUnprocessedScramSecret::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUnprocessedScramSecret::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUnprocessedScramSecret::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIUnprocessedScramSecret::getSecretArn() const {
    return m_secret_arn;
}
void OAIUnprocessedScramSecret::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIUnprocessedScramSecret::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIUnprocessedScramSecret::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIUnprocessedScramSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnprocessedScramSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
