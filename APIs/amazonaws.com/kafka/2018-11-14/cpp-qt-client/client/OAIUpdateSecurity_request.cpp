/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSecurity_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSecurity_request::OAIUpdateSecurity_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSecurity_request::OAIUpdateSecurity_request() {
    this->initializeModel();
}

OAIUpdateSecurity_request::~OAIUpdateSecurity_request() {}

void OAIUpdateSecurity_request::initializeModel() {

    m_client_authentication_isSet = false;
    m_client_authentication_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;
}

void OAIUpdateSecurity_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSecurity_request::fromJsonObject(QJsonObject json) {

    m_client_authentication_isValid = ::OpenAPI::fromJsonValue(m_client_authentication, json[QString("clientAuthentication")]);
    m_client_authentication_isSet = !json[QString("clientAuthentication")].isNull() && m_client_authentication_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;
}

QString OAIUpdateSecurity_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSecurity_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_authentication.isSet()) {
        obj.insert(QString("clientAuthentication"), ::OpenAPI::toJsonValue(m_client_authentication));
    }
    if (m_current_version_isSet) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    return obj;
}

OAICreateCluster_request_clientAuthentication OAIUpdateSecurity_request::getClientAuthentication() const {
    return m_client_authentication;
}
void OAIUpdateSecurity_request::setClientAuthentication(const OAICreateCluster_request_clientAuthentication &client_authentication) {
    m_client_authentication = client_authentication;
    m_client_authentication_isSet = true;
}

bool OAIUpdateSecurity_request::is_client_authentication_Set() const{
    return m_client_authentication_isSet;
}

bool OAIUpdateSecurity_request::is_client_authentication_Valid() const{
    return m_client_authentication_isValid;
}

QString OAIUpdateSecurity_request::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateSecurity_request::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateSecurity_request::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateSecurity_request::is_current_version_Valid() const{
    return m_current_version_isValid;
}

OAICreateCluster_request_encryptionInfo OAIUpdateSecurity_request::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIUpdateSecurity_request::setEncryptionInfo(const OAICreateCluster_request_encryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIUpdateSecurity_request::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIUpdateSecurity_request::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

bool OAIUpdateSecurity_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSecurity_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_version_isValid && true;
}

} // namespace OpenAPI
