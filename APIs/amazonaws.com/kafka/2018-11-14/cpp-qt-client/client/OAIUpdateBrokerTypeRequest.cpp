/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBrokerTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBrokerTypeRequest::OAIUpdateBrokerTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBrokerTypeRequest::OAIUpdateBrokerTypeRequest() {
    this->initializeModel();
}

OAIUpdateBrokerTypeRequest::~OAIUpdateBrokerTypeRequest() {}

void OAIUpdateBrokerTypeRequest::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_target_instance_type_isSet = false;
    m_target_instance_type_isValid = false;
}

void OAIUpdateBrokerTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBrokerTypeRequest::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_target_instance_type_isValid = ::OpenAPI::fromJsonValue(m_target_instance_type, json[QString("TargetInstanceType")]);
    m_target_instance_type_isSet = !json[QString("TargetInstanceType")].isNull() && m_target_instance_type_isValid;
}

QString OAIUpdateBrokerTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBrokerTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_target_instance_type_isSet) {
        obj.insert(QString("TargetInstanceType"), ::OpenAPI::toJsonValue(m_target_instance_type));
    }
    return obj;
}

QString OAIUpdateBrokerTypeRequest::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateBrokerTypeRequest::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateBrokerTypeRequest::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateBrokerTypeRequest::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIUpdateBrokerTypeRequest::getTargetInstanceType() const {
    return m_target_instance_type;
}
void OAIUpdateBrokerTypeRequest::setTargetInstanceType(const QString &target_instance_type) {
    m_target_instance_type = target_instance_type;
    m_target_instance_type_isSet = true;
}

bool OAIUpdateBrokerTypeRequest::is_target_instance_type_Set() const{
    return m_target_instance_type_isSet;
}

bool OAIUpdateBrokerTypeRequest::is_target_instance_type_Valid() const{
    return m_target_instance_type_isValid;
}

bool OAIUpdateBrokerTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBrokerTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_version_isValid && m_target_instance_type_isValid && true;
}

} // namespace OpenAPI
