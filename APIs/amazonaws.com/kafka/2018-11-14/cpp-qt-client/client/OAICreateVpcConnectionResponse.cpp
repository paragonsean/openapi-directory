/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVpcConnectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVpcConnectionResponse::OAICreateVpcConnectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVpcConnectionResponse::OAICreateVpcConnectionResponse() {
    this->initializeModel();
}

OAICreateVpcConnectionResponse::~OAICreateVpcConnectionResponse() {}

void OAICreateVpcConnectionResponse::initializeModel() {

    m_vpc_connection_arn_isSet = false;
    m_vpc_connection_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_client_subnets_isSet = false;
    m_client_subnets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVpcConnectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVpcConnectionResponse::fromJsonObject(QJsonObject json) {

    m_vpc_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_arn, json[QString("VpcConnectionArn")]);
    m_vpc_connection_arn_isSet = !json[QString("VpcConnectionArn")].isNull() && m_vpc_connection_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("Authentication")]);
    m_authentication_isSet = !json[QString("Authentication")].isNull() && m_authentication_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_client_subnets_isValid = ::OpenAPI::fromJsonValue(m_client_subnets, json[QString("ClientSubnets")]);
    m_client_subnets_isSet = !json[QString("ClientSubnets")].isNull() && m_client_subnets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateVpcConnectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVpcConnectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_arn_isSet) {
        obj.insert(QString("VpcConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_connection_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_authentication_isSet) {
        obj.insert(QString("Authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_client_subnets.isSet()) {
        obj.insert(QString("ClientSubnets"), ::OpenAPI::toJsonValue(m_client_subnets));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateVpcConnectionResponse::getVpcConnectionArn() const {
    return m_vpc_connection_arn;
}
void OAICreateVpcConnectionResponse::setVpcConnectionArn(const QString &vpc_connection_arn) {
    m_vpc_connection_arn = vpc_connection_arn;
    m_vpc_connection_arn_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_vpc_connection_arn_Set() const{
    return m_vpc_connection_arn_isSet;
}

bool OAICreateVpcConnectionResponse::is_vpc_connection_arn_Valid() const{
    return m_vpc_connection_arn_isValid;
}

OAIVpcConnectionState OAICreateVpcConnectionResponse::getState() const {
    return m_state;
}
void OAICreateVpcConnectionResponse::setState(const OAIVpcConnectionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateVpcConnectionResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICreateVpcConnectionResponse::getAuthentication() const {
    return m_authentication;
}
void OAICreateVpcConnectionResponse::setAuthentication(const QString &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAICreateVpcConnectionResponse::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAICreateVpcConnectionResponse::getVpcId() const {
    return m_vpc_id;
}
void OAICreateVpcConnectionResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateVpcConnectionResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QList OAICreateVpcConnectionResponse::getClientSubnets() const {
    return m_client_subnets;
}
void OAICreateVpcConnectionResponse::setClientSubnets(const QList &client_subnets) {
    m_client_subnets = client_subnets;
    m_client_subnets_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_client_subnets_Set() const{
    return m_client_subnets_isSet;
}

bool OAICreateVpcConnectionResponse::is_client_subnets_Valid() const{
    return m_client_subnets_isValid;
}

QList OAICreateVpcConnectionResponse::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateVpcConnectionResponse::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateVpcConnectionResponse::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QDateTime OAICreateVpcConnectionResponse::getCreationTime() const {
    return m_creation_time;
}
void OAICreateVpcConnectionResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateVpcConnectionResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QMap OAICreateVpcConnectionResponse::getTags() const {
    return m_tags;
}
void OAICreateVpcConnectionResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVpcConnectionResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVpcConnectionResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVpcConnectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVpcConnectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
