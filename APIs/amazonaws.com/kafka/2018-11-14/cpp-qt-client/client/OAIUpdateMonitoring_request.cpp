/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMonitoring_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMonitoring_request::OAIUpdateMonitoring_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMonitoring_request::OAIUpdateMonitoring_request() {
    this->initializeModel();
}

OAIUpdateMonitoring_request::~OAIUpdateMonitoring_request() {}

void OAIUpdateMonitoring_request::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_enhanced_monitoring_isSet = false;
    m_enhanced_monitoring_isValid = false;

    m_open_monitoring_isSet = false;
    m_open_monitoring_isValid = false;

    m_logging_info_isSet = false;
    m_logging_info_isValid = false;
}

void OAIUpdateMonitoring_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMonitoring_request::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_enhanced_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enhanced_monitoring, json[QString("enhancedMonitoring")]);
    m_enhanced_monitoring_isSet = !json[QString("enhancedMonitoring")].isNull() && m_enhanced_monitoring_isValid;

    m_open_monitoring_isValid = ::OpenAPI::fromJsonValue(m_open_monitoring, json[QString("openMonitoring")]);
    m_open_monitoring_isSet = !json[QString("openMonitoring")].isNull() && m_open_monitoring_isValid;

    m_logging_info_isValid = ::OpenAPI::fromJsonValue(m_logging_info, json[QString("loggingInfo")]);
    m_logging_info_isSet = !json[QString("loggingInfo")].isNull() && m_logging_info_isValid;
}

QString OAIUpdateMonitoring_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMonitoring_request::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_enhanced_monitoring_isSet) {
        obj.insert(QString("enhancedMonitoring"), ::OpenAPI::toJsonValue(m_enhanced_monitoring));
    }
    if (m_open_monitoring.isSet()) {
        obj.insert(QString("openMonitoring"), ::OpenAPI::toJsonValue(m_open_monitoring));
    }
    if (m_logging_info.isSet()) {
        obj.insert(QString("loggingInfo"), ::OpenAPI::toJsonValue(m_logging_info));
    }
    return obj;
}

QString OAIUpdateMonitoring_request::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateMonitoring_request::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateMonitoring_request::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateMonitoring_request::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIUpdateMonitoring_request::getEnhancedMonitoring() const {
    return m_enhanced_monitoring;
}
void OAIUpdateMonitoring_request::setEnhancedMonitoring(const QString &enhanced_monitoring) {
    m_enhanced_monitoring = enhanced_monitoring;
    m_enhanced_monitoring_isSet = true;
}

bool OAIUpdateMonitoring_request::is_enhanced_monitoring_Set() const{
    return m_enhanced_monitoring_isSet;
}

bool OAIUpdateMonitoring_request::is_enhanced_monitoring_Valid() const{
    return m_enhanced_monitoring_isValid;
}

OAICreateCluster_request_openMonitoring OAIUpdateMonitoring_request::getOpenMonitoring() const {
    return m_open_monitoring;
}
void OAIUpdateMonitoring_request::setOpenMonitoring(const OAICreateCluster_request_openMonitoring &open_monitoring) {
    m_open_monitoring = open_monitoring;
    m_open_monitoring_isSet = true;
}

bool OAIUpdateMonitoring_request::is_open_monitoring_Set() const{
    return m_open_monitoring_isSet;
}

bool OAIUpdateMonitoring_request::is_open_monitoring_Valid() const{
    return m_open_monitoring_isValid;
}

OAICreateCluster_request_loggingInfo OAIUpdateMonitoring_request::getLoggingInfo() const {
    return m_logging_info;
}
void OAIUpdateMonitoring_request::setLoggingInfo(const OAICreateCluster_request_loggingInfo &logging_info) {
    m_logging_info = logging_info;
    m_logging_info_isSet = true;
}

bool OAIUpdateMonitoring_request::is_logging_info_Set() const{
    return m_logging_info_isSet;
}

bool OAIUpdateMonitoring_request::is_logging_info_Valid() const{
    return m_logging_info_isValid;
}

bool OAIUpdateMonitoring_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMonitoring_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_version_isValid && true;
}

} // namespace OpenAPI
