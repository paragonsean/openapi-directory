/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeInfo_BrokerNodeInfo.h
 *
 * 
 */

#ifndef OAINodeInfo_BrokerNodeInfo_H
#define OAINodeInfo_BrokerNodeInfo_H

#include <QJsonObject>

#include "OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo;

class OAINodeInfo_BrokerNodeInfo : public OAIObject {
public:
    OAINodeInfo_BrokerNodeInfo();
    OAINodeInfo_BrokerNodeInfo(QString json);
    ~OAINodeInfo_BrokerNodeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttachedEniid() const;
    void setAttachedEniid(const QString &attached_eniid);
    bool is_attached_eniid_Set() const;
    bool is_attached_eniid_Valid() const;

    double getBrokerId() const;
    void setBrokerId(const double &broker_id);
    bool is_broker_id_Set() const;
    bool is_broker_id_Valid() const;

    QString getClientSubnet() const;
    void setClientSubnet(const QString &client_subnet);
    bool is_client_subnet_Set() const;
    bool is_client_subnet_Valid() const;

    QString getClientVpcIpAddress() const;
    void setClientVpcIpAddress(const QString &client_vpc_ip_address);
    bool is_client_vpc_ip_address_Set() const;
    bool is_client_vpc_ip_address_Valid() const;

    OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo getCurrentBrokerSoftwareInfo() const;
    void setCurrentBrokerSoftwareInfo(const OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo &current_broker_software_info);
    bool is_current_broker_software_info_Set() const;
    bool is_current_broker_software_info_Valid() const;

    QList getEndpoints() const;
    void setEndpoints(const QList &endpoints);
    bool is_endpoints_Set() const;
    bool is_endpoints_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attached_eniid;
    bool m_attached_eniid_isSet;
    bool m_attached_eniid_isValid;

    double m_broker_id;
    bool m_broker_id_isSet;
    bool m_broker_id_isValid;

    QString m_client_subnet;
    bool m_client_subnet_isSet;
    bool m_client_subnet_isValid;

    QString m_client_vpc_ip_address;
    bool m_client_vpc_ip_address_isSet;
    bool m_client_vpc_ip_address_isValid;

    OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo m_current_broker_software_info;
    bool m_current_broker_software_info_isSet;
    bool m_current_broker_software_info_isValid;

    QList m_endpoints;
    bool m_endpoints_isSet;
    bool m_endpoints_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeInfo_BrokerNodeInfo)

#endif // OAINodeInfo_BrokerNodeInfo_H
