/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZookeeperNodeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZookeeperNodeInfo::OAIZookeeperNodeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZookeeperNodeInfo::OAIZookeeperNodeInfo() {
    this->initializeModel();
}

OAIZookeeperNodeInfo::~OAIZookeeperNodeInfo() {}

void OAIZookeeperNodeInfo::initializeModel() {

    m_attached_eniid_isSet = false;
    m_attached_eniid_isValid = false;

    m_client_vpc_ip_address_isSet = false;
    m_client_vpc_ip_address_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_zookeeper_id_isSet = false;
    m_zookeeper_id_isValid = false;

    m_zookeeper_version_isSet = false;
    m_zookeeper_version_isValid = false;
}

void OAIZookeeperNodeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZookeeperNodeInfo::fromJsonObject(QJsonObject json) {

    m_attached_eniid_isValid = ::OpenAPI::fromJsonValue(m_attached_eniid, json[QString("AttachedENIId")]);
    m_attached_eniid_isSet = !json[QString("AttachedENIId")].isNull() && m_attached_eniid_isValid;

    m_client_vpc_ip_address_isValid = ::OpenAPI::fromJsonValue(m_client_vpc_ip_address, json[QString("ClientVpcIpAddress")]);
    m_client_vpc_ip_address_isSet = !json[QString("ClientVpcIpAddress")].isNull() && m_client_vpc_ip_address_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_zookeeper_id_isValid = ::OpenAPI::fromJsonValue(m_zookeeper_id, json[QString("ZookeeperId")]);
    m_zookeeper_id_isSet = !json[QString("ZookeeperId")].isNull() && m_zookeeper_id_isValid;

    m_zookeeper_version_isValid = ::OpenAPI::fromJsonValue(m_zookeeper_version, json[QString("ZookeeperVersion")]);
    m_zookeeper_version_isSet = !json[QString("ZookeeperVersion")].isNull() && m_zookeeper_version_isValid;
}

QString OAIZookeeperNodeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZookeeperNodeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_eniid_isSet) {
        obj.insert(QString("AttachedENIId"), ::OpenAPI::toJsonValue(m_attached_eniid));
    }
    if (m_client_vpc_ip_address_isSet) {
        obj.insert(QString("ClientVpcIpAddress"), ::OpenAPI::toJsonValue(m_client_vpc_ip_address));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_zookeeper_id_isSet) {
        obj.insert(QString("ZookeeperId"), ::OpenAPI::toJsonValue(m_zookeeper_id));
    }
    if (m_zookeeper_version_isSet) {
        obj.insert(QString("ZookeeperVersion"), ::OpenAPI::toJsonValue(m_zookeeper_version));
    }
    return obj;
}

QString OAIZookeeperNodeInfo::getAttachedEniid() const {
    return m_attached_eniid;
}
void OAIZookeeperNodeInfo::setAttachedEniid(const QString &attached_eniid) {
    m_attached_eniid = attached_eniid;
    m_attached_eniid_isSet = true;
}

bool OAIZookeeperNodeInfo::is_attached_eniid_Set() const{
    return m_attached_eniid_isSet;
}

bool OAIZookeeperNodeInfo::is_attached_eniid_Valid() const{
    return m_attached_eniid_isValid;
}

QString OAIZookeeperNodeInfo::getClientVpcIpAddress() const {
    return m_client_vpc_ip_address;
}
void OAIZookeeperNodeInfo::setClientVpcIpAddress(const QString &client_vpc_ip_address) {
    m_client_vpc_ip_address = client_vpc_ip_address;
    m_client_vpc_ip_address_isSet = true;
}

bool OAIZookeeperNodeInfo::is_client_vpc_ip_address_Set() const{
    return m_client_vpc_ip_address_isSet;
}

bool OAIZookeeperNodeInfo::is_client_vpc_ip_address_Valid() const{
    return m_client_vpc_ip_address_isValid;
}

QList OAIZookeeperNodeInfo::getEndpoints() const {
    return m_endpoints;
}
void OAIZookeeperNodeInfo::setEndpoints(const QList &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIZookeeperNodeInfo::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIZookeeperNodeInfo::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

double OAIZookeeperNodeInfo::getZookeeperId() const {
    return m_zookeeper_id;
}
void OAIZookeeperNodeInfo::setZookeeperId(const double &zookeeper_id) {
    m_zookeeper_id = zookeeper_id;
    m_zookeeper_id_isSet = true;
}

bool OAIZookeeperNodeInfo::is_zookeeper_id_Set() const{
    return m_zookeeper_id_isSet;
}

bool OAIZookeeperNodeInfo::is_zookeeper_id_Valid() const{
    return m_zookeeper_id_isValid;
}

QString OAIZookeeperNodeInfo::getZookeeperVersion() const {
    return m_zookeeper_version;
}
void OAIZookeeperNodeInfo::setZookeeperVersion(const QString &zookeeper_version) {
    m_zookeeper_version = zookeeper_version;
    m_zookeeper_version_isSet = true;
}

bool OAIZookeeperNodeInfo::is_zookeeper_version_Set() const{
    return m_zookeeper_version_isSet;
}

bool OAIZookeeperNodeInfo::is_zookeeper_version_Valid() const{
    return m_zookeeper_version_isValid;
}

bool OAIZookeeperNodeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_eniid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_vpc_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zookeeper_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zookeeper_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZookeeperNodeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
