/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcConnection::OAIVpcConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcConnection::OAIVpcConnection() {
    this->initializeModel();
}

OAIVpcConnection::~OAIVpcConnection() {}

void OAIVpcConnection::initializeModel() {

    m_vpc_connection_arn_isSet = false;
    m_vpc_connection_arn_isValid = false;

    m_target_cluster_arn_isSet = false;
    m_target_cluster_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIVpcConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcConnection::fromJsonObject(QJsonObject json) {

    m_vpc_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_arn, json[QString("VpcConnectionArn")]);
    m_vpc_connection_arn_isSet = !json[QString("VpcConnectionArn")].isNull() && m_vpc_connection_arn_isValid;

    m_target_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_target_cluster_arn, json[QString("TargetClusterArn")]);
    m_target_cluster_arn_isSet = !json[QString("TargetClusterArn")].isNull() && m_target_cluster_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("Authentication")]);
    m_authentication_isSet = !json[QString("Authentication")].isNull() && m_authentication_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIVpcConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_arn_isSet) {
        obj.insert(QString("VpcConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_connection_arn));
    }
    if (m_target_cluster_arn_isSet) {
        obj.insert(QString("TargetClusterArn"), ::OpenAPI::toJsonValue(m_target_cluster_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_authentication_isSet) {
        obj.insert(QString("Authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIVpcConnection::getVpcConnectionArn() const {
    return m_vpc_connection_arn;
}
void OAIVpcConnection::setVpcConnectionArn(const QString &vpc_connection_arn) {
    m_vpc_connection_arn = vpc_connection_arn;
    m_vpc_connection_arn_isSet = true;
}

bool OAIVpcConnection::is_vpc_connection_arn_Set() const{
    return m_vpc_connection_arn_isSet;
}

bool OAIVpcConnection::is_vpc_connection_arn_Valid() const{
    return m_vpc_connection_arn_isValid;
}

QString OAIVpcConnection::getTargetClusterArn() const {
    return m_target_cluster_arn;
}
void OAIVpcConnection::setTargetClusterArn(const QString &target_cluster_arn) {
    m_target_cluster_arn = target_cluster_arn;
    m_target_cluster_arn_isSet = true;
}

bool OAIVpcConnection::is_target_cluster_arn_Set() const{
    return m_target_cluster_arn_isSet;
}

bool OAIVpcConnection::is_target_cluster_arn_Valid() const{
    return m_target_cluster_arn_isValid;
}

QDateTime OAIVpcConnection::getCreationTime() const {
    return m_creation_time;
}
void OAIVpcConnection::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIVpcConnection::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIVpcConnection::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIVpcConnection::getAuthentication() const {
    return m_authentication;
}
void OAIVpcConnection::setAuthentication(const QString &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIVpcConnection::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIVpcConnection::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIVpcConnection::getVpcId() const {
    return m_vpc_id;
}
void OAIVpcConnection::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIVpcConnection::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIVpcConnection::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

OAIVpcConnectionState OAIVpcConnection::getState() const {
    return m_state;
}
void OAIVpcConnection::setState(const OAIVpcConnectionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVpcConnection::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVpcConnection::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIVpcConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_connection_arn_isValid && m_target_cluster_arn_isValid && true;
}

} // namespace OpenAPI
