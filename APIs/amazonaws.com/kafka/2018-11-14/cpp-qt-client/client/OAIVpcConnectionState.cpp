/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcConnectionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcConnectionState::OAIVpcConnectionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcConnectionState::OAIVpcConnectionState() {
    this->initializeModel();
}

OAIVpcConnectionState::~OAIVpcConnectionState() {}

void OAIVpcConnectionState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVpcConnectionState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVpcConnectionState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::INACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::DEACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcConnectionState::REJECTING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVpcConnectionState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVpcConnectionState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVpcConnectionState::CREATING:
            val = "CREATING";
            break;
        case eOAIVpcConnectionState::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIVpcConnectionState::INACTIVE:
            val = "INACTIVE";
            break;
        case eOAIVpcConnectionState::DEACTIVATING:
            val = "DEACTIVATING";
            break;
        case eOAIVpcConnectionState::DELETING:
            val = "DELETING";
            break;
        case eOAIVpcConnectionState::FAILED:
            val = "FAILED";
            break;
        case eOAIVpcConnectionState::REJECTED:
            val = "REJECTED";
            break;
        case eOAIVpcConnectionState::REJECTING:
            val = "REJECTING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVpcConnectionState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVpcConnectionState::eOAIVpcConnectionState OAIVpcConnectionState::getValue() const {
    return m_value;
}

void OAIVpcConnectionState::setValue(const OAIVpcConnectionState::eOAIVpcConnectionState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVpcConnectionState::isSet() const {
    
    return m_value_isSet;
}

bool OAIVpcConnectionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
