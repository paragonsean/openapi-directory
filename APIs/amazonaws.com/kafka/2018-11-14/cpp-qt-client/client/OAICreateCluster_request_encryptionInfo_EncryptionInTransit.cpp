/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCluster_request_encryptionInfo_EncryptionInTransit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCluster_request_encryptionInfo_EncryptionInTransit::OAICreateCluster_request_encryptionInfo_EncryptionInTransit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCluster_request_encryptionInfo_EncryptionInTransit::OAICreateCluster_request_encryptionInfo_EncryptionInTransit() {
    this->initializeModel();
}

OAICreateCluster_request_encryptionInfo_EncryptionInTransit::~OAICreateCluster_request_encryptionInfo_EncryptionInTransit() {}

void OAICreateCluster_request_encryptionInfo_EncryptionInTransit::initializeModel() {

    m_client_broker_isSet = false;
    m_client_broker_isValid = false;

    m_in_cluster_isSet = false;
    m_in_cluster_isValid = false;
}

void OAICreateCluster_request_encryptionInfo_EncryptionInTransit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCluster_request_encryptionInfo_EncryptionInTransit::fromJsonObject(QJsonObject json) {

    m_client_broker_isValid = ::OpenAPI::fromJsonValue(m_client_broker, json[QString("ClientBroker")]);
    m_client_broker_isSet = !json[QString("ClientBroker")].isNull() && m_client_broker_isValid;

    m_in_cluster_isValid = ::OpenAPI::fromJsonValue(m_in_cluster, json[QString("InCluster")]);
    m_in_cluster_isSet = !json[QString("InCluster")].isNull() && m_in_cluster_isValid;
}

QString OAICreateCluster_request_encryptionInfo_EncryptionInTransit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCluster_request_encryptionInfo_EncryptionInTransit::asJsonObject() const {
    QJsonObject obj;
    if (m_client_broker.isSet()) {
        obj.insert(QString("ClientBroker"), ::OpenAPI::toJsonValue(m_client_broker));
    }
    if (m_in_cluster_isSet) {
        obj.insert(QString("InCluster"), ::OpenAPI::toJsonValue(m_in_cluster));
    }
    return obj;
}

OAIClientBroker OAICreateCluster_request_encryptionInfo_EncryptionInTransit::getClientBroker() const {
    return m_client_broker;
}
void OAICreateCluster_request_encryptionInfo_EncryptionInTransit::setClientBroker(const OAIClientBroker &client_broker) {
    m_client_broker = client_broker;
    m_client_broker_isSet = true;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::is_client_broker_Set() const{
    return m_client_broker_isSet;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::is_client_broker_Valid() const{
    return m_client_broker_isValid;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::getInCluster() const {
    return m_in_cluster;
}
void OAICreateCluster_request_encryptionInfo_EncryptionInTransit::setInCluster(const bool &in_cluster) {
    m_in_cluster = in_cluster;
    m_in_cluster_isSet = true;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::is_in_cluster_Set() const{
    return m_in_cluster_isSet;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::is_in_cluster_Valid() const{
    return m_in_cluster_isValid;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_broker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCluster_request_encryptionInfo_EncryptionInTransit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
