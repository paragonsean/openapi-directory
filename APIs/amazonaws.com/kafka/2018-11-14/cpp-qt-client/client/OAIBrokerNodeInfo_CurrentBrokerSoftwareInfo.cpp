/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo() {
    this->initializeModel();
}

OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::~OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo() {}

void OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::initializeModel() {

    m_configuration_arn_isSet = false;
    m_configuration_arn_isValid = false;

    m_configuration_revision_isSet = false;
    m_configuration_revision_isValid = false;

    m_kafka_version_isSet = false;
    m_kafka_version_isValid = false;
}

void OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::fromJsonObject(QJsonObject json) {

    m_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_configuration_arn, json[QString("ConfigurationArn")]);
    m_configuration_arn_isSet = !json[QString("ConfigurationArn")].isNull() && m_configuration_arn_isValid;

    m_configuration_revision_isValid = ::OpenAPI::fromJsonValue(m_configuration_revision, json[QString("ConfigurationRevision")]);
    m_configuration_revision_isSet = !json[QString("ConfigurationRevision")].isNull() && m_configuration_revision_isValid;

    m_kafka_version_isValid = ::OpenAPI::fromJsonValue(m_kafka_version, json[QString("KafkaVersion")]);
    m_kafka_version_isSet = !json[QString("KafkaVersion")].isNull() && m_kafka_version_isValid;
}

QString OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_arn_isSet) {
        obj.insert(QString("ConfigurationArn"), ::OpenAPI::toJsonValue(m_configuration_arn));
    }
    if (m_configuration_revision_isSet) {
        obj.insert(QString("ConfigurationRevision"), ::OpenAPI::toJsonValue(m_configuration_revision));
    }
    if (m_kafka_version_isSet) {
        obj.insert(QString("KafkaVersion"), ::OpenAPI::toJsonValue(m_kafka_version));
    }
    return obj;
}

QString OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::getConfigurationArn() const {
    return m_configuration_arn;
}
void OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::setConfigurationArn(const QString &configuration_arn) {
    m_configuration_arn = configuration_arn;
    m_configuration_arn_isSet = true;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::is_configuration_arn_Set() const{
    return m_configuration_arn_isSet;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::is_configuration_arn_Valid() const{
    return m_configuration_arn_isValid;
}

qint32 OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::getConfigurationRevision() const {
    return m_configuration_revision;
}
void OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::setConfigurationRevision(const qint32 &configuration_revision) {
    m_configuration_revision = configuration_revision;
    m_configuration_revision_isSet = true;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::is_configuration_revision_Set() const{
    return m_configuration_revision_isSet;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::is_configuration_revision_Valid() const{
    return m_configuration_revision_isValid;
}

QString OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::getKafkaVersion() const {
    return m_kafka_version;
}
void OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::setKafkaVersion(const QString &kafka_version) {
    m_kafka_version = kafka_version;
    m_kafka_version_isSet = true;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::is_kafka_version_Set() const{
    return m_kafka_version_isSet;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::is_kafka_version_Valid() const{
    return m_kafka_version_isValid;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kafka_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrokerNodeInfo_CurrentBrokerSoftwareInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
