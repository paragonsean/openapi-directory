/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBootstrapBrokersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBootstrapBrokersResponse::OAIGetBootstrapBrokersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBootstrapBrokersResponse::OAIGetBootstrapBrokersResponse() {
    this->initializeModel();
}

OAIGetBootstrapBrokersResponse::~OAIGetBootstrapBrokersResponse() {}

void OAIGetBootstrapBrokersResponse::initializeModel() {

    m_bootstrap_broker_string_isSet = false;
    m_bootstrap_broker_string_isValid = false;

    m_bootstrap_broker_string_tls_isSet = false;
    m_bootstrap_broker_string_tls_isValid = false;

    m_bootstrap_broker_string_sasl_scram_isSet = false;
    m_bootstrap_broker_string_sasl_scram_isValid = false;

    m_bootstrap_broker_string_sasl_iam_isSet = false;
    m_bootstrap_broker_string_sasl_iam_isValid = false;

    m_bootstrap_broker_string_public_tls_isSet = false;
    m_bootstrap_broker_string_public_tls_isValid = false;

    m_bootstrap_broker_string_public_sasl_scram_isSet = false;
    m_bootstrap_broker_string_public_sasl_scram_isValid = false;

    m_bootstrap_broker_string_public_sasl_iam_isSet = false;
    m_bootstrap_broker_string_public_sasl_iam_isValid = false;

    m_bootstrap_broker_string_vpc_connectivity_tls_isSet = false;
    m_bootstrap_broker_string_vpc_connectivity_tls_isValid = false;

    m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isSet = false;
    m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isValid = false;

    m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isSet = false;
    m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isValid = false;
}

void OAIGetBootstrapBrokersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBootstrapBrokersResponse::fromJsonObject(QJsonObject json) {

    m_bootstrap_broker_string_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string, json[QString("BootstrapBrokerString")]);
    m_bootstrap_broker_string_isSet = !json[QString("BootstrapBrokerString")].isNull() && m_bootstrap_broker_string_isValid;

    m_bootstrap_broker_string_tls_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_tls, json[QString("BootstrapBrokerStringTls")]);
    m_bootstrap_broker_string_tls_isSet = !json[QString("BootstrapBrokerStringTls")].isNull() && m_bootstrap_broker_string_tls_isValid;

    m_bootstrap_broker_string_sasl_scram_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_sasl_scram, json[QString("BootstrapBrokerStringSaslScram")]);
    m_bootstrap_broker_string_sasl_scram_isSet = !json[QString("BootstrapBrokerStringSaslScram")].isNull() && m_bootstrap_broker_string_sasl_scram_isValid;

    m_bootstrap_broker_string_sasl_iam_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_sasl_iam, json[QString("BootstrapBrokerStringSaslIam")]);
    m_bootstrap_broker_string_sasl_iam_isSet = !json[QString("BootstrapBrokerStringSaslIam")].isNull() && m_bootstrap_broker_string_sasl_iam_isValid;

    m_bootstrap_broker_string_public_tls_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_public_tls, json[QString("BootstrapBrokerStringPublicTls")]);
    m_bootstrap_broker_string_public_tls_isSet = !json[QString("BootstrapBrokerStringPublicTls")].isNull() && m_bootstrap_broker_string_public_tls_isValid;

    m_bootstrap_broker_string_public_sasl_scram_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_public_sasl_scram, json[QString("BootstrapBrokerStringPublicSaslScram")]);
    m_bootstrap_broker_string_public_sasl_scram_isSet = !json[QString("BootstrapBrokerStringPublicSaslScram")].isNull() && m_bootstrap_broker_string_public_sasl_scram_isValid;

    m_bootstrap_broker_string_public_sasl_iam_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_public_sasl_iam, json[QString("BootstrapBrokerStringPublicSaslIam")]);
    m_bootstrap_broker_string_public_sasl_iam_isSet = !json[QString("BootstrapBrokerStringPublicSaslIam")].isNull() && m_bootstrap_broker_string_public_sasl_iam_isValid;

    m_bootstrap_broker_string_vpc_connectivity_tls_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_vpc_connectivity_tls, json[QString("BootstrapBrokerStringVpcConnectivityTls")]);
    m_bootstrap_broker_string_vpc_connectivity_tls_isSet = !json[QString("BootstrapBrokerStringVpcConnectivityTls")].isNull() && m_bootstrap_broker_string_vpc_connectivity_tls_isValid;

    m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_vpc_connectivity_sasl_scram, json[QString("BootstrapBrokerStringVpcConnectivitySaslScram")]);
    m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isSet = !json[QString("BootstrapBrokerStringVpcConnectivitySaslScram")].isNull() && m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isValid;

    m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_broker_string_vpc_connectivity_sasl_iam, json[QString("BootstrapBrokerStringVpcConnectivitySaslIam")]);
    m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isSet = !json[QString("BootstrapBrokerStringVpcConnectivitySaslIam")].isNull() && m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isValid;
}

QString OAIGetBootstrapBrokersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBootstrapBrokersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bootstrap_broker_string_isSet) {
        obj.insert(QString("BootstrapBrokerString"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string));
    }
    if (m_bootstrap_broker_string_tls_isSet) {
        obj.insert(QString("BootstrapBrokerStringTls"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_tls));
    }
    if (m_bootstrap_broker_string_sasl_scram_isSet) {
        obj.insert(QString("BootstrapBrokerStringSaslScram"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_sasl_scram));
    }
    if (m_bootstrap_broker_string_sasl_iam_isSet) {
        obj.insert(QString("BootstrapBrokerStringSaslIam"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_sasl_iam));
    }
    if (m_bootstrap_broker_string_public_tls_isSet) {
        obj.insert(QString("BootstrapBrokerStringPublicTls"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_public_tls));
    }
    if (m_bootstrap_broker_string_public_sasl_scram_isSet) {
        obj.insert(QString("BootstrapBrokerStringPublicSaslScram"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_public_sasl_scram));
    }
    if (m_bootstrap_broker_string_public_sasl_iam_isSet) {
        obj.insert(QString("BootstrapBrokerStringPublicSaslIam"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_public_sasl_iam));
    }
    if (m_bootstrap_broker_string_vpc_connectivity_tls_isSet) {
        obj.insert(QString("BootstrapBrokerStringVpcConnectivityTls"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_vpc_connectivity_tls));
    }
    if (m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isSet) {
        obj.insert(QString("BootstrapBrokerStringVpcConnectivitySaslScram"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_vpc_connectivity_sasl_scram));
    }
    if (m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isSet) {
        obj.insert(QString("BootstrapBrokerStringVpcConnectivitySaslIam"), ::OpenAPI::toJsonValue(m_bootstrap_broker_string_vpc_connectivity_sasl_iam));
    }
    return obj;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerString() const {
    return m_bootstrap_broker_string;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerString(const QString &bootstrap_broker_string) {
    m_bootstrap_broker_string = bootstrap_broker_string;
    m_bootstrap_broker_string_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_Set() const{
    return m_bootstrap_broker_string_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_Valid() const{
    return m_bootstrap_broker_string_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringTls() const {
    return m_bootstrap_broker_string_tls;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringTls(const QString &bootstrap_broker_string_tls) {
    m_bootstrap_broker_string_tls = bootstrap_broker_string_tls;
    m_bootstrap_broker_string_tls_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_tls_Set() const{
    return m_bootstrap_broker_string_tls_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_tls_Valid() const{
    return m_bootstrap_broker_string_tls_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringSaslScram() const {
    return m_bootstrap_broker_string_sasl_scram;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringSaslScram(const QString &bootstrap_broker_string_sasl_scram) {
    m_bootstrap_broker_string_sasl_scram = bootstrap_broker_string_sasl_scram;
    m_bootstrap_broker_string_sasl_scram_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_sasl_scram_Set() const{
    return m_bootstrap_broker_string_sasl_scram_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_sasl_scram_Valid() const{
    return m_bootstrap_broker_string_sasl_scram_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringSaslIam() const {
    return m_bootstrap_broker_string_sasl_iam;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringSaslIam(const QString &bootstrap_broker_string_sasl_iam) {
    m_bootstrap_broker_string_sasl_iam = bootstrap_broker_string_sasl_iam;
    m_bootstrap_broker_string_sasl_iam_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_sasl_iam_Set() const{
    return m_bootstrap_broker_string_sasl_iam_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_sasl_iam_Valid() const{
    return m_bootstrap_broker_string_sasl_iam_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringPublicTls() const {
    return m_bootstrap_broker_string_public_tls;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringPublicTls(const QString &bootstrap_broker_string_public_tls) {
    m_bootstrap_broker_string_public_tls = bootstrap_broker_string_public_tls;
    m_bootstrap_broker_string_public_tls_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_public_tls_Set() const{
    return m_bootstrap_broker_string_public_tls_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_public_tls_Valid() const{
    return m_bootstrap_broker_string_public_tls_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringPublicSaslScram() const {
    return m_bootstrap_broker_string_public_sasl_scram;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringPublicSaslScram(const QString &bootstrap_broker_string_public_sasl_scram) {
    m_bootstrap_broker_string_public_sasl_scram = bootstrap_broker_string_public_sasl_scram;
    m_bootstrap_broker_string_public_sasl_scram_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_public_sasl_scram_Set() const{
    return m_bootstrap_broker_string_public_sasl_scram_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_public_sasl_scram_Valid() const{
    return m_bootstrap_broker_string_public_sasl_scram_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringPublicSaslIam() const {
    return m_bootstrap_broker_string_public_sasl_iam;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringPublicSaslIam(const QString &bootstrap_broker_string_public_sasl_iam) {
    m_bootstrap_broker_string_public_sasl_iam = bootstrap_broker_string_public_sasl_iam;
    m_bootstrap_broker_string_public_sasl_iam_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_public_sasl_iam_Set() const{
    return m_bootstrap_broker_string_public_sasl_iam_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_public_sasl_iam_Valid() const{
    return m_bootstrap_broker_string_public_sasl_iam_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringVpcConnectivityTls() const {
    return m_bootstrap_broker_string_vpc_connectivity_tls;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringVpcConnectivityTls(const QString &bootstrap_broker_string_vpc_connectivity_tls) {
    m_bootstrap_broker_string_vpc_connectivity_tls = bootstrap_broker_string_vpc_connectivity_tls;
    m_bootstrap_broker_string_vpc_connectivity_tls_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_vpc_connectivity_tls_Set() const{
    return m_bootstrap_broker_string_vpc_connectivity_tls_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_vpc_connectivity_tls_Valid() const{
    return m_bootstrap_broker_string_vpc_connectivity_tls_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringVpcConnectivitySaslScram() const {
    return m_bootstrap_broker_string_vpc_connectivity_sasl_scram;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringVpcConnectivitySaslScram(const QString &bootstrap_broker_string_vpc_connectivity_sasl_scram) {
    m_bootstrap_broker_string_vpc_connectivity_sasl_scram = bootstrap_broker_string_vpc_connectivity_sasl_scram;
    m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_vpc_connectivity_sasl_scram_Set() const{
    return m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_vpc_connectivity_sasl_scram_Valid() const{
    return m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isValid;
}

QString OAIGetBootstrapBrokersResponse::getBootstrapBrokerStringVpcConnectivitySaslIam() const {
    return m_bootstrap_broker_string_vpc_connectivity_sasl_iam;
}
void OAIGetBootstrapBrokersResponse::setBootstrapBrokerStringVpcConnectivitySaslIam(const QString &bootstrap_broker_string_vpc_connectivity_sasl_iam) {
    m_bootstrap_broker_string_vpc_connectivity_sasl_iam = bootstrap_broker_string_vpc_connectivity_sasl_iam;
    m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isSet = true;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_vpc_connectivity_sasl_iam_Set() const{
    return m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isSet;
}

bool OAIGetBootstrapBrokersResponse::is_bootstrap_broker_string_vpc_connectivity_sasl_iam_Valid() const{
    return m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isValid;
}

bool OAIGetBootstrapBrokersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bootstrap_broker_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_sasl_scram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_sasl_iam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_public_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_public_sasl_scram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_public_sasl_iam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_vpc_connectivity_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_vpc_connectivity_sasl_scram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_broker_string_vpc_connectivity_sasl_iam_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBootstrapBrokersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
