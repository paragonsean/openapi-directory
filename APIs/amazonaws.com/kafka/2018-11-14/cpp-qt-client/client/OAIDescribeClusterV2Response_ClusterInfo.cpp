/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeClusterV2Response_ClusterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeClusterV2Response_ClusterInfo::OAIDescribeClusterV2Response_ClusterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeClusterV2Response_ClusterInfo::OAIDescribeClusterV2Response_ClusterInfo() {
    this->initializeModel();
}

OAIDescribeClusterV2Response_ClusterInfo::~OAIDescribeClusterV2Response_ClusterInfo() {}

void OAIDescribeClusterV2Response_ClusterInfo::initializeModel() {

    m_active_operation_arn_isSet = false;
    m_active_operation_arn_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_info_isSet = false;
    m_state_info_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_provisioned_isSet = false;
    m_provisioned_isValid = false;

    m_serverless_isSet = false;
    m_serverless_isValid = false;
}

void OAIDescribeClusterV2Response_ClusterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeClusterV2Response_ClusterInfo::fromJsonObject(QJsonObject json) {

    m_active_operation_arn_isValid = ::OpenAPI::fromJsonValue(m_active_operation_arn, json[QString("ActiveOperationArn")]);
    m_active_operation_arn_isSet = !json[QString("ActiveOperationArn")].isNull() && m_active_operation_arn_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("ClusterType")]);
    m_cluster_type_isSet = !json[QString("ClusterType")].isNull() && m_cluster_type_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_info_isValid = ::OpenAPI::fromJsonValue(m_state_info, json[QString("StateInfo")]);
    m_state_info_isSet = !json[QString("StateInfo")].isNull() && m_state_info_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_provisioned_isValid = ::OpenAPI::fromJsonValue(m_provisioned, json[QString("Provisioned")]);
    m_provisioned_isSet = !json[QString("Provisioned")].isNull() && m_provisioned_isValid;

    m_serverless_isValid = ::OpenAPI::fromJsonValue(m_serverless, json[QString("Serverless")]);
    m_serverless_isSet = !json[QString("Serverless")].isNull() && m_serverless_isValid;
}

QString OAIDescribeClusterV2Response_ClusterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeClusterV2Response_ClusterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_active_operation_arn_isSet) {
        obj.insert(QString("ActiveOperationArn"), ::OpenAPI::toJsonValue(m_active_operation_arn));
    }
    if (m_cluster_type.isSet()) {
        obj.insert(QString("ClusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_info.isSet()) {
        obj.insert(QString("StateInfo"), ::OpenAPI::toJsonValue(m_state_info));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_provisioned.isSet()) {
        obj.insert(QString("Provisioned"), ::OpenAPI::toJsonValue(m_provisioned));
    }
    if (m_serverless.isSet()) {
        obj.insert(QString("Serverless"), ::OpenAPI::toJsonValue(m_serverless));
    }
    return obj;
}

QString OAIDescribeClusterV2Response_ClusterInfo::getActiveOperationArn() const {
    return m_active_operation_arn;
}
void OAIDescribeClusterV2Response_ClusterInfo::setActiveOperationArn(const QString &active_operation_arn) {
    m_active_operation_arn = active_operation_arn;
    m_active_operation_arn_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_active_operation_arn_Set() const{
    return m_active_operation_arn_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_active_operation_arn_Valid() const{
    return m_active_operation_arn_isValid;
}

OAIClusterType OAIDescribeClusterV2Response_ClusterInfo::getClusterType() const {
    return m_cluster_type;
}
void OAIDescribeClusterV2Response_ClusterInfo::setClusterType(const OAIClusterType &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QString OAIDescribeClusterV2Response_ClusterInfo::getClusterArn() const {
    return m_cluster_arn;
}
void OAIDescribeClusterV2Response_ClusterInfo::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAIDescribeClusterV2Response_ClusterInfo::getClusterName() const {
    return m_cluster_name;
}
void OAIDescribeClusterV2Response_ClusterInfo::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QDateTime OAIDescribeClusterV2Response_ClusterInfo::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeClusterV2Response_ClusterInfo::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeClusterV2Response_ClusterInfo::getCurrentVersion() const {
    return m_current_version;
}
void OAIDescribeClusterV2Response_ClusterInfo::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_current_version_Valid() const{
    return m_current_version_isValid;
}

OAIClusterState OAIDescribeClusterV2Response_ClusterInfo::getState() const {
    return m_state;
}
void OAIDescribeClusterV2Response_ClusterInfo::setState(const OAIClusterState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_state_Valid() const{
    return m_state_isValid;
}

OAICluster_StateInfo OAIDescribeClusterV2Response_ClusterInfo::getStateInfo() const {
    return m_state_info;
}
void OAIDescribeClusterV2Response_ClusterInfo::setStateInfo(const OAICluster_StateInfo &state_info) {
    m_state_info = state_info;
    m_state_info_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_state_info_Set() const{
    return m_state_info_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_state_info_Valid() const{
    return m_state_info_isValid;
}

QMap OAIDescribeClusterV2Response_ClusterInfo::getTags() const {
    return m_tags;
}
void OAIDescribeClusterV2Response_ClusterInfo::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICluster_Provisioned OAIDescribeClusterV2Response_ClusterInfo::getProvisioned() const {
    return m_provisioned;
}
void OAIDescribeClusterV2Response_ClusterInfo::setProvisioned(const OAICluster_Provisioned &provisioned) {
    m_provisioned = provisioned;
    m_provisioned_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_provisioned_Set() const{
    return m_provisioned_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_provisioned_Valid() const{
    return m_provisioned_isValid;
}

OAICluster_Serverless OAIDescribeClusterV2Response_ClusterInfo::getServerless() const {
    return m_serverless;
}
void OAIDescribeClusterV2Response_ClusterInfo::setServerless(const OAICluster_Serverless &serverless) {
    m_serverless = serverless;
    m_serverless_isSet = true;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_serverless_Set() const{
    return m_serverless_isSet;
}

bool OAIDescribeClusterV2Response_ClusterInfo::is_serverless_Valid() const{
    return m_serverless_isValid;
}

bool OAIDescribeClusterV2Response_ClusterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_operation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeClusterV2Response_ClusterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
