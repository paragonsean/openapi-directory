/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManagedStreamingForKafka);
  }
}(this, function(expect, ManagedStreamingForKafka) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManagedStreamingForKafka.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchAssociateScramSecret', function() {
      it('should call batchAssociateScramSecret successfully', function(done) {
        //uncomment below and update the code to test batchAssociateScramSecret
        //instance.batchAssociateScramSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDisassociateScramSecret', function() {
      it('should call batchDisassociateScramSecret successfully', function(done) {
        //uncomment below and update the code to test batchDisassociateScramSecret
        //instance.batchDisassociateScramSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCluster', function() {
      it('should call createCluster successfully', function(done) {
        //uncomment below and update the code to test createCluster
        //instance.createCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterV2', function() {
      it('should call createClusterV2 successfully', function(done) {
        //uncomment below and update the code to test createClusterV2
        //instance.createClusterV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfiguration', function() {
      it('should call createConfiguration successfully', function(done) {
        //uncomment below and update the code to test createConfiguration
        //instance.createConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcConnection', function() {
      it('should call createVpcConnection successfully', function(done) {
        //uncomment below and update the code to test createVpcConnection
        //instance.createVpcConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCluster', function() {
      it('should call deleteCluster successfully', function(done) {
        //uncomment below and update the code to test deleteCluster
        //instance.deleteCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterPolicy', function() {
      it('should call deleteClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteClusterPolicy
        //instance.deleteClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConfiguration', function() {
      it('should call deleteConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteConfiguration
        //instance.deleteConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcConnection', function() {
      it('should call deleteVpcConnection successfully', function(done) {
        //uncomment below and update the code to test deleteVpcConnection
        //instance.deleteVpcConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCluster', function() {
      it('should call describeCluster successfully', function(done) {
        //uncomment below and update the code to test describeCluster
        //instance.describeCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClusterOperation', function() {
      it('should call describeClusterOperation successfully', function(done) {
        //uncomment below and update the code to test describeClusterOperation
        //instance.describeClusterOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClusterOperationV2', function() {
      it('should call describeClusterOperationV2 successfully', function(done) {
        //uncomment below and update the code to test describeClusterOperationV2
        //instance.describeClusterOperationV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClusterV2', function() {
      it('should call describeClusterV2 successfully', function(done) {
        //uncomment below and update the code to test describeClusterV2
        //instance.describeClusterV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConfiguration', function() {
      it('should call describeConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeConfiguration
        //instance.describeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConfigurationRevision', function() {
      it('should call describeConfigurationRevision successfully', function(done) {
        //uncomment below and update the code to test describeConfigurationRevision
        //instance.describeConfigurationRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcConnection', function() {
      it('should call describeVpcConnection successfully', function(done) {
        //uncomment below and update the code to test describeVpcConnection
        //instance.describeVpcConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBootstrapBrokers', function() {
      it('should call getBootstrapBrokers successfully', function(done) {
        //uncomment below and update the code to test getBootstrapBrokers
        //instance.getBootstrapBrokers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getClusterPolicy', function() {
      it('should call getClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test getClusterPolicy
        //instance.getClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompatibleKafkaVersions', function() {
      it('should call getCompatibleKafkaVersions successfully', function(done) {
        //uncomment below and update the code to test getCompatibleKafkaVersions
        //instance.getCompatibleKafkaVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClientVpcConnections', function() {
      it('should call listClientVpcConnections successfully', function(done) {
        //uncomment below and update the code to test listClientVpcConnections
        //instance.listClientVpcConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterOperations', function() {
      it('should call listClusterOperations successfully', function(done) {
        //uncomment below and update the code to test listClusterOperations
        //instance.listClusterOperations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterOperationsV2', function() {
      it('should call listClusterOperationsV2 successfully', function(done) {
        //uncomment below and update the code to test listClusterOperationsV2
        //instance.listClusterOperationsV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusters', function() {
      it('should call listClusters successfully', function(done) {
        //uncomment below and update the code to test listClusters
        //instance.listClusters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClustersV2', function() {
      it('should call listClustersV2 successfully', function(done) {
        //uncomment below and update the code to test listClustersV2
        //instance.listClustersV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigurationRevisions', function() {
      it('should call listConfigurationRevisions successfully', function(done) {
        //uncomment below and update the code to test listConfigurationRevisions
        //instance.listConfigurationRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigurations', function() {
      it('should call listConfigurations successfully', function(done) {
        //uncomment below and update the code to test listConfigurations
        //instance.listConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listKafkaVersions', function() {
      it('should call listKafkaVersions successfully', function(done) {
        //uncomment below and update the code to test listKafkaVersions
        //instance.listKafkaVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNodes', function() {
      it('should call listNodes successfully', function(done) {
        //uncomment below and update the code to test listNodes
        //instance.listNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listScramSecrets', function() {
      it('should call listScramSecrets successfully', function(done) {
        //uncomment below and update the code to test listScramSecrets
        //instance.listScramSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcConnections', function() {
      it('should call listVpcConnections successfully', function(done) {
        //uncomment below and update the code to test listVpcConnections
        //instance.listVpcConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putClusterPolicy', function() {
      it('should call putClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test putClusterPolicy
        //instance.putClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebootBroker', function() {
      it('should call rebootBroker successfully', function(done) {
        //uncomment below and update the code to test rebootBroker
        //instance.rebootBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rejectClientVpcConnection', function() {
      it('should call rejectClientVpcConnection successfully', function(done) {
        //uncomment below and update the code to test rejectClientVpcConnection
        //instance.rejectClientVpcConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBrokerCount', function() {
      it('should call updateBrokerCount successfully', function(done) {
        //uncomment below and update the code to test updateBrokerCount
        //instance.updateBrokerCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBrokerStorage', function() {
      it('should call updateBrokerStorage successfully', function(done) {
        //uncomment below and update the code to test updateBrokerStorage
        //instance.updateBrokerStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBrokerType', function() {
      it('should call updateBrokerType successfully', function(done) {
        //uncomment below and update the code to test updateBrokerType
        //instance.updateBrokerType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClusterConfiguration', function() {
      it('should call updateClusterConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateClusterConfiguration
        //instance.updateClusterConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClusterKafkaVersion', function() {
      it('should call updateClusterKafkaVersion successfully', function(done) {
        //uncomment below and update the code to test updateClusterKafkaVersion
        //instance.updateClusterKafkaVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConfiguration', function() {
      it('should call updateConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateConfiguration
        //instance.updateConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectivity', function() {
      it('should call updateConnectivity successfully', function(done) {
        //uncomment below and update the code to test updateConnectivity
        //instance.updateConnectivity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMonitoring', function() {
      it('should call updateMonitoring successfully', function(done) {
        //uncomment below and update the code to test updateMonitoring
        //instance.updateMonitoring(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecurity', function() {
      it('should call updateSecurity successfully', function(done) {
        //uncomment below and update the code to test updateSecurity
        //instance.updateSecurity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStorage', function() {
      it('should call updateStorage successfully', function(done) {
        //uncomment below and update the code to test updateStorage
        //instance.updateStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
