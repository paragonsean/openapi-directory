/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchAssociateScramSecretRequest from '../model/BatchAssociateScramSecretRequest';
import BatchAssociateScramSecretResponse from '../model/BatchAssociateScramSecretResponse';
import BatchDisassociateScramSecretResponse from '../model/BatchDisassociateScramSecretResponse';
import CreateClusterRequest from '../model/CreateClusterRequest';
import CreateClusterResponse from '../model/CreateClusterResponse';
import CreateClusterV2Request from '../model/CreateClusterV2Request';
import CreateClusterV2Response from '../model/CreateClusterV2Response';
import CreateConfigurationRequest from '../model/CreateConfigurationRequest';
import CreateConfigurationResponse from '../model/CreateConfigurationResponse';
import CreateVpcConnectionRequest from '../model/CreateVpcConnectionRequest';
import CreateVpcConnectionResponse from '../model/CreateVpcConnectionResponse';
import DeleteClusterResponse from '../model/DeleteClusterResponse';
import DeleteConfigurationResponse from '../model/DeleteConfigurationResponse';
import DeleteVpcConnectionResponse from '../model/DeleteVpcConnectionResponse';
import DescribeClusterOperationResponse from '../model/DescribeClusterOperationResponse';
import DescribeClusterOperationV2Response from '../model/DescribeClusterOperationV2Response';
import DescribeClusterResponse from '../model/DescribeClusterResponse';
import DescribeClusterV2Response from '../model/DescribeClusterV2Response';
import DescribeConfigurationResponse from '../model/DescribeConfigurationResponse';
import DescribeConfigurationRevisionResponse from '../model/DescribeConfigurationRevisionResponse';
import DescribeVpcConnectionResponse from '../model/DescribeVpcConnectionResponse';
import GetBootstrapBrokersResponse from '../model/GetBootstrapBrokersResponse';
import GetClusterPolicyResponse from '../model/GetClusterPolicyResponse';
import GetCompatibleKafkaVersionsResponse from '../model/GetCompatibleKafkaVersionsResponse';
import ListClientVpcConnectionsResponse from '../model/ListClientVpcConnectionsResponse';
import ListClusterOperationsResponse from '../model/ListClusterOperationsResponse';
import ListClusterOperationsV2Response from '../model/ListClusterOperationsV2Response';
import ListClustersResponse from '../model/ListClustersResponse';
import ListClustersV2Response from '../model/ListClustersV2Response';
import ListConfigurationRevisionsResponse from '../model/ListConfigurationRevisionsResponse';
import ListConfigurationsResponse from '../model/ListConfigurationsResponse';
import ListKafkaVersionsResponse from '../model/ListKafkaVersionsResponse';
import ListNodesResponse from '../model/ListNodesResponse';
import ListScramSecretsResponse from '../model/ListScramSecretsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListVpcConnectionsResponse from '../model/ListVpcConnectionsResponse';
import PutClusterPolicyRequest from '../model/PutClusterPolicyRequest';
import PutClusterPolicyResponse from '../model/PutClusterPolicyResponse';
import RebootBrokerRequest from '../model/RebootBrokerRequest';
import RebootBrokerResponse from '../model/RebootBrokerResponse';
import RejectClientVpcConnectionRequest from '../model/RejectClientVpcConnectionRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateBrokerCountRequest from '../model/UpdateBrokerCountRequest';
import UpdateBrokerCountResponse from '../model/UpdateBrokerCountResponse';
import UpdateBrokerStorageRequest from '../model/UpdateBrokerStorageRequest';
import UpdateBrokerStorageResponse from '../model/UpdateBrokerStorageResponse';
import UpdateBrokerTypeRequest from '../model/UpdateBrokerTypeRequest';
import UpdateBrokerTypeResponse from '../model/UpdateBrokerTypeResponse';
import UpdateClusterConfigurationRequest from '../model/UpdateClusterConfigurationRequest';
import UpdateClusterConfigurationResponse from '../model/UpdateClusterConfigurationResponse';
import UpdateClusterKafkaVersionRequest from '../model/UpdateClusterKafkaVersionRequest';
import UpdateClusterKafkaVersionResponse from '../model/UpdateClusterKafkaVersionResponse';
import UpdateConfigurationRequest from '../model/UpdateConfigurationRequest';
import UpdateConfigurationResponse from '../model/UpdateConfigurationResponse';
import UpdateConnectivityRequest from '../model/UpdateConnectivityRequest';
import UpdateConnectivityResponse from '../model/UpdateConnectivityResponse';
import UpdateMonitoringRequest from '../model/UpdateMonitoringRequest';
import UpdateMonitoringResponse from '../model/UpdateMonitoringResponse';
import UpdateSecurityRequest from '../model/UpdateSecurityRequest';
import UpdateSecurityResponse from '../model/UpdateSecurityResponse';
import UpdateStorageRequest from '../model/UpdateStorageRequest';
import UpdateStorageResponse from '../model/UpdateStorageResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-14
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchAssociateScramSecret operation.
     * @callback module:api/DefaultApi~batchAssociateScramSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchAssociateScramSecretResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Associates one or more Scram Secrets with an Amazon MSK cluster.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>          
     * @param {module:model/BatchAssociateScramSecretRequest} batchAssociateScramSecretRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchAssociateScramSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchAssociateScramSecretResponse}
     */
    batchAssociateScramSecret(clusterArn, batchAssociateScramSecretRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchAssociateScramSecretRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling batchAssociateScramSecret");
      }
      // verify the required parameter 'batchAssociateScramSecretRequest' is set
      if (batchAssociateScramSecretRequest === undefined || batchAssociateScramSecretRequest === null) {
        throw new Error("Missing the required parameter 'batchAssociateScramSecretRequest' when calling batchAssociateScramSecret");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchAssociateScramSecretResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/scram-secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDisassociateScramSecret operation.
     * @callback module:api/DefaultApi~batchDisassociateScramSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDisassociateScramSecretResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Disassociates one or more Scram Secrets from an Amazon MSK cluster.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>          
     * @param {module:model/BatchAssociateScramSecretRequest} batchAssociateScramSecretRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDisassociateScramSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDisassociateScramSecretResponse}
     */
    batchDisassociateScramSecret(clusterArn, batchAssociateScramSecretRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchAssociateScramSecretRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling batchDisassociateScramSecret");
      }
      // verify the required parameter 'batchAssociateScramSecretRequest' is set
      if (batchAssociateScramSecretRequest === undefined || batchAssociateScramSecretRequest === null) {
        throw new Error("Missing the required parameter 'batchAssociateScramSecretRequest' when calling batchDisassociateScramSecret");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDisassociateScramSecretResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/scram-secrets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCluster operation.
     * @callback module:api/DefaultApi~createClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Creates a new MSK cluster.</p>          
     * @param {module:model/CreateClusterRequest} createClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterResponse}
     */
    createCluster(createClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createClusterRequest;
      // verify the required parameter 'createClusterRequest' is set
      if (createClusterRequest === undefined || createClusterRequest === null) {
        throw new Error("Missing the required parameter 'createClusterRequest' when calling createCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterResponse;
      return this.apiClient.callApi(
        '/v1/clusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClusterV2 operation.
     * @callback module:api/DefaultApi~createClusterV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Creates a new MSK cluster.</p>          
     * @param {module:model/CreateClusterV2Request} createClusterV2Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterV2Response}
     */
    createClusterV2(createClusterV2Request, opts, callback) {
      opts = opts || {};
      let postBody = createClusterV2Request;
      // verify the required parameter 'createClusterV2Request' is set
      if (createClusterV2Request === undefined || createClusterV2Request === null) {
        throw new Error("Missing the required parameter 'createClusterV2Request' when calling createClusterV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterV2Response;
      return this.apiClient.callApi(
        '/api/v2/clusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfiguration operation.
     * @callback module:api/DefaultApi~createConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Creates a new MSK configuration.</p>          
     * @param {module:model/CreateConfigurationRequest} createConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConfigurationResponse}
     */
    createConfiguration(createConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationRequest;
      // verify the required parameter 'createConfigurationRequest' is set
      if (createConfigurationRequest === undefined || createConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationRequest' when calling createConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcConnection operation.
     * @callback module:api/DefaultApi~createVpcConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Creates a new MSK VPC connection.</p>          
     * @param {module:model/CreateVpcConnectionRequest} createVpcConnectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVpcConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcConnectionResponse}
     */
    createVpcConnection(createVpcConnectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVpcConnectionRequest;
      // verify the required parameter 'createVpcConnectionRequest' is set
      if (createVpcConnectionRequest === undefined || createVpcConnectionRequest === null) {
        throw new Error("Missing the required parameter 'createVpcConnectionRequest' when calling createVpcConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVpcConnectionResponse;
      return this.apiClient.callApi(
        '/v1/vpc-connection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCluster operation.
     * @callback module:api/DefaultApi~deleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [currentVersion]              <p>The current version of the MSK cluster.</p>          
     * @param {module:api/DefaultApi~deleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterResponse}
     */
    deleteCluster(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling deleteCluster");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
        'currentVersion': opts['currentVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteClusterResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterPolicy operation.
     * @callback module:api/DefaultApi~deleteClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Deletes the MSK cluster policy specified by the Amazon Resource Name (ARN) in the request.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteClusterPolicy(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling deleteClusterPolicy");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfiguration operation.
     * @callback module:api/DefaultApi~deleteConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Deletes an MSK Configuration.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteConfigurationResponse}
     */
    deleteConfiguration(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling deleteConfiguration");
      }

      let pathParams = {
        'arn': arn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{arn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcConnection operation.
     * @callback module:api/DefaultApi~deleteVpcConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVpcConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Deletes a MSK VPC connection.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK VPC connection.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVpcConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVpcConnectionResponse}
     */
    deleteVpcConnection(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling deleteVpcConnection");
      }

      let pathParams = {
        'arn': arn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVpcConnectionResponse;
      return this.apiClient.callApi(
        '/v1/vpc-connection/{arn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCluster operation.
     * @callback module:api/DefaultApi~describeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClusterResponse}
     */
    describeCluster(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling describeCluster");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeClusterResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeClusterOperation operation.
     * @callback module:api/DefaultApi~describeClusterOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClusterOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of the cluster operation specified by the ARN.</p>          
     * @param {String} clusterOperationArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClusterOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClusterOperationResponse}
     */
    describeClusterOperation(clusterOperationArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterOperationArn' is set
      if (clusterOperationArn === undefined || clusterOperationArn === null) {
        throw new Error("Missing the required parameter 'clusterOperationArn' when calling describeClusterOperation");
      }

      let pathParams = {
        'clusterOperationArn': clusterOperationArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeClusterOperationResponse;
      return this.apiClient.callApi(
        '/v1/operations/{clusterOperationArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeClusterOperationV2 operation.
     * @callback module:api/DefaultApi~describeClusterOperationV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClusterOperationV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of the cluster operation specified by the ARN.</p> 
     * @param {String} clusterOperationArn ARN of the cluster operation to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClusterOperationV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClusterOperationV2Response}
     */
    describeClusterOperationV2(clusterOperationArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterOperationArn' is set
      if (clusterOperationArn === undefined || clusterOperationArn === null) {
        throw new Error("Missing the required parameter 'clusterOperationArn' when calling describeClusterOperationV2");
      }

      let pathParams = {
        'clusterOperationArn': clusterOperationArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeClusterOperationV2Response;
      return this.apiClient.callApi(
        '/api/v2/operations/{clusterOperationArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeClusterV2 operation.
     * @callback module:api/DefaultApi~describeClusterV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClusterV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClusterV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClusterV2Response}
     */
    describeClusterV2(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling describeClusterV2");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeClusterV2Response;
      return this.apiClient.callApi(
        '/api/v2/clusters/{clusterArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConfiguration operation.
     * @callback module:api/DefaultApi~describeConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of this MSK configuration.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConfigurationResponse}
     */
    describeConfiguration(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling describeConfiguration");
      }

      let pathParams = {
        'arn': arn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConfigurationRevision operation.
     * @callback module:api/DefaultApi~describeConfigurationRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConfigurationRevisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of this revision of the configuration.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>          
     * @param {Number} revision              <p>A string that uniquely identifies a revision of an MSK configuration.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConfigurationRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConfigurationRevisionResponse}
     */
    describeConfigurationRevision(arn, revision, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling describeConfigurationRevision");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling describeConfigurationRevision");
      }

      let pathParams = {
        'arn': arn,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeConfigurationRevisionResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{arn}/revisions/{revision}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVpcConnection operation.
     * @callback module:api/DefaultApi~describeVpcConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVpcConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a description of this MSK VPC connection.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) that uniquely identifies a MSK VPC connection.</p>    
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVpcConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVpcConnectionResponse}
     */
    describeVpcConnection(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling describeVpcConnection");
      }

      let pathParams = {
        'arn': arn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVpcConnectionResponse;
      return this.apiClient.callApi(
        '/v1/vpc-connection/{arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBootstrapBrokers operation.
     * @callback module:api/DefaultApi~getBootstrapBrokersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBootstrapBrokersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>A list of brokers that a client application can use to bootstrap.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBootstrapBrokersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBootstrapBrokersResponse}
     */
    getBootstrapBrokers(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling getBootstrapBrokers");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBootstrapBrokersResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/bootstrap-brokers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterPolicy operation.
     * @callback module:api/DefaultApi~getClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClusterPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Get the MSK cluster policy specified by the Amazon Resource Name (ARN) in the request.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster.</p>             
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClusterPolicyResponse}
     */
    getClusterPolicy(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling getClusterPolicy");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetClusterPolicyResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompatibleKafkaVersions operation.
     * @callback module:api/DefaultApi~getCompatibleKafkaVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCompatibleKafkaVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Gets the Apache Kafka versions to which you can update the MSK cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterArn]              <p>The Amazon Resource Name (ARN) of the cluster check.</p>             
     * @param {module:api/DefaultApi~getCompatibleKafkaVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCompatibleKafkaVersionsResponse}
     */
    getCompatibleKafkaVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'clusterArn': opts['clusterArn']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCompatibleKafkaVersionsResponse;
      return this.apiClient.callApi(
        '/v1/compatible-kafka-versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClientVpcConnections operation.
     * @callback module:api/DefaultApi~listClientVpcConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClientVpcConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the VPC connections in this Region.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listClientVpcConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClientVpcConnectionsResponse}
     */
    listClientVpcConnections(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling listClientVpcConnections");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClientVpcConnectionsResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/client-vpc-connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterOperations operation.
     * @callback module:api/DefaultApi~listClusterOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClusterOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listClusterOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClusterOperationsResponse}
     */
    listClusterOperations(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling listClusterOperations");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClusterOperationsResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterOperationsV2 operation.
     * @callback module:api/DefaultApi~listClusterOperationsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClusterOperationsV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>          
     * @param {String} clusterArn The arn of the cluster whose operations are being requested.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maxResults of the query.
     * @param {String} [nextToken] The nextToken of the query.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listClusterOperationsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClusterOperationsV2Response}
     */
    listClusterOperationsV2(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling listClusterOperationsV2");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClusterOperationsV2Response;
      return this.apiClient.callApi(
        '/api/v2/clusters/{clusterArn}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusters operation.
     * @callback module:api/DefaultApi~listClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClustersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the MSK clusters in the current Region.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterNameFilter]              <p>Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>          
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClustersResponse}
     */
    listClusters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'clusterNameFilter': opts['clusterNameFilter'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClustersResponse;
      return this.apiClient.callApi(
        '/v1/clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClustersV2 operation.
     * @callback module:api/DefaultApi~listClustersV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClustersV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the MSK clusters in the current Region.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterNameFilter]              <p>Specify a prefix of the names of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>          
     * @param {String} [clusterTypeFilter]              <p>Specify either PROVISIONED or SERVERLESS.</p>          
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listClustersV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClustersV2Response}
     */
    listClustersV2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'clusterNameFilter': opts['clusterNameFilter'],
        'clusterTypeFilter': opts['clusterTypeFilter'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClustersV2Response;
      return this.apiClient.callApi(
        '/api/v2/clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurationRevisions operation.
     * @callback module:api/DefaultApi~listConfigurationRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the MSK configurations in this Region.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listConfigurationRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationRevisionsResponse}
     */
    listConfigurationRevisions(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling listConfigurationRevisions");
      }

      let pathParams = {
        'arn': arn
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationRevisionsResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{arn}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurations operation.
     * @callback module:api/DefaultApi~listConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the MSK configurations in this Region.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationsResponse}
     */
    listConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationsResponse;
      return this.apiClient.callApi(
        '/v1/configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKafkaVersions operation.
     * @callback module:api/DefaultApi~listKafkaVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListKafkaVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of Apache Kafka versions.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listKafkaVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListKafkaVersionsResponse}
     */
    listKafkaVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListKafkaVersionsResponse;
      return this.apiClient.callApi(
        '/v1/kafka-versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNodes operation.
     * @callback module:api/DefaultApi~listNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of the broker nodes in the cluster.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNodesResponse}
     */
    listNodes(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling listNodes");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNodesResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listScramSecrets operation.
     * @callback module:api/DefaultApi~listScramSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListScramSecretsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of the Scram Secrets associated with an Amazon MSK cluster.</p>          
     * @param {String} clusterArn              <p>The arn of the cluster.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maxResults of the query.</p>          
     * @param {String} [nextToken]              <p>The nextToken of the query.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listScramSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListScramSecretsResponse}
     */
    listScramSecrets(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling listScramSecrets");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListScramSecretsResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/scram-secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of the tags associated with the specified resource.</p>          
     * @param {String} resourceArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/v1/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcConnections operation.
     * @callback module:api/DefaultApi~listVpcConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns a list of all the VPC connections in this Region.</p>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]              <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>          
     * @param {String} [nextToken]              <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.              To get the next batch, provide this token in your next request.</p>          
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listVpcConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcConnectionsResponse}
     */
    listVpcConnections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcConnectionsResponse;
      return this.apiClient.callApi(
        '/v1/vpc-connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putClusterPolicy operation.
     * @callback module:api/DefaultApi~putClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutClusterPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Creates or updates the MSK cluster policy specified by the cluster Amazon Resource Name (ARN) in the request.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster.</p>          
     * @param {module:model/PutClusterPolicyRequest} putClusterPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutClusterPolicyResponse}
     */
    putClusterPolicy(clusterArn, putClusterPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putClusterPolicyRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling putClusterPolicy");
      }
      // verify the required parameter 'putClusterPolicyRequest' is set
      if (putClusterPolicyRequest === undefined || putClusterPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putClusterPolicyRequest' when calling putClusterPolicy");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutClusterPolicyResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootBroker operation.
     * @callback module:api/DefaultApi~rebootBrokerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootBrokerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboots brokers.
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>          
     * @param {module:model/RebootBrokerRequest} rebootBrokerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rebootBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootBrokerResponse}
     */
    rebootBroker(clusterArn, rebootBrokerRequest, opts, callback) {
      opts = opts || {};
      let postBody = rebootBrokerRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling rebootBroker");
      }
      // verify the required parameter 'rebootBrokerRequest' is set
      if (rebootBrokerRequest === undefined || rebootBrokerRequest === null) {
        throw new Error("Missing the required parameter 'rebootBrokerRequest' when calling rebootBroker");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RebootBrokerResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/reboot-broker', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectClientVpcConnection operation.
     * @callback module:api/DefaultApi~rejectClientVpcConnectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Returns empty response.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster.</p>          
     * @param {module:model/RejectClientVpcConnectionRequest} rejectClientVpcConnectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectClientVpcConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rejectClientVpcConnection(clusterArn, rejectClientVpcConnectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = rejectClientVpcConnectionRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling rejectClientVpcConnection");
      }
      // verify the required parameter 'rejectClientVpcConnectionRequest' is set
      if (rejectClientVpcConnectionRequest === undefined || rejectClientVpcConnectionRequest === null) {
        throw new Error("Missing the required parameter 'rejectClientVpcConnectionRequest' when calling rejectClientVpcConnection");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/client-vpc-connection', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Adds tags to the specified MSK resource.</p>          
     * @param {String} resourceArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>          
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Removes the tags associated with the keys that are provided in the query.</p>          
     * @param {String} resourceArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>          
     * @param {Array.<String>} tagKeys              <p>Tag keys must be unique for a given cluster. In addition, the following restrictions apply:</p>             <ul>                <li>                   <p>Each tag key must be unique. If you add a tag with a key that's already in                   use, your new tag overwrites the existing key-value pair. </p>                </li>                <li>                   <p>You can't start a tag key with aws: because this prefix is reserved for use                   by  AWS.  AWS creates tags that begin with this prefix on your behalf, but                   you can't edit or delete them.</p>                </li>                <li>                   <p>Tag keys must be between 1 and 128 Unicode characters in length.</p>                </li>                <li>                   <p>Tag keys must consist of the following characters: Unicode letters, digits,                   white space, and the following special characters: _ . / = + -                      @.</p>                </li>             </ul>          
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrokerCount operation.
     * @callback module:api/DefaultApi~updateBrokerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBrokerCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the number of broker nodes in the cluster.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {module:model/UpdateBrokerCountRequest} updateBrokerCountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBrokerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBrokerCountResponse}
     */
    updateBrokerCount(clusterArn, updateBrokerCountRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBrokerCountRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateBrokerCount");
      }
      // verify the required parameter 'updateBrokerCountRequest' is set
      if (updateBrokerCountRequest === undefined || updateBrokerCountRequest === null) {
        throw new Error("Missing the required parameter 'updateBrokerCountRequest' when calling updateBrokerCount");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBrokerCountResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/nodes/count', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrokerStorage operation.
     * @callback module:api/DefaultApi~updateBrokerStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBrokerStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the EBS storage associated with MSK brokers.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {module:model/UpdateBrokerStorageRequest} updateBrokerStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBrokerStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBrokerStorageResponse}
     */
    updateBrokerStorage(clusterArn, updateBrokerStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBrokerStorageRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateBrokerStorage");
      }
      // verify the required parameter 'updateBrokerStorageRequest' is set
      if (updateBrokerStorageRequest === undefined || updateBrokerStorageRequest === null) {
        throw new Error("Missing the required parameter 'updateBrokerStorageRequest' when calling updateBrokerStorage");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBrokerStorageResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/nodes/storage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrokerType operation.
     * @callback module:api/DefaultApi~updateBrokerTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBrokerTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates EC2 instance type.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {module:model/UpdateBrokerTypeRequest} updateBrokerTypeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBrokerTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBrokerTypeResponse}
     */
    updateBrokerType(clusterArn, updateBrokerTypeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBrokerTypeRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateBrokerType");
      }
      // verify the required parameter 'updateBrokerTypeRequest' is set
      if (updateBrokerTypeRequest === undefined || updateBrokerTypeRequest === null) {
        throw new Error("Missing the required parameter 'updateBrokerTypeRequest' when calling updateBrokerType");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBrokerTypeResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/nodes/type', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterConfiguration operation.
     * @callback module:api/DefaultApi~updateClusterConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateClusterConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the cluster with the configuration that is specified in the request body.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {module:model/UpdateClusterConfigurationRequest} updateClusterConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateClusterConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateClusterConfigurationResponse}
     */
    updateClusterConfiguration(clusterArn, updateClusterConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterConfigurationRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateClusterConfiguration");
      }
      // verify the required parameter 'updateClusterConfigurationRequest' is set
      if (updateClusterConfigurationRequest === undefined || updateClusterConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateClusterConfigurationRequest' when calling updateClusterConfiguration");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateClusterConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterKafkaVersion operation.
     * @callback module:api/DefaultApi~updateClusterKafkaVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateClusterKafkaVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the Apache Kafka version for the cluster.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>             
     * @param {module:model/UpdateClusterKafkaVersionRequest} updateClusterKafkaVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateClusterKafkaVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateClusterKafkaVersionResponse}
     */
    updateClusterKafkaVersion(clusterArn, updateClusterKafkaVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterKafkaVersionRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateClusterKafkaVersion");
      }
      // verify the required parameter 'updateClusterKafkaVersionRequest' is set
      if (updateClusterKafkaVersionRequest === undefined || updateClusterKafkaVersionRequest === null) {
        throw new Error("Missing the required parameter 'updateClusterKafkaVersionRequest' when calling updateClusterKafkaVersion");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateClusterKafkaVersionResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/version', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguration operation.
     * @callback module:api/DefaultApi~updateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates an MSK configuration.</p>          
     * @param {String} arn              <p>The Amazon Resource Name (ARN) of the configuration.</p>          
     * @param {module:model/UpdateConfigurationRequest} updateConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConfigurationResponse}
     */
    updateConfiguration(arn, updateConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigurationRequest;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling updateConfiguration");
      }
      // verify the required parameter 'updateConfigurationRequest' is set
      if (updateConfigurationRequest === undefined || updateConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigurationRequest' when calling updateConfiguration");
      }

      let pathParams = {
        'arn': arn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{arn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectivity operation.
     * @callback module:api/DefaultApi~updateConnectivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConnectivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the cluster's connectivity configuration.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the configuration.</p>          
     * @param {module:model/UpdateConnectivityRequest} updateConnectivityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConnectivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConnectivityResponse}
     */
    updateConnectivity(clusterArn, updateConnectivityRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConnectivityRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateConnectivity");
      }
      // verify the required parameter 'updateConnectivityRequest' is set
      if (updateConnectivityRequest === undefined || updateConnectivityRequest === null) {
        throw new Error("Missing the required parameter 'updateConnectivityRequest' when calling updateConnectivity");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConnectivityResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/connectivity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMonitoring operation.
     * @callback module:api/DefaultApi~updateMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMonitoringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {module:model/UpdateMonitoringRequest} updateMonitoringRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMonitoringResponse}
     */
    updateMonitoring(clusterArn, updateMonitoringRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMonitoringRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateMonitoring");
      }
      // verify the required parameter 'updateMonitoringRequest' is set
      if (updateMonitoringRequest === undefined || updateMonitoringRequest === null) {
        throw new Error("Missing the required parameter 'updateMonitoringRequest' when calling updateMonitoring");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMonitoringResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/monitoring', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurity operation.
     * @callback module:api/DefaultApi~updateSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSecurityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              <p>Updates the security settings for the cluster. You can use this operation to specify encryption and authentication on existing clusters.</p>          
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>          
     * @param {module:model/UpdateSecurityRequest} updateSecurityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSecurityResponse}
     */
    updateSecurity(clusterArn, updateSecurityRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSecurityRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateSecurity");
      }
      // verify the required parameter 'updateSecurityRequest' is set
      if (updateSecurityRequest === undefined || updateSecurityRequest === null) {
        throw new Error("Missing the required parameter 'updateSecurityRequest' when calling updateSecurity");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecurityResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/security', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStorage operation.
     * @callback module:api/DefaultApi~updateStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates cluster broker volume size (or) sets cluster storage mode to TIERED.
     * @param {String} clusterArn              <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>          
     * @param {module:model/UpdateStorageRequest} updateStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStorageResponse}
     */
    updateStorage(clusterArn, updateStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStorageRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateStorage");
      }
      // verify the required parameter 'updateStorageRequest' is set
      if (updateStorageRequest === undefined || updateStorageRequest === null) {
        throw new Error("Missing the required parameter 'updateStorageRequest' when calling updateStorage");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStorageResponse;
      return this.apiClient.callApi(
        '/v1/clusters/{clusterArn}/storage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
