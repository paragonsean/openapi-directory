/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationState from './ConfigurationState';
import CreateConfigurationResponseLatestRevision from './CreateConfigurationResponseLatestRevision';

/**
 * The Configuration model module.
 * @module model/Configuration
 * @version 2018-11-14
 */
class Configuration {
    /**
     * Constructs a new <code>Configuration</code>.
     *              &lt;p&gt;Represents an MSK Configuration.&lt;/p&gt;          
     * @alias module:model/Configuration
     * @param arn {String} 
     * @param creationTime {Date} 
     * @param description {String} 
     * @param kafkaVersions {Array} 
     * @param latestRevision {module:model/CreateConfigurationResponseLatestRevision} 
     * @param name {String} 
     * @param state {module:model/ConfigurationState} 
     */
    constructor(arn, creationTime, description, kafkaVersions, latestRevision, name, state) { 
        
        Configuration.initialize(this, arn, creationTime, description, kafkaVersions, latestRevision, name, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arn, creationTime, description, kafkaVersions, latestRevision, name, state) { 
        obj['Arn'] = arn;
        obj['CreationTime'] = creationTime;
        obj['Description'] = description;
        obj['KafkaVersions'] = kafkaVersions;
        obj['LatestRevision'] = latestRevision;
        obj['Name'] = name;
        obj['State'] = state;
    }

    /**
     * Constructs a <code>Configuration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Configuration} obj Optional instance to populate.
     * @return {module:model/Configuration} The populated <code>Configuration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Configuration();

            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('KafkaVersions')) {
                obj['KafkaVersions'] = ApiClient.convertToType(data['KafkaVersions'], Array);
            }
            if (data.hasOwnProperty('LatestRevision')) {
                obj['LatestRevision'] = CreateConfigurationResponseLatestRevision.constructFromObject(data['LatestRevision']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], ConfigurationState);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Configuration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Configuration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Configuration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `KafkaVersions`
        if (data['KafkaVersions']) { // data not null
          Array.validateJSON(data['KafkaVersions']);
        }
        // validate the optional field `LatestRevision`
        if (data['LatestRevision']) { // data not null
          CreateConfigurationResponseLatestRevision.validateJSON(data['LatestRevision']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `State`
        if (data['State']) { // data not null
          ConfigurationState.validateJSON(data['State']);
        }

        return true;
    }


}

Configuration.RequiredProperties = ["Arn", "CreationTime", "Description", "KafkaVersions", "LatestRevision", "Name", "State"];

/**
 * @member {String} Arn
 */
Configuration.prototype['Arn'] = undefined;

/**
 * @member {Date} CreationTime
 */
Configuration.prototype['CreationTime'] = undefined;

/**
 * @member {String} Description
 */
Configuration.prototype['Description'] = undefined;

/**
 * @member {Array} KafkaVersions
 */
Configuration.prototype['KafkaVersions'] = undefined;

/**
 * @member {module:model/CreateConfigurationResponseLatestRevision} LatestRevision
 */
Configuration.prototype['LatestRevision'] = undefined;

/**
 * @member {String} Name
 */
Configuration.prototype['Name'] = undefined;

/**
 * @member {module:model/ConfigurationState} State
 */
Configuration.prototype['State'] = undefined;






export default Configuration;

