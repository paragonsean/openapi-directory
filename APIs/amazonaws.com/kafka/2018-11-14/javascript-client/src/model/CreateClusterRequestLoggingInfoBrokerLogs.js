/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrokerLogs from './BrokerLogs';
import BrokerLogsCloudWatchLogs from './BrokerLogsCloudWatchLogs';
import BrokerLogsFirehose from './BrokerLogsFirehose';
import BrokerLogsS3 from './BrokerLogsS3';

/**
 * The CreateClusterRequestLoggingInfoBrokerLogs model module.
 * @module model/CreateClusterRequestLoggingInfoBrokerLogs
 * @version 2018-11-14
 */
class CreateClusterRequestLoggingInfoBrokerLogs {
    /**
     * Constructs a new <code>CreateClusterRequestLoggingInfoBrokerLogs</code>.
     * @alias module:model/CreateClusterRequestLoggingInfoBrokerLogs
     * @implements module:model/BrokerLogs
     */
    constructor() { 
        BrokerLogs.initialize(this);
        CreateClusterRequestLoggingInfoBrokerLogs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateClusterRequestLoggingInfoBrokerLogs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateClusterRequestLoggingInfoBrokerLogs} obj Optional instance to populate.
     * @return {module:model/CreateClusterRequestLoggingInfoBrokerLogs} The populated <code>CreateClusterRequestLoggingInfoBrokerLogs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateClusterRequestLoggingInfoBrokerLogs();
            BrokerLogs.constructFromObject(data, obj);

            if (data.hasOwnProperty('CloudWatchLogs')) {
                obj['CloudWatchLogs'] = BrokerLogsCloudWatchLogs.constructFromObject(data['CloudWatchLogs']);
            }
            if (data.hasOwnProperty('Firehose')) {
                obj['Firehose'] = BrokerLogsFirehose.constructFromObject(data['Firehose']);
            }
            if (data.hasOwnProperty('S3')) {
                obj['S3'] = BrokerLogsS3.constructFromObject(data['S3']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateClusterRequestLoggingInfoBrokerLogs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateClusterRequestLoggingInfoBrokerLogs</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CloudWatchLogs`
        if (data['CloudWatchLogs']) { // data not null
          BrokerLogsCloudWatchLogs.validateJSON(data['CloudWatchLogs']);
        }
        // validate the optional field `Firehose`
        if (data['Firehose']) { // data not null
          BrokerLogsFirehose.validateJSON(data['Firehose']);
        }
        // validate the optional field `S3`
        if (data['S3']) { // data not null
          BrokerLogsS3.validateJSON(data['S3']);
        }

        return true;
    }


}



/**
 * @member {module:model/BrokerLogsCloudWatchLogs} CloudWatchLogs
 */
CreateClusterRequestLoggingInfoBrokerLogs.prototype['CloudWatchLogs'] = undefined;

/**
 * @member {module:model/BrokerLogsFirehose} Firehose
 */
CreateClusterRequestLoggingInfoBrokerLogs.prototype['Firehose'] = undefined;

/**
 * @member {module:model/BrokerLogsS3} S3
 */
CreateClusterRequestLoggingInfoBrokerLogs.prototype['S3'] = undefined;


// Implement BrokerLogs interface:
/**
 * @member {module:model/BrokerLogsCloudWatchLogs} CloudWatchLogs
 */
BrokerLogs.prototype['CloudWatchLogs'] = undefined;
/**
 * @member {module:model/BrokerLogsFirehose} Firehose
 */
BrokerLogs.prototype['Firehose'] = undefined;
/**
 * @member {module:model/BrokerLogsS3} S3
 */
BrokerLogs.prototype['S3'] = undefined;




export default CreateClusterRequestLoggingInfoBrokerLogs;

