/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrokerNodeInfoCurrentBrokerSoftwareInfo from './BrokerNodeInfoCurrentBrokerSoftwareInfo';
import ClusterInfo from './ClusterInfo';
import ClusterInfoBrokerNodeGroupInfo from './ClusterInfoBrokerNodeGroupInfo';
import ClusterInfoLoggingInfo from './ClusterInfoLoggingInfo';
import ClusterInfoOpenMonitoring from './ClusterInfoOpenMonitoring';
import ClusterInfoStateInfo from './ClusterInfoStateInfo';
import ClusterState from './ClusterState';
import CreateClusterV2RequestProvisionedClientAuthentication from './CreateClusterV2RequestProvisionedClientAuthentication';
import CreateClusterV2RequestProvisionedEncryptionInfo from './CreateClusterV2RequestProvisionedEncryptionInfo';
import EnhancedMonitoring from './EnhancedMonitoring';
import StorageMode from './StorageMode';

/**
 * The DescribeClusterResponseClusterInfo model module.
 * @module model/DescribeClusterResponseClusterInfo
 * @version 2018-11-14
 */
class DescribeClusterResponseClusterInfo {
    /**
     * Constructs a new <code>DescribeClusterResponseClusterInfo</code>.
     * @alias module:model/DescribeClusterResponseClusterInfo
     * @implements module:model/ClusterInfo
     */
    constructor() { 
        ClusterInfo.initialize(this);
        DescribeClusterResponseClusterInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeClusterResponseClusterInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeClusterResponseClusterInfo} obj Optional instance to populate.
     * @return {module:model/DescribeClusterResponseClusterInfo} The populated <code>DescribeClusterResponseClusterInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeClusterResponseClusterInfo();
            ClusterInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('ActiveOperationArn')) {
                obj['ActiveOperationArn'] = ApiClient.convertToType(data['ActiveOperationArn'], 'String');
            }
            if (data.hasOwnProperty('BrokerNodeGroupInfo')) {
                obj['BrokerNodeGroupInfo'] = ClusterInfoBrokerNodeGroupInfo.constructFromObject(data['BrokerNodeGroupInfo']);
            }
            if (data.hasOwnProperty('ClientAuthentication')) {
                obj['ClientAuthentication'] = CreateClusterV2RequestProvisionedClientAuthentication.constructFromObject(data['ClientAuthentication']);
            }
            if (data.hasOwnProperty('ClusterArn')) {
                obj['ClusterArn'] = ApiClient.convertToType(data['ClusterArn'], 'String');
            }
            if (data.hasOwnProperty('ClusterName')) {
                obj['ClusterName'] = ApiClient.convertToType(data['ClusterName'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('CurrentBrokerSoftwareInfo')) {
                obj['CurrentBrokerSoftwareInfo'] = BrokerNodeInfoCurrentBrokerSoftwareInfo.constructFromObject(data['CurrentBrokerSoftwareInfo']);
            }
            if (data.hasOwnProperty('CurrentVersion')) {
                obj['CurrentVersion'] = ApiClient.convertToType(data['CurrentVersion'], 'String');
            }
            if (data.hasOwnProperty('EncryptionInfo')) {
                obj['EncryptionInfo'] = CreateClusterV2RequestProvisionedEncryptionInfo.constructFromObject(data['EncryptionInfo']);
            }
            if (data.hasOwnProperty('EnhancedMonitoring')) {
                obj['EnhancedMonitoring'] = ApiClient.convertToType(data['EnhancedMonitoring'], EnhancedMonitoring);
            }
            if (data.hasOwnProperty('OpenMonitoring')) {
                obj['OpenMonitoring'] = ClusterInfoOpenMonitoring.constructFromObject(data['OpenMonitoring']);
            }
            if (data.hasOwnProperty('LoggingInfo')) {
                obj['LoggingInfo'] = ClusterInfoLoggingInfo.constructFromObject(data['LoggingInfo']);
            }
            if (data.hasOwnProperty('NumberOfBrokerNodes')) {
                obj['NumberOfBrokerNodes'] = ApiClient.convertToType(data['NumberOfBrokerNodes'], 'Number');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], ClusterState);
            }
            if (data.hasOwnProperty('StateInfo')) {
                obj['StateInfo'] = ClusterInfoStateInfo.constructFromObject(data['StateInfo']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
            if (data.hasOwnProperty('ZookeeperConnectString')) {
                obj['ZookeeperConnectString'] = ApiClient.convertToType(data['ZookeeperConnectString'], 'String');
            }
            if (data.hasOwnProperty('ZookeeperConnectStringTls')) {
                obj['ZookeeperConnectStringTls'] = ApiClient.convertToType(data['ZookeeperConnectStringTls'], 'String');
            }
            if (data.hasOwnProperty('StorageMode')) {
                obj['StorageMode'] = ApiClient.convertToType(data['StorageMode'], StorageMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeClusterResponseClusterInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeClusterResponseClusterInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ActiveOperationArn`
        if (data['ActiveOperationArn']) { // data not null
          String.validateJSON(data['ActiveOperationArn']);
        }
        // validate the optional field `BrokerNodeGroupInfo`
        if (data['BrokerNodeGroupInfo']) { // data not null
          ClusterInfoBrokerNodeGroupInfo.validateJSON(data['BrokerNodeGroupInfo']);
        }
        // validate the optional field `ClientAuthentication`
        if (data['ClientAuthentication']) { // data not null
          CreateClusterV2RequestProvisionedClientAuthentication.validateJSON(data['ClientAuthentication']);
        }
        // validate the optional field `ClusterArn`
        if (data['ClusterArn']) { // data not null
          String.validateJSON(data['ClusterArn']);
        }
        // validate the optional field `ClusterName`
        if (data['ClusterName']) { // data not null
          String.validateJSON(data['ClusterName']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `CurrentBrokerSoftwareInfo`
        if (data['CurrentBrokerSoftwareInfo']) { // data not null
          BrokerNodeInfoCurrentBrokerSoftwareInfo.validateJSON(data['CurrentBrokerSoftwareInfo']);
        }
        // validate the optional field `CurrentVersion`
        if (data['CurrentVersion']) { // data not null
          String.validateJSON(data['CurrentVersion']);
        }
        // validate the optional field `EncryptionInfo`
        if (data['EncryptionInfo']) { // data not null
          CreateClusterV2RequestProvisionedEncryptionInfo.validateJSON(data['EncryptionInfo']);
        }
        // validate the optional field `EnhancedMonitoring`
        if (data['EnhancedMonitoring']) { // data not null
          EnhancedMonitoring.validateJSON(data['EnhancedMonitoring']);
        }
        // validate the optional field `OpenMonitoring`
        if (data['OpenMonitoring']) { // data not null
          ClusterInfoOpenMonitoring.validateJSON(data['OpenMonitoring']);
        }
        // validate the optional field `LoggingInfo`
        if (data['LoggingInfo']) { // data not null
          ClusterInfoLoggingInfo.validateJSON(data['LoggingInfo']);
        }
        // validate the optional field `NumberOfBrokerNodes`
        if (data['NumberOfBrokerNodes']) { // data not null
          Number.validateJSON(data['NumberOfBrokerNodes']);
        }
        // validate the optional field `State`
        if (data['State']) { // data not null
          ClusterState.validateJSON(data['State']);
        }
        // validate the optional field `StateInfo`
        if (data['StateInfo']) { // data not null
          ClusterInfoStateInfo.validateJSON(data['StateInfo']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }
        // validate the optional field `ZookeeperConnectString`
        if (data['ZookeeperConnectString']) { // data not null
          String.validateJSON(data['ZookeeperConnectString']);
        }
        // validate the optional field `ZookeeperConnectStringTls`
        if (data['ZookeeperConnectStringTls']) { // data not null
          String.validateJSON(data['ZookeeperConnectStringTls']);
        }
        // validate the optional field `StorageMode`
        if (data['StorageMode']) { // data not null
          StorageMode.validateJSON(data['StorageMode']);
        }

        return true;
    }


}



/**
 * @member {String} ActiveOperationArn
 */
DescribeClusterResponseClusterInfo.prototype['ActiveOperationArn'] = undefined;

/**
 * @member {module:model/ClusterInfoBrokerNodeGroupInfo} BrokerNodeGroupInfo
 */
DescribeClusterResponseClusterInfo.prototype['BrokerNodeGroupInfo'] = undefined;

/**
 * @member {module:model/CreateClusterV2RequestProvisionedClientAuthentication} ClientAuthentication
 */
DescribeClusterResponseClusterInfo.prototype['ClientAuthentication'] = undefined;

/**
 * @member {String} ClusterArn
 */
DescribeClusterResponseClusterInfo.prototype['ClusterArn'] = undefined;

/**
 * @member {String} ClusterName
 */
DescribeClusterResponseClusterInfo.prototype['ClusterName'] = undefined;

/**
 * @member {Date} CreationTime
 */
DescribeClusterResponseClusterInfo.prototype['CreationTime'] = undefined;

/**
 * @member {module:model/BrokerNodeInfoCurrentBrokerSoftwareInfo} CurrentBrokerSoftwareInfo
 */
DescribeClusterResponseClusterInfo.prototype['CurrentBrokerSoftwareInfo'] = undefined;

/**
 * @member {String} CurrentVersion
 */
DescribeClusterResponseClusterInfo.prototype['CurrentVersion'] = undefined;

/**
 * @member {module:model/CreateClusterV2RequestProvisionedEncryptionInfo} EncryptionInfo
 */
DescribeClusterResponseClusterInfo.prototype['EncryptionInfo'] = undefined;

/**
 * @member {module:model/EnhancedMonitoring} EnhancedMonitoring
 */
DescribeClusterResponseClusterInfo.prototype['EnhancedMonitoring'] = undefined;

/**
 * @member {module:model/ClusterInfoOpenMonitoring} OpenMonitoring
 */
DescribeClusterResponseClusterInfo.prototype['OpenMonitoring'] = undefined;

/**
 * @member {module:model/ClusterInfoLoggingInfo} LoggingInfo
 */
DescribeClusterResponseClusterInfo.prototype['LoggingInfo'] = undefined;

/**
 * @member {Number} NumberOfBrokerNodes
 */
DescribeClusterResponseClusterInfo.prototype['NumberOfBrokerNodes'] = undefined;

/**
 * @member {module:model/ClusterState} State
 */
DescribeClusterResponseClusterInfo.prototype['State'] = undefined;

/**
 * @member {module:model/ClusterInfoStateInfo} StateInfo
 */
DescribeClusterResponseClusterInfo.prototype['StateInfo'] = undefined;

/**
 * @member {Object} Tags
 */
DescribeClusterResponseClusterInfo.prototype['Tags'] = undefined;

/**
 * @member {String} ZookeeperConnectString
 */
DescribeClusterResponseClusterInfo.prototype['ZookeeperConnectString'] = undefined;

/**
 * @member {String} ZookeeperConnectStringTls
 */
DescribeClusterResponseClusterInfo.prototype['ZookeeperConnectStringTls'] = undefined;

/**
 * @member {module:model/StorageMode} StorageMode
 */
DescribeClusterResponseClusterInfo.prototype['StorageMode'] = undefined;


// Implement ClusterInfo interface:
/**
 * @member {String} ActiveOperationArn
 */
ClusterInfo.prototype['ActiveOperationArn'] = undefined;
/**
 * @member {module:model/ClusterInfoBrokerNodeGroupInfo} BrokerNodeGroupInfo
 */
ClusterInfo.prototype['BrokerNodeGroupInfo'] = undefined;
/**
 * @member {module:model/CreateClusterV2RequestProvisionedClientAuthentication} ClientAuthentication
 */
ClusterInfo.prototype['ClientAuthentication'] = undefined;
/**
 * @member {String} ClusterArn
 */
ClusterInfo.prototype['ClusterArn'] = undefined;
/**
 * @member {String} ClusterName
 */
ClusterInfo.prototype['ClusterName'] = undefined;
/**
 * @member {Date} CreationTime
 */
ClusterInfo.prototype['CreationTime'] = undefined;
/**
 * @member {module:model/BrokerNodeInfoCurrentBrokerSoftwareInfo} CurrentBrokerSoftwareInfo
 */
ClusterInfo.prototype['CurrentBrokerSoftwareInfo'] = undefined;
/**
 * @member {String} CurrentVersion
 */
ClusterInfo.prototype['CurrentVersion'] = undefined;
/**
 * @member {module:model/CreateClusterV2RequestProvisionedEncryptionInfo} EncryptionInfo
 */
ClusterInfo.prototype['EncryptionInfo'] = undefined;
/**
 * @member {module:model/EnhancedMonitoring} EnhancedMonitoring
 */
ClusterInfo.prototype['EnhancedMonitoring'] = undefined;
/**
 * @member {module:model/ClusterInfoOpenMonitoring} OpenMonitoring
 */
ClusterInfo.prototype['OpenMonitoring'] = undefined;
/**
 * @member {module:model/ClusterInfoLoggingInfo} LoggingInfo
 */
ClusterInfo.prototype['LoggingInfo'] = undefined;
/**
 * @member {Number} NumberOfBrokerNodes
 */
ClusterInfo.prototype['NumberOfBrokerNodes'] = undefined;
/**
 * @member {module:model/ClusterState} State
 */
ClusterInfo.prototype['State'] = undefined;
/**
 * @member {module:model/ClusterInfoStateInfo} StateInfo
 */
ClusterInfo.prototype['StateInfo'] = undefined;
/**
 * @member {Object} Tags
 */
ClusterInfo.prototype['Tags'] = undefined;
/**
 * @member {String} ZookeeperConnectString
 */
ClusterInfo.prototype['ZookeeperConnectString'] = undefined;
/**
 * @member {String} ZookeeperConnectStringTls
 */
ClusterInfo.prototype['ZookeeperConnectStringTls'] = undefined;
/**
 * @member {module:model/StorageMode} StorageMode
 */
ClusterInfo.prototype['StorageMode'] = undefined;




export default DescribeClusterResponseClusterInfo;

