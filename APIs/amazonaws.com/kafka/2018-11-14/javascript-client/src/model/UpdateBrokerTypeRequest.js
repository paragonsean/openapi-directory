/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateBrokerTypeRequest model module.
 * @module model/UpdateBrokerTypeRequest
 * @version 2018-11-14
 */
class UpdateBrokerTypeRequest {
    /**
     * Constructs a new <code>UpdateBrokerTypeRequest</code>.
     * @alias module:model/UpdateBrokerTypeRequest
     * @param currentVersion {String}              <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>          
     * @param targetInstanceType {String}              <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>          
     */
    constructor(currentVersion, targetInstanceType) { 
        
        UpdateBrokerTypeRequest.initialize(this, currentVersion, targetInstanceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentVersion, targetInstanceType) { 
        obj['currentVersion'] = currentVersion;
        obj['targetInstanceType'] = targetInstanceType;
    }

    /**
     * Constructs a <code>UpdateBrokerTypeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateBrokerTypeRequest} obj Optional instance to populate.
     * @return {module:model/UpdateBrokerTypeRequest} The populated <code>UpdateBrokerTypeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateBrokerTypeRequest();

            if (data.hasOwnProperty('currentVersion')) {
                obj['currentVersion'] = ApiClient.convertToType(data['currentVersion'], 'String');
            }
            if (data.hasOwnProperty('targetInstanceType')) {
                obj['targetInstanceType'] = ApiClient.convertToType(data['targetInstanceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateBrokerTypeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateBrokerTypeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateBrokerTypeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currentVersion'] && !(typeof data['currentVersion'] === 'string' || data['currentVersion'] instanceof String)) {
            throw new Error("Expected the field `currentVersion` to be a primitive type in the JSON string but got " + data['currentVersion']);
        }
        // ensure the json data is a string
        if (data['targetInstanceType'] && !(typeof data['targetInstanceType'] === 'string' || data['targetInstanceType'] instanceof String)) {
            throw new Error("Expected the field `targetInstanceType` to be a primitive type in the JSON string but got " + data['targetInstanceType']);
        }

        return true;
    }


}

UpdateBrokerTypeRequest.RequiredProperties = ["currentVersion", "targetInstanceType"];

/**
 *              <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>          
 * @member {String} currentVersion
 */
UpdateBrokerTypeRequest.prototype['currentVersion'] = undefined;

/**
 *              <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>          
 * @member {String} targetInstanceType
 */
UpdateBrokerTypeRequest.prototype['targetInstanceType'] = undefined;






export default UpdateBrokerTypeRequest;

