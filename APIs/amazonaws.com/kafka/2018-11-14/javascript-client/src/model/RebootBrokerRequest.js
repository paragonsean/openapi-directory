/**
 * Managed Streaming for Kafka
 *                 <p>The operations for managing an Amazon MSK cluster.</p>             
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RebootBrokerRequest model module.
 * @module model/RebootBrokerRequest
 * @version 2018-11-14
 */
class RebootBrokerRequest {
    /**
     * Constructs a new <code>RebootBrokerRequest</code>.
     * @alias module:model/RebootBrokerRequest
     * @param brokerIds {Array.<String>}              <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>          
     */
    constructor(brokerIds) { 
        
        RebootBrokerRequest.initialize(this, brokerIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brokerIds) { 
        obj['brokerIds'] = brokerIds;
    }

    /**
     * Constructs a <code>RebootBrokerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RebootBrokerRequest} obj Optional instance to populate.
     * @return {module:model/RebootBrokerRequest} The populated <code>RebootBrokerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RebootBrokerRequest();

            if (data.hasOwnProperty('brokerIds')) {
                obj['brokerIds'] = ApiClient.convertToType(data['brokerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RebootBrokerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RebootBrokerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RebootBrokerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['brokerIds'])) {
            throw new Error("Expected the field `brokerIds` to be an array in the JSON data but got " + data['brokerIds']);
        }

        return true;
    }


}

RebootBrokerRequest.RequiredProperties = ["brokerIds"];

/**
 *              <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>          
 * @member {Array.<String>} brokerIds
 */
RebootBrokerRequest.prototype['brokerIds'] = undefined;






export default RebootBrokerRequest;

