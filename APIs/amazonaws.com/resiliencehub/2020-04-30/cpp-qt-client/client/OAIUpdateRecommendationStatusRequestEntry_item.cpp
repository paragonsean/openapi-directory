/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRecommendationStatusRequestEntry_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRecommendationStatusRequestEntry_item::OAIUpdateRecommendationStatusRequestEntry_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRecommendationStatusRequestEntry_item::OAIUpdateRecommendationStatusRequestEntry_item() {
    this->initializeModel();
}

OAIUpdateRecommendationStatusRequestEntry_item::~OAIUpdateRecommendationStatusRequestEntry_item() {}

void OAIUpdateRecommendationStatusRequestEntry_item::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_target_account_id_isSet = false;
    m_target_account_id_isValid = false;

    m_target_region_isSet = false;
    m_target_region_isValid = false;
}

void OAIUpdateRecommendationStatusRequestEntry_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRecommendationStatusRequestEntry_item::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_target_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_account_id, json[QString("targetAccountId")]);
    m_target_account_id_isSet = !json[QString("targetAccountId")].isNull() && m_target_account_id_isValid;

    m_target_region_isValid = ::OpenAPI::fromJsonValue(m_target_region, json[QString("targetRegion")]);
    m_target_region_isSet = !json[QString("targetRegion")].isNull() && m_target_region_isValid;
}

QString OAIUpdateRecommendationStatusRequestEntry_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRecommendationStatusRequestEntry_item::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_target_account_id_isSet) {
        obj.insert(QString("targetAccountId"), ::OpenAPI::toJsonValue(m_target_account_id));
    }
    if (m_target_region_isSet) {
        obj.insert(QString("targetRegion"), ::OpenAPI::toJsonValue(m_target_region));
    }
    return obj;
}

QString OAIUpdateRecommendationStatusRequestEntry_item::getResourceId() const {
    return m_resource_id;
}
void OAIUpdateRecommendationStatusRequestEntry_item::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIUpdateRecommendationStatusRequestEntry_item::getTargetAccountId() const {
    return m_target_account_id;
}
void OAIUpdateRecommendationStatusRequestEntry_item::setTargetAccountId(const QString &target_account_id) {
    m_target_account_id = target_account_id;
    m_target_account_id_isSet = true;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::is_target_account_id_Set() const{
    return m_target_account_id_isSet;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::is_target_account_id_Valid() const{
    return m_target_account_id_isValid;
}

QString OAIUpdateRecommendationStatusRequestEntry_item::getTargetRegion() const {
    return m_target_region;
}
void OAIUpdateRecommendationStatusRequestEntry_item::setTargetRegion(const QString &target_region) {
    m_target_region = target_region;
    m_target_region_isSet = true;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::is_target_region_Set() const{
    return m_target_region_isSet;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::is_target_region_Valid() const{
    return m_target_region_isValid;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRecommendationStatusRequestEntry_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
