/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAppVersionResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAppVersionResourceRequest::OAIDeleteAppVersionResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAppVersionResourceRequest::OAIDeleteAppVersionResourceRequest() {
    this->initializeModel();
}

OAIDeleteAppVersionResourceRequest::~OAIDeleteAppVersionResourceRequest() {}

void OAIDeleteAppVersionResourceRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_aws_region_isSet = false;
    m_aws_region_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIDeleteAppVersionResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAppVersionResourceRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_aws_region_isValid = ::OpenAPI::fromJsonValue(m_aws_region, json[QString("awsRegion")]);
    m_aws_region_isSet = !json[QString("awsRegion")].isNull() && m_aws_region_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("logicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("logicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("physicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("physicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIDeleteAppVersionResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAppVersionResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_aws_account_id_isSet) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_aws_region_isSet) {
        obj.insert(QString("awsRegion"), ::OpenAPI::toJsonValue(m_aws_region));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_logical_resource_id.isSet()) {
        obj.insert(QString("logicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("physicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIDeleteAppVersionResourceRequest::getAppArn() const {
    return m_app_arn;
}
void OAIDeleteAppVersionResourceRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDeleteAppVersionResourceRequest::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIDeleteAppVersionResourceRequest::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAIDeleteAppVersionResourceRequest::getAwsRegion() const {
    return m_aws_region;
}
void OAIDeleteAppVersionResourceRequest::setAwsRegion(const QString &aws_region) {
    m_aws_region = aws_region;
    m_aws_region_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_aws_region_Set() const{
    return m_aws_region_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_aws_region_Valid() const{
    return m_aws_region_isValid;
}

QString OAIDeleteAppVersionResourceRequest::getClientToken() const {
    return m_client_token;
}
void OAIDeleteAppVersionResourceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateAppVersionResourceRequest_logicalResourceId OAIDeleteAppVersionResourceRequest::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIDeleteAppVersionResourceRequest::setLogicalResourceId(const OAICreateAppVersionResourceRequest_logicalResourceId &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIDeleteAppVersionResourceRequest::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIDeleteAppVersionResourceRequest::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIDeleteAppVersionResourceRequest::getResourceName() const {
    return m_resource_name;
}
void OAIDeleteAppVersionResourceRequest::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDeleteAppVersionResourceRequest::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDeleteAppVersionResourceRequest::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIDeleteAppVersionResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAppVersionResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
