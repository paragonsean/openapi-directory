/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationItem::OAIRecommendationItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationItem::OAIRecommendationItem() {
    this->initializeModel();
}

OAIRecommendationItem::~OAIRecommendationItem() {}

void OAIRecommendationItem::initializeModel() {

    m_already_implemented_isSet = false;
    m_already_implemented_isValid = false;

    m_exclude_reason_isSet = false;
    m_exclude_reason_isValid = false;

    m_excluded_isSet = false;
    m_excluded_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_target_account_id_isSet = false;
    m_target_account_id_isValid = false;

    m_target_region_isSet = false;
    m_target_region_isValid = false;
}

void OAIRecommendationItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationItem::fromJsonObject(QJsonObject json) {

    m_already_implemented_isValid = ::OpenAPI::fromJsonValue(m_already_implemented, json[QString("alreadyImplemented")]);
    m_already_implemented_isSet = !json[QString("alreadyImplemented")].isNull() && m_already_implemented_isValid;

    m_exclude_reason_isValid = ::OpenAPI::fromJsonValue(m_exclude_reason, json[QString("excludeReason")]);
    m_exclude_reason_isSet = !json[QString("excludeReason")].isNull() && m_exclude_reason_isValid;

    m_excluded_isValid = ::OpenAPI::fromJsonValue(m_excluded, json[QString("excluded")]);
    m_excluded_isSet = !json[QString("excluded")].isNull() && m_excluded_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_target_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_account_id, json[QString("targetAccountId")]);
    m_target_account_id_isSet = !json[QString("targetAccountId")].isNull() && m_target_account_id_isValid;

    m_target_region_isValid = ::OpenAPI::fromJsonValue(m_target_region, json[QString("targetRegion")]);
    m_target_region_isSet = !json[QString("targetRegion")].isNull() && m_target_region_isValid;
}

QString OAIRecommendationItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationItem::asJsonObject() const {
    QJsonObject obj;
    if (m_already_implemented_isSet) {
        obj.insert(QString("alreadyImplemented"), ::OpenAPI::toJsonValue(m_already_implemented));
    }
    if (m_exclude_reason.isSet()) {
        obj.insert(QString("excludeReason"), ::OpenAPI::toJsonValue(m_exclude_reason));
    }
    if (m_excluded_isSet) {
        obj.insert(QString("excluded"), ::OpenAPI::toJsonValue(m_excluded));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_target_account_id_isSet) {
        obj.insert(QString("targetAccountId"), ::OpenAPI::toJsonValue(m_target_account_id));
    }
    if (m_target_region_isSet) {
        obj.insert(QString("targetRegion"), ::OpenAPI::toJsonValue(m_target_region));
    }
    return obj;
}

bool OAIRecommendationItem::getAlreadyImplemented() const {
    return m_already_implemented;
}
void OAIRecommendationItem::setAlreadyImplemented(const bool &already_implemented) {
    m_already_implemented = already_implemented;
    m_already_implemented_isSet = true;
}

bool OAIRecommendationItem::is_already_implemented_Set() const{
    return m_already_implemented_isSet;
}

bool OAIRecommendationItem::is_already_implemented_Valid() const{
    return m_already_implemented_isValid;
}

OAIExcludeRecommendationReason OAIRecommendationItem::getExcludeReason() const {
    return m_exclude_reason;
}
void OAIRecommendationItem::setExcludeReason(const OAIExcludeRecommendationReason &exclude_reason) {
    m_exclude_reason = exclude_reason;
    m_exclude_reason_isSet = true;
}

bool OAIRecommendationItem::is_exclude_reason_Set() const{
    return m_exclude_reason_isSet;
}

bool OAIRecommendationItem::is_exclude_reason_Valid() const{
    return m_exclude_reason_isValid;
}

bool OAIRecommendationItem::getExcluded() const {
    return m_excluded;
}
void OAIRecommendationItem::setExcluded(const bool &excluded) {
    m_excluded = excluded;
    m_excluded_isSet = true;
}

bool OAIRecommendationItem::is_excluded_Set() const{
    return m_excluded_isSet;
}

bool OAIRecommendationItem::is_excluded_Valid() const{
    return m_excluded_isValid;
}

QString OAIRecommendationItem::getResourceId() const {
    return m_resource_id;
}
void OAIRecommendationItem::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIRecommendationItem::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIRecommendationItem::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIRecommendationItem::getTargetAccountId() const {
    return m_target_account_id;
}
void OAIRecommendationItem::setTargetAccountId(const QString &target_account_id) {
    m_target_account_id = target_account_id;
    m_target_account_id_isSet = true;
}

bool OAIRecommendationItem::is_target_account_id_Set() const{
    return m_target_account_id_isSet;
}

bool OAIRecommendationItem::is_target_account_id_Valid() const{
    return m_target_account_id_isValid;
}

QString OAIRecommendationItem::getTargetRegion() const {
    return m_target_region;
}
void OAIRecommendationItem::setTargetRegion(const QString &target_region) {
    m_target_region = target_region;
    m_target_region_isSet = true;
}

bool OAIRecommendationItem::is_target_region_Set() const{
    return m_target_region_isSet;
}

bool OAIRecommendationItem::is_target_region_Valid() const{
    return m_target_region_isValid;
}

bool OAIRecommendationItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_already_implemented_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
