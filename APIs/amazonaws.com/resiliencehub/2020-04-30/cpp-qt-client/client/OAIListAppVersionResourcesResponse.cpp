/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppVersionResourcesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppVersionResourcesResponse::OAIListAppVersionResourcesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppVersionResourcesResponse::OAIListAppVersionResourcesResponse() {
    this->initializeModel();
}

OAIListAppVersionResourcesResponse::~OAIListAppVersionResourcesResponse() {}

void OAIListAppVersionResourcesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_physical_resources_isSet = false;
    m_physical_resources_isValid = false;

    m_resolution_id_isSet = false;
    m_resolution_id_isValid = false;
}

void OAIListAppVersionResourcesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppVersionResourcesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_physical_resources_isValid = ::OpenAPI::fromJsonValue(m_physical_resources, json[QString("physicalResources")]);
    m_physical_resources_isSet = !json[QString("physicalResources")].isNull() && m_physical_resources_isValid;

    m_resolution_id_isValid = ::OpenAPI::fromJsonValue(m_resolution_id, json[QString("resolutionId")]);
    m_resolution_id_isSet = !json[QString("resolutionId")].isNull() && m_resolution_id_isValid;
}

QString OAIListAppVersionResourcesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppVersionResourcesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_physical_resources.isSet()) {
        obj.insert(QString("physicalResources"), ::OpenAPI::toJsonValue(m_physical_resources));
    }
    if (m_resolution_id_isSet) {
        obj.insert(QString("resolutionId"), ::OpenAPI::toJsonValue(m_resolution_id));
    }
    return obj;
}

QString OAIListAppVersionResourcesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAppVersionResourcesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppVersionResourcesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppVersionResourcesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListAppVersionResourcesResponse::getPhysicalResources() const {
    return m_physical_resources;
}
void OAIListAppVersionResourcesResponse::setPhysicalResources(const QList &physical_resources) {
    m_physical_resources = physical_resources;
    m_physical_resources_isSet = true;
}

bool OAIListAppVersionResourcesResponse::is_physical_resources_Set() const{
    return m_physical_resources_isSet;
}

bool OAIListAppVersionResourcesResponse::is_physical_resources_Valid() const{
    return m_physical_resources_isValid;
}

QString OAIListAppVersionResourcesResponse::getResolutionId() const {
    return m_resolution_id;
}
void OAIListAppVersionResourcesResponse::setResolutionId(const QString &resolution_id) {
    m_resolution_id = resolution_id;
    m_resolution_id_isSet = true;
}

bool OAIListAppVersionResourcesResponse::is_resolution_id_Set() const{
    return m_resolution_id_isSet;
}

bool OAIListAppVersionResourcesResponse::is_resolution_id_Valid() const{
    return m_resolution_id_isValid;
}

bool OAIListAppVersionResourcesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppVersionResourcesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_physical_resources_isValid && m_resolution_id_isValid && true;
}

} // namespace OpenAPI
