/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApp_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApp_request::OAICreateApp_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApp_request::OAICreateApp_request() {
    this->initializeModel();
}

OAICreateApp_request::~OAICreateApp_request() {}

void OAICreateApp_request::initializeModel() {

    m_assessment_schedule_isSet = false;
    m_assessment_schedule_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_subscriptions_isSet = false;
    m_event_subscriptions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_model_isSet = false;
    m_permission_model_isValid = false;

    m_policy_arn_isSet = false;
    m_policy_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApp_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApp_request::fromJsonObject(QJsonObject json) {

    m_assessment_schedule_isValid = ::OpenAPI::fromJsonValue(m_assessment_schedule, json[QString("assessmentSchedule")]);
    m_assessment_schedule_isSet = !json[QString("assessmentSchedule")].isNull() && m_assessment_schedule_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_event_subscriptions, json[QString("eventSubscriptions")]);
    m_event_subscriptions_isSet = !json[QString("eventSubscriptions")].isNull() && m_event_subscriptions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_model_isValid = ::OpenAPI::fromJsonValue(m_permission_model, json[QString("permissionModel")]);
    m_permission_model_isSet = !json[QString("permissionModel")].isNull() && m_permission_model_isValid;

    m_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_policy_arn, json[QString("policyArn")]);
    m_policy_arn_isSet = !json[QString("policyArn")].isNull() && m_policy_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateApp_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApp_request::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_schedule_isSet) {
        obj.insert(QString("assessmentSchedule"), ::OpenAPI::toJsonValue(m_assessment_schedule));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_subscriptions.size() > 0) {
        obj.insert(QString("eventSubscriptions"), ::OpenAPI::toJsonValue(m_event_subscriptions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_model.isSet()) {
        obj.insert(QString("permissionModel"), ::OpenAPI::toJsonValue(m_permission_model));
    }
    if (m_policy_arn_isSet) {
        obj.insert(QString("policyArn"), ::OpenAPI::toJsonValue(m_policy_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApp_request::getAssessmentSchedule() const {
    return m_assessment_schedule;
}
void OAICreateApp_request::setAssessmentSchedule(const QString &assessment_schedule) {
    m_assessment_schedule = assessment_schedule;
    m_assessment_schedule_isSet = true;
}

bool OAICreateApp_request::is_assessment_schedule_Set() const{
    return m_assessment_schedule_isSet;
}

bool OAICreateApp_request::is_assessment_schedule_Valid() const{
    return m_assessment_schedule_isValid;
}

QString OAICreateApp_request::getClientToken() const {
    return m_client_token;
}
void OAICreateApp_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateApp_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateApp_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateApp_request::getDescription() const {
    return m_description;
}
void OAICreateApp_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApp_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApp_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEventSubscription> OAICreateApp_request::getEventSubscriptions() const {
    return m_event_subscriptions;
}
void OAICreateApp_request::setEventSubscriptions(const QList<OAIEventSubscription> &event_subscriptions) {
    m_event_subscriptions = event_subscriptions;
    m_event_subscriptions_isSet = true;
}

bool OAICreateApp_request::is_event_subscriptions_Set() const{
    return m_event_subscriptions_isSet;
}

bool OAICreateApp_request::is_event_subscriptions_Valid() const{
    return m_event_subscriptions_isValid;
}

QString OAICreateApp_request::getName() const {
    return m_name;
}
void OAICreateApp_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApp_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApp_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateApp_request_permissionModel OAICreateApp_request::getPermissionModel() const {
    return m_permission_model;
}
void OAICreateApp_request::setPermissionModel(const OAICreateApp_request_permissionModel &permission_model) {
    m_permission_model = permission_model;
    m_permission_model_isSet = true;
}

bool OAICreateApp_request::is_permission_model_Set() const{
    return m_permission_model_isSet;
}

bool OAICreateApp_request::is_permission_model_Valid() const{
    return m_permission_model_isValid;
}

QString OAICreateApp_request::getPolicyArn() const {
    return m_policy_arn;
}
void OAICreateApp_request::setPolicyArn(const QString &policy_arn) {
    m_policy_arn = policy_arn;
    m_policy_arn_isSet = true;
}

bool OAICreateApp_request::is_policy_arn_Set() const{
    return m_policy_arn_isSet;
}

bool OAICreateApp_request::is_policy_arn_Valid() const{
    return m_policy_arn_isValid;
}

QMap<QString, QString> OAICreateApp_request::getTags() const {
    return m_tags;
}
void OAICreateApp_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApp_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApp_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApp_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApp_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
