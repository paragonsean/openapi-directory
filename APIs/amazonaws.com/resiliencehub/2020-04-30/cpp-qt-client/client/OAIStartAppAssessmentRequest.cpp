/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAppAssessmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAppAssessmentRequest::OAIStartAppAssessmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAppAssessmentRequest::OAIStartAppAssessmentRequest() {
    this->initializeModel();
}

OAIStartAppAssessmentRequest::~OAIStartAppAssessmentRequest() {}

void OAIStartAppAssessmentRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_assessment_name_isSet = false;
    m_assessment_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartAppAssessmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAppAssessmentRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_assessment_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_name, json[QString("assessmentName")]);
    m_assessment_name_isSet = !json[QString("assessmentName")].isNull() && m_assessment_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStartAppAssessmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAppAssessmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_assessment_name_isSet) {
        obj.insert(QString("assessmentName"), ::OpenAPI::toJsonValue(m_assessment_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartAppAssessmentRequest::getAppArn() const {
    return m_app_arn;
}
void OAIStartAppAssessmentRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIStartAppAssessmentRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIStartAppAssessmentRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIStartAppAssessmentRequest::getAppVersion() const {
    return m_app_version;
}
void OAIStartAppAssessmentRequest::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIStartAppAssessmentRequest::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIStartAppAssessmentRequest::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIStartAppAssessmentRequest::getAssessmentName() const {
    return m_assessment_name;
}
void OAIStartAppAssessmentRequest::setAssessmentName(const QString &assessment_name) {
    m_assessment_name = assessment_name;
    m_assessment_name_isSet = true;
}

bool OAIStartAppAssessmentRequest::is_assessment_name_Set() const{
    return m_assessment_name_isSet;
}

bool OAIStartAppAssessmentRequest::is_assessment_name_Valid() const{
    return m_assessment_name_isValid;
}

QString OAIStartAppAssessmentRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartAppAssessmentRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartAppAssessmentRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartAppAssessmentRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap OAIStartAppAssessmentRequest::getTags() const {
    return m_tags;
}
void OAIStartAppAssessmentRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartAppAssessmentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartAppAssessmentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartAppAssessmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAppAssessmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && m_assessment_name_isValid && true;
}

} // namespace OpenAPI
