/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRecommendationTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRecommendationTemplate_request::OAICreateRecommendationTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRecommendationTemplate_request::OAICreateRecommendationTemplate_request() {
    this->initializeModel();
}

OAICreateRecommendationTemplate_request::~OAICreateRecommendationTemplate_request() {}

void OAICreateRecommendationTemplate_request::initializeModel() {

    m_assessment_arn_isSet = false;
    m_assessment_arn_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recommendation_ids_isSet = false;
    m_recommendation_ids_isValid = false;

    m_recommendation_types_isSet = false;
    m_recommendation_types_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRecommendationTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRecommendationTemplate_request::fromJsonObject(QJsonObject json) {

    m_assessment_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_arn, json[QString("assessmentArn")]);
    m_assessment_arn_isSet = !json[QString("assessmentArn")].isNull() && m_assessment_arn_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recommendation_ids_isValid = ::OpenAPI::fromJsonValue(m_recommendation_ids, json[QString("recommendationIds")]);
    m_recommendation_ids_isSet = !json[QString("recommendationIds")].isNull() && m_recommendation_ids_isValid;

    m_recommendation_types_isValid = ::OpenAPI::fromJsonValue(m_recommendation_types, json[QString("recommendationTypes")]);
    m_recommendation_types_isSet = !json[QString("recommendationTypes")].isNull() && m_recommendation_types_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRecommendationTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRecommendationTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_arn_isSet) {
        obj.insert(QString("assessmentArn"), ::OpenAPI::toJsonValue(m_assessment_arn));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recommendation_ids.size() > 0) {
        obj.insert(QString("recommendationIds"), ::OpenAPI::toJsonValue(m_recommendation_ids));
    }
    if (m_recommendation_types.size() > 0) {
        obj.insert(QString("recommendationTypes"), ::OpenAPI::toJsonValue(m_recommendation_types));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRecommendationTemplate_request::getAssessmentArn() const {
    return m_assessment_arn;
}
void OAICreateRecommendationTemplate_request::setAssessmentArn(const QString &assessment_arn) {
    m_assessment_arn = assessment_arn;
    m_assessment_arn_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_assessment_arn_Set() const{
    return m_assessment_arn_isSet;
}

bool OAICreateRecommendationTemplate_request::is_assessment_arn_Valid() const{
    return m_assessment_arn_isValid;
}

QString OAICreateRecommendationTemplate_request::getBucketName() const {
    return m_bucket_name;
}
void OAICreateRecommendationTemplate_request::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAICreateRecommendationTemplate_request::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAICreateRecommendationTemplate_request::getClientToken() const {
    return m_client_token;
}
void OAICreateRecommendationTemplate_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRecommendationTemplate_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateRecommendationTemplate_request::getFormat() const {
    return m_format;
}
void OAICreateRecommendationTemplate_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAICreateRecommendationTemplate_request::is_format_Valid() const{
    return m_format_isValid;
}

QString OAICreateRecommendationTemplate_request::getName() const {
    return m_name;
}
void OAICreateRecommendationTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRecommendationTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICreateRecommendationTemplate_request::getRecommendationIds() const {
    return m_recommendation_ids;
}
void OAICreateRecommendationTemplate_request::setRecommendationIds(const QList<QString> &recommendation_ids) {
    m_recommendation_ids = recommendation_ids;
    m_recommendation_ids_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_recommendation_ids_Set() const{
    return m_recommendation_ids_isSet;
}

bool OAICreateRecommendationTemplate_request::is_recommendation_ids_Valid() const{
    return m_recommendation_ids_isValid;
}

QList<OAIRenderRecommendationType> OAICreateRecommendationTemplate_request::getRecommendationTypes() const {
    return m_recommendation_types;
}
void OAICreateRecommendationTemplate_request::setRecommendationTypes(const QList<OAIRenderRecommendationType> &recommendation_types) {
    m_recommendation_types = recommendation_types;
    m_recommendation_types_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_recommendation_types_Set() const{
    return m_recommendation_types_isSet;
}

bool OAICreateRecommendationTemplate_request::is_recommendation_types_Valid() const{
    return m_recommendation_types_isValid;
}

QMap<QString, QString> OAICreateRecommendationTemplate_request::getTags() const {
    return m_tags;
}
void OAICreateRecommendationTemplate_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRecommendationTemplate_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRecommendationTemplate_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRecommendationTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRecommendationTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_arn_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
