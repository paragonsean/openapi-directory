/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnsupportedResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnsupportedResource::OAIUnsupportedResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnsupportedResource::OAIUnsupportedResource() {
    this->initializeModel();
}

OAIUnsupportedResource::~OAIUnsupportedResource() {}

void OAIUnsupportedResource::initializeModel() {

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_unsupported_resource_status_isSet = false;
    m_unsupported_resource_status_isValid = false;
}

void OAIUnsupportedResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnsupportedResource::fromJsonObject(QJsonObject json) {

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("logicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("logicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("physicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("physicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_unsupported_resource_status_isValid = ::OpenAPI::fromJsonValue(m_unsupported_resource_status, json[QString("unsupportedResourceStatus")]);
    m_unsupported_resource_status_isSet = !json[QString("unsupportedResourceStatus")].isNull() && m_unsupported_resource_status_isValid;
}

QString OAIUnsupportedResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnsupportedResource::asJsonObject() const {
    QJsonObject obj;
    if (m_logical_resource_id.isSet()) {
        obj.insert(QString("logicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id.isSet()) {
        obj.insert(QString("physicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_unsupported_resource_status_isSet) {
        obj.insert(QString("unsupportedResourceStatus"), ::OpenAPI::toJsonValue(m_unsupported_resource_status));
    }
    return obj;
}

OAIUnsupportedResource_logicalResourceId OAIUnsupportedResource::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIUnsupportedResource::setLogicalResourceId(const OAIUnsupportedResource_logicalResourceId &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIUnsupportedResource::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIUnsupportedResource::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

OAIUnsupportedResource_physicalResourceId OAIUnsupportedResource::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIUnsupportedResource::setPhysicalResourceId(const OAIUnsupportedResource_physicalResourceId &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIUnsupportedResource::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIUnsupportedResource::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIUnsupportedResource::getResourceType() const {
    return m_resource_type;
}
void OAIUnsupportedResource::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIUnsupportedResource::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIUnsupportedResource::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIUnsupportedResource::getUnsupportedResourceStatus() const {
    return m_unsupported_resource_status;
}
void OAIUnsupportedResource::setUnsupportedResourceStatus(const QString &unsupported_resource_status) {
    m_unsupported_resource_status = unsupported_resource_status;
    m_unsupported_resource_status_isSet = true;
}

bool OAIUnsupportedResource::is_unsupported_resource_status_Set() const{
    return m_unsupported_resource_status_isSet;
}

bool OAIUnsupportedResource::is_unsupported_resource_status_Valid() const{
    return m_unsupported_resource_status_isValid;
}

bool OAIUnsupportedResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logical_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_resource_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnsupportedResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logical_resource_id_isValid && m_physical_resource_id_isValid && m_resource_type_isValid && true;
}

} // namespace OpenAPI
