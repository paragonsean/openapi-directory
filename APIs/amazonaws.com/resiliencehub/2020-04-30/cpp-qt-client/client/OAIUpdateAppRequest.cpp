/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppRequest::OAIUpdateAppRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppRequest::OAIUpdateAppRequest() {
    this->initializeModel();
}

OAIUpdateAppRequest::~OAIUpdateAppRequest() {}

void OAIUpdateAppRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_assessment_schedule_isSet = false;
    m_assessment_schedule_isValid = false;

    m_clear_resiliency_policy_arn_isSet = false;
    m_clear_resiliency_policy_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_subscriptions_isSet = false;
    m_event_subscriptions_isValid = false;

    m_permission_model_isSet = false;
    m_permission_model_isValid = false;

    m_policy_arn_isSet = false;
    m_policy_arn_isValid = false;
}

void OAIUpdateAppRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_assessment_schedule_isValid = ::OpenAPI::fromJsonValue(m_assessment_schedule, json[QString("assessmentSchedule")]);
    m_assessment_schedule_isSet = !json[QString("assessmentSchedule")].isNull() && m_assessment_schedule_isValid;

    m_clear_resiliency_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_clear_resiliency_policy_arn, json[QString("clearResiliencyPolicyArn")]);
    m_clear_resiliency_policy_arn_isSet = !json[QString("clearResiliencyPolicyArn")].isNull() && m_clear_resiliency_policy_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_event_subscriptions, json[QString("eventSubscriptions")]);
    m_event_subscriptions_isSet = !json[QString("eventSubscriptions")].isNull() && m_event_subscriptions_isValid;

    m_permission_model_isValid = ::OpenAPI::fromJsonValue(m_permission_model, json[QString("permissionModel")]);
    m_permission_model_isSet = !json[QString("permissionModel")].isNull() && m_permission_model_isValid;

    m_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_policy_arn, json[QString("policyArn")]);
    m_policy_arn_isSet = !json[QString("policyArn")].isNull() && m_policy_arn_isValid;
}

QString OAIUpdateAppRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_assessment_schedule.isSet()) {
        obj.insert(QString("assessmentSchedule"), ::OpenAPI::toJsonValue(m_assessment_schedule));
    }
    if (m_clear_resiliency_policy_arn_isSet) {
        obj.insert(QString("clearResiliencyPolicyArn"), ::OpenAPI::toJsonValue(m_clear_resiliency_policy_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_subscriptions.isSet()) {
        obj.insert(QString("eventSubscriptions"), ::OpenAPI::toJsonValue(m_event_subscriptions));
    }
    if (m_permission_model.isSet()) {
        obj.insert(QString("permissionModel"), ::OpenAPI::toJsonValue(m_permission_model));
    }
    if (m_policy_arn_isSet) {
        obj.insert(QString("policyArn"), ::OpenAPI::toJsonValue(m_policy_arn));
    }
    return obj;
}

QString OAIUpdateAppRequest::getAppArn() const {
    return m_app_arn;
}
void OAIUpdateAppRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIUpdateAppRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIUpdateAppRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

OAIAppAssessmentScheduleType OAIUpdateAppRequest::getAssessmentSchedule() const {
    return m_assessment_schedule;
}
void OAIUpdateAppRequest::setAssessmentSchedule(const OAIAppAssessmentScheduleType &assessment_schedule) {
    m_assessment_schedule = assessment_schedule;
    m_assessment_schedule_isSet = true;
}

bool OAIUpdateAppRequest::is_assessment_schedule_Set() const{
    return m_assessment_schedule_isSet;
}

bool OAIUpdateAppRequest::is_assessment_schedule_Valid() const{
    return m_assessment_schedule_isValid;
}

bool OAIUpdateAppRequest::getClearResiliencyPolicyArn() const {
    return m_clear_resiliency_policy_arn;
}
void OAIUpdateAppRequest::setClearResiliencyPolicyArn(const bool &clear_resiliency_policy_arn) {
    m_clear_resiliency_policy_arn = clear_resiliency_policy_arn;
    m_clear_resiliency_policy_arn_isSet = true;
}

bool OAIUpdateAppRequest::is_clear_resiliency_policy_arn_Set() const{
    return m_clear_resiliency_policy_arn_isSet;
}

bool OAIUpdateAppRequest::is_clear_resiliency_policy_arn_Valid() const{
    return m_clear_resiliency_policy_arn_isValid;
}

QString OAIUpdateAppRequest::getDescription() const {
    return m_description;
}
void OAIUpdateAppRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateAppRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateAppRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateAppRequest::getEventSubscriptions() const {
    return m_event_subscriptions;
}
void OAIUpdateAppRequest::setEventSubscriptions(const QList &event_subscriptions) {
    m_event_subscriptions = event_subscriptions;
    m_event_subscriptions_isSet = true;
}

bool OAIUpdateAppRequest::is_event_subscriptions_Set() const{
    return m_event_subscriptions_isSet;
}

bool OAIUpdateAppRequest::is_event_subscriptions_Valid() const{
    return m_event_subscriptions_isValid;
}

OAIUpdateAppRequest_permissionModel OAIUpdateAppRequest::getPermissionModel() const {
    return m_permission_model;
}
void OAIUpdateAppRequest::setPermissionModel(const OAIUpdateAppRequest_permissionModel &permission_model) {
    m_permission_model = permission_model;
    m_permission_model_isSet = true;
}

bool OAIUpdateAppRequest::is_permission_model_Set() const{
    return m_permission_model_isSet;
}

bool OAIUpdateAppRequest::is_permission_model_Valid() const{
    return m_permission_model_isValid;
}

QString OAIUpdateAppRequest::getPolicyArn() const {
    return m_policy_arn;
}
void OAIUpdateAppRequest::setPolicyArn(const QString &policy_arn) {
    m_policy_arn = policy_arn;
    m_policy_arn_isSet = true;
}

bool OAIUpdateAppRequest::is_policy_arn_Set() const{
    return m_policy_arn_isSet;
}

bool OAIUpdateAppRequest::is_policy_arn_Valid() const{
    return m_policy_arn_isValid;
}

bool OAIUpdateAppRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_resiliency_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_subscriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
