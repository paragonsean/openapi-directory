/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppVersionResourcesResolutionStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppVersionResourcesResolutionStatusResponse::OAIDescribeAppVersionResourcesResolutionStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppVersionResourcesResolutionStatusResponse::OAIDescribeAppVersionResourcesResolutionStatusResponse() {
    this->initializeModel();
}

OAIDescribeAppVersionResourcesResolutionStatusResponse::~OAIDescribeAppVersionResourcesResolutionStatusResponse() {}

void OAIDescribeAppVersionResourcesResolutionStatusResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_resolution_id_isSet = false;
    m_resolution_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeAppVersionResourcesResolutionStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppVersionResourcesResolutionStatusResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_resolution_id_isValid = ::OpenAPI::fromJsonValue(m_resolution_id, json[QString("resolutionId")]);
    m_resolution_id_isSet = !json[QString("resolutionId")].isNull() && m_resolution_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppVersionResourcesResolutionStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_resolution_id_isSet) {
        obj.insert(QString("resolutionId"), ::OpenAPI::toJsonValue(m_resolution_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeAppVersionResourcesResolutionStatusResponse::getAppArn() const {
    return m_app_arn;
}
void OAIDescribeAppVersionResourcesResolutionStatusResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusResponse::getAppVersion() const {
    return m_app_version;
}
void OAIDescribeAppVersionResourcesResolutionStatusResponse::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIDescribeAppVersionResourcesResolutionStatusResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusResponse::getResolutionId() const {
    return m_resolution_id;
}
void OAIDescribeAppVersionResourcesResolutionStatusResponse::setResolutionId(const QString &resolution_id) {
    m_resolution_id = resolution_id;
    m_resolution_id_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_resolution_id_Set() const{
    return m_resolution_id_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_resolution_id_Valid() const{
    return m_resolution_id_isValid;
}

OAIResourceResolutionStatusType OAIDescribeAppVersionResourcesResolutionStatusResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAppVersionResourcesResolutionStatusResponse::setStatus(const OAIResourceResolutionStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppVersionResourcesResolutionStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && m_resolution_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
