/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUnsupportedResource.h
 *
 * Defines a resource that is not supported by Resilience Hub.
 */

#ifndef OAIUnsupportedResource_H
#define OAIUnsupportedResource_H

#include <QJsonObject>

#include "OAIUnsupportedResource_logicalResourceId.h"
#include "OAIUnsupportedResource_physicalResourceId.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUnsupportedResource_logicalResourceId;
class OAIUnsupportedResource_physicalResourceId;

class OAIUnsupportedResource : public OAIObject {
public:
    OAIUnsupportedResource();
    OAIUnsupportedResource(QString json);
    ~OAIUnsupportedResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUnsupportedResource_logicalResourceId getLogicalResourceId() const;
    void setLogicalResourceId(const OAIUnsupportedResource_logicalResourceId &logical_resource_id);
    bool is_logical_resource_id_Set() const;
    bool is_logical_resource_id_Valid() const;

    OAIUnsupportedResource_physicalResourceId getPhysicalResourceId() const;
    void setPhysicalResourceId(const OAIUnsupportedResource_physicalResourceId &physical_resource_id);
    bool is_physical_resource_id_Set() const;
    bool is_physical_resource_id_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getUnsupportedResourceStatus() const;
    void setUnsupportedResourceStatus(const QString &unsupported_resource_status);
    bool is_unsupported_resource_status_Set() const;
    bool is_unsupported_resource_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUnsupportedResource_logicalResourceId m_logical_resource_id;
    bool m_logical_resource_id_isSet;
    bool m_logical_resource_id_isValid;

    OAIUnsupportedResource_physicalResourceId m_physical_resource_id;
    bool m_physical_resource_id_isSet;
    bool m_physical_resource_id_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_unsupported_resource_status;
    bool m_unsupported_resource_status_isSet;
    bool m_unsupported_resource_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUnsupportedResource)

#endif // OAIUnsupportedResource_H
