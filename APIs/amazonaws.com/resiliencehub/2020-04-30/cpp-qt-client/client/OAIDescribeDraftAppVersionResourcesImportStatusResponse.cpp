/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDraftAppVersionResourcesImportStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDraftAppVersionResourcesImportStatusResponse::OAIDescribeDraftAppVersionResourcesImportStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDraftAppVersionResourcesImportStatusResponse::OAIDescribeDraftAppVersionResourcesImportStatusResponse() {
    this->initializeModel();
}

OAIDescribeDraftAppVersionResourcesImportStatusResponse::~OAIDescribeDraftAppVersionResourcesImportStatusResponse() {}

void OAIDescribeDraftAppVersionResourcesImportStatusResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_change_time_isSet = false;
    m_status_change_time_isValid = false;
}

void OAIDescribeDraftAppVersionResourcesImportStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDraftAppVersionResourcesImportStatusResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_change_time_isValid = ::OpenAPI::fromJsonValue(m_status_change_time, json[QString("statusChangeTime")]);
    m_status_change_time_isSet = !json[QString("statusChangeTime")].isNull() && m_status_change_time_isValid;
}

QString OAIDescribeDraftAppVersionResourcesImportStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDraftAppVersionResourcesImportStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_change_time_isSet) {
        obj.insert(QString("statusChangeTime"), ::OpenAPI::toJsonValue(m_status_change_time));
    }
    return obj;
}

QString OAIDescribeDraftAppVersionResourcesImportStatusResponse::getAppArn() const {
    return m_app_arn;
}
void OAIDescribeDraftAppVersionResourcesImportStatusResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDescribeDraftAppVersionResourcesImportStatusResponse::getAppVersion() const {
    return m_app_version;
}
void OAIDescribeDraftAppVersionResourcesImportStatusResponse::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIDescribeDraftAppVersionResourcesImportStatusResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIDescribeDraftAppVersionResourcesImportStatusResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIResourceImportStatusType OAIDescribeDraftAppVersionResourcesImportStatusResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDraftAppVersionResourcesImportStatusResponse::setStatus(const OAIResourceImportStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeDraftAppVersionResourcesImportStatusResponse::getStatusChangeTime() const {
    return m_status_change_time;
}
void OAIDescribeDraftAppVersionResourcesImportStatusResponse::setStatusChangeTime(const QDateTime &status_change_time) {
    m_status_change_time = status_change_time;
    m_status_change_time_isSet = true;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_status_change_time_Set() const{
    return m_status_change_time_isSet;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::is_status_change_time_Valid() const{
    return m_status_change_time_isValid;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_change_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDraftAppVersionResourcesImportStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && m_status_isValid && m_status_change_time_isValid && true;
}

} // namespace OpenAPI
