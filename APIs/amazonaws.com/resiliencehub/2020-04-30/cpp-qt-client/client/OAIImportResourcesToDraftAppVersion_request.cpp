/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportResourcesToDraftAppVersion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportResourcesToDraftAppVersion_request::OAIImportResourcesToDraftAppVersion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportResourcesToDraftAppVersion_request::OAIImportResourcesToDraftAppVersion_request() {
    this->initializeModel();
}

OAIImportResourcesToDraftAppVersion_request::~OAIImportResourcesToDraftAppVersion_request() {}

void OAIImportResourcesToDraftAppVersion_request::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_eks_sources_isSet = false;
    m_eks_sources_isValid = false;

    m_import_strategy_isSet = false;
    m_import_strategy_isValid = false;

    m_source_arns_isSet = false;
    m_source_arns_isValid = false;

    m_terraform_sources_isSet = false;
    m_terraform_sources_isValid = false;
}

void OAIImportResourcesToDraftAppVersion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportResourcesToDraftAppVersion_request::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_eks_sources_isValid = ::OpenAPI::fromJsonValue(m_eks_sources, json[QString("eksSources")]);
    m_eks_sources_isSet = !json[QString("eksSources")].isNull() && m_eks_sources_isValid;

    m_import_strategy_isValid = ::OpenAPI::fromJsonValue(m_import_strategy, json[QString("importStrategy")]);
    m_import_strategy_isSet = !json[QString("importStrategy")].isNull() && m_import_strategy_isValid;

    m_source_arns_isValid = ::OpenAPI::fromJsonValue(m_source_arns, json[QString("sourceArns")]);
    m_source_arns_isSet = !json[QString("sourceArns")].isNull() && m_source_arns_isValid;

    m_terraform_sources_isValid = ::OpenAPI::fromJsonValue(m_terraform_sources, json[QString("terraformSources")]);
    m_terraform_sources_isSet = !json[QString("terraformSources")].isNull() && m_terraform_sources_isValid;
}

QString OAIImportResourcesToDraftAppVersion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportResourcesToDraftAppVersion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_eks_sources.size() > 0) {
        obj.insert(QString("eksSources"), ::OpenAPI::toJsonValue(m_eks_sources));
    }
    if (m_import_strategy_isSet) {
        obj.insert(QString("importStrategy"), ::OpenAPI::toJsonValue(m_import_strategy));
    }
    if (m_source_arns.size() > 0) {
        obj.insert(QString("sourceArns"), ::OpenAPI::toJsonValue(m_source_arns));
    }
    if (m_terraform_sources.size() > 0) {
        obj.insert(QString("terraformSources"), ::OpenAPI::toJsonValue(m_terraform_sources));
    }
    return obj;
}

QString OAIImportResourcesToDraftAppVersion_request::getAppArn() const {
    return m_app_arn;
}
void OAIImportResourcesToDraftAppVersion_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIImportResourcesToDraftAppVersion_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIImportResourcesToDraftAppVersion_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QList<OAIEksSource> OAIImportResourcesToDraftAppVersion_request::getEksSources() const {
    return m_eks_sources;
}
void OAIImportResourcesToDraftAppVersion_request::setEksSources(const QList<OAIEksSource> &eks_sources) {
    m_eks_sources = eks_sources;
    m_eks_sources_isSet = true;
}

bool OAIImportResourcesToDraftAppVersion_request::is_eks_sources_Set() const{
    return m_eks_sources_isSet;
}

bool OAIImportResourcesToDraftAppVersion_request::is_eks_sources_Valid() const{
    return m_eks_sources_isValid;
}

QString OAIImportResourcesToDraftAppVersion_request::getImportStrategy() const {
    return m_import_strategy;
}
void OAIImportResourcesToDraftAppVersion_request::setImportStrategy(const QString &import_strategy) {
    m_import_strategy = import_strategy;
    m_import_strategy_isSet = true;
}

bool OAIImportResourcesToDraftAppVersion_request::is_import_strategy_Set() const{
    return m_import_strategy_isSet;
}

bool OAIImportResourcesToDraftAppVersion_request::is_import_strategy_Valid() const{
    return m_import_strategy_isValid;
}

QList<QString> OAIImportResourcesToDraftAppVersion_request::getSourceArns() const {
    return m_source_arns;
}
void OAIImportResourcesToDraftAppVersion_request::setSourceArns(const QList<QString> &source_arns) {
    m_source_arns = source_arns;
    m_source_arns_isSet = true;
}

bool OAIImportResourcesToDraftAppVersion_request::is_source_arns_Set() const{
    return m_source_arns_isSet;
}

bool OAIImportResourcesToDraftAppVersion_request::is_source_arns_Valid() const{
    return m_source_arns_isValid;
}

QList<OAITerraformSource> OAIImportResourcesToDraftAppVersion_request::getTerraformSources() const {
    return m_terraform_sources;
}
void OAIImportResourcesToDraftAppVersion_request::setTerraformSources(const QList<OAITerraformSource> &terraform_sources) {
    m_terraform_sources = terraform_sources;
    m_terraform_sources_isSet = true;
}

bool OAIImportResourcesToDraftAppVersion_request::is_terraform_sources_Set() const{
    return m_terraform_sources_isSet;
}

bool OAIImportResourcesToDraftAppVersion_request::is_terraform_sources_Valid() const{
    return m_terraform_sources_isValid;
}

bool OAIImportResourcesToDraftAppVersion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eks_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportResourcesToDraftAppVersion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
