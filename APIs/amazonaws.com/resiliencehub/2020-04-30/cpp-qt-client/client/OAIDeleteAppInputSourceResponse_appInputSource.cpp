/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAppInputSourceResponse_appInputSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAppInputSourceResponse_appInputSource::OAIDeleteAppInputSourceResponse_appInputSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAppInputSourceResponse_appInputSource::OAIDeleteAppInputSourceResponse_appInputSource() {
    this->initializeModel();
}

OAIDeleteAppInputSourceResponse_appInputSource::~OAIDeleteAppInputSourceResponse_appInputSource() {}

void OAIDeleteAppInputSourceResponse_appInputSource::initializeModel() {

    m_eks_source_cluster_namespace_isSet = false;
    m_eks_source_cluster_namespace_isValid = false;

    m_import_type_isSet = false;
    m_import_type_isValid = false;

    m_resource_count_isSet = false;
    m_resource_count_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_terraform_source_isSet = false;
    m_terraform_source_isValid = false;
}

void OAIDeleteAppInputSourceResponse_appInputSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAppInputSourceResponse_appInputSource::fromJsonObject(QJsonObject json) {

    m_eks_source_cluster_namespace_isValid = ::OpenAPI::fromJsonValue(m_eks_source_cluster_namespace, json[QString("eksSourceClusterNamespace")]);
    m_eks_source_cluster_namespace_isSet = !json[QString("eksSourceClusterNamespace")].isNull() && m_eks_source_cluster_namespace_isValid;

    m_import_type_isValid = ::OpenAPI::fromJsonValue(m_import_type, json[QString("importType")]);
    m_import_type_isSet = !json[QString("importType")].isNull() && m_import_type_isValid;

    m_resource_count_isValid = ::OpenAPI::fromJsonValue(m_resource_count, json[QString("resourceCount")]);
    m_resource_count_isSet = !json[QString("resourceCount")].isNull() && m_resource_count_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("sourceArn")]);
    m_source_arn_isSet = !json[QString("sourceArn")].isNull() && m_source_arn_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_terraform_source_isValid = ::OpenAPI::fromJsonValue(m_terraform_source, json[QString("terraformSource")]);
    m_terraform_source_isSet = !json[QString("terraformSource")].isNull() && m_terraform_source_isValid;
}

QString OAIDeleteAppInputSourceResponse_appInputSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAppInputSourceResponse_appInputSource::asJsonObject() const {
    QJsonObject obj;
    if (m_eks_source_cluster_namespace.isSet()) {
        obj.insert(QString("eksSourceClusterNamespace"), ::OpenAPI::toJsonValue(m_eks_source_cluster_namespace));
    }
    if (m_import_type.isSet()) {
        obj.insert(QString("importType"), ::OpenAPI::toJsonValue(m_import_type));
    }
    if (m_resource_count_isSet) {
        obj.insert(QString("resourceCount"), ::OpenAPI::toJsonValue(m_resource_count));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("sourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_terraform_source.isSet()) {
        obj.insert(QString("terraformSource"), ::OpenAPI::toJsonValue(m_terraform_source));
    }
    return obj;
}

OAIAppInputSource_eksSourceClusterNamespace OAIDeleteAppInputSourceResponse_appInputSource::getEksSourceClusterNamespace() const {
    return m_eks_source_cluster_namespace;
}
void OAIDeleteAppInputSourceResponse_appInputSource::setEksSourceClusterNamespace(const OAIAppInputSource_eksSourceClusterNamespace &eks_source_cluster_namespace) {
    m_eks_source_cluster_namespace = eks_source_cluster_namespace;
    m_eks_source_cluster_namespace_isSet = true;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_eks_source_cluster_namespace_Set() const{
    return m_eks_source_cluster_namespace_isSet;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_eks_source_cluster_namespace_Valid() const{
    return m_eks_source_cluster_namespace_isValid;
}

OAIResourceMappingType OAIDeleteAppInputSourceResponse_appInputSource::getImportType() const {
    return m_import_type;
}
void OAIDeleteAppInputSourceResponse_appInputSource::setImportType(const OAIResourceMappingType &import_type) {
    m_import_type = import_type;
    m_import_type_isSet = true;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_import_type_Set() const{
    return m_import_type_isSet;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_import_type_Valid() const{
    return m_import_type_isValid;
}

qint32 OAIDeleteAppInputSourceResponse_appInputSource::getResourceCount() const {
    return m_resource_count;
}
void OAIDeleteAppInputSourceResponse_appInputSource::setResourceCount(const qint32 &resource_count) {
    m_resource_count = resource_count;
    m_resource_count_isSet = true;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_resource_count_Set() const{
    return m_resource_count_isSet;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_resource_count_Valid() const{
    return m_resource_count_isValid;
}

QString OAIDeleteAppInputSourceResponse_appInputSource::getSourceArn() const {
    return m_source_arn;
}
void OAIDeleteAppInputSourceResponse_appInputSource::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QString OAIDeleteAppInputSourceResponse_appInputSource::getSourceName() const {
    return m_source_name;
}
void OAIDeleteAppInputSourceResponse_appInputSource::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_source_name_Valid() const{
    return m_source_name_isValid;
}

OAIAppInputSource_terraformSource OAIDeleteAppInputSourceResponse_appInputSource::getTerraformSource() const {
    return m_terraform_source;
}
void OAIDeleteAppInputSourceResponse_appInputSource::setTerraformSource(const OAIAppInputSource_terraformSource &terraform_source) {
    m_terraform_source = terraform_source;
    m_terraform_source_isSet = true;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_terraform_source_Set() const{
    return m_terraform_source_isSet;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::is_terraform_source_Valid() const{
    return m_terraform_source_isValid;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eks_source_cluster_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAppInputSourceResponse_appInputSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_import_type_isValid && true;
}

} // namespace OpenAPI
