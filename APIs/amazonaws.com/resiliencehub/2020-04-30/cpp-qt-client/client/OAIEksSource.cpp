/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEksSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEksSource::OAIEksSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEksSource::OAIEksSource() {
    this->initializeModel();
}

OAIEksSource::~OAIEksSource() {}

void OAIEksSource::initializeModel() {

    m_eks_cluster_arn_isSet = false;
    m_eks_cluster_arn_isValid = false;

    m_namespaces_isSet = false;
    m_namespaces_isValid = false;
}

void OAIEksSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEksSource::fromJsonObject(QJsonObject json) {

    m_eks_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_eks_cluster_arn, json[QString("eksClusterArn")]);
    m_eks_cluster_arn_isSet = !json[QString("eksClusterArn")].isNull() && m_eks_cluster_arn_isValid;

    m_namespaces_isValid = ::OpenAPI::fromJsonValue(m_namespaces, json[QString("namespaces")]);
    m_namespaces_isSet = !json[QString("namespaces")].isNull() && m_namespaces_isValid;
}

QString OAIEksSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEksSource::asJsonObject() const {
    QJsonObject obj;
    if (m_eks_cluster_arn_isSet) {
        obj.insert(QString("eksClusterArn"), ::OpenAPI::toJsonValue(m_eks_cluster_arn));
    }
    if (m_namespaces.isSet()) {
        obj.insert(QString("namespaces"), ::OpenAPI::toJsonValue(m_namespaces));
    }
    return obj;
}

QString OAIEksSource::getEksClusterArn() const {
    return m_eks_cluster_arn;
}
void OAIEksSource::setEksClusterArn(const QString &eks_cluster_arn) {
    m_eks_cluster_arn = eks_cluster_arn;
    m_eks_cluster_arn_isSet = true;
}

bool OAIEksSource::is_eks_cluster_arn_Set() const{
    return m_eks_cluster_arn_isSet;
}

bool OAIEksSource::is_eks_cluster_arn_Valid() const{
    return m_eks_cluster_arn_isValid;
}

QList OAIEksSource::getNamespaces() const {
    return m_namespaces;
}
void OAIEksSource::setNamespaces(const QList &namespaces) {
    m_namespaces = namespaces;
    m_namespaces_isSet = true;
}

bool OAIEksSource::is_namespaces_Set() const{
    return m_namespaces_isSet;
}

bool OAIEksSource::is_namespaces_Valid() const{
    return m_namespaces_isValid;
}

bool OAIEksSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eks_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaces.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEksSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_eks_cluster_arn_isValid && m_namespaces_isValid && true;
}

} // namespace OpenAPI
