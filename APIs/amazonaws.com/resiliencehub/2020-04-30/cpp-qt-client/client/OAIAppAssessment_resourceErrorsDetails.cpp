/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppAssessment_resourceErrorsDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppAssessment_resourceErrorsDetails::OAIAppAssessment_resourceErrorsDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppAssessment_resourceErrorsDetails::OAIAppAssessment_resourceErrorsDetails() {
    this->initializeModel();
}

OAIAppAssessment_resourceErrorsDetails::~OAIAppAssessment_resourceErrorsDetails() {}

void OAIAppAssessment_resourceErrorsDetails::initializeModel() {

    m_has_more_errors_isSet = false;
    m_has_more_errors_isValid = false;

    m_resource_errors_isSet = false;
    m_resource_errors_isValid = false;
}

void OAIAppAssessment_resourceErrorsDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppAssessment_resourceErrorsDetails::fromJsonObject(QJsonObject json) {

    m_has_more_errors_isValid = ::OpenAPI::fromJsonValue(m_has_more_errors, json[QString("hasMoreErrors")]);
    m_has_more_errors_isSet = !json[QString("hasMoreErrors")].isNull() && m_has_more_errors_isValid;

    m_resource_errors_isValid = ::OpenAPI::fromJsonValue(m_resource_errors, json[QString("resourceErrors")]);
    m_resource_errors_isSet = !json[QString("resourceErrors")].isNull() && m_resource_errors_isValid;
}

QString OAIAppAssessment_resourceErrorsDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppAssessment_resourceErrorsDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_has_more_errors_isSet) {
        obj.insert(QString("hasMoreErrors"), ::OpenAPI::toJsonValue(m_has_more_errors));
    }
    if (m_resource_errors.isSet()) {
        obj.insert(QString("resourceErrors"), ::OpenAPI::toJsonValue(m_resource_errors));
    }
    return obj;
}

bool OAIAppAssessment_resourceErrorsDetails::getHasMoreErrors() const {
    return m_has_more_errors;
}
void OAIAppAssessment_resourceErrorsDetails::setHasMoreErrors(const bool &has_more_errors) {
    m_has_more_errors = has_more_errors;
    m_has_more_errors_isSet = true;
}

bool OAIAppAssessment_resourceErrorsDetails::is_has_more_errors_Set() const{
    return m_has_more_errors_isSet;
}

bool OAIAppAssessment_resourceErrorsDetails::is_has_more_errors_Valid() const{
    return m_has_more_errors_isValid;
}

QList OAIAppAssessment_resourceErrorsDetails::getResourceErrors() const {
    return m_resource_errors;
}
void OAIAppAssessment_resourceErrorsDetails::setResourceErrors(const QList &resource_errors) {
    m_resource_errors = resource_errors;
    m_resource_errors_isSet = true;
}

bool OAIAppAssessment_resourceErrorsDetails::is_resource_errors_Set() const{
    return m_resource_errors_isSet;
}

bool OAIAppAssessment_resourceErrorsDetails::is_resource_errors_Valid() const{
    return m_resource_errors_isValid;
}

bool OAIAppAssessment_resourceErrorsDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_more_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppAssessment_resourceErrorsDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
