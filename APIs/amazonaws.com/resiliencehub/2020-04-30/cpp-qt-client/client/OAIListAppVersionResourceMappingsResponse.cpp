/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppVersionResourceMappingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppVersionResourceMappingsResponse::OAIListAppVersionResourceMappingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppVersionResourceMappingsResponse::OAIListAppVersionResourceMappingsResponse() {
    this->initializeModel();
}

OAIListAppVersionResourceMappingsResponse::~OAIListAppVersionResourceMappingsResponse() {}

void OAIListAppVersionResourceMappingsResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_resource_mappings_isSet = false;
    m_resource_mappings_isValid = false;
}

void OAIListAppVersionResourceMappingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppVersionResourceMappingsResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_resource_mappings_isValid = ::OpenAPI::fromJsonValue(m_resource_mappings, json[QString("resourceMappings")]);
    m_resource_mappings_isSet = !json[QString("resourceMappings")].isNull() && m_resource_mappings_isValid;
}

QString OAIListAppVersionResourceMappingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppVersionResourceMappingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_resource_mappings.isSet()) {
        obj.insert(QString("resourceMappings"), ::OpenAPI::toJsonValue(m_resource_mappings));
    }
    return obj;
}

QString OAIListAppVersionResourceMappingsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAppVersionResourceMappingsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppVersionResourceMappingsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppVersionResourceMappingsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListAppVersionResourceMappingsResponse::getResourceMappings() const {
    return m_resource_mappings;
}
void OAIListAppVersionResourceMappingsResponse::setResourceMappings(const QList &resource_mappings) {
    m_resource_mappings = resource_mappings;
    m_resource_mappings_isSet = true;
}

bool OAIListAppVersionResourceMappingsResponse::is_resource_mappings_Set() const{
    return m_resource_mappings_isSet;
}

bool OAIListAppVersionResourceMappingsResponse::is_resource_mappings_Valid() const{
    return m_resource_mappings_isValid;
}

bool OAIListAppVersionResourceMappingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppVersionResourceMappingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_mappings_isValid && true;
}

} // namespace OpenAPI
