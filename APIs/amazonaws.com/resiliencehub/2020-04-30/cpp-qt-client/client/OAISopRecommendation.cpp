/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISopRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISopRecommendation::OAISopRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISopRecommendation::OAISopRecommendation() {
    this->initializeModel();
}

OAISopRecommendation::~OAISopRecommendation() {}

void OAISopRecommendation::initializeModel() {

    m_app_component_name_isSet = false;
    m_app_component_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prerequisite_isSet = false;
    m_prerequisite_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;
}

void OAISopRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISopRecommendation::fromJsonObject(QJsonObject json) {

    m_app_component_name_isValid = ::OpenAPI::fromJsonValue(m_app_component_name, json[QString("appComponentName")]);
    m_app_component_name_isSet = !json[QString("appComponentName")].isNull() && m_app_component_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prerequisite_isValid = ::OpenAPI::fromJsonValue(m_prerequisite, json[QString("prerequisite")]);
    m_prerequisite_isSet = !json[QString("prerequisite")].isNull() && m_prerequisite_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;
}

QString OAISopRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISopRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_app_component_name_isSet) {
        obj.insert(QString("appComponentName"), ::OpenAPI::toJsonValue(m_app_component_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prerequisite_isSet) {
        obj.insert(QString("prerequisite"), ::OpenAPI::toJsonValue(m_prerequisite));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_service_type.isSet()) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    return obj;
}

QString OAISopRecommendation::getAppComponentName() const {
    return m_app_component_name;
}
void OAISopRecommendation::setAppComponentName(const QString &app_component_name) {
    m_app_component_name = app_component_name;
    m_app_component_name_isSet = true;
}

bool OAISopRecommendation::is_app_component_name_Set() const{
    return m_app_component_name_isSet;
}

bool OAISopRecommendation::is_app_component_name_Valid() const{
    return m_app_component_name_isValid;
}

QString OAISopRecommendation::getDescription() const {
    return m_description;
}
void OAISopRecommendation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISopRecommendation::is_description_Set() const{
    return m_description_isSet;
}

bool OAISopRecommendation::is_description_Valid() const{
    return m_description_isValid;
}

QList OAISopRecommendation::getItems() const {
    return m_items;
}
void OAISopRecommendation::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISopRecommendation::is_items_Set() const{
    return m_items_isSet;
}

bool OAISopRecommendation::is_items_Valid() const{
    return m_items_isValid;
}

QString OAISopRecommendation::getName() const {
    return m_name;
}
void OAISopRecommendation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISopRecommendation::is_name_Set() const{
    return m_name_isSet;
}

bool OAISopRecommendation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISopRecommendation::getPrerequisite() const {
    return m_prerequisite;
}
void OAISopRecommendation::setPrerequisite(const QString &prerequisite) {
    m_prerequisite = prerequisite;
    m_prerequisite_isSet = true;
}

bool OAISopRecommendation::is_prerequisite_Set() const{
    return m_prerequisite_isSet;
}

bool OAISopRecommendation::is_prerequisite_Valid() const{
    return m_prerequisite_isValid;
}

QString OAISopRecommendation::getRecommendationId() const {
    return m_recommendation_id;
}
void OAISopRecommendation::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAISopRecommendation::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAISopRecommendation::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAISopRecommendation::getReferenceId() const {
    return m_reference_id;
}
void OAISopRecommendation::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAISopRecommendation::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAISopRecommendation::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAISopServiceType OAISopRecommendation::getServiceType() const {
    return m_service_type;
}
void OAISopRecommendation::setServiceType(const OAISopServiceType &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAISopRecommendation::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAISopRecommendation::is_service_type_Valid() const{
    return m_service_type_isValid;
}

bool OAISopRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISopRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recommendation_id_isValid && m_reference_id_isValid && m_service_type_isValid && true;
}

} // namespace OpenAPI
