/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResiliencyPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResiliencyPolicyRequest::OAICreateResiliencyPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResiliencyPolicyRequest::OAICreateResiliencyPolicyRequest() {
    this->initializeModel();
}

OAICreateResiliencyPolicyRequest::~OAICreateResiliencyPolicyRequest() {}

void OAICreateResiliencyPolicyRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_data_location_constraint_isSet = false;
    m_data_location_constraint_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_policy_description_isSet = false;
    m_policy_description_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAICreateResiliencyPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResiliencyPolicyRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_data_location_constraint_isValid = ::OpenAPI::fromJsonValue(m_data_location_constraint, json[QString("dataLocationConstraint")]);
    m_data_location_constraint_isSet = !json[QString("dataLocationConstraint")].isNull() && m_data_location_constraint_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_policy_description_isValid = ::OpenAPI::fromJsonValue(m_policy_description, json[QString("policyDescription")]);
    m_policy_description_isSet = !json[QString("policyDescription")].isNull() && m_policy_description_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAICreateResiliencyPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResiliencyPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_data_location_constraint.isSet()) {
        obj.insert(QString("dataLocationConstraint"), ::OpenAPI::toJsonValue(m_data_location_constraint));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_policy_description_isSet) {
        obj.insert(QString("policyDescription"), ::OpenAPI::toJsonValue(m_policy_description));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tier.isSet()) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAICreateResiliencyPolicyRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateResiliencyPolicyRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIDataLocationConstraint OAICreateResiliencyPolicyRequest::getDataLocationConstraint() const {
    return m_data_location_constraint;
}
void OAICreateResiliencyPolicyRequest::setDataLocationConstraint(const OAIDataLocationConstraint &data_location_constraint) {
    m_data_location_constraint = data_location_constraint;
    m_data_location_constraint_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_data_location_constraint_Set() const{
    return m_data_location_constraint_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_data_location_constraint_Valid() const{
    return m_data_location_constraint_isValid;
}

QMap OAICreateResiliencyPolicyRequest::getPolicy() const {
    return m_policy;
}
void OAICreateResiliencyPolicyRequest::setPolicy(const QMap &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAICreateResiliencyPolicyRequest::getPolicyDescription() const {
    return m_policy_description;
}
void OAICreateResiliencyPolicyRequest::setPolicyDescription(const QString &policy_description) {
    m_policy_description = policy_description;
    m_policy_description_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_policy_description_Set() const{
    return m_policy_description_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_policy_description_Valid() const{
    return m_policy_description_isValid;
}

QString OAICreateResiliencyPolicyRequest::getPolicyName() const {
    return m_policy_name;
}
void OAICreateResiliencyPolicyRequest::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

QMap OAICreateResiliencyPolicyRequest::getTags() const {
    return m_tags;
}
void OAICreateResiliencyPolicyRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIResiliencyPolicyTier OAICreateResiliencyPolicyRequest::getTier() const {
    return m_tier;
}
void OAICreateResiliencyPolicyRequest::setTier(const OAIResiliencyPolicyTier &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICreateResiliencyPolicyRequest::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICreateResiliencyPolicyRequest::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAICreateResiliencyPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_location_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResiliencyPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && m_policy_name_isValid && m_tier_isValid && true;
}

} // namespace OpenAPI
