/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenderRecommendationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenderRecommendationType::OAIRenderRecommendationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenderRecommendationType::OAIRenderRecommendationType() {
    this->initializeModel();
}

OAIRenderRecommendationType::~OAIRenderRecommendationType() {}

void OAIRenderRecommendationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRenderRecommendationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRenderRecommendationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Alarm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenderRecommendationType::ALARM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenderRecommendationType::SOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Test", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenderRecommendationType::TEST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRenderRecommendationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRenderRecommendationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRenderRecommendationType::ALARM:
            val = "Alarm";
            break;
        case eOAIRenderRecommendationType::SOP:
            val = "Sop";
            break;
        case eOAIRenderRecommendationType::TEST:
            val = "Test";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRenderRecommendationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRenderRecommendationType::eOAIRenderRecommendationType OAIRenderRecommendationType::getValue() const {
    return m_value;
}

void OAIRenderRecommendationType::setValue(const OAIRenderRecommendationType::eOAIRenderRecommendationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRenderRecommendationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRenderRecommendationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
