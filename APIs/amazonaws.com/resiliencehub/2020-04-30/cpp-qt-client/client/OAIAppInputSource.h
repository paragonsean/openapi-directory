/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAppInputSource.h
 *
 * The list of Resilience Hub application input sources.
 */

#ifndef OAIAppInputSource_H
#define OAIAppInputSource_H

#include <QJsonObject>

#include "OAIAppInputSource_eksSourceClusterNamespace.h"
#include "OAIAppInputSource_terraformSource.h"
#include "OAIResourceMappingType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppInputSource_eksSourceClusterNamespace;
class OAIAppInputSource_terraformSource;

class OAIAppInputSource : public OAIObject {
public:
    OAIAppInputSource();
    OAIAppInputSource(QString json);
    ~OAIAppInputSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppInputSource_eksSourceClusterNamespace getEksSourceClusterNamespace() const;
    void setEksSourceClusterNamespace(const OAIAppInputSource_eksSourceClusterNamespace &eks_source_cluster_namespace);
    bool is_eks_source_cluster_namespace_Set() const;
    bool is_eks_source_cluster_namespace_Valid() const;

    OAIResourceMappingType getImportType() const;
    void setImportType(const OAIResourceMappingType &import_type);
    bool is_import_type_Set() const;
    bool is_import_type_Valid() const;

    qint32 getResourceCount() const;
    void setResourceCount(const qint32 &resource_count);
    bool is_resource_count_Set() const;
    bool is_resource_count_Valid() const;

    QString getSourceArn() const;
    void setSourceArn(const QString &source_arn);
    bool is_source_arn_Set() const;
    bool is_source_arn_Valid() const;

    QString getSourceName() const;
    void setSourceName(const QString &source_name);
    bool is_source_name_Set() const;
    bool is_source_name_Valid() const;

    OAIAppInputSource_terraformSource getTerraformSource() const;
    void setTerraformSource(const OAIAppInputSource_terraformSource &terraform_source);
    bool is_terraform_source_Set() const;
    bool is_terraform_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppInputSource_eksSourceClusterNamespace m_eks_source_cluster_namespace;
    bool m_eks_source_cluster_namespace_isSet;
    bool m_eks_source_cluster_namespace_isValid;

    OAIResourceMappingType m_import_type;
    bool m_import_type_isSet;
    bool m_import_type_isValid;

    qint32 m_resource_count;
    bool m_resource_count_isSet;
    bool m_resource_count_isValid;

    QString m_source_arn;
    bool m_source_arn_isSet;
    bool m_source_arn_isValid;

    QString m_source_name;
    bool m_source_name_isSet;
    bool m_source_name_isValid;

    OAIAppInputSource_terraformSource m_terraform_source;
    bool m_terraform_source_isSet;
    bool m_terraform_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAppInputSource)

#endif // OAIAppInputSource_H
