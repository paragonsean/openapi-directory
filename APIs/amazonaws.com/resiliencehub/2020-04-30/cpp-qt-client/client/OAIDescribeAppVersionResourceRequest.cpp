/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppVersionResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppVersionResourceRequest::OAIDescribeAppVersionResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppVersionResourceRequest::OAIDescribeAppVersionResourceRequest() {
    this->initializeModel();
}

OAIDescribeAppVersionResourceRequest::~OAIDescribeAppVersionResourceRequest() {}

void OAIDescribeAppVersionResourceRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_aws_region_isSet = false;
    m_aws_region_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIDescribeAppVersionResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppVersionResourceRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_aws_region_isValid = ::OpenAPI::fromJsonValue(m_aws_region, json[QString("awsRegion")]);
    m_aws_region_isSet = !json[QString("awsRegion")].isNull() && m_aws_region_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("logicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("logicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("physicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("physicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIDescribeAppVersionResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppVersionResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_aws_account_id_isSet) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_aws_region_isSet) {
        obj.insert(QString("awsRegion"), ::OpenAPI::toJsonValue(m_aws_region));
    }
    if (m_logical_resource_id.isSet()) {
        obj.insert(QString("logicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("physicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIDescribeAppVersionResourceRequest::getAppArn() const {
    return m_app_arn;
}
void OAIDescribeAppVersionResourceRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDescribeAppVersionResourceRequest::getAppVersion() const {
    return m_app_version;
}
void OAIDescribeAppVersionResourceRequest::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIDescribeAppVersionResourceRequest::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIDescribeAppVersionResourceRequest::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAIDescribeAppVersionResourceRequest::getAwsRegion() const {
    return m_aws_region;
}
void OAIDescribeAppVersionResourceRequest::setAwsRegion(const QString &aws_region) {
    m_aws_region = aws_region;
    m_aws_region_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_aws_region_Set() const{
    return m_aws_region_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_aws_region_Valid() const{
    return m_aws_region_isValid;
}

OAICreateAppVersionResourceRequest_logicalResourceId OAIDescribeAppVersionResourceRequest::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIDescribeAppVersionResourceRequest::setLogicalResourceId(const OAICreateAppVersionResourceRequest_logicalResourceId &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIDescribeAppVersionResourceRequest::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIDescribeAppVersionResourceRequest::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIDescribeAppVersionResourceRequest::getResourceName() const {
    return m_resource_name;
}
void OAIDescribeAppVersionResourceRequest::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDescribeAppVersionResourceRequest::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDescribeAppVersionResourceRequest::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIDescribeAppVersionResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppVersionResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && true;
}

} // namespace OpenAPI
