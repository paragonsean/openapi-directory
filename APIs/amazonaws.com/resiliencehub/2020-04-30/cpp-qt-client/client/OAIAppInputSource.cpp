/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInputSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInputSource::OAIAppInputSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInputSource::OAIAppInputSource() {
    this->initializeModel();
}

OAIAppInputSource::~OAIAppInputSource() {}

void OAIAppInputSource::initializeModel() {

    m_eks_source_cluster_namespace_isSet = false;
    m_eks_source_cluster_namespace_isValid = false;

    m_import_type_isSet = false;
    m_import_type_isValid = false;

    m_resource_count_isSet = false;
    m_resource_count_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_terraform_source_isSet = false;
    m_terraform_source_isValid = false;
}

void OAIAppInputSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInputSource::fromJsonObject(QJsonObject json) {

    m_eks_source_cluster_namespace_isValid = ::OpenAPI::fromJsonValue(m_eks_source_cluster_namespace, json[QString("eksSourceClusterNamespace")]);
    m_eks_source_cluster_namespace_isSet = !json[QString("eksSourceClusterNamespace")].isNull() && m_eks_source_cluster_namespace_isValid;

    m_import_type_isValid = ::OpenAPI::fromJsonValue(m_import_type, json[QString("importType")]);
    m_import_type_isSet = !json[QString("importType")].isNull() && m_import_type_isValid;

    m_resource_count_isValid = ::OpenAPI::fromJsonValue(m_resource_count, json[QString("resourceCount")]);
    m_resource_count_isSet = !json[QString("resourceCount")].isNull() && m_resource_count_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("sourceArn")]);
    m_source_arn_isSet = !json[QString("sourceArn")].isNull() && m_source_arn_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_terraform_source_isValid = ::OpenAPI::fromJsonValue(m_terraform_source, json[QString("terraformSource")]);
    m_terraform_source_isSet = !json[QString("terraformSource")].isNull() && m_terraform_source_isValid;
}

QString OAIAppInputSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInputSource::asJsonObject() const {
    QJsonObject obj;
    if (m_eks_source_cluster_namespace.isSet()) {
        obj.insert(QString("eksSourceClusterNamespace"), ::OpenAPI::toJsonValue(m_eks_source_cluster_namespace));
    }
    if (m_import_type.isSet()) {
        obj.insert(QString("importType"), ::OpenAPI::toJsonValue(m_import_type));
    }
    if (m_resource_count_isSet) {
        obj.insert(QString("resourceCount"), ::OpenAPI::toJsonValue(m_resource_count));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("sourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_terraform_source.isSet()) {
        obj.insert(QString("terraformSource"), ::OpenAPI::toJsonValue(m_terraform_source));
    }
    return obj;
}

OAIAppInputSource_eksSourceClusterNamespace OAIAppInputSource::getEksSourceClusterNamespace() const {
    return m_eks_source_cluster_namespace;
}
void OAIAppInputSource::setEksSourceClusterNamespace(const OAIAppInputSource_eksSourceClusterNamespace &eks_source_cluster_namespace) {
    m_eks_source_cluster_namespace = eks_source_cluster_namespace;
    m_eks_source_cluster_namespace_isSet = true;
}

bool OAIAppInputSource::is_eks_source_cluster_namespace_Set() const{
    return m_eks_source_cluster_namespace_isSet;
}

bool OAIAppInputSource::is_eks_source_cluster_namespace_Valid() const{
    return m_eks_source_cluster_namespace_isValid;
}

OAIResourceMappingType OAIAppInputSource::getImportType() const {
    return m_import_type;
}
void OAIAppInputSource::setImportType(const OAIResourceMappingType &import_type) {
    m_import_type = import_type;
    m_import_type_isSet = true;
}

bool OAIAppInputSource::is_import_type_Set() const{
    return m_import_type_isSet;
}

bool OAIAppInputSource::is_import_type_Valid() const{
    return m_import_type_isValid;
}

qint32 OAIAppInputSource::getResourceCount() const {
    return m_resource_count;
}
void OAIAppInputSource::setResourceCount(const qint32 &resource_count) {
    m_resource_count = resource_count;
    m_resource_count_isSet = true;
}

bool OAIAppInputSource::is_resource_count_Set() const{
    return m_resource_count_isSet;
}

bool OAIAppInputSource::is_resource_count_Valid() const{
    return m_resource_count_isValid;
}

QString OAIAppInputSource::getSourceArn() const {
    return m_source_arn;
}
void OAIAppInputSource::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIAppInputSource::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIAppInputSource::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QString OAIAppInputSource::getSourceName() const {
    return m_source_name;
}
void OAIAppInputSource::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIAppInputSource::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIAppInputSource::is_source_name_Valid() const{
    return m_source_name_isValid;
}

OAIAppInputSource_terraformSource OAIAppInputSource::getTerraformSource() const {
    return m_terraform_source;
}
void OAIAppInputSource::setTerraformSource(const OAIAppInputSource_terraformSource &terraform_source) {
    m_terraform_source = terraform_source;
    m_terraform_source_isSet = true;
}

bool OAIAppInputSource::is_terraform_source_Set() const{
    return m_terraform_source_isSet;
}

bool OAIAppInputSource::is_terraform_source_Valid() const{
    return m_terraform_source_isValid;
}

bool OAIAppInputSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eks_source_cluster_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInputSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_import_type_isValid && true;
}

} // namespace OpenAPI
