/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateRecommendationStatusFailedEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateRecommendationStatusFailedEntry::OAIBatchUpdateRecommendationStatusFailedEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateRecommendationStatusFailedEntry::OAIBatchUpdateRecommendationStatusFailedEntry() {
    this->initializeModel();
}

OAIBatchUpdateRecommendationStatusFailedEntry::~OAIBatchUpdateRecommendationStatusFailedEntry() {}

void OAIBatchUpdateRecommendationStatusFailedEntry::initializeModel() {

    m_entry_id_isSet = false;
    m_entry_id_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIBatchUpdateRecommendationStatusFailedEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateRecommendationStatusFailedEntry::fromJsonObject(QJsonObject json) {

    m_entry_id_isValid = ::OpenAPI::fromJsonValue(m_entry_id, json[QString("entryId")]);
    m_entry_id_isSet = !json[QString("entryId")].isNull() && m_entry_id_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;
}

QString OAIBatchUpdateRecommendationStatusFailedEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateRecommendationStatusFailedEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_entry_id_isSet) {
        obj.insert(QString("entryId"), ::OpenAPI::toJsonValue(m_entry_id));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

QString OAIBatchUpdateRecommendationStatusFailedEntry::getEntryId() const {
    return m_entry_id;
}
void OAIBatchUpdateRecommendationStatusFailedEntry::setEntryId(const QString &entry_id) {
    m_entry_id = entry_id;
    m_entry_id_isSet = true;
}

bool OAIBatchUpdateRecommendationStatusFailedEntry::is_entry_id_Set() const{
    return m_entry_id_isSet;
}

bool OAIBatchUpdateRecommendationStatusFailedEntry::is_entry_id_Valid() const{
    return m_entry_id_isValid;
}

QString OAIBatchUpdateRecommendationStatusFailedEntry::getErrorMessage() const {
    return m_error_message;
}
void OAIBatchUpdateRecommendationStatusFailedEntry::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBatchUpdateRecommendationStatusFailedEntry::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBatchUpdateRecommendationStatusFailedEntry::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIBatchUpdateRecommendationStatusFailedEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateRecommendationStatusFailedEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entry_id_isValid && m_error_message_isValid && true;
}

} // namespace OpenAPI
