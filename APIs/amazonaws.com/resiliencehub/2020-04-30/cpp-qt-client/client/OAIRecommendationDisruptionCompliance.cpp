/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationDisruptionCompliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationDisruptionCompliance::OAIRecommendationDisruptionCompliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationDisruptionCompliance::OAIRecommendationDisruptionCompliance() {
    this->initializeModel();
}

OAIRecommendationDisruptionCompliance::~OAIRecommendationDisruptionCompliance() {}

void OAIRecommendationDisruptionCompliance::initializeModel() {

    m_expected_compliance_status_isSet = false;
    m_expected_compliance_status_isValid = false;

    m_expected_rpo_description_isSet = false;
    m_expected_rpo_description_isValid = false;

    m_expected_rpo_in_secs_isSet = false;
    m_expected_rpo_in_secs_isValid = false;

    m_expected_rto_description_isSet = false;
    m_expected_rto_description_isValid = false;

    m_expected_rto_in_secs_isSet = false;
    m_expected_rto_in_secs_isValid = false;
}

void OAIRecommendationDisruptionCompliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationDisruptionCompliance::fromJsonObject(QJsonObject json) {

    m_expected_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_expected_compliance_status, json[QString("expectedComplianceStatus")]);
    m_expected_compliance_status_isSet = !json[QString("expectedComplianceStatus")].isNull() && m_expected_compliance_status_isValid;

    m_expected_rpo_description_isValid = ::OpenAPI::fromJsonValue(m_expected_rpo_description, json[QString("expectedRpoDescription")]);
    m_expected_rpo_description_isSet = !json[QString("expectedRpoDescription")].isNull() && m_expected_rpo_description_isValid;

    m_expected_rpo_in_secs_isValid = ::OpenAPI::fromJsonValue(m_expected_rpo_in_secs, json[QString("expectedRpoInSecs")]);
    m_expected_rpo_in_secs_isSet = !json[QString("expectedRpoInSecs")].isNull() && m_expected_rpo_in_secs_isValid;

    m_expected_rto_description_isValid = ::OpenAPI::fromJsonValue(m_expected_rto_description, json[QString("expectedRtoDescription")]);
    m_expected_rto_description_isSet = !json[QString("expectedRtoDescription")].isNull() && m_expected_rto_description_isValid;

    m_expected_rto_in_secs_isValid = ::OpenAPI::fromJsonValue(m_expected_rto_in_secs, json[QString("expectedRtoInSecs")]);
    m_expected_rto_in_secs_isSet = !json[QString("expectedRtoInSecs")].isNull() && m_expected_rto_in_secs_isValid;
}

QString OAIRecommendationDisruptionCompliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationDisruptionCompliance::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_compliance_status.isSet()) {
        obj.insert(QString("expectedComplianceStatus"), ::OpenAPI::toJsonValue(m_expected_compliance_status));
    }
    if (m_expected_rpo_description_isSet) {
        obj.insert(QString("expectedRpoDescription"), ::OpenAPI::toJsonValue(m_expected_rpo_description));
    }
    if (m_expected_rpo_in_secs_isSet) {
        obj.insert(QString("expectedRpoInSecs"), ::OpenAPI::toJsonValue(m_expected_rpo_in_secs));
    }
    if (m_expected_rto_description_isSet) {
        obj.insert(QString("expectedRtoDescription"), ::OpenAPI::toJsonValue(m_expected_rto_description));
    }
    if (m_expected_rto_in_secs_isSet) {
        obj.insert(QString("expectedRtoInSecs"), ::OpenAPI::toJsonValue(m_expected_rto_in_secs));
    }
    return obj;
}

OAIComplianceStatus OAIRecommendationDisruptionCompliance::getExpectedComplianceStatus() const {
    return m_expected_compliance_status;
}
void OAIRecommendationDisruptionCompliance::setExpectedComplianceStatus(const OAIComplianceStatus &expected_compliance_status) {
    m_expected_compliance_status = expected_compliance_status;
    m_expected_compliance_status_isSet = true;
}

bool OAIRecommendationDisruptionCompliance::is_expected_compliance_status_Set() const{
    return m_expected_compliance_status_isSet;
}

bool OAIRecommendationDisruptionCompliance::is_expected_compliance_status_Valid() const{
    return m_expected_compliance_status_isValid;
}

QString OAIRecommendationDisruptionCompliance::getExpectedRpoDescription() const {
    return m_expected_rpo_description;
}
void OAIRecommendationDisruptionCompliance::setExpectedRpoDescription(const QString &expected_rpo_description) {
    m_expected_rpo_description = expected_rpo_description;
    m_expected_rpo_description_isSet = true;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rpo_description_Set() const{
    return m_expected_rpo_description_isSet;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rpo_description_Valid() const{
    return m_expected_rpo_description_isValid;
}

qint32 OAIRecommendationDisruptionCompliance::getExpectedRpoInSecs() const {
    return m_expected_rpo_in_secs;
}
void OAIRecommendationDisruptionCompliance::setExpectedRpoInSecs(const qint32 &expected_rpo_in_secs) {
    m_expected_rpo_in_secs = expected_rpo_in_secs;
    m_expected_rpo_in_secs_isSet = true;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rpo_in_secs_Set() const{
    return m_expected_rpo_in_secs_isSet;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rpo_in_secs_Valid() const{
    return m_expected_rpo_in_secs_isValid;
}

QString OAIRecommendationDisruptionCompliance::getExpectedRtoDescription() const {
    return m_expected_rto_description;
}
void OAIRecommendationDisruptionCompliance::setExpectedRtoDescription(const QString &expected_rto_description) {
    m_expected_rto_description = expected_rto_description;
    m_expected_rto_description_isSet = true;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rto_description_Set() const{
    return m_expected_rto_description_isSet;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rto_description_Valid() const{
    return m_expected_rto_description_isValid;
}

qint32 OAIRecommendationDisruptionCompliance::getExpectedRtoInSecs() const {
    return m_expected_rto_in_secs;
}
void OAIRecommendationDisruptionCompliance::setExpectedRtoInSecs(const qint32 &expected_rto_in_secs) {
    m_expected_rto_in_secs = expected_rto_in_secs;
    m_expected_rto_in_secs_isSet = true;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rto_in_secs_Set() const{
    return m_expected_rto_in_secs_isSet;
}

bool OAIRecommendationDisruptionCompliance::is_expected_rto_in_secs_Valid() const{
    return m_expected_rto_in_secs_isValid;
}

bool OAIRecommendationDisruptionCompliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_compliance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_rpo_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_rpo_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_rto_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_rto_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationDisruptionCompliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expected_compliance_status_isValid && true;
}

} // namespace OpenAPI
