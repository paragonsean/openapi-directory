/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscription::OAIEventSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscription::OAIEventSubscription() {
    this->initializeModel();
}

OAIEventSubscription::~OAIEventSubscription() {}

void OAIEventSubscription::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;
}

void OAIEventSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscription::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("snsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("snsTopicArn")].isNull() && m_sns_topic_arn_isValid;
}

QString OAIEventSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("snsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    return obj;
}

OAIEventType OAIEventSubscription::getEventType() const {
    return m_event_type;
}
void OAIEventSubscription::setEventType(const OAIEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventSubscription::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventSubscription::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEventSubscription::getName() const {
    return m_name;
}
void OAIEventSubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventSubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventSubscription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventSubscription::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIEventSubscription::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIEventSubscription::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIEventSubscription::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

bool OAIEventSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
