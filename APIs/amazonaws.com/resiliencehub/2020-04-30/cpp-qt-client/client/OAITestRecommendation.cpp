/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRecommendation::OAITestRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRecommendation::OAITestRecommendation() {
    this->initializeModel();
}

OAITestRecommendation::~OAITestRecommendation() {}

void OAITestRecommendation::initializeModel() {

    m_app_component_name_isSet = false;
    m_app_component_name_isValid = false;

    m_depends_on_alarms_isSet = false;
    m_depends_on_alarms_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prerequisite_isSet = false;
    m_prerequisite_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_risk_isSet = false;
    m_risk_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITestRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRecommendation::fromJsonObject(QJsonObject json) {

    m_app_component_name_isValid = ::OpenAPI::fromJsonValue(m_app_component_name, json[QString("appComponentName")]);
    m_app_component_name_isSet = !json[QString("appComponentName")].isNull() && m_app_component_name_isValid;

    m_depends_on_alarms_isValid = ::OpenAPI::fromJsonValue(m_depends_on_alarms, json[QString("dependsOnAlarms")]);
    m_depends_on_alarms_isSet = !json[QString("dependsOnAlarms")].isNull() && m_depends_on_alarms_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prerequisite_isValid = ::OpenAPI::fromJsonValue(m_prerequisite, json[QString("prerequisite")]);
    m_prerequisite_isSet = !json[QString("prerequisite")].isNull() && m_prerequisite_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_risk_isValid = ::OpenAPI::fromJsonValue(m_risk, json[QString("risk")]);
    m_risk_isSet = !json[QString("risk")].isNull() && m_risk_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITestRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_app_component_name_isSet) {
        obj.insert(QString("appComponentName"), ::OpenAPI::toJsonValue(m_app_component_name));
    }
    if (m_depends_on_alarms.isSet()) {
        obj.insert(QString("dependsOnAlarms"), ::OpenAPI::toJsonValue(m_depends_on_alarms));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_intent_isSet) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prerequisite_isSet) {
        obj.insert(QString("prerequisite"), ::OpenAPI::toJsonValue(m_prerequisite));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_risk.isSet()) {
        obj.insert(QString("risk"), ::OpenAPI::toJsonValue(m_risk));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITestRecommendation::getAppComponentName() const {
    return m_app_component_name;
}
void OAITestRecommendation::setAppComponentName(const QString &app_component_name) {
    m_app_component_name = app_component_name;
    m_app_component_name_isSet = true;
}

bool OAITestRecommendation::is_app_component_name_Set() const{
    return m_app_component_name_isSet;
}

bool OAITestRecommendation::is_app_component_name_Valid() const{
    return m_app_component_name_isValid;
}

QList OAITestRecommendation::getDependsOnAlarms() const {
    return m_depends_on_alarms;
}
void OAITestRecommendation::setDependsOnAlarms(const QList &depends_on_alarms) {
    m_depends_on_alarms = depends_on_alarms;
    m_depends_on_alarms_isSet = true;
}

bool OAITestRecommendation::is_depends_on_alarms_Set() const{
    return m_depends_on_alarms_isSet;
}

bool OAITestRecommendation::is_depends_on_alarms_Valid() const{
    return m_depends_on_alarms_isValid;
}

QString OAITestRecommendation::getDescription() const {
    return m_description;
}
void OAITestRecommendation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITestRecommendation::is_description_Set() const{
    return m_description_isSet;
}

bool OAITestRecommendation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITestRecommendation::getIntent() const {
    return m_intent;
}
void OAITestRecommendation::setIntent(const QString &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAITestRecommendation::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAITestRecommendation::is_intent_Valid() const{
    return m_intent_isValid;
}

QList OAITestRecommendation::getItems() const {
    return m_items;
}
void OAITestRecommendation::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAITestRecommendation::is_items_Set() const{
    return m_items_isSet;
}

bool OAITestRecommendation::is_items_Valid() const{
    return m_items_isValid;
}

QString OAITestRecommendation::getName() const {
    return m_name;
}
void OAITestRecommendation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITestRecommendation::is_name_Set() const{
    return m_name_isSet;
}

bool OAITestRecommendation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITestRecommendation::getPrerequisite() const {
    return m_prerequisite;
}
void OAITestRecommendation::setPrerequisite(const QString &prerequisite) {
    m_prerequisite = prerequisite;
    m_prerequisite_isSet = true;
}

bool OAITestRecommendation::is_prerequisite_Set() const{
    return m_prerequisite_isSet;
}

bool OAITestRecommendation::is_prerequisite_Valid() const{
    return m_prerequisite_isValid;
}

QString OAITestRecommendation::getRecommendationId() const {
    return m_recommendation_id;
}
void OAITestRecommendation::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAITestRecommendation::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAITestRecommendation::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAITestRecommendation::getReferenceId() const {
    return m_reference_id;
}
void OAITestRecommendation::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAITestRecommendation::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAITestRecommendation::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAITestRisk OAITestRecommendation::getRisk() const {
    return m_risk;
}
void OAITestRecommendation::setRisk(const OAITestRisk &risk) {
    m_risk = risk;
    m_risk_isSet = true;
}

bool OAITestRecommendation::is_risk_Set() const{
    return m_risk_isSet;
}

bool OAITestRecommendation::is_risk_Valid() const{
    return m_risk_isValid;
}

OAITestType OAITestRecommendation::getType() const {
    return m_type;
}
void OAITestRecommendation::setType(const OAITestType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITestRecommendation::is_type_Set() const{
    return m_type_isSet;
}

bool OAITestRecommendation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITestRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on_alarms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_id_isValid && true;
}

} // namespace OpenAPI
