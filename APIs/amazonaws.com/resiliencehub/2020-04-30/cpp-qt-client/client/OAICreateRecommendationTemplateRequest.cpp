/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRecommendationTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRecommendationTemplateRequest::OAICreateRecommendationTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRecommendationTemplateRequest::OAICreateRecommendationTemplateRequest() {
    this->initializeModel();
}

OAICreateRecommendationTemplateRequest::~OAICreateRecommendationTemplateRequest() {}

void OAICreateRecommendationTemplateRequest::initializeModel() {

    m_assessment_arn_isSet = false;
    m_assessment_arn_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recommendation_ids_isSet = false;
    m_recommendation_ids_isValid = false;

    m_recommendation_types_isSet = false;
    m_recommendation_types_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRecommendationTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRecommendationTemplateRequest::fromJsonObject(QJsonObject json) {

    m_assessment_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_arn, json[QString("assessmentArn")]);
    m_assessment_arn_isSet = !json[QString("assessmentArn")].isNull() && m_assessment_arn_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recommendation_ids_isValid = ::OpenAPI::fromJsonValue(m_recommendation_ids, json[QString("recommendationIds")]);
    m_recommendation_ids_isSet = !json[QString("recommendationIds")].isNull() && m_recommendation_ids_isValid;

    m_recommendation_types_isValid = ::OpenAPI::fromJsonValue(m_recommendation_types, json[QString("recommendationTypes")]);
    m_recommendation_types_isSet = !json[QString("recommendationTypes")].isNull() && m_recommendation_types_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRecommendationTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRecommendationTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_arn_isSet) {
        obj.insert(QString("assessmentArn"), ::OpenAPI::toJsonValue(m_assessment_arn));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recommendation_ids.isSet()) {
        obj.insert(QString("recommendationIds"), ::OpenAPI::toJsonValue(m_recommendation_ids));
    }
    if (m_recommendation_types.isSet()) {
        obj.insert(QString("recommendationTypes"), ::OpenAPI::toJsonValue(m_recommendation_types));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRecommendationTemplateRequest::getAssessmentArn() const {
    return m_assessment_arn;
}
void OAICreateRecommendationTemplateRequest::setAssessmentArn(const QString &assessment_arn) {
    m_assessment_arn = assessment_arn;
    m_assessment_arn_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_assessment_arn_Set() const{
    return m_assessment_arn_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_assessment_arn_Valid() const{
    return m_assessment_arn_isValid;
}

QString OAICreateRecommendationTemplateRequest::getBucketName() const {
    return m_bucket_name;
}
void OAICreateRecommendationTemplateRequest::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAICreateRecommendationTemplateRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateRecommendationTemplateRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAITemplateFormat OAICreateRecommendationTemplateRequest::getFormat() const {
    return m_format;
}
void OAICreateRecommendationTemplateRequest::setFormat(const OAITemplateFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_format_Valid() const{
    return m_format_isValid;
}

QString OAICreateRecommendationTemplateRequest::getName() const {
    return m_name;
}
void OAICreateRecommendationTemplateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateRecommendationTemplateRequest::getRecommendationIds() const {
    return m_recommendation_ids;
}
void OAICreateRecommendationTemplateRequest::setRecommendationIds(const QList &recommendation_ids) {
    m_recommendation_ids = recommendation_ids;
    m_recommendation_ids_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_recommendation_ids_Set() const{
    return m_recommendation_ids_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_recommendation_ids_Valid() const{
    return m_recommendation_ids_isValid;
}

QList OAICreateRecommendationTemplateRequest::getRecommendationTypes() const {
    return m_recommendation_types;
}
void OAICreateRecommendationTemplateRequest::setRecommendationTypes(const QList &recommendation_types) {
    m_recommendation_types = recommendation_types;
    m_recommendation_types_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_recommendation_types_Set() const{
    return m_recommendation_types_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_recommendation_types_Valid() const{
    return m_recommendation_types_isValid;
}

QMap OAICreateRecommendationTemplateRequest::getTags() const {
    return m_tags;
}
void OAICreateRecommendationTemplateRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRecommendationTemplateRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRecommendationTemplateRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRecommendationTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRecommendationTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_arn_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
