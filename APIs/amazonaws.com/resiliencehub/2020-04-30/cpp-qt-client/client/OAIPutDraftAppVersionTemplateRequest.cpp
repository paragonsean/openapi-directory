/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutDraftAppVersionTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutDraftAppVersionTemplateRequest::OAIPutDraftAppVersionTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutDraftAppVersionTemplateRequest::OAIPutDraftAppVersionTemplateRequest() {
    this->initializeModel();
}

OAIPutDraftAppVersionTemplateRequest::~OAIPutDraftAppVersionTemplateRequest() {}

void OAIPutDraftAppVersionTemplateRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_template_body_isSet = false;
    m_app_template_body_isValid = false;
}

void OAIPutDraftAppVersionTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutDraftAppVersionTemplateRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_template_body_isValid = ::OpenAPI::fromJsonValue(m_app_template_body, json[QString("appTemplateBody")]);
    m_app_template_body_isSet = !json[QString("appTemplateBody")].isNull() && m_app_template_body_isValid;
}

QString OAIPutDraftAppVersionTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutDraftAppVersionTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_template_body_isSet) {
        obj.insert(QString("appTemplateBody"), ::OpenAPI::toJsonValue(m_app_template_body));
    }
    return obj;
}

QString OAIPutDraftAppVersionTemplateRequest::getAppArn() const {
    return m_app_arn;
}
void OAIPutDraftAppVersionTemplateRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIPutDraftAppVersionTemplateRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIPutDraftAppVersionTemplateRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIPutDraftAppVersionTemplateRequest::getAppTemplateBody() const {
    return m_app_template_body;
}
void OAIPutDraftAppVersionTemplateRequest::setAppTemplateBody(const QString &app_template_body) {
    m_app_template_body = app_template_body;
    m_app_template_body_isSet = true;
}

bool OAIPutDraftAppVersionTemplateRequest::is_app_template_body_Set() const{
    return m_app_template_body_isSet;
}

bool OAIPutDraftAppVersionTemplateRequest::is_app_template_body_Valid() const{
    return m_app_template_body_isValid;
}

bool OAIPutDraftAppVersionTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutDraftAppVersionTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_template_body_isValid && true;
}

} // namespace OpenAPI
