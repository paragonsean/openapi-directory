/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResiliencyPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResiliencyPolicy_request::OAICreateResiliencyPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResiliencyPolicy_request::OAICreateResiliencyPolicy_request() {
    this->initializeModel();
}

OAICreateResiliencyPolicy_request::~OAICreateResiliencyPolicy_request() {}

void OAICreateResiliencyPolicy_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_data_location_constraint_isSet = false;
    m_data_location_constraint_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_policy_description_isSet = false;
    m_policy_description_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAICreateResiliencyPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResiliencyPolicy_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_data_location_constraint_isValid = ::OpenAPI::fromJsonValue(m_data_location_constraint, json[QString("dataLocationConstraint")]);
    m_data_location_constraint_isSet = !json[QString("dataLocationConstraint")].isNull() && m_data_location_constraint_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_policy_description_isValid = ::OpenAPI::fromJsonValue(m_policy_description, json[QString("policyDescription")]);
    m_policy_description_isSet = !json[QString("policyDescription")].isNull() && m_policy_description_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAICreateResiliencyPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResiliencyPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_data_location_constraint_isSet) {
        obj.insert(QString("dataLocationConstraint"), ::OpenAPI::toJsonValue(m_data_location_constraint));
    }
    if (m_policy.size() > 0) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_policy_description_isSet) {
        obj.insert(QString("policyDescription"), ::OpenAPI::toJsonValue(m_policy_description));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAICreateResiliencyPolicy_request::getClientToken() const {
    return m_client_token;
}
void OAICreateResiliencyPolicy_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateResiliencyPolicy_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateResiliencyPolicy_request::getDataLocationConstraint() const {
    return m_data_location_constraint;
}
void OAICreateResiliencyPolicy_request::setDataLocationConstraint(const QString &data_location_constraint) {
    m_data_location_constraint = data_location_constraint;
    m_data_location_constraint_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_data_location_constraint_Set() const{
    return m_data_location_constraint_isSet;
}

bool OAICreateResiliencyPolicy_request::is_data_location_constraint_Valid() const{
    return m_data_location_constraint_isValid;
}

QMap<QString, OAIFailurePolicy> OAICreateResiliencyPolicy_request::getPolicy() const {
    return m_policy;
}
void OAICreateResiliencyPolicy_request::setPolicy(const QMap<QString, OAIFailurePolicy> &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAICreateResiliencyPolicy_request::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAICreateResiliencyPolicy_request::getPolicyDescription() const {
    return m_policy_description;
}
void OAICreateResiliencyPolicy_request::setPolicyDescription(const QString &policy_description) {
    m_policy_description = policy_description;
    m_policy_description_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_policy_description_Set() const{
    return m_policy_description_isSet;
}

bool OAICreateResiliencyPolicy_request::is_policy_description_Valid() const{
    return m_policy_description_isValid;
}

QString OAICreateResiliencyPolicy_request::getPolicyName() const {
    return m_policy_name;
}
void OAICreateResiliencyPolicy_request::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAICreateResiliencyPolicy_request::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

QMap<QString, QString> OAICreateResiliencyPolicy_request::getTags() const {
    return m_tags;
}
void OAICreateResiliencyPolicy_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateResiliencyPolicy_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateResiliencyPolicy_request::getTier() const {
    return m_tier;
}
void OAICreateResiliencyPolicy_request::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICreateResiliencyPolicy_request::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICreateResiliencyPolicy_request::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAICreateResiliencyPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_location_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResiliencyPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && m_policy_name_isValid && m_tier_isValid && true;
}

} // namespace OpenAPI
