/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddDraftAppVersionResourceMappingsResponse.h"
#include "OAIAddDraftAppVersionResourceMappings_request.h"
#include "OAIAssessmentStatus.h"
#include "OAIBatchUpdateRecommendationStatusResponse.h"
#include "OAIBatchUpdateRecommendationStatus_request.h"
#include "OAICreateAppResponse.h"
#include "OAICreateAppVersionAppComponentResponse.h"
#include "OAICreateAppVersionAppComponent_request.h"
#include "OAICreateAppVersionResourceResponse.h"
#include "OAICreateAppVersionResource_request.h"
#include "OAICreateApp_request.h"
#include "OAICreateRecommendationTemplateResponse.h"
#include "OAICreateRecommendationTemplate_request.h"
#include "OAICreateResiliencyPolicyResponse.h"
#include "OAICreateResiliencyPolicy_request.h"
#include "OAIDeleteAppAssessmentResponse.h"
#include "OAIDeleteAppAssessment_request.h"
#include "OAIDeleteAppInputSourceResponse.h"
#include "OAIDeleteAppInputSource_request.h"
#include "OAIDeleteAppResponse.h"
#include "OAIDeleteAppVersionAppComponentResponse.h"
#include "OAIDeleteAppVersionAppComponent_request.h"
#include "OAIDeleteAppVersionResourceResponse.h"
#include "OAIDeleteAppVersionResource_request.h"
#include "OAIDeleteApp_request.h"
#include "OAIDeleteRecommendationTemplateResponse.h"
#include "OAIDeleteRecommendationTemplate_request.h"
#include "OAIDeleteResiliencyPolicyResponse.h"
#include "OAIDeleteResiliencyPolicy_request.h"
#include "OAIDescribeAppAssessmentResponse.h"
#include "OAIDescribeAppAssessment_request.h"
#include "OAIDescribeAppResponse.h"
#include "OAIDescribeAppVersionAppComponentResponse.h"
#include "OAIDescribeAppVersionAppComponent_request.h"
#include "OAIDescribeAppVersionResourceResponse.h"
#include "OAIDescribeAppVersionResource_request.h"
#include "OAIDescribeAppVersionResourcesResolutionStatusResponse.h"
#include "OAIDescribeAppVersionResourcesResolutionStatus_request.h"
#include "OAIDescribeAppVersionResponse.h"
#include "OAIDescribeAppVersionTemplateResponse.h"
#include "OAIDescribeAppVersionTemplate_request.h"
#include "OAIDescribeAppVersion_request.h"
#include "OAIDescribeApp_request.h"
#include "OAIDescribeDraftAppVersionResourcesImportStatusResponse.h"
#include "OAIDescribeResiliencyPolicyResponse.h"
#include "OAIDescribeResiliencyPolicy_request.h"
#include "OAIImportResourcesToDraftAppVersionResponse.h"
#include "OAIImportResourcesToDraftAppVersion_request.h"
#include "OAIListAlarmRecommendationsResponse.h"
#include "OAIListAlarmRecommendations_request.h"
#include "OAIListAppAssessmentComplianceDriftsResponse.h"
#include "OAIListAppAssessmentComplianceDrifts_request.h"
#include "OAIListAppAssessmentsResponse.h"
#include "OAIListAppComponentCompliancesResponse.h"
#include "OAIListAppComponentRecommendationsResponse.h"
#include "OAIListAppInputSourcesResponse.h"
#include "OAIListAppInputSources_request.h"
#include "OAIListAppVersionAppComponentsResponse.h"
#include "OAIListAppVersionAppComponents_request.h"
#include "OAIListAppVersionResourceMappingsResponse.h"
#include "OAIListAppVersionResourceMappings_request.h"
#include "OAIListAppVersionResourcesResponse.h"
#include "OAIListAppVersionResources_request.h"
#include "OAIListAppVersionsResponse.h"
#include "OAIListAppVersions_request.h"
#include "OAIListAppsResponse.h"
#include "OAIListRecommendationTemplatesResponse.h"
#include "OAIListResiliencyPoliciesResponse.h"
#include "OAIListSopRecommendationsResponse.h"
#include "OAIListSuggestedResiliencyPoliciesResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIListTestRecommendationsResponse.h"
#include "OAIListUnsupportedAppVersionResourcesResponse.h"
#include "OAIObject.h"
#include "OAIPublishAppVersionResponse.h"
#include "OAIPublishAppVersion_request.h"
#include "OAIPutDraftAppVersionTemplateResponse.h"
#include "OAIPutDraftAppVersionTemplate_request.h"
#include "OAIRecommendationTemplateStatus.h"
#include "OAIRemoveDraftAppVersionResourceMappingsResponse.h"
#include "OAIRemoveDraftAppVersionResourceMappings_request.h"
#include "OAIResolveAppVersionResourcesResponse.h"
#include "OAIStartAppAssessmentResponse.h"
#include "OAIStartAppAssessment_request.h"
#include "OAITagResource_request.h"
#include "OAIUpdateAppResponse.h"
#include "OAIUpdateAppVersionAppComponentResponse.h"
#include "OAIUpdateAppVersionAppComponent_request.h"
#include "OAIUpdateAppVersionResourceResponse.h"
#include "OAIUpdateAppVersionResource_request.h"
#include "OAIUpdateAppVersionResponse.h"
#include "OAIUpdateAppVersion_request.h"
#include "OAIUpdateApp_request.h"
#include "OAIUpdateResiliencyPolicyResponse.h"
#include "OAIUpdateResiliencyPolicy_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_draft_app_version_resource_mappings_request OAIAddDraftAppVersionResourceMappings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addDraftAppVersionResourceMappings(const OAIAddDraftAppVersionResourceMappings_request &oai_add_draft_app_version_resource_mappings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_batch_update_recommendation_status_request OAIBatchUpdateRecommendationStatus_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchUpdateRecommendationStatus(const OAIBatchUpdateRecommendationStatus_request &oai_batch_update_recommendation_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_app_request OAICreateApp_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createApp(const OAICreateApp_request &oai_create_app_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_app_version_app_component_request OAICreateAppVersionAppComponent_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAppVersionAppComponent(const OAICreateAppVersionAppComponent_request &oai_create_app_version_app_component_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_app_version_resource_request OAICreateAppVersionResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAppVersionResource(const OAICreateAppVersionResource_request &oai_create_app_version_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_recommendation_template_request OAICreateRecommendationTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRecommendationTemplate(const OAICreateRecommendationTemplate_request &oai_create_recommendation_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_resiliency_policy_request OAICreateResiliencyPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createResiliencyPolicy(const OAICreateResiliencyPolicy_request &oai_create_resiliency_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_app_request OAIDeleteApp_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteApp(const OAIDeleteApp_request &oai_delete_app_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_app_assessment_request OAIDeleteAppAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAppAssessment(const OAIDeleteAppAssessment_request &oai_delete_app_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_app_input_source_request OAIDeleteAppInputSource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAppInputSource(const OAIDeleteAppInputSource_request &oai_delete_app_input_source_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_app_version_app_component_request OAIDeleteAppVersionAppComponent_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAppVersionAppComponent(const OAIDeleteAppVersionAppComponent_request &oai_delete_app_version_app_component_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_app_version_resource_request OAIDeleteAppVersionResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAppVersionResource(const OAIDeleteAppVersionResource_request &oai_delete_app_version_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_recommendation_template_request OAIDeleteRecommendationTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRecommendationTemplate(const OAIDeleteRecommendationTemplate_request &oai_delete_recommendation_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_resiliency_policy_request OAIDeleteResiliencyPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteResiliencyPolicy(const OAIDeleteResiliencyPolicy_request &oai_delete_resiliency_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_request OAIDescribeApp_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeApp(const OAIDescribeApp_request &oai_describe_app_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_assessment_request OAIDescribeAppAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAppAssessment(const OAIDescribeAppAssessment_request &oai_describe_app_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_version_request OAIDescribeAppVersion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAppVersion(const OAIDescribeAppVersion_request &oai_describe_app_version_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_version_app_component_request OAIDescribeAppVersionAppComponent_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAppVersionAppComponent(const OAIDescribeAppVersionAppComponent_request &oai_describe_app_version_app_component_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_version_resource_request OAIDescribeAppVersionResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAppVersionResource(const OAIDescribeAppVersionResource_request &oai_describe_app_version_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_version_resources_resolution_status_request OAIDescribeAppVersionResourcesResolutionStatus_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAppVersionResourcesResolutionStatus(const OAIDescribeAppVersionResourcesResolutionStatus_request &oai_describe_app_version_resources_resolution_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_version_template_request OAIDescribeAppVersionTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAppVersionTemplate(const OAIDescribeAppVersionTemplate_request &oai_describe_app_version_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_request OAIDescribeApp_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDraftAppVersionResourcesImportStatus(const OAIDescribeApp_request &oai_describe_app_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_resiliency_policy_request OAIDescribeResiliencyPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeResiliencyPolicy(const OAIDescribeResiliencyPolicy_request &oai_describe_resiliency_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_import_resources_to_draft_app_version_request OAIImportResourcesToDraftAppVersion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void importResourcesToDraftAppVersion(const OAIImportResourcesToDraftAppVersion_request &oai_import_resources_to_draft_app_version_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_alarm_recommendations_request OAIListAlarmRecommendations_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAlarmRecommendations(const OAIListAlarmRecommendations_request &oai_list_alarm_recommendations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_assessment_compliance_drifts_request OAIListAppAssessmentComplianceDrifts_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppAssessmentComplianceDrifts(const OAIListAppAssessmentComplianceDrifts_request &oai_list_app_assessment_compliance_drifts_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  app_arn QString [optional]
    * @param[in]  assessment_name QString [optional]
    * @param[in]  assessment_status QList<OAIAssessmentStatus> [optional]
    * @param[in]  compliance_status QString [optional]
    * @param[in]  invoker QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  reverse_order bool [optional]
    */
    virtual void listAppAssessments(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assessment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAssessmentStatus>> &assessment_status = ::OpenAPI::OptionalParam<QList<OAIAssessmentStatus>>(), const ::OpenAPI::OptionalParam<QString> &compliance_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &invoker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reverse_order = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_list_alarm_recommendations_request OAIListAlarmRecommendations_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppComponentCompliances(const OAIListAlarmRecommendations_request &oai_list_alarm_recommendations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_alarm_recommendations_request OAIListAlarmRecommendations_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppComponentRecommendations(const OAIListAlarmRecommendations_request &oai_list_alarm_recommendations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_input_sources_request OAIListAppInputSources_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppInputSources(const OAIListAppInputSources_request &oai_list_app_input_sources_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_version_app_components_request OAIListAppVersionAppComponents_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppVersionAppComponents(const OAIListAppVersionAppComponents_request &oai_list_app_version_app_components_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_version_resource_mappings_request OAIListAppVersionResourceMappings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppVersionResourceMappings(const OAIListAppVersionResourceMappings_request &oai_list_app_version_resource_mappings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_version_resources_request OAIListAppVersionResources_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppVersionResources(const OAIListAppVersionResources_request &oai_list_app_version_resources_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_versions_request OAIListAppVersions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAppVersions(const OAIListAppVersions_request &oai_list_app_versions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  app_arn QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listApps(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  recommendation_template_arn QString [optional]
    * @param[in]  reverse_order bool [optional]
    * @param[in]  status QList<OAIRecommendationTemplateStatus> [optional]
    */
    virtual void listRecommendationTemplates(const QString &assessment_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recommendation_template_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reverse_order = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIRecommendationTemplateStatus>> &status = ::OpenAPI::OptionalParam<QList<OAIRecommendationTemplateStatus>>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  policy_name QString [optional]
    */
    virtual void listResiliencyPolicies(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &policy_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_alarm_recommendations_request OAIListAlarmRecommendations_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listSopRecommendations(const OAIListAlarmRecommendations_request &oai_list_alarm_recommendations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listSuggestedResiliencyPolicies(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_alarm_recommendations_request OAIListAlarmRecommendations_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listTestRecommendations(const OAIListAlarmRecommendations_request &oai_list_alarm_recommendations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_list_app_version_resources_request OAIListAppVersionResources_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listUnsupportedAppVersionResources(const OAIListAppVersionResources_request &oai_list_app_version_resources_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_publish_app_version_request OAIPublishAppVersion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void publishAppVersion(const OAIPublishAppVersion_request &oai_publish_app_version_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_put_draft_app_version_template_request OAIPutDraftAppVersionTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putDraftAppVersionTemplate(const OAIPutDraftAppVersionTemplate_request &oai_put_draft_app_version_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_remove_draft_app_version_resource_mappings_request OAIRemoveDraftAppVersionResourceMappings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void removeDraftAppVersionResourceMappings(const OAIRemoveDraftAppVersionResourceMappings_request &oai_remove_draft_app_version_resource_mappings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_app_version_template_request OAIDescribeAppVersionTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void resolveAppVersionResources(const OAIDescribeAppVersionTemplate_request &oai_describe_app_version_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_start_app_assessment_request OAIStartAppAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startAppAssessment(const OAIStartAppAssessment_request &oai_start_app_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &resource_arn, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &resource_arn, const QList<QString> &tag_keys, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_app_request OAIUpdateApp_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateApp(const OAIUpdateApp_request &oai_update_app_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_app_version_request OAIUpdateAppVersion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAppVersion(const OAIUpdateAppVersion_request &oai_update_app_version_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_app_version_app_component_request OAIUpdateAppVersionAppComponent_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAppVersionAppComponent(const OAIUpdateAppVersionAppComponent_request &oai_update_app_version_app_component_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_app_version_resource_request OAIUpdateAppVersionResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAppVersionResource(const OAIUpdateAppVersionResource_request &oai_update_app_version_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_resiliency_policy_request OAIUpdateResiliencyPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateResiliencyPolicy(const OAIUpdateResiliencyPolicy_request &oai_update_resiliency_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addDraftAppVersionResourceMappingsCallback(OAIHttpRequestWorker *worker);
    void batchUpdateRecommendationStatusCallback(OAIHttpRequestWorker *worker);
    void createAppCallback(OAIHttpRequestWorker *worker);
    void createAppVersionAppComponentCallback(OAIHttpRequestWorker *worker);
    void createAppVersionResourceCallback(OAIHttpRequestWorker *worker);
    void createRecommendationTemplateCallback(OAIHttpRequestWorker *worker);
    void createResiliencyPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteAppCallback(OAIHttpRequestWorker *worker);
    void deleteAppAssessmentCallback(OAIHttpRequestWorker *worker);
    void deleteAppInputSourceCallback(OAIHttpRequestWorker *worker);
    void deleteAppVersionAppComponentCallback(OAIHttpRequestWorker *worker);
    void deleteAppVersionResourceCallback(OAIHttpRequestWorker *worker);
    void deleteRecommendationTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteResiliencyPolicyCallback(OAIHttpRequestWorker *worker);
    void describeAppCallback(OAIHttpRequestWorker *worker);
    void describeAppAssessmentCallback(OAIHttpRequestWorker *worker);
    void describeAppVersionCallback(OAIHttpRequestWorker *worker);
    void describeAppVersionAppComponentCallback(OAIHttpRequestWorker *worker);
    void describeAppVersionResourceCallback(OAIHttpRequestWorker *worker);
    void describeAppVersionResourcesResolutionStatusCallback(OAIHttpRequestWorker *worker);
    void describeAppVersionTemplateCallback(OAIHttpRequestWorker *worker);
    void describeDraftAppVersionResourcesImportStatusCallback(OAIHttpRequestWorker *worker);
    void describeResiliencyPolicyCallback(OAIHttpRequestWorker *worker);
    void importResourcesToDraftAppVersionCallback(OAIHttpRequestWorker *worker);
    void listAlarmRecommendationsCallback(OAIHttpRequestWorker *worker);
    void listAppAssessmentComplianceDriftsCallback(OAIHttpRequestWorker *worker);
    void listAppAssessmentsCallback(OAIHttpRequestWorker *worker);
    void listAppComponentCompliancesCallback(OAIHttpRequestWorker *worker);
    void listAppComponentRecommendationsCallback(OAIHttpRequestWorker *worker);
    void listAppInputSourcesCallback(OAIHttpRequestWorker *worker);
    void listAppVersionAppComponentsCallback(OAIHttpRequestWorker *worker);
    void listAppVersionResourceMappingsCallback(OAIHttpRequestWorker *worker);
    void listAppVersionResourcesCallback(OAIHttpRequestWorker *worker);
    void listAppVersionsCallback(OAIHttpRequestWorker *worker);
    void listAppsCallback(OAIHttpRequestWorker *worker);
    void listRecommendationTemplatesCallback(OAIHttpRequestWorker *worker);
    void listResiliencyPoliciesCallback(OAIHttpRequestWorker *worker);
    void listSopRecommendationsCallback(OAIHttpRequestWorker *worker);
    void listSuggestedResiliencyPoliciesCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listTestRecommendationsCallback(OAIHttpRequestWorker *worker);
    void listUnsupportedAppVersionResourcesCallback(OAIHttpRequestWorker *worker);
    void publishAppVersionCallback(OAIHttpRequestWorker *worker);
    void putDraftAppVersionTemplateCallback(OAIHttpRequestWorker *worker);
    void removeDraftAppVersionResourceMappingsCallback(OAIHttpRequestWorker *worker);
    void resolveAppVersionResourcesCallback(OAIHttpRequestWorker *worker);
    void startAppAssessmentCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateAppCallback(OAIHttpRequestWorker *worker);
    void updateAppVersionCallback(OAIHttpRequestWorker *worker);
    void updateAppVersionAppComponentCallback(OAIHttpRequestWorker *worker);
    void updateAppVersionResourceCallback(OAIHttpRequestWorker *worker);
    void updateResiliencyPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addDraftAppVersionResourceMappingsSignal(OAIAddDraftAppVersionResourceMappingsResponse summary);
    void batchUpdateRecommendationStatusSignal(OAIBatchUpdateRecommendationStatusResponse summary);
    void createAppSignal(OAICreateAppResponse summary);
    void createAppVersionAppComponentSignal(OAICreateAppVersionAppComponentResponse summary);
    void createAppVersionResourceSignal(OAICreateAppVersionResourceResponse summary);
    void createRecommendationTemplateSignal(OAICreateRecommendationTemplateResponse summary);
    void createResiliencyPolicySignal(OAICreateResiliencyPolicyResponse summary);
    void deleteAppSignal(OAIDeleteAppResponse summary);
    void deleteAppAssessmentSignal(OAIDeleteAppAssessmentResponse summary);
    void deleteAppInputSourceSignal(OAIDeleteAppInputSourceResponse summary);
    void deleteAppVersionAppComponentSignal(OAIDeleteAppVersionAppComponentResponse summary);
    void deleteAppVersionResourceSignal(OAIDeleteAppVersionResourceResponse summary);
    void deleteRecommendationTemplateSignal(OAIDeleteRecommendationTemplateResponse summary);
    void deleteResiliencyPolicySignal(OAIDeleteResiliencyPolicyResponse summary);
    void describeAppSignal(OAIDescribeAppResponse summary);
    void describeAppAssessmentSignal(OAIDescribeAppAssessmentResponse summary);
    void describeAppVersionSignal(OAIDescribeAppVersionResponse summary);
    void describeAppVersionAppComponentSignal(OAIDescribeAppVersionAppComponentResponse summary);
    void describeAppVersionResourceSignal(OAIDescribeAppVersionResourceResponse summary);
    void describeAppVersionResourcesResolutionStatusSignal(OAIDescribeAppVersionResourcesResolutionStatusResponse summary);
    void describeAppVersionTemplateSignal(OAIDescribeAppVersionTemplateResponse summary);
    void describeDraftAppVersionResourcesImportStatusSignal(OAIDescribeDraftAppVersionResourcesImportStatusResponse summary);
    void describeResiliencyPolicySignal(OAIDescribeResiliencyPolicyResponse summary);
    void importResourcesToDraftAppVersionSignal(OAIImportResourcesToDraftAppVersionResponse summary);
    void listAlarmRecommendationsSignal(OAIListAlarmRecommendationsResponse summary);
    void listAppAssessmentComplianceDriftsSignal(OAIListAppAssessmentComplianceDriftsResponse summary);
    void listAppAssessmentsSignal(OAIListAppAssessmentsResponse summary);
    void listAppComponentCompliancesSignal(OAIListAppComponentCompliancesResponse summary);
    void listAppComponentRecommendationsSignal(OAIListAppComponentRecommendationsResponse summary);
    void listAppInputSourcesSignal(OAIListAppInputSourcesResponse summary);
    void listAppVersionAppComponentsSignal(OAIListAppVersionAppComponentsResponse summary);
    void listAppVersionResourceMappingsSignal(OAIListAppVersionResourceMappingsResponse summary);
    void listAppVersionResourcesSignal(OAIListAppVersionResourcesResponse summary);
    void listAppVersionsSignal(OAIListAppVersionsResponse summary);
    void listAppsSignal(OAIListAppsResponse summary);
    void listRecommendationTemplatesSignal(OAIListRecommendationTemplatesResponse summary);
    void listResiliencyPoliciesSignal(OAIListResiliencyPoliciesResponse summary);
    void listSopRecommendationsSignal(OAIListSopRecommendationsResponse summary);
    void listSuggestedResiliencyPoliciesSignal(OAIListSuggestedResiliencyPoliciesResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void listTestRecommendationsSignal(OAIListTestRecommendationsResponse summary);
    void listUnsupportedAppVersionResourcesSignal(OAIListUnsupportedAppVersionResourcesResponse summary);
    void publishAppVersionSignal(OAIPublishAppVersionResponse summary);
    void putDraftAppVersionTemplateSignal(OAIPutDraftAppVersionTemplateResponse summary);
    void removeDraftAppVersionResourceMappingsSignal(OAIRemoveDraftAppVersionResourceMappingsResponse summary);
    void resolveAppVersionResourcesSignal(OAIResolveAppVersionResourcesResponse summary);
    void startAppAssessmentSignal(OAIStartAppAssessmentResponse summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateAppSignal(OAIUpdateAppResponse summary);
    void updateAppVersionSignal(OAIUpdateAppVersionResponse summary);
    void updateAppVersionAppComponentSignal(OAIUpdateAppVersionAppComponentResponse summary);
    void updateAppVersionResourceSignal(OAIUpdateAppVersionResourceResponse summary);
    void updateResiliencyPolicySignal(OAIUpdateResiliencyPolicyResponse summary);


    void addDraftAppVersionResourceMappingsSignalFull(OAIHttpRequestWorker *worker, OAIAddDraftAppVersionResourceMappingsResponse summary);
    void batchUpdateRecommendationStatusSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateRecommendationStatusResponse summary);
    void createAppSignalFull(OAIHttpRequestWorker *worker, OAICreateAppResponse summary);
    void createAppVersionAppComponentSignalFull(OAIHttpRequestWorker *worker, OAICreateAppVersionAppComponentResponse summary);
    void createAppVersionResourceSignalFull(OAIHttpRequestWorker *worker, OAICreateAppVersionResourceResponse summary);
    void createRecommendationTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreateRecommendationTemplateResponse summary);
    void createResiliencyPolicySignalFull(OAIHttpRequestWorker *worker, OAICreateResiliencyPolicyResponse summary);
    void deleteAppSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAppResponse summary);
    void deleteAppAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAppAssessmentResponse summary);
    void deleteAppInputSourceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAppInputSourceResponse summary);
    void deleteAppVersionAppComponentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAppVersionAppComponentResponse summary);
    void deleteAppVersionResourceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAppVersionResourceResponse summary);
    void deleteRecommendationTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRecommendationTemplateResponse summary);
    void deleteResiliencyPolicySignalFull(OAIHttpRequestWorker *worker, OAIDeleteResiliencyPolicyResponse summary);
    void describeAppSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppResponse summary);
    void describeAppAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppAssessmentResponse summary);
    void describeAppVersionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppVersionResponse summary);
    void describeAppVersionAppComponentSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppVersionAppComponentResponse summary);
    void describeAppVersionResourceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppVersionResourceResponse summary);
    void describeAppVersionResourcesResolutionStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppVersionResourcesResolutionStatusResponse summary);
    void describeAppVersionTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppVersionTemplateResponse summary);
    void describeDraftAppVersionResourcesImportStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDraftAppVersionResourcesImportStatusResponse summary);
    void describeResiliencyPolicySignalFull(OAIHttpRequestWorker *worker, OAIDescribeResiliencyPolicyResponse summary);
    void importResourcesToDraftAppVersionSignalFull(OAIHttpRequestWorker *worker, OAIImportResourcesToDraftAppVersionResponse summary);
    void listAlarmRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIListAlarmRecommendationsResponse summary);
    void listAppAssessmentComplianceDriftsSignalFull(OAIHttpRequestWorker *worker, OAIListAppAssessmentComplianceDriftsResponse summary);
    void listAppAssessmentsSignalFull(OAIHttpRequestWorker *worker, OAIListAppAssessmentsResponse summary);
    void listAppComponentCompliancesSignalFull(OAIHttpRequestWorker *worker, OAIListAppComponentCompliancesResponse summary);
    void listAppComponentRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIListAppComponentRecommendationsResponse summary);
    void listAppInputSourcesSignalFull(OAIHttpRequestWorker *worker, OAIListAppInputSourcesResponse summary);
    void listAppVersionAppComponentsSignalFull(OAIHttpRequestWorker *worker, OAIListAppVersionAppComponentsResponse summary);
    void listAppVersionResourceMappingsSignalFull(OAIHttpRequestWorker *worker, OAIListAppVersionResourceMappingsResponse summary);
    void listAppVersionResourcesSignalFull(OAIHttpRequestWorker *worker, OAIListAppVersionResourcesResponse summary);
    void listAppVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListAppVersionsResponse summary);
    void listAppsSignalFull(OAIHttpRequestWorker *worker, OAIListAppsResponse summary);
    void listRecommendationTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListRecommendationTemplatesResponse summary);
    void listResiliencyPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListResiliencyPoliciesResponse summary);
    void listSopRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIListSopRecommendationsResponse summary);
    void listSuggestedResiliencyPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListSuggestedResiliencyPoliciesResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void listTestRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIListTestRecommendationsResponse summary);
    void listUnsupportedAppVersionResourcesSignalFull(OAIHttpRequestWorker *worker, OAIListUnsupportedAppVersionResourcesResponse summary);
    void publishAppVersionSignalFull(OAIHttpRequestWorker *worker, OAIPublishAppVersionResponse summary);
    void putDraftAppVersionTemplateSignalFull(OAIHttpRequestWorker *worker, OAIPutDraftAppVersionTemplateResponse summary);
    void removeDraftAppVersionResourceMappingsSignalFull(OAIHttpRequestWorker *worker, OAIRemoveDraftAppVersionResourceMappingsResponse summary);
    void resolveAppVersionResourcesSignalFull(OAIHttpRequestWorker *worker, OAIResolveAppVersionResourcesResponse summary);
    void startAppAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIStartAppAssessmentResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateAppSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAppResponse summary);
    void updateAppVersionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAppVersionResponse summary);
    void updateAppVersionAppComponentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAppVersionAppComponentResponse summary);
    void updateAppVersionResourceSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAppVersionResourceResponse summary);
    void updateResiliencyPolicySignalFull(OAIHttpRequestWorker *worker, OAIUpdateResiliencyPolicyResponse summary);

    Q_DECL_DEPRECATED_X("Use addDraftAppVersionResourceMappingsSignalError() instead")
    void addDraftAppVersionResourceMappingsSignalE(OAIAddDraftAppVersionResourceMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDraftAppVersionResourceMappingsSignalError(OAIAddDraftAppVersionResourceMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpdateRecommendationStatusSignalError() instead")
    void batchUpdateRecommendationStatusSignalE(OAIBatchUpdateRecommendationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpdateRecommendationStatusSignalError(OAIBatchUpdateRecommendationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppSignalError() instead")
    void createAppSignalE(OAICreateAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppSignalError(OAICreateAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppVersionAppComponentSignalError() instead")
    void createAppVersionAppComponentSignalE(OAICreateAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppVersionAppComponentSignalError(OAICreateAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppVersionResourceSignalError() instead")
    void createAppVersionResourceSignalE(OAICreateAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppVersionResourceSignalError(OAICreateAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRecommendationTemplateSignalError() instead")
    void createRecommendationTemplateSignalE(OAICreateRecommendationTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRecommendationTemplateSignalError(OAICreateRecommendationTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResiliencyPolicySignalError() instead")
    void createResiliencyPolicySignalE(OAICreateResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createResiliencyPolicySignalError(OAICreateResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppSignalError() instead")
    void deleteAppSignalE(OAIDeleteAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppSignalError(OAIDeleteAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppAssessmentSignalError() instead")
    void deleteAppAssessmentSignalE(OAIDeleteAppAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppAssessmentSignalError(OAIDeleteAppAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInputSourceSignalError() instead")
    void deleteAppInputSourceSignalE(OAIDeleteAppInputSourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInputSourceSignalError(OAIDeleteAppInputSourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppVersionAppComponentSignalError() instead")
    void deleteAppVersionAppComponentSignalE(OAIDeleteAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppVersionAppComponentSignalError(OAIDeleteAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppVersionResourceSignalError() instead")
    void deleteAppVersionResourceSignalE(OAIDeleteAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppVersionResourceSignalError(OAIDeleteAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecommendationTemplateSignalError() instead")
    void deleteRecommendationTemplateSignalE(OAIDeleteRecommendationTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecommendationTemplateSignalError(OAIDeleteRecommendationTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResiliencyPolicySignalError() instead")
    void deleteResiliencyPolicySignalE(OAIDeleteResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResiliencyPolicySignalError(OAIDeleteResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppSignalError() instead")
    void describeAppSignalE(OAIDescribeAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppSignalError(OAIDescribeAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppAssessmentSignalError() instead")
    void describeAppAssessmentSignalE(OAIDescribeAppAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppAssessmentSignalError(OAIDescribeAppAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionSignalError() instead")
    void describeAppVersionSignalE(OAIDescribeAppVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionSignalError(OAIDescribeAppVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionAppComponentSignalError() instead")
    void describeAppVersionAppComponentSignalE(OAIDescribeAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionAppComponentSignalError(OAIDescribeAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionResourceSignalError() instead")
    void describeAppVersionResourceSignalE(OAIDescribeAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionResourceSignalError(OAIDescribeAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionResourcesResolutionStatusSignalError() instead")
    void describeAppVersionResourcesResolutionStatusSignalE(OAIDescribeAppVersionResourcesResolutionStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionResourcesResolutionStatusSignalError(OAIDescribeAppVersionResourcesResolutionStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionTemplateSignalError() instead")
    void describeAppVersionTemplateSignalE(OAIDescribeAppVersionTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionTemplateSignalError(OAIDescribeAppVersionTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDraftAppVersionResourcesImportStatusSignalError() instead")
    void describeDraftAppVersionResourcesImportStatusSignalE(OAIDescribeDraftAppVersionResourcesImportStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDraftAppVersionResourcesImportStatusSignalError(OAIDescribeDraftAppVersionResourcesImportStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeResiliencyPolicySignalError() instead")
    void describeResiliencyPolicySignalE(OAIDescribeResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeResiliencyPolicySignalError(OAIDescribeResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importResourcesToDraftAppVersionSignalError() instead")
    void importResourcesToDraftAppVersionSignalE(OAIImportResourcesToDraftAppVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importResourcesToDraftAppVersionSignalError(OAIImportResourcesToDraftAppVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAlarmRecommendationsSignalError() instead")
    void listAlarmRecommendationsSignalE(OAIListAlarmRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAlarmRecommendationsSignalError(OAIListAlarmRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppAssessmentComplianceDriftsSignalError() instead")
    void listAppAssessmentComplianceDriftsSignalE(OAIListAppAssessmentComplianceDriftsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppAssessmentComplianceDriftsSignalError(OAIListAppAssessmentComplianceDriftsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppAssessmentsSignalError() instead")
    void listAppAssessmentsSignalE(OAIListAppAssessmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppAssessmentsSignalError(OAIListAppAssessmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppComponentCompliancesSignalError() instead")
    void listAppComponentCompliancesSignalE(OAIListAppComponentCompliancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppComponentCompliancesSignalError(OAIListAppComponentCompliancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppComponentRecommendationsSignalError() instead")
    void listAppComponentRecommendationsSignalE(OAIListAppComponentRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppComponentRecommendationsSignalError(OAIListAppComponentRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInputSourcesSignalError() instead")
    void listAppInputSourcesSignalE(OAIListAppInputSourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInputSourcesSignalError(OAIListAppInputSourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionAppComponentsSignalError() instead")
    void listAppVersionAppComponentsSignalE(OAIListAppVersionAppComponentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionAppComponentsSignalError(OAIListAppVersionAppComponentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionResourceMappingsSignalError() instead")
    void listAppVersionResourceMappingsSignalE(OAIListAppVersionResourceMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionResourceMappingsSignalError(OAIListAppVersionResourceMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionResourcesSignalError() instead")
    void listAppVersionResourcesSignalE(OAIListAppVersionResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionResourcesSignalError(OAIListAppVersionResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionsSignalError() instead")
    void listAppVersionsSignalE(OAIListAppVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionsSignalError(OAIListAppVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppsSignalError() instead")
    void listAppsSignalE(OAIListAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppsSignalError(OAIListAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecommendationTemplatesSignalError() instead")
    void listRecommendationTemplatesSignalE(OAIListRecommendationTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecommendationTemplatesSignalError(OAIListRecommendationTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResiliencyPoliciesSignalError() instead")
    void listResiliencyPoliciesSignalE(OAIListResiliencyPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResiliencyPoliciesSignalError(OAIListResiliencyPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSopRecommendationsSignalError() instead")
    void listSopRecommendationsSignalE(OAIListSopRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSopRecommendationsSignalError(OAIListSopRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSuggestedResiliencyPoliciesSignalError() instead")
    void listSuggestedResiliencyPoliciesSignalE(OAIListSuggestedResiliencyPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSuggestedResiliencyPoliciesSignalError(OAIListSuggestedResiliencyPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTestRecommendationsSignalError() instead")
    void listTestRecommendationsSignalE(OAIListTestRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTestRecommendationsSignalError(OAIListTestRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUnsupportedAppVersionResourcesSignalError() instead")
    void listUnsupportedAppVersionResourcesSignalE(OAIListUnsupportedAppVersionResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUnsupportedAppVersionResourcesSignalError(OAIListUnsupportedAppVersionResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAppVersionSignalError() instead")
    void publishAppVersionSignalE(OAIPublishAppVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAppVersionSignalError(OAIPublishAppVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDraftAppVersionTemplateSignalError() instead")
    void putDraftAppVersionTemplateSignalE(OAIPutDraftAppVersionTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDraftAppVersionTemplateSignalError(OAIPutDraftAppVersionTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDraftAppVersionResourceMappingsSignalError() instead")
    void removeDraftAppVersionResourceMappingsSignalE(OAIRemoveDraftAppVersionResourceMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDraftAppVersionResourceMappingsSignalError(OAIRemoveDraftAppVersionResourceMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveAppVersionResourcesSignalError() instead")
    void resolveAppVersionResourcesSignalE(OAIResolveAppVersionResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveAppVersionResourcesSignalError(OAIResolveAppVersionResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAppAssessmentSignalError() instead")
    void startAppAssessmentSignalE(OAIStartAppAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startAppAssessmentSignalError(OAIStartAppAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppSignalError() instead")
    void updateAppSignalE(OAIUpdateAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppSignalError(OAIUpdateAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppVersionSignalError() instead")
    void updateAppVersionSignalE(OAIUpdateAppVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppVersionSignalError(OAIUpdateAppVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppVersionAppComponentSignalError() instead")
    void updateAppVersionAppComponentSignalE(OAIUpdateAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppVersionAppComponentSignalError(OAIUpdateAppVersionAppComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppVersionResourceSignalError() instead")
    void updateAppVersionResourceSignalE(OAIUpdateAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppVersionResourceSignalError(OAIUpdateAppVersionResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResiliencyPolicySignalError() instead")
    void updateResiliencyPolicySignalE(OAIUpdateResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResiliencyPolicySignalError(OAIUpdateResiliencyPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addDraftAppVersionResourceMappingsSignalErrorFull() instead")
    void addDraftAppVersionResourceMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDraftAppVersionResourceMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpdateRecommendationStatusSignalErrorFull() instead")
    void batchUpdateRecommendationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpdateRecommendationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppSignalErrorFull() instead")
    void createAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppVersionAppComponentSignalErrorFull() instead")
    void createAppVersionAppComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppVersionAppComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppVersionResourceSignalErrorFull() instead")
    void createAppVersionResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppVersionResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRecommendationTemplateSignalErrorFull() instead")
    void createRecommendationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRecommendationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResiliencyPolicySignalErrorFull() instead")
    void createResiliencyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createResiliencyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppSignalErrorFull() instead")
    void deleteAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppAssessmentSignalErrorFull() instead")
    void deleteAppAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInputSourceSignalErrorFull() instead")
    void deleteAppInputSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInputSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppVersionAppComponentSignalErrorFull() instead")
    void deleteAppVersionAppComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppVersionAppComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppVersionResourceSignalErrorFull() instead")
    void deleteAppVersionResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppVersionResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecommendationTemplateSignalErrorFull() instead")
    void deleteRecommendationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecommendationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResiliencyPolicySignalErrorFull() instead")
    void deleteResiliencyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResiliencyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppSignalErrorFull() instead")
    void describeAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppAssessmentSignalErrorFull() instead")
    void describeAppAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionSignalErrorFull() instead")
    void describeAppVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionAppComponentSignalErrorFull() instead")
    void describeAppVersionAppComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionAppComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionResourceSignalErrorFull() instead")
    void describeAppVersionResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionResourcesResolutionStatusSignalErrorFull() instead")
    void describeAppVersionResourcesResolutionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionResourcesResolutionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppVersionTemplateSignalErrorFull() instead")
    void describeAppVersionTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppVersionTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDraftAppVersionResourcesImportStatusSignalErrorFull() instead")
    void describeDraftAppVersionResourcesImportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDraftAppVersionResourcesImportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeResiliencyPolicySignalErrorFull() instead")
    void describeResiliencyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeResiliencyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importResourcesToDraftAppVersionSignalErrorFull() instead")
    void importResourcesToDraftAppVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importResourcesToDraftAppVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAlarmRecommendationsSignalErrorFull() instead")
    void listAlarmRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAlarmRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppAssessmentComplianceDriftsSignalErrorFull() instead")
    void listAppAssessmentComplianceDriftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppAssessmentComplianceDriftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppAssessmentsSignalErrorFull() instead")
    void listAppAssessmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppAssessmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppComponentCompliancesSignalErrorFull() instead")
    void listAppComponentCompliancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppComponentCompliancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppComponentRecommendationsSignalErrorFull() instead")
    void listAppComponentRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppComponentRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInputSourcesSignalErrorFull() instead")
    void listAppInputSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInputSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionAppComponentsSignalErrorFull() instead")
    void listAppVersionAppComponentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionAppComponentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionResourceMappingsSignalErrorFull() instead")
    void listAppVersionResourceMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionResourceMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionResourcesSignalErrorFull() instead")
    void listAppVersionResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppVersionsSignalErrorFull() instead")
    void listAppVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppsSignalErrorFull() instead")
    void listAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecommendationTemplatesSignalErrorFull() instead")
    void listRecommendationTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecommendationTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResiliencyPoliciesSignalErrorFull() instead")
    void listResiliencyPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResiliencyPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSopRecommendationsSignalErrorFull() instead")
    void listSopRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSopRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSuggestedResiliencyPoliciesSignalErrorFull() instead")
    void listSuggestedResiliencyPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSuggestedResiliencyPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTestRecommendationsSignalErrorFull() instead")
    void listTestRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTestRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUnsupportedAppVersionResourcesSignalErrorFull() instead")
    void listUnsupportedAppVersionResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUnsupportedAppVersionResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAppVersionSignalErrorFull() instead")
    void publishAppVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAppVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDraftAppVersionTemplateSignalErrorFull() instead")
    void putDraftAppVersionTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDraftAppVersionTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDraftAppVersionResourceMappingsSignalErrorFull() instead")
    void removeDraftAppVersionResourceMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDraftAppVersionResourceMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveAppVersionResourcesSignalErrorFull() instead")
    void resolveAppVersionResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveAppVersionResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAppAssessmentSignalErrorFull() instead")
    void startAppAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAppAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppSignalErrorFull() instead")
    void updateAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppVersionSignalErrorFull() instead")
    void updateAppVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppVersionAppComponentSignalErrorFull() instead")
    void updateAppVersionAppComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppVersionAppComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppVersionResourceSignalErrorFull() instead")
    void updateAppVersionResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppVersionResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResiliencyPolicySignalErrorFull() instead")
    void updateResiliencyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResiliencyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
