/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppVersionResourcesResolutionStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppVersionResourcesResolutionStatusRequest::OAIDescribeAppVersionResourcesResolutionStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppVersionResourcesResolutionStatusRequest::OAIDescribeAppVersionResourcesResolutionStatusRequest() {
    this->initializeModel();
}

OAIDescribeAppVersionResourcesResolutionStatusRequest::~OAIDescribeAppVersionResourcesResolutionStatusRequest() {}

void OAIDescribeAppVersionResourcesResolutionStatusRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_resolution_id_isSet = false;
    m_resolution_id_isValid = false;
}

void OAIDescribeAppVersionResourcesResolutionStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppVersionResourcesResolutionStatusRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_resolution_id_isValid = ::OpenAPI::fromJsonValue(m_resolution_id, json[QString("resolutionId")]);
    m_resolution_id_isSet = !json[QString("resolutionId")].isNull() && m_resolution_id_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppVersionResourcesResolutionStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_resolution_id_isSet) {
        obj.insert(QString("resolutionId"), ::OpenAPI::toJsonValue(m_resolution_id));
    }
    return obj;
}

QString OAIDescribeAppVersionResourcesResolutionStatusRequest::getAppArn() const {
    return m_app_arn;
}
void OAIDescribeAppVersionResourcesResolutionStatusRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusRequest::getAppVersion() const {
    return m_app_version;
}
void OAIDescribeAppVersionResourcesResolutionStatusRequest::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIDescribeAppVersionResourcesResolutionStatusRequest::getResolutionId() const {
    return m_resolution_id;
}
void OAIDescribeAppVersionResourcesResolutionStatusRequest::setResolutionId(const QString &resolution_id) {
    m_resolution_id = resolution_id;
    m_resolution_id_isSet = true;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::is_resolution_id_Set() const{
    return m_resolution_id_isSet;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::is_resolution_id_Valid() const{
    return m_resolution_id_isValid;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppVersionResourcesResolutionStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && true;
}

} // namespace OpenAPI
