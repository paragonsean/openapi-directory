/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceError.h
 *
 *  Defines application resource errors. 
 */

#ifndef OAIResourceError_H
#define OAIResourceError_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResourceError : public OAIObject {
public:
    OAIResourceError();
    OAIResourceError(QString json);
    ~OAIResourceError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLogicalResourceId() const;
    void setLogicalResourceId(const QString &logical_resource_id);
    bool is_logical_resource_id_Set() const;
    bool is_logical_resource_id_Valid() const;

    QString getPhysicalResourceId() const;
    void setPhysicalResourceId(const QString &physical_resource_id);
    bool is_physical_resource_id_Set() const;
    bool is_physical_resource_id_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_logical_resource_id;
    bool m_logical_resource_id_isSet;
    bool m_logical_resource_id_isValid;

    QString m_physical_resource_id;
    bool m_physical_resource_id_isSet;
    bool m_physical_resource_id_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceError)

#endif // OAIResourceError_H
