/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteApp_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteApp_request::OAIDeleteApp_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteApp_request::OAIDeleteApp_request() {
    this->initializeModel();
}

OAIDeleteApp_request::~OAIDeleteApp_request() {}

void OAIDeleteApp_request::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_force_delete_isSet = false;
    m_force_delete_isValid = false;
}

void OAIDeleteApp_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteApp_request::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_force_delete_isValid = ::OpenAPI::fromJsonValue(m_force_delete, json[QString("forceDelete")]);
    m_force_delete_isSet = !json[QString("forceDelete")].isNull() && m_force_delete_isValid;
}

QString OAIDeleteApp_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteApp_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_force_delete_isSet) {
        obj.insert(QString("forceDelete"), ::OpenAPI::toJsonValue(m_force_delete));
    }
    return obj;
}

QString OAIDeleteApp_request::getAppArn() const {
    return m_app_arn;
}
void OAIDeleteApp_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDeleteApp_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDeleteApp_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDeleteApp_request::getClientToken() const {
    return m_client_token;
}
void OAIDeleteApp_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIDeleteApp_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIDeleteApp_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIDeleteApp_request::isForceDelete() const {
    return m_force_delete;
}
void OAIDeleteApp_request::setForceDelete(const bool &force_delete) {
    m_force_delete = force_delete;
    m_force_delete_isSet = true;
}

bool OAIDeleteApp_request::is_force_delete_Set() const{
    return m_force_delete_isSet;
}

bool OAIDeleteApp_request::is_force_delete_Valid() const{
    return m_force_delete_isValid;
}

bool OAIDeleteApp_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_delete_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteApp_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
