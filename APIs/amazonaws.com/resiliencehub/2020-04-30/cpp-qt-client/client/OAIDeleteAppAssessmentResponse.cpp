/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAppAssessmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAppAssessmentResponse::OAIDeleteAppAssessmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAppAssessmentResponse::OAIDeleteAppAssessmentResponse() {
    this->initializeModel();
}

OAIDeleteAppAssessmentResponse::~OAIDeleteAppAssessmentResponse() {}

void OAIDeleteAppAssessmentResponse::initializeModel() {

    m_assessment_arn_isSet = false;
    m_assessment_arn_isValid = false;

    m_assessment_status_isSet = false;
    m_assessment_status_isValid = false;
}

void OAIDeleteAppAssessmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAppAssessmentResponse::fromJsonObject(QJsonObject json) {

    m_assessment_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_arn, json[QString("assessmentArn")]);
    m_assessment_arn_isSet = !json[QString("assessmentArn")].isNull() && m_assessment_arn_isValid;

    m_assessment_status_isValid = ::OpenAPI::fromJsonValue(m_assessment_status, json[QString("assessmentStatus")]);
    m_assessment_status_isSet = !json[QString("assessmentStatus")].isNull() && m_assessment_status_isValid;
}

QString OAIDeleteAppAssessmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAppAssessmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_arn_isSet) {
        obj.insert(QString("assessmentArn"), ::OpenAPI::toJsonValue(m_assessment_arn));
    }
    if (m_assessment_status.isSet()) {
        obj.insert(QString("assessmentStatus"), ::OpenAPI::toJsonValue(m_assessment_status));
    }
    return obj;
}

QString OAIDeleteAppAssessmentResponse::getAssessmentArn() const {
    return m_assessment_arn;
}
void OAIDeleteAppAssessmentResponse::setAssessmentArn(const QString &assessment_arn) {
    m_assessment_arn = assessment_arn;
    m_assessment_arn_isSet = true;
}

bool OAIDeleteAppAssessmentResponse::is_assessment_arn_Set() const{
    return m_assessment_arn_isSet;
}

bool OAIDeleteAppAssessmentResponse::is_assessment_arn_Valid() const{
    return m_assessment_arn_isValid;
}

OAIAssessmentStatus OAIDeleteAppAssessmentResponse::getAssessmentStatus() const {
    return m_assessment_status;
}
void OAIDeleteAppAssessmentResponse::setAssessmentStatus(const OAIAssessmentStatus &assessment_status) {
    m_assessment_status = assessment_status;
    m_assessment_status_isSet = true;
}

bool OAIDeleteAppAssessmentResponse::is_assessment_status_Set() const{
    return m_assessment_status_isSet;
}

bool OAIDeleteAppAssessmentResponse::is_assessment_status_Valid() const{
    return m_assessment_status_isValid;
}

bool OAIDeleteAppAssessmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAppAssessmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_arn_isValid && m_assessment_status_isValid && true;
}

} // namespace OpenAPI
