/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeResiliencyPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeResiliencyPolicyRequest::OAIDescribeResiliencyPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeResiliencyPolicyRequest::OAIDescribeResiliencyPolicyRequest() {
    this->initializeModel();
}

OAIDescribeResiliencyPolicyRequest::~OAIDescribeResiliencyPolicyRequest() {}

void OAIDescribeResiliencyPolicyRequest::initializeModel() {

    m_policy_arn_isSet = false;
    m_policy_arn_isValid = false;
}

void OAIDescribeResiliencyPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeResiliencyPolicyRequest::fromJsonObject(QJsonObject json) {

    m_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_policy_arn, json[QString("policyArn")]);
    m_policy_arn_isSet = !json[QString("policyArn")].isNull() && m_policy_arn_isValid;
}

QString OAIDescribeResiliencyPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeResiliencyPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_arn_isSet) {
        obj.insert(QString("policyArn"), ::OpenAPI::toJsonValue(m_policy_arn));
    }
    return obj;
}

QString OAIDescribeResiliencyPolicyRequest::getPolicyArn() const {
    return m_policy_arn;
}
void OAIDescribeResiliencyPolicyRequest::setPolicyArn(const QString &policy_arn) {
    m_policy_arn = policy_arn;
    m_policy_arn_isSet = true;
}

bool OAIDescribeResiliencyPolicyRequest::is_policy_arn_Set() const{
    return m_policy_arn_isSet;
}

bool OAIDescribeResiliencyPolicyRequest::is_policy_arn_Valid() const{
    return m_policy_arn_isValid;
}

bool OAIDescribeResiliencyPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeResiliencyPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_arn_isValid && true;
}

} // namespace OpenAPI
