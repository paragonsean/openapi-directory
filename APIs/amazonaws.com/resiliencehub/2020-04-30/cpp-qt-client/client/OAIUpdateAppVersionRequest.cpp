/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppVersionRequest::OAIUpdateAppVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppVersionRequest::OAIUpdateAppVersionRequest() {
    this->initializeModel();
}

OAIUpdateAppVersionRequest::~OAIUpdateAppVersionRequest() {}

void OAIUpdateAppVersionRequest::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;
}

void OAIUpdateAppVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppVersionRequest::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;
}

QString OAIUpdateAppVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.isSet()) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    return obj;
}

QMap OAIUpdateAppVersionRequest::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIUpdateAppVersionRequest::setAdditionalInfo(const QMap &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIUpdateAppVersionRequest::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIUpdateAppVersionRequest::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIUpdateAppVersionRequest::getAppArn() const {
    return m_app_arn;
}
void OAIUpdateAppVersionRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIUpdateAppVersionRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIUpdateAppVersionRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

bool OAIUpdateAppVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
