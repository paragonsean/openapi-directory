/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationTemplateStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationTemplateStatus::OAIRecommendationTemplateStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationTemplateStatus::OAIRecommendationTemplateStatus() {
    this->initializeModel();
}

OAIRecommendationTemplateStatus::~OAIRecommendationTemplateStatus() {}

void OAIRecommendationTemplateStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRecommendationTemplateStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRecommendationTemplateStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationTemplateStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationTemplateStatus::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationTemplateStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecommendationTemplateStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRecommendationTemplateStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRecommendationTemplateStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRecommendationTemplateStatus::PENDING:
            val = "Pending";
            break;
        case eOAIRecommendationTemplateStatus::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIRecommendationTemplateStatus::FAILED:
            val = "Failed";
            break;
        case eOAIRecommendationTemplateStatus::SUCCESS:
            val = "Success";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRecommendationTemplateStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRecommendationTemplateStatus::eOAIRecommendationTemplateStatus OAIRecommendationTemplateStatus::getValue() const {
    return m_value;
}

void OAIRecommendationTemplateStatus::setValue(const OAIRecommendationTemplateStatus::eOAIRecommendationTemplateStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRecommendationTemplateStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIRecommendationTemplateStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
