/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppRequest::OAICreateAppRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppRequest::OAICreateAppRequest() {
    this->initializeModel();
}

OAICreateAppRequest::~OAICreateAppRequest() {}

void OAICreateAppRequest::initializeModel() {

    m_assessment_schedule_isSet = false;
    m_assessment_schedule_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_subscriptions_isSet = false;
    m_event_subscriptions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_model_isSet = false;
    m_permission_model_isValid = false;

    m_policy_arn_isSet = false;
    m_policy_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAppRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppRequest::fromJsonObject(QJsonObject json) {

    m_assessment_schedule_isValid = ::OpenAPI::fromJsonValue(m_assessment_schedule, json[QString("assessmentSchedule")]);
    m_assessment_schedule_isSet = !json[QString("assessmentSchedule")].isNull() && m_assessment_schedule_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_event_subscriptions, json[QString("eventSubscriptions")]);
    m_event_subscriptions_isSet = !json[QString("eventSubscriptions")].isNull() && m_event_subscriptions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_model_isValid = ::OpenAPI::fromJsonValue(m_permission_model, json[QString("permissionModel")]);
    m_permission_model_isSet = !json[QString("permissionModel")].isNull() && m_permission_model_isValid;

    m_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_policy_arn, json[QString("policyArn")]);
    m_policy_arn_isSet = !json[QString("policyArn")].isNull() && m_policy_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAppRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_schedule.isSet()) {
        obj.insert(QString("assessmentSchedule"), ::OpenAPI::toJsonValue(m_assessment_schedule));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_subscriptions.isSet()) {
        obj.insert(QString("eventSubscriptions"), ::OpenAPI::toJsonValue(m_event_subscriptions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_model.isSet()) {
        obj.insert(QString("permissionModel"), ::OpenAPI::toJsonValue(m_permission_model));
    }
    if (m_policy_arn_isSet) {
        obj.insert(QString("policyArn"), ::OpenAPI::toJsonValue(m_policy_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIAppAssessmentScheduleType OAICreateAppRequest::getAssessmentSchedule() const {
    return m_assessment_schedule;
}
void OAICreateAppRequest::setAssessmentSchedule(const OAIAppAssessmentScheduleType &assessment_schedule) {
    m_assessment_schedule = assessment_schedule;
    m_assessment_schedule_isSet = true;
}

bool OAICreateAppRequest::is_assessment_schedule_Set() const{
    return m_assessment_schedule_isSet;
}

bool OAICreateAppRequest::is_assessment_schedule_Valid() const{
    return m_assessment_schedule_isValid;
}

QString OAICreateAppRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAppRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAppRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAppRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateAppRequest::getDescription() const {
    return m_description;
}
void OAICreateAppRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAppRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAppRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateAppRequest::getEventSubscriptions() const {
    return m_event_subscriptions;
}
void OAICreateAppRequest::setEventSubscriptions(const QList &event_subscriptions) {
    m_event_subscriptions = event_subscriptions;
    m_event_subscriptions_isSet = true;
}

bool OAICreateAppRequest::is_event_subscriptions_Set() const{
    return m_event_subscriptions_isSet;
}

bool OAICreateAppRequest::is_event_subscriptions_Valid() const{
    return m_event_subscriptions_isValid;
}

QString OAICreateAppRequest::getName() const {
    return m_name;
}
void OAICreateAppRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIApp_permissionModel OAICreateAppRequest::getPermissionModel() const {
    return m_permission_model;
}
void OAICreateAppRequest::setPermissionModel(const OAIApp_permissionModel &permission_model) {
    m_permission_model = permission_model;
    m_permission_model_isSet = true;
}

bool OAICreateAppRequest::is_permission_model_Set() const{
    return m_permission_model_isSet;
}

bool OAICreateAppRequest::is_permission_model_Valid() const{
    return m_permission_model_isValid;
}

QString OAICreateAppRequest::getPolicyArn() const {
    return m_policy_arn;
}
void OAICreateAppRequest::setPolicyArn(const QString &policy_arn) {
    m_policy_arn = policy_arn;
    m_policy_arn_isSet = true;
}

bool OAICreateAppRequest::is_policy_arn_Set() const{
    return m_policy_arn_isSet;
}

bool OAICreateAppRequest::is_policy_arn_Valid() const{
    return m_policy_arn_isValid;
}

QMap OAICreateAppRequest::getTags() const {
    return m_tags;
}
void OAICreateAppRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAppRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_subscriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
