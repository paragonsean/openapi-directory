/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAppInputSource_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAppInputSource_request::OAIDeleteAppInputSource_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAppInputSource_request::OAIDeleteAppInputSource_request() {
    this->initializeModel();
}

OAIDeleteAppInputSource_request::~OAIDeleteAppInputSource_request() {}

void OAIDeleteAppInputSource_request::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_eks_source_cluster_namespace_isSet = false;
    m_eks_source_cluster_namespace_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_terraform_source_isSet = false;
    m_terraform_source_isValid = false;
}

void OAIDeleteAppInputSource_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAppInputSource_request::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_eks_source_cluster_namespace_isValid = ::OpenAPI::fromJsonValue(m_eks_source_cluster_namespace, json[QString("eksSourceClusterNamespace")]);
    m_eks_source_cluster_namespace_isSet = !json[QString("eksSourceClusterNamespace")].isNull() && m_eks_source_cluster_namespace_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("sourceArn")]);
    m_source_arn_isSet = !json[QString("sourceArn")].isNull() && m_source_arn_isValid;

    m_terraform_source_isValid = ::OpenAPI::fromJsonValue(m_terraform_source, json[QString("terraformSource")]);
    m_terraform_source_isSet = !json[QString("terraformSource")].isNull() && m_terraform_source_isValid;
}

QString OAIDeleteAppInputSource_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAppInputSource_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_eks_source_cluster_namespace.isSet()) {
        obj.insert(QString("eksSourceClusterNamespace"), ::OpenAPI::toJsonValue(m_eks_source_cluster_namespace));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("sourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_terraform_source.isSet()) {
        obj.insert(QString("terraformSource"), ::OpenAPI::toJsonValue(m_terraform_source));
    }
    return obj;
}

QString OAIDeleteAppInputSource_request::getAppArn() const {
    return m_app_arn;
}
void OAIDeleteAppInputSource_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDeleteAppInputSource_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDeleteAppInputSource_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDeleteAppInputSource_request::getClientToken() const {
    return m_client_token;
}
void OAIDeleteAppInputSource_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIDeleteAppInputSource_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIDeleteAppInputSource_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIDeleteAppInputSource_request_eksSourceClusterNamespace OAIDeleteAppInputSource_request::getEksSourceClusterNamespace() const {
    return m_eks_source_cluster_namespace;
}
void OAIDeleteAppInputSource_request::setEksSourceClusterNamespace(const OAIDeleteAppInputSource_request_eksSourceClusterNamespace &eks_source_cluster_namespace) {
    m_eks_source_cluster_namespace = eks_source_cluster_namespace;
    m_eks_source_cluster_namespace_isSet = true;
}

bool OAIDeleteAppInputSource_request::is_eks_source_cluster_namespace_Set() const{
    return m_eks_source_cluster_namespace_isSet;
}

bool OAIDeleteAppInputSource_request::is_eks_source_cluster_namespace_Valid() const{
    return m_eks_source_cluster_namespace_isValid;
}

QString OAIDeleteAppInputSource_request::getSourceArn() const {
    return m_source_arn;
}
void OAIDeleteAppInputSource_request::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIDeleteAppInputSource_request::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIDeleteAppInputSource_request::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

OAIDeleteAppInputSource_request_terraformSource OAIDeleteAppInputSource_request::getTerraformSource() const {
    return m_terraform_source;
}
void OAIDeleteAppInputSource_request::setTerraformSource(const OAIDeleteAppInputSource_request_terraformSource &terraform_source) {
    m_terraform_source = terraform_source;
    m_terraform_source_isSet = true;
}

bool OAIDeleteAppInputSource_request::is_terraform_source_Set() const{
    return m_terraform_source_isSet;
}

bool OAIDeleteAppInputSource_request::is_terraform_source_Valid() const{
    return m_terraform_source_isValid;
}

bool OAIDeleteAppInputSource_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eks_source_cluster_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAppInputSource_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
