/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceMapping_physicalResourceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceMapping_physicalResourceId::OAIResourceMapping_physicalResourceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceMapping_physicalResourceId::OAIResourceMapping_physicalResourceId() {
    this->initializeModel();
}

OAIResourceMapping_physicalResourceId::~OAIResourceMapping_physicalResourceId() {}

void OAIResourceMapping_physicalResourceId::initializeModel() {

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_aws_region_isSet = false;
    m_aws_region_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceMapping_physicalResourceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceMapping_physicalResourceId::fromJsonObject(QJsonObject json) {

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_aws_region_isValid = ::OpenAPI::fromJsonValue(m_aws_region, json[QString("awsRegion")]);
    m_aws_region_isSet = !json[QString("awsRegion")].isNull() && m_aws_region_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceMapping_physicalResourceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceMapping_physicalResourceId::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_account_id_isSet) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_aws_region_isSet) {
        obj.insert(QString("awsRegion"), ::OpenAPI::toJsonValue(m_aws_region));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIResourceMapping_physicalResourceId::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIResourceMapping_physicalResourceId::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIResourceMapping_physicalResourceId::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIResourceMapping_physicalResourceId::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAIResourceMapping_physicalResourceId::getAwsRegion() const {
    return m_aws_region;
}
void OAIResourceMapping_physicalResourceId::setAwsRegion(const QString &aws_region) {
    m_aws_region = aws_region;
    m_aws_region_isSet = true;
}

bool OAIResourceMapping_physicalResourceId::is_aws_region_Set() const{
    return m_aws_region_isSet;
}

bool OAIResourceMapping_physicalResourceId::is_aws_region_Valid() const{
    return m_aws_region_isValid;
}

QString OAIResourceMapping_physicalResourceId::getIdentifier() const {
    return m_identifier;
}
void OAIResourceMapping_physicalResourceId::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIResourceMapping_physicalResourceId::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIResourceMapping_physicalResourceId::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIPhysicalIdentifierType OAIResourceMapping_physicalResourceId::getType() const {
    return m_type;
}
void OAIResourceMapping_physicalResourceId::setType(const OAIPhysicalIdentifierType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceMapping_physicalResourceId::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceMapping_physicalResourceId::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceMapping_physicalResourceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceMapping_physicalResourceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
