/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppAssessment_cost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppAssessment_cost::OAIAppAssessment_cost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppAssessment_cost::OAIAppAssessment_cost() {
    this->initializeModel();
}

OAIAppAssessment_cost::~OAIAppAssessment_cost() {}

void OAIAppAssessment_cost::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;
}

void OAIAppAssessment_cost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppAssessment_cost::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;
}

QString OAIAppAssessment_cost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppAssessment_cost::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    return obj;
}

double OAIAppAssessment_cost::getAmount() const {
    return m_amount;
}
void OAIAppAssessment_cost::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAppAssessment_cost::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAppAssessment_cost::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIAppAssessment_cost::getCurrency() const {
    return m_currency;
}
void OAIAppAssessment_cost::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAppAssessment_cost::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAppAssessment_cost::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICostFrequency OAIAppAssessment_cost::getFrequency() const {
    return m_frequency;
}
void OAIAppAssessment_cost::setFrequency(const OAICostFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIAppAssessment_cost::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIAppAssessment_cost::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAIAppAssessment_cost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppAssessment_cost::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_currency_isValid && m_frequency_isValid && true;
}

} // namespace OpenAPI
