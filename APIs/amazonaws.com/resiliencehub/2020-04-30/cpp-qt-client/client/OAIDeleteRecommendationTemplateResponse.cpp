/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRecommendationTemplateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRecommendationTemplateResponse::OAIDeleteRecommendationTemplateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRecommendationTemplateResponse::OAIDeleteRecommendationTemplateResponse() {
    this->initializeModel();
}

OAIDeleteRecommendationTemplateResponse::~OAIDeleteRecommendationTemplateResponse() {}

void OAIDeleteRecommendationTemplateResponse::initializeModel() {

    m_recommendation_template_arn_isSet = false;
    m_recommendation_template_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeleteRecommendationTemplateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRecommendationTemplateResponse::fromJsonObject(QJsonObject json) {

    m_recommendation_template_arn_isValid = ::OpenAPI::fromJsonValue(m_recommendation_template_arn, json[QString("recommendationTemplateArn")]);
    m_recommendation_template_arn_isSet = !json[QString("recommendationTemplateArn")].isNull() && m_recommendation_template_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDeleteRecommendationTemplateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRecommendationTemplateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_template_arn_isSet) {
        obj.insert(QString("recommendationTemplateArn"), ::OpenAPI::toJsonValue(m_recommendation_template_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDeleteRecommendationTemplateResponse::getRecommendationTemplateArn() const {
    return m_recommendation_template_arn;
}
void OAIDeleteRecommendationTemplateResponse::setRecommendationTemplateArn(const QString &recommendation_template_arn) {
    m_recommendation_template_arn = recommendation_template_arn;
    m_recommendation_template_arn_isSet = true;
}

bool OAIDeleteRecommendationTemplateResponse::is_recommendation_template_arn_Set() const{
    return m_recommendation_template_arn_isSet;
}

bool OAIDeleteRecommendationTemplateResponse::is_recommendation_template_arn_Valid() const{
    return m_recommendation_template_arn_isValid;
}

OAIRecommendationTemplateStatus OAIDeleteRecommendationTemplateResponse::getStatus() const {
    return m_status;
}
void OAIDeleteRecommendationTemplateResponse::setStatus(const OAIRecommendationTemplateStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteRecommendationTemplateResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteRecommendationTemplateResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeleteRecommendationTemplateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_template_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRecommendationTemplateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recommendation_template_arn_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
