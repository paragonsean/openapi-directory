/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddDraftAppVersionResourceMappingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddDraftAppVersionResourceMappingsResponse::OAIAddDraftAppVersionResourceMappingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddDraftAppVersionResourceMappingsResponse::OAIAddDraftAppVersionResourceMappingsResponse() {
    this->initializeModel();
}

OAIAddDraftAppVersionResourceMappingsResponse::~OAIAddDraftAppVersionResourceMappingsResponse() {}

void OAIAddDraftAppVersionResourceMappingsResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_resource_mappings_isSet = false;
    m_resource_mappings_isValid = false;
}

void OAIAddDraftAppVersionResourceMappingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddDraftAppVersionResourceMappingsResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_resource_mappings_isValid = ::OpenAPI::fromJsonValue(m_resource_mappings, json[QString("resourceMappings")]);
    m_resource_mappings_isSet = !json[QString("resourceMappings")].isNull() && m_resource_mappings_isValid;
}

QString OAIAddDraftAppVersionResourceMappingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddDraftAppVersionResourceMappingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_resource_mappings.isSet()) {
        obj.insert(QString("resourceMappings"), ::OpenAPI::toJsonValue(m_resource_mappings));
    }
    return obj;
}

QString OAIAddDraftAppVersionResourceMappingsResponse::getAppArn() const {
    return m_app_arn;
}
void OAIAddDraftAppVersionResourceMappingsResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIAddDraftAppVersionResourceMappingsResponse::getAppVersion() const {
    return m_app_version;
}
void OAIAddDraftAppVersionResourceMappingsResponse::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QList OAIAddDraftAppVersionResourceMappingsResponse::getResourceMappings() const {
    return m_resource_mappings;
}
void OAIAddDraftAppVersionResourceMappingsResponse::setResourceMappings(const QList &resource_mappings) {
    m_resource_mappings = resource_mappings;
    m_resource_mappings_isSet = true;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::is_resource_mappings_Set() const{
    return m_resource_mappings_isSet;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::is_resource_mappings_Valid() const{
    return m_resource_mappings_isValid;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddDraftAppVersionResourceMappingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && m_resource_mappings_isValid && true;
}

} // namespace OpenAPI
