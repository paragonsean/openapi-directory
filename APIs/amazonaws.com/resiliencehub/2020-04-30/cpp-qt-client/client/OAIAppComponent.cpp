/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppComponent::OAIAppComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppComponent::OAIAppComponent() {
    this->initializeModel();
}

OAIAppComponent::~OAIAppComponent() {}

void OAIAppComponent::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAppComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppComponent::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAppComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.isSet()) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap OAIAppComponent::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIAppComponent::setAdditionalInfo(const QMap &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIAppComponent::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIAppComponent::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIAppComponent::getId() const {
    return m_id;
}
void OAIAppComponent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppComponent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppComponent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppComponent::getName() const {
    return m_name;
}
void OAIAppComponent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppComponent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppComponent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppComponent::getType() const {
    return m_type;
}
void OAIAppComponent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAppComponent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAppComponent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAppComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
