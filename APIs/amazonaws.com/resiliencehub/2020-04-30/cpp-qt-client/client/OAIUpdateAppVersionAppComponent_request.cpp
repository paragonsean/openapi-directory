/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppVersionAppComponent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppVersionAppComponent_request::OAIUpdateAppVersionAppComponent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppVersionAppComponent_request::OAIUpdateAppVersionAppComponent_request() {
    this->initializeModel();
}

OAIUpdateAppVersionAppComponent_request::~OAIUpdateAppVersionAppComponent_request() {}

void OAIUpdateAppVersionAppComponent_request::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdateAppVersionAppComponent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppVersionAppComponent_request::fromJsonObject(QJsonObject json) {

    if(json["additionalInfo"].isObject()){
        auto varmap = json["additionalInfo"].toObject().toVariantMap();
        m_additional_info_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_additional_info_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_additional_info_isSet &= !jval.isNull() && m_additional_info_isValid;
                m_additional_info.insert(m_additional_info.end(), val, item);
            }
        }
    }

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUpdateAppVersionAppComponent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppVersionAppComponent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.size() > 0) {
        
        obj.insert(QString("additionalInfo"), toJsonValue(m_additional_info));
    }
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QList> OAIUpdateAppVersionAppComponent_request::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIUpdateAppVersionAppComponent_request::setAdditionalInfo(const QMap<QString, QList> &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIUpdateAppVersionAppComponent_request::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIUpdateAppVersionAppComponent_request::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIUpdateAppVersionAppComponent_request::getAppArn() const {
    return m_app_arn;
}
void OAIUpdateAppVersionAppComponent_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIUpdateAppVersionAppComponent_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIUpdateAppVersionAppComponent_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIUpdateAppVersionAppComponent_request::getId() const {
    return m_id;
}
void OAIUpdateAppVersionAppComponent_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateAppVersionAppComponent_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateAppVersionAppComponent_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateAppVersionAppComponent_request::getName() const {
    return m_name;
}
void OAIUpdateAppVersionAppComponent_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateAppVersionAppComponent_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateAppVersionAppComponent_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateAppVersionAppComponent_request::getType() const {
    return m_type;
}
void OAIUpdateAppVersionAppComponent_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateAppVersionAppComponent_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateAppVersionAppComponent_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdateAppVersionAppComponent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppVersionAppComponent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
