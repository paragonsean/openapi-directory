/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportResourcesToDraftAppVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportResourcesToDraftAppVersionRequest::OAIImportResourcesToDraftAppVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportResourcesToDraftAppVersionRequest::OAIImportResourcesToDraftAppVersionRequest() {
    this->initializeModel();
}

OAIImportResourcesToDraftAppVersionRequest::~OAIImportResourcesToDraftAppVersionRequest() {}

void OAIImportResourcesToDraftAppVersionRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_eks_sources_isSet = false;
    m_eks_sources_isValid = false;

    m_import_strategy_isSet = false;
    m_import_strategy_isValid = false;

    m_source_arns_isSet = false;
    m_source_arns_isValid = false;

    m_terraform_sources_isSet = false;
    m_terraform_sources_isValid = false;
}

void OAIImportResourcesToDraftAppVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportResourcesToDraftAppVersionRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_eks_sources_isValid = ::OpenAPI::fromJsonValue(m_eks_sources, json[QString("eksSources")]);
    m_eks_sources_isSet = !json[QString("eksSources")].isNull() && m_eks_sources_isValid;

    m_import_strategy_isValid = ::OpenAPI::fromJsonValue(m_import_strategy, json[QString("importStrategy")]);
    m_import_strategy_isSet = !json[QString("importStrategy")].isNull() && m_import_strategy_isValid;

    m_source_arns_isValid = ::OpenAPI::fromJsonValue(m_source_arns, json[QString("sourceArns")]);
    m_source_arns_isSet = !json[QString("sourceArns")].isNull() && m_source_arns_isValid;

    m_terraform_sources_isValid = ::OpenAPI::fromJsonValue(m_terraform_sources, json[QString("terraformSources")]);
    m_terraform_sources_isSet = !json[QString("terraformSources")].isNull() && m_terraform_sources_isValid;
}

QString OAIImportResourcesToDraftAppVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportResourcesToDraftAppVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_eks_sources.isSet()) {
        obj.insert(QString("eksSources"), ::OpenAPI::toJsonValue(m_eks_sources));
    }
    if (m_import_strategy.isSet()) {
        obj.insert(QString("importStrategy"), ::OpenAPI::toJsonValue(m_import_strategy));
    }
    if (m_source_arns.isSet()) {
        obj.insert(QString("sourceArns"), ::OpenAPI::toJsonValue(m_source_arns));
    }
    if (m_terraform_sources.isSet()) {
        obj.insert(QString("terraformSources"), ::OpenAPI::toJsonValue(m_terraform_sources));
    }
    return obj;
}

QString OAIImportResourcesToDraftAppVersionRequest::getAppArn() const {
    return m_app_arn;
}
void OAIImportResourcesToDraftAppVersionRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QList OAIImportResourcesToDraftAppVersionRequest::getEksSources() const {
    return m_eks_sources;
}
void OAIImportResourcesToDraftAppVersionRequest::setEksSources(const QList &eks_sources) {
    m_eks_sources = eks_sources;
    m_eks_sources_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_eks_sources_Set() const{
    return m_eks_sources_isSet;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_eks_sources_Valid() const{
    return m_eks_sources_isValid;
}

OAIResourceImportStrategyType OAIImportResourcesToDraftAppVersionRequest::getImportStrategy() const {
    return m_import_strategy;
}
void OAIImportResourcesToDraftAppVersionRequest::setImportStrategy(const OAIResourceImportStrategyType &import_strategy) {
    m_import_strategy = import_strategy;
    m_import_strategy_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_import_strategy_Set() const{
    return m_import_strategy_isSet;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_import_strategy_Valid() const{
    return m_import_strategy_isValid;
}

QList OAIImportResourcesToDraftAppVersionRequest::getSourceArns() const {
    return m_source_arns;
}
void OAIImportResourcesToDraftAppVersionRequest::setSourceArns(const QList &source_arns) {
    m_source_arns = source_arns;
    m_source_arns_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_source_arns_Set() const{
    return m_source_arns_isSet;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_source_arns_Valid() const{
    return m_source_arns_isValid;
}

QList OAIImportResourcesToDraftAppVersionRequest::getTerraformSources() const {
    return m_terraform_sources;
}
void OAIImportResourcesToDraftAppVersionRequest::setTerraformSources(const QList &terraform_sources) {
    m_terraform_sources = terraform_sources;
    m_terraform_sources_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_terraform_sources_Set() const{
    return m_terraform_sources_isSet;
}

bool OAIImportResourcesToDraftAppVersionRequest::is_terraform_sources_Valid() const{
    return m_terraform_sources_isValid;
}

bool OAIImportResourcesToDraftAppVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eks_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportResourcesToDraftAppVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
