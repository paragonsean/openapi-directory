/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTestRecommendationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTestRecommendationsResponse::OAIListTestRecommendationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTestRecommendationsResponse::OAIListTestRecommendationsResponse() {
    this->initializeModel();
}

OAIListTestRecommendationsResponse::~OAIListTestRecommendationsResponse() {}

void OAIListTestRecommendationsResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_test_recommendations_isSet = false;
    m_test_recommendations_isValid = false;
}

void OAIListTestRecommendationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTestRecommendationsResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_test_recommendations_isValid = ::OpenAPI::fromJsonValue(m_test_recommendations, json[QString("testRecommendations")]);
    m_test_recommendations_isSet = !json[QString("testRecommendations")].isNull() && m_test_recommendations_isValid;
}

QString OAIListTestRecommendationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTestRecommendationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_test_recommendations.isSet()) {
        obj.insert(QString("testRecommendations"), ::OpenAPI::toJsonValue(m_test_recommendations));
    }
    return obj;
}

QString OAIListTestRecommendationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListTestRecommendationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTestRecommendationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTestRecommendationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListTestRecommendationsResponse::getTestRecommendations() const {
    return m_test_recommendations;
}
void OAIListTestRecommendationsResponse::setTestRecommendations(const QList &test_recommendations) {
    m_test_recommendations = test_recommendations;
    m_test_recommendations_isSet = true;
}

bool OAIListTestRecommendationsResponse::is_test_recommendations_Set() const{
    return m_test_recommendations_isSet;
}

bool OAIListTestRecommendationsResponse::is_test_recommendations_Valid() const{
    return m_test_recommendations_isValid;
}

bool OAIListTestRecommendationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTestRecommendationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_test_recommendations_isValid && true;
}

} // namespace OpenAPI
