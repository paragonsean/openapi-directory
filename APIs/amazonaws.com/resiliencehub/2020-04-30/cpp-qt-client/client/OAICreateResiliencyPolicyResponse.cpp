/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResiliencyPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResiliencyPolicyResponse::OAICreateResiliencyPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResiliencyPolicyResponse::OAICreateResiliencyPolicyResponse() {
    this->initializeModel();
}

OAICreateResiliencyPolicyResponse::~OAICreateResiliencyPolicyResponse() {}

void OAICreateResiliencyPolicyResponse::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAICreateResiliencyPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResiliencyPolicyResponse::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAICreateResiliencyPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResiliencyPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

OAICreateResiliencyPolicyResponse_policy OAICreateResiliencyPolicyResponse::getPolicy() const {
    return m_policy;
}
void OAICreateResiliencyPolicyResponse::setPolicy(const OAICreateResiliencyPolicyResponse_policy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAICreateResiliencyPolicyResponse::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAICreateResiliencyPolicyResponse::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAICreateResiliencyPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResiliencyPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
