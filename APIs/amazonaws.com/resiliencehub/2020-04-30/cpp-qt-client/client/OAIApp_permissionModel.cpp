/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_permissionModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_permissionModel::OAIApp_permissionModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_permissionModel::OAIApp_permissionModel() {
    this->initializeModel();
}

OAIApp_permissionModel::~OAIApp_permissionModel() {}

void OAIApp_permissionModel::initializeModel() {

    m_cross_account_role_arns_isSet = false;
    m_cross_account_role_arns_isValid = false;

    m_invoker_role_name_isSet = false;
    m_invoker_role_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIApp_permissionModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_permissionModel::fromJsonObject(QJsonObject json) {

    m_cross_account_role_arns_isValid = ::OpenAPI::fromJsonValue(m_cross_account_role_arns, json[QString("crossAccountRoleArns")]);
    m_cross_account_role_arns_isSet = !json[QString("crossAccountRoleArns")].isNull() && m_cross_account_role_arns_isValid;

    m_invoker_role_name_isValid = ::OpenAPI::fromJsonValue(m_invoker_role_name, json[QString("invokerRoleName")]);
    m_invoker_role_name_isSet = !json[QString("invokerRoleName")].isNull() && m_invoker_role_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIApp_permissionModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_permissionModel::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_account_role_arns.isSet()) {
        obj.insert(QString("crossAccountRoleArns"), ::OpenAPI::toJsonValue(m_cross_account_role_arns));
    }
    if (m_invoker_role_name_isSet) {
        obj.insert(QString("invokerRoleName"), ::OpenAPI::toJsonValue(m_invoker_role_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList OAIApp_permissionModel::getCrossAccountRoleArns() const {
    return m_cross_account_role_arns;
}
void OAIApp_permissionModel::setCrossAccountRoleArns(const QList &cross_account_role_arns) {
    m_cross_account_role_arns = cross_account_role_arns;
    m_cross_account_role_arns_isSet = true;
}

bool OAIApp_permissionModel::is_cross_account_role_arns_Set() const{
    return m_cross_account_role_arns_isSet;
}

bool OAIApp_permissionModel::is_cross_account_role_arns_Valid() const{
    return m_cross_account_role_arns_isValid;
}

QString OAIApp_permissionModel::getInvokerRoleName() const {
    return m_invoker_role_name;
}
void OAIApp_permissionModel::setInvokerRoleName(const QString &invoker_role_name) {
    m_invoker_role_name = invoker_role_name;
    m_invoker_role_name_isSet = true;
}

bool OAIApp_permissionModel::is_invoker_role_name_Set() const{
    return m_invoker_role_name_isSet;
}

bool OAIApp_permissionModel::is_invoker_role_name_Valid() const{
    return m_invoker_role_name_isValid;
}

OAIPermissionModelType OAIApp_permissionModel::getType() const {
    return m_type;
}
void OAIApp_permissionModel::setType(const OAIPermissionModelType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApp_permissionModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApp_permissionModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIApp_permissionModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_account_role_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoker_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_permissionModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
