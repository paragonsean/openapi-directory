/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppComplianceStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppComplianceStatusType::OAIAppComplianceStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppComplianceStatusType::OAIAppComplianceStatusType() {
    this->initializeModel();
}

OAIAppComplianceStatusType::~OAIAppComplianceStatusType() {}

void OAIAppComplianceStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppComplianceStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppComplianceStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PolicyBreached", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppComplianceStatusType::POLICYBREACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PolicyMet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppComplianceStatusType::POLICYMET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotAssessed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppComplianceStatusType::NOTASSESSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChangesDetected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppComplianceStatusType::CHANGESDETECTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppComplianceStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppComplianceStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppComplianceStatusType::POLICYBREACHED:
            val = "PolicyBreached";
            break;
        case eOAIAppComplianceStatusType::POLICYMET:
            val = "PolicyMet";
            break;
        case eOAIAppComplianceStatusType::NOTASSESSED:
            val = "NotAssessed";
            break;
        case eOAIAppComplianceStatusType::CHANGESDETECTED:
            val = "ChangesDetected";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppComplianceStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppComplianceStatusType::eOAIAppComplianceStatusType OAIAppComplianceStatusType::getValue() const {
    return m_value;
}

void OAIAppComplianceStatusType::setValue(const OAIAppComplianceStatusType::eOAIAppComplianceStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppComplianceStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppComplianceStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
