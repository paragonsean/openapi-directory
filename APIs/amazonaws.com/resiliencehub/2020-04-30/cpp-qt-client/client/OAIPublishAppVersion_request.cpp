/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishAppVersion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishAppVersion_request::OAIPublishAppVersion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishAppVersion_request::OAIPublishAppVersion_request() {
    this->initializeModel();
}

OAIPublishAppVersion_request::~OAIPublishAppVersion_request() {}

void OAIPublishAppVersion_request::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_version_name_isSet = false;
    m_version_name_isValid = false;
}

void OAIPublishAppVersion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishAppVersion_request::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_version_name_isValid = ::OpenAPI::fromJsonValue(m_version_name, json[QString("versionName")]);
    m_version_name_isSet = !json[QString("versionName")].isNull() && m_version_name_isValid;
}

QString OAIPublishAppVersion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishAppVersion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_version_name_isSet) {
        obj.insert(QString("versionName"), ::OpenAPI::toJsonValue(m_version_name));
    }
    return obj;
}

QString OAIPublishAppVersion_request::getAppArn() const {
    return m_app_arn;
}
void OAIPublishAppVersion_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIPublishAppVersion_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIPublishAppVersion_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIPublishAppVersion_request::getVersionName() const {
    return m_version_name;
}
void OAIPublishAppVersion_request::setVersionName(const QString &version_name) {
    m_version_name = version_name;
    m_version_name_isSet = true;
}

bool OAIPublishAppVersion_request::is_version_name_Set() const{
    return m_version_name_isSet;
}

bool OAIPublishAppVersion_request::is_version_name_Valid() const{
    return m_version_name_isValid;
}

bool OAIPublishAppVersion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishAppVersion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
