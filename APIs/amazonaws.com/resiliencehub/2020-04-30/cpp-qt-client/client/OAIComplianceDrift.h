/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComplianceDrift.h
 *
 * Indicates the compliance drifts (recovery time objective (RTO) and recovery point objective (RPO)) that were detected for an assessed entity.
 */

#ifndef OAIComplianceDrift_H
#define OAIComplianceDrift_H

#include <QJsonObject>

#include "OAIDifferenceType.h"
#include "OAIDriftType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIComplianceDrift : public OAIObject {
public:
    OAIComplianceDrift();
    OAIComplianceDrift(QString json);
    ~OAIComplianceDrift() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActualReferenceId() const;
    void setActualReferenceId(const QString &actual_reference_id);
    bool is_actual_reference_id_Set() const;
    bool is_actual_reference_id_Valid() const;

    QMap getActualValue() const;
    void setActualValue(const QMap &actual_value);
    bool is_actual_value_Set() const;
    bool is_actual_value_Valid() const;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    QString getAppVersion() const;
    void setAppVersion(const QString &app_version);
    bool is_app_version_Set() const;
    bool is_app_version_Valid() const;

    OAIDifferenceType getDiffType() const;
    void setDiffType(const OAIDifferenceType &diff_type);
    bool is_diff_type_Set() const;
    bool is_diff_type_Valid() const;

    OAIDriftType getDriftType() const;
    void setDriftType(const OAIDriftType &drift_type);
    bool is_drift_type_Set() const;
    bool is_drift_type_Valid() const;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getExpectedReferenceId() const;
    void setExpectedReferenceId(const QString &expected_reference_id);
    bool is_expected_reference_id_Set() const;
    bool is_expected_reference_id_Valid() const;

    QMap getExpectedValue() const;
    void setExpectedValue(const QMap &expected_value);
    bool is_expected_value_Set() const;
    bool is_expected_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_actual_reference_id;
    bool m_actual_reference_id_isSet;
    bool m_actual_reference_id_isValid;

    QMap m_actual_value;
    bool m_actual_value_isSet;
    bool m_actual_value_isValid;

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    QString m_app_version;
    bool m_app_version_isSet;
    bool m_app_version_isValid;

    OAIDifferenceType m_diff_type;
    bool m_diff_type_isSet;
    bool m_diff_type_isValid;

    OAIDriftType m_drift_type;
    bool m_drift_type_isSet;
    bool m_drift_type_isValid;

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_expected_reference_id;
    bool m_expected_reference_id_isSet;
    bool m_expected_reference_id_isValid;

    QMap m_expected_value;
    bool m_expected_value_isSet;
    bool m_expected_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComplianceDrift)

#endif // OAIComplianceDrift_H
