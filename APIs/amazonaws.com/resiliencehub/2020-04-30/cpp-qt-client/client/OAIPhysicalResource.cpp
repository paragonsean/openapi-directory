/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalResource::OAIPhysicalResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalResource::OAIPhysicalResource() {
    this->initializeModel();
}

OAIPhysicalResource::~OAIPhysicalResource() {}

void OAIPhysicalResource::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_app_components_isSet = false;
    m_app_components_isValid = false;

    m_excluded_isSet = false;
    m_excluded_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_parent_resource_name_isSet = false;
    m_parent_resource_name_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIPhysicalResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalResource::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_app_components_isValid = ::OpenAPI::fromJsonValue(m_app_components, json[QString("appComponents")]);
    m_app_components_isSet = !json[QString("appComponents")].isNull() && m_app_components_isValid;

    m_excluded_isValid = ::OpenAPI::fromJsonValue(m_excluded, json[QString("excluded")]);
    m_excluded_isSet = !json[QString("excluded")].isNull() && m_excluded_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("logicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("logicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_parent_resource_name_isValid = ::OpenAPI::fromJsonValue(m_parent_resource_name, json[QString("parentResourceName")]);
    m_parent_resource_name_isSet = !json[QString("parentResourceName")].isNull() && m_parent_resource_name_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("physicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("physicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAIPhysicalResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalResource::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.isSet()) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_app_components.isSet()) {
        obj.insert(QString("appComponents"), ::OpenAPI::toJsonValue(m_app_components));
    }
    if (m_excluded_isSet) {
        obj.insert(QString("excluded"), ::OpenAPI::toJsonValue(m_excluded));
    }
    if (m_logical_resource_id.isSet()) {
        obj.insert(QString("logicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_parent_resource_name_isSet) {
        obj.insert(QString("parentResourceName"), ::OpenAPI::toJsonValue(m_parent_resource_name));
    }
    if (m_physical_resource_id.isSet()) {
        obj.insert(QString("physicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

QMap OAIPhysicalResource::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIPhysicalResource::setAdditionalInfo(const QMap &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIPhysicalResource::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIPhysicalResource::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QList OAIPhysicalResource::getAppComponents() const {
    return m_app_components;
}
void OAIPhysicalResource::setAppComponents(const QList &app_components) {
    m_app_components = app_components;
    m_app_components_isSet = true;
}

bool OAIPhysicalResource::is_app_components_Set() const{
    return m_app_components_isSet;
}

bool OAIPhysicalResource::is_app_components_Valid() const{
    return m_app_components_isValid;
}

bool OAIPhysicalResource::getExcluded() const {
    return m_excluded;
}
void OAIPhysicalResource::setExcluded(const bool &excluded) {
    m_excluded = excluded;
    m_excluded_isSet = true;
}

bool OAIPhysicalResource::is_excluded_Set() const{
    return m_excluded_isSet;
}

bool OAIPhysicalResource::is_excluded_Valid() const{
    return m_excluded_isValid;
}

OAICreateAppVersionResourceRequest_logicalResourceId OAIPhysicalResource::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIPhysicalResource::setLogicalResourceId(const OAICreateAppVersionResourceRequest_logicalResourceId &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIPhysicalResource::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIPhysicalResource::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIPhysicalResource::getParentResourceName() const {
    return m_parent_resource_name;
}
void OAIPhysicalResource::setParentResourceName(const QString &parent_resource_name) {
    m_parent_resource_name = parent_resource_name;
    m_parent_resource_name_isSet = true;
}

bool OAIPhysicalResource::is_parent_resource_name_Set() const{
    return m_parent_resource_name_isSet;
}

bool OAIPhysicalResource::is_parent_resource_name_Valid() const{
    return m_parent_resource_name_isValid;
}

OAIResourceMapping_physicalResourceId OAIPhysicalResource::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIPhysicalResource::setPhysicalResourceId(const OAIResourceMapping_physicalResourceId &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIPhysicalResource::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIPhysicalResource::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIPhysicalResource::getResourceName() const {
    return m_resource_name;
}
void OAIPhysicalResource::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIPhysicalResource::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIPhysicalResource::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIPhysicalResource::getResourceType() const {
    return m_resource_type;
}
void OAIPhysicalResource::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIPhysicalResource::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIPhysicalResource::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIResourceSourceType OAIPhysicalResource::getSourceType() const {
    return m_source_type;
}
void OAIPhysicalResource::setSourceType(const OAIResourceSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIPhysicalResource::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIPhysicalResource::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIPhysicalResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logical_resource_id_isValid && m_physical_resource_id_isValid && m_resource_type_isValid && true;
}

} // namespace OpenAPI
