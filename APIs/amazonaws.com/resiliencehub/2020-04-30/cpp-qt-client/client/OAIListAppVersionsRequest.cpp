/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppVersionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppVersionsRequest::OAIListAppVersionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppVersionsRequest::OAIListAppVersionsRequest() {
    this->initializeModel();
}

OAIListAppVersionsRequest::~OAIListAppVersionsRequest() {}

void OAIListAppVersionsRequest::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIListAppVersionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppVersionsRequest::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIListAppVersionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppVersionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIListAppVersionsRequest::getAppArn() const {
    return m_app_arn;
}
void OAIListAppVersionsRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIListAppVersionsRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIListAppVersionsRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QDateTime OAIListAppVersionsRequest::getEndTime() const {
    return m_end_time;
}
void OAIListAppVersionsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIListAppVersionsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIListAppVersionsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIListAppVersionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAppVersionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAppVersionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAppVersionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListAppVersionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAppVersionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppVersionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppVersionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QDateTime OAIListAppVersionsRequest::getStartTime() const {
    return m_start_time;
}
void OAIListAppVersionsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIListAppVersionsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIListAppVersionsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIListAppVersionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppVersionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
