/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateResiliencyPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateResiliencyPolicyResponse::OAIUpdateResiliencyPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateResiliencyPolicyResponse::OAIUpdateResiliencyPolicyResponse() {
    this->initializeModel();
}

OAIUpdateResiliencyPolicyResponse::~OAIUpdateResiliencyPolicyResponse() {}

void OAIUpdateResiliencyPolicyResponse::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIUpdateResiliencyPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateResiliencyPolicyResponse::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIUpdateResiliencyPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateResiliencyPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

OAIUpdateResiliencyPolicyResponse_policy OAIUpdateResiliencyPolicyResponse::getPolicy() const {
    return m_policy;
}
void OAIUpdateResiliencyPolicyResponse::setPolicy(const OAIUpdateResiliencyPolicyResponse_policy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUpdateResiliencyPolicyResponse::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUpdateResiliencyPolicyResponse::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIUpdateResiliencyPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateResiliencyPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
