/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisruptionCompliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisruptionCompliance::OAIDisruptionCompliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisruptionCompliance::OAIDisruptionCompliance() {
    this->initializeModel();
}

OAIDisruptionCompliance::~OAIDisruptionCompliance() {}

void OAIDisruptionCompliance::initializeModel() {

    m_achievable_rpo_in_secs_isSet = false;
    m_achievable_rpo_in_secs_isValid = false;

    m_achievable_rto_in_secs_isSet = false;
    m_achievable_rto_in_secs_isValid = false;

    m_compliance_status_isSet = false;
    m_compliance_status_isValid = false;

    m_current_rpo_in_secs_isSet = false;
    m_current_rpo_in_secs_isValid = false;

    m_current_rto_in_secs_isSet = false;
    m_current_rto_in_secs_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_rpo_description_isSet = false;
    m_rpo_description_isValid = false;

    m_rpo_reference_id_isSet = false;
    m_rpo_reference_id_isValid = false;

    m_rto_description_isSet = false;
    m_rto_description_isValid = false;

    m_rto_reference_id_isSet = false;
    m_rto_reference_id_isValid = false;
}

void OAIDisruptionCompliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisruptionCompliance::fromJsonObject(QJsonObject json) {

    m_achievable_rpo_in_secs_isValid = ::OpenAPI::fromJsonValue(m_achievable_rpo_in_secs, json[QString("achievableRpoInSecs")]);
    m_achievable_rpo_in_secs_isSet = !json[QString("achievableRpoInSecs")].isNull() && m_achievable_rpo_in_secs_isValid;

    m_achievable_rto_in_secs_isValid = ::OpenAPI::fromJsonValue(m_achievable_rto_in_secs, json[QString("achievableRtoInSecs")]);
    m_achievable_rto_in_secs_isSet = !json[QString("achievableRtoInSecs")].isNull() && m_achievable_rto_in_secs_isValid;

    m_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_compliance_status, json[QString("complianceStatus")]);
    m_compliance_status_isSet = !json[QString("complianceStatus")].isNull() && m_compliance_status_isValid;

    m_current_rpo_in_secs_isValid = ::OpenAPI::fromJsonValue(m_current_rpo_in_secs, json[QString("currentRpoInSecs")]);
    m_current_rpo_in_secs_isSet = !json[QString("currentRpoInSecs")].isNull() && m_current_rpo_in_secs_isValid;

    m_current_rto_in_secs_isValid = ::OpenAPI::fromJsonValue(m_current_rto_in_secs, json[QString("currentRtoInSecs")]);
    m_current_rto_in_secs_isSet = !json[QString("currentRtoInSecs")].isNull() && m_current_rto_in_secs_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_rpo_description_isValid = ::OpenAPI::fromJsonValue(m_rpo_description, json[QString("rpoDescription")]);
    m_rpo_description_isSet = !json[QString("rpoDescription")].isNull() && m_rpo_description_isValid;

    m_rpo_reference_id_isValid = ::OpenAPI::fromJsonValue(m_rpo_reference_id, json[QString("rpoReferenceId")]);
    m_rpo_reference_id_isSet = !json[QString("rpoReferenceId")].isNull() && m_rpo_reference_id_isValid;

    m_rto_description_isValid = ::OpenAPI::fromJsonValue(m_rto_description, json[QString("rtoDescription")]);
    m_rto_description_isSet = !json[QString("rtoDescription")].isNull() && m_rto_description_isValid;

    m_rto_reference_id_isValid = ::OpenAPI::fromJsonValue(m_rto_reference_id, json[QString("rtoReferenceId")]);
    m_rto_reference_id_isSet = !json[QString("rtoReferenceId")].isNull() && m_rto_reference_id_isValid;
}

QString OAIDisruptionCompliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisruptionCompliance::asJsonObject() const {
    QJsonObject obj;
    if (m_achievable_rpo_in_secs_isSet) {
        obj.insert(QString("achievableRpoInSecs"), ::OpenAPI::toJsonValue(m_achievable_rpo_in_secs));
    }
    if (m_achievable_rto_in_secs_isSet) {
        obj.insert(QString("achievableRtoInSecs"), ::OpenAPI::toJsonValue(m_achievable_rto_in_secs));
    }
    if (m_compliance_status.isSet()) {
        obj.insert(QString("complianceStatus"), ::OpenAPI::toJsonValue(m_compliance_status));
    }
    if (m_current_rpo_in_secs_isSet) {
        obj.insert(QString("currentRpoInSecs"), ::OpenAPI::toJsonValue(m_current_rpo_in_secs));
    }
    if (m_current_rto_in_secs_isSet) {
        obj.insert(QString("currentRtoInSecs"), ::OpenAPI::toJsonValue(m_current_rto_in_secs));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_rpo_description_isSet) {
        obj.insert(QString("rpoDescription"), ::OpenAPI::toJsonValue(m_rpo_description));
    }
    if (m_rpo_reference_id_isSet) {
        obj.insert(QString("rpoReferenceId"), ::OpenAPI::toJsonValue(m_rpo_reference_id));
    }
    if (m_rto_description_isSet) {
        obj.insert(QString("rtoDescription"), ::OpenAPI::toJsonValue(m_rto_description));
    }
    if (m_rto_reference_id_isSet) {
        obj.insert(QString("rtoReferenceId"), ::OpenAPI::toJsonValue(m_rto_reference_id));
    }
    return obj;
}

qint32 OAIDisruptionCompliance::getAchievableRpoInSecs() const {
    return m_achievable_rpo_in_secs;
}
void OAIDisruptionCompliance::setAchievableRpoInSecs(const qint32 &achievable_rpo_in_secs) {
    m_achievable_rpo_in_secs = achievable_rpo_in_secs;
    m_achievable_rpo_in_secs_isSet = true;
}

bool OAIDisruptionCompliance::is_achievable_rpo_in_secs_Set() const{
    return m_achievable_rpo_in_secs_isSet;
}

bool OAIDisruptionCompliance::is_achievable_rpo_in_secs_Valid() const{
    return m_achievable_rpo_in_secs_isValid;
}

qint32 OAIDisruptionCompliance::getAchievableRtoInSecs() const {
    return m_achievable_rto_in_secs;
}
void OAIDisruptionCompliance::setAchievableRtoInSecs(const qint32 &achievable_rto_in_secs) {
    m_achievable_rto_in_secs = achievable_rto_in_secs;
    m_achievable_rto_in_secs_isSet = true;
}

bool OAIDisruptionCompliance::is_achievable_rto_in_secs_Set() const{
    return m_achievable_rto_in_secs_isSet;
}

bool OAIDisruptionCompliance::is_achievable_rto_in_secs_Valid() const{
    return m_achievable_rto_in_secs_isValid;
}

OAIComplianceStatus OAIDisruptionCompliance::getComplianceStatus() const {
    return m_compliance_status;
}
void OAIDisruptionCompliance::setComplianceStatus(const OAIComplianceStatus &compliance_status) {
    m_compliance_status = compliance_status;
    m_compliance_status_isSet = true;
}

bool OAIDisruptionCompliance::is_compliance_status_Set() const{
    return m_compliance_status_isSet;
}

bool OAIDisruptionCompliance::is_compliance_status_Valid() const{
    return m_compliance_status_isValid;
}

qint32 OAIDisruptionCompliance::getCurrentRpoInSecs() const {
    return m_current_rpo_in_secs;
}
void OAIDisruptionCompliance::setCurrentRpoInSecs(const qint32 &current_rpo_in_secs) {
    m_current_rpo_in_secs = current_rpo_in_secs;
    m_current_rpo_in_secs_isSet = true;
}

bool OAIDisruptionCompliance::is_current_rpo_in_secs_Set() const{
    return m_current_rpo_in_secs_isSet;
}

bool OAIDisruptionCompliance::is_current_rpo_in_secs_Valid() const{
    return m_current_rpo_in_secs_isValid;
}

qint32 OAIDisruptionCompliance::getCurrentRtoInSecs() const {
    return m_current_rto_in_secs;
}
void OAIDisruptionCompliance::setCurrentRtoInSecs(const qint32 &current_rto_in_secs) {
    m_current_rto_in_secs = current_rto_in_secs;
    m_current_rto_in_secs_isSet = true;
}

bool OAIDisruptionCompliance::is_current_rto_in_secs_Set() const{
    return m_current_rto_in_secs_isSet;
}

bool OAIDisruptionCompliance::is_current_rto_in_secs_Valid() const{
    return m_current_rto_in_secs_isValid;
}

QString OAIDisruptionCompliance::getMessage() const {
    return m_message;
}
void OAIDisruptionCompliance::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDisruptionCompliance::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDisruptionCompliance::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIDisruptionCompliance::getRpoDescription() const {
    return m_rpo_description;
}
void OAIDisruptionCompliance::setRpoDescription(const QString &rpo_description) {
    m_rpo_description = rpo_description;
    m_rpo_description_isSet = true;
}

bool OAIDisruptionCompliance::is_rpo_description_Set() const{
    return m_rpo_description_isSet;
}

bool OAIDisruptionCompliance::is_rpo_description_Valid() const{
    return m_rpo_description_isValid;
}

QString OAIDisruptionCompliance::getRpoReferenceId() const {
    return m_rpo_reference_id;
}
void OAIDisruptionCompliance::setRpoReferenceId(const QString &rpo_reference_id) {
    m_rpo_reference_id = rpo_reference_id;
    m_rpo_reference_id_isSet = true;
}

bool OAIDisruptionCompliance::is_rpo_reference_id_Set() const{
    return m_rpo_reference_id_isSet;
}

bool OAIDisruptionCompliance::is_rpo_reference_id_Valid() const{
    return m_rpo_reference_id_isValid;
}

QString OAIDisruptionCompliance::getRtoDescription() const {
    return m_rto_description;
}
void OAIDisruptionCompliance::setRtoDescription(const QString &rto_description) {
    m_rto_description = rto_description;
    m_rto_description_isSet = true;
}

bool OAIDisruptionCompliance::is_rto_description_Set() const{
    return m_rto_description_isSet;
}

bool OAIDisruptionCompliance::is_rto_description_Valid() const{
    return m_rto_description_isValid;
}

QString OAIDisruptionCompliance::getRtoReferenceId() const {
    return m_rto_reference_id;
}
void OAIDisruptionCompliance::setRtoReferenceId(const QString &rto_reference_id) {
    m_rto_reference_id = rto_reference_id;
    m_rto_reference_id_isSet = true;
}

bool OAIDisruptionCompliance::is_rto_reference_id_Set() const{
    return m_rto_reference_id_isSet;
}

bool OAIDisruptionCompliance::is_rto_reference_id_Valid() const{
    return m_rto_reference_id_isValid;
}

bool OAIDisruptionCompliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievable_rpo_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_achievable_rto_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_rpo_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_rto_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rto_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rto_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisruptionCompliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compliance_status_isValid && true;
}

} // namespace OpenAPI
