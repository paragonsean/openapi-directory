/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResiliencyScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResiliencyScore::OAIResiliencyScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResiliencyScore::OAIResiliencyScore() {
    this->initializeModel();
}

OAIResiliencyScore::~OAIResiliencyScore() {}

void OAIResiliencyScore::initializeModel() {

    m_disruption_score_isSet = false;
    m_disruption_score_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIResiliencyScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResiliencyScore::fromJsonObject(QJsonObject json) {

    m_disruption_score_isValid = ::OpenAPI::fromJsonValue(m_disruption_score, json[QString("disruptionScore")]);
    m_disruption_score_isSet = !json[QString("disruptionScore")].isNull() && m_disruption_score_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIResiliencyScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResiliencyScore::asJsonObject() const {
    QJsonObject obj;
    if (m_disruption_score.isSet()) {
        obj.insert(QString("disruptionScore"), ::OpenAPI::toJsonValue(m_disruption_score));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QMap OAIResiliencyScore::getDisruptionScore() const {
    return m_disruption_score;
}
void OAIResiliencyScore::setDisruptionScore(const QMap &disruption_score) {
    m_disruption_score = disruption_score;
    m_disruption_score_isSet = true;
}

bool OAIResiliencyScore::is_disruption_score_Set() const{
    return m_disruption_score_isSet;
}

bool OAIResiliencyScore::is_disruption_score_Valid() const{
    return m_disruption_score_isValid;
}

double OAIResiliencyScore::getScore() const {
    return m_score;
}
void OAIResiliencyScore::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIResiliencyScore::is_score_Set() const{
    return m_score_isSet;
}

bool OAIResiliencyScore::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIResiliencyScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disruption_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResiliencyScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_disruption_score_isValid && m_score_isValid && true;
}

} // namespace OpenAPI
