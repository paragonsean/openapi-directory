/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigRecommendation::OAIConfigRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigRecommendation::OAIConfigRecommendation() {
    this->initializeModel();
}

OAIConfigRecommendation::~OAIConfigRecommendation() {}

void OAIConfigRecommendation::initializeModel() {

    m_app_component_name_isSet = false;
    m_app_component_name_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ha_architecture_isSet = false;
    m_ha_architecture_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optimization_type_isSet = false;
    m_optimization_type_isValid = false;

    m_recommendation_compliance_isSet = false;
    m_recommendation_compliance_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_suggested_changes_isSet = false;
    m_suggested_changes_isValid = false;
}

void OAIConfigRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigRecommendation::fromJsonObject(QJsonObject json) {

    m_app_component_name_isValid = ::OpenAPI::fromJsonValue(m_app_component_name, json[QString("appComponentName")]);
    m_app_component_name_isSet = !json[QString("appComponentName")].isNull() && m_app_component_name_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ha_architecture_isValid = ::OpenAPI::fromJsonValue(m_ha_architecture, json[QString("haArchitecture")]);
    m_ha_architecture_isSet = !json[QString("haArchitecture")].isNull() && m_ha_architecture_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optimization_type_isValid = ::OpenAPI::fromJsonValue(m_optimization_type, json[QString("optimizationType")]);
    m_optimization_type_isSet = !json[QString("optimizationType")].isNull() && m_optimization_type_isValid;

    m_recommendation_compliance_isValid = ::OpenAPI::fromJsonValue(m_recommendation_compliance, json[QString("recommendationCompliance")]);
    m_recommendation_compliance_isSet = !json[QString("recommendationCompliance")].isNull() && m_recommendation_compliance_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_suggested_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_changes, json[QString("suggestedChanges")]);
    m_suggested_changes_isSet = !json[QString("suggestedChanges")].isNull() && m_suggested_changes_isValid;
}

QString OAIConfigRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_app_component_name_isSet) {
        obj.insert(QString("appComponentName"), ::OpenAPI::toJsonValue(m_app_component_name));
    }
    if (m_compliance.isSet()) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_cost.isSet()) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ha_architecture.isSet()) {
        obj.insert(QString("haArchitecture"), ::OpenAPI::toJsonValue(m_ha_architecture));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optimization_type.isSet()) {
        obj.insert(QString("optimizationType"), ::OpenAPI::toJsonValue(m_optimization_type));
    }
    if (m_recommendation_compliance.isSet()) {
        obj.insert(QString("recommendationCompliance"), ::OpenAPI::toJsonValue(m_recommendation_compliance));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_suggested_changes.isSet()) {
        obj.insert(QString("suggestedChanges"), ::OpenAPI::toJsonValue(m_suggested_changes));
    }
    return obj;
}

QString OAIConfigRecommendation::getAppComponentName() const {
    return m_app_component_name;
}
void OAIConfigRecommendation::setAppComponentName(const QString &app_component_name) {
    m_app_component_name = app_component_name;
    m_app_component_name_isSet = true;
}

bool OAIConfigRecommendation::is_app_component_name_Set() const{
    return m_app_component_name_isSet;
}

bool OAIConfigRecommendation::is_app_component_name_Valid() const{
    return m_app_component_name_isValid;
}

QMap OAIConfigRecommendation::getCompliance() const {
    return m_compliance;
}
void OAIConfigRecommendation::setCompliance(const QMap &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAIConfigRecommendation::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAIConfigRecommendation::is_compliance_Valid() const{
    return m_compliance_isValid;
}

OAIAppComponentCompliance_cost OAIConfigRecommendation::getCost() const {
    return m_cost;
}
void OAIConfigRecommendation::setCost(const OAIAppComponentCompliance_cost &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIConfigRecommendation::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIConfigRecommendation::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIConfigRecommendation::getDescription() const {
    return m_description;
}
void OAIConfigRecommendation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConfigRecommendation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConfigRecommendation::is_description_Valid() const{
    return m_description_isValid;
}

OAIHaArchitecture OAIConfigRecommendation::getHaArchitecture() const {
    return m_ha_architecture;
}
void OAIConfigRecommendation::setHaArchitecture(const OAIHaArchitecture &ha_architecture) {
    m_ha_architecture = ha_architecture;
    m_ha_architecture_isSet = true;
}

bool OAIConfigRecommendation::is_ha_architecture_Set() const{
    return m_ha_architecture_isSet;
}

bool OAIConfigRecommendation::is_ha_architecture_Valid() const{
    return m_ha_architecture_isValid;
}

QString OAIConfigRecommendation::getName() const {
    return m_name;
}
void OAIConfigRecommendation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfigRecommendation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfigRecommendation::is_name_Valid() const{
    return m_name_isValid;
}

OAIConfigRecommendationOptimizationType OAIConfigRecommendation::getOptimizationType() const {
    return m_optimization_type;
}
void OAIConfigRecommendation::setOptimizationType(const OAIConfigRecommendationOptimizationType &optimization_type) {
    m_optimization_type = optimization_type;
    m_optimization_type_isSet = true;
}

bool OAIConfigRecommendation::is_optimization_type_Set() const{
    return m_optimization_type_isSet;
}

bool OAIConfigRecommendation::is_optimization_type_Valid() const{
    return m_optimization_type_isValid;
}

QMap OAIConfigRecommendation::getRecommendationCompliance() const {
    return m_recommendation_compliance;
}
void OAIConfigRecommendation::setRecommendationCompliance(const QMap &recommendation_compliance) {
    m_recommendation_compliance = recommendation_compliance;
    m_recommendation_compliance_isSet = true;
}

bool OAIConfigRecommendation::is_recommendation_compliance_Set() const{
    return m_recommendation_compliance_isSet;
}

bool OAIConfigRecommendation::is_recommendation_compliance_Valid() const{
    return m_recommendation_compliance_isValid;
}

QString OAIConfigRecommendation::getReferenceId() const {
    return m_reference_id;
}
void OAIConfigRecommendation::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIConfigRecommendation::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIConfigRecommendation::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList OAIConfigRecommendation::getSuggestedChanges() const {
    return m_suggested_changes;
}
void OAIConfigRecommendation::setSuggestedChanges(const QList &suggested_changes) {
    m_suggested_changes = suggested_changes;
    m_suggested_changes_isSet = true;
}

bool OAIConfigRecommendation::is_suggested_changes_Set() const{
    return m_suggested_changes_isSet;
}

bool OAIConfigRecommendation::is_suggested_changes_Valid() const{
    return m_suggested_changes_isValid;
}

bool OAIConfigRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ha_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_changes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_optimization_type_isValid && m_reference_id_isValid && true;
}

} // namespace OpenAPI
