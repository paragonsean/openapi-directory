/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportResourcesToDraftAppVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportResourcesToDraftAppVersionResponse::OAIImportResourcesToDraftAppVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportResourcesToDraftAppVersionResponse::OAIImportResourcesToDraftAppVersionResponse() {
    this->initializeModel();
}

OAIImportResourcesToDraftAppVersionResponse::~OAIImportResourcesToDraftAppVersionResponse() {}

void OAIImportResourcesToDraftAppVersionResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_eks_sources_isSet = false;
    m_eks_sources_isValid = false;

    m_source_arns_isSet = false;
    m_source_arns_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_terraform_sources_isSet = false;
    m_terraform_sources_isValid = false;
}

void OAIImportResourcesToDraftAppVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportResourcesToDraftAppVersionResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_eks_sources_isValid = ::OpenAPI::fromJsonValue(m_eks_sources, json[QString("eksSources")]);
    m_eks_sources_isSet = !json[QString("eksSources")].isNull() && m_eks_sources_isValid;

    m_source_arns_isValid = ::OpenAPI::fromJsonValue(m_source_arns, json[QString("sourceArns")]);
    m_source_arns_isSet = !json[QString("sourceArns")].isNull() && m_source_arns_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_terraform_sources_isValid = ::OpenAPI::fromJsonValue(m_terraform_sources, json[QString("terraformSources")]);
    m_terraform_sources_isSet = !json[QString("terraformSources")].isNull() && m_terraform_sources_isValid;
}

QString OAIImportResourcesToDraftAppVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportResourcesToDraftAppVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_eks_sources.isSet()) {
        obj.insert(QString("eksSources"), ::OpenAPI::toJsonValue(m_eks_sources));
    }
    if (m_source_arns.isSet()) {
        obj.insert(QString("sourceArns"), ::OpenAPI::toJsonValue(m_source_arns));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_terraform_sources.isSet()) {
        obj.insert(QString("terraformSources"), ::OpenAPI::toJsonValue(m_terraform_sources));
    }
    return obj;
}

QString OAIImportResourcesToDraftAppVersionResponse::getAppArn() const {
    return m_app_arn;
}
void OAIImportResourcesToDraftAppVersionResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIImportResourcesToDraftAppVersionResponse::getAppVersion() const {
    return m_app_version;
}
void OAIImportResourcesToDraftAppVersionResponse::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QList OAIImportResourcesToDraftAppVersionResponse::getEksSources() const {
    return m_eks_sources;
}
void OAIImportResourcesToDraftAppVersionResponse::setEksSources(const QList &eks_sources) {
    m_eks_sources = eks_sources;
    m_eks_sources_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_eks_sources_Set() const{
    return m_eks_sources_isSet;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_eks_sources_Valid() const{
    return m_eks_sources_isValid;
}

QList OAIImportResourcesToDraftAppVersionResponse::getSourceArns() const {
    return m_source_arns;
}
void OAIImportResourcesToDraftAppVersionResponse::setSourceArns(const QList &source_arns) {
    m_source_arns = source_arns;
    m_source_arns_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_source_arns_Set() const{
    return m_source_arns_isSet;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_source_arns_Valid() const{
    return m_source_arns_isValid;
}

OAIResourceImportStatusType OAIImportResourcesToDraftAppVersionResponse::getStatus() const {
    return m_status;
}
void OAIImportResourcesToDraftAppVersionResponse::setStatus(const OAIResourceImportStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIImportResourcesToDraftAppVersionResponse::getTerraformSources() const {
    return m_terraform_sources;
}
void OAIImportResourcesToDraftAppVersionResponse::setTerraformSources(const QList &terraform_sources) {
    m_terraform_sources = terraform_sources;
    m_terraform_sources_isSet = true;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_terraform_sources_Set() const{
    return m_terraform_sources_isSet;
}

bool OAIImportResourcesToDraftAppVersionResponse::is_terraform_sources_Valid() const{
    return m_terraform_sources_isValid;
}

bool OAIImportResourcesToDraftAppVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eks_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportResourcesToDraftAppVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
