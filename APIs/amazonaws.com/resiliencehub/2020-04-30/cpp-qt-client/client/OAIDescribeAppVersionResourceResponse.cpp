/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppVersionResourceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppVersionResourceResponse::OAIDescribeAppVersionResourceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppVersionResourceResponse::OAIDescribeAppVersionResourceResponse() {
    this->initializeModel();
}

OAIDescribeAppVersionResourceResponse::~OAIDescribeAppVersionResourceResponse() {}

void OAIDescribeAppVersionResourceResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_physical_resource_isSet = false;
    m_physical_resource_isValid = false;
}

void OAIDescribeAppVersionResourceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppVersionResourceResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_physical_resource_isValid = ::OpenAPI::fromJsonValue(m_physical_resource, json[QString("physicalResource")]);
    m_physical_resource_isSet = !json[QString("physicalResource")].isNull() && m_physical_resource_isValid;
}

QString OAIDescribeAppVersionResourceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppVersionResourceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_physical_resource.isSet()) {
        obj.insert(QString("physicalResource"), ::OpenAPI::toJsonValue(m_physical_resource));
    }
    return obj;
}

QString OAIDescribeAppVersionResourceResponse::getAppArn() const {
    return m_app_arn;
}
void OAIDescribeAppVersionResourceResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDescribeAppVersionResourceResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDescribeAppVersionResourceResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDescribeAppVersionResourceResponse::getAppVersion() const {
    return m_app_version;
}
void OAIDescribeAppVersionResourceResponse::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDescribeAppVersionResourceResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDescribeAppVersionResourceResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

OAICreateAppVersionResourceResponse_physicalResource OAIDescribeAppVersionResourceResponse::getPhysicalResource() const {
    return m_physical_resource;
}
void OAIDescribeAppVersionResourceResponse::setPhysicalResource(const OAICreateAppVersionResourceResponse_physicalResource &physical_resource) {
    m_physical_resource = physical_resource;
    m_physical_resource_isSet = true;
}

bool OAIDescribeAppVersionResourceResponse::is_physical_resource_Set() const{
    return m_physical_resource_isSet;
}

bool OAIDescribeAppVersionResourceResponse::is_physical_resource_Valid() const{
    return m_physical_resource_isValid;
}

bool OAIDescribeAppVersionResourceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppVersionResourceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && true;
}

} // namespace OpenAPI
