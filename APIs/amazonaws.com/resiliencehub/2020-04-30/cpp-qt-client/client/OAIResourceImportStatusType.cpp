/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceImportStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceImportStatusType::OAIResourceImportStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceImportStatusType::OAIResourceImportStatusType() {
    this->initializeModel();
}

OAIResourceImportStatusType::~OAIResourceImportStatusType() {}

void OAIResourceImportStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResourceImportStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResourceImportStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceImportStatusType::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceImportStatusType::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceImportStatusType::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceImportStatusType::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResourceImportStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResourceImportStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResourceImportStatusType::PENDING:
            val = "Pending";
            break;
        case eOAIResourceImportStatusType::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIResourceImportStatusType::FAILED:
            val = "Failed";
            break;
        case eOAIResourceImportStatusType::SUCCESS:
            val = "Success";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResourceImportStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResourceImportStatusType::eOAIResourceImportStatusType OAIResourceImportStatusType::getValue() const {
    return m_value;
}

void OAIResourceImportStatusType::setValue(const OAIResourceImportStatusType::eOAIResourceImportStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResourceImportStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAIResourceImportStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
