/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAppAssessmentResponse_assessment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAppAssessmentResponse_assessment::OAIStartAppAssessmentResponse_assessment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAppAssessmentResponse_assessment::OAIStartAppAssessmentResponse_assessment() {
    this->initializeModel();
}

OAIStartAppAssessmentResponse_assessment::~OAIStartAppAssessmentResponse_assessment() {}

void OAIStartAppAssessmentResponse_assessment::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_assessment_arn_isSet = false;
    m_assessment_arn_isValid = false;

    m_assessment_name_isSet = false;
    m_assessment_name_isValid = false;

    m_assessment_status_isSet = false;
    m_assessment_status_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_compliance_status_isSet = false;
    m_compliance_status_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_drift_status_isSet = false;
    m_drift_status_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_invoker_isSet = false;
    m_invoker_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_resiliency_score_isSet = false;
    m_resiliency_score_isValid = false;

    m_resource_errors_details_isSet = false;
    m_resource_errors_details_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_name_isSet = false;
    m_version_name_isValid = false;
}

void OAIStartAppAssessmentResponse_assessment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAppAssessmentResponse_assessment::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_assessment_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_arn, json[QString("assessmentArn")]);
    m_assessment_arn_isSet = !json[QString("assessmentArn")].isNull() && m_assessment_arn_isValid;

    m_assessment_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_name, json[QString("assessmentName")]);
    m_assessment_name_isSet = !json[QString("assessmentName")].isNull() && m_assessment_name_isValid;

    m_assessment_status_isValid = ::OpenAPI::fromJsonValue(m_assessment_status, json[QString("assessmentStatus")]);
    m_assessment_status_isSet = !json[QString("assessmentStatus")].isNull() && m_assessment_status_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_compliance_status, json[QString("complianceStatus")]);
    m_compliance_status_isSet = !json[QString("complianceStatus")].isNull() && m_compliance_status_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_drift_status_isValid = ::OpenAPI::fromJsonValue(m_drift_status, json[QString("driftStatus")]);
    m_drift_status_isSet = !json[QString("driftStatus")].isNull() && m_drift_status_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_invoker_isValid = ::OpenAPI::fromJsonValue(m_invoker, json[QString("invoker")]);
    m_invoker_isSet = !json[QString("invoker")].isNull() && m_invoker_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_resiliency_score_isValid = ::OpenAPI::fromJsonValue(m_resiliency_score, json[QString("resiliencyScore")]);
    m_resiliency_score_isSet = !json[QString("resiliencyScore")].isNull() && m_resiliency_score_isValid;

    m_resource_errors_details_isValid = ::OpenAPI::fromJsonValue(m_resource_errors_details, json[QString("resourceErrorsDetails")]);
    m_resource_errors_details_isSet = !json[QString("resourceErrorsDetails")].isNull() && m_resource_errors_details_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_name_isValid = ::OpenAPI::fromJsonValue(m_version_name, json[QString("versionName")]);
    m_version_name_isSet = !json[QString("versionName")].isNull() && m_version_name_isValid;
}

QString OAIStartAppAssessmentResponse_assessment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAppAssessmentResponse_assessment::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_assessment_arn_isSet) {
        obj.insert(QString("assessmentArn"), ::OpenAPI::toJsonValue(m_assessment_arn));
    }
    if (m_assessment_name_isSet) {
        obj.insert(QString("assessmentName"), ::OpenAPI::toJsonValue(m_assessment_name));
    }
    if (m_assessment_status.isSet()) {
        obj.insert(QString("assessmentStatus"), ::OpenAPI::toJsonValue(m_assessment_status));
    }
    if (m_compliance.isSet()) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_compliance_status.isSet()) {
        obj.insert(QString("complianceStatus"), ::OpenAPI::toJsonValue(m_compliance_status));
    }
    if (m_cost.isSet()) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_drift_status.isSet()) {
        obj.insert(QString("driftStatus"), ::OpenAPI::toJsonValue(m_drift_status));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_invoker.isSet()) {
        obj.insert(QString("invoker"), ::OpenAPI::toJsonValue(m_invoker));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_resiliency_score.isSet()) {
        obj.insert(QString("resiliencyScore"), ::OpenAPI::toJsonValue(m_resiliency_score));
    }
    if (m_resource_errors_details.isSet()) {
        obj.insert(QString("resourceErrorsDetails"), ::OpenAPI::toJsonValue(m_resource_errors_details));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_name_isSet) {
        obj.insert(QString("versionName"), ::OpenAPI::toJsonValue(m_version_name));
    }
    return obj;
}

QString OAIStartAppAssessmentResponse_assessment::getAppArn() const {
    return m_app_arn;
}
void OAIStartAppAssessmentResponse_assessment::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIStartAppAssessmentResponse_assessment::getAppVersion() const {
    return m_app_version;
}
void OAIStartAppAssessmentResponse_assessment::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIStartAppAssessmentResponse_assessment::getAssessmentArn() const {
    return m_assessment_arn;
}
void OAIStartAppAssessmentResponse_assessment::setAssessmentArn(const QString &assessment_arn) {
    m_assessment_arn = assessment_arn;
    m_assessment_arn_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_assessment_arn_Set() const{
    return m_assessment_arn_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_assessment_arn_Valid() const{
    return m_assessment_arn_isValid;
}

QString OAIStartAppAssessmentResponse_assessment::getAssessmentName() const {
    return m_assessment_name;
}
void OAIStartAppAssessmentResponse_assessment::setAssessmentName(const QString &assessment_name) {
    m_assessment_name = assessment_name;
    m_assessment_name_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_assessment_name_Set() const{
    return m_assessment_name_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_assessment_name_Valid() const{
    return m_assessment_name_isValid;
}

OAIAssessmentStatus OAIStartAppAssessmentResponse_assessment::getAssessmentStatus() const {
    return m_assessment_status;
}
void OAIStartAppAssessmentResponse_assessment::setAssessmentStatus(const OAIAssessmentStatus &assessment_status) {
    m_assessment_status = assessment_status;
    m_assessment_status_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_assessment_status_Set() const{
    return m_assessment_status_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_assessment_status_Valid() const{
    return m_assessment_status_isValid;
}

QMap OAIStartAppAssessmentResponse_assessment::getCompliance() const {
    return m_compliance;
}
void OAIStartAppAssessmentResponse_assessment::setCompliance(const QMap &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_compliance_Valid() const{
    return m_compliance_isValid;
}

OAIComplianceStatus OAIStartAppAssessmentResponse_assessment::getComplianceStatus() const {
    return m_compliance_status;
}
void OAIStartAppAssessmentResponse_assessment::setComplianceStatus(const OAIComplianceStatus &compliance_status) {
    m_compliance_status = compliance_status;
    m_compliance_status_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_compliance_status_Set() const{
    return m_compliance_status_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_compliance_status_Valid() const{
    return m_compliance_status_isValid;
}

OAIAppAssessment_cost OAIStartAppAssessmentResponse_assessment::getCost() const {
    return m_cost;
}
void OAIStartAppAssessmentResponse_assessment::setCost(const OAIAppAssessment_cost &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_cost_Valid() const{
    return m_cost_isValid;
}

OAIDriftStatus OAIStartAppAssessmentResponse_assessment::getDriftStatus() const {
    return m_drift_status;
}
void OAIStartAppAssessmentResponse_assessment::setDriftStatus(const OAIDriftStatus &drift_status) {
    m_drift_status = drift_status;
    m_drift_status_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_drift_status_Set() const{
    return m_drift_status_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_drift_status_Valid() const{
    return m_drift_status_isValid;
}

QDateTime OAIStartAppAssessmentResponse_assessment::getEndTime() const {
    return m_end_time;
}
void OAIStartAppAssessmentResponse_assessment::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIAssessmentInvoker OAIStartAppAssessmentResponse_assessment::getInvoker() const {
    return m_invoker;
}
void OAIStartAppAssessmentResponse_assessment::setInvoker(const OAIAssessmentInvoker &invoker) {
    m_invoker = invoker;
    m_invoker_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_invoker_Set() const{
    return m_invoker_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_invoker_Valid() const{
    return m_invoker_isValid;
}

QString OAIStartAppAssessmentResponse_assessment::getMessage() const {
    return m_message;
}
void OAIStartAppAssessmentResponse_assessment::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_message_Valid() const{
    return m_message_isValid;
}

OAIAppAssessment_policy OAIStartAppAssessmentResponse_assessment::getPolicy() const {
    return m_policy;
}
void OAIStartAppAssessmentResponse_assessment::setPolicy(const OAIAppAssessment_policy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIAppAssessment_resiliencyScore OAIStartAppAssessmentResponse_assessment::getResiliencyScore() const {
    return m_resiliency_score;
}
void OAIStartAppAssessmentResponse_assessment::setResiliencyScore(const OAIAppAssessment_resiliencyScore &resiliency_score) {
    m_resiliency_score = resiliency_score;
    m_resiliency_score_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_resiliency_score_Set() const{
    return m_resiliency_score_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_resiliency_score_Valid() const{
    return m_resiliency_score_isValid;
}

OAIAppAssessment_resourceErrorsDetails OAIStartAppAssessmentResponse_assessment::getResourceErrorsDetails() const {
    return m_resource_errors_details;
}
void OAIStartAppAssessmentResponse_assessment::setResourceErrorsDetails(const OAIAppAssessment_resourceErrorsDetails &resource_errors_details) {
    m_resource_errors_details = resource_errors_details;
    m_resource_errors_details_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_resource_errors_details_Set() const{
    return m_resource_errors_details_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_resource_errors_details_Valid() const{
    return m_resource_errors_details_isValid;
}

QDateTime OAIStartAppAssessmentResponse_assessment::getStartTime() const {
    return m_start_time;
}
void OAIStartAppAssessmentResponse_assessment::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QMap OAIStartAppAssessmentResponse_assessment::getTags() const {
    return m_tags;
}
void OAIStartAppAssessmentResponse_assessment::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIStartAppAssessmentResponse_assessment::getVersionName() const {
    return m_version_name;
}
void OAIStartAppAssessmentResponse_assessment::setVersionName(const QString &version_name) {
    m_version_name = version_name;
    m_version_name_isSet = true;
}

bool OAIStartAppAssessmentResponse_assessment::is_version_name_Set() const{
    return m_version_name_isSet;
}

bool OAIStartAppAssessmentResponse_assessment::is_version_name_Valid() const{
    return m_version_name_isValid;
}

bool OAIStartAppAssessmentResponse_assessment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resiliency_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_errors_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAppAssessmentResponse_assessment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_arn_isValid && m_assessment_status_isValid && m_invoker_isValid && true;
}

} // namespace OpenAPI
