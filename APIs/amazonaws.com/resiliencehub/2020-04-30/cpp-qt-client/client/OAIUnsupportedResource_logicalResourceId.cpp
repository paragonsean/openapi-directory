/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnsupportedResource_logicalResourceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnsupportedResource_logicalResourceId::OAIUnsupportedResource_logicalResourceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnsupportedResource_logicalResourceId::OAIUnsupportedResource_logicalResourceId() {
    this->initializeModel();
}

OAIUnsupportedResource_logicalResourceId::~OAIUnsupportedResource_logicalResourceId() {}

void OAIUnsupportedResource_logicalResourceId::initializeModel() {

    m_eks_source_name_isSet = false;
    m_eks_source_name_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_logical_stack_name_isSet = false;
    m_logical_stack_name_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_terraform_source_name_isSet = false;
    m_terraform_source_name_isValid = false;
}

void OAIUnsupportedResource_logicalResourceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnsupportedResource_logicalResourceId::fromJsonObject(QJsonObject json) {

    m_eks_source_name_isValid = ::OpenAPI::fromJsonValue(m_eks_source_name, json[QString("eksSourceName")]);
    m_eks_source_name_isSet = !json[QString("eksSourceName")].isNull() && m_eks_source_name_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_logical_stack_name_isValid = ::OpenAPI::fromJsonValue(m_logical_stack_name, json[QString("logicalStackName")]);
    m_logical_stack_name_isSet = !json[QString("logicalStackName")].isNull() && m_logical_stack_name_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_terraform_source_name_isValid = ::OpenAPI::fromJsonValue(m_terraform_source_name, json[QString("terraformSourceName")]);
    m_terraform_source_name_isSet = !json[QString("terraformSourceName")].isNull() && m_terraform_source_name_isValid;
}

QString OAIUnsupportedResource_logicalResourceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnsupportedResource_logicalResourceId::asJsonObject() const {
    QJsonObject obj;
    if (m_eks_source_name_isSet) {
        obj.insert(QString("eksSourceName"), ::OpenAPI::toJsonValue(m_eks_source_name));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_logical_stack_name_isSet) {
        obj.insert(QString("logicalStackName"), ::OpenAPI::toJsonValue(m_logical_stack_name));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_terraform_source_name_isSet) {
        obj.insert(QString("terraformSourceName"), ::OpenAPI::toJsonValue(m_terraform_source_name));
    }
    return obj;
}

QString OAIUnsupportedResource_logicalResourceId::getEksSourceName() const {
    return m_eks_source_name;
}
void OAIUnsupportedResource_logicalResourceId::setEksSourceName(const QString &eks_source_name) {
    m_eks_source_name = eks_source_name;
    m_eks_source_name_isSet = true;
}

bool OAIUnsupportedResource_logicalResourceId::is_eks_source_name_Set() const{
    return m_eks_source_name_isSet;
}

bool OAIUnsupportedResource_logicalResourceId::is_eks_source_name_Valid() const{
    return m_eks_source_name_isValid;
}

QString OAIUnsupportedResource_logicalResourceId::getIdentifier() const {
    return m_identifier;
}
void OAIUnsupportedResource_logicalResourceId::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIUnsupportedResource_logicalResourceId::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIUnsupportedResource_logicalResourceId::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIUnsupportedResource_logicalResourceId::getLogicalStackName() const {
    return m_logical_stack_name;
}
void OAIUnsupportedResource_logicalResourceId::setLogicalStackName(const QString &logical_stack_name) {
    m_logical_stack_name = logical_stack_name;
    m_logical_stack_name_isSet = true;
}

bool OAIUnsupportedResource_logicalResourceId::is_logical_stack_name_Set() const{
    return m_logical_stack_name_isSet;
}

bool OAIUnsupportedResource_logicalResourceId::is_logical_stack_name_Valid() const{
    return m_logical_stack_name_isValid;
}

QString OAIUnsupportedResource_logicalResourceId::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIUnsupportedResource_logicalResourceId::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIUnsupportedResource_logicalResourceId::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIUnsupportedResource_logicalResourceId::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIUnsupportedResource_logicalResourceId::getTerraformSourceName() const {
    return m_terraform_source_name;
}
void OAIUnsupportedResource_logicalResourceId::setTerraformSourceName(const QString &terraform_source_name) {
    m_terraform_source_name = terraform_source_name;
    m_terraform_source_name_isSet = true;
}

bool OAIUnsupportedResource_logicalResourceId::is_terraform_source_name_Set() const{
    return m_terraform_source_name_isSet;
}

bool OAIUnsupportedResource_logicalResourceId::is_terraform_source_name_Valid() const{
    return m_terraform_source_name_isValid;
}

bool OAIUnsupportedResource_logicalResourceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eks_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnsupportedResource_logicalResourceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
