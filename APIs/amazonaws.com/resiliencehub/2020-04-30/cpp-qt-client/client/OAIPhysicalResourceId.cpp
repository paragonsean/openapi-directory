/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalResourceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalResourceId::OAIPhysicalResourceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalResourceId::OAIPhysicalResourceId() {
    this->initializeModel();
}

OAIPhysicalResourceId::~OAIPhysicalResourceId() {}

void OAIPhysicalResourceId::initializeModel() {

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_aws_region_isSet = false;
    m_aws_region_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPhysicalResourceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalResourceId::fromJsonObject(QJsonObject json) {

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_aws_region_isValid = ::OpenAPI::fromJsonValue(m_aws_region, json[QString("awsRegion")]);
    m_aws_region_isSet = !json[QString("awsRegion")].isNull() && m_aws_region_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPhysicalResourceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalResourceId::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_account_id_isSet) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_aws_region_isSet) {
        obj.insert(QString("awsRegion"), ::OpenAPI::toJsonValue(m_aws_region));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPhysicalResourceId::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIPhysicalResourceId::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIPhysicalResourceId::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIPhysicalResourceId::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAIPhysicalResourceId::getAwsRegion() const {
    return m_aws_region;
}
void OAIPhysicalResourceId::setAwsRegion(const QString &aws_region) {
    m_aws_region = aws_region;
    m_aws_region_isSet = true;
}

bool OAIPhysicalResourceId::is_aws_region_Set() const{
    return m_aws_region_isSet;
}

bool OAIPhysicalResourceId::is_aws_region_Valid() const{
    return m_aws_region_isValid;
}

QString OAIPhysicalResourceId::getIdentifier() const {
    return m_identifier;
}
void OAIPhysicalResourceId::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPhysicalResourceId::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPhysicalResourceId::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIPhysicalIdentifierType OAIPhysicalResourceId::getType() const {
    return m_type;
}
void OAIPhysicalResourceId::setType(const OAIPhysicalIdentifierType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPhysicalResourceId::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPhysicalResourceId::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPhysicalResourceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalResourceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
