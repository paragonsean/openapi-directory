/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolveAppVersionResourcesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolveAppVersionResourcesResponse::OAIResolveAppVersionResourcesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolveAppVersionResourcesResponse::OAIResolveAppVersionResourcesResponse() {
    this->initializeModel();
}

OAIResolveAppVersionResourcesResponse::~OAIResolveAppVersionResourcesResponse() {}

void OAIResolveAppVersionResourcesResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_resolution_id_isSet = false;
    m_resolution_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIResolveAppVersionResourcesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResolveAppVersionResourcesResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_resolution_id_isValid = ::OpenAPI::fromJsonValue(m_resolution_id, json[QString("resolutionId")]);
    m_resolution_id_isSet = !json[QString("resolutionId")].isNull() && m_resolution_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIResolveAppVersionResourcesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResolveAppVersionResourcesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_resolution_id_isSet) {
        obj.insert(QString("resolutionId"), ::OpenAPI::toJsonValue(m_resolution_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIResolveAppVersionResourcesResponse::getAppArn() const {
    return m_app_arn;
}
void OAIResolveAppVersionResourcesResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIResolveAppVersionResourcesResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIResolveAppVersionResourcesResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIResolveAppVersionResourcesResponse::getAppVersion() const {
    return m_app_version;
}
void OAIResolveAppVersionResourcesResponse::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIResolveAppVersionResourcesResponse::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIResolveAppVersionResourcesResponse::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIResolveAppVersionResourcesResponse::getResolutionId() const {
    return m_resolution_id;
}
void OAIResolveAppVersionResourcesResponse::setResolutionId(const QString &resolution_id) {
    m_resolution_id = resolution_id;
    m_resolution_id_isSet = true;
}

bool OAIResolveAppVersionResourcesResponse::is_resolution_id_Set() const{
    return m_resolution_id_isSet;
}

bool OAIResolveAppVersionResourcesResponse::is_resolution_id_Valid() const{
    return m_resolution_id_isValid;
}

OAIResourceResolutionStatusType OAIResolveAppVersionResourcesResponse::getStatus() const {
    return m_status;
}
void OAIResolveAppVersionResourcesResponse::setStatus(const OAIResourceResolutionStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResolveAppVersionResourcesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResolveAppVersionResourcesResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIResolveAppVersionResourcesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResolveAppVersionResourcesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_app_version_isValid && m_resolution_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
