/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAppInputSource_request_terraformSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAppInputSource_request_terraformSource::OAIDeleteAppInputSource_request_terraformSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAppInputSource_request_terraformSource::OAIDeleteAppInputSource_request_terraformSource() {
    this->initializeModel();
}

OAIDeleteAppInputSource_request_terraformSource::~OAIDeleteAppInputSource_request_terraformSource() {}

void OAIDeleteAppInputSource_request_terraformSource::initializeModel() {

    m_s3_state_file_url_isSet = false;
    m_s3_state_file_url_isValid = false;
}

void OAIDeleteAppInputSource_request_terraformSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAppInputSource_request_terraformSource::fromJsonObject(QJsonObject json) {

    m_s3_state_file_url_isValid = ::OpenAPI::fromJsonValue(m_s3_state_file_url, json[QString("s3StateFileUrl")]);
    m_s3_state_file_url_isSet = !json[QString("s3StateFileUrl")].isNull() && m_s3_state_file_url_isValid;
}

QString OAIDeleteAppInputSource_request_terraformSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAppInputSource_request_terraformSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_state_file_url_isSet) {
        obj.insert(QString("s3StateFileUrl"), ::OpenAPI::toJsonValue(m_s3_state_file_url));
    }
    return obj;
}

QString OAIDeleteAppInputSource_request_terraformSource::getS3StateFileUrl() const {
    return m_s3_state_file_url;
}
void OAIDeleteAppInputSource_request_terraformSource::setS3StateFileUrl(const QString &s3_state_file_url) {
    m_s3_state_file_url = s3_state_file_url;
    m_s3_state_file_url_isSet = true;
}

bool OAIDeleteAppInputSource_request_terraformSource::is_s3_state_file_url_Set() const{
    return m_s3_state_file_url_isSet;
}

bool OAIDeleteAppInputSource_request_terraformSource::is_s3_state_file_url_Valid() const{
    return m_s3_state_file_url_isValid;
}

bool OAIDeleteAppInputSource_request_terraformSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_state_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAppInputSource_request_terraformSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
