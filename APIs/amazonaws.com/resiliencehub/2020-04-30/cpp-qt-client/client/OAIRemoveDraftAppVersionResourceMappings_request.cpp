/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveDraftAppVersionResourceMappings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveDraftAppVersionResourceMappings_request::OAIRemoveDraftAppVersionResourceMappings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveDraftAppVersionResourceMappings_request::OAIRemoveDraftAppVersionResourceMappings_request() {
    this->initializeModel();
}

OAIRemoveDraftAppVersionResourceMappings_request::~OAIRemoveDraftAppVersionResourceMappings_request() {}

void OAIRemoveDraftAppVersionResourceMappings_request::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_app_registry_app_names_isSet = false;
    m_app_registry_app_names_isValid = false;

    m_eks_source_names_isSet = false;
    m_eks_source_names_isValid = false;

    m_logical_stack_names_isSet = false;
    m_logical_stack_names_isValid = false;

    m_resource_group_names_isSet = false;
    m_resource_group_names_isValid = false;

    m_resource_names_isSet = false;
    m_resource_names_isValid = false;

    m_terraform_source_names_isSet = false;
    m_terraform_source_names_isValid = false;
}

void OAIRemoveDraftAppVersionResourceMappings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveDraftAppVersionResourceMappings_request::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_app_registry_app_names_isValid = ::OpenAPI::fromJsonValue(m_app_registry_app_names, json[QString("appRegistryAppNames")]);
    m_app_registry_app_names_isSet = !json[QString("appRegistryAppNames")].isNull() && m_app_registry_app_names_isValid;

    m_eks_source_names_isValid = ::OpenAPI::fromJsonValue(m_eks_source_names, json[QString("eksSourceNames")]);
    m_eks_source_names_isSet = !json[QString("eksSourceNames")].isNull() && m_eks_source_names_isValid;

    m_logical_stack_names_isValid = ::OpenAPI::fromJsonValue(m_logical_stack_names, json[QString("logicalStackNames")]);
    m_logical_stack_names_isSet = !json[QString("logicalStackNames")].isNull() && m_logical_stack_names_isValid;

    m_resource_group_names_isValid = ::OpenAPI::fromJsonValue(m_resource_group_names, json[QString("resourceGroupNames")]);
    m_resource_group_names_isSet = !json[QString("resourceGroupNames")].isNull() && m_resource_group_names_isValid;

    m_resource_names_isValid = ::OpenAPI::fromJsonValue(m_resource_names, json[QString("resourceNames")]);
    m_resource_names_isSet = !json[QString("resourceNames")].isNull() && m_resource_names_isValid;

    m_terraform_source_names_isValid = ::OpenAPI::fromJsonValue(m_terraform_source_names, json[QString("terraformSourceNames")]);
    m_terraform_source_names_isSet = !json[QString("terraformSourceNames")].isNull() && m_terraform_source_names_isValid;
}

QString OAIRemoveDraftAppVersionResourceMappings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveDraftAppVersionResourceMappings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_app_registry_app_names.size() > 0) {
        obj.insert(QString("appRegistryAppNames"), ::OpenAPI::toJsonValue(m_app_registry_app_names));
    }
    if (m_eks_source_names.size() > 0) {
        obj.insert(QString("eksSourceNames"), ::OpenAPI::toJsonValue(m_eks_source_names));
    }
    if (m_logical_stack_names.size() > 0) {
        obj.insert(QString("logicalStackNames"), ::OpenAPI::toJsonValue(m_logical_stack_names));
    }
    if (m_resource_group_names.size() > 0) {
        obj.insert(QString("resourceGroupNames"), ::OpenAPI::toJsonValue(m_resource_group_names));
    }
    if (m_resource_names.size() > 0) {
        obj.insert(QString("resourceNames"), ::OpenAPI::toJsonValue(m_resource_names));
    }
    if (m_terraform_source_names.size() > 0) {
        obj.insert(QString("terraformSourceNames"), ::OpenAPI::toJsonValue(m_terraform_source_names));
    }
    return obj;
}

QString OAIRemoveDraftAppVersionResourceMappings_request::getAppArn() const {
    return m_app_arn;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QList<QString> OAIRemoveDraftAppVersionResourceMappings_request::getAppRegistryAppNames() const {
    return m_app_registry_app_names;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setAppRegistryAppNames(const QList<QString> &app_registry_app_names) {
    m_app_registry_app_names = app_registry_app_names;
    m_app_registry_app_names_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_app_registry_app_names_Set() const{
    return m_app_registry_app_names_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_app_registry_app_names_Valid() const{
    return m_app_registry_app_names_isValid;
}

QList<QString> OAIRemoveDraftAppVersionResourceMappings_request::getEksSourceNames() const {
    return m_eks_source_names;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setEksSourceNames(const QList<QString> &eks_source_names) {
    m_eks_source_names = eks_source_names;
    m_eks_source_names_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_eks_source_names_Set() const{
    return m_eks_source_names_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_eks_source_names_Valid() const{
    return m_eks_source_names_isValid;
}

QList<QString> OAIRemoveDraftAppVersionResourceMappings_request::getLogicalStackNames() const {
    return m_logical_stack_names;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setLogicalStackNames(const QList<QString> &logical_stack_names) {
    m_logical_stack_names = logical_stack_names;
    m_logical_stack_names_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_logical_stack_names_Set() const{
    return m_logical_stack_names_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_logical_stack_names_Valid() const{
    return m_logical_stack_names_isValid;
}

QList<QString> OAIRemoveDraftAppVersionResourceMappings_request::getResourceGroupNames() const {
    return m_resource_group_names;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setResourceGroupNames(const QList<QString> &resource_group_names) {
    m_resource_group_names = resource_group_names;
    m_resource_group_names_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_resource_group_names_Set() const{
    return m_resource_group_names_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_resource_group_names_Valid() const{
    return m_resource_group_names_isValid;
}

QList<QString> OAIRemoveDraftAppVersionResourceMappings_request::getResourceNames() const {
    return m_resource_names;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setResourceNames(const QList<QString> &resource_names) {
    m_resource_names = resource_names;
    m_resource_names_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_resource_names_Set() const{
    return m_resource_names_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_resource_names_Valid() const{
    return m_resource_names_isValid;
}

QList<QString> OAIRemoveDraftAppVersionResourceMappings_request::getTerraformSourceNames() const {
    return m_terraform_source_names;
}
void OAIRemoveDraftAppVersionResourceMappings_request::setTerraformSourceNames(const QList<QString> &terraform_source_names) {
    m_terraform_source_names = terraform_source_names;
    m_terraform_source_names_isSet = true;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_terraform_source_names_Set() const{
    return m_terraform_source_names_isSet;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::is_terraform_source_names_Valid() const{
    return m_terraform_source_names_isValid;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_registry_app_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_eks_source_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_stack_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terraform_source_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveDraftAppVersionResourceMappings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && true;
}

} // namespace OpenAPI
