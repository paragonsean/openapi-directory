/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceErrorsDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceErrorsDetails::OAIResourceErrorsDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceErrorsDetails::OAIResourceErrorsDetails() {
    this->initializeModel();
}

OAIResourceErrorsDetails::~OAIResourceErrorsDetails() {}

void OAIResourceErrorsDetails::initializeModel() {

    m_has_more_errors_isSet = false;
    m_has_more_errors_isValid = false;

    m_resource_errors_isSet = false;
    m_resource_errors_isValid = false;
}

void OAIResourceErrorsDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceErrorsDetails::fromJsonObject(QJsonObject json) {

    m_has_more_errors_isValid = ::OpenAPI::fromJsonValue(m_has_more_errors, json[QString("hasMoreErrors")]);
    m_has_more_errors_isSet = !json[QString("hasMoreErrors")].isNull() && m_has_more_errors_isValid;

    m_resource_errors_isValid = ::OpenAPI::fromJsonValue(m_resource_errors, json[QString("resourceErrors")]);
    m_resource_errors_isSet = !json[QString("resourceErrors")].isNull() && m_resource_errors_isValid;
}

QString OAIResourceErrorsDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceErrorsDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_has_more_errors_isSet) {
        obj.insert(QString("hasMoreErrors"), ::OpenAPI::toJsonValue(m_has_more_errors));
    }
    if (m_resource_errors.isSet()) {
        obj.insert(QString("resourceErrors"), ::OpenAPI::toJsonValue(m_resource_errors));
    }
    return obj;
}

bool OAIResourceErrorsDetails::getHasMoreErrors() const {
    return m_has_more_errors;
}
void OAIResourceErrorsDetails::setHasMoreErrors(const bool &has_more_errors) {
    m_has_more_errors = has_more_errors;
    m_has_more_errors_isSet = true;
}

bool OAIResourceErrorsDetails::is_has_more_errors_Set() const{
    return m_has_more_errors_isSet;
}

bool OAIResourceErrorsDetails::is_has_more_errors_Valid() const{
    return m_has_more_errors_isValid;
}

QList OAIResourceErrorsDetails::getResourceErrors() const {
    return m_resource_errors;
}
void OAIResourceErrorsDetails::setResourceErrors(const QList &resource_errors) {
    m_resource_errors = resource_errors;
    m_resource_errors_isSet = true;
}

bool OAIResourceErrorsDetails::is_resource_errors_Set() const{
    return m_resource_errors_isSet;
}

bool OAIResourceErrorsDetails::is_resource_errors_Valid() const{
    return m_resource_errors_isValid;
}

bool OAIResourceErrorsDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_more_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceErrorsDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
