/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceDrift.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceDrift::OAIComplianceDrift(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceDrift::OAIComplianceDrift() {
    this->initializeModel();
}

OAIComplianceDrift::~OAIComplianceDrift() {}

void OAIComplianceDrift::initializeModel() {

    m_actual_reference_id_isSet = false;
    m_actual_reference_id_isValid = false;

    m_actual_value_isSet = false;
    m_actual_value_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_diff_type_isSet = false;
    m_diff_type_isValid = false;

    m_drift_type_isSet = false;
    m_drift_type_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_expected_reference_id_isSet = false;
    m_expected_reference_id_isValid = false;

    m_expected_value_isSet = false;
    m_expected_value_isValid = false;
}

void OAIComplianceDrift::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceDrift::fromJsonObject(QJsonObject json) {

    m_actual_reference_id_isValid = ::OpenAPI::fromJsonValue(m_actual_reference_id, json[QString("actualReferenceId")]);
    m_actual_reference_id_isSet = !json[QString("actualReferenceId")].isNull() && m_actual_reference_id_isValid;

    m_actual_value_isValid = ::OpenAPI::fromJsonValue(m_actual_value, json[QString("actualValue")]);
    m_actual_value_isSet = !json[QString("actualValue")].isNull() && m_actual_value_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_diff_type_isValid = ::OpenAPI::fromJsonValue(m_diff_type, json[QString("diffType")]);
    m_diff_type_isSet = !json[QString("diffType")].isNull() && m_diff_type_isValid;

    m_drift_type_isValid = ::OpenAPI::fromJsonValue(m_drift_type, json[QString("driftType")]);
    m_drift_type_isSet = !json[QString("driftType")].isNull() && m_drift_type_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_expected_reference_id_isValid = ::OpenAPI::fromJsonValue(m_expected_reference_id, json[QString("expectedReferenceId")]);
    m_expected_reference_id_isSet = !json[QString("expectedReferenceId")].isNull() && m_expected_reference_id_isValid;

    m_expected_value_isValid = ::OpenAPI::fromJsonValue(m_expected_value, json[QString("expectedValue")]);
    m_expected_value_isSet = !json[QString("expectedValue")].isNull() && m_expected_value_isValid;
}

QString OAIComplianceDrift::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceDrift::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_reference_id_isSet) {
        obj.insert(QString("actualReferenceId"), ::OpenAPI::toJsonValue(m_actual_reference_id));
    }
    if (m_actual_value.isSet()) {
        obj.insert(QString("actualValue"), ::OpenAPI::toJsonValue(m_actual_value));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_diff_type.isSet()) {
        obj.insert(QString("diffType"), ::OpenAPI::toJsonValue(m_diff_type));
    }
    if (m_drift_type.isSet()) {
        obj.insert(QString("driftType"), ::OpenAPI::toJsonValue(m_drift_type));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_expected_reference_id_isSet) {
        obj.insert(QString("expectedReferenceId"), ::OpenAPI::toJsonValue(m_expected_reference_id));
    }
    if (m_expected_value.isSet()) {
        obj.insert(QString("expectedValue"), ::OpenAPI::toJsonValue(m_expected_value));
    }
    return obj;
}

QString OAIComplianceDrift::getActualReferenceId() const {
    return m_actual_reference_id;
}
void OAIComplianceDrift::setActualReferenceId(const QString &actual_reference_id) {
    m_actual_reference_id = actual_reference_id;
    m_actual_reference_id_isSet = true;
}

bool OAIComplianceDrift::is_actual_reference_id_Set() const{
    return m_actual_reference_id_isSet;
}

bool OAIComplianceDrift::is_actual_reference_id_Valid() const{
    return m_actual_reference_id_isValid;
}

QMap OAIComplianceDrift::getActualValue() const {
    return m_actual_value;
}
void OAIComplianceDrift::setActualValue(const QMap &actual_value) {
    m_actual_value = actual_value;
    m_actual_value_isSet = true;
}

bool OAIComplianceDrift::is_actual_value_Set() const{
    return m_actual_value_isSet;
}

bool OAIComplianceDrift::is_actual_value_Valid() const{
    return m_actual_value_isValid;
}

QString OAIComplianceDrift::getAppId() const {
    return m_app_id;
}
void OAIComplianceDrift::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIComplianceDrift::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIComplianceDrift::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIComplianceDrift::getAppVersion() const {
    return m_app_version;
}
void OAIComplianceDrift::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIComplianceDrift::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIComplianceDrift::is_app_version_Valid() const{
    return m_app_version_isValid;
}

OAIDifferenceType OAIComplianceDrift::getDiffType() const {
    return m_diff_type;
}
void OAIComplianceDrift::setDiffType(const OAIDifferenceType &diff_type) {
    m_diff_type = diff_type;
    m_diff_type_isSet = true;
}

bool OAIComplianceDrift::is_diff_type_Set() const{
    return m_diff_type_isSet;
}

bool OAIComplianceDrift::is_diff_type_Valid() const{
    return m_diff_type_isValid;
}

OAIDriftType OAIComplianceDrift::getDriftType() const {
    return m_drift_type;
}
void OAIComplianceDrift::setDriftType(const OAIDriftType &drift_type) {
    m_drift_type = drift_type;
    m_drift_type_isSet = true;
}

bool OAIComplianceDrift::is_drift_type_Set() const{
    return m_drift_type_isSet;
}

bool OAIComplianceDrift::is_drift_type_Valid() const{
    return m_drift_type_isValid;
}

QString OAIComplianceDrift::getEntityId() const {
    return m_entity_id;
}
void OAIComplianceDrift::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIComplianceDrift::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIComplianceDrift::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIComplianceDrift::getEntityType() const {
    return m_entity_type;
}
void OAIComplianceDrift::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIComplianceDrift::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIComplianceDrift::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIComplianceDrift::getExpectedReferenceId() const {
    return m_expected_reference_id;
}
void OAIComplianceDrift::setExpectedReferenceId(const QString &expected_reference_id) {
    m_expected_reference_id = expected_reference_id;
    m_expected_reference_id_isSet = true;
}

bool OAIComplianceDrift::is_expected_reference_id_Set() const{
    return m_expected_reference_id_isSet;
}

bool OAIComplianceDrift::is_expected_reference_id_Valid() const{
    return m_expected_reference_id_isValid;
}

QMap OAIComplianceDrift::getExpectedValue() const {
    return m_expected_value;
}
void OAIComplianceDrift::setExpectedValue(const QMap &expected_value) {
    m_expected_value = expected_value;
    m_expected_value_isSet = true;
}

bool OAIComplianceDrift::is_expected_value_Set() const{
    return m_expected_value_isSet;
}

bool OAIComplianceDrift::is_expected_value_Valid() const{
    return m_expected_value_isValid;
}

bool OAIComplianceDrift::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceDrift::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
