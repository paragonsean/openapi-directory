/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailurePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailurePolicy::OAIFailurePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailurePolicy::OAIFailurePolicy() {
    this->initializeModel();
}

OAIFailurePolicy::~OAIFailurePolicy() {}

void OAIFailurePolicy::initializeModel() {

    m_rpo_in_secs_isSet = false;
    m_rpo_in_secs_isValid = false;

    m_rto_in_secs_isSet = false;
    m_rto_in_secs_isValid = false;
}

void OAIFailurePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailurePolicy::fromJsonObject(QJsonObject json) {

    m_rpo_in_secs_isValid = ::OpenAPI::fromJsonValue(m_rpo_in_secs, json[QString("rpoInSecs")]);
    m_rpo_in_secs_isSet = !json[QString("rpoInSecs")].isNull() && m_rpo_in_secs_isValid;

    m_rto_in_secs_isValid = ::OpenAPI::fromJsonValue(m_rto_in_secs, json[QString("rtoInSecs")]);
    m_rto_in_secs_isSet = !json[QString("rtoInSecs")].isNull() && m_rto_in_secs_isValid;
}

QString OAIFailurePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailurePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_rpo_in_secs_isSet) {
        obj.insert(QString("rpoInSecs"), ::OpenAPI::toJsonValue(m_rpo_in_secs));
    }
    if (m_rto_in_secs_isSet) {
        obj.insert(QString("rtoInSecs"), ::OpenAPI::toJsonValue(m_rto_in_secs));
    }
    return obj;
}

qint32 OAIFailurePolicy::getRpoInSecs() const {
    return m_rpo_in_secs;
}
void OAIFailurePolicy::setRpoInSecs(const qint32 &rpo_in_secs) {
    m_rpo_in_secs = rpo_in_secs;
    m_rpo_in_secs_isSet = true;
}

bool OAIFailurePolicy::is_rpo_in_secs_Set() const{
    return m_rpo_in_secs_isSet;
}

bool OAIFailurePolicy::is_rpo_in_secs_Valid() const{
    return m_rpo_in_secs_isValid;
}

qint32 OAIFailurePolicy::getRtoInSecs() const {
    return m_rto_in_secs;
}
void OAIFailurePolicy::setRtoInSecs(const qint32 &rto_in_secs) {
    m_rto_in_secs = rto_in_secs;
    m_rto_in_secs_isSet = true;
}

bool OAIFailurePolicy::is_rto_in_secs_Set() const{
    return m_rto_in_secs_isSet;
}

bool OAIFailurePolicy::is_rto_in_secs_Valid() const{
    return m_rto_in_secs_isValid;
}

bool OAIFailurePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rpo_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rto_in_secs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailurePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rpo_in_secs_isValid && m_rto_in_secs_isValid && true;
}

} // namespace OpenAPI
