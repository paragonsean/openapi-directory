/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPhysicalResource.h
 *
 * Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or an Resilience Hub-native identifier. 
 */

#ifndef OAIPhysicalResource_H
#define OAIPhysicalResource_H

#include <QJsonObject>

#include "OAICreateAppVersionResourceRequest_logicalResourceId.h"
#include "OAIResourceMapping_physicalResourceId.h"
#include "OAIResourceSourceType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAppVersionResourceRequest_logicalResourceId;
class OAIResourceMapping_physicalResourceId;

class OAIPhysicalResource : public OAIObject {
public:
    OAIPhysicalResource();
    OAIPhysicalResource(QString json);
    ~OAIPhysicalResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap getAdditionalInfo() const;
    void setAdditionalInfo(const QMap &additional_info);
    bool is_additional_info_Set() const;
    bool is_additional_info_Valid() const;

    QList getAppComponents() const;
    void setAppComponents(const QList &app_components);
    bool is_app_components_Set() const;
    bool is_app_components_Valid() const;

    bool getExcluded() const;
    void setExcluded(const bool &excluded);
    bool is_excluded_Set() const;
    bool is_excluded_Valid() const;

    OAICreateAppVersionResourceRequest_logicalResourceId getLogicalResourceId() const;
    void setLogicalResourceId(const OAICreateAppVersionResourceRequest_logicalResourceId &logical_resource_id);
    bool is_logical_resource_id_Set() const;
    bool is_logical_resource_id_Valid() const;

    QString getParentResourceName() const;
    void setParentResourceName(const QString &parent_resource_name);
    bool is_parent_resource_name_Set() const;
    bool is_parent_resource_name_Valid() const;

    OAIResourceMapping_physicalResourceId getPhysicalResourceId() const;
    void setPhysicalResourceId(const OAIResourceMapping_physicalResourceId &physical_resource_id);
    bool is_physical_resource_id_Set() const;
    bool is_physical_resource_id_Valid() const;

    QString getResourceName() const;
    void setResourceName(const QString &resource_name);
    bool is_resource_name_Set() const;
    bool is_resource_name_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    OAIResourceSourceType getSourceType() const;
    void setSourceType(const OAIResourceSourceType &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap m_additional_info;
    bool m_additional_info_isSet;
    bool m_additional_info_isValid;

    QList m_app_components;
    bool m_app_components_isSet;
    bool m_app_components_isValid;

    bool m_excluded;
    bool m_excluded_isSet;
    bool m_excluded_isValid;

    OAICreateAppVersionResourceRequest_logicalResourceId m_logical_resource_id;
    bool m_logical_resource_id_isSet;
    bool m_logical_resource_id_isValid;

    QString m_parent_resource_name;
    bool m_parent_resource_name_isSet;
    bool m_parent_resource_name_isValid;

    OAIResourceMapping_physicalResourceId m_physical_resource_id;
    bool m_physical_resource_id_isSet;
    bool m_physical_resource_id_isValid;

    QString m_resource_name;
    bool m_resource_name_isSet;
    bool m_resource_name_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    OAIResourceSourceType m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPhysicalResource)

#endif // OAIPhysicalResource_H
