/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAppVersionAppComponent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAppVersionAppComponent_request::OAIDeleteAppVersionAppComponent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAppVersionAppComponent_request::OAIDeleteAppVersionAppComponent_request() {
    this->initializeModel();
}

OAIDeleteAppVersionAppComponent_request::~OAIDeleteAppVersionAppComponent_request() {}

void OAIDeleteAppVersionAppComponent_request::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIDeleteAppVersionAppComponent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAppVersionAppComponent_request::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIDeleteAppVersionAppComponent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAppVersionAppComponent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIDeleteAppVersionAppComponent_request::getAppArn() const {
    return m_app_arn;
}
void OAIDeleteAppVersionAppComponent_request::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIDeleteAppVersionAppComponent_request::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIDeleteAppVersionAppComponent_request::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QString OAIDeleteAppVersionAppComponent_request::getClientToken() const {
    return m_client_token;
}
void OAIDeleteAppVersionAppComponent_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIDeleteAppVersionAppComponent_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIDeleteAppVersionAppComponent_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIDeleteAppVersionAppComponent_request::getId() const {
    return m_id;
}
void OAIDeleteAppVersionAppComponent_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeleteAppVersionAppComponent_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeleteAppVersionAppComponent_request::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDeleteAppVersionAppComponent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAppVersionAppComponent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
