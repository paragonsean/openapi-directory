/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateRecommendationStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateRecommendationStatusResponse::OAIBatchUpdateRecommendationStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateRecommendationStatusResponse::OAIBatchUpdateRecommendationStatusResponse() {
    this->initializeModel();
}

OAIBatchUpdateRecommendationStatusResponse::~OAIBatchUpdateRecommendationStatusResponse() {}

void OAIBatchUpdateRecommendationStatusResponse::initializeModel() {

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_failed_entries_isSet = false;
    m_failed_entries_isValid = false;

    m_successful_entries_isSet = false;
    m_successful_entries_isValid = false;
}

void OAIBatchUpdateRecommendationStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateRecommendationStatusResponse::fromJsonObject(QJsonObject json) {

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_failed_entries_isValid = ::OpenAPI::fromJsonValue(m_failed_entries, json[QString("failedEntries")]);
    m_failed_entries_isSet = !json[QString("failedEntries")].isNull() && m_failed_entries_isValid;

    m_successful_entries_isValid = ::OpenAPI::fromJsonValue(m_successful_entries, json[QString("successfulEntries")]);
    m_successful_entries_isSet = !json[QString("successfulEntries")].isNull() && m_successful_entries_isValid;
}

QString OAIBatchUpdateRecommendationStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateRecommendationStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_failed_entries.isSet()) {
        obj.insert(QString("failedEntries"), ::OpenAPI::toJsonValue(m_failed_entries));
    }
    if (m_successful_entries.isSet()) {
        obj.insert(QString("successfulEntries"), ::OpenAPI::toJsonValue(m_successful_entries));
    }
    return obj;
}

QString OAIBatchUpdateRecommendationStatusResponse::getAppArn() const {
    return m_app_arn;
}
void OAIBatchUpdateRecommendationStatusResponse::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIBatchUpdateRecommendationStatusResponse::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIBatchUpdateRecommendationStatusResponse::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

QList OAIBatchUpdateRecommendationStatusResponse::getFailedEntries() const {
    return m_failed_entries;
}
void OAIBatchUpdateRecommendationStatusResponse::setFailedEntries(const QList &failed_entries) {
    m_failed_entries = failed_entries;
    m_failed_entries_isSet = true;
}

bool OAIBatchUpdateRecommendationStatusResponse::is_failed_entries_Set() const{
    return m_failed_entries_isSet;
}

bool OAIBatchUpdateRecommendationStatusResponse::is_failed_entries_Valid() const{
    return m_failed_entries_isValid;
}

QList OAIBatchUpdateRecommendationStatusResponse::getSuccessfulEntries() const {
    return m_successful_entries;
}
void OAIBatchUpdateRecommendationStatusResponse::setSuccessfulEntries(const QList &successful_entries) {
    m_successful_entries = successful_entries;
    m_successful_entries_isSet = true;
}

bool OAIBatchUpdateRecommendationStatusResponse::is_successful_entries_Set() const{
    return m_successful_entries_isSet;
}

bool OAIBatchUpdateRecommendationStatusResponse::is_successful_entries_Valid() const{
    return m_successful_entries_isValid;
}

bool OAIBatchUpdateRecommendationStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateRecommendationStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_arn_isValid && m_failed_entries_isValid && m_successful_entries_isValid && true;
}

} // namespace OpenAPI
