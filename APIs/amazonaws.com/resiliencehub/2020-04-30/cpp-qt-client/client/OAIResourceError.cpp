/**
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceError::OAIResourceError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceError::OAIResourceError() {
    this->initializeModel();
}

OAIResourceError::~OAIResourceError() {}

void OAIResourceError::initializeModel() {

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIResourceError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceError::fromJsonObject(QJsonObject json) {

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("logicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("logicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("physicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("physicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIResourceError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceError::asJsonObject() const {
    QJsonObject obj;
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("logicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("physicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIResourceError::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIResourceError::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIResourceError::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIResourceError::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIResourceError::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIResourceError::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIResourceError::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIResourceError::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIResourceError::getReason() const {
    return m_reason;
}
void OAIResourceError::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIResourceError::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIResourceError::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIResourceError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
