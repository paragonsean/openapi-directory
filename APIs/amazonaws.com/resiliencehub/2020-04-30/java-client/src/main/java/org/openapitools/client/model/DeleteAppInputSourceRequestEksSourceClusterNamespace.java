/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteAppInputSourceRequestEksSourceClusterNamespace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteAppInputSourceRequestEksSourceClusterNamespace {
  public static final String SERIALIZED_NAME_EKS_CLUSTER_ARN = "eksClusterArn";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_ARN)
  private String eksClusterArn;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public DeleteAppInputSourceRequestEksSourceClusterNamespace() {
  }

  public DeleteAppInputSourceRequestEksSourceClusterNamespace eksClusterArn(String eksClusterArn) {
    this.eksClusterArn = eksClusterArn;
    return this;
  }

  /**
   * Get eksClusterArn
   * @return eksClusterArn
   */
  @javax.annotation.Nonnull
  public String getEksClusterArn() {
    return eksClusterArn;
  }

  public void setEksClusterArn(String eksClusterArn) {
    this.eksClusterArn = eksClusterArn;
  }


  public DeleteAppInputSourceRequestEksSourceClusterNamespace namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteAppInputSourceRequestEksSourceClusterNamespace deleteAppInputSourceRequestEksSourceClusterNamespace = (DeleteAppInputSourceRequestEksSourceClusterNamespace) o;
    return Objects.equals(this.eksClusterArn, deleteAppInputSourceRequestEksSourceClusterNamespace.eksClusterArn) &&
        Objects.equals(this.namespace, deleteAppInputSourceRequestEksSourceClusterNamespace.namespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eksClusterArn, namespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteAppInputSourceRequestEksSourceClusterNamespace {\n");
    sb.append("    eksClusterArn: ").append(toIndentedString(eksClusterArn)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eksClusterArn");
    openapiFields.add("namespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eksClusterArn");
    openapiRequiredFields.add("namespace");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteAppInputSourceRequestEksSourceClusterNamespace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteAppInputSourceRequestEksSourceClusterNamespace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteAppInputSourceRequestEksSourceClusterNamespace is not found in the empty JSON string", DeleteAppInputSourceRequestEksSourceClusterNamespace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteAppInputSourceRequestEksSourceClusterNamespace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteAppInputSourceRequestEksSourceClusterNamespace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteAppInputSourceRequestEksSourceClusterNamespace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `eksClusterArn`
      String.validateJsonElement(jsonObj.get("eksClusterArn"));
      // validate the required field `namespace`
      String.validateJsonElement(jsonObj.get("namespace"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteAppInputSourceRequestEksSourceClusterNamespace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteAppInputSourceRequestEksSourceClusterNamespace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteAppInputSourceRequestEksSourceClusterNamespace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteAppInputSourceRequestEksSourceClusterNamespace.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteAppInputSourceRequestEksSourceClusterNamespace>() {
           @Override
           public void write(JsonWriter out, DeleteAppInputSourceRequestEksSourceClusterNamespace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteAppInputSourceRequestEksSourceClusterNamespace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteAppInputSourceRequestEksSourceClusterNamespace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteAppInputSourceRequestEksSourceClusterNamespace
   * @throws IOException if the JSON string is invalid with respect to DeleteAppInputSourceRequestEksSourceClusterNamespace
   */
  public static DeleteAppInputSourceRequestEksSourceClusterNamespace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteAppInputSourceRequestEksSourceClusterNamespace.class);
  }

  /**
   * Convert an instance of DeleteAppInputSourceRequestEksSourceClusterNamespace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

