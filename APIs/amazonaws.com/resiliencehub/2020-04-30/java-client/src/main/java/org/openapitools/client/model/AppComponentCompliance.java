/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AppComponentComplianceCost;
import org.openapitools.client.model.AppComponentComplianceResiliencyScore;
import org.openapitools.client.model.ComplianceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the compliance of an Application Component against the resiliency policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppComponentCompliance {
  public static final String SERIALIZED_NAME_APP_COMPONENT_NAME = "appComponentName";
  @SerializedName(SERIALIZED_NAME_APP_COMPONENT_NAME)
  private String appComponentName;

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private Map compliance;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private AppComponentComplianceCost cost;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RESILIENCY_SCORE = "resiliencyScore";
  @SerializedName(SERIALIZED_NAME_RESILIENCY_SCORE)
  private AppComponentComplianceResiliencyScore resiliencyScore;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ComplianceStatus status;

  public AppComponentCompliance() {
  }

  public AppComponentCompliance appComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
    return this;
  }

  /**
   * Get appComponentName
   * @return appComponentName
   */
  @javax.annotation.Nullable
  public String getAppComponentName() {
    return appComponentName;
  }

  public void setAppComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
  }


  public AppComponentCompliance compliance(Map compliance) {
    this.compliance = compliance;
    return this;
  }

  /**
   * Get compliance
   * @return compliance
   */
  @javax.annotation.Nullable
  public Map getCompliance() {
    return compliance;
  }

  public void setCompliance(Map compliance) {
    this.compliance = compliance;
  }


  public AppComponentCompliance cost(AppComponentComplianceCost cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public AppComponentComplianceCost getCost() {
    return cost;
  }

  public void setCost(AppComponentComplianceCost cost) {
    this.cost = cost;
  }


  public AppComponentCompliance message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public AppComponentCompliance resiliencyScore(AppComponentComplianceResiliencyScore resiliencyScore) {
    this.resiliencyScore = resiliencyScore;
    return this;
  }

  /**
   * Get resiliencyScore
   * @return resiliencyScore
   */
  @javax.annotation.Nullable
  public AppComponentComplianceResiliencyScore getResiliencyScore() {
    return resiliencyScore;
  }

  public void setResiliencyScore(AppComponentComplianceResiliencyScore resiliencyScore) {
    this.resiliencyScore = resiliencyScore;
  }


  public AppComponentCompliance status(ComplianceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ComplianceStatus getStatus() {
    return status;
  }

  public void setStatus(ComplianceStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppComponentCompliance appComponentCompliance = (AppComponentCompliance) o;
    return Objects.equals(this.appComponentName, appComponentCompliance.appComponentName) &&
        Objects.equals(this.compliance, appComponentCompliance.compliance) &&
        Objects.equals(this.cost, appComponentCompliance.cost) &&
        Objects.equals(this.message, appComponentCompliance.message) &&
        Objects.equals(this.resiliencyScore, appComponentCompliance.resiliencyScore) &&
        Objects.equals(this.status, appComponentCompliance.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appComponentName, compliance, cost, message, resiliencyScore, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppComponentCompliance {\n");
    sb.append("    appComponentName: ").append(toIndentedString(appComponentName)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    resiliencyScore: ").append(toIndentedString(resiliencyScore)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appComponentName");
    openapiFields.add("compliance");
    openapiFields.add("cost");
    openapiFields.add("message");
    openapiFields.add("resiliencyScore");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppComponentCompliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppComponentCompliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppComponentCompliance is not found in the empty JSON string", AppComponentCompliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppComponentCompliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppComponentCompliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appComponentName`
      if (jsonObj.get("appComponentName") != null && !jsonObj.get("appComponentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appComponentName"));
      }
      // validate the optional field `compliance`
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("compliance"));
      }
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        AppComponentComplianceCost.validateJsonElement(jsonObj.get("cost"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `resiliencyScore`
      if (jsonObj.get("resiliencyScore") != null && !jsonObj.get("resiliencyScore").isJsonNull()) {
        AppComponentComplianceResiliencyScore.validateJsonElement(jsonObj.get("resiliencyScore"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ComplianceStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppComponentCompliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppComponentCompliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppComponentCompliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppComponentCompliance.class));

       return (TypeAdapter<T>) new TypeAdapter<AppComponentCompliance>() {
           @Override
           public void write(JsonWriter out, AppComponentCompliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppComponentCompliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppComponentCompliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppComponentCompliance
   * @throws IOException if the JSON string is invalid with respect to AppComponentCompliance
   */
  public static AppComponentCompliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppComponentCompliance.class);
  }

  /**
   * Convert an instance of AppComponentCompliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

