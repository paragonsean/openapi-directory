/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UnsupportedResourceLogicalResourceId
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UnsupportedResourceLogicalResourceId {
  public static final String SERIALIZED_NAME_EKS_SOURCE_NAME = "eksSourceName";
  @SerializedName(SERIALIZED_NAME_EKS_SOURCE_NAME)
  private String eksSourceName;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_LOGICAL_STACK_NAME = "logicalStackName";
  @SerializedName(SERIALIZED_NAME_LOGICAL_STACK_NAME)
  private String logicalStackName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_TERRAFORM_SOURCE_NAME = "terraformSourceName";
  @SerializedName(SERIALIZED_NAME_TERRAFORM_SOURCE_NAME)
  private String terraformSourceName;

  public UnsupportedResourceLogicalResourceId() {
  }

  public UnsupportedResourceLogicalResourceId eksSourceName(String eksSourceName) {
    this.eksSourceName = eksSourceName;
    return this;
  }

  /**
   * Get eksSourceName
   * @return eksSourceName
   */
  @javax.annotation.Nullable
  public String getEksSourceName() {
    return eksSourceName;
  }

  public void setEksSourceName(String eksSourceName) {
    this.eksSourceName = eksSourceName;
  }


  public UnsupportedResourceLogicalResourceId identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public UnsupportedResourceLogicalResourceId logicalStackName(String logicalStackName) {
    this.logicalStackName = logicalStackName;
    return this;
  }

  /**
   * Get logicalStackName
   * @return logicalStackName
   */
  @javax.annotation.Nullable
  public String getLogicalStackName() {
    return logicalStackName;
  }

  public void setLogicalStackName(String logicalStackName) {
    this.logicalStackName = logicalStackName;
  }


  public UnsupportedResourceLogicalResourceId resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * Get resourceGroupName
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public UnsupportedResourceLogicalResourceId terraformSourceName(String terraformSourceName) {
    this.terraformSourceName = terraformSourceName;
    return this;
  }

  /**
   * Get terraformSourceName
   * @return terraformSourceName
   */
  @javax.annotation.Nullable
  public String getTerraformSourceName() {
    return terraformSourceName;
  }

  public void setTerraformSourceName(String terraformSourceName) {
    this.terraformSourceName = terraformSourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnsupportedResourceLogicalResourceId unsupportedResourceLogicalResourceId = (UnsupportedResourceLogicalResourceId) o;
    return Objects.equals(this.eksSourceName, unsupportedResourceLogicalResourceId.eksSourceName) &&
        Objects.equals(this.identifier, unsupportedResourceLogicalResourceId.identifier) &&
        Objects.equals(this.logicalStackName, unsupportedResourceLogicalResourceId.logicalStackName) &&
        Objects.equals(this.resourceGroupName, unsupportedResourceLogicalResourceId.resourceGroupName) &&
        Objects.equals(this.terraformSourceName, unsupportedResourceLogicalResourceId.terraformSourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eksSourceName, identifier, logicalStackName, resourceGroupName, terraformSourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnsupportedResourceLogicalResourceId {\n");
    sb.append("    eksSourceName: ").append(toIndentedString(eksSourceName)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    logicalStackName: ").append(toIndentedString(logicalStackName)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    terraformSourceName: ").append(toIndentedString(terraformSourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eksSourceName");
    openapiFields.add("identifier");
    openapiFields.add("logicalStackName");
    openapiFields.add("resourceGroupName");
    openapiFields.add("terraformSourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnsupportedResourceLogicalResourceId
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnsupportedResourceLogicalResourceId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnsupportedResourceLogicalResourceId is not found in the empty JSON string", UnsupportedResourceLogicalResourceId.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnsupportedResourceLogicalResourceId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnsupportedResourceLogicalResourceId` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UnsupportedResourceLogicalResourceId.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eksSourceName`
      if (jsonObj.get("eksSourceName") != null && !jsonObj.get("eksSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eksSourceName"));
      }
      // validate the required field `identifier`
      String.validateJsonElement(jsonObj.get("identifier"));
      // validate the optional field `logicalStackName`
      if (jsonObj.get("logicalStackName") != null && !jsonObj.get("logicalStackName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logicalStackName"));
      }
      // validate the optional field `resourceGroupName`
      if (jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceGroupName"));
      }
      // validate the optional field `terraformSourceName`
      if (jsonObj.get("terraformSourceName") != null && !jsonObj.get("terraformSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("terraformSourceName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnsupportedResourceLogicalResourceId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnsupportedResourceLogicalResourceId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnsupportedResourceLogicalResourceId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnsupportedResourceLogicalResourceId.class));

       return (TypeAdapter<T>) new TypeAdapter<UnsupportedResourceLogicalResourceId>() {
           @Override
           public void write(JsonWriter out, UnsupportedResourceLogicalResourceId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnsupportedResourceLogicalResourceId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnsupportedResourceLogicalResourceId given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnsupportedResourceLogicalResourceId
   * @throws IOException if the JSON string is invalid with respect to UnsupportedResourceLogicalResourceId
   */
  public static UnsupportedResourceLogicalResourceId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnsupportedResourceLogicalResourceId.class);
  }

  /**
   * Convert an instance of UnsupportedResourceLogicalResourceId to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

