/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComplianceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the compliance against the resiliency policy for a disruption.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisruptionCompliance {
  public static final String SERIALIZED_NAME_ACHIEVABLE_RPO_IN_SECS = "achievableRpoInSecs";
  @SerializedName(SERIALIZED_NAME_ACHIEVABLE_RPO_IN_SECS)
  private Integer achievableRpoInSecs;

  public static final String SERIALIZED_NAME_ACHIEVABLE_RTO_IN_SECS = "achievableRtoInSecs";
  @SerializedName(SERIALIZED_NAME_ACHIEVABLE_RTO_IN_SECS)
  private Integer achievableRtoInSecs;

  public static final String SERIALIZED_NAME_COMPLIANCE_STATUS = "complianceStatus";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_STATUS)
  private ComplianceStatus complianceStatus;

  public static final String SERIALIZED_NAME_CURRENT_RPO_IN_SECS = "currentRpoInSecs";
  @SerializedName(SERIALIZED_NAME_CURRENT_RPO_IN_SECS)
  private Integer currentRpoInSecs;

  public static final String SERIALIZED_NAME_CURRENT_RTO_IN_SECS = "currentRtoInSecs";
  @SerializedName(SERIALIZED_NAME_CURRENT_RTO_IN_SECS)
  private Integer currentRtoInSecs;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RPO_DESCRIPTION = "rpoDescription";
  @SerializedName(SERIALIZED_NAME_RPO_DESCRIPTION)
  private String rpoDescription;

  public static final String SERIALIZED_NAME_RPO_REFERENCE_ID = "rpoReferenceId";
  @SerializedName(SERIALIZED_NAME_RPO_REFERENCE_ID)
  private String rpoReferenceId;

  public static final String SERIALIZED_NAME_RTO_DESCRIPTION = "rtoDescription";
  @SerializedName(SERIALIZED_NAME_RTO_DESCRIPTION)
  private String rtoDescription;

  public static final String SERIALIZED_NAME_RTO_REFERENCE_ID = "rtoReferenceId";
  @SerializedName(SERIALIZED_NAME_RTO_REFERENCE_ID)
  private String rtoReferenceId;

  public DisruptionCompliance() {
  }

  public DisruptionCompliance achievableRpoInSecs(Integer achievableRpoInSecs) {
    this.achievableRpoInSecs = achievableRpoInSecs;
    return this;
  }

  /**
   * Get achievableRpoInSecs
   * @return achievableRpoInSecs
   */
  @javax.annotation.Nullable
  public Integer getAchievableRpoInSecs() {
    return achievableRpoInSecs;
  }

  public void setAchievableRpoInSecs(Integer achievableRpoInSecs) {
    this.achievableRpoInSecs = achievableRpoInSecs;
  }


  public DisruptionCompliance achievableRtoInSecs(Integer achievableRtoInSecs) {
    this.achievableRtoInSecs = achievableRtoInSecs;
    return this;
  }

  /**
   * Get achievableRtoInSecs
   * @return achievableRtoInSecs
   */
  @javax.annotation.Nullable
  public Integer getAchievableRtoInSecs() {
    return achievableRtoInSecs;
  }

  public void setAchievableRtoInSecs(Integer achievableRtoInSecs) {
    this.achievableRtoInSecs = achievableRtoInSecs;
  }


  public DisruptionCompliance complianceStatus(ComplianceStatus complianceStatus) {
    this.complianceStatus = complianceStatus;
    return this;
  }

  /**
   * Get complianceStatus
   * @return complianceStatus
   */
  @javax.annotation.Nonnull
  public ComplianceStatus getComplianceStatus() {
    return complianceStatus;
  }

  public void setComplianceStatus(ComplianceStatus complianceStatus) {
    this.complianceStatus = complianceStatus;
  }


  public DisruptionCompliance currentRpoInSecs(Integer currentRpoInSecs) {
    this.currentRpoInSecs = currentRpoInSecs;
    return this;
  }

  /**
   * Get currentRpoInSecs
   * @return currentRpoInSecs
   */
  @javax.annotation.Nullable
  public Integer getCurrentRpoInSecs() {
    return currentRpoInSecs;
  }

  public void setCurrentRpoInSecs(Integer currentRpoInSecs) {
    this.currentRpoInSecs = currentRpoInSecs;
  }


  public DisruptionCompliance currentRtoInSecs(Integer currentRtoInSecs) {
    this.currentRtoInSecs = currentRtoInSecs;
    return this;
  }

  /**
   * Get currentRtoInSecs
   * @return currentRtoInSecs
   */
  @javax.annotation.Nullable
  public Integer getCurrentRtoInSecs() {
    return currentRtoInSecs;
  }

  public void setCurrentRtoInSecs(Integer currentRtoInSecs) {
    this.currentRtoInSecs = currentRtoInSecs;
  }


  public DisruptionCompliance message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DisruptionCompliance rpoDescription(String rpoDescription) {
    this.rpoDescription = rpoDescription;
    return this;
  }

  /**
   * Get rpoDescription
   * @return rpoDescription
   */
  @javax.annotation.Nullable
  public String getRpoDescription() {
    return rpoDescription;
  }

  public void setRpoDescription(String rpoDescription) {
    this.rpoDescription = rpoDescription;
  }


  public DisruptionCompliance rpoReferenceId(String rpoReferenceId) {
    this.rpoReferenceId = rpoReferenceId;
    return this;
  }

  /**
   * Get rpoReferenceId
   * @return rpoReferenceId
   */
  @javax.annotation.Nullable
  public String getRpoReferenceId() {
    return rpoReferenceId;
  }

  public void setRpoReferenceId(String rpoReferenceId) {
    this.rpoReferenceId = rpoReferenceId;
  }


  public DisruptionCompliance rtoDescription(String rtoDescription) {
    this.rtoDescription = rtoDescription;
    return this;
  }

  /**
   * Get rtoDescription
   * @return rtoDescription
   */
  @javax.annotation.Nullable
  public String getRtoDescription() {
    return rtoDescription;
  }

  public void setRtoDescription(String rtoDescription) {
    this.rtoDescription = rtoDescription;
  }


  public DisruptionCompliance rtoReferenceId(String rtoReferenceId) {
    this.rtoReferenceId = rtoReferenceId;
    return this;
  }

  /**
   * Get rtoReferenceId
   * @return rtoReferenceId
   */
  @javax.annotation.Nullable
  public String getRtoReferenceId() {
    return rtoReferenceId;
  }

  public void setRtoReferenceId(String rtoReferenceId) {
    this.rtoReferenceId = rtoReferenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisruptionCompliance disruptionCompliance = (DisruptionCompliance) o;
    return Objects.equals(this.achievableRpoInSecs, disruptionCompliance.achievableRpoInSecs) &&
        Objects.equals(this.achievableRtoInSecs, disruptionCompliance.achievableRtoInSecs) &&
        Objects.equals(this.complianceStatus, disruptionCompliance.complianceStatus) &&
        Objects.equals(this.currentRpoInSecs, disruptionCompliance.currentRpoInSecs) &&
        Objects.equals(this.currentRtoInSecs, disruptionCompliance.currentRtoInSecs) &&
        Objects.equals(this.message, disruptionCompliance.message) &&
        Objects.equals(this.rpoDescription, disruptionCompliance.rpoDescription) &&
        Objects.equals(this.rpoReferenceId, disruptionCompliance.rpoReferenceId) &&
        Objects.equals(this.rtoDescription, disruptionCompliance.rtoDescription) &&
        Objects.equals(this.rtoReferenceId, disruptionCompliance.rtoReferenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievableRpoInSecs, achievableRtoInSecs, complianceStatus, currentRpoInSecs, currentRtoInSecs, message, rpoDescription, rpoReferenceId, rtoDescription, rtoReferenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisruptionCompliance {\n");
    sb.append("    achievableRpoInSecs: ").append(toIndentedString(achievableRpoInSecs)).append("\n");
    sb.append("    achievableRtoInSecs: ").append(toIndentedString(achievableRtoInSecs)).append("\n");
    sb.append("    complianceStatus: ").append(toIndentedString(complianceStatus)).append("\n");
    sb.append("    currentRpoInSecs: ").append(toIndentedString(currentRpoInSecs)).append("\n");
    sb.append("    currentRtoInSecs: ").append(toIndentedString(currentRtoInSecs)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    rpoDescription: ").append(toIndentedString(rpoDescription)).append("\n");
    sb.append("    rpoReferenceId: ").append(toIndentedString(rpoReferenceId)).append("\n");
    sb.append("    rtoDescription: ").append(toIndentedString(rtoDescription)).append("\n");
    sb.append("    rtoReferenceId: ").append(toIndentedString(rtoReferenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievableRpoInSecs");
    openapiFields.add("achievableRtoInSecs");
    openapiFields.add("complianceStatus");
    openapiFields.add("currentRpoInSecs");
    openapiFields.add("currentRtoInSecs");
    openapiFields.add("message");
    openapiFields.add("rpoDescription");
    openapiFields.add("rpoReferenceId");
    openapiFields.add("rtoDescription");
    openapiFields.add("rtoReferenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("complianceStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisruptionCompliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisruptionCompliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisruptionCompliance is not found in the empty JSON string", DisruptionCompliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisruptionCompliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisruptionCompliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DisruptionCompliance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `achievableRpoInSecs`
      if (jsonObj.get("achievableRpoInSecs") != null && !jsonObj.get("achievableRpoInSecs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("achievableRpoInSecs"));
      }
      // validate the optional field `achievableRtoInSecs`
      if (jsonObj.get("achievableRtoInSecs") != null && !jsonObj.get("achievableRtoInSecs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("achievableRtoInSecs"));
      }
      // validate the required field `complianceStatus`
      ComplianceStatus.validateJsonElement(jsonObj.get("complianceStatus"));
      // validate the optional field `currentRpoInSecs`
      if (jsonObj.get("currentRpoInSecs") != null && !jsonObj.get("currentRpoInSecs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("currentRpoInSecs"));
      }
      // validate the optional field `currentRtoInSecs`
      if (jsonObj.get("currentRtoInSecs") != null && !jsonObj.get("currentRtoInSecs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("currentRtoInSecs"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `rpoDescription`
      if (jsonObj.get("rpoDescription") != null && !jsonObj.get("rpoDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rpoDescription"));
      }
      // validate the optional field `rpoReferenceId`
      if (jsonObj.get("rpoReferenceId") != null && !jsonObj.get("rpoReferenceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rpoReferenceId"));
      }
      // validate the optional field `rtoDescription`
      if (jsonObj.get("rtoDescription") != null && !jsonObj.get("rtoDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rtoDescription"));
      }
      // validate the optional field `rtoReferenceId`
      if (jsonObj.get("rtoReferenceId") != null && !jsonObj.get("rtoReferenceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rtoReferenceId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisruptionCompliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisruptionCompliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisruptionCompliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisruptionCompliance.class));

       return (TypeAdapter<T>) new TypeAdapter<DisruptionCompliance>() {
           @Override
           public void write(JsonWriter out, DisruptionCompliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisruptionCompliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisruptionCompliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisruptionCompliance
   * @throws IOException if the JSON string is invalid with respect to DisruptionCompliance
   */
  public static DisruptionCompliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisruptionCompliance.class);
  }

  /**
   * Convert an instance of DisruptionCompliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

