/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.FailurePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateResiliencyPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateResiliencyPolicyRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  /**
   * Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
   */
  @JsonAdapter(DataLocationConstraintEnum.Adapter.class)
  public enum DataLocationConstraintEnum {
    ANY_LOCATION("AnyLocation"),
    
    SAME_CONTINENT("SameContinent"),
    
    SAME_COUNTRY("SameCountry");

    private String value;

    DataLocationConstraintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataLocationConstraintEnum fromValue(String value) {
      for (DataLocationConstraintEnum b : DataLocationConstraintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataLocationConstraintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataLocationConstraintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataLocationConstraintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataLocationConstraintEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataLocationConstraintEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_LOCATION_CONSTRAINT = "dataLocationConstraint";
  @SerializedName(SERIALIZED_NAME_DATA_LOCATION_CONSTRAINT)
  private DataLocationConstraintEnum dataLocationConstraint;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private Map<String, FailurePolicy> policy = new HashMap<>();

  public static final String SERIALIZED_NAME_POLICY_DESCRIPTION = "policyDescription";
  @SerializedName(SERIALIZED_NAME_POLICY_DESCRIPTION)
  private String policyDescription;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * The tier for this resiliency policy, ranging from the highest severity (&lt;code&gt;MissionCritical&lt;/code&gt;) to lowest (&lt;code&gt;NonCritical&lt;/code&gt;).
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    MISSION_CRITICAL("MissionCritical"),
    
    CRITICAL("Critical"),
    
    IMPORTANT("Important"),
    
    CORE_SERVICES("CoreServices"),
    
    NON_CRITICAL("NonCritical"),
    
    NOT_APPLICABLE("NotApplicable");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public CreateResiliencyPolicyRequest() {
  }

  public CreateResiliencyPolicyRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateResiliencyPolicyRequest dataLocationConstraint(DataLocationConstraintEnum dataLocationConstraint) {
    this.dataLocationConstraint = dataLocationConstraint;
    return this;
  }

  /**
   * Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
   * @return dataLocationConstraint
   */
  @javax.annotation.Nullable
  public DataLocationConstraintEnum getDataLocationConstraint() {
    return dataLocationConstraint;
  }

  public void setDataLocationConstraint(DataLocationConstraintEnum dataLocationConstraint) {
    this.dataLocationConstraint = dataLocationConstraint;
  }


  public CreateResiliencyPolicyRequest policy(Map<String, FailurePolicy> policy) {
    this.policy = policy;
    return this;
  }

  public CreateResiliencyPolicyRequest putPolicyItem(String key, FailurePolicy policyItem) {
    if (this.policy == null) {
      this.policy = new HashMap<>();
    }
    this.policy.put(key, policyItem);
    return this;
  }

  /**
   * The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
   * @return policy
   */
  @javax.annotation.Nonnull
  public Map<String, FailurePolicy> getPolicy() {
    return policy;
  }

  public void setPolicy(Map<String, FailurePolicy> policy) {
    this.policy = policy;
  }


  public CreateResiliencyPolicyRequest policyDescription(String policyDescription) {
    this.policyDescription = policyDescription;
    return this;
  }

  /**
   * The description for the policy.
   * @return policyDescription
   */
  @javax.annotation.Nullable
  public String getPolicyDescription() {
    return policyDescription;
  }

  public void setPolicyDescription(String policyDescription) {
    this.policyDescription = policyDescription;
  }


  public CreateResiliencyPolicyRequest policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * The name of the policy
   * @return policyName
   */
  @javax.annotation.Nonnull
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public CreateResiliencyPolicyRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateResiliencyPolicyRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateResiliencyPolicyRequest tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The tier for this resiliency policy, ranging from the highest severity (&lt;code&gt;MissionCritical&lt;/code&gt;) to lowest (&lt;code&gt;NonCritical&lt;/code&gt;).
   * @return tier
   */
  @javax.annotation.Nonnull
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateResiliencyPolicyRequest createResiliencyPolicyRequest = (CreateResiliencyPolicyRequest) o;
    return Objects.equals(this.clientToken, createResiliencyPolicyRequest.clientToken) &&
        Objects.equals(this.dataLocationConstraint, createResiliencyPolicyRequest.dataLocationConstraint) &&
        Objects.equals(this.policy, createResiliencyPolicyRequest.policy) &&
        Objects.equals(this.policyDescription, createResiliencyPolicyRequest.policyDescription) &&
        Objects.equals(this.policyName, createResiliencyPolicyRequest.policyName) &&
        Objects.equals(this.tags, createResiliencyPolicyRequest.tags) &&
        Objects.equals(this.tier, createResiliencyPolicyRequest.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, dataLocationConstraint, policy, policyDescription, policyName, tags, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateResiliencyPolicyRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    dataLocationConstraint: ").append(toIndentedString(dataLocationConstraint)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    policyDescription: ").append(toIndentedString(policyDescription)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("dataLocationConstraint");
    openapiFields.add("policy");
    openapiFields.add("policyDescription");
    openapiFields.add("policyName");
    openapiFields.add("tags");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policy");
    openapiRequiredFields.add("policyName");
    openapiRequiredFields.add("tier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateResiliencyPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateResiliencyPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateResiliencyPolicyRequest is not found in the empty JSON string", CreateResiliencyPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateResiliencyPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateResiliencyPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateResiliencyPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if ((jsonObj.get("dataLocationConstraint") != null && !jsonObj.get("dataLocationConstraint").isJsonNull()) && !jsonObj.get("dataLocationConstraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataLocationConstraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataLocationConstraint").toString()));
      }
      // validate the optional field `dataLocationConstraint`
      if (jsonObj.get("dataLocationConstraint") != null && !jsonObj.get("dataLocationConstraint").isJsonNull()) {
        DataLocationConstraintEnum.validateJsonElement(jsonObj.get("dataLocationConstraint"));
      }
      if ((jsonObj.get("policyDescription") != null && !jsonObj.get("policyDescription").isJsonNull()) && !jsonObj.get("policyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDescription").toString()));
      }
      if (!jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
      if (!jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the required field `tier`
      TierEnum.validateJsonElement(jsonObj.get("tier"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateResiliencyPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateResiliencyPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateResiliencyPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateResiliencyPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateResiliencyPolicyRequest>() {
           @Override
           public void write(JsonWriter out, CreateResiliencyPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateResiliencyPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateResiliencyPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateResiliencyPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to CreateResiliencyPolicyRequest
   */
  public static CreateResiliencyPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateResiliencyPolicyRequest.class);
  }

  /**
   * Convert an instance of CreateResiliencyPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

