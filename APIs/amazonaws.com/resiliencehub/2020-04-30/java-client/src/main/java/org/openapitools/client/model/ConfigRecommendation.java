/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AppComponentComplianceCost;
import org.openapitools.client.model.ConfigRecommendationOptimizationType;
import org.openapitools.client.model.HaArchitecture;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a recommendation configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigRecommendation {
  public static final String SERIALIZED_NAME_APP_COMPONENT_NAME = "appComponentName";
  @SerializedName(SERIALIZED_NAME_APP_COMPONENT_NAME)
  private String appComponentName;

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private Map compliance;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private AppComponentComplianceCost cost;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HA_ARCHITECTURE = "haArchitecture";
  @SerializedName(SERIALIZED_NAME_HA_ARCHITECTURE)
  private HaArchitecture haArchitecture;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIMIZATION_TYPE = "optimizationType";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_TYPE)
  private ConfigRecommendationOptimizationType optimizationType;

  public static final String SERIALIZED_NAME_RECOMMENDATION_COMPLIANCE = "recommendationCompliance";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_COMPLIANCE)
  private Map recommendationCompliance;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_SUGGESTED_CHANGES = "suggestedChanges";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_CHANGES)
  private List suggestedChanges;

  public ConfigRecommendation() {
  }

  public ConfigRecommendation appComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
    return this;
  }

  /**
   * Get appComponentName
   * @return appComponentName
   */
  @javax.annotation.Nullable
  public String getAppComponentName() {
    return appComponentName;
  }

  public void setAppComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
  }


  public ConfigRecommendation compliance(Map compliance) {
    this.compliance = compliance;
    return this;
  }

  /**
   * Get compliance
   * @return compliance
   */
  @javax.annotation.Nullable
  public Map getCompliance() {
    return compliance;
  }

  public void setCompliance(Map compliance) {
    this.compliance = compliance;
  }


  public ConfigRecommendation cost(AppComponentComplianceCost cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public AppComponentComplianceCost getCost() {
    return cost;
  }

  public void setCost(AppComponentComplianceCost cost) {
    this.cost = cost;
  }


  public ConfigRecommendation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ConfigRecommendation haArchitecture(HaArchitecture haArchitecture) {
    this.haArchitecture = haArchitecture;
    return this;
  }

  /**
   * Get haArchitecture
   * @return haArchitecture
   */
  @javax.annotation.Nullable
  public HaArchitecture getHaArchitecture() {
    return haArchitecture;
  }

  public void setHaArchitecture(HaArchitecture haArchitecture) {
    this.haArchitecture = haArchitecture;
  }


  public ConfigRecommendation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConfigRecommendation optimizationType(ConfigRecommendationOptimizationType optimizationType) {
    this.optimizationType = optimizationType;
    return this;
  }

  /**
   * Get optimizationType
   * @return optimizationType
   */
  @javax.annotation.Nonnull
  public ConfigRecommendationOptimizationType getOptimizationType() {
    return optimizationType;
  }

  public void setOptimizationType(ConfigRecommendationOptimizationType optimizationType) {
    this.optimizationType = optimizationType;
  }


  public ConfigRecommendation recommendationCompliance(Map recommendationCompliance) {
    this.recommendationCompliance = recommendationCompliance;
    return this;
  }

  /**
   * Get recommendationCompliance
   * @return recommendationCompliance
   */
  @javax.annotation.Nullable
  public Map getRecommendationCompliance() {
    return recommendationCompliance;
  }

  public void setRecommendationCompliance(Map recommendationCompliance) {
    this.recommendationCompliance = recommendationCompliance;
  }


  public ConfigRecommendation referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public ConfigRecommendation suggestedChanges(List suggestedChanges) {
    this.suggestedChanges = suggestedChanges;
    return this;
  }

  /**
   * Get suggestedChanges
   * @return suggestedChanges
   */
  @javax.annotation.Nullable
  public List getSuggestedChanges() {
    return suggestedChanges;
  }

  public void setSuggestedChanges(List suggestedChanges) {
    this.suggestedChanges = suggestedChanges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigRecommendation configRecommendation = (ConfigRecommendation) o;
    return Objects.equals(this.appComponentName, configRecommendation.appComponentName) &&
        Objects.equals(this.compliance, configRecommendation.compliance) &&
        Objects.equals(this.cost, configRecommendation.cost) &&
        Objects.equals(this.description, configRecommendation.description) &&
        Objects.equals(this.haArchitecture, configRecommendation.haArchitecture) &&
        Objects.equals(this.name, configRecommendation.name) &&
        Objects.equals(this.optimizationType, configRecommendation.optimizationType) &&
        Objects.equals(this.recommendationCompliance, configRecommendation.recommendationCompliance) &&
        Objects.equals(this.referenceId, configRecommendation.referenceId) &&
        Objects.equals(this.suggestedChanges, configRecommendation.suggestedChanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appComponentName, compliance, cost, description, haArchitecture, name, optimizationType, recommendationCompliance, referenceId, suggestedChanges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigRecommendation {\n");
    sb.append("    appComponentName: ").append(toIndentedString(appComponentName)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    haArchitecture: ").append(toIndentedString(haArchitecture)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optimizationType: ").append(toIndentedString(optimizationType)).append("\n");
    sb.append("    recommendationCompliance: ").append(toIndentedString(recommendationCompliance)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    suggestedChanges: ").append(toIndentedString(suggestedChanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appComponentName");
    openapiFields.add("compliance");
    openapiFields.add("cost");
    openapiFields.add("description");
    openapiFields.add("haArchitecture");
    openapiFields.add("name");
    openapiFields.add("optimizationType");
    openapiFields.add("recommendationCompliance");
    openapiFields.add("referenceId");
    openapiFields.add("suggestedChanges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("optimizationType");
    openapiRequiredFields.add("referenceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigRecommendation is not found in the empty JSON string", ConfigRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigRecommendation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appComponentName`
      if (jsonObj.get("appComponentName") != null && !jsonObj.get("appComponentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appComponentName"));
      }
      // validate the optional field `compliance`
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("compliance"));
      }
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        AppComponentComplianceCost.validateJsonElement(jsonObj.get("cost"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `haArchitecture`
      if (jsonObj.get("haArchitecture") != null && !jsonObj.get("haArchitecture").isJsonNull()) {
        HaArchitecture.validateJsonElement(jsonObj.get("haArchitecture"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `optimizationType`
      ConfigRecommendationOptimizationType.validateJsonElement(jsonObj.get("optimizationType"));
      // validate the optional field `recommendationCompliance`
      if (jsonObj.get("recommendationCompliance") != null && !jsonObj.get("recommendationCompliance").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("recommendationCompliance"));
      }
      // validate the required field `referenceId`
      String.validateJsonElement(jsonObj.get("referenceId"));
      // validate the optional field `suggestedChanges`
      if (jsonObj.get("suggestedChanges") != null && !jsonObj.get("suggestedChanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("suggestedChanges"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigRecommendation>() {
           @Override
           public void write(JsonWriter out, ConfigRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigRecommendation
   * @throws IOException if the JSON string is invalid with respect to ConfigRecommendation
   */
  public static ConfigRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigRecommendation.class);
  }

  /**
   * Convert an instance of ConfigRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

