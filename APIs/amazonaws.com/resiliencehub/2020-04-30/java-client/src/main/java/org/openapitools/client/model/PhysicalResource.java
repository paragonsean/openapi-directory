/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateAppVersionResourceRequestLogicalResourceId;
import org.openapitools.client.model.ResourceMappingPhysicalResourceId;
import org.openapitools.client.model.ResourceSourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or an Resilience Hub-native identifier. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhysicalResource {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private Map additionalInfo;

  public static final String SERIALIZED_NAME_APP_COMPONENTS = "appComponents";
  @SerializedName(SERIALIZED_NAME_APP_COMPONENTS)
  private List appComponents;

  public static final String SERIALIZED_NAME_EXCLUDED = "excluded";
  @SerializedName(SERIALIZED_NAME_EXCLUDED)
  private Boolean excluded;

  public static final String SERIALIZED_NAME_LOGICAL_RESOURCE_ID = "logicalResourceId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_RESOURCE_ID)
  private CreateAppVersionResourceRequestLogicalResourceId logicalResourceId;

  public static final String SERIALIZED_NAME_PARENT_RESOURCE_NAME = "parentResourceName";
  @SerializedName(SERIALIZED_NAME_PARENT_RESOURCE_NAME)
  private String parentResourceName;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID = "physicalResourceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID)
  private ResourceMappingPhysicalResourceId physicalResourceId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private ResourceSourceType sourceType;

  public PhysicalResource() {
  }

  public PhysicalResource additionalInfo(Map additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Get additionalInfo
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public Map getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(Map additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public PhysicalResource appComponents(List appComponents) {
    this.appComponents = appComponents;
    return this;
  }

  /**
   * Get appComponents
   * @return appComponents
   */
  @javax.annotation.Nullable
  public List getAppComponents() {
    return appComponents;
  }

  public void setAppComponents(List appComponents) {
    this.appComponents = appComponents;
  }


  public PhysicalResource excluded(Boolean excluded) {
    this.excluded = excluded;
    return this;
  }

  /**
   * Get excluded
   * @return excluded
   */
  @javax.annotation.Nullable
  public Boolean getExcluded() {
    return excluded;
  }

  public void setExcluded(Boolean excluded) {
    this.excluded = excluded;
  }


  public PhysicalResource logicalResourceId(CreateAppVersionResourceRequestLogicalResourceId logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
    return this;
  }

  /**
   * Get logicalResourceId
   * @return logicalResourceId
   */
  @javax.annotation.Nonnull
  public CreateAppVersionResourceRequestLogicalResourceId getLogicalResourceId() {
    return logicalResourceId;
  }

  public void setLogicalResourceId(CreateAppVersionResourceRequestLogicalResourceId logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
  }


  public PhysicalResource parentResourceName(String parentResourceName) {
    this.parentResourceName = parentResourceName;
    return this;
  }

  /**
   * Get parentResourceName
   * @return parentResourceName
   */
  @javax.annotation.Nullable
  public String getParentResourceName() {
    return parentResourceName;
  }

  public void setParentResourceName(String parentResourceName) {
    this.parentResourceName = parentResourceName;
  }


  public PhysicalResource physicalResourceId(ResourceMappingPhysicalResourceId physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
    return this;
  }

  /**
   * Get physicalResourceId
   * @return physicalResourceId
   */
  @javax.annotation.Nonnull
  public ResourceMappingPhysicalResourceId getPhysicalResourceId() {
    return physicalResourceId;
  }

  public void setPhysicalResourceId(ResourceMappingPhysicalResourceId physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
  }


  public PhysicalResource resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Get resourceName
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public PhysicalResource resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public PhysicalResource sourceType(ResourceSourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public ResourceSourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(ResourceSourceType sourceType) {
    this.sourceType = sourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalResource physicalResource = (PhysicalResource) o;
    return Objects.equals(this.additionalInfo, physicalResource.additionalInfo) &&
        Objects.equals(this.appComponents, physicalResource.appComponents) &&
        Objects.equals(this.excluded, physicalResource.excluded) &&
        Objects.equals(this.logicalResourceId, physicalResource.logicalResourceId) &&
        Objects.equals(this.parentResourceName, physicalResource.parentResourceName) &&
        Objects.equals(this.physicalResourceId, physicalResource.physicalResourceId) &&
        Objects.equals(this.resourceName, physicalResource.resourceName) &&
        Objects.equals(this.resourceType, physicalResource.resourceType) &&
        Objects.equals(this.sourceType, physicalResource.sourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, appComponents, excluded, logicalResourceId, parentResourceName, physicalResourceId, resourceName, resourceType, sourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalResource {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    appComponents: ").append(toIndentedString(appComponents)).append("\n");
    sb.append("    excluded: ").append(toIndentedString(excluded)).append("\n");
    sb.append("    logicalResourceId: ").append(toIndentedString(logicalResourceId)).append("\n");
    sb.append("    parentResourceName: ").append(toIndentedString(parentResourceName)).append("\n");
    sb.append("    physicalResourceId: ").append(toIndentedString(physicalResourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("appComponents");
    openapiFields.add("excluded");
    openapiFields.add("logicalResourceId");
    openapiFields.add("parentResourceName");
    openapiFields.add("physicalResourceId");
    openapiFields.add("resourceName");
    openapiFields.add("resourceType");
    openapiFields.add("sourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logicalResourceId");
    openapiRequiredFields.add("physicalResourceId");
    openapiRequiredFields.add("resourceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhysicalResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhysicalResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhysicalResource is not found in the empty JSON string", PhysicalResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhysicalResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhysicalResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhysicalResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalInfo`
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("additionalInfo"));
      }
      // validate the optional field `appComponents`
      if (jsonObj.get("appComponents") != null && !jsonObj.get("appComponents").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("appComponents"));
      }
      // validate the optional field `excluded`
      if (jsonObj.get("excluded") != null && !jsonObj.get("excluded").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("excluded"));
      }
      // validate the required field `logicalResourceId`
      CreateAppVersionResourceRequestLogicalResourceId.validateJsonElement(jsonObj.get("logicalResourceId"));
      // validate the optional field `parentResourceName`
      if (jsonObj.get("parentResourceName") != null && !jsonObj.get("parentResourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parentResourceName"));
      }
      // validate the required field `physicalResourceId`
      ResourceMappingPhysicalResourceId.validateJsonElement(jsonObj.get("physicalResourceId"));
      // validate the optional field `resourceName`
      if (jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceName"));
      }
      // validate the required field `resourceType`
      String.validateJsonElement(jsonObj.get("resourceType"));
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        ResourceSourceType.validateJsonElement(jsonObj.get("sourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhysicalResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhysicalResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhysicalResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhysicalResource.class));

       return (TypeAdapter<T>) new TypeAdapter<PhysicalResource>() {
           @Override
           public void write(JsonWriter out, PhysicalResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhysicalResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhysicalResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhysicalResource
   * @throws IOException if the JSON string is invalid with respect to PhysicalResource
   */
  public static PhysicalResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhysicalResource.class);
  }

  /**
   * Convert an instance of PhysicalResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

