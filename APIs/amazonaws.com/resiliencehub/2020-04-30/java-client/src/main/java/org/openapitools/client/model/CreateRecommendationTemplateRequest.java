/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RenderRecommendationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRecommendationTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRecommendationTemplateRequest {
  public static final String SERIALIZED_NAME_ASSESSMENT_ARN = "assessmentArn";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ARN)
  private String assessmentArn;

  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  /**
   * &lt;p&gt;The format for the recommendation template.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;CfnJson&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is CloudFormation JSON.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CfnYaml&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is CloudFormation YAML.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CFN_YAML("CfnYaml"),
    
    CFN_JSON("CfnJson");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECOMMENDATION_IDS = "recommendationIds";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_IDS)
  private List<String> recommendationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDATION_TYPES = "recommendationTypes";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_TYPES)
  private List<RenderRecommendationType> recommendationTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateRecommendationTemplateRequest() {
  }

  public CreateRecommendationTemplateRequest assessmentArn(String assessmentArn) {
    this.assessmentArn = assessmentArn;
    return this;
  }

  /**
   * Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:&lt;code&gt;partition&lt;/code&gt;:resiliencehub:&lt;code&gt;region&lt;/code&gt;:&lt;code&gt;account&lt;/code&gt;:app-assessment/&lt;code&gt;app-id&lt;/code&gt;. For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt; Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt; guide.
   * @return assessmentArn
   */
  @javax.annotation.Nonnull
  public String getAssessmentArn() {
    return assessmentArn;
  }

  public void setAssessmentArn(String assessmentArn) {
    this.assessmentArn = assessmentArn;
  }


  public CreateRecommendationTemplateRequest bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * The name of the Amazon S3 bucket that will contain the recommendation template.
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public CreateRecommendationTemplateRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateRecommendationTemplateRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * &lt;p&gt;The format for the recommendation template.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;CfnJson&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is CloudFormation JSON.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CfnYaml&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is CloudFormation YAML.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public CreateRecommendationTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the recommendation template.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRecommendationTemplateRequest recommendationIds(List<String> recommendationIds) {
    this.recommendationIds = recommendationIds;
    return this;
  }

  public CreateRecommendationTemplateRequest addRecommendationIdsItem(String recommendationIdsItem) {
    if (this.recommendationIds == null) {
      this.recommendationIds = new ArrayList<>();
    }
    this.recommendationIds.add(recommendationIdsItem);
    return this;
  }

  /**
   * Identifiers for the recommendations used to create a recommendation template.
   * @return recommendationIds
   */
  @javax.annotation.Nullable
  public List<String> getRecommendationIds() {
    return recommendationIds;
  }

  public void setRecommendationIds(List<String> recommendationIds) {
    this.recommendationIds = recommendationIds;
  }


  public CreateRecommendationTemplateRequest recommendationTypes(List<RenderRecommendationType> recommendationTypes) {
    this.recommendationTypes = recommendationTypes;
    return this;
  }

  public CreateRecommendationTemplateRequest addRecommendationTypesItem(RenderRecommendationType recommendationTypesItem) {
    if (this.recommendationTypes == null) {
      this.recommendationTypes = new ArrayList<>();
    }
    this.recommendationTypes.add(recommendationTypesItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of strings that specify the recommendation template type or types.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Alarm&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is an &lt;a&gt;AlarmRecommendation&lt;/a&gt; template.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Sop&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is a &lt;a&gt;SopRecommendation&lt;/a&gt; template.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Test&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The template is a &lt;a&gt;TestRecommendation&lt;/a&gt; template.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
   * @return recommendationTypes
   */
  @javax.annotation.Nullable
  public List<RenderRecommendationType> getRecommendationTypes() {
    return recommendationTypes;
  }

  public void setRecommendationTypes(List<RenderRecommendationType> recommendationTypes) {
    this.recommendationTypes = recommendationTypes;
  }


  public CreateRecommendationTemplateRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateRecommendationTemplateRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRecommendationTemplateRequest createRecommendationTemplateRequest = (CreateRecommendationTemplateRequest) o;
    return Objects.equals(this.assessmentArn, createRecommendationTemplateRequest.assessmentArn) &&
        Objects.equals(this.bucketName, createRecommendationTemplateRequest.bucketName) &&
        Objects.equals(this.clientToken, createRecommendationTemplateRequest.clientToken) &&
        Objects.equals(this.format, createRecommendationTemplateRequest.format) &&
        Objects.equals(this.name, createRecommendationTemplateRequest.name) &&
        Objects.equals(this.recommendationIds, createRecommendationTemplateRequest.recommendationIds) &&
        Objects.equals(this.recommendationTypes, createRecommendationTemplateRequest.recommendationTypes) &&
        Objects.equals(this.tags, createRecommendationTemplateRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentArn, bucketName, clientToken, format, name, recommendationIds, recommendationTypes, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRecommendationTemplateRequest {\n");
    sb.append("    assessmentArn: ").append(toIndentedString(assessmentArn)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recommendationIds: ").append(toIndentedString(recommendationIds)).append("\n");
    sb.append("    recommendationTypes: ").append(toIndentedString(recommendationTypes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentArn");
    openapiFields.add("bucketName");
    openapiFields.add("clientToken");
    openapiFields.add("format");
    openapiFields.add("name");
    openapiFields.add("recommendationIds");
    openapiFields.add("recommendationTypes");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assessmentArn");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRecommendationTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRecommendationTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRecommendationTemplateRequest is not found in the empty JSON string", CreateRecommendationTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRecommendationTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRecommendationTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRecommendationTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("assessmentArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentArn").toString()));
      }
      if ((jsonObj.get("bucketName") != null && !jsonObj.get("bucketName").isJsonNull()) && !jsonObj.get("bucketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketName").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recommendationIds") != null && !jsonObj.get("recommendationIds").isJsonNull() && !jsonObj.get("recommendationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationIds` to be an array in the JSON string but got `%s`", jsonObj.get("recommendationIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recommendationTypes") != null && !jsonObj.get("recommendationTypes").isJsonNull() && !jsonObj.get("recommendationTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("recommendationTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRecommendationTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRecommendationTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRecommendationTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRecommendationTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRecommendationTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateRecommendationTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRecommendationTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRecommendationTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRecommendationTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRecommendationTemplateRequest
   */
  public static CreateRecommendationTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRecommendationTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateRecommendationTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

