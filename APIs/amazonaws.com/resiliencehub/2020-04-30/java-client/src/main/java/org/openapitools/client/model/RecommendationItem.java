/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExcludeRecommendationReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a recommendation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationItem {
  public static final String SERIALIZED_NAME_ALREADY_IMPLEMENTED = "alreadyImplemented";
  @SerializedName(SERIALIZED_NAME_ALREADY_IMPLEMENTED)
  private Boolean alreadyImplemented;

  public static final String SERIALIZED_NAME_EXCLUDE_REASON = "excludeReason";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_REASON)
  private ExcludeRecommendationReason excludeReason;

  public static final String SERIALIZED_NAME_EXCLUDED = "excluded";
  @SerializedName(SERIALIZED_NAME_EXCLUDED)
  private Boolean excluded;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_TARGET_ACCOUNT_ID = "targetAccountId";
  @SerializedName(SERIALIZED_NAME_TARGET_ACCOUNT_ID)
  private String targetAccountId;

  public static final String SERIALIZED_NAME_TARGET_REGION = "targetRegion";
  @SerializedName(SERIALIZED_NAME_TARGET_REGION)
  private String targetRegion;

  public RecommendationItem() {
  }

  public RecommendationItem alreadyImplemented(Boolean alreadyImplemented) {
    this.alreadyImplemented = alreadyImplemented;
    return this;
  }

  /**
   * Get alreadyImplemented
   * @return alreadyImplemented
   */
  @javax.annotation.Nullable
  public Boolean getAlreadyImplemented() {
    return alreadyImplemented;
  }

  public void setAlreadyImplemented(Boolean alreadyImplemented) {
    this.alreadyImplemented = alreadyImplemented;
  }


  public RecommendationItem excludeReason(ExcludeRecommendationReason excludeReason) {
    this.excludeReason = excludeReason;
    return this;
  }

  /**
   * Get excludeReason
   * @return excludeReason
   */
  @javax.annotation.Nullable
  public ExcludeRecommendationReason getExcludeReason() {
    return excludeReason;
  }

  public void setExcludeReason(ExcludeRecommendationReason excludeReason) {
    this.excludeReason = excludeReason;
  }


  public RecommendationItem excluded(Boolean excluded) {
    this.excluded = excluded;
    return this;
  }

  /**
   * Get excluded
   * @return excluded
   */
  @javax.annotation.Nullable
  public Boolean getExcluded() {
    return excluded;
  }

  public void setExcluded(Boolean excluded) {
    this.excluded = excluded;
  }


  public RecommendationItem resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public RecommendationItem targetAccountId(String targetAccountId) {
    this.targetAccountId = targetAccountId;
    return this;
  }

  /**
   * Get targetAccountId
   * @return targetAccountId
   */
  @javax.annotation.Nullable
  public String getTargetAccountId() {
    return targetAccountId;
  }

  public void setTargetAccountId(String targetAccountId) {
    this.targetAccountId = targetAccountId;
  }


  public RecommendationItem targetRegion(String targetRegion) {
    this.targetRegion = targetRegion;
    return this;
  }

  /**
   * Get targetRegion
   * @return targetRegion
   */
  @javax.annotation.Nullable
  public String getTargetRegion() {
    return targetRegion;
  }

  public void setTargetRegion(String targetRegion) {
    this.targetRegion = targetRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationItem recommendationItem = (RecommendationItem) o;
    return Objects.equals(this.alreadyImplemented, recommendationItem.alreadyImplemented) &&
        Objects.equals(this.excludeReason, recommendationItem.excludeReason) &&
        Objects.equals(this.excluded, recommendationItem.excluded) &&
        Objects.equals(this.resourceId, recommendationItem.resourceId) &&
        Objects.equals(this.targetAccountId, recommendationItem.targetAccountId) &&
        Objects.equals(this.targetRegion, recommendationItem.targetRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alreadyImplemented, excludeReason, excluded, resourceId, targetAccountId, targetRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationItem {\n");
    sb.append("    alreadyImplemented: ").append(toIndentedString(alreadyImplemented)).append("\n");
    sb.append("    excludeReason: ").append(toIndentedString(excludeReason)).append("\n");
    sb.append("    excluded: ").append(toIndentedString(excluded)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    targetAccountId: ").append(toIndentedString(targetAccountId)).append("\n");
    sb.append("    targetRegion: ").append(toIndentedString(targetRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alreadyImplemented");
    openapiFields.add("excludeReason");
    openapiFields.add("excluded");
    openapiFields.add("resourceId");
    openapiFields.add("targetAccountId");
    openapiFields.add("targetRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationItem is not found in the empty JSON string", RecommendationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alreadyImplemented`
      if (jsonObj.get("alreadyImplemented") != null && !jsonObj.get("alreadyImplemented").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("alreadyImplemented"));
      }
      // validate the optional field `excludeReason`
      if (jsonObj.get("excludeReason") != null && !jsonObj.get("excludeReason").isJsonNull()) {
        ExcludeRecommendationReason.validateJsonElement(jsonObj.get("excludeReason"));
      }
      // validate the optional field `excluded`
      if (jsonObj.get("excluded") != null && !jsonObj.get("excluded").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("excluded"));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceId"));
      }
      // validate the optional field `targetAccountId`
      if (jsonObj.get("targetAccountId") != null && !jsonObj.get("targetAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("targetAccountId"));
      }
      // validate the optional field `targetRegion`
      if (jsonObj.get("targetRegion") != null && !jsonObj.get("targetRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("targetRegion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationItem>() {
           @Override
           public void write(JsonWriter out, RecommendationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationItem
   * @throws IOException if the JSON string is invalid with respect to RecommendationItem
   */
  public static RecommendationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationItem.class);
  }

  /**
   * Convert an instance of RecommendationItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

