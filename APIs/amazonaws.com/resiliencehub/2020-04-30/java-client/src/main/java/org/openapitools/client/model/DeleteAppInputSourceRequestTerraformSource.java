/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteAppInputSourceRequestTerraformSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteAppInputSourceRequestTerraformSource {
  public static final String SERIALIZED_NAME_S3_STATE_FILE_URL = "s3StateFileUrl";
  @SerializedName(SERIALIZED_NAME_S3_STATE_FILE_URL)
  private String s3StateFileUrl;

  public DeleteAppInputSourceRequestTerraformSource() {
  }

  public DeleteAppInputSourceRequestTerraformSource s3StateFileUrl(String s3StateFileUrl) {
    this.s3StateFileUrl = s3StateFileUrl;
    return this;
  }

  /**
   * Get s3StateFileUrl
   * @return s3StateFileUrl
   */
  @javax.annotation.Nonnull
  public String getS3StateFileUrl() {
    return s3StateFileUrl;
  }

  public void setS3StateFileUrl(String s3StateFileUrl) {
    this.s3StateFileUrl = s3StateFileUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteAppInputSourceRequestTerraformSource deleteAppInputSourceRequestTerraformSource = (DeleteAppInputSourceRequestTerraformSource) o;
    return Objects.equals(this.s3StateFileUrl, deleteAppInputSourceRequestTerraformSource.s3StateFileUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3StateFileUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteAppInputSourceRequestTerraformSource {\n");
    sb.append("    s3StateFileUrl: ").append(toIndentedString(s3StateFileUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("s3StateFileUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("s3StateFileUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteAppInputSourceRequestTerraformSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteAppInputSourceRequestTerraformSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteAppInputSourceRequestTerraformSource is not found in the empty JSON string", DeleteAppInputSourceRequestTerraformSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteAppInputSourceRequestTerraformSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteAppInputSourceRequestTerraformSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteAppInputSourceRequestTerraformSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `s3StateFileUrl`
      String.validateJsonElement(jsonObj.get("s3StateFileUrl"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteAppInputSourceRequestTerraformSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteAppInputSourceRequestTerraformSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteAppInputSourceRequestTerraformSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteAppInputSourceRequestTerraformSource.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteAppInputSourceRequestTerraformSource>() {
           @Override
           public void write(JsonWriter out, DeleteAppInputSourceRequestTerraformSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteAppInputSourceRequestTerraformSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteAppInputSourceRequestTerraformSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteAppInputSourceRequestTerraformSource
   * @throws IOException if the JSON string is invalid with respect to DeleteAppInputSourceRequestTerraformSource
   */
  public static DeleteAppInputSourceRequestTerraformSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteAppInputSourceRequestTerraformSource.class);
  }

  /**
   * Convert an instance of DeleteAppInputSourceRequestTerraformSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

