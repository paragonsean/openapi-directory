/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PermissionModelType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PermissionModel {
  public static final String SERIALIZED_NAME_CROSS_ACCOUNT_ROLE_ARNS = "crossAccountRoleArns";
  @SerializedName(SERIALIZED_NAME_CROSS_ACCOUNT_ROLE_ARNS)
  private List crossAccountRoleArns;

  public static final String SERIALIZED_NAME_INVOKER_ROLE_NAME = "invokerRoleName";
  @SerializedName(SERIALIZED_NAME_INVOKER_ROLE_NAME)
  private String invokerRoleName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PermissionModelType type;

  public PermissionModel() {
  }

  public PermissionModel crossAccountRoleArns(List crossAccountRoleArns) {
    this.crossAccountRoleArns = crossAccountRoleArns;
    return this;
  }

  /**
   * Get crossAccountRoleArns
   * @return crossAccountRoleArns
   */
  @javax.annotation.Nullable
  public List getCrossAccountRoleArns() {
    return crossAccountRoleArns;
  }

  public void setCrossAccountRoleArns(List crossAccountRoleArns) {
    this.crossAccountRoleArns = crossAccountRoleArns;
  }


  public PermissionModel invokerRoleName(String invokerRoleName) {
    this.invokerRoleName = invokerRoleName;
    return this;
  }

  /**
   * Get invokerRoleName
   * @return invokerRoleName
   */
  @javax.annotation.Nullable
  public String getInvokerRoleName() {
    return invokerRoleName;
  }

  public void setInvokerRoleName(String invokerRoleName) {
    this.invokerRoleName = invokerRoleName;
  }


  public PermissionModel type(PermissionModelType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public PermissionModelType getType() {
    return type;
  }

  public void setType(PermissionModelType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PermissionModel permissionModel = (PermissionModel) o;
    return Objects.equals(this.crossAccountRoleArns, permissionModel.crossAccountRoleArns) &&
        Objects.equals(this.invokerRoleName, permissionModel.invokerRoleName) &&
        Objects.equals(this.type, permissionModel.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossAccountRoleArns, invokerRoleName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PermissionModel {\n");
    sb.append("    crossAccountRoleArns: ").append(toIndentedString(crossAccountRoleArns)).append("\n");
    sb.append("    invokerRoleName: ").append(toIndentedString(invokerRoleName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crossAccountRoleArns");
    openapiFields.add("invokerRoleName");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PermissionModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PermissionModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PermissionModel is not found in the empty JSON string", PermissionModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PermissionModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PermissionModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PermissionModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `crossAccountRoleArns`
      if (jsonObj.get("crossAccountRoleArns") != null && !jsonObj.get("crossAccountRoleArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("crossAccountRoleArns"));
      }
      // validate the optional field `invokerRoleName`
      if (jsonObj.get("invokerRoleName") != null && !jsonObj.get("invokerRoleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("invokerRoleName"));
      }
      // validate the required field `type`
      PermissionModelType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PermissionModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PermissionModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PermissionModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PermissionModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PermissionModel>() {
           @Override
           public void write(JsonWriter out, PermissionModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PermissionModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PermissionModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PermissionModel
   * @throws IOException if the JSON string is invalid with respect to PermissionModel
   */
  public static PermissionModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PermissionModel.class);
  }

  /**
   * Convert an instance of PermissionModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

