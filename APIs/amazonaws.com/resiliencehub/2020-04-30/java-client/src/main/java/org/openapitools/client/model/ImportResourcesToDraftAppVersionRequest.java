/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EksSource;
import org.openapitools.client.model.TerraformSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportResourcesToDraftAppVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportResourcesToDraftAppVersionRequest {
  public static final String SERIALIZED_NAME_APP_ARN = "appArn";
  @SerializedName(SERIALIZED_NAME_APP_ARN)
  private String appArn;

  public static final String SERIALIZED_NAME_EKS_SOURCES = "eksSources";
  @SerializedName(SERIALIZED_NAME_EKS_SOURCES)
  private List<EksSource> eksSources = new ArrayList<>();

  /**
   * The import strategy you would like to set to import resources into Resilience Hub application.
   */
  @JsonAdapter(ImportStrategyEnum.Adapter.class)
  public enum ImportStrategyEnum {
    ADD_ONLY("AddOnly"),
    
    REPLACE_ALL("ReplaceAll");

    private String value;

    ImportStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImportStrategyEnum fromValue(String value) {
      for (ImportStrategyEnum b : ImportStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImportStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImportStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImportStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImportStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImportStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPORT_STRATEGY = "importStrategy";
  @SerializedName(SERIALIZED_NAME_IMPORT_STRATEGY)
  private ImportStrategyEnum importStrategy;

  public static final String SERIALIZED_NAME_SOURCE_ARNS = "sourceArns";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARNS)
  private List<String> sourceArns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERRAFORM_SOURCES = "terraformSources";
  @SerializedName(SERIALIZED_NAME_TERRAFORM_SOURCES)
  private List<TerraformSource> terraformSources = new ArrayList<>();

  public ImportResourcesToDraftAppVersionRequest() {
  }

  public ImportResourcesToDraftAppVersionRequest appArn(String appArn) {
    this.appArn = appArn;
    return this;
  }

  /**
   * Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:&lt;code&gt;partition&lt;/code&gt;:resiliencehub:&lt;code&gt;region&lt;/code&gt;:&lt;code&gt;account&lt;/code&gt;:app/&lt;code&gt;app-id&lt;/code&gt;. For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt; Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt; guide.
   * @return appArn
   */
  @javax.annotation.Nonnull
  public String getAppArn() {
    return appArn;
  }

  public void setAppArn(String appArn) {
    this.appArn = appArn;
  }


  public ImportResourcesToDraftAppVersionRequest eksSources(List<EksSource> eksSources) {
    this.eksSources = eksSources;
    return this;
  }

  public ImportResourcesToDraftAppVersionRequest addEksSourcesItem(EksSource eksSourcesItem) {
    if (this.eksSources == null) {
      this.eksSources = new ArrayList<>();
    }
    this.eksSources.add(eksSourcesItem);
    return this;
  }

  /**
   * The input sources of the Amazon Elastic Kubernetes Service resources you need to import.
   * @return eksSources
   */
  @javax.annotation.Nullable
  public List<EksSource> getEksSources() {
    return eksSources;
  }

  public void setEksSources(List<EksSource> eksSources) {
    this.eksSources = eksSources;
  }


  public ImportResourcesToDraftAppVersionRequest importStrategy(ImportStrategyEnum importStrategy) {
    this.importStrategy = importStrategy;
    return this;
  }

  /**
   * The import strategy you would like to set to import resources into Resilience Hub application.
   * @return importStrategy
   */
  @javax.annotation.Nullable
  public ImportStrategyEnum getImportStrategy() {
    return importStrategy;
  }

  public void setImportStrategy(ImportStrategyEnum importStrategy) {
    this.importStrategy = importStrategy;
  }


  public ImportResourcesToDraftAppVersionRequest sourceArns(List<String> sourceArns) {
    this.sourceArns = sourceArns;
    return this;
  }

  public ImportResourcesToDraftAppVersionRequest addSourceArnsItem(String sourceArnsItem) {
    if (this.sourceArns == null) {
      this.sourceArns = new ArrayList<>();
    }
    this.sourceArns.add(sourceArnsItem);
    return this;
  }

  /**
   * The Amazon Resource Names (ARNs) for the resources.
   * @return sourceArns
   */
  @javax.annotation.Nullable
  public List<String> getSourceArns() {
    return sourceArns;
  }

  public void setSourceArns(List<String> sourceArns) {
    this.sourceArns = sourceArns;
  }


  public ImportResourcesToDraftAppVersionRequest terraformSources(List<TerraformSource> terraformSources) {
    this.terraformSources = terraformSources;
    return this;
  }

  public ImportResourcesToDraftAppVersionRequest addTerraformSourcesItem(TerraformSource terraformSourcesItem) {
    if (this.terraformSources == null) {
      this.terraformSources = new ArrayList<>();
    }
    this.terraformSources.add(terraformSourcesItem);
    return this;
  }

  /**
   *  A list of terraform file s3 URLs you need to import. 
   * @return terraformSources
   */
  @javax.annotation.Nullable
  public List<TerraformSource> getTerraformSources() {
    return terraformSources;
  }

  public void setTerraformSources(List<TerraformSource> terraformSources) {
    this.terraformSources = terraformSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportResourcesToDraftAppVersionRequest importResourcesToDraftAppVersionRequest = (ImportResourcesToDraftAppVersionRequest) o;
    return Objects.equals(this.appArn, importResourcesToDraftAppVersionRequest.appArn) &&
        Objects.equals(this.eksSources, importResourcesToDraftAppVersionRequest.eksSources) &&
        Objects.equals(this.importStrategy, importResourcesToDraftAppVersionRequest.importStrategy) &&
        Objects.equals(this.sourceArns, importResourcesToDraftAppVersionRequest.sourceArns) &&
        Objects.equals(this.terraformSources, importResourcesToDraftAppVersionRequest.terraformSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appArn, eksSources, importStrategy, sourceArns, terraformSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportResourcesToDraftAppVersionRequest {\n");
    sb.append("    appArn: ").append(toIndentedString(appArn)).append("\n");
    sb.append("    eksSources: ").append(toIndentedString(eksSources)).append("\n");
    sb.append("    importStrategy: ").append(toIndentedString(importStrategy)).append("\n");
    sb.append("    sourceArns: ").append(toIndentedString(sourceArns)).append("\n");
    sb.append("    terraformSources: ").append(toIndentedString(terraformSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appArn");
    openapiFields.add("eksSources");
    openapiFields.add("importStrategy");
    openapiFields.add("sourceArns");
    openapiFields.add("terraformSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportResourcesToDraftAppVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportResourcesToDraftAppVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportResourcesToDraftAppVersionRequest is not found in the empty JSON string", ImportResourcesToDraftAppVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportResourcesToDraftAppVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportResourcesToDraftAppVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportResourcesToDraftAppVersionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appArn").toString()));
      }
      if (jsonObj.get("eksSources") != null && !jsonObj.get("eksSources").isJsonNull()) {
        JsonArray jsonArrayeksSources = jsonObj.getAsJsonArray("eksSources");
        if (jsonArrayeksSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eksSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eksSources` to be an array in the JSON string but got `%s`", jsonObj.get("eksSources").toString()));
          }

          // validate the optional field `eksSources` (array)
          for (int i = 0; i < jsonArrayeksSources.size(); i++) {
            EksSource.validateJsonElement(jsonArrayeksSources.get(i));
          };
        }
      }
      if ((jsonObj.get("importStrategy") != null && !jsonObj.get("importStrategy").isJsonNull()) && !jsonObj.get("importStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importStrategy").toString()));
      }
      // validate the optional field `importStrategy`
      if (jsonObj.get("importStrategy") != null && !jsonObj.get("importStrategy").isJsonNull()) {
        ImportStrategyEnum.validateJsonElement(jsonObj.get("importStrategy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceArns") != null && !jsonObj.get("sourceArns").isJsonNull() && !jsonObj.get("sourceArns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceArns` to be an array in the JSON string but got `%s`", jsonObj.get("sourceArns").toString()));
      }
      if (jsonObj.get("terraformSources") != null && !jsonObj.get("terraformSources").isJsonNull()) {
        JsonArray jsonArrayterraformSources = jsonObj.getAsJsonArray("terraformSources");
        if (jsonArrayterraformSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("terraformSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `terraformSources` to be an array in the JSON string but got `%s`", jsonObj.get("terraformSources").toString()));
          }

          // validate the optional field `terraformSources` (array)
          for (int i = 0; i < jsonArrayterraformSources.size(); i++) {
            TerraformSource.validateJsonElement(jsonArrayterraformSources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportResourcesToDraftAppVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportResourcesToDraftAppVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportResourcesToDraftAppVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportResourcesToDraftAppVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportResourcesToDraftAppVersionRequest>() {
           @Override
           public void write(JsonWriter out, ImportResourcesToDraftAppVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportResourcesToDraftAppVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportResourcesToDraftAppVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportResourcesToDraftAppVersionRequest
   * @throws IOException if the JSON string is invalid with respect to ImportResourcesToDraftAppVersionRequest
   */
  public static ImportResourcesToDraftAppVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportResourcesToDraftAppVersionRequest.class);
  }

  /**
   * Convert an instance of ImportResourcesToDraftAppVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

