/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DataLocationConstraint;
import org.openapitools.client.model.EstimatedCostTier;
import org.openapitools.client.model.ResiliencyPolicyTier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppAssessmentPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppAssessmentPolicy {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DATA_LOCATION_CONSTRAINT = "dataLocationConstraint";
  @SerializedName(SERIALIZED_NAME_DATA_LOCATION_CONSTRAINT)
  private DataLocationConstraint dataLocationConstraint;

  public static final String SERIALIZED_NAME_ESTIMATED_COST_TIER = "estimatedCostTier";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_COST_TIER)
  private EstimatedCostTier estimatedCostTier;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private Map policy;

  public static final String SERIALIZED_NAME_POLICY_ARN = "policyArn";
  @SerializedName(SERIALIZED_NAME_POLICY_ARN)
  private String policyArn;

  public static final String SERIALIZED_NAME_POLICY_DESCRIPTION = "policyDescription";
  @SerializedName(SERIALIZED_NAME_POLICY_DESCRIPTION)
  private String policyDescription;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private ResiliencyPolicyTier tier;

  public AppAssessmentPolicy() {
  }

  public AppAssessmentPolicy creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public AppAssessmentPolicy dataLocationConstraint(DataLocationConstraint dataLocationConstraint) {
    this.dataLocationConstraint = dataLocationConstraint;
    return this;
  }

  /**
   * Get dataLocationConstraint
   * @return dataLocationConstraint
   */
  @javax.annotation.Nullable
  public DataLocationConstraint getDataLocationConstraint() {
    return dataLocationConstraint;
  }

  public void setDataLocationConstraint(DataLocationConstraint dataLocationConstraint) {
    this.dataLocationConstraint = dataLocationConstraint;
  }


  public AppAssessmentPolicy estimatedCostTier(EstimatedCostTier estimatedCostTier) {
    this.estimatedCostTier = estimatedCostTier;
    return this;
  }

  /**
   * Get estimatedCostTier
   * @return estimatedCostTier
   */
  @javax.annotation.Nullable
  public EstimatedCostTier getEstimatedCostTier() {
    return estimatedCostTier;
  }

  public void setEstimatedCostTier(EstimatedCostTier estimatedCostTier) {
    this.estimatedCostTier = estimatedCostTier;
  }


  public AppAssessmentPolicy policy(Map policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public Map getPolicy() {
    return policy;
  }

  public void setPolicy(Map policy) {
    this.policy = policy;
  }


  public AppAssessmentPolicy policyArn(String policyArn) {
    this.policyArn = policyArn;
    return this;
  }

  /**
   * Get policyArn
   * @return policyArn
   */
  @javax.annotation.Nullable
  public String getPolicyArn() {
    return policyArn;
  }

  public void setPolicyArn(String policyArn) {
    this.policyArn = policyArn;
  }


  public AppAssessmentPolicy policyDescription(String policyDescription) {
    this.policyDescription = policyDescription;
    return this;
  }

  /**
   * Get policyDescription
   * @return policyDescription
   */
  @javax.annotation.Nullable
  public String getPolicyDescription() {
    return policyDescription;
  }

  public void setPolicyDescription(String policyDescription) {
    this.policyDescription = policyDescription;
  }


  public AppAssessmentPolicy policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * Get policyName
   * @return policyName
   */
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public AppAssessmentPolicy tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public AppAssessmentPolicy tier(ResiliencyPolicyTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public ResiliencyPolicyTier getTier() {
    return tier;
  }

  public void setTier(ResiliencyPolicyTier tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppAssessmentPolicy appAssessmentPolicy = (AppAssessmentPolicy) o;
    return Objects.equals(this.creationTime, appAssessmentPolicy.creationTime) &&
        Objects.equals(this.dataLocationConstraint, appAssessmentPolicy.dataLocationConstraint) &&
        Objects.equals(this.estimatedCostTier, appAssessmentPolicy.estimatedCostTier) &&
        Objects.equals(this.policy, appAssessmentPolicy.policy) &&
        Objects.equals(this.policyArn, appAssessmentPolicy.policyArn) &&
        Objects.equals(this.policyDescription, appAssessmentPolicy.policyDescription) &&
        Objects.equals(this.policyName, appAssessmentPolicy.policyName) &&
        Objects.equals(this.tags, appAssessmentPolicy.tags) &&
        Objects.equals(this.tier, appAssessmentPolicy.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, dataLocationConstraint, estimatedCostTier, policy, policyArn, policyDescription, policyName, tags, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppAssessmentPolicy {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    dataLocationConstraint: ").append(toIndentedString(dataLocationConstraint)).append("\n");
    sb.append("    estimatedCostTier: ").append(toIndentedString(estimatedCostTier)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    policyArn: ").append(toIndentedString(policyArn)).append("\n");
    sb.append("    policyDescription: ").append(toIndentedString(policyDescription)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("dataLocationConstraint");
    openapiFields.add("estimatedCostTier");
    openapiFields.add("policy");
    openapiFields.add("policyArn");
    openapiFields.add("policyDescription");
    openapiFields.add("policyName");
    openapiFields.add("tags");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppAssessmentPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppAssessmentPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppAssessmentPolicy is not found in the empty JSON string", AppAssessmentPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppAssessmentPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppAssessmentPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `dataLocationConstraint`
      if (jsonObj.get("dataLocationConstraint") != null && !jsonObj.get("dataLocationConstraint").isJsonNull()) {
        DataLocationConstraint.validateJsonElement(jsonObj.get("dataLocationConstraint"));
      }
      // validate the optional field `estimatedCostTier`
      if (jsonObj.get("estimatedCostTier") != null && !jsonObj.get("estimatedCostTier").isJsonNull()) {
        EstimatedCostTier.validateJsonElement(jsonObj.get("estimatedCostTier"));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("policy"));
      }
      // validate the optional field `policyArn`
      if (jsonObj.get("policyArn") != null && !jsonObj.get("policyArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("policyArn"));
      }
      // validate the optional field `policyDescription`
      if (jsonObj.get("policyDescription") != null && !jsonObj.get("policyDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("policyDescription"));
      }
      // validate the optional field `policyName`
      if (jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("policyName"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        ResiliencyPolicyTier.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppAssessmentPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppAssessmentPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppAssessmentPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppAssessmentPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<AppAssessmentPolicy>() {
           @Override
           public void write(JsonWriter out, AppAssessmentPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppAssessmentPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppAssessmentPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppAssessmentPolicy
   * @throws IOException if the JSON string is invalid with respect to AppAssessmentPolicy
   */
  public static AppAssessmentPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppAssessmentPolicy.class);
  }

  /**
   * Convert an instance of AppAssessmentPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

