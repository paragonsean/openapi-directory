/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExcludeRecommendationReason;
import org.openapitools.client.model.UpdateRecommendationStatusRequestEntryItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of operational recommendations that were successfully included or excluded.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchUpdateRecommendationStatusSuccessfulEntry {
  public static final String SERIALIZED_NAME_ENTRY_ID = "entryId";
  @SerializedName(SERIALIZED_NAME_ENTRY_ID)
  private String entryId;

  public static final String SERIALIZED_NAME_EXCLUDE_REASON = "excludeReason";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_REASON)
  private ExcludeRecommendationReason excludeReason;

  public static final String SERIALIZED_NAME_EXCLUDED = "excluded";
  @SerializedName(SERIALIZED_NAME_EXCLUDED)
  private Boolean excluded;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private UpdateRecommendationStatusRequestEntryItem item;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public BatchUpdateRecommendationStatusSuccessfulEntry() {
  }

  public BatchUpdateRecommendationStatusSuccessfulEntry entryId(String entryId) {
    this.entryId = entryId;
    return this;
  }

  /**
   * Get entryId
   * @return entryId
   */
  @javax.annotation.Nonnull
  public String getEntryId() {
    return entryId;
  }

  public void setEntryId(String entryId) {
    this.entryId = entryId;
  }


  public BatchUpdateRecommendationStatusSuccessfulEntry excludeReason(ExcludeRecommendationReason excludeReason) {
    this.excludeReason = excludeReason;
    return this;
  }

  /**
   * Get excludeReason
   * @return excludeReason
   */
  @javax.annotation.Nullable
  public ExcludeRecommendationReason getExcludeReason() {
    return excludeReason;
  }

  public void setExcludeReason(ExcludeRecommendationReason excludeReason) {
    this.excludeReason = excludeReason;
  }


  public BatchUpdateRecommendationStatusSuccessfulEntry excluded(Boolean excluded) {
    this.excluded = excluded;
    return this;
  }

  /**
   * Get excluded
   * @return excluded
   */
  @javax.annotation.Nonnull
  public Boolean getExcluded() {
    return excluded;
  }

  public void setExcluded(Boolean excluded) {
    this.excluded = excluded;
  }


  public BatchUpdateRecommendationStatusSuccessfulEntry item(UpdateRecommendationStatusRequestEntryItem item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nonnull
  public UpdateRecommendationStatusRequestEntryItem getItem() {
    return item;
  }

  public void setItem(UpdateRecommendationStatusRequestEntryItem item) {
    this.item = item;
  }


  public BatchUpdateRecommendationStatusSuccessfulEntry referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchUpdateRecommendationStatusSuccessfulEntry batchUpdateRecommendationStatusSuccessfulEntry = (BatchUpdateRecommendationStatusSuccessfulEntry) o;
    return Objects.equals(this.entryId, batchUpdateRecommendationStatusSuccessfulEntry.entryId) &&
        Objects.equals(this.excludeReason, batchUpdateRecommendationStatusSuccessfulEntry.excludeReason) &&
        Objects.equals(this.excluded, batchUpdateRecommendationStatusSuccessfulEntry.excluded) &&
        Objects.equals(this.item, batchUpdateRecommendationStatusSuccessfulEntry.item) &&
        Objects.equals(this.referenceId, batchUpdateRecommendationStatusSuccessfulEntry.referenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryId, excludeReason, excluded, item, referenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchUpdateRecommendationStatusSuccessfulEntry {\n");
    sb.append("    entryId: ").append(toIndentedString(entryId)).append("\n");
    sb.append("    excludeReason: ").append(toIndentedString(excludeReason)).append("\n");
    sb.append("    excluded: ").append(toIndentedString(excluded)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entryId");
    openapiFields.add("excludeReason");
    openapiFields.add("excluded");
    openapiFields.add("item");
    openapiFields.add("referenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entryId");
    openapiRequiredFields.add("excluded");
    openapiRequiredFields.add("item");
    openapiRequiredFields.add("referenceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchUpdateRecommendationStatusSuccessfulEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchUpdateRecommendationStatusSuccessfulEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchUpdateRecommendationStatusSuccessfulEntry is not found in the empty JSON string", BatchUpdateRecommendationStatusSuccessfulEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchUpdateRecommendationStatusSuccessfulEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchUpdateRecommendationStatusSuccessfulEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchUpdateRecommendationStatusSuccessfulEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `entryId`
      String.validateJsonElement(jsonObj.get("entryId"));
      // validate the optional field `excludeReason`
      if (jsonObj.get("excludeReason") != null && !jsonObj.get("excludeReason").isJsonNull()) {
        ExcludeRecommendationReason.validateJsonElement(jsonObj.get("excludeReason"));
      }
      // validate the required field `excluded`
      Boolean.validateJsonElement(jsonObj.get("excluded"));
      // validate the required field `item`
      UpdateRecommendationStatusRequestEntryItem.validateJsonElement(jsonObj.get("item"));
      // validate the required field `referenceId`
      String.validateJsonElement(jsonObj.get("referenceId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchUpdateRecommendationStatusSuccessfulEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchUpdateRecommendationStatusSuccessfulEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchUpdateRecommendationStatusSuccessfulEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchUpdateRecommendationStatusSuccessfulEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchUpdateRecommendationStatusSuccessfulEntry>() {
           @Override
           public void write(JsonWriter out, BatchUpdateRecommendationStatusSuccessfulEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchUpdateRecommendationStatusSuccessfulEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchUpdateRecommendationStatusSuccessfulEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchUpdateRecommendationStatusSuccessfulEntry
   * @throws IOException if the JSON string is invalid with respect to BatchUpdateRecommendationStatusSuccessfulEntry
   */
  public static BatchUpdateRecommendationStatusSuccessfulEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchUpdateRecommendationStatusSuccessfulEntry.class);
  }

  /**
   * Convert an instance of BatchUpdateRecommendationStatusSuccessfulEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

