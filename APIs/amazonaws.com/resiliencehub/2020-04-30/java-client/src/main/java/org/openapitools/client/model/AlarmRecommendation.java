/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlarmType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a recommendation for a CloudWatch alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlarmRecommendation {
  public static final String SERIALIZED_NAME_APP_COMPONENT_NAME = "appComponentName";
  @SerializedName(SERIALIZED_NAME_APP_COMPONENT_NAME)
  private String appComponentName;

  public static final String SERIALIZED_NAME_APP_COMPONENT_NAMES = "appComponentNames";
  @SerializedName(SERIALIZED_NAME_APP_COMPONENT_NAMES)
  private List appComponentNames;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List items;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREREQUISITE = "prerequisite";
  @SerializedName(SERIALIZED_NAME_PREREQUISITE)
  private String prerequisite;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "recommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AlarmType type;

  public AlarmRecommendation() {
  }

  public AlarmRecommendation appComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
    return this;
  }

  /**
   * Get appComponentName
   * @return appComponentName
   */
  @javax.annotation.Nullable
  public String getAppComponentName() {
    return appComponentName;
  }

  public void setAppComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
  }


  public AlarmRecommendation appComponentNames(List appComponentNames) {
    this.appComponentNames = appComponentNames;
    return this;
  }

  /**
   * Get appComponentNames
   * @return appComponentNames
   */
  @javax.annotation.Nullable
  public List getAppComponentNames() {
    return appComponentNames;
  }

  public void setAppComponentNames(List appComponentNames) {
    this.appComponentNames = appComponentNames;
  }


  public AlarmRecommendation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AlarmRecommendation items(List items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List getItems() {
    return items;
  }

  public void setItems(List items) {
    this.items = items;
  }


  public AlarmRecommendation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AlarmRecommendation prerequisite(String prerequisite) {
    this.prerequisite = prerequisite;
    return this;
  }

  /**
   * Get prerequisite
   * @return prerequisite
   */
  @javax.annotation.Nullable
  public String getPrerequisite() {
    return prerequisite;
  }

  public void setPrerequisite(String prerequisite) {
    this.prerequisite = prerequisite;
  }


  public AlarmRecommendation recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nonnull
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public AlarmRecommendation referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public AlarmRecommendation type(AlarmType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public AlarmType getType() {
    return type;
  }

  public void setType(AlarmType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmRecommendation alarmRecommendation = (AlarmRecommendation) o;
    return Objects.equals(this.appComponentName, alarmRecommendation.appComponentName) &&
        Objects.equals(this.appComponentNames, alarmRecommendation.appComponentNames) &&
        Objects.equals(this.description, alarmRecommendation.description) &&
        Objects.equals(this.items, alarmRecommendation.items) &&
        Objects.equals(this.name, alarmRecommendation.name) &&
        Objects.equals(this.prerequisite, alarmRecommendation.prerequisite) &&
        Objects.equals(this.recommendationId, alarmRecommendation.recommendationId) &&
        Objects.equals(this.referenceId, alarmRecommendation.referenceId) &&
        Objects.equals(this.type, alarmRecommendation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appComponentName, appComponentNames, description, items, name, prerequisite, recommendationId, referenceId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmRecommendation {\n");
    sb.append("    appComponentName: ").append(toIndentedString(appComponentName)).append("\n");
    sb.append("    appComponentNames: ").append(toIndentedString(appComponentNames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prerequisite: ").append(toIndentedString(prerequisite)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appComponentName");
    openapiFields.add("appComponentNames");
    openapiFields.add("description");
    openapiFields.add("items");
    openapiFields.add("name");
    openapiFields.add("prerequisite");
    openapiFields.add("recommendationId");
    openapiFields.add("referenceId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("recommendationId");
    openapiRequiredFields.add("referenceId");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlarmRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlarmRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlarmRecommendation is not found in the empty JSON string", AlarmRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlarmRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlarmRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlarmRecommendation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appComponentName`
      if (jsonObj.get("appComponentName") != null && !jsonObj.get("appComponentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appComponentName"));
      }
      // validate the optional field `appComponentNames`
      if (jsonObj.get("appComponentNames") != null && !jsonObj.get("appComponentNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("appComponentNames"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("items"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `prerequisite`
      if (jsonObj.get("prerequisite") != null && !jsonObj.get("prerequisite").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("prerequisite"));
      }
      // validate the required field `recommendationId`
      String.validateJsonElement(jsonObj.get("recommendationId"));
      // validate the required field `referenceId`
      String.validateJsonElement(jsonObj.get("referenceId"));
      // validate the required field `type`
      AlarmType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlarmRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlarmRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlarmRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlarmRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<AlarmRecommendation>() {
           @Override
           public void write(JsonWriter out, AlarmRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlarmRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlarmRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlarmRecommendation
   * @throws IOException if the JSON string is invalid with respect to AlarmRecommendation
   */
  public static AlarmRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlarmRecommendation.class);
  }

  /**
   * Convert an instance of AlarmRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

