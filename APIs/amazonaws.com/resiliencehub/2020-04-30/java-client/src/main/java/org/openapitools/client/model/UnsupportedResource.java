/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UnsupportedResourceLogicalResourceId;
import org.openapitools.client.model.UnsupportedResourcePhysicalResourceId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a resource that is not supported by Resilience Hub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UnsupportedResource {
  public static final String SERIALIZED_NAME_LOGICAL_RESOURCE_ID = "logicalResourceId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_RESOURCE_ID)
  private UnsupportedResourceLogicalResourceId logicalResourceId;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID = "physicalResourceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID)
  private UnsupportedResourcePhysicalResourceId physicalResourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_UNSUPPORTED_RESOURCE_STATUS = "unsupportedResourceStatus";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_RESOURCE_STATUS)
  private String unsupportedResourceStatus;

  public UnsupportedResource() {
  }

  public UnsupportedResource logicalResourceId(UnsupportedResourceLogicalResourceId logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
    return this;
  }

  /**
   * Get logicalResourceId
   * @return logicalResourceId
   */
  @javax.annotation.Nonnull
  public UnsupportedResourceLogicalResourceId getLogicalResourceId() {
    return logicalResourceId;
  }

  public void setLogicalResourceId(UnsupportedResourceLogicalResourceId logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
  }


  public UnsupportedResource physicalResourceId(UnsupportedResourcePhysicalResourceId physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
    return this;
  }

  /**
   * Get physicalResourceId
   * @return physicalResourceId
   */
  @javax.annotation.Nonnull
  public UnsupportedResourcePhysicalResourceId getPhysicalResourceId() {
    return physicalResourceId;
  }

  public void setPhysicalResourceId(UnsupportedResourcePhysicalResourceId physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
  }


  public UnsupportedResource resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public UnsupportedResource unsupportedResourceStatus(String unsupportedResourceStatus) {
    this.unsupportedResourceStatus = unsupportedResourceStatus;
    return this;
  }

  /**
   * Get unsupportedResourceStatus
   * @return unsupportedResourceStatus
   */
  @javax.annotation.Nullable
  public String getUnsupportedResourceStatus() {
    return unsupportedResourceStatus;
  }

  public void setUnsupportedResourceStatus(String unsupportedResourceStatus) {
    this.unsupportedResourceStatus = unsupportedResourceStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnsupportedResource unsupportedResource = (UnsupportedResource) o;
    return Objects.equals(this.logicalResourceId, unsupportedResource.logicalResourceId) &&
        Objects.equals(this.physicalResourceId, unsupportedResource.physicalResourceId) &&
        Objects.equals(this.resourceType, unsupportedResource.resourceType) &&
        Objects.equals(this.unsupportedResourceStatus, unsupportedResource.unsupportedResourceStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logicalResourceId, physicalResourceId, resourceType, unsupportedResourceStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnsupportedResource {\n");
    sb.append("    logicalResourceId: ").append(toIndentedString(logicalResourceId)).append("\n");
    sb.append("    physicalResourceId: ").append(toIndentedString(physicalResourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    unsupportedResourceStatus: ").append(toIndentedString(unsupportedResourceStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logicalResourceId");
    openapiFields.add("physicalResourceId");
    openapiFields.add("resourceType");
    openapiFields.add("unsupportedResourceStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logicalResourceId");
    openapiRequiredFields.add("physicalResourceId");
    openapiRequiredFields.add("resourceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnsupportedResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnsupportedResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnsupportedResource is not found in the empty JSON string", UnsupportedResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnsupportedResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnsupportedResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UnsupportedResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `logicalResourceId`
      UnsupportedResourceLogicalResourceId.validateJsonElement(jsonObj.get("logicalResourceId"));
      // validate the required field `physicalResourceId`
      UnsupportedResourcePhysicalResourceId.validateJsonElement(jsonObj.get("physicalResourceId"));
      // validate the required field `resourceType`
      String.validateJsonElement(jsonObj.get("resourceType"));
      // validate the optional field `unsupportedResourceStatus`
      if (jsonObj.get("unsupportedResourceStatus") != null && !jsonObj.get("unsupportedResourceStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("unsupportedResourceStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnsupportedResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnsupportedResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnsupportedResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnsupportedResource.class));

       return (TypeAdapter<T>) new TypeAdapter<UnsupportedResource>() {
           @Override
           public void write(JsonWriter out, UnsupportedResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnsupportedResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnsupportedResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnsupportedResource
   * @throws IOException if the JSON string is invalid with respect to UnsupportedResource
   */
  public static UnsupportedResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnsupportedResource.class);
  }

  /**
   * Convert an instance of UnsupportedResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

