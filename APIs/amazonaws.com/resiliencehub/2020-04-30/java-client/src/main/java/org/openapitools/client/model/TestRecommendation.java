/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestRisk;
import org.openapitools.client.model.TestType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a test recommendation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestRecommendation {
  public static final String SERIALIZED_NAME_APP_COMPONENT_NAME = "appComponentName";
  @SerializedName(SERIALIZED_NAME_APP_COMPONENT_NAME)
  private String appComponentName;

  public static final String SERIALIZED_NAME_DEPENDS_ON_ALARMS = "dependsOnAlarms";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON_ALARMS)
  private List dependsOnAlarms;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private String intent;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List items;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREREQUISITE = "prerequisite";
  @SerializedName(SERIALIZED_NAME_PREREQUISITE)
  private String prerequisite;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "recommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_RISK = "risk";
  @SerializedName(SERIALIZED_NAME_RISK)
  private TestRisk risk;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TestType type;

  public TestRecommendation() {
  }

  public TestRecommendation appComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
    return this;
  }

  /**
   * Get appComponentName
   * @return appComponentName
   */
  @javax.annotation.Nullable
  public String getAppComponentName() {
    return appComponentName;
  }

  public void setAppComponentName(String appComponentName) {
    this.appComponentName = appComponentName;
  }


  public TestRecommendation dependsOnAlarms(List dependsOnAlarms) {
    this.dependsOnAlarms = dependsOnAlarms;
    return this;
  }

  /**
   * Get dependsOnAlarms
   * @return dependsOnAlarms
   */
  @javax.annotation.Nullable
  public List getDependsOnAlarms() {
    return dependsOnAlarms;
  }

  public void setDependsOnAlarms(List dependsOnAlarms) {
    this.dependsOnAlarms = dependsOnAlarms;
  }


  public TestRecommendation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TestRecommendation intent(String intent) {
    this.intent = intent;
    return this;
  }

  /**
   * Get intent
   * @return intent
   */
  @javax.annotation.Nullable
  public String getIntent() {
    return intent;
  }

  public void setIntent(String intent) {
    this.intent = intent;
  }


  public TestRecommendation items(List items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List getItems() {
    return items;
  }

  public void setItems(List items) {
    this.items = items;
  }


  public TestRecommendation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TestRecommendation prerequisite(String prerequisite) {
    this.prerequisite = prerequisite;
    return this;
  }

  /**
   * Get prerequisite
   * @return prerequisite
   */
  @javax.annotation.Nullable
  public String getPrerequisite() {
    return prerequisite;
  }

  public void setPrerequisite(String prerequisite) {
    this.prerequisite = prerequisite;
  }


  public TestRecommendation recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nullable
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public TestRecommendation referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public TestRecommendation risk(TestRisk risk) {
    this.risk = risk;
    return this;
  }

  /**
   * Get risk
   * @return risk
   */
  @javax.annotation.Nullable
  public TestRisk getRisk() {
    return risk;
  }

  public void setRisk(TestRisk risk) {
    this.risk = risk;
  }


  public TestRecommendation type(TestType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TestType getType() {
    return type;
  }

  public void setType(TestType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRecommendation testRecommendation = (TestRecommendation) o;
    return Objects.equals(this.appComponentName, testRecommendation.appComponentName) &&
        Objects.equals(this.dependsOnAlarms, testRecommendation.dependsOnAlarms) &&
        Objects.equals(this.description, testRecommendation.description) &&
        Objects.equals(this.intent, testRecommendation.intent) &&
        Objects.equals(this.items, testRecommendation.items) &&
        Objects.equals(this.name, testRecommendation.name) &&
        Objects.equals(this.prerequisite, testRecommendation.prerequisite) &&
        Objects.equals(this.recommendationId, testRecommendation.recommendationId) &&
        Objects.equals(this.referenceId, testRecommendation.referenceId) &&
        Objects.equals(this.risk, testRecommendation.risk) &&
        Objects.equals(this.type, testRecommendation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appComponentName, dependsOnAlarms, description, intent, items, name, prerequisite, recommendationId, referenceId, risk, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRecommendation {\n");
    sb.append("    appComponentName: ").append(toIndentedString(appComponentName)).append("\n");
    sb.append("    dependsOnAlarms: ").append(toIndentedString(dependsOnAlarms)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prerequisite: ").append(toIndentedString(prerequisite)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appComponentName");
    openapiFields.add("dependsOnAlarms");
    openapiFields.add("description");
    openapiFields.add("intent");
    openapiFields.add("items");
    openapiFields.add("name");
    openapiFields.add("prerequisite");
    openapiFields.add("recommendationId");
    openapiFields.add("referenceId");
    openapiFields.add("risk");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("referenceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRecommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRecommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRecommendation is not found in the empty JSON string", TestRecommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRecommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRecommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestRecommendation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appComponentName`
      if (jsonObj.get("appComponentName") != null && !jsonObj.get("appComponentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appComponentName"));
      }
      // validate the optional field `dependsOnAlarms`
      if (jsonObj.get("dependsOnAlarms") != null && !jsonObj.get("dependsOnAlarms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dependsOnAlarms"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `intent`
      if (jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("intent"));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("items"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `prerequisite`
      if (jsonObj.get("prerequisite") != null && !jsonObj.get("prerequisite").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("prerequisite"));
      }
      // validate the optional field `recommendationId`
      if (jsonObj.get("recommendationId") != null && !jsonObj.get("recommendationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recommendationId"));
      }
      // validate the required field `referenceId`
      String.validateJsonElement(jsonObj.get("referenceId"));
      // validate the optional field `risk`
      if (jsonObj.get("risk") != null && !jsonObj.get("risk").isJsonNull()) {
        TestRisk.validateJsonElement(jsonObj.get("risk"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TestType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRecommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRecommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRecommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRecommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRecommendation>() {
           @Override
           public void write(JsonWriter out, TestRecommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRecommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRecommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRecommendation
   * @throws IOException if the JSON string is invalid with respect to TestRecommendation
   */
  public static TestRecommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRecommendation.class);
  }

  /**
   * Convert an instance of TestRecommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

