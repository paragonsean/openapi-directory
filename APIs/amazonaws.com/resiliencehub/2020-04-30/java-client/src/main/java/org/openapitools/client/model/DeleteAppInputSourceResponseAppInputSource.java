/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppInputSourceEksSourceClusterNamespace;
import org.openapitools.client.model.AppInputSourceTerraformSource;
import org.openapitools.client.model.ResourceMappingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteAppInputSourceResponseAppInputSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteAppInputSourceResponseAppInputSource {
  public static final String SERIALIZED_NAME_EKS_SOURCE_CLUSTER_NAMESPACE = "eksSourceClusterNamespace";
  @SerializedName(SERIALIZED_NAME_EKS_SOURCE_CLUSTER_NAMESPACE)
  private AppInputSourceEksSourceClusterNamespace eksSourceClusterNamespace;

  public static final String SERIALIZED_NAME_IMPORT_TYPE = "importType";
  @SerializedName(SERIALIZED_NAME_IMPORT_TYPE)
  private ResourceMappingType importType;

  public static final String SERIALIZED_NAME_RESOURCE_COUNT = "resourceCount";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COUNT)
  private Integer resourceCount;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "sourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "sourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_TERRAFORM_SOURCE = "terraformSource";
  @SerializedName(SERIALIZED_NAME_TERRAFORM_SOURCE)
  private AppInputSourceTerraformSource terraformSource;

  public DeleteAppInputSourceResponseAppInputSource() {
  }

  public DeleteAppInputSourceResponseAppInputSource eksSourceClusterNamespace(AppInputSourceEksSourceClusterNamespace eksSourceClusterNamespace) {
    this.eksSourceClusterNamespace = eksSourceClusterNamespace;
    return this;
  }

  /**
   * Get eksSourceClusterNamespace
   * @return eksSourceClusterNamespace
   */
  @javax.annotation.Nullable
  public AppInputSourceEksSourceClusterNamespace getEksSourceClusterNamespace() {
    return eksSourceClusterNamespace;
  }

  public void setEksSourceClusterNamespace(AppInputSourceEksSourceClusterNamespace eksSourceClusterNamespace) {
    this.eksSourceClusterNamespace = eksSourceClusterNamespace;
  }


  public DeleteAppInputSourceResponseAppInputSource importType(ResourceMappingType importType) {
    this.importType = importType;
    return this;
  }

  /**
   * Get importType
   * @return importType
   */
  @javax.annotation.Nonnull
  public ResourceMappingType getImportType() {
    return importType;
  }

  public void setImportType(ResourceMappingType importType) {
    this.importType = importType;
  }


  public DeleteAppInputSourceResponseAppInputSource resourceCount(Integer resourceCount) {
    this.resourceCount = resourceCount;
    return this;
  }

  /**
   * Get resourceCount
   * @return resourceCount
   */
  @javax.annotation.Nullable
  public Integer getResourceCount() {
    return resourceCount;
  }

  public void setResourceCount(Integer resourceCount) {
    this.resourceCount = resourceCount;
  }


  public DeleteAppInputSourceResponseAppInputSource sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * Get sourceArn
   * @return sourceArn
   */
  @javax.annotation.Nullable
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public DeleteAppInputSourceResponseAppInputSource sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Get sourceName
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public DeleteAppInputSourceResponseAppInputSource terraformSource(AppInputSourceTerraformSource terraformSource) {
    this.terraformSource = terraformSource;
    return this;
  }

  /**
   * Get terraformSource
   * @return terraformSource
   */
  @javax.annotation.Nullable
  public AppInputSourceTerraformSource getTerraformSource() {
    return terraformSource;
  }

  public void setTerraformSource(AppInputSourceTerraformSource terraformSource) {
    this.terraformSource = terraformSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteAppInputSourceResponseAppInputSource deleteAppInputSourceResponseAppInputSource = (DeleteAppInputSourceResponseAppInputSource) o;
    return Objects.equals(this.eksSourceClusterNamespace, deleteAppInputSourceResponseAppInputSource.eksSourceClusterNamespace) &&
        Objects.equals(this.importType, deleteAppInputSourceResponseAppInputSource.importType) &&
        Objects.equals(this.resourceCount, deleteAppInputSourceResponseAppInputSource.resourceCount) &&
        Objects.equals(this.sourceArn, deleteAppInputSourceResponseAppInputSource.sourceArn) &&
        Objects.equals(this.sourceName, deleteAppInputSourceResponseAppInputSource.sourceName) &&
        Objects.equals(this.terraformSource, deleteAppInputSourceResponseAppInputSource.terraformSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eksSourceClusterNamespace, importType, resourceCount, sourceArn, sourceName, terraformSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteAppInputSourceResponseAppInputSource {\n");
    sb.append("    eksSourceClusterNamespace: ").append(toIndentedString(eksSourceClusterNamespace)).append("\n");
    sb.append("    importType: ").append(toIndentedString(importType)).append("\n");
    sb.append("    resourceCount: ").append(toIndentedString(resourceCount)).append("\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    terraformSource: ").append(toIndentedString(terraformSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eksSourceClusterNamespace");
    openapiFields.add("importType");
    openapiFields.add("resourceCount");
    openapiFields.add("sourceArn");
    openapiFields.add("sourceName");
    openapiFields.add("terraformSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("importType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteAppInputSourceResponseAppInputSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteAppInputSourceResponseAppInputSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteAppInputSourceResponseAppInputSource is not found in the empty JSON string", DeleteAppInputSourceResponseAppInputSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteAppInputSourceResponseAppInputSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteAppInputSourceResponseAppInputSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteAppInputSourceResponseAppInputSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eksSourceClusterNamespace`
      if (jsonObj.get("eksSourceClusterNamespace") != null && !jsonObj.get("eksSourceClusterNamespace").isJsonNull()) {
        AppInputSourceEksSourceClusterNamespace.validateJsonElement(jsonObj.get("eksSourceClusterNamespace"));
      }
      // validate the required field `importType`
      ResourceMappingType.validateJsonElement(jsonObj.get("importType"));
      // validate the optional field `resourceCount`
      if (jsonObj.get("resourceCount") != null && !jsonObj.get("resourceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("resourceCount"));
      }
      // validate the optional field `sourceArn`
      if (jsonObj.get("sourceArn") != null && !jsonObj.get("sourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceArn"));
      }
      // validate the optional field `sourceName`
      if (jsonObj.get("sourceName") != null && !jsonObj.get("sourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceName"));
      }
      // validate the optional field `terraformSource`
      if (jsonObj.get("terraformSource") != null && !jsonObj.get("terraformSource").isJsonNull()) {
        AppInputSourceTerraformSource.validateJsonElement(jsonObj.get("terraformSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteAppInputSourceResponseAppInputSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteAppInputSourceResponseAppInputSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteAppInputSourceResponseAppInputSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteAppInputSourceResponseAppInputSource.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteAppInputSourceResponseAppInputSource>() {
           @Override
           public void write(JsonWriter out, DeleteAppInputSourceResponseAppInputSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteAppInputSourceResponseAppInputSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteAppInputSourceResponseAppInputSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteAppInputSourceResponseAppInputSource
   * @throws IOException if the JSON string is invalid with respect to DeleteAppInputSourceResponseAppInputSource
   */
  public static DeleteAppInputSourceResponseAppInputSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteAppInputSourceResponseAppInputSource.class);
  }

  /**
   * Convert an instance of DeleteAppInputSourceResponseAppInputSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

