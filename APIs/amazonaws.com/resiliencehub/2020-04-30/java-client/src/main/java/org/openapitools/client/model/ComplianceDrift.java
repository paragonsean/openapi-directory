/*
 * AWS Resilience Hub
 * Resilience Hub helps you proactively prepare and protect your Amazon Web Services applications from disruptions. It offers continual resiliency assessment and validation that integrates into your software development lifecycle. This enables you to uncover resiliency weaknesses, ensure recovery time objective (RTO) and recovery point objective (RPO) targets for your applications are met, and resolve issues before they are released into production. 
 *
 * The version of the OpenAPI document: 2020-04-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DifferenceType;
import org.openapitools.client.model.DriftType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates the compliance drifts (recovery time objective (RTO) and recovery point objective (RPO)) that were detected for an assessed entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.783351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComplianceDrift {
  public static final String SERIALIZED_NAME_ACTUAL_REFERENCE_ID = "actualReferenceId";
  @SerializedName(SERIALIZED_NAME_ACTUAL_REFERENCE_ID)
  private String actualReferenceId;

  public static final String SERIALIZED_NAME_ACTUAL_VALUE = "actualValue";
  @SerializedName(SERIALIZED_NAME_ACTUAL_VALUE)
  private Map actualValue;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private String appVersion;

  public static final String SERIALIZED_NAME_DIFF_TYPE = "diffType";
  @SerializedName(SERIALIZED_NAME_DIFF_TYPE)
  private DifferenceType diffType;

  public static final String SERIALIZED_NAME_DRIFT_TYPE = "driftType";
  @SerializedName(SERIALIZED_NAME_DRIFT_TYPE)
  private DriftType driftType;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_EXPECTED_REFERENCE_ID = "expectedReferenceId";
  @SerializedName(SERIALIZED_NAME_EXPECTED_REFERENCE_ID)
  private String expectedReferenceId;

  public static final String SERIALIZED_NAME_EXPECTED_VALUE = "expectedValue";
  @SerializedName(SERIALIZED_NAME_EXPECTED_VALUE)
  private Map expectedValue;

  public ComplianceDrift() {
  }

  public ComplianceDrift actualReferenceId(String actualReferenceId) {
    this.actualReferenceId = actualReferenceId;
    return this;
  }

  /**
   * Get actualReferenceId
   * @return actualReferenceId
   */
  @javax.annotation.Nullable
  public String getActualReferenceId() {
    return actualReferenceId;
  }

  public void setActualReferenceId(String actualReferenceId) {
    this.actualReferenceId = actualReferenceId;
  }


  public ComplianceDrift actualValue(Map actualValue) {
    this.actualValue = actualValue;
    return this;
  }

  /**
   * Get actualValue
   * @return actualValue
   */
  @javax.annotation.Nullable
  public Map getActualValue() {
    return actualValue;
  }

  public void setActualValue(Map actualValue) {
    this.actualValue = actualValue;
  }


  public ComplianceDrift appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Get appId
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public ComplianceDrift appVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Get appVersion
   * @return appVersion
   */
  @javax.annotation.Nullable
  public String getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }


  public ComplianceDrift diffType(DifferenceType diffType) {
    this.diffType = diffType;
    return this;
  }

  /**
   * Get diffType
   * @return diffType
   */
  @javax.annotation.Nullable
  public DifferenceType getDiffType() {
    return diffType;
  }

  public void setDiffType(DifferenceType diffType) {
    this.diffType = diffType;
  }


  public ComplianceDrift driftType(DriftType driftType) {
    this.driftType = driftType;
    return this;
  }

  /**
   * Get driftType
   * @return driftType
   */
  @javax.annotation.Nullable
  public DriftType getDriftType() {
    return driftType;
  }

  public void setDriftType(DriftType driftType) {
    this.driftType = driftType;
  }


  public ComplianceDrift entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public ComplianceDrift entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public ComplianceDrift expectedReferenceId(String expectedReferenceId) {
    this.expectedReferenceId = expectedReferenceId;
    return this;
  }

  /**
   * Get expectedReferenceId
   * @return expectedReferenceId
   */
  @javax.annotation.Nullable
  public String getExpectedReferenceId() {
    return expectedReferenceId;
  }

  public void setExpectedReferenceId(String expectedReferenceId) {
    this.expectedReferenceId = expectedReferenceId;
  }


  public ComplianceDrift expectedValue(Map expectedValue) {
    this.expectedValue = expectedValue;
    return this;
  }

  /**
   * Get expectedValue
   * @return expectedValue
   */
  @javax.annotation.Nullable
  public Map getExpectedValue() {
    return expectedValue;
  }

  public void setExpectedValue(Map expectedValue) {
    this.expectedValue = expectedValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceDrift complianceDrift = (ComplianceDrift) o;
    return Objects.equals(this.actualReferenceId, complianceDrift.actualReferenceId) &&
        Objects.equals(this.actualValue, complianceDrift.actualValue) &&
        Objects.equals(this.appId, complianceDrift.appId) &&
        Objects.equals(this.appVersion, complianceDrift.appVersion) &&
        Objects.equals(this.diffType, complianceDrift.diffType) &&
        Objects.equals(this.driftType, complianceDrift.driftType) &&
        Objects.equals(this.entityId, complianceDrift.entityId) &&
        Objects.equals(this.entityType, complianceDrift.entityType) &&
        Objects.equals(this.expectedReferenceId, complianceDrift.expectedReferenceId) &&
        Objects.equals(this.expectedValue, complianceDrift.expectedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualReferenceId, actualValue, appId, appVersion, diffType, driftType, entityId, entityType, expectedReferenceId, expectedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceDrift {\n");
    sb.append("    actualReferenceId: ").append(toIndentedString(actualReferenceId)).append("\n");
    sb.append("    actualValue: ").append(toIndentedString(actualValue)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    diffType: ").append(toIndentedString(diffType)).append("\n");
    sb.append("    driftType: ").append(toIndentedString(driftType)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    expectedReferenceId: ").append(toIndentedString(expectedReferenceId)).append("\n");
    sb.append("    expectedValue: ").append(toIndentedString(expectedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualReferenceId");
    openapiFields.add("actualValue");
    openapiFields.add("appId");
    openapiFields.add("appVersion");
    openapiFields.add("diffType");
    openapiFields.add("driftType");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("expectedReferenceId");
    openapiFields.add("expectedValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComplianceDrift
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceDrift.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceDrift is not found in the empty JSON string", ComplianceDrift.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComplianceDrift.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceDrift` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actualReferenceId`
      if (jsonObj.get("actualReferenceId") != null && !jsonObj.get("actualReferenceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("actualReferenceId"));
      }
      // validate the optional field `actualValue`
      if (jsonObj.get("actualValue") != null && !jsonObj.get("actualValue").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("actualValue"));
      }
      // validate the optional field `appId`
      if (jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appId"));
      }
      // validate the optional field `appVersion`
      if (jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appVersion"));
      }
      // validate the optional field `diffType`
      if (jsonObj.get("diffType") != null && !jsonObj.get("diffType").isJsonNull()) {
        DifferenceType.validateJsonElement(jsonObj.get("diffType"));
      }
      // validate the optional field `driftType`
      if (jsonObj.get("driftType") != null && !jsonObj.get("driftType").isJsonNull()) {
        DriftType.validateJsonElement(jsonObj.get("driftType"));
      }
      // validate the optional field `entityId`
      if (jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("entityId"));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("entityType"));
      }
      // validate the optional field `expectedReferenceId`
      if (jsonObj.get("expectedReferenceId") != null && !jsonObj.get("expectedReferenceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("expectedReferenceId"));
      }
      // validate the optional field `expectedValue`
      if (jsonObj.get("expectedValue") != null && !jsonObj.get("expectedValue").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("expectedValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceDrift.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceDrift' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceDrift> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceDrift.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceDrift>() {
           @Override
           public void write(JsonWriter out, ComplianceDrift value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceDrift read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComplianceDrift given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComplianceDrift
   * @throws IOException if the JSON string is invalid with respect to ComplianceDrift
   */
  public static ComplianceDrift fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceDrift.class);
  }

  /**
   * Convert an instance of ComplianceDrift to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

