# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_component_compliance_cost import AppComponentComplianceCost
from openapi_server.models.config_recommendation_optimization_type import ConfigRecommendationOptimizationType
from openapi_server.models.ha_architecture import HaArchitecture
from openapi_server import util


class ConfigRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_component_name: str=None, compliance: Dict=None, cost: AppComponentComplianceCost=None, description: str=None, ha_architecture: HaArchitecture=None, name: str=None, optimization_type: ConfigRecommendationOptimizationType=None, recommendation_compliance: Dict=None, reference_id: str=None, suggested_changes: List=None):
        """ConfigRecommendation - a model defined in OpenAPI

        :param app_component_name: The app_component_name of this ConfigRecommendation.
        :param compliance: The compliance of this ConfigRecommendation.
        :param cost: The cost of this ConfigRecommendation.
        :param description: The description of this ConfigRecommendation.
        :param ha_architecture: The ha_architecture of this ConfigRecommendation.
        :param name: The name of this ConfigRecommendation.
        :param optimization_type: The optimization_type of this ConfigRecommendation.
        :param recommendation_compliance: The recommendation_compliance of this ConfigRecommendation.
        :param reference_id: The reference_id of this ConfigRecommendation.
        :param suggested_changes: The suggested_changes of this ConfigRecommendation.
        """
        self.openapi_types = {
            'app_component_name': str,
            'compliance': Dict,
            'cost': AppComponentComplianceCost,
            'description': str,
            'ha_architecture': HaArchitecture,
            'name': str,
            'optimization_type': ConfigRecommendationOptimizationType,
            'recommendation_compliance': Dict,
            'reference_id': str,
            'suggested_changes': List
        }

        self.attribute_map = {
            'app_component_name': 'appComponentName',
            'compliance': 'compliance',
            'cost': 'cost',
            'description': 'description',
            'ha_architecture': 'haArchitecture',
            'name': 'name',
            'optimization_type': 'optimizationType',
            'recommendation_compliance': 'recommendationCompliance',
            'reference_id': 'referenceId',
            'suggested_changes': 'suggestedChanges'
        }

        self._app_component_name = app_component_name
        self._compliance = compliance
        self._cost = cost
        self._description = description
        self._ha_architecture = ha_architecture
        self._name = name
        self._optimization_type = optimization_type
        self._recommendation_compliance = recommendation_compliance
        self._reference_id = reference_id
        self._suggested_changes = suggested_changes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigRecommendation of this ConfigRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_component_name(self):
        """Gets the app_component_name of this ConfigRecommendation.


        :return: The app_component_name of this ConfigRecommendation.
        :rtype: str
        """
        return self._app_component_name

    @app_component_name.setter
    def app_component_name(self, app_component_name):
        """Sets the app_component_name of this ConfigRecommendation.


        :param app_component_name: The app_component_name of this ConfigRecommendation.
        :type app_component_name: str
        """

        self._app_component_name = app_component_name

    @property
    def compliance(self):
        """Gets the compliance of this ConfigRecommendation.


        :return: The compliance of this ConfigRecommendation.
        :rtype: Dict
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this ConfigRecommendation.


        :param compliance: The compliance of this ConfigRecommendation.
        :type compliance: Dict
        """

        self._compliance = compliance

    @property
    def cost(self):
        """Gets the cost of this ConfigRecommendation.


        :return: The cost of this ConfigRecommendation.
        :rtype: AppComponentComplianceCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ConfigRecommendation.


        :param cost: The cost of this ConfigRecommendation.
        :type cost: AppComponentComplianceCost
        """

        self._cost = cost

    @property
    def description(self):
        """Gets the description of this ConfigRecommendation.


        :return: The description of this ConfigRecommendation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigRecommendation.


        :param description: The description of this ConfigRecommendation.
        :type description: str
        """

        self._description = description

    @property
    def ha_architecture(self):
        """Gets the ha_architecture of this ConfigRecommendation.


        :return: The ha_architecture of this ConfigRecommendation.
        :rtype: HaArchitecture
        """
        return self._ha_architecture

    @ha_architecture.setter
    def ha_architecture(self, ha_architecture):
        """Sets the ha_architecture of this ConfigRecommendation.


        :param ha_architecture: The ha_architecture of this ConfigRecommendation.
        :type ha_architecture: HaArchitecture
        """

        self._ha_architecture = ha_architecture

    @property
    def name(self):
        """Gets the name of this ConfigRecommendation.


        :return: The name of this ConfigRecommendation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigRecommendation.


        :param name: The name of this ConfigRecommendation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def optimization_type(self):
        """Gets the optimization_type of this ConfigRecommendation.


        :return: The optimization_type of this ConfigRecommendation.
        :rtype: ConfigRecommendationOptimizationType
        """
        return self._optimization_type

    @optimization_type.setter
    def optimization_type(self, optimization_type):
        """Sets the optimization_type of this ConfigRecommendation.


        :param optimization_type: The optimization_type of this ConfigRecommendation.
        :type optimization_type: ConfigRecommendationOptimizationType
        """
        if optimization_type is None:
            raise ValueError("Invalid value for `optimization_type`, must not be `None`")

        self._optimization_type = optimization_type

    @property
    def recommendation_compliance(self):
        """Gets the recommendation_compliance of this ConfigRecommendation.


        :return: The recommendation_compliance of this ConfigRecommendation.
        :rtype: Dict
        """
        return self._recommendation_compliance

    @recommendation_compliance.setter
    def recommendation_compliance(self, recommendation_compliance):
        """Sets the recommendation_compliance of this ConfigRecommendation.


        :param recommendation_compliance: The recommendation_compliance of this ConfigRecommendation.
        :type recommendation_compliance: Dict
        """

        self._recommendation_compliance = recommendation_compliance

    @property
    def reference_id(self):
        """Gets the reference_id of this ConfigRecommendation.


        :return: The reference_id of this ConfigRecommendation.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ConfigRecommendation.


        :param reference_id: The reference_id of this ConfigRecommendation.
        :type reference_id: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")

        self._reference_id = reference_id

    @property
    def suggested_changes(self):
        """Gets the suggested_changes of this ConfigRecommendation.


        :return: The suggested_changes of this ConfigRecommendation.
        :rtype: List
        """
        return self._suggested_changes

    @suggested_changes.setter
    def suggested_changes(self, suggested_changes):
        """Sets the suggested_changes of this ConfigRecommendation.


        :param suggested_changes: The suggested_changes of this ConfigRecommendation.
        :type suggested_changes: List
        """

        self._suggested_changes = suggested_changes
