# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.render_recommendation_type import RenderRecommendationType
import re
from openapi_server import util


class CreateRecommendationTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_arn: str=None, bucket_name: str=None, client_token: str=None, format: str=None, name: str=None, recommendation_ids: List[str]=None, recommendation_types: List[RenderRecommendationType]=None, tags: Dict[str, str]=None):
        """CreateRecommendationTemplateRequest - a model defined in OpenAPI

        :param assessment_arn: The assessment_arn of this CreateRecommendationTemplateRequest.
        :param bucket_name: The bucket_name of this CreateRecommendationTemplateRequest.
        :param client_token: The client_token of this CreateRecommendationTemplateRequest.
        :param format: The format of this CreateRecommendationTemplateRequest.
        :param name: The name of this CreateRecommendationTemplateRequest.
        :param recommendation_ids: The recommendation_ids of this CreateRecommendationTemplateRequest.
        :param recommendation_types: The recommendation_types of this CreateRecommendationTemplateRequest.
        :param tags: The tags of this CreateRecommendationTemplateRequest.
        """
        self.openapi_types = {
            'assessment_arn': str,
            'bucket_name': str,
            'client_token': str,
            'format': str,
            'name': str,
            'recommendation_ids': List[str],
            'recommendation_types': List[RenderRecommendationType],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'assessment_arn': 'assessmentArn',
            'bucket_name': 'bucketName',
            'client_token': 'clientToken',
            'format': 'format',
            'name': 'name',
            'recommendation_ids': 'recommendationIds',
            'recommendation_types': 'recommendationTypes',
            'tags': 'tags'
        }

        self._assessment_arn = assessment_arn
        self._bucket_name = bucket_name
        self._client_token = client_token
        self._format = format
        self._name = name
        self._recommendation_ids = recommendation_ids
        self._recommendation_types = recommendation_types
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRecommendationTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRecommendationTemplate_request of this CreateRecommendationTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_arn(self):
        """Gets the assessment_arn of this CreateRecommendationTemplateRequest.

        Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide.

        :return: The assessment_arn of this CreateRecommendationTemplateRequest.
        :rtype: str
        """
        return self._assessment_arn

    @assessment_arn.setter
    def assessment_arn(self, assessment_arn):
        """Sets the assessment_arn of this CreateRecommendationTemplateRequest.

        Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide.

        :param assessment_arn: The assessment_arn of this CreateRecommendationTemplateRequest.
        :type assessment_arn: str
        """
        if assessment_arn is None:
            raise ValueError("Invalid value for `assessment_arn`, must not be `None`")
        if assessment_arn is not None and not re.search(r'^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_\/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9\/][A-Za-z0-9:_\/+.-]{0,1023}$', assessment_arn):
            raise ValueError("Invalid value for `assessment_arn`, must be a follow pattern or equal to `/^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_\/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9\/][A-Za-z0-9:_\/+.-]{0,1023}$/`")

        self._assessment_arn = assessment_arn

    @property
    def bucket_name(self):
        """Gets the bucket_name of this CreateRecommendationTemplateRequest.

        The name of the Amazon S3 bucket that will contain the recommendation template.

        :return: The bucket_name of this CreateRecommendationTemplateRequest.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this CreateRecommendationTemplateRequest.

        The name of the Amazon S3 bucket that will contain the recommendation template.

        :param bucket_name: The bucket_name of this CreateRecommendationTemplateRequest.
        :type bucket_name: str
        """
        if bucket_name is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$', bucket_name):
            raise ValueError("Invalid value for `bucket_name`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$/`")

        self._bucket_name = bucket_name

    @property
    def client_token(self):
        """Gets the client_token of this CreateRecommendationTemplateRequest.

        Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.

        :return: The client_token of this CreateRecommendationTemplateRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateRecommendationTemplateRequest.

        Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.

        :param client_token: The client_token of this CreateRecommendationTemplateRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 63:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `63`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[A-za-z0-9_.-]{0,63}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[A-za-z0-9_.-]{0,63}$/`")

        self._client_token = client_token

    @property
    def format(self):
        """Gets the format of this CreateRecommendationTemplateRequest.

        <p>The format for the recommendation template.</p> <dl> <dt>CfnJson</dt> <dd> <p>The template is CloudFormation JSON.</p> </dd> <dt>CfnYaml</dt> <dd> <p>The template is CloudFormation YAML.</p> </dd> </dl>

        :return: The format of this CreateRecommendationTemplateRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateRecommendationTemplateRequest.

        <p>The format for the recommendation template.</p> <dl> <dt>CfnJson</dt> <dd> <p>The template is CloudFormation JSON.</p> </dd> <dt>CfnYaml</dt> <dd> <p>The template is CloudFormation YAML.</p> </dd> </dl>

        :param format: The format of this CreateRecommendationTemplateRequest.
        :type format: str
        """
        allowed_values = ["CfnYaml", "CfnJson"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name(self):
        """Gets the name of this CreateRecommendationTemplateRequest.

        The name for the recommendation template.

        :return: The name of this CreateRecommendationTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRecommendationTemplateRequest.

        The name for the recommendation template.

        :param name: The name of this CreateRecommendationTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$/`")

        self._name = name

    @property
    def recommendation_ids(self):
        """Gets the recommendation_ids of this CreateRecommendationTemplateRequest.

        Identifiers for the recommendations used to create a recommendation template.

        :return: The recommendation_ids of this CreateRecommendationTemplateRequest.
        :rtype: List[str]
        """
        return self._recommendation_ids

    @recommendation_ids.setter
    def recommendation_ids(self, recommendation_ids):
        """Sets the recommendation_ids of this CreateRecommendationTemplateRequest.

        Identifiers for the recommendations used to create a recommendation template.

        :param recommendation_ids: The recommendation_ids of this CreateRecommendationTemplateRequest.
        :type recommendation_ids: List[str]
        """
        if recommendation_ids is not None and len(recommendation_ids) > 200:
            raise ValueError("Invalid value for `recommendation_ids`, number of items must be less than or equal to `200`")
        if recommendation_ids is not None and len(recommendation_ids) < 1:
            raise ValueError("Invalid value for `recommendation_ids`, number of items must be greater than or equal to `1`")

        self._recommendation_ids = recommendation_ids

    @property
    def recommendation_types(self):
        """Gets the recommendation_types of this CreateRecommendationTemplateRequest.

        <p>An array of strings that specify the recommendation template type or types.</p> <dl> <dt>Alarm</dt> <dd> <p>The template is an <a>AlarmRecommendation</a> template.</p> </dd> <dt>Sop</dt> <dd> <p>The template is a <a>SopRecommendation</a> template.</p> </dd> <dt>Test</dt> <dd> <p>The template is a <a>TestRecommendation</a> template.</p> </dd> </dl>

        :return: The recommendation_types of this CreateRecommendationTemplateRequest.
        :rtype: List[RenderRecommendationType]
        """
        return self._recommendation_types

    @recommendation_types.setter
    def recommendation_types(self, recommendation_types):
        """Sets the recommendation_types of this CreateRecommendationTemplateRequest.

        <p>An array of strings that specify the recommendation template type or types.</p> <dl> <dt>Alarm</dt> <dd> <p>The template is an <a>AlarmRecommendation</a> template.</p> </dd> <dt>Sop</dt> <dd> <p>The template is a <a>SopRecommendation</a> template.</p> </dd> <dt>Test</dt> <dd> <p>The template is a <a>TestRecommendation</a> template.</p> </dd> </dl>

        :param recommendation_types: The recommendation_types of this CreateRecommendationTemplateRequest.
        :type recommendation_types: List[RenderRecommendationType]
        """
        if recommendation_types is not None and len(recommendation_types) > 4:
            raise ValueError("Invalid value for `recommendation_types`, number of items must be less than or equal to `4`")
        if recommendation_types is not None and len(recommendation_types) < 1:
            raise ValueError("Invalid value for `recommendation_types`, number of items must be greater than or equal to `1`")

        self._recommendation_types = recommendation_types

    @property
    def tags(self):
        """Gets the tags of this CreateRecommendationTemplateRequest.

        Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.

        :return: The tags of this CreateRecommendationTemplateRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRecommendationTemplateRequest.

        Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.

        :param tags: The tags of this CreateRecommendationTemplateRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
