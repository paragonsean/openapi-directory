# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_input_source_eks_source_cluster_namespace import AppInputSourceEksSourceClusterNamespace
from openapi_server.models.app_input_source_terraform_source import AppInputSourceTerraformSource
from openapi_server.models.resource_mapping_type import ResourceMappingType
from openapi_server import util


class AppInputSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eks_source_cluster_namespace: AppInputSourceEksSourceClusterNamespace=None, import_type: ResourceMappingType=None, resource_count: int=None, source_arn: str=None, source_name: str=None, terraform_source: AppInputSourceTerraformSource=None):
        """AppInputSource - a model defined in OpenAPI

        :param eks_source_cluster_namespace: The eks_source_cluster_namespace of this AppInputSource.
        :param import_type: The import_type of this AppInputSource.
        :param resource_count: The resource_count of this AppInputSource.
        :param source_arn: The source_arn of this AppInputSource.
        :param source_name: The source_name of this AppInputSource.
        :param terraform_source: The terraform_source of this AppInputSource.
        """
        self.openapi_types = {
            'eks_source_cluster_namespace': AppInputSourceEksSourceClusterNamespace,
            'import_type': ResourceMappingType,
            'resource_count': int,
            'source_arn': str,
            'source_name': str,
            'terraform_source': AppInputSourceTerraformSource
        }

        self.attribute_map = {
            'eks_source_cluster_namespace': 'eksSourceClusterNamespace',
            'import_type': 'importType',
            'resource_count': 'resourceCount',
            'source_arn': 'sourceArn',
            'source_name': 'sourceName',
            'terraform_source': 'terraformSource'
        }

        self._eks_source_cluster_namespace = eks_source_cluster_namespace
        self._import_type = import_type
        self._resource_count = resource_count
        self._source_arn = source_arn
        self._source_name = source_name
        self._terraform_source = terraform_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppInputSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppInputSource of this AppInputSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eks_source_cluster_namespace(self):
        """Gets the eks_source_cluster_namespace of this AppInputSource.


        :return: The eks_source_cluster_namespace of this AppInputSource.
        :rtype: AppInputSourceEksSourceClusterNamespace
        """
        return self._eks_source_cluster_namespace

    @eks_source_cluster_namespace.setter
    def eks_source_cluster_namespace(self, eks_source_cluster_namespace):
        """Sets the eks_source_cluster_namespace of this AppInputSource.


        :param eks_source_cluster_namespace: The eks_source_cluster_namespace of this AppInputSource.
        :type eks_source_cluster_namespace: AppInputSourceEksSourceClusterNamespace
        """

        self._eks_source_cluster_namespace = eks_source_cluster_namespace

    @property
    def import_type(self):
        """Gets the import_type of this AppInputSource.


        :return: The import_type of this AppInputSource.
        :rtype: ResourceMappingType
        """
        return self._import_type

    @import_type.setter
    def import_type(self, import_type):
        """Sets the import_type of this AppInputSource.


        :param import_type: The import_type of this AppInputSource.
        :type import_type: ResourceMappingType
        """
        if import_type is None:
            raise ValueError("Invalid value for `import_type`, must not be `None`")

        self._import_type = import_type

    @property
    def resource_count(self):
        """Gets the resource_count of this AppInputSource.


        :return: The resource_count of this AppInputSource.
        :rtype: int
        """
        return self._resource_count

    @resource_count.setter
    def resource_count(self, resource_count):
        """Sets the resource_count of this AppInputSource.


        :param resource_count: The resource_count of this AppInputSource.
        :type resource_count: int
        """

        self._resource_count = resource_count

    @property
    def source_arn(self):
        """Gets the source_arn of this AppInputSource.


        :return: The source_arn of this AppInputSource.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this AppInputSource.


        :param source_arn: The source_arn of this AppInputSource.
        :type source_arn: str
        """

        self._source_arn = source_arn

    @property
    def source_name(self):
        """Gets the source_name of this AppInputSource.


        :return: The source_name of this AppInputSource.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this AppInputSource.


        :param source_name: The source_name of this AppInputSource.
        :type source_name: str
        """

        self._source_name = source_name

    @property
    def terraform_source(self):
        """Gets the terraform_source of this AppInputSource.


        :return: The terraform_source of this AppInputSource.
        :rtype: AppInputSourceTerraformSource
        """
        return self._terraform_source

    @terraform_source.setter
    def terraform_source(self, terraform_source):
        """Sets the terraform_source of this AppInputSource.


        :param terraform_source: The terraform_source of this AppInputSource.
        :type terraform_source: AppInputSourceTerraformSource
        """

        self._terraform_source = terraform_source
