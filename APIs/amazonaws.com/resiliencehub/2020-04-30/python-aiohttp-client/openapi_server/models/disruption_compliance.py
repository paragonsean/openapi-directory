# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compliance_status import ComplianceStatus
from openapi_server import util


class DisruptionCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievable_rpo_in_secs: int=None, achievable_rto_in_secs: int=None, compliance_status: ComplianceStatus=None, current_rpo_in_secs: int=None, current_rto_in_secs: int=None, message: str=None, rpo_description: str=None, rpo_reference_id: str=None, rto_description: str=None, rto_reference_id: str=None):
        """DisruptionCompliance - a model defined in OpenAPI

        :param achievable_rpo_in_secs: The achievable_rpo_in_secs of this DisruptionCompliance.
        :param achievable_rto_in_secs: The achievable_rto_in_secs of this DisruptionCompliance.
        :param compliance_status: The compliance_status of this DisruptionCompliance.
        :param current_rpo_in_secs: The current_rpo_in_secs of this DisruptionCompliance.
        :param current_rto_in_secs: The current_rto_in_secs of this DisruptionCompliance.
        :param message: The message of this DisruptionCompliance.
        :param rpo_description: The rpo_description of this DisruptionCompliance.
        :param rpo_reference_id: The rpo_reference_id of this DisruptionCompliance.
        :param rto_description: The rto_description of this DisruptionCompliance.
        :param rto_reference_id: The rto_reference_id of this DisruptionCompliance.
        """
        self.openapi_types = {
            'achievable_rpo_in_secs': int,
            'achievable_rto_in_secs': int,
            'compliance_status': ComplianceStatus,
            'current_rpo_in_secs': int,
            'current_rto_in_secs': int,
            'message': str,
            'rpo_description': str,
            'rpo_reference_id': str,
            'rto_description': str,
            'rto_reference_id': str
        }

        self.attribute_map = {
            'achievable_rpo_in_secs': 'achievableRpoInSecs',
            'achievable_rto_in_secs': 'achievableRtoInSecs',
            'compliance_status': 'complianceStatus',
            'current_rpo_in_secs': 'currentRpoInSecs',
            'current_rto_in_secs': 'currentRtoInSecs',
            'message': 'message',
            'rpo_description': 'rpoDescription',
            'rpo_reference_id': 'rpoReferenceId',
            'rto_description': 'rtoDescription',
            'rto_reference_id': 'rtoReferenceId'
        }

        self._achievable_rpo_in_secs = achievable_rpo_in_secs
        self._achievable_rto_in_secs = achievable_rto_in_secs
        self._compliance_status = compliance_status
        self._current_rpo_in_secs = current_rpo_in_secs
        self._current_rto_in_secs = current_rto_in_secs
        self._message = message
        self._rpo_description = rpo_description
        self._rpo_reference_id = rpo_reference_id
        self._rto_description = rto_description
        self._rto_reference_id = rto_reference_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisruptionCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisruptionCompliance of this DisruptionCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievable_rpo_in_secs(self):
        """Gets the achievable_rpo_in_secs of this DisruptionCompliance.


        :return: The achievable_rpo_in_secs of this DisruptionCompliance.
        :rtype: int
        """
        return self._achievable_rpo_in_secs

    @achievable_rpo_in_secs.setter
    def achievable_rpo_in_secs(self, achievable_rpo_in_secs):
        """Sets the achievable_rpo_in_secs of this DisruptionCompliance.


        :param achievable_rpo_in_secs: The achievable_rpo_in_secs of this DisruptionCompliance.
        :type achievable_rpo_in_secs: int
        """

        self._achievable_rpo_in_secs = achievable_rpo_in_secs

    @property
    def achievable_rto_in_secs(self):
        """Gets the achievable_rto_in_secs of this DisruptionCompliance.


        :return: The achievable_rto_in_secs of this DisruptionCompliance.
        :rtype: int
        """
        return self._achievable_rto_in_secs

    @achievable_rto_in_secs.setter
    def achievable_rto_in_secs(self, achievable_rto_in_secs):
        """Sets the achievable_rto_in_secs of this DisruptionCompliance.


        :param achievable_rto_in_secs: The achievable_rto_in_secs of this DisruptionCompliance.
        :type achievable_rto_in_secs: int
        """

        self._achievable_rto_in_secs = achievable_rto_in_secs

    @property
    def compliance_status(self):
        """Gets the compliance_status of this DisruptionCompliance.


        :return: The compliance_status of this DisruptionCompliance.
        :rtype: ComplianceStatus
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this DisruptionCompliance.


        :param compliance_status: The compliance_status of this DisruptionCompliance.
        :type compliance_status: ComplianceStatus
        """
        if compliance_status is None:
            raise ValueError("Invalid value for `compliance_status`, must not be `None`")

        self._compliance_status = compliance_status

    @property
    def current_rpo_in_secs(self):
        """Gets the current_rpo_in_secs of this DisruptionCompliance.


        :return: The current_rpo_in_secs of this DisruptionCompliance.
        :rtype: int
        """
        return self._current_rpo_in_secs

    @current_rpo_in_secs.setter
    def current_rpo_in_secs(self, current_rpo_in_secs):
        """Sets the current_rpo_in_secs of this DisruptionCompliance.


        :param current_rpo_in_secs: The current_rpo_in_secs of this DisruptionCompliance.
        :type current_rpo_in_secs: int
        """

        self._current_rpo_in_secs = current_rpo_in_secs

    @property
    def current_rto_in_secs(self):
        """Gets the current_rto_in_secs of this DisruptionCompliance.


        :return: The current_rto_in_secs of this DisruptionCompliance.
        :rtype: int
        """
        return self._current_rto_in_secs

    @current_rto_in_secs.setter
    def current_rto_in_secs(self, current_rto_in_secs):
        """Sets the current_rto_in_secs of this DisruptionCompliance.


        :param current_rto_in_secs: The current_rto_in_secs of this DisruptionCompliance.
        :type current_rto_in_secs: int
        """

        self._current_rto_in_secs = current_rto_in_secs

    @property
    def message(self):
        """Gets the message of this DisruptionCompliance.


        :return: The message of this DisruptionCompliance.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DisruptionCompliance.


        :param message: The message of this DisruptionCompliance.
        :type message: str
        """

        self._message = message

    @property
    def rpo_description(self):
        """Gets the rpo_description of this DisruptionCompliance.


        :return: The rpo_description of this DisruptionCompliance.
        :rtype: str
        """
        return self._rpo_description

    @rpo_description.setter
    def rpo_description(self, rpo_description):
        """Sets the rpo_description of this DisruptionCompliance.


        :param rpo_description: The rpo_description of this DisruptionCompliance.
        :type rpo_description: str
        """

        self._rpo_description = rpo_description

    @property
    def rpo_reference_id(self):
        """Gets the rpo_reference_id of this DisruptionCompliance.


        :return: The rpo_reference_id of this DisruptionCompliance.
        :rtype: str
        """
        return self._rpo_reference_id

    @rpo_reference_id.setter
    def rpo_reference_id(self, rpo_reference_id):
        """Sets the rpo_reference_id of this DisruptionCompliance.


        :param rpo_reference_id: The rpo_reference_id of this DisruptionCompliance.
        :type rpo_reference_id: str
        """

        self._rpo_reference_id = rpo_reference_id

    @property
    def rto_description(self):
        """Gets the rto_description of this DisruptionCompliance.


        :return: The rto_description of this DisruptionCompliance.
        :rtype: str
        """
        return self._rto_description

    @rto_description.setter
    def rto_description(self, rto_description):
        """Sets the rto_description of this DisruptionCompliance.


        :param rto_description: The rto_description of this DisruptionCompliance.
        :type rto_description: str
        """

        self._rto_description = rto_description

    @property
    def rto_reference_id(self):
        """Gets the rto_reference_id of this DisruptionCompliance.


        :return: The rto_reference_id of this DisruptionCompliance.
        :rtype: str
        """
        return self._rto_reference_id

    @rto_reference_id.setter
    def rto_reference_id(self, rto_reference_id):
        """Sets the rto_reference_id of this DisruptionCompliance.


        :param rto_reference_id: The rto_reference_id of this DisruptionCompliance.
        :type rto_reference_id: str
        """

        self._rto_reference_id = rto_reference_id
