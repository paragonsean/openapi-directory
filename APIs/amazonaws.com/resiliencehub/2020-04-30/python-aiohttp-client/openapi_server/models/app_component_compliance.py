# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_component_compliance_cost import AppComponentComplianceCost
from openapi_server.models.app_component_compliance_resiliency_score import AppComponentComplianceResiliencyScore
from openapi_server.models.compliance_status import ComplianceStatus
from openapi_server import util


class AppComponentCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_component_name: str=None, compliance: Dict=None, cost: AppComponentComplianceCost=None, message: str=None, resiliency_score: AppComponentComplianceResiliencyScore=None, status: ComplianceStatus=None):
        """AppComponentCompliance - a model defined in OpenAPI

        :param app_component_name: The app_component_name of this AppComponentCompliance.
        :param compliance: The compliance of this AppComponentCompliance.
        :param cost: The cost of this AppComponentCompliance.
        :param message: The message of this AppComponentCompliance.
        :param resiliency_score: The resiliency_score of this AppComponentCompliance.
        :param status: The status of this AppComponentCompliance.
        """
        self.openapi_types = {
            'app_component_name': str,
            'compliance': Dict,
            'cost': AppComponentComplianceCost,
            'message': str,
            'resiliency_score': AppComponentComplianceResiliencyScore,
            'status': ComplianceStatus
        }

        self.attribute_map = {
            'app_component_name': 'appComponentName',
            'compliance': 'compliance',
            'cost': 'cost',
            'message': 'message',
            'resiliency_score': 'resiliencyScore',
            'status': 'status'
        }

        self._app_component_name = app_component_name
        self._compliance = compliance
        self._cost = cost
        self._message = message
        self._resiliency_score = resiliency_score
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppComponentCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppComponentCompliance of this AppComponentCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_component_name(self):
        """Gets the app_component_name of this AppComponentCompliance.


        :return: The app_component_name of this AppComponentCompliance.
        :rtype: str
        """
        return self._app_component_name

    @app_component_name.setter
    def app_component_name(self, app_component_name):
        """Sets the app_component_name of this AppComponentCompliance.


        :param app_component_name: The app_component_name of this AppComponentCompliance.
        :type app_component_name: str
        """

        self._app_component_name = app_component_name

    @property
    def compliance(self):
        """Gets the compliance of this AppComponentCompliance.


        :return: The compliance of this AppComponentCompliance.
        :rtype: Dict
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this AppComponentCompliance.


        :param compliance: The compliance of this AppComponentCompliance.
        :type compliance: Dict
        """

        self._compliance = compliance

    @property
    def cost(self):
        """Gets the cost of this AppComponentCompliance.


        :return: The cost of this AppComponentCompliance.
        :rtype: AppComponentComplianceCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AppComponentCompliance.


        :param cost: The cost of this AppComponentCompliance.
        :type cost: AppComponentComplianceCost
        """

        self._cost = cost

    @property
    def message(self):
        """Gets the message of this AppComponentCompliance.


        :return: The message of this AppComponentCompliance.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AppComponentCompliance.


        :param message: The message of this AppComponentCompliance.
        :type message: str
        """

        self._message = message

    @property
    def resiliency_score(self):
        """Gets the resiliency_score of this AppComponentCompliance.


        :return: The resiliency_score of this AppComponentCompliance.
        :rtype: AppComponentComplianceResiliencyScore
        """
        return self._resiliency_score

    @resiliency_score.setter
    def resiliency_score(self, resiliency_score):
        """Sets the resiliency_score of this AppComponentCompliance.


        :param resiliency_score: The resiliency_score of this AppComponentCompliance.
        :type resiliency_score: AppComponentComplianceResiliencyScore
        """

        self._resiliency_score = resiliency_score

    @property
    def status(self):
        """Gets the status of this AppComponentCompliance.


        :return: The status of this AppComponentCompliance.
        :rtype: ComplianceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppComponentCompliance.


        :param status: The status of this AppComponentCompliance.
        :type status: ComplianceStatus
        """

        self._status = status
