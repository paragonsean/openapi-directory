# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_type import EventType
from openapi_server import util


class EventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: EventType=None, name: str=None, sns_topic_arn: str=None):
        """EventSubscription - a model defined in OpenAPI

        :param event_type: The event_type of this EventSubscription.
        :param name: The name of this EventSubscription.
        :param sns_topic_arn: The sns_topic_arn of this EventSubscription.
        """
        self.openapi_types = {
            'event_type': EventType,
            'name': str,
            'sns_topic_arn': str
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'name': 'name',
            'sns_topic_arn': 'snsTopicArn'
        }

        self._event_type = event_type
        self._name = name
        self._sns_topic_arn = sns_topic_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscription of this EventSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this EventSubscription.


        :return: The event_type of this EventSubscription.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventSubscription.


        :param event_type: The event_type of this EventSubscription.
        :type event_type: EventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def name(self):
        """Gets the name of this EventSubscription.


        :return: The name of this EventSubscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventSubscription.


        :param name: The name of this EventSubscription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this EventSubscription.


        :return: The sns_topic_arn of this EventSubscription.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this EventSubscription.


        :param sns_topic_arn: The sns_topic_arn of this EventSubscription.
        :type sns_topic_arn: str
        """

        self._sns_topic_arn = sns_topic_arn
