# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchUpdateRecommendationStatusFailedEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_id: str=None, error_message: str=None):
        """BatchUpdateRecommendationStatusFailedEntry - a model defined in OpenAPI

        :param entry_id: The entry_id of this BatchUpdateRecommendationStatusFailedEntry.
        :param error_message: The error_message of this BatchUpdateRecommendationStatusFailedEntry.
        """
        self.openapi_types = {
            'entry_id': str,
            'error_message': str
        }

        self.attribute_map = {
            'entry_id': 'entryId',
            'error_message': 'errorMessage'
        }

        self._entry_id = entry_id
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateRecommendationStatusFailedEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateRecommendationStatusFailedEntry of this BatchUpdateRecommendationStatusFailedEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_id(self):
        """Gets the entry_id of this BatchUpdateRecommendationStatusFailedEntry.


        :return: The entry_id of this BatchUpdateRecommendationStatusFailedEntry.
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this BatchUpdateRecommendationStatusFailedEntry.


        :param entry_id: The entry_id of this BatchUpdateRecommendationStatusFailedEntry.
        :type entry_id: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")

        self._entry_id = entry_id

    @property
    def error_message(self):
        """Gets the error_message of this BatchUpdateRecommendationStatusFailedEntry.


        :return: The error_message of this BatchUpdateRecommendationStatusFailedEntry.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BatchUpdateRecommendationStatusFailedEntry.


        :param error_message: The error_message of this BatchUpdateRecommendationStatusFailedEntry.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message
