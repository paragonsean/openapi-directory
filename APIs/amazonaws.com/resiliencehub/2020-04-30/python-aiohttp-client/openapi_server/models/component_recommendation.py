# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_compliance_status import RecommendationComplianceStatus
from openapi_server import util


class ComponentRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_component_name: str=None, config_recommendations: List=None, recommendation_status: RecommendationComplianceStatus=None):
        """ComponentRecommendation - a model defined in OpenAPI

        :param app_component_name: The app_component_name of this ComponentRecommendation.
        :param config_recommendations: The config_recommendations of this ComponentRecommendation.
        :param recommendation_status: The recommendation_status of this ComponentRecommendation.
        """
        self.openapi_types = {
            'app_component_name': str,
            'config_recommendations': List,
            'recommendation_status': RecommendationComplianceStatus
        }

        self.attribute_map = {
            'app_component_name': 'appComponentName',
            'config_recommendations': 'configRecommendations',
            'recommendation_status': 'recommendationStatus'
        }

        self._app_component_name = app_component_name
        self._config_recommendations = config_recommendations
        self._recommendation_status = recommendation_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentRecommendation of this ComponentRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_component_name(self):
        """Gets the app_component_name of this ComponentRecommendation.


        :return: The app_component_name of this ComponentRecommendation.
        :rtype: str
        """
        return self._app_component_name

    @app_component_name.setter
    def app_component_name(self, app_component_name):
        """Sets the app_component_name of this ComponentRecommendation.


        :param app_component_name: The app_component_name of this ComponentRecommendation.
        :type app_component_name: str
        """
        if app_component_name is None:
            raise ValueError("Invalid value for `app_component_name`, must not be `None`")

        self._app_component_name = app_component_name

    @property
    def config_recommendations(self):
        """Gets the config_recommendations of this ComponentRecommendation.


        :return: The config_recommendations of this ComponentRecommendation.
        :rtype: List
        """
        return self._config_recommendations

    @config_recommendations.setter
    def config_recommendations(self, config_recommendations):
        """Sets the config_recommendations of this ComponentRecommendation.


        :param config_recommendations: The config_recommendations of this ComponentRecommendation.
        :type config_recommendations: List
        """
        if config_recommendations is None:
            raise ValueError("Invalid value for `config_recommendations`, must not be `None`")

        self._config_recommendations = config_recommendations

    @property
    def recommendation_status(self):
        """Gets the recommendation_status of this ComponentRecommendation.


        :return: The recommendation_status of this ComponentRecommendation.
        :rtype: RecommendationComplianceStatus
        """
        return self._recommendation_status

    @recommendation_status.setter
    def recommendation_status(self, recommendation_status):
        """Sets the recommendation_status of this ComponentRecommendation.


        :param recommendation_status: The recommendation_status of this ComponentRecommendation.
        :type recommendation_status: RecommendationComplianceStatus
        """
        if recommendation_status is None:
            raise ValueError("Invalid value for `recommendation_status`, must not be `None`")

        self._recommendation_status = recommendation_status
