# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_status import AssessmentStatus
from openapi_server import util


class DeleteAppAssessmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_arn: str=None, assessment_status: AssessmentStatus=None):
        """DeleteAppAssessmentResponse - a model defined in OpenAPI

        :param assessment_arn: The assessment_arn of this DeleteAppAssessmentResponse.
        :param assessment_status: The assessment_status of this DeleteAppAssessmentResponse.
        """
        self.openapi_types = {
            'assessment_arn': str,
            'assessment_status': AssessmentStatus
        }

        self.attribute_map = {
            'assessment_arn': 'assessmentArn',
            'assessment_status': 'assessmentStatus'
        }

        self._assessment_arn = assessment_arn
        self._assessment_status = assessment_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteAppAssessmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteAppAssessmentResponse of this DeleteAppAssessmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_arn(self):
        """Gets the assessment_arn of this DeleteAppAssessmentResponse.


        :return: The assessment_arn of this DeleteAppAssessmentResponse.
        :rtype: str
        """
        return self._assessment_arn

    @assessment_arn.setter
    def assessment_arn(self, assessment_arn):
        """Sets the assessment_arn of this DeleteAppAssessmentResponse.


        :param assessment_arn: The assessment_arn of this DeleteAppAssessmentResponse.
        :type assessment_arn: str
        """
        if assessment_arn is None:
            raise ValueError("Invalid value for `assessment_arn`, must not be `None`")

        self._assessment_arn = assessment_arn

    @property
    def assessment_status(self):
        """Gets the assessment_status of this DeleteAppAssessmentResponse.


        :return: The assessment_status of this DeleteAppAssessmentResponse.
        :rtype: AssessmentStatus
        """
        return self._assessment_status

    @assessment_status.setter
    def assessment_status(self, assessment_status):
        """Sets the assessment_status of this DeleteAppAssessmentResponse.


        :param assessment_status: The assessment_status of this DeleteAppAssessmentResponse.
        :type assessment_status: AssessmentStatus
        """
        if assessment_status is None:
            raise ValueError("Invalid value for `assessment_status`, must not be `None`")

        self._assessment_status = assessment_status
