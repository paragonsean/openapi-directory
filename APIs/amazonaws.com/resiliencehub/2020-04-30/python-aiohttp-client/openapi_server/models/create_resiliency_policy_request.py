# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failure_policy import FailurePolicy
import re
from openapi_server import util


class CreateResiliencyPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, data_location_constraint: str=None, policy: Dict[str, FailurePolicy]=None, policy_description: str=None, policy_name: str=None, tags: Dict[str, str]=None, tier: str=None):
        """CreateResiliencyPolicyRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateResiliencyPolicyRequest.
        :param data_location_constraint: The data_location_constraint of this CreateResiliencyPolicyRequest.
        :param policy: The policy of this CreateResiliencyPolicyRequest.
        :param policy_description: The policy_description of this CreateResiliencyPolicyRequest.
        :param policy_name: The policy_name of this CreateResiliencyPolicyRequest.
        :param tags: The tags of this CreateResiliencyPolicyRequest.
        :param tier: The tier of this CreateResiliencyPolicyRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'data_location_constraint': str,
            'policy': Dict[str, FailurePolicy],
            'policy_description': str,
            'policy_name': str,
            'tags': Dict[str, str],
            'tier': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'data_location_constraint': 'dataLocationConstraint',
            'policy': 'policy',
            'policy_description': 'policyDescription',
            'policy_name': 'policyName',
            'tags': 'tags',
            'tier': 'tier'
        }

        self._client_token = client_token
        self._data_location_constraint = data_location_constraint
        self._policy = policy
        self._policy_description = policy_description
        self._policy_name = policy_name
        self._tags = tags
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResiliencyPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResiliencyPolicy_request of this CreateResiliencyPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateResiliencyPolicyRequest.

        Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.

        :return: The client_token of this CreateResiliencyPolicyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateResiliencyPolicyRequest.

        Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.

        :param client_token: The client_token of this CreateResiliencyPolicyRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 63:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `63`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[A-za-z0-9_.-]{0,63}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[A-za-z0-9_.-]{0,63}$/`")

        self._client_token = client_token

    @property
    def data_location_constraint(self):
        """Gets the data_location_constraint of this CreateResiliencyPolicyRequest.

        Specifies a high-level geographical location constraint for where your resilience policy data can be stored.

        :return: The data_location_constraint of this CreateResiliencyPolicyRequest.
        :rtype: str
        """
        return self._data_location_constraint

    @data_location_constraint.setter
    def data_location_constraint(self, data_location_constraint):
        """Sets the data_location_constraint of this CreateResiliencyPolicyRequest.

        Specifies a high-level geographical location constraint for where your resilience policy data can be stored.

        :param data_location_constraint: The data_location_constraint of this CreateResiliencyPolicyRequest.
        :type data_location_constraint: str
        """
        allowed_values = ["AnyLocation", "SameContinent", "SameCountry"]  # noqa: E501
        if data_location_constraint not in allowed_values:
            raise ValueError(
                "Invalid value for `data_location_constraint` ({0}), must be one of {1}"
                .format(data_location_constraint, allowed_values)
            )

        self._data_location_constraint = data_location_constraint

    @property
    def policy(self):
        """Gets the policy of this CreateResiliencyPolicyRequest.

        The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.

        :return: The policy of this CreateResiliencyPolicyRequest.
        :rtype: Dict[str, FailurePolicy]
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CreateResiliencyPolicyRequest.

        The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.

        :param policy: The policy of this CreateResiliencyPolicyRequest.
        :type policy: Dict[str, FailurePolicy]
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy

    @property
    def policy_description(self):
        """Gets the policy_description of this CreateResiliencyPolicyRequest.

        The description for the policy.

        :return: The policy_description of this CreateResiliencyPolicyRequest.
        :rtype: str
        """
        return self._policy_description

    @policy_description.setter
    def policy_description(self, policy_description):
        """Sets the policy_description of this CreateResiliencyPolicyRequest.

        The description for the policy.

        :param policy_description: The policy_description of this CreateResiliencyPolicyRequest.
        :type policy_description: str
        """
        if policy_description is not None and len(policy_description) > 500:
            raise ValueError("Invalid value for `policy_description`, length must be less than or equal to `500`")
        if policy_description is not None and len(policy_description) < 0:
            raise ValueError("Invalid value for `policy_description`, length must be greater than or equal to `0`")

        self._policy_description = policy_description

    @property
    def policy_name(self):
        """Gets the policy_name of this CreateResiliencyPolicyRequest.

        The name of the policy

        :return: The policy_name of this CreateResiliencyPolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this CreateResiliencyPolicyRequest.

        The name of the policy

        :param policy_name: The policy_name of this CreateResiliencyPolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")
        if policy_name is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$', policy_name):
            raise ValueError("Invalid value for `policy_name`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$/`")

        self._policy_name = policy_name

    @property
    def tags(self):
        """Gets the tags of this CreateResiliencyPolicyRequest.

        Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.

        :return: The tags of this CreateResiliencyPolicyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateResiliencyPolicyRequest.

        Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.

        :param tags: The tags of this CreateResiliencyPolicyRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def tier(self):
        """Gets the tier of this CreateResiliencyPolicyRequest.

        The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).

        :return: The tier of this CreateResiliencyPolicyRequest.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CreateResiliencyPolicyRequest.

        The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).

        :param tier: The tier of this CreateResiliencyPolicyRequest.
        :type tier: str
        """
        allowed_values = ["MissionCritical", "Critical", "Important", "CoreServices", "NonCritical", "NotApplicable"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
