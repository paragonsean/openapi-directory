# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartAppAssessmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_arn: str=None, app_version: str=None, assessment_name: str=None, client_token: str=None, tags: Dict[str, str]=None):
        """StartAppAssessmentRequest - a model defined in OpenAPI

        :param app_arn: The app_arn of this StartAppAssessmentRequest.
        :param app_version: The app_version of this StartAppAssessmentRequest.
        :param assessment_name: The assessment_name of this StartAppAssessmentRequest.
        :param client_token: The client_token of this StartAppAssessmentRequest.
        :param tags: The tags of this StartAppAssessmentRequest.
        """
        self.openapi_types = {
            'app_arn': str,
            'app_version': str,
            'assessment_name': str,
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'app_arn': 'appArn',
            'app_version': 'appVersion',
            'assessment_name': 'assessmentName',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._app_arn = app_arn
        self._app_version = app_version
        self._assessment_name = assessment_name
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAppAssessmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartAppAssessment_request of this StartAppAssessmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_arn(self):
        """Gets the app_arn of this StartAppAssessmentRequest.

        Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide.

        :return: The app_arn of this StartAppAssessmentRequest.
        :rtype: str
        """
        return self._app_arn

    @app_arn.setter
    def app_arn(self, app_arn):
        """Sets the app_arn of this StartAppAssessmentRequest.

        Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide.

        :param app_arn: The app_arn of this StartAppAssessmentRequest.
        :type app_arn: str
        """
        if app_arn is None:
            raise ValueError("Invalid value for `app_arn`, must not be `None`")
        if app_arn is not None and not re.search(r'^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_\/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9\/][A-Za-z0-9:_\/+.-]{0,1023}$', app_arn):
            raise ValueError("Invalid value for `app_arn`, must be a follow pattern or equal to `/^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_\/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9\/][A-Za-z0-9:_\/+.-]{0,1023}$/`")

        self._app_arn = app_arn

    @property
    def app_version(self):
        """Gets the app_version of this StartAppAssessmentRequest.

        The version of the application.

        :return: The app_version of this StartAppAssessmentRequest.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this StartAppAssessmentRequest.

        The version of the application.

        :param app_version: The app_version of this StartAppAssessmentRequest.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")
        if app_version is not None and not re.search(r'^\S{1,50}$', app_version):
            raise ValueError("Invalid value for `app_version`, must be a follow pattern or equal to `/^\S{1,50}$/`")

        self._app_version = app_version

    @property
    def assessment_name(self):
        """Gets the assessment_name of this StartAppAssessmentRequest.

        The name for the assessment.

        :return: The assessment_name of this StartAppAssessmentRequest.
        :rtype: str
        """
        return self._assessment_name

    @assessment_name.setter
    def assessment_name(self, assessment_name):
        """Sets the assessment_name of this StartAppAssessmentRequest.

        The name for the assessment.

        :param assessment_name: The assessment_name of this StartAppAssessmentRequest.
        :type assessment_name: str
        """
        if assessment_name is None:
            raise ValueError("Invalid value for `assessment_name`, must not be `None`")
        if assessment_name is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$', assessment_name):
            raise ValueError("Invalid value for `assessment_name`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$/`")

        self._assessment_name = assessment_name

    @property
    def client_token(self):
        """Gets the client_token of this StartAppAssessmentRequest.

        Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.

        :return: The client_token of this StartAppAssessmentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartAppAssessmentRequest.

        Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.

        :param client_token: The client_token of this StartAppAssessmentRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 63:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `63`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[A-za-z0-9_.-]{0,63}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[A-za-z0-9_.-]{0,63}$/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this StartAppAssessmentRequest.

        Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.

        :return: The tags of this StartAppAssessmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartAppAssessmentRequest.

        Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.

        :param tags: The tags of this StartAppAssessmentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
