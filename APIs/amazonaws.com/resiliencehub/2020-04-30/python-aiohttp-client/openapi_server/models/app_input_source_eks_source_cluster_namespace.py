# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppInputSourceEksSourceClusterNamespace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eks_cluster_arn: str=None, namespace: str=None):
        """AppInputSourceEksSourceClusterNamespace - a model defined in OpenAPI

        :param eks_cluster_arn: The eks_cluster_arn of this AppInputSourceEksSourceClusterNamespace.
        :param namespace: The namespace of this AppInputSourceEksSourceClusterNamespace.
        """
        self.openapi_types = {
            'eks_cluster_arn': str,
            'namespace': str
        }

        self.attribute_map = {
            'eks_cluster_arn': 'eksClusterArn',
            'namespace': 'namespace'
        }

        self._eks_cluster_arn = eks_cluster_arn
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppInputSourceEksSourceClusterNamespace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppInputSource_eksSourceClusterNamespace of this AppInputSourceEksSourceClusterNamespace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eks_cluster_arn(self):
        """Gets the eks_cluster_arn of this AppInputSourceEksSourceClusterNamespace.


        :return: The eks_cluster_arn of this AppInputSourceEksSourceClusterNamespace.
        :rtype: str
        """
        return self._eks_cluster_arn

    @eks_cluster_arn.setter
    def eks_cluster_arn(self, eks_cluster_arn):
        """Sets the eks_cluster_arn of this AppInputSourceEksSourceClusterNamespace.


        :param eks_cluster_arn: The eks_cluster_arn of this AppInputSourceEksSourceClusterNamespace.
        :type eks_cluster_arn: str
        """
        if eks_cluster_arn is None:
            raise ValueError("Invalid value for `eks_cluster_arn`, must not be `None`")

        self._eks_cluster_arn = eks_cluster_arn

    @property
    def namespace(self):
        """Gets the namespace of this AppInputSourceEksSourceClusterNamespace.


        :return: The namespace of this AppInputSourceEksSourceClusterNamespace.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AppInputSourceEksSourceClusterNamespace.


        :param namespace: The namespace of this AppInputSourceEksSourceClusterNamespace.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace
