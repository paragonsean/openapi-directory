# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sop_service_type import SopServiceType
from openapi_server import util


class SopRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_component_name: str=None, description: str=None, items: List=None, name: str=None, prerequisite: str=None, recommendation_id: str=None, reference_id: str=None, service_type: SopServiceType=None):
        """SopRecommendation - a model defined in OpenAPI

        :param app_component_name: The app_component_name of this SopRecommendation.
        :param description: The description of this SopRecommendation.
        :param items: The items of this SopRecommendation.
        :param name: The name of this SopRecommendation.
        :param prerequisite: The prerequisite of this SopRecommendation.
        :param recommendation_id: The recommendation_id of this SopRecommendation.
        :param reference_id: The reference_id of this SopRecommendation.
        :param service_type: The service_type of this SopRecommendation.
        """
        self.openapi_types = {
            'app_component_name': str,
            'description': str,
            'items': List,
            'name': str,
            'prerequisite': str,
            'recommendation_id': str,
            'reference_id': str,
            'service_type': SopServiceType
        }

        self.attribute_map = {
            'app_component_name': 'appComponentName',
            'description': 'description',
            'items': 'items',
            'name': 'name',
            'prerequisite': 'prerequisite',
            'recommendation_id': 'recommendationId',
            'reference_id': 'referenceId',
            'service_type': 'serviceType'
        }

        self._app_component_name = app_component_name
        self._description = description
        self._items = items
        self._name = name
        self._prerequisite = prerequisite
        self._recommendation_id = recommendation_id
        self._reference_id = reference_id
        self._service_type = service_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SopRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SopRecommendation of this SopRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_component_name(self):
        """Gets the app_component_name of this SopRecommendation.


        :return: The app_component_name of this SopRecommendation.
        :rtype: str
        """
        return self._app_component_name

    @app_component_name.setter
    def app_component_name(self, app_component_name):
        """Sets the app_component_name of this SopRecommendation.


        :param app_component_name: The app_component_name of this SopRecommendation.
        :type app_component_name: str
        """

        self._app_component_name = app_component_name

    @property
    def description(self):
        """Gets the description of this SopRecommendation.


        :return: The description of this SopRecommendation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SopRecommendation.


        :param description: The description of this SopRecommendation.
        :type description: str
        """

        self._description = description

    @property
    def items(self):
        """Gets the items of this SopRecommendation.


        :return: The items of this SopRecommendation.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SopRecommendation.


        :param items: The items of this SopRecommendation.
        :type items: List
        """

        self._items = items

    @property
    def name(self):
        """Gets the name of this SopRecommendation.


        :return: The name of this SopRecommendation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SopRecommendation.


        :param name: The name of this SopRecommendation.
        :type name: str
        """

        self._name = name

    @property
    def prerequisite(self):
        """Gets the prerequisite of this SopRecommendation.


        :return: The prerequisite of this SopRecommendation.
        :rtype: str
        """
        return self._prerequisite

    @prerequisite.setter
    def prerequisite(self, prerequisite):
        """Sets the prerequisite of this SopRecommendation.


        :param prerequisite: The prerequisite of this SopRecommendation.
        :type prerequisite: str
        """

        self._prerequisite = prerequisite

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this SopRecommendation.


        :return: The recommendation_id of this SopRecommendation.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this SopRecommendation.


        :param recommendation_id: The recommendation_id of this SopRecommendation.
        :type recommendation_id: str
        """
        if recommendation_id is None:
            raise ValueError("Invalid value for `recommendation_id`, must not be `None`")

        self._recommendation_id = recommendation_id

    @property
    def reference_id(self):
        """Gets the reference_id of this SopRecommendation.


        :return: The reference_id of this SopRecommendation.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this SopRecommendation.


        :param reference_id: The reference_id of this SopRecommendation.
        :type reference_id: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")

        self._reference_id = reference_id

    @property
    def service_type(self):
        """Gets the service_type of this SopRecommendation.


        :return: The service_type of this SopRecommendation.
        :rtype: SopServiceType
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this SopRecommendation.


        :param service_type: The service_type of this SopRecommendation.
        :type service_type: SopServiceType
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")

        self._service_type = service_type
