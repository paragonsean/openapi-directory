# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_app_version_resource_request_logical_resource_id import CreateAppVersionResourceRequestLogicalResourceId
from openapi_server.models.resource_mapping_physical_resource_id import ResourceMappingPhysicalResourceId
from openapi_server.models.resource_source_type import ResourceSourceType
from openapi_server import util


class PhysicalResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_info: Dict=None, app_components: List=None, excluded: bool=None, logical_resource_id: CreateAppVersionResourceRequestLogicalResourceId=None, parent_resource_name: str=None, physical_resource_id: ResourceMappingPhysicalResourceId=None, resource_name: str=None, resource_type: str=None, source_type: ResourceSourceType=None):
        """PhysicalResource - a model defined in OpenAPI

        :param additional_info: The additional_info of this PhysicalResource.
        :param app_components: The app_components of this PhysicalResource.
        :param excluded: The excluded of this PhysicalResource.
        :param logical_resource_id: The logical_resource_id of this PhysicalResource.
        :param parent_resource_name: The parent_resource_name of this PhysicalResource.
        :param physical_resource_id: The physical_resource_id of this PhysicalResource.
        :param resource_name: The resource_name of this PhysicalResource.
        :param resource_type: The resource_type of this PhysicalResource.
        :param source_type: The source_type of this PhysicalResource.
        """
        self.openapi_types = {
            'additional_info': Dict,
            'app_components': List,
            'excluded': bool,
            'logical_resource_id': CreateAppVersionResourceRequestLogicalResourceId,
            'parent_resource_name': str,
            'physical_resource_id': ResourceMappingPhysicalResourceId,
            'resource_name': str,
            'resource_type': str,
            'source_type': ResourceSourceType
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'app_components': 'appComponents',
            'excluded': 'excluded',
            'logical_resource_id': 'logicalResourceId',
            'parent_resource_name': 'parentResourceName',
            'physical_resource_id': 'physicalResourceId',
            'resource_name': 'resourceName',
            'resource_type': 'resourceType',
            'source_type': 'sourceType'
        }

        self._additional_info = additional_info
        self._app_components = app_components
        self._excluded = excluded
        self._logical_resource_id = logical_resource_id
        self._parent_resource_name = parent_resource_name
        self._physical_resource_id = physical_resource_id
        self._resource_name = resource_name
        self._resource_type = resource_type
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhysicalResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhysicalResource of this PhysicalResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_info(self):
        """Gets the additional_info of this PhysicalResource.


        :return: The additional_info of this PhysicalResource.
        :rtype: Dict
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this PhysicalResource.


        :param additional_info: The additional_info of this PhysicalResource.
        :type additional_info: Dict
        """

        self._additional_info = additional_info

    @property
    def app_components(self):
        """Gets the app_components of this PhysicalResource.


        :return: The app_components of this PhysicalResource.
        :rtype: List
        """
        return self._app_components

    @app_components.setter
    def app_components(self, app_components):
        """Sets the app_components of this PhysicalResource.


        :param app_components: The app_components of this PhysicalResource.
        :type app_components: List
        """

        self._app_components = app_components

    @property
    def excluded(self):
        """Gets the excluded of this PhysicalResource.


        :return: The excluded of this PhysicalResource.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this PhysicalResource.


        :param excluded: The excluded of this PhysicalResource.
        :type excluded: bool
        """

        self._excluded = excluded

    @property
    def logical_resource_id(self):
        """Gets the logical_resource_id of this PhysicalResource.


        :return: The logical_resource_id of this PhysicalResource.
        :rtype: CreateAppVersionResourceRequestLogicalResourceId
        """
        return self._logical_resource_id

    @logical_resource_id.setter
    def logical_resource_id(self, logical_resource_id):
        """Sets the logical_resource_id of this PhysicalResource.


        :param logical_resource_id: The logical_resource_id of this PhysicalResource.
        :type logical_resource_id: CreateAppVersionResourceRequestLogicalResourceId
        """
        if logical_resource_id is None:
            raise ValueError("Invalid value for `logical_resource_id`, must not be `None`")

        self._logical_resource_id = logical_resource_id

    @property
    def parent_resource_name(self):
        """Gets the parent_resource_name of this PhysicalResource.


        :return: The parent_resource_name of this PhysicalResource.
        :rtype: str
        """
        return self._parent_resource_name

    @parent_resource_name.setter
    def parent_resource_name(self, parent_resource_name):
        """Sets the parent_resource_name of this PhysicalResource.


        :param parent_resource_name: The parent_resource_name of this PhysicalResource.
        :type parent_resource_name: str
        """

        self._parent_resource_name = parent_resource_name

    @property
    def physical_resource_id(self):
        """Gets the physical_resource_id of this PhysicalResource.


        :return: The physical_resource_id of this PhysicalResource.
        :rtype: ResourceMappingPhysicalResourceId
        """
        return self._physical_resource_id

    @physical_resource_id.setter
    def physical_resource_id(self, physical_resource_id):
        """Sets the physical_resource_id of this PhysicalResource.


        :param physical_resource_id: The physical_resource_id of this PhysicalResource.
        :type physical_resource_id: ResourceMappingPhysicalResourceId
        """
        if physical_resource_id is None:
            raise ValueError("Invalid value for `physical_resource_id`, must not be `None`")

        self._physical_resource_id = physical_resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this PhysicalResource.


        :return: The resource_name of this PhysicalResource.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this PhysicalResource.


        :param resource_name: The resource_name of this PhysicalResource.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this PhysicalResource.


        :return: The resource_type of this PhysicalResource.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PhysicalResource.


        :param resource_type: The resource_type of this PhysicalResource.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def source_type(self):
        """Gets the source_type of this PhysicalResource.


        :return: The source_type of this PhysicalResource.
        :rtype: ResourceSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this PhysicalResource.


        :param source_type: The source_type of this PhysicalResource.
        :type source_type: ResourceSourceType
        """

        self._source_type = source_type
