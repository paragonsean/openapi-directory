# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_model_type import PermissionModelType
from openapi_server import util


class PermissionModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cross_account_role_arns: List=None, invoker_role_name: str=None, type: PermissionModelType=None):
        """PermissionModel - a model defined in OpenAPI

        :param cross_account_role_arns: The cross_account_role_arns of this PermissionModel.
        :param invoker_role_name: The invoker_role_name of this PermissionModel.
        :param type: The type of this PermissionModel.
        """
        self.openapi_types = {
            'cross_account_role_arns': List,
            'invoker_role_name': str,
            'type': PermissionModelType
        }

        self.attribute_map = {
            'cross_account_role_arns': 'crossAccountRoleArns',
            'invoker_role_name': 'invokerRoleName',
            'type': 'type'
        }

        self._cross_account_role_arns = cross_account_role_arns
        self._invoker_role_name = invoker_role_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermissionModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PermissionModel of this PermissionModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cross_account_role_arns(self):
        """Gets the cross_account_role_arns of this PermissionModel.


        :return: The cross_account_role_arns of this PermissionModel.
        :rtype: List
        """
        return self._cross_account_role_arns

    @cross_account_role_arns.setter
    def cross_account_role_arns(self, cross_account_role_arns):
        """Sets the cross_account_role_arns of this PermissionModel.


        :param cross_account_role_arns: The cross_account_role_arns of this PermissionModel.
        :type cross_account_role_arns: List
        """

        self._cross_account_role_arns = cross_account_role_arns

    @property
    def invoker_role_name(self):
        """Gets the invoker_role_name of this PermissionModel.


        :return: The invoker_role_name of this PermissionModel.
        :rtype: str
        """
        return self._invoker_role_name

    @invoker_role_name.setter
    def invoker_role_name(self, invoker_role_name):
        """Sets the invoker_role_name of this PermissionModel.


        :param invoker_role_name: The invoker_role_name of this PermissionModel.
        :type invoker_role_name: str
        """

        self._invoker_role_name = invoker_role_name

    @property
    def type(self):
        """Gets the type of this PermissionModel.


        :return: The type of this PermissionModel.
        :rtype: PermissionModelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PermissionModel.


        :param type: The type of this PermissionModel.
        :type type: PermissionModelType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
