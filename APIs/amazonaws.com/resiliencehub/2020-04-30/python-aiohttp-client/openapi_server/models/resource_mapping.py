# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_mapping_physical_resource_id import ResourceMappingPhysicalResourceId
from openapi_server.models.resource_mapping_type import ResourceMappingType
from openapi_server import util


class ResourceMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_registry_app_name: str=None, eks_source_name: str=None, logical_stack_name: str=None, mapping_type: ResourceMappingType=None, physical_resource_id: ResourceMappingPhysicalResourceId=None, resource_group_name: str=None, resource_name: str=None, terraform_source_name: str=None):
        """ResourceMapping - a model defined in OpenAPI

        :param app_registry_app_name: The app_registry_app_name of this ResourceMapping.
        :param eks_source_name: The eks_source_name of this ResourceMapping.
        :param logical_stack_name: The logical_stack_name of this ResourceMapping.
        :param mapping_type: The mapping_type of this ResourceMapping.
        :param physical_resource_id: The physical_resource_id of this ResourceMapping.
        :param resource_group_name: The resource_group_name of this ResourceMapping.
        :param resource_name: The resource_name of this ResourceMapping.
        :param terraform_source_name: The terraform_source_name of this ResourceMapping.
        """
        self.openapi_types = {
            'app_registry_app_name': str,
            'eks_source_name': str,
            'logical_stack_name': str,
            'mapping_type': ResourceMappingType,
            'physical_resource_id': ResourceMappingPhysicalResourceId,
            'resource_group_name': str,
            'resource_name': str,
            'terraform_source_name': str
        }

        self.attribute_map = {
            'app_registry_app_name': 'appRegistryAppName',
            'eks_source_name': 'eksSourceName',
            'logical_stack_name': 'logicalStackName',
            'mapping_type': 'mappingType',
            'physical_resource_id': 'physicalResourceId',
            'resource_group_name': 'resourceGroupName',
            'resource_name': 'resourceName',
            'terraform_source_name': 'terraformSourceName'
        }

        self._app_registry_app_name = app_registry_app_name
        self._eks_source_name = eks_source_name
        self._logical_stack_name = logical_stack_name
        self._mapping_type = mapping_type
        self._physical_resource_id = physical_resource_id
        self._resource_group_name = resource_group_name
        self._resource_name = resource_name
        self._terraform_source_name = terraform_source_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceMapping of this ResourceMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_registry_app_name(self):
        """Gets the app_registry_app_name of this ResourceMapping.


        :return: The app_registry_app_name of this ResourceMapping.
        :rtype: str
        """
        return self._app_registry_app_name

    @app_registry_app_name.setter
    def app_registry_app_name(self, app_registry_app_name):
        """Sets the app_registry_app_name of this ResourceMapping.


        :param app_registry_app_name: The app_registry_app_name of this ResourceMapping.
        :type app_registry_app_name: str
        """

        self._app_registry_app_name = app_registry_app_name

    @property
    def eks_source_name(self):
        """Gets the eks_source_name of this ResourceMapping.


        :return: The eks_source_name of this ResourceMapping.
        :rtype: str
        """
        return self._eks_source_name

    @eks_source_name.setter
    def eks_source_name(self, eks_source_name):
        """Sets the eks_source_name of this ResourceMapping.


        :param eks_source_name: The eks_source_name of this ResourceMapping.
        :type eks_source_name: str
        """

        self._eks_source_name = eks_source_name

    @property
    def logical_stack_name(self):
        """Gets the logical_stack_name of this ResourceMapping.


        :return: The logical_stack_name of this ResourceMapping.
        :rtype: str
        """
        return self._logical_stack_name

    @logical_stack_name.setter
    def logical_stack_name(self, logical_stack_name):
        """Sets the logical_stack_name of this ResourceMapping.


        :param logical_stack_name: The logical_stack_name of this ResourceMapping.
        :type logical_stack_name: str
        """

        self._logical_stack_name = logical_stack_name

    @property
    def mapping_type(self):
        """Gets the mapping_type of this ResourceMapping.


        :return: The mapping_type of this ResourceMapping.
        :rtype: ResourceMappingType
        """
        return self._mapping_type

    @mapping_type.setter
    def mapping_type(self, mapping_type):
        """Sets the mapping_type of this ResourceMapping.


        :param mapping_type: The mapping_type of this ResourceMapping.
        :type mapping_type: ResourceMappingType
        """
        if mapping_type is None:
            raise ValueError("Invalid value for `mapping_type`, must not be `None`")

        self._mapping_type = mapping_type

    @property
    def physical_resource_id(self):
        """Gets the physical_resource_id of this ResourceMapping.


        :return: The physical_resource_id of this ResourceMapping.
        :rtype: ResourceMappingPhysicalResourceId
        """
        return self._physical_resource_id

    @physical_resource_id.setter
    def physical_resource_id(self, physical_resource_id):
        """Sets the physical_resource_id of this ResourceMapping.


        :param physical_resource_id: The physical_resource_id of this ResourceMapping.
        :type physical_resource_id: ResourceMappingPhysicalResourceId
        """
        if physical_resource_id is None:
            raise ValueError("Invalid value for `physical_resource_id`, must not be `None`")

        self._physical_resource_id = physical_resource_id

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this ResourceMapping.


        :return: The resource_group_name of this ResourceMapping.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this ResourceMapping.


        :param resource_group_name: The resource_group_name of this ResourceMapping.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceMapping.


        :return: The resource_name of this ResourceMapping.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceMapping.


        :param resource_name: The resource_name of this ResourceMapping.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def terraform_source_name(self):
        """Gets the terraform_source_name of this ResourceMapping.


        :return: The terraform_source_name of this ResourceMapping.
        :rtype: str
        """
        return self._terraform_source_name

    @terraform_source_name.setter
    def terraform_source_name(self, terraform_source_name):
        """Sets the terraform_source_name of this ResourceMapping.


        :param terraform_source_name: The terraform_source_name of this ResourceMapping.
        :type terraform_source_name: str
        """

        self._terraform_source_name = terraform_source_name
