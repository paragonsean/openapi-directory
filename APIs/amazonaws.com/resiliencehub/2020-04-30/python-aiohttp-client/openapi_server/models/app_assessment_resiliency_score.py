# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppAssessmentResiliencyScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disruption_score: Dict=None, score: float=None):
        """AppAssessmentResiliencyScore - a model defined in OpenAPI

        :param disruption_score: The disruption_score of this AppAssessmentResiliencyScore.
        :param score: The score of this AppAssessmentResiliencyScore.
        """
        self.openapi_types = {
            'disruption_score': Dict,
            'score': float
        }

        self.attribute_map = {
            'disruption_score': 'disruptionScore',
            'score': 'score'
        }

        self._disruption_score = disruption_score
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppAssessmentResiliencyScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppAssessment_resiliencyScore of this AppAssessmentResiliencyScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disruption_score(self):
        """Gets the disruption_score of this AppAssessmentResiliencyScore.


        :return: The disruption_score of this AppAssessmentResiliencyScore.
        :rtype: Dict
        """
        return self._disruption_score

    @disruption_score.setter
    def disruption_score(self, disruption_score):
        """Sets the disruption_score of this AppAssessmentResiliencyScore.


        :param disruption_score: The disruption_score of this AppAssessmentResiliencyScore.
        :type disruption_score: Dict
        """
        if disruption_score is None:
            raise ValueError("Invalid value for `disruption_score`, must not be `None`")

        self._disruption_score = disruption_score

    @property
    def score(self):
        """Gets the score of this AppAssessmentResiliencyScore.


        :return: The score of this AppAssessmentResiliencyScore.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AppAssessmentResiliencyScore.


        :param score: The score of this AppAssessmentResiliencyScore.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score
