# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unsupported_resource_logical_resource_id import UnsupportedResourceLogicalResourceId
from openapi_server.models.unsupported_resource_physical_resource_id import UnsupportedResourcePhysicalResourceId
from openapi_server import util


class UnsupportedResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logical_resource_id: UnsupportedResourceLogicalResourceId=None, physical_resource_id: UnsupportedResourcePhysicalResourceId=None, resource_type: str=None, unsupported_resource_status: str=None):
        """UnsupportedResource - a model defined in OpenAPI

        :param logical_resource_id: The logical_resource_id of this UnsupportedResource.
        :param physical_resource_id: The physical_resource_id of this UnsupportedResource.
        :param resource_type: The resource_type of this UnsupportedResource.
        :param unsupported_resource_status: The unsupported_resource_status of this UnsupportedResource.
        """
        self.openapi_types = {
            'logical_resource_id': UnsupportedResourceLogicalResourceId,
            'physical_resource_id': UnsupportedResourcePhysicalResourceId,
            'resource_type': str,
            'unsupported_resource_status': str
        }

        self.attribute_map = {
            'logical_resource_id': 'logicalResourceId',
            'physical_resource_id': 'physicalResourceId',
            'resource_type': 'resourceType',
            'unsupported_resource_status': 'unsupportedResourceStatus'
        }

        self._logical_resource_id = logical_resource_id
        self._physical_resource_id = physical_resource_id
        self._resource_type = resource_type
        self._unsupported_resource_status = unsupported_resource_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnsupportedResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnsupportedResource of this UnsupportedResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logical_resource_id(self):
        """Gets the logical_resource_id of this UnsupportedResource.


        :return: The logical_resource_id of this UnsupportedResource.
        :rtype: UnsupportedResourceLogicalResourceId
        """
        return self._logical_resource_id

    @logical_resource_id.setter
    def logical_resource_id(self, logical_resource_id):
        """Sets the logical_resource_id of this UnsupportedResource.


        :param logical_resource_id: The logical_resource_id of this UnsupportedResource.
        :type logical_resource_id: UnsupportedResourceLogicalResourceId
        """
        if logical_resource_id is None:
            raise ValueError("Invalid value for `logical_resource_id`, must not be `None`")

        self._logical_resource_id = logical_resource_id

    @property
    def physical_resource_id(self):
        """Gets the physical_resource_id of this UnsupportedResource.


        :return: The physical_resource_id of this UnsupportedResource.
        :rtype: UnsupportedResourcePhysicalResourceId
        """
        return self._physical_resource_id

    @physical_resource_id.setter
    def physical_resource_id(self, physical_resource_id):
        """Sets the physical_resource_id of this UnsupportedResource.


        :param physical_resource_id: The physical_resource_id of this UnsupportedResource.
        :type physical_resource_id: UnsupportedResourcePhysicalResourceId
        """
        if physical_resource_id is None:
            raise ValueError("Invalid value for `physical_resource_id`, must not be `None`")

        self._physical_resource_id = physical_resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this UnsupportedResource.


        :return: The resource_type of this UnsupportedResource.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UnsupportedResource.


        :param resource_type: The resource_type of this UnsupportedResource.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def unsupported_resource_status(self):
        """Gets the unsupported_resource_status of this UnsupportedResource.


        :return: The unsupported_resource_status of this UnsupportedResource.
        :rtype: str
        """
        return self._unsupported_resource_status

    @unsupported_resource_status.setter
    def unsupported_resource_status(self, unsupported_resource_status):
        """Sets the unsupported_resource_status of this UnsupportedResource.


        :param unsupported_resource_status: The unsupported_resource_status of this UnsupportedResource.
        :type unsupported_resource_status: str
        """

        self._unsupported_resource_status = unsupported_resource_status
