# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_assessment_cost import AppAssessmentCost
from openapi_server.models.app_assessment_policy import AppAssessmentPolicy
from openapi_server.models.app_assessment_resiliency_score import AppAssessmentResiliencyScore
from openapi_server.models.app_assessment_resource_errors_details import AppAssessmentResourceErrorsDetails
from openapi_server.models.assessment_invoker import AssessmentInvoker
from openapi_server.models.assessment_status import AssessmentStatus
from openapi_server.models.compliance_status import ComplianceStatus
from openapi_server.models.drift_status import DriftStatus
from openapi_server import util


class AppAssessment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_arn: str=None, app_version: str=None, assessment_arn: str=None, assessment_name: str=None, assessment_status: AssessmentStatus=None, compliance: Dict=None, compliance_status: ComplianceStatus=None, cost: AppAssessmentCost=None, drift_status: DriftStatus=None, end_time: datetime=None, invoker: AssessmentInvoker=None, message: str=None, policy: AppAssessmentPolicy=None, resiliency_score: AppAssessmentResiliencyScore=None, resource_errors_details: AppAssessmentResourceErrorsDetails=None, start_time: datetime=None, tags: Dict=None, version_name: str=None):
        """AppAssessment - a model defined in OpenAPI

        :param app_arn: The app_arn of this AppAssessment.
        :param app_version: The app_version of this AppAssessment.
        :param assessment_arn: The assessment_arn of this AppAssessment.
        :param assessment_name: The assessment_name of this AppAssessment.
        :param assessment_status: The assessment_status of this AppAssessment.
        :param compliance: The compliance of this AppAssessment.
        :param compliance_status: The compliance_status of this AppAssessment.
        :param cost: The cost of this AppAssessment.
        :param drift_status: The drift_status of this AppAssessment.
        :param end_time: The end_time of this AppAssessment.
        :param invoker: The invoker of this AppAssessment.
        :param message: The message of this AppAssessment.
        :param policy: The policy of this AppAssessment.
        :param resiliency_score: The resiliency_score of this AppAssessment.
        :param resource_errors_details: The resource_errors_details of this AppAssessment.
        :param start_time: The start_time of this AppAssessment.
        :param tags: The tags of this AppAssessment.
        :param version_name: The version_name of this AppAssessment.
        """
        self.openapi_types = {
            'app_arn': str,
            'app_version': str,
            'assessment_arn': str,
            'assessment_name': str,
            'assessment_status': AssessmentStatus,
            'compliance': Dict,
            'compliance_status': ComplianceStatus,
            'cost': AppAssessmentCost,
            'drift_status': DriftStatus,
            'end_time': datetime,
            'invoker': AssessmentInvoker,
            'message': str,
            'policy': AppAssessmentPolicy,
            'resiliency_score': AppAssessmentResiliencyScore,
            'resource_errors_details': AppAssessmentResourceErrorsDetails,
            'start_time': datetime,
            'tags': Dict,
            'version_name': str
        }

        self.attribute_map = {
            'app_arn': 'appArn',
            'app_version': 'appVersion',
            'assessment_arn': 'assessmentArn',
            'assessment_name': 'assessmentName',
            'assessment_status': 'assessmentStatus',
            'compliance': 'compliance',
            'compliance_status': 'complianceStatus',
            'cost': 'cost',
            'drift_status': 'driftStatus',
            'end_time': 'endTime',
            'invoker': 'invoker',
            'message': 'message',
            'policy': 'policy',
            'resiliency_score': 'resiliencyScore',
            'resource_errors_details': 'resourceErrorsDetails',
            'start_time': 'startTime',
            'tags': 'tags',
            'version_name': 'versionName'
        }

        self._app_arn = app_arn
        self._app_version = app_version
        self._assessment_arn = assessment_arn
        self._assessment_name = assessment_name
        self._assessment_status = assessment_status
        self._compliance = compliance
        self._compliance_status = compliance_status
        self._cost = cost
        self._drift_status = drift_status
        self._end_time = end_time
        self._invoker = invoker
        self._message = message
        self._policy = policy
        self._resiliency_score = resiliency_score
        self._resource_errors_details = resource_errors_details
        self._start_time = start_time
        self._tags = tags
        self._version_name = version_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppAssessment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppAssessment of this AppAssessment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_arn(self):
        """Gets the app_arn of this AppAssessment.


        :return: The app_arn of this AppAssessment.
        :rtype: str
        """
        return self._app_arn

    @app_arn.setter
    def app_arn(self, app_arn):
        """Sets the app_arn of this AppAssessment.


        :param app_arn: The app_arn of this AppAssessment.
        :type app_arn: str
        """

        self._app_arn = app_arn

    @property
    def app_version(self):
        """Gets the app_version of this AppAssessment.


        :return: The app_version of this AppAssessment.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this AppAssessment.


        :param app_version: The app_version of this AppAssessment.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def assessment_arn(self):
        """Gets the assessment_arn of this AppAssessment.


        :return: The assessment_arn of this AppAssessment.
        :rtype: str
        """
        return self._assessment_arn

    @assessment_arn.setter
    def assessment_arn(self, assessment_arn):
        """Sets the assessment_arn of this AppAssessment.


        :param assessment_arn: The assessment_arn of this AppAssessment.
        :type assessment_arn: str
        """
        if assessment_arn is None:
            raise ValueError("Invalid value for `assessment_arn`, must not be `None`")

        self._assessment_arn = assessment_arn

    @property
    def assessment_name(self):
        """Gets the assessment_name of this AppAssessment.


        :return: The assessment_name of this AppAssessment.
        :rtype: str
        """
        return self._assessment_name

    @assessment_name.setter
    def assessment_name(self, assessment_name):
        """Sets the assessment_name of this AppAssessment.


        :param assessment_name: The assessment_name of this AppAssessment.
        :type assessment_name: str
        """

        self._assessment_name = assessment_name

    @property
    def assessment_status(self):
        """Gets the assessment_status of this AppAssessment.


        :return: The assessment_status of this AppAssessment.
        :rtype: AssessmentStatus
        """
        return self._assessment_status

    @assessment_status.setter
    def assessment_status(self, assessment_status):
        """Sets the assessment_status of this AppAssessment.


        :param assessment_status: The assessment_status of this AppAssessment.
        :type assessment_status: AssessmentStatus
        """
        if assessment_status is None:
            raise ValueError("Invalid value for `assessment_status`, must not be `None`")

        self._assessment_status = assessment_status

    @property
    def compliance(self):
        """Gets the compliance of this AppAssessment.


        :return: The compliance of this AppAssessment.
        :rtype: Dict
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this AppAssessment.


        :param compliance: The compliance of this AppAssessment.
        :type compliance: Dict
        """

        self._compliance = compliance

    @property
    def compliance_status(self):
        """Gets the compliance_status of this AppAssessment.


        :return: The compliance_status of this AppAssessment.
        :rtype: ComplianceStatus
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this AppAssessment.


        :param compliance_status: The compliance_status of this AppAssessment.
        :type compliance_status: ComplianceStatus
        """

        self._compliance_status = compliance_status

    @property
    def cost(self):
        """Gets the cost of this AppAssessment.


        :return: The cost of this AppAssessment.
        :rtype: AppAssessmentCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AppAssessment.


        :param cost: The cost of this AppAssessment.
        :type cost: AppAssessmentCost
        """

        self._cost = cost

    @property
    def drift_status(self):
        """Gets the drift_status of this AppAssessment.


        :return: The drift_status of this AppAssessment.
        :rtype: DriftStatus
        """
        return self._drift_status

    @drift_status.setter
    def drift_status(self, drift_status):
        """Sets the drift_status of this AppAssessment.


        :param drift_status: The drift_status of this AppAssessment.
        :type drift_status: DriftStatus
        """

        self._drift_status = drift_status

    @property
    def end_time(self):
        """Gets the end_time of this AppAssessment.


        :return: The end_time of this AppAssessment.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AppAssessment.


        :param end_time: The end_time of this AppAssessment.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def invoker(self):
        """Gets the invoker of this AppAssessment.


        :return: The invoker of this AppAssessment.
        :rtype: AssessmentInvoker
        """
        return self._invoker

    @invoker.setter
    def invoker(self, invoker):
        """Sets the invoker of this AppAssessment.


        :param invoker: The invoker of this AppAssessment.
        :type invoker: AssessmentInvoker
        """
        if invoker is None:
            raise ValueError("Invalid value for `invoker`, must not be `None`")

        self._invoker = invoker

    @property
    def message(self):
        """Gets the message of this AppAssessment.


        :return: The message of this AppAssessment.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AppAssessment.


        :param message: The message of this AppAssessment.
        :type message: str
        """

        self._message = message

    @property
    def policy(self):
        """Gets the policy of this AppAssessment.


        :return: The policy of this AppAssessment.
        :rtype: AppAssessmentPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this AppAssessment.


        :param policy: The policy of this AppAssessment.
        :type policy: AppAssessmentPolicy
        """

        self._policy = policy

    @property
    def resiliency_score(self):
        """Gets the resiliency_score of this AppAssessment.


        :return: The resiliency_score of this AppAssessment.
        :rtype: AppAssessmentResiliencyScore
        """
        return self._resiliency_score

    @resiliency_score.setter
    def resiliency_score(self, resiliency_score):
        """Sets the resiliency_score of this AppAssessment.


        :param resiliency_score: The resiliency_score of this AppAssessment.
        :type resiliency_score: AppAssessmentResiliencyScore
        """

        self._resiliency_score = resiliency_score

    @property
    def resource_errors_details(self):
        """Gets the resource_errors_details of this AppAssessment.


        :return: The resource_errors_details of this AppAssessment.
        :rtype: AppAssessmentResourceErrorsDetails
        """
        return self._resource_errors_details

    @resource_errors_details.setter
    def resource_errors_details(self, resource_errors_details):
        """Sets the resource_errors_details of this AppAssessment.


        :param resource_errors_details: The resource_errors_details of this AppAssessment.
        :type resource_errors_details: AppAssessmentResourceErrorsDetails
        """

        self._resource_errors_details = resource_errors_details

    @property
    def start_time(self):
        """Gets the start_time of this AppAssessment.


        :return: The start_time of this AppAssessment.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AppAssessment.


        :param start_time: The start_time of this AppAssessment.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def tags(self):
        """Gets the tags of this AppAssessment.


        :return: The tags of this AppAssessment.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AppAssessment.


        :param tags: The tags of this AppAssessment.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def version_name(self):
        """Gets the version_name of this AppAssessment.


        :return: The version_name of this AppAssessment.
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this AppAssessment.


        :param version_name: The version_name of this AppAssessment.
        :type version_name: str
        """

        self._version_name = version_name
