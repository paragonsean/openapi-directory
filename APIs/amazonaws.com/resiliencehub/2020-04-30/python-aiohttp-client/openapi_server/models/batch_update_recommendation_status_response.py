# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchUpdateRecommendationStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_arn: str=None, failed_entries: List=None, successful_entries: List=None):
        """BatchUpdateRecommendationStatusResponse - a model defined in OpenAPI

        :param app_arn: The app_arn of this BatchUpdateRecommendationStatusResponse.
        :param failed_entries: The failed_entries of this BatchUpdateRecommendationStatusResponse.
        :param successful_entries: The successful_entries of this BatchUpdateRecommendationStatusResponse.
        """
        self.openapi_types = {
            'app_arn': str,
            'failed_entries': List,
            'successful_entries': List
        }

        self.attribute_map = {
            'app_arn': 'appArn',
            'failed_entries': 'failedEntries',
            'successful_entries': 'successfulEntries'
        }

        self._app_arn = app_arn
        self._failed_entries = failed_entries
        self._successful_entries = successful_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateRecommendationStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateRecommendationStatusResponse of this BatchUpdateRecommendationStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_arn(self):
        """Gets the app_arn of this BatchUpdateRecommendationStatusResponse.


        :return: The app_arn of this BatchUpdateRecommendationStatusResponse.
        :rtype: str
        """
        return self._app_arn

    @app_arn.setter
    def app_arn(self, app_arn):
        """Sets the app_arn of this BatchUpdateRecommendationStatusResponse.


        :param app_arn: The app_arn of this BatchUpdateRecommendationStatusResponse.
        :type app_arn: str
        """
        if app_arn is None:
            raise ValueError("Invalid value for `app_arn`, must not be `None`")

        self._app_arn = app_arn

    @property
    def failed_entries(self):
        """Gets the failed_entries of this BatchUpdateRecommendationStatusResponse.


        :return: The failed_entries of this BatchUpdateRecommendationStatusResponse.
        :rtype: List
        """
        return self._failed_entries

    @failed_entries.setter
    def failed_entries(self, failed_entries):
        """Sets the failed_entries of this BatchUpdateRecommendationStatusResponse.


        :param failed_entries: The failed_entries of this BatchUpdateRecommendationStatusResponse.
        :type failed_entries: List
        """
        if failed_entries is None:
            raise ValueError("Invalid value for `failed_entries`, must not be `None`")

        self._failed_entries = failed_entries

    @property
    def successful_entries(self):
        """Gets the successful_entries of this BatchUpdateRecommendationStatusResponse.


        :return: The successful_entries of this BatchUpdateRecommendationStatusResponse.
        :rtype: List
        """
        return self._successful_entries

    @successful_entries.setter
    def successful_entries(self, successful_entries):
        """Sets the successful_entries of this BatchUpdateRecommendationStatusResponse.


        :param successful_entries: The successful_entries of this BatchUpdateRecommendationStatusResponse.
        :type successful_entries: List
        """
        if successful_entries is None:
            raise ValueError("Invalid value for `successful_entries`, must not be `None`")

        self._successful_entries = successful_entries
