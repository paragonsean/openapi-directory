# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_assessment_schedule_type import AppAssessmentScheduleType
from openapi_server.models.app_compliance_status_type import AppComplianceStatusType
from openapi_server.models.app_drift_status_type import AppDriftStatusType
from openapi_server.models.app_permission_model import AppPermissionModel
from openapi_server.models.app_status_type import AppStatusType
from openapi_server import util


class App(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_arn: str=None, assessment_schedule: AppAssessmentScheduleType=None, compliance_status: AppComplianceStatusType=None, creation_time: datetime=None, description: str=None, drift_status: AppDriftStatusType=None, event_subscriptions: List=None, last_app_compliance_evaluation_time: datetime=None, last_drift_evaluation_time: datetime=None, last_resiliency_score_evaluation_time: datetime=None, name: str=None, permission_model: AppPermissionModel=None, policy_arn: str=None, resiliency_score: float=None, status: AppStatusType=None, tags: Dict=None):
        """App - a model defined in OpenAPI

        :param app_arn: The app_arn of this App.
        :param assessment_schedule: The assessment_schedule of this App.
        :param compliance_status: The compliance_status of this App.
        :param creation_time: The creation_time of this App.
        :param description: The description of this App.
        :param drift_status: The drift_status of this App.
        :param event_subscriptions: The event_subscriptions of this App.
        :param last_app_compliance_evaluation_time: The last_app_compliance_evaluation_time of this App.
        :param last_drift_evaluation_time: The last_drift_evaluation_time of this App.
        :param last_resiliency_score_evaluation_time: The last_resiliency_score_evaluation_time of this App.
        :param name: The name of this App.
        :param permission_model: The permission_model of this App.
        :param policy_arn: The policy_arn of this App.
        :param resiliency_score: The resiliency_score of this App.
        :param status: The status of this App.
        :param tags: The tags of this App.
        """
        self.openapi_types = {
            'app_arn': str,
            'assessment_schedule': AppAssessmentScheduleType,
            'compliance_status': AppComplianceStatusType,
            'creation_time': datetime,
            'description': str,
            'drift_status': AppDriftStatusType,
            'event_subscriptions': List,
            'last_app_compliance_evaluation_time': datetime,
            'last_drift_evaluation_time': datetime,
            'last_resiliency_score_evaluation_time': datetime,
            'name': str,
            'permission_model': AppPermissionModel,
            'policy_arn': str,
            'resiliency_score': float,
            'status': AppStatusType,
            'tags': Dict
        }

        self.attribute_map = {
            'app_arn': 'appArn',
            'assessment_schedule': 'assessmentSchedule',
            'compliance_status': 'complianceStatus',
            'creation_time': 'creationTime',
            'description': 'description',
            'drift_status': 'driftStatus',
            'event_subscriptions': 'eventSubscriptions',
            'last_app_compliance_evaluation_time': 'lastAppComplianceEvaluationTime',
            'last_drift_evaluation_time': 'lastDriftEvaluationTime',
            'last_resiliency_score_evaluation_time': 'lastResiliencyScoreEvaluationTime',
            'name': 'name',
            'permission_model': 'permissionModel',
            'policy_arn': 'policyArn',
            'resiliency_score': 'resiliencyScore',
            'status': 'status',
            'tags': 'tags'
        }

        self._app_arn = app_arn
        self._assessment_schedule = assessment_schedule
        self._compliance_status = compliance_status
        self._creation_time = creation_time
        self._description = description
        self._drift_status = drift_status
        self._event_subscriptions = event_subscriptions
        self._last_app_compliance_evaluation_time = last_app_compliance_evaluation_time
        self._last_drift_evaluation_time = last_drift_evaluation_time
        self._last_resiliency_score_evaluation_time = last_resiliency_score_evaluation_time
        self._name = name
        self._permission_model = permission_model
        self._policy_arn = policy_arn
        self._resiliency_score = resiliency_score
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'App':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The App of this App.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_arn(self):
        """Gets the app_arn of this App.


        :return: The app_arn of this App.
        :rtype: str
        """
        return self._app_arn

    @app_arn.setter
    def app_arn(self, app_arn):
        """Sets the app_arn of this App.


        :param app_arn: The app_arn of this App.
        :type app_arn: str
        """
        if app_arn is None:
            raise ValueError("Invalid value for `app_arn`, must not be `None`")

        self._app_arn = app_arn

    @property
    def assessment_schedule(self):
        """Gets the assessment_schedule of this App.


        :return: The assessment_schedule of this App.
        :rtype: AppAssessmentScheduleType
        """
        return self._assessment_schedule

    @assessment_schedule.setter
    def assessment_schedule(self, assessment_schedule):
        """Sets the assessment_schedule of this App.


        :param assessment_schedule: The assessment_schedule of this App.
        :type assessment_schedule: AppAssessmentScheduleType
        """

        self._assessment_schedule = assessment_schedule

    @property
    def compliance_status(self):
        """Gets the compliance_status of this App.


        :return: The compliance_status of this App.
        :rtype: AppComplianceStatusType
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this App.


        :param compliance_status: The compliance_status of this App.
        :type compliance_status: AppComplianceStatusType
        """

        self._compliance_status = compliance_status

    @property
    def creation_time(self):
        """Gets the creation_time of this App.


        :return: The creation_time of this App.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this App.


        :param creation_time: The creation_time of this App.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this App.


        :return: The description of this App.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this App.


        :param description: The description of this App.
        :type description: str
        """

        self._description = description

    @property
    def drift_status(self):
        """Gets the drift_status of this App.


        :return: The drift_status of this App.
        :rtype: AppDriftStatusType
        """
        return self._drift_status

    @drift_status.setter
    def drift_status(self, drift_status):
        """Sets the drift_status of this App.


        :param drift_status: The drift_status of this App.
        :type drift_status: AppDriftStatusType
        """

        self._drift_status = drift_status

    @property
    def event_subscriptions(self):
        """Gets the event_subscriptions of this App.


        :return: The event_subscriptions of this App.
        :rtype: List
        """
        return self._event_subscriptions

    @event_subscriptions.setter
    def event_subscriptions(self, event_subscriptions):
        """Sets the event_subscriptions of this App.


        :param event_subscriptions: The event_subscriptions of this App.
        :type event_subscriptions: List
        """

        self._event_subscriptions = event_subscriptions

    @property
    def last_app_compliance_evaluation_time(self):
        """Gets the last_app_compliance_evaluation_time of this App.


        :return: The last_app_compliance_evaluation_time of this App.
        :rtype: datetime
        """
        return self._last_app_compliance_evaluation_time

    @last_app_compliance_evaluation_time.setter
    def last_app_compliance_evaluation_time(self, last_app_compliance_evaluation_time):
        """Sets the last_app_compliance_evaluation_time of this App.


        :param last_app_compliance_evaluation_time: The last_app_compliance_evaluation_time of this App.
        :type last_app_compliance_evaluation_time: datetime
        """

        self._last_app_compliance_evaluation_time = last_app_compliance_evaluation_time

    @property
    def last_drift_evaluation_time(self):
        """Gets the last_drift_evaluation_time of this App.


        :return: The last_drift_evaluation_time of this App.
        :rtype: datetime
        """
        return self._last_drift_evaluation_time

    @last_drift_evaluation_time.setter
    def last_drift_evaluation_time(self, last_drift_evaluation_time):
        """Sets the last_drift_evaluation_time of this App.


        :param last_drift_evaluation_time: The last_drift_evaluation_time of this App.
        :type last_drift_evaluation_time: datetime
        """

        self._last_drift_evaluation_time = last_drift_evaluation_time

    @property
    def last_resiliency_score_evaluation_time(self):
        """Gets the last_resiliency_score_evaluation_time of this App.


        :return: The last_resiliency_score_evaluation_time of this App.
        :rtype: datetime
        """
        return self._last_resiliency_score_evaluation_time

    @last_resiliency_score_evaluation_time.setter
    def last_resiliency_score_evaluation_time(self, last_resiliency_score_evaluation_time):
        """Sets the last_resiliency_score_evaluation_time of this App.


        :param last_resiliency_score_evaluation_time: The last_resiliency_score_evaluation_time of this App.
        :type last_resiliency_score_evaluation_time: datetime
        """

        self._last_resiliency_score_evaluation_time = last_resiliency_score_evaluation_time

    @property
    def name(self):
        """Gets the name of this App.


        :return: The name of this App.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.


        :param name: The name of this App.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def permission_model(self):
        """Gets the permission_model of this App.


        :return: The permission_model of this App.
        :rtype: AppPermissionModel
        """
        return self._permission_model

    @permission_model.setter
    def permission_model(self, permission_model):
        """Sets the permission_model of this App.


        :param permission_model: The permission_model of this App.
        :type permission_model: AppPermissionModel
        """

        self._permission_model = permission_model

    @property
    def policy_arn(self):
        """Gets the policy_arn of this App.


        :return: The policy_arn of this App.
        :rtype: str
        """
        return self._policy_arn

    @policy_arn.setter
    def policy_arn(self, policy_arn):
        """Sets the policy_arn of this App.


        :param policy_arn: The policy_arn of this App.
        :type policy_arn: str
        """

        self._policy_arn = policy_arn

    @property
    def resiliency_score(self):
        """Gets the resiliency_score of this App.


        :return: The resiliency_score of this App.
        :rtype: float
        """
        return self._resiliency_score

    @resiliency_score.setter
    def resiliency_score(self, resiliency_score):
        """Sets the resiliency_score of this App.


        :param resiliency_score: The resiliency_score of this App.
        :type resiliency_score: float
        """

        self._resiliency_score = resiliency_score

    @property
    def status(self):
        """Gets the status of this App.


        :return: The status of this App.
        :rtype: AppStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this App.


        :param status: The status of this App.
        :type status: AppStatusType
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this App.


        :return: The tags of this App.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this App.


        :param tags: The tags of this App.
        :type tags: Dict
        """

        self._tags = tags
