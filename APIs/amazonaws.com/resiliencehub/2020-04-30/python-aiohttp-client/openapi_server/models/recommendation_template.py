# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_template_status import RecommendationTemplateStatus
from openapi_server.models.recommendation_template_templates_location import RecommendationTemplateTemplatesLocation
from openapi_server.models.template_format import TemplateFormat
from openapi_server import util


class RecommendationTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_arn: str=None, assessment_arn: str=None, end_time: datetime=None, format: TemplateFormat=None, message: str=None, name: str=None, needs_replacements: bool=None, recommendation_ids: List=None, recommendation_template_arn: str=None, recommendation_types: List=None, start_time: datetime=None, status: RecommendationTemplateStatus=None, tags: Dict=None, templates_location: RecommendationTemplateTemplatesLocation=None):
        """RecommendationTemplate - a model defined in OpenAPI

        :param app_arn: The app_arn of this RecommendationTemplate.
        :param assessment_arn: The assessment_arn of this RecommendationTemplate.
        :param end_time: The end_time of this RecommendationTemplate.
        :param format: The format of this RecommendationTemplate.
        :param message: The message of this RecommendationTemplate.
        :param name: The name of this RecommendationTemplate.
        :param needs_replacements: The needs_replacements of this RecommendationTemplate.
        :param recommendation_ids: The recommendation_ids of this RecommendationTemplate.
        :param recommendation_template_arn: The recommendation_template_arn of this RecommendationTemplate.
        :param recommendation_types: The recommendation_types of this RecommendationTemplate.
        :param start_time: The start_time of this RecommendationTemplate.
        :param status: The status of this RecommendationTemplate.
        :param tags: The tags of this RecommendationTemplate.
        :param templates_location: The templates_location of this RecommendationTemplate.
        """
        self.openapi_types = {
            'app_arn': str,
            'assessment_arn': str,
            'end_time': datetime,
            'format': TemplateFormat,
            'message': str,
            'name': str,
            'needs_replacements': bool,
            'recommendation_ids': List,
            'recommendation_template_arn': str,
            'recommendation_types': List,
            'start_time': datetime,
            'status': RecommendationTemplateStatus,
            'tags': Dict,
            'templates_location': RecommendationTemplateTemplatesLocation
        }

        self.attribute_map = {
            'app_arn': 'appArn',
            'assessment_arn': 'assessmentArn',
            'end_time': 'endTime',
            'format': 'format',
            'message': 'message',
            'name': 'name',
            'needs_replacements': 'needsReplacements',
            'recommendation_ids': 'recommendationIds',
            'recommendation_template_arn': 'recommendationTemplateArn',
            'recommendation_types': 'recommendationTypes',
            'start_time': 'startTime',
            'status': 'status',
            'tags': 'tags',
            'templates_location': 'templatesLocation'
        }

        self._app_arn = app_arn
        self._assessment_arn = assessment_arn
        self._end_time = end_time
        self._format = format
        self._message = message
        self._name = name
        self._needs_replacements = needs_replacements
        self._recommendation_ids = recommendation_ids
        self._recommendation_template_arn = recommendation_template_arn
        self._recommendation_types = recommendation_types
        self._start_time = start_time
        self._status = status
        self._tags = tags
        self._templates_location = templates_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationTemplate of this RecommendationTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_arn(self):
        """Gets the app_arn of this RecommendationTemplate.


        :return: The app_arn of this RecommendationTemplate.
        :rtype: str
        """
        return self._app_arn

    @app_arn.setter
    def app_arn(self, app_arn):
        """Sets the app_arn of this RecommendationTemplate.


        :param app_arn: The app_arn of this RecommendationTemplate.
        :type app_arn: str
        """

        self._app_arn = app_arn

    @property
    def assessment_arn(self):
        """Gets the assessment_arn of this RecommendationTemplate.


        :return: The assessment_arn of this RecommendationTemplate.
        :rtype: str
        """
        return self._assessment_arn

    @assessment_arn.setter
    def assessment_arn(self, assessment_arn):
        """Sets the assessment_arn of this RecommendationTemplate.


        :param assessment_arn: The assessment_arn of this RecommendationTemplate.
        :type assessment_arn: str
        """
        if assessment_arn is None:
            raise ValueError("Invalid value for `assessment_arn`, must not be `None`")

        self._assessment_arn = assessment_arn

    @property
    def end_time(self):
        """Gets the end_time of this RecommendationTemplate.


        :return: The end_time of this RecommendationTemplate.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RecommendationTemplate.


        :param end_time: The end_time of this RecommendationTemplate.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def format(self):
        """Gets the format of this RecommendationTemplate.


        :return: The format of this RecommendationTemplate.
        :rtype: TemplateFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this RecommendationTemplate.


        :param format: The format of this RecommendationTemplate.
        :type format: TemplateFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def message(self):
        """Gets the message of this RecommendationTemplate.


        :return: The message of this RecommendationTemplate.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RecommendationTemplate.


        :param message: The message of this RecommendationTemplate.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this RecommendationTemplate.


        :return: The name of this RecommendationTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationTemplate.


        :param name: The name of this RecommendationTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def needs_replacements(self):
        """Gets the needs_replacements of this RecommendationTemplate.


        :return: The needs_replacements of this RecommendationTemplate.
        :rtype: bool
        """
        return self._needs_replacements

    @needs_replacements.setter
    def needs_replacements(self, needs_replacements):
        """Sets the needs_replacements of this RecommendationTemplate.


        :param needs_replacements: The needs_replacements of this RecommendationTemplate.
        :type needs_replacements: bool
        """

        self._needs_replacements = needs_replacements

    @property
    def recommendation_ids(self):
        """Gets the recommendation_ids of this RecommendationTemplate.


        :return: The recommendation_ids of this RecommendationTemplate.
        :rtype: List
        """
        return self._recommendation_ids

    @recommendation_ids.setter
    def recommendation_ids(self, recommendation_ids):
        """Sets the recommendation_ids of this RecommendationTemplate.


        :param recommendation_ids: The recommendation_ids of this RecommendationTemplate.
        :type recommendation_ids: List
        """

        self._recommendation_ids = recommendation_ids

    @property
    def recommendation_template_arn(self):
        """Gets the recommendation_template_arn of this RecommendationTemplate.


        :return: The recommendation_template_arn of this RecommendationTemplate.
        :rtype: str
        """
        return self._recommendation_template_arn

    @recommendation_template_arn.setter
    def recommendation_template_arn(self, recommendation_template_arn):
        """Sets the recommendation_template_arn of this RecommendationTemplate.


        :param recommendation_template_arn: The recommendation_template_arn of this RecommendationTemplate.
        :type recommendation_template_arn: str
        """
        if recommendation_template_arn is None:
            raise ValueError("Invalid value for `recommendation_template_arn`, must not be `None`")

        self._recommendation_template_arn = recommendation_template_arn

    @property
    def recommendation_types(self):
        """Gets the recommendation_types of this RecommendationTemplate.


        :return: The recommendation_types of this RecommendationTemplate.
        :rtype: List
        """
        return self._recommendation_types

    @recommendation_types.setter
    def recommendation_types(self, recommendation_types):
        """Sets the recommendation_types of this RecommendationTemplate.


        :param recommendation_types: The recommendation_types of this RecommendationTemplate.
        :type recommendation_types: List
        """
        if recommendation_types is None:
            raise ValueError("Invalid value for `recommendation_types`, must not be `None`")

        self._recommendation_types = recommendation_types

    @property
    def start_time(self):
        """Gets the start_time of this RecommendationTemplate.


        :return: The start_time of this RecommendationTemplate.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RecommendationTemplate.


        :param start_time: The start_time of this RecommendationTemplate.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this RecommendationTemplate.


        :return: The status of this RecommendationTemplate.
        :rtype: RecommendationTemplateStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RecommendationTemplate.


        :param status: The status of this RecommendationTemplate.
        :type status: RecommendationTemplateStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this RecommendationTemplate.


        :return: The tags of this RecommendationTemplate.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RecommendationTemplate.


        :param tags: The tags of this RecommendationTemplate.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def templates_location(self):
        """Gets the templates_location of this RecommendationTemplate.


        :return: The templates_location of this RecommendationTemplate.
        :rtype: RecommendationTemplateTemplatesLocation
        """
        return self._templates_location

    @templates_location.setter
    def templates_location(self, templates_location):
        """Sets the templates_location of this RecommendationTemplate.


        :param templates_location: The templates_location of this RecommendationTemplate.
        :type templates_location: RecommendationTemplateTemplatesLocation
        """

        self._templates_location = templates_location
