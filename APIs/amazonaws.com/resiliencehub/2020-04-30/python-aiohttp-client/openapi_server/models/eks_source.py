# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EksSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eks_cluster_arn: str=None, namespaces: List=None):
        """EksSource - a model defined in OpenAPI

        :param eks_cluster_arn: The eks_cluster_arn of this EksSource.
        :param namespaces: The namespaces of this EksSource.
        """
        self.openapi_types = {
            'eks_cluster_arn': str,
            'namespaces': List
        }

        self.attribute_map = {
            'eks_cluster_arn': 'eksClusterArn',
            'namespaces': 'namespaces'
        }

        self._eks_cluster_arn = eks_cluster_arn
        self._namespaces = namespaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EksSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EksSource of this EksSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eks_cluster_arn(self):
        """Gets the eks_cluster_arn of this EksSource.


        :return: The eks_cluster_arn of this EksSource.
        :rtype: str
        """
        return self._eks_cluster_arn

    @eks_cluster_arn.setter
    def eks_cluster_arn(self, eks_cluster_arn):
        """Sets the eks_cluster_arn of this EksSource.


        :param eks_cluster_arn: The eks_cluster_arn of this EksSource.
        :type eks_cluster_arn: str
        """
        if eks_cluster_arn is None:
            raise ValueError("Invalid value for `eks_cluster_arn`, must not be `None`")

        self._eks_cluster_arn = eks_cluster_arn

    @property
    def namespaces(self):
        """Gets the namespaces of this EksSource.


        :return: The namespaces of this EksSource.
        :rtype: List
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this EksSource.


        :param namespaces: The namespaces of this EksSource.
        :type namespaces: List
        """
        if namespaces is None:
            raise ValueError("Invalid value for `namespaces`, must not be `None`")

        self._namespaces = namespaces
