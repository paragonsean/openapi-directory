# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogicalResourceId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eks_source_name: str=None, identifier: str=None, logical_stack_name: str=None, resource_group_name: str=None, terraform_source_name: str=None):
        """LogicalResourceId - a model defined in OpenAPI

        :param eks_source_name: The eks_source_name of this LogicalResourceId.
        :param identifier: The identifier of this LogicalResourceId.
        :param logical_stack_name: The logical_stack_name of this LogicalResourceId.
        :param resource_group_name: The resource_group_name of this LogicalResourceId.
        :param terraform_source_name: The terraform_source_name of this LogicalResourceId.
        """
        self.openapi_types = {
            'eks_source_name': str,
            'identifier': str,
            'logical_stack_name': str,
            'resource_group_name': str,
            'terraform_source_name': str
        }

        self.attribute_map = {
            'eks_source_name': 'eksSourceName',
            'identifier': 'identifier',
            'logical_stack_name': 'logicalStackName',
            'resource_group_name': 'resourceGroupName',
            'terraform_source_name': 'terraformSourceName'
        }

        self._eks_source_name = eks_source_name
        self._identifier = identifier
        self._logical_stack_name = logical_stack_name
        self._resource_group_name = resource_group_name
        self._terraform_source_name = terraform_source_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogicalResourceId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogicalResourceId of this LogicalResourceId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eks_source_name(self):
        """Gets the eks_source_name of this LogicalResourceId.


        :return: The eks_source_name of this LogicalResourceId.
        :rtype: str
        """
        return self._eks_source_name

    @eks_source_name.setter
    def eks_source_name(self, eks_source_name):
        """Sets the eks_source_name of this LogicalResourceId.


        :param eks_source_name: The eks_source_name of this LogicalResourceId.
        :type eks_source_name: str
        """

        self._eks_source_name = eks_source_name

    @property
    def identifier(self):
        """Gets the identifier of this LogicalResourceId.


        :return: The identifier of this LogicalResourceId.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this LogicalResourceId.


        :param identifier: The identifier of this LogicalResourceId.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def logical_stack_name(self):
        """Gets the logical_stack_name of this LogicalResourceId.


        :return: The logical_stack_name of this LogicalResourceId.
        :rtype: str
        """
        return self._logical_stack_name

    @logical_stack_name.setter
    def logical_stack_name(self, logical_stack_name):
        """Sets the logical_stack_name of this LogicalResourceId.


        :param logical_stack_name: The logical_stack_name of this LogicalResourceId.
        :type logical_stack_name: str
        """

        self._logical_stack_name = logical_stack_name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this LogicalResourceId.


        :return: The resource_group_name of this LogicalResourceId.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this LogicalResourceId.


        :param resource_group_name: The resource_group_name of this LogicalResourceId.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def terraform_source_name(self):
        """Gets the terraform_source_name of this LogicalResourceId.


        :return: The terraform_source_name of this LogicalResourceId.
        :rtype: str
        """
        return self._terraform_source_name

    @terraform_source_name.setter
    def terraform_source_name(self, terraform_source_name):
        """Sets the terraform_source_name of this LogicalResourceId.


        :param terraform_source_name: The terraform_source_name of this LogicalResourceId.
        :type terraform_source_name: str
        """

        self._terraform_source_name = terraform_source_name
