# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.difference_type import DifferenceType
from openapi_server.models.drift_type import DriftType
from openapi_server import util


class ComplianceDrift(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_reference_id: str=None, actual_value: Dict=None, app_id: str=None, app_version: str=None, diff_type: DifferenceType=None, drift_type: DriftType=None, entity_id: str=None, entity_type: str=None, expected_reference_id: str=None, expected_value: Dict=None):
        """ComplianceDrift - a model defined in OpenAPI

        :param actual_reference_id: The actual_reference_id of this ComplianceDrift.
        :param actual_value: The actual_value of this ComplianceDrift.
        :param app_id: The app_id of this ComplianceDrift.
        :param app_version: The app_version of this ComplianceDrift.
        :param diff_type: The diff_type of this ComplianceDrift.
        :param drift_type: The drift_type of this ComplianceDrift.
        :param entity_id: The entity_id of this ComplianceDrift.
        :param entity_type: The entity_type of this ComplianceDrift.
        :param expected_reference_id: The expected_reference_id of this ComplianceDrift.
        :param expected_value: The expected_value of this ComplianceDrift.
        """
        self.openapi_types = {
            'actual_reference_id': str,
            'actual_value': Dict,
            'app_id': str,
            'app_version': str,
            'diff_type': DifferenceType,
            'drift_type': DriftType,
            'entity_id': str,
            'entity_type': str,
            'expected_reference_id': str,
            'expected_value': Dict
        }

        self.attribute_map = {
            'actual_reference_id': 'actualReferenceId',
            'actual_value': 'actualValue',
            'app_id': 'appId',
            'app_version': 'appVersion',
            'diff_type': 'diffType',
            'drift_type': 'driftType',
            'entity_id': 'entityId',
            'entity_type': 'entityType',
            'expected_reference_id': 'expectedReferenceId',
            'expected_value': 'expectedValue'
        }

        self._actual_reference_id = actual_reference_id
        self._actual_value = actual_value
        self._app_id = app_id
        self._app_version = app_version
        self._diff_type = diff_type
        self._drift_type = drift_type
        self._entity_id = entity_id
        self._entity_type = entity_type
        self._expected_reference_id = expected_reference_id
        self._expected_value = expected_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceDrift':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceDrift of this ComplianceDrift.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_reference_id(self):
        """Gets the actual_reference_id of this ComplianceDrift.


        :return: The actual_reference_id of this ComplianceDrift.
        :rtype: str
        """
        return self._actual_reference_id

    @actual_reference_id.setter
    def actual_reference_id(self, actual_reference_id):
        """Sets the actual_reference_id of this ComplianceDrift.


        :param actual_reference_id: The actual_reference_id of this ComplianceDrift.
        :type actual_reference_id: str
        """

        self._actual_reference_id = actual_reference_id

    @property
    def actual_value(self):
        """Gets the actual_value of this ComplianceDrift.


        :return: The actual_value of this ComplianceDrift.
        :rtype: Dict
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this ComplianceDrift.


        :param actual_value: The actual_value of this ComplianceDrift.
        :type actual_value: Dict
        """

        self._actual_value = actual_value

    @property
    def app_id(self):
        """Gets the app_id of this ComplianceDrift.


        :return: The app_id of this ComplianceDrift.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ComplianceDrift.


        :param app_id: The app_id of this ComplianceDrift.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_version(self):
        """Gets the app_version of this ComplianceDrift.


        :return: The app_version of this ComplianceDrift.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this ComplianceDrift.


        :param app_version: The app_version of this ComplianceDrift.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def diff_type(self):
        """Gets the diff_type of this ComplianceDrift.


        :return: The diff_type of this ComplianceDrift.
        :rtype: DifferenceType
        """
        return self._diff_type

    @diff_type.setter
    def diff_type(self, diff_type):
        """Sets the diff_type of this ComplianceDrift.


        :param diff_type: The diff_type of this ComplianceDrift.
        :type diff_type: DifferenceType
        """

        self._diff_type = diff_type

    @property
    def drift_type(self):
        """Gets the drift_type of this ComplianceDrift.


        :return: The drift_type of this ComplianceDrift.
        :rtype: DriftType
        """
        return self._drift_type

    @drift_type.setter
    def drift_type(self, drift_type):
        """Sets the drift_type of this ComplianceDrift.


        :param drift_type: The drift_type of this ComplianceDrift.
        :type drift_type: DriftType
        """

        self._drift_type = drift_type

    @property
    def entity_id(self):
        """Gets the entity_id of this ComplianceDrift.


        :return: The entity_id of this ComplianceDrift.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ComplianceDrift.


        :param entity_id: The entity_id of this ComplianceDrift.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this ComplianceDrift.


        :return: The entity_type of this ComplianceDrift.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this ComplianceDrift.


        :param entity_type: The entity_type of this ComplianceDrift.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def expected_reference_id(self):
        """Gets the expected_reference_id of this ComplianceDrift.


        :return: The expected_reference_id of this ComplianceDrift.
        :rtype: str
        """
        return self._expected_reference_id

    @expected_reference_id.setter
    def expected_reference_id(self, expected_reference_id):
        """Sets the expected_reference_id of this ComplianceDrift.


        :param expected_reference_id: The expected_reference_id of this ComplianceDrift.
        :type expected_reference_id: str
        """

        self._expected_reference_id = expected_reference_id

    @property
    def expected_value(self):
        """Gets the expected_value of this ComplianceDrift.


        :return: The expected_value of this ComplianceDrift.
        :rtype: Dict
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this ComplianceDrift.


        :param expected_value: The expected_value of this ComplianceDrift.
        :type expected_value: Dict
        """

        self._expected_value = expected_value
