# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.physical_identifier_type import PhysicalIdentifierType
from openapi_server import util


class PhysicalResourceId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws_account_id: str=None, aws_region: str=None, identifier: str=None, type: PhysicalIdentifierType=None):
        """PhysicalResourceId - a model defined in OpenAPI

        :param aws_account_id: The aws_account_id of this PhysicalResourceId.
        :param aws_region: The aws_region of this PhysicalResourceId.
        :param identifier: The identifier of this PhysicalResourceId.
        :param type: The type of this PhysicalResourceId.
        """
        self.openapi_types = {
            'aws_account_id': str,
            'aws_region': str,
            'identifier': str,
            'type': PhysicalIdentifierType
        }

        self.attribute_map = {
            'aws_account_id': 'awsAccountId',
            'aws_region': 'awsRegion',
            'identifier': 'identifier',
            'type': 'type'
        }

        self._aws_account_id = aws_account_id
        self._aws_region = aws_region
        self._identifier = identifier
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhysicalResourceId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhysicalResourceId of this PhysicalResourceId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this PhysicalResourceId.


        :return: The aws_account_id of this PhysicalResourceId.
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this PhysicalResourceId.


        :param aws_account_id: The aws_account_id of this PhysicalResourceId.
        :type aws_account_id: str
        """

        self._aws_account_id = aws_account_id

    @property
    def aws_region(self):
        """Gets the aws_region of this PhysicalResourceId.


        :return: The aws_region of this PhysicalResourceId.
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this PhysicalResourceId.


        :param aws_region: The aws_region of this PhysicalResourceId.
        :type aws_region: str
        """

        self._aws_region = aws_region

    @property
    def identifier(self):
        """Gets the identifier of this PhysicalResourceId.


        :return: The identifier of this PhysicalResourceId.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PhysicalResourceId.


        :param identifier: The identifier of this PhysicalResourceId.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def type(self):
        """Gets the type of this PhysicalResourceId.


        :return: The type of this PhysicalResourceId.
        :rtype: PhysicalIdentifierType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhysicalResourceId.


        :param type: The type of this PhysicalResourceId.
        :type type: PhysicalIdentifierType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
