# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListAppVersionResourcesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, physical_resources: List=None, resolution_id: str=None):
        """ListAppVersionResourcesResponse - a model defined in OpenAPI

        :param next_token: The next_token of this ListAppVersionResourcesResponse.
        :param physical_resources: The physical_resources of this ListAppVersionResourcesResponse.
        :param resolution_id: The resolution_id of this ListAppVersionResourcesResponse.
        """
        self.openapi_types = {
            'next_token': str,
            'physical_resources': List,
            'resolution_id': str
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'physical_resources': 'physicalResources',
            'resolution_id': 'resolutionId'
        }

        self._next_token = next_token
        self._physical_resources = physical_resources
        self._resolution_id = resolution_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAppVersionResourcesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAppVersionResourcesResponse of this ListAppVersionResourcesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListAppVersionResourcesResponse.


        :return: The next_token of this ListAppVersionResourcesResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAppVersionResourcesResponse.


        :param next_token: The next_token of this ListAppVersionResourcesResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def physical_resources(self):
        """Gets the physical_resources of this ListAppVersionResourcesResponse.


        :return: The physical_resources of this ListAppVersionResourcesResponse.
        :rtype: List
        """
        return self._physical_resources

    @physical_resources.setter
    def physical_resources(self, physical_resources):
        """Sets the physical_resources of this ListAppVersionResourcesResponse.


        :param physical_resources: The physical_resources of this ListAppVersionResourcesResponse.
        :type physical_resources: List
        """
        if physical_resources is None:
            raise ValueError("Invalid value for `physical_resources`, must not be `None`")

        self._physical_resources = physical_resources

    @property
    def resolution_id(self):
        """Gets the resolution_id of this ListAppVersionResourcesResponse.


        :return: The resolution_id of this ListAppVersionResourcesResponse.
        :rtype: str
        """
        return self._resolution_id

    @resolution_id.setter
    def resolution_id(self, resolution_id):
        """Sets the resolution_id of this ListAppVersionResourcesResponse.


        :param resolution_id: The resolution_id of this ListAppVersionResourcesResponse.
        :type resolution_id: str
        """
        if resolution_id is None:
            raise ValueError("Invalid value for `resolution_id`, must not be `None`")

        self._resolution_id = resolution_id
