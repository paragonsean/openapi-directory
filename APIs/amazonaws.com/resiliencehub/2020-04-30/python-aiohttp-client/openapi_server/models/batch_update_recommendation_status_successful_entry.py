# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exclude_recommendation_reason import ExcludeRecommendationReason
from openapi_server.models.update_recommendation_status_request_entry_item import UpdateRecommendationStatusRequestEntryItem
from openapi_server import util


class BatchUpdateRecommendationStatusSuccessfulEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_id: str=None, exclude_reason: ExcludeRecommendationReason=None, excluded: bool=None, item: UpdateRecommendationStatusRequestEntryItem=None, reference_id: str=None):
        """BatchUpdateRecommendationStatusSuccessfulEntry - a model defined in OpenAPI

        :param entry_id: The entry_id of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :param exclude_reason: The exclude_reason of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :param excluded: The excluded of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :param item: The item of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :param reference_id: The reference_id of this BatchUpdateRecommendationStatusSuccessfulEntry.
        """
        self.openapi_types = {
            'entry_id': str,
            'exclude_reason': ExcludeRecommendationReason,
            'excluded': bool,
            'item': UpdateRecommendationStatusRequestEntryItem,
            'reference_id': str
        }

        self.attribute_map = {
            'entry_id': 'entryId',
            'exclude_reason': 'excludeReason',
            'excluded': 'excluded',
            'item': 'item',
            'reference_id': 'referenceId'
        }

        self._entry_id = entry_id
        self._exclude_reason = exclude_reason
        self._excluded = excluded
        self._item = item
        self._reference_id = reference_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateRecommendationStatusSuccessfulEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateRecommendationStatusSuccessfulEntry of this BatchUpdateRecommendationStatusSuccessfulEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_id(self):
        """Gets the entry_id of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :return: The entry_id of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :param entry_id: The entry_id of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :type entry_id: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")

        self._entry_id = entry_id

    @property
    def exclude_reason(self):
        """Gets the exclude_reason of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :return: The exclude_reason of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :rtype: ExcludeRecommendationReason
        """
        return self._exclude_reason

    @exclude_reason.setter
    def exclude_reason(self, exclude_reason):
        """Sets the exclude_reason of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :param exclude_reason: The exclude_reason of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :type exclude_reason: ExcludeRecommendationReason
        """

        self._exclude_reason = exclude_reason

    @property
    def excluded(self):
        """Gets the excluded of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :return: The excluded of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :param excluded: The excluded of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :type excluded: bool
        """
        if excluded is None:
            raise ValueError("Invalid value for `excluded`, must not be `None`")

        self._excluded = excluded

    @property
    def item(self):
        """Gets the item of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :return: The item of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :rtype: UpdateRecommendationStatusRequestEntryItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :param item: The item of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :type item: UpdateRecommendationStatusRequestEntryItem
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def reference_id(self):
        """Gets the reference_id of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :return: The reference_id of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this BatchUpdateRecommendationStatusSuccessfulEntry.


        :param reference_id: The reference_id of this BatchUpdateRecommendationStatusSuccessfulEntry.
        :type reference_id: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")

        self._reference_id = reference_id
