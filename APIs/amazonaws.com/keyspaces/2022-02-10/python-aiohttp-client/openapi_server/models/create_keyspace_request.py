# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_keyspace_request_replication_specification import CreateKeyspaceRequestReplicationSpecification
from openapi_server import util


class CreateKeyspaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyspace_name: str=None, tags: List=None, replication_specification: CreateKeyspaceRequestReplicationSpecification=None):
        """CreateKeyspaceRequest - a model defined in OpenAPI

        :param keyspace_name: The keyspace_name of this CreateKeyspaceRequest.
        :param tags: The tags of this CreateKeyspaceRequest.
        :param replication_specification: The replication_specification of this CreateKeyspaceRequest.
        """
        self.openapi_types = {
            'keyspace_name': str,
            'tags': List,
            'replication_specification': CreateKeyspaceRequestReplicationSpecification
        }

        self.attribute_map = {
            'keyspace_name': 'keyspaceName',
            'tags': 'tags',
            'replication_specification': 'replicationSpecification'
        }

        self._keyspace_name = keyspace_name
        self._tags = tags
        self._replication_specification = replication_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeyspaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKeyspaceRequest of this CreateKeyspaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyspace_name(self):
        """Gets the keyspace_name of this CreateKeyspaceRequest.


        :return: The keyspace_name of this CreateKeyspaceRequest.
        :rtype: str
        """
        return self._keyspace_name

    @keyspace_name.setter
    def keyspace_name(self, keyspace_name):
        """Sets the keyspace_name of this CreateKeyspaceRequest.


        :param keyspace_name: The keyspace_name of this CreateKeyspaceRequest.
        :type keyspace_name: str
        """
        if keyspace_name is None:
            raise ValueError("Invalid value for `keyspace_name`, must not be `None`")

        self._keyspace_name = keyspace_name

    @property
    def tags(self):
        """Gets the tags of this CreateKeyspaceRequest.


        :return: The tags of this CreateKeyspaceRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateKeyspaceRequest.


        :param tags: The tags of this CreateKeyspaceRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def replication_specification(self):
        """Gets the replication_specification of this CreateKeyspaceRequest.


        :return: The replication_specification of this CreateKeyspaceRequest.
        :rtype: CreateKeyspaceRequestReplicationSpecification
        """
        return self._replication_specification

    @replication_specification.setter
    def replication_specification(self, replication_specification):
        """Sets the replication_specification of this CreateKeyspaceRequest.


        :param replication_specification: The replication_specification of this CreateKeyspaceRequest.
        :type replication_specification: CreateKeyspaceRequestReplicationSpecification
        """

        self._replication_specification = replication_specification
