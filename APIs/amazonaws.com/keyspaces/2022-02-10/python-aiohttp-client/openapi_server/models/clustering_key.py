# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class ClusteringKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, order_by: SortOrder=None):
        """ClusteringKey - a model defined in OpenAPI

        :param name: The name of this ClusteringKey.
        :param order_by: The order_by of this ClusteringKey.
        """
        self.openapi_types = {
            'name': str,
            'order_by': SortOrder
        }

        self.attribute_map = {
            'name': 'name',
            'order_by': 'orderBy'
        }

        self._name = name
        self._order_by = order_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusteringKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusteringKey of this ClusteringKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ClusteringKey.


        :return: The name of this ClusteringKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusteringKey.


        :param name: The name of this ClusteringKey.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order_by(self):
        """Gets the order_by of this ClusteringKey.


        :return: The order_by of this ClusteringKey.
        :rtype: SortOrder
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ClusteringKey.


        :param order_by: The order_by of this ClusteringKey.
        :type order_by: SortOrder
        """
        if order_by is None:
            raise ValueError("Invalid value for `order_by`, must not be `None`")

        self._order_by = order_by
