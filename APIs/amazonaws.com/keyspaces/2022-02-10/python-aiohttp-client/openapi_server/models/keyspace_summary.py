# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rs import Rs
from openapi_server import util


class KeyspaceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyspace_name: str=None, resource_arn: str=None, replication_strategy: Rs=None, replication_regions: List=None):
        """KeyspaceSummary - a model defined in OpenAPI

        :param keyspace_name: The keyspace_name of this KeyspaceSummary.
        :param resource_arn: The resource_arn of this KeyspaceSummary.
        :param replication_strategy: The replication_strategy of this KeyspaceSummary.
        :param replication_regions: The replication_regions of this KeyspaceSummary.
        """
        self.openapi_types = {
            'keyspace_name': str,
            'resource_arn': str,
            'replication_strategy': Rs,
            'replication_regions': List
        }

        self.attribute_map = {
            'keyspace_name': 'keyspaceName',
            'resource_arn': 'resourceArn',
            'replication_strategy': 'replicationStrategy',
            'replication_regions': 'replicationRegions'
        }

        self._keyspace_name = keyspace_name
        self._resource_arn = resource_arn
        self._replication_strategy = replication_strategy
        self._replication_regions = replication_regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyspaceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyspaceSummary of this KeyspaceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyspace_name(self):
        """Gets the keyspace_name of this KeyspaceSummary.


        :return: The keyspace_name of this KeyspaceSummary.
        :rtype: str
        """
        return self._keyspace_name

    @keyspace_name.setter
    def keyspace_name(self, keyspace_name):
        """Sets the keyspace_name of this KeyspaceSummary.


        :param keyspace_name: The keyspace_name of this KeyspaceSummary.
        :type keyspace_name: str
        """
        if keyspace_name is None:
            raise ValueError("Invalid value for `keyspace_name`, must not be `None`")

        self._keyspace_name = keyspace_name

    @property
    def resource_arn(self):
        """Gets the resource_arn of this KeyspaceSummary.


        :return: The resource_arn of this KeyspaceSummary.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this KeyspaceSummary.


        :param resource_arn: The resource_arn of this KeyspaceSummary.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def replication_strategy(self):
        """Gets the replication_strategy of this KeyspaceSummary.


        :return: The replication_strategy of this KeyspaceSummary.
        :rtype: Rs
        """
        return self._replication_strategy

    @replication_strategy.setter
    def replication_strategy(self, replication_strategy):
        """Sets the replication_strategy of this KeyspaceSummary.


        :param replication_strategy: The replication_strategy of this KeyspaceSummary.
        :type replication_strategy: Rs
        """
        if replication_strategy is None:
            raise ValueError("Invalid value for `replication_strategy`, must not be `None`")

        self._replication_strategy = replication_strategy

    @property
    def replication_regions(self):
        """Gets the replication_regions of this KeyspaceSummary.


        :return: The replication_regions of this KeyspaceSummary.
        :rtype: List
        """
        return self._replication_regions

    @replication_regions.setter
    def replication_regions(self, replication_regions):
        """Sets the replication_regions of this KeyspaceSummary.


        :param replication_regions: The replication_regions of this KeyspaceSummary.
        :type replication_regions: List
        """

        self._replication_regions = replication_regions
