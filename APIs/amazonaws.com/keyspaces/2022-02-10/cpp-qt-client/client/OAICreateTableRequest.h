/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateTableRequest.h
 *
 * 
 */

#ifndef OAICreateTableRequest_H
#define OAICreateTableRequest_H

#include <QJsonObject>

#include "OAICreateTableRequest_capacitySpecification.h"
#include "OAICreateTableRequest_clientSideTimestamps.h"
#include "OAICreateTableRequest_comment.h"
#include "OAICreateTableRequest_encryptionSpecification.h"
#include "OAICreateTableRequest_pointInTimeRecovery.h"
#include "OAICreateTableRequest_schemaDefinition.h"
#include "OAICreateTableRequest_ttl.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateTableRequest_schemaDefinition;
class OAICreateTableRequest_comment;
class OAICreateTableRequest_capacitySpecification;
class OAICreateTableRequest_encryptionSpecification;
class OAICreateTableRequest_pointInTimeRecovery;
class OAICreateTableRequest_ttl;
class OAICreateTableRequest_clientSideTimestamps;

class OAICreateTableRequest : public OAIObject {
public:
    OAICreateTableRequest();
    OAICreateTableRequest(QString json);
    ~OAICreateTableRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKeyspaceName() const;
    void setKeyspaceName(const QString &keyspace_name);
    bool is_keyspace_name_Set() const;
    bool is_keyspace_name_Valid() const;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    OAICreateTableRequest_schemaDefinition getSchemaDefinition() const;
    void setSchemaDefinition(const OAICreateTableRequest_schemaDefinition &schema_definition);
    bool is_schema_definition_Set() const;
    bool is_schema_definition_Valid() const;

    OAICreateTableRequest_comment getComment() const;
    void setComment(const OAICreateTableRequest_comment &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    OAICreateTableRequest_capacitySpecification getCapacitySpecification() const;
    void setCapacitySpecification(const OAICreateTableRequest_capacitySpecification &capacity_specification);
    bool is_capacity_specification_Set() const;
    bool is_capacity_specification_Valid() const;

    OAICreateTableRequest_encryptionSpecification getEncryptionSpecification() const;
    void setEncryptionSpecification(const OAICreateTableRequest_encryptionSpecification &encryption_specification);
    bool is_encryption_specification_Set() const;
    bool is_encryption_specification_Valid() const;

    OAICreateTableRequest_pointInTimeRecovery getPointInTimeRecovery() const;
    void setPointInTimeRecovery(const OAICreateTableRequest_pointInTimeRecovery &point_in_time_recovery);
    bool is_point_in_time_recovery_Set() const;
    bool is_point_in_time_recovery_Valid() const;

    OAICreateTableRequest_ttl getTtl() const;
    void setTtl(const OAICreateTableRequest_ttl &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    qint32 getDefaultTimeToLive() const;
    void setDefaultTimeToLive(const qint32 &default_time_to_live);
    bool is_default_time_to_live_Set() const;
    bool is_default_time_to_live_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateTableRequest_clientSideTimestamps getClientSideTimestamps() const;
    void setClientSideTimestamps(const OAICreateTableRequest_clientSideTimestamps &client_side_timestamps);
    bool is_client_side_timestamps_Set() const;
    bool is_client_side_timestamps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_keyspace_name;
    bool m_keyspace_name_isSet;
    bool m_keyspace_name_isValid;

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    OAICreateTableRequest_schemaDefinition m_schema_definition;
    bool m_schema_definition_isSet;
    bool m_schema_definition_isValid;

    OAICreateTableRequest_comment m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    OAICreateTableRequest_capacitySpecification m_capacity_specification;
    bool m_capacity_specification_isSet;
    bool m_capacity_specification_isValid;

    OAICreateTableRequest_encryptionSpecification m_encryption_specification;
    bool m_encryption_specification_isSet;
    bool m_encryption_specification_isValid;

    OAICreateTableRequest_pointInTimeRecovery m_point_in_time_recovery;
    bool m_point_in_time_recovery_isSet;
    bool m_point_in_time_recovery_isValid;

    OAICreateTableRequest_ttl m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;

    qint32 m_default_time_to_live;
    bool m_default_time_to_live_isSet;
    bool m_default_time_to_live_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateTableRequest_clientSideTimestamps m_client_side_timestamps;
    bool m_client_side_timestamps_isSet;
    bool m_client_side_timestamps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateTableRequest)

#endif // OAICreateTableRequest_H
