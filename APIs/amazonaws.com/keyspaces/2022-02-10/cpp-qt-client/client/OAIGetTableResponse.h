/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTableResponse.h
 *
 * 
 */

#ifndef OAIGetTableResponse_H
#define OAIGetTableResponse_H

#include <QJsonObject>

#include "OAIGetTableResponse_capacitySpecification.h"
#include "OAIGetTableResponse_clientSideTimestamps.h"
#include "OAIGetTableResponse_comment.h"
#include "OAIGetTableResponse_encryptionSpecification.h"
#include "OAIGetTableResponse_pointInTimeRecovery.h"
#include "OAIGetTableResponse_schemaDefinition.h"
#include "OAIGetTableResponse_ttl.h"
#include "OAITableStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTableResponse_schemaDefinition;
class OAIGetTableResponse_capacitySpecification;
class OAIGetTableResponse_encryptionSpecification;
class OAIGetTableResponse_pointInTimeRecovery;
class OAIGetTableResponse_ttl;
class OAIGetTableResponse_comment;
class OAIGetTableResponse_clientSideTimestamps;

class OAIGetTableResponse : public OAIObject {
public:
    OAIGetTableResponse();
    OAIGetTableResponse(QString json);
    ~OAIGetTableResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKeyspaceName() const;
    void setKeyspaceName(const QString &keyspace_name);
    bool is_keyspace_name_Set() const;
    bool is_keyspace_name_Valid() const;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    QDateTime getCreationTimestamp() const;
    void setCreationTimestamp(const QDateTime &creation_timestamp);
    bool is_creation_timestamp_Set() const;
    bool is_creation_timestamp_Valid() const;

    OAITableStatus getStatus() const;
    void setStatus(const OAITableStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIGetTableResponse_schemaDefinition getSchemaDefinition() const;
    void setSchemaDefinition(const OAIGetTableResponse_schemaDefinition &schema_definition);
    bool is_schema_definition_Set() const;
    bool is_schema_definition_Valid() const;

    OAIGetTableResponse_capacitySpecification getCapacitySpecification() const;
    void setCapacitySpecification(const OAIGetTableResponse_capacitySpecification &capacity_specification);
    bool is_capacity_specification_Set() const;
    bool is_capacity_specification_Valid() const;

    OAIGetTableResponse_encryptionSpecification getEncryptionSpecification() const;
    void setEncryptionSpecification(const OAIGetTableResponse_encryptionSpecification &encryption_specification);
    bool is_encryption_specification_Set() const;
    bool is_encryption_specification_Valid() const;

    OAIGetTableResponse_pointInTimeRecovery getPointInTimeRecovery() const;
    void setPointInTimeRecovery(const OAIGetTableResponse_pointInTimeRecovery &point_in_time_recovery);
    bool is_point_in_time_recovery_Set() const;
    bool is_point_in_time_recovery_Valid() const;

    OAIGetTableResponse_ttl getTtl() const;
    void setTtl(const OAIGetTableResponse_ttl &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    qint32 getDefaultTimeToLive() const;
    void setDefaultTimeToLive(const qint32 &default_time_to_live);
    bool is_default_time_to_live_Set() const;
    bool is_default_time_to_live_Valid() const;

    OAIGetTableResponse_comment getComment() const;
    void setComment(const OAIGetTableResponse_comment &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    OAIGetTableResponse_clientSideTimestamps getClientSideTimestamps() const;
    void setClientSideTimestamps(const OAIGetTableResponse_clientSideTimestamps &client_side_timestamps);
    bool is_client_side_timestamps_Set() const;
    bool is_client_side_timestamps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_keyspace_name;
    bool m_keyspace_name_isSet;
    bool m_keyspace_name_isValid;

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    QDateTime m_creation_timestamp;
    bool m_creation_timestamp_isSet;
    bool m_creation_timestamp_isValid;

    OAITableStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIGetTableResponse_schemaDefinition m_schema_definition;
    bool m_schema_definition_isSet;
    bool m_schema_definition_isValid;

    OAIGetTableResponse_capacitySpecification m_capacity_specification;
    bool m_capacity_specification_isSet;
    bool m_capacity_specification_isValid;

    OAIGetTableResponse_encryptionSpecification m_encryption_specification;
    bool m_encryption_specification_isSet;
    bool m_encryption_specification_isValid;

    OAIGetTableResponse_pointInTimeRecovery m_point_in_time_recovery;
    bool m_point_in_time_recovery_isSet;
    bool m_point_in_time_recovery_isValid;

    OAIGetTableResponse_ttl m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;

    qint32 m_default_time_to_live;
    bool m_default_time_to_live_isSet;
    bool m_default_time_to_live_isValid;

    OAIGetTableResponse_comment m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    OAIGetTableResponse_clientSideTimestamps m_client_side_timestamps;
    bool m_client_side_timestamps_isSet;
    bool m_client_side_timestamps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTableResponse)

#endif // OAIGetTableResponse_H
