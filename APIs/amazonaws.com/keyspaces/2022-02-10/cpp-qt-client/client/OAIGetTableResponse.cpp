/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTableResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTableResponse::OAIGetTableResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTableResponse::OAIGetTableResponse() {
    this->initializeModel();
}

OAIGetTableResponse::~OAIGetTableResponse() {}

void OAIGetTableResponse::initializeModel() {

    m_keyspace_name_isSet = false;
    m_keyspace_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_schema_definition_isSet = false;
    m_schema_definition_isValid = false;

    m_capacity_specification_isSet = false;
    m_capacity_specification_isValid = false;

    m_encryption_specification_isSet = false;
    m_encryption_specification_isValid = false;

    m_point_in_time_recovery_isSet = false;
    m_point_in_time_recovery_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_default_time_to_live_isSet = false;
    m_default_time_to_live_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_client_side_timestamps_isSet = false;
    m_client_side_timestamps_isValid = false;
}

void OAIGetTableResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTableResponse::fromJsonObject(QJsonObject json) {

    m_keyspace_name_isValid = ::OpenAPI::fromJsonValue(m_keyspace_name, json[QString("keyspaceName")]);
    m_keyspace_name_isSet = !json[QString("keyspaceName")].isNull() && m_keyspace_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_schema_definition_isValid = ::OpenAPI::fromJsonValue(m_schema_definition, json[QString("schemaDefinition")]);
    m_schema_definition_isSet = !json[QString("schemaDefinition")].isNull() && m_schema_definition_isValid;

    m_capacity_specification_isValid = ::OpenAPI::fromJsonValue(m_capacity_specification, json[QString("capacitySpecification")]);
    m_capacity_specification_isSet = !json[QString("capacitySpecification")].isNull() && m_capacity_specification_isValid;

    m_encryption_specification_isValid = ::OpenAPI::fromJsonValue(m_encryption_specification, json[QString("encryptionSpecification")]);
    m_encryption_specification_isSet = !json[QString("encryptionSpecification")].isNull() && m_encryption_specification_isValid;

    m_point_in_time_recovery_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery, json[QString("pointInTimeRecovery")]);
    m_point_in_time_recovery_isSet = !json[QString("pointInTimeRecovery")].isNull() && m_point_in_time_recovery_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_default_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_default_time_to_live, json[QString("defaultTimeToLive")]);
    m_default_time_to_live_isSet = !json[QString("defaultTimeToLive")].isNull() && m_default_time_to_live_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_client_side_timestamps_isValid = ::OpenAPI::fromJsonValue(m_client_side_timestamps, json[QString("clientSideTimestamps")]);
    m_client_side_timestamps_isSet = !json[QString("clientSideTimestamps")].isNull() && m_client_side_timestamps_isValid;
}

QString OAIGetTableResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTableResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_keyspace_name_isSet) {
        obj.insert(QString("keyspaceName"), ::OpenAPI::toJsonValue(m_keyspace_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_schema_definition.isSet()) {
        obj.insert(QString("schemaDefinition"), ::OpenAPI::toJsonValue(m_schema_definition));
    }
    if (m_capacity_specification.isSet()) {
        obj.insert(QString("capacitySpecification"), ::OpenAPI::toJsonValue(m_capacity_specification));
    }
    if (m_encryption_specification.isSet()) {
        obj.insert(QString("encryptionSpecification"), ::OpenAPI::toJsonValue(m_encryption_specification));
    }
    if (m_point_in_time_recovery.isSet()) {
        obj.insert(QString("pointInTimeRecovery"), ::OpenAPI::toJsonValue(m_point_in_time_recovery));
    }
    if (m_ttl.isSet()) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_default_time_to_live_isSet) {
        obj.insert(QString("defaultTimeToLive"), ::OpenAPI::toJsonValue(m_default_time_to_live));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_client_side_timestamps.isSet()) {
        obj.insert(QString("clientSideTimestamps"), ::OpenAPI::toJsonValue(m_client_side_timestamps));
    }
    return obj;
}

QString OAIGetTableResponse::getKeyspaceName() const {
    return m_keyspace_name;
}
void OAIGetTableResponse::setKeyspaceName(const QString &keyspace_name) {
    m_keyspace_name = keyspace_name;
    m_keyspace_name_isSet = true;
}

bool OAIGetTableResponse::is_keyspace_name_Set() const{
    return m_keyspace_name_isSet;
}

bool OAIGetTableResponse::is_keyspace_name_Valid() const{
    return m_keyspace_name_isValid;
}

QString OAIGetTableResponse::getTableName() const {
    return m_table_name;
}
void OAIGetTableResponse::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIGetTableResponse::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIGetTableResponse::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIGetTableResponse::getResourceArn() const {
    return m_resource_arn;
}
void OAIGetTableResponse::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIGetTableResponse::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIGetTableResponse::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QDateTime OAIGetTableResponse::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIGetTableResponse::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIGetTableResponse::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIGetTableResponse::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

OAITableStatus OAIGetTableResponse::getStatus() const {
    return m_status;
}
void OAIGetTableResponse::setStatus(const OAITableStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetTableResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetTableResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIGetTableResponse_schemaDefinition OAIGetTableResponse::getSchemaDefinition() const {
    return m_schema_definition;
}
void OAIGetTableResponse::setSchemaDefinition(const OAIGetTableResponse_schemaDefinition &schema_definition) {
    m_schema_definition = schema_definition;
    m_schema_definition_isSet = true;
}

bool OAIGetTableResponse::is_schema_definition_Set() const{
    return m_schema_definition_isSet;
}

bool OAIGetTableResponse::is_schema_definition_Valid() const{
    return m_schema_definition_isValid;
}

OAIGetTableResponse_capacitySpecification OAIGetTableResponse::getCapacitySpecification() const {
    return m_capacity_specification;
}
void OAIGetTableResponse::setCapacitySpecification(const OAIGetTableResponse_capacitySpecification &capacity_specification) {
    m_capacity_specification = capacity_specification;
    m_capacity_specification_isSet = true;
}

bool OAIGetTableResponse::is_capacity_specification_Set() const{
    return m_capacity_specification_isSet;
}

bool OAIGetTableResponse::is_capacity_specification_Valid() const{
    return m_capacity_specification_isValid;
}

OAIGetTableResponse_encryptionSpecification OAIGetTableResponse::getEncryptionSpecification() const {
    return m_encryption_specification;
}
void OAIGetTableResponse::setEncryptionSpecification(const OAIGetTableResponse_encryptionSpecification &encryption_specification) {
    m_encryption_specification = encryption_specification;
    m_encryption_specification_isSet = true;
}

bool OAIGetTableResponse::is_encryption_specification_Set() const{
    return m_encryption_specification_isSet;
}

bool OAIGetTableResponse::is_encryption_specification_Valid() const{
    return m_encryption_specification_isValid;
}

OAIGetTableResponse_pointInTimeRecovery OAIGetTableResponse::getPointInTimeRecovery() const {
    return m_point_in_time_recovery;
}
void OAIGetTableResponse::setPointInTimeRecovery(const OAIGetTableResponse_pointInTimeRecovery &point_in_time_recovery) {
    m_point_in_time_recovery = point_in_time_recovery;
    m_point_in_time_recovery_isSet = true;
}

bool OAIGetTableResponse::is_point_in_time_recovery_Set() const{
    return m_point_in_time_recovery_isSet;
}

bool OAIGetTableResponse::is_point_in_time_recovery_Valid() const{
    return m_point_in_time_recovery_isValid;
}

OAIGetTableResponse_ttl OAIGetTableResponse::getTtl() const {
    return m_ttl;
}
void OAIGetTableResponse::setTtl(const OAIGetTableResponse_ttl &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIGetTableResponse::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIGetTableResponse::is_ttl_Valid() const{
    return m_ttl_isValid;
}

qint32 OAIGetTableResponse::getDefaultTimeToLive() const {
    return m_default_time_to_live;
}
void OAIGetTableResponse::setDefaultTimeToLive(const qint32 &default_time_to_live) {
    m_default_time_to_live = default_time_to_live;
    m_default_time_to_live_isSet = true;
}

bool OAIGetTableResponse::is_default_time_to_live_Set() const{
    return m_default_time_to_live_isSet;
}

bool OAIGetTableResponse::is_default_time_to_live_Valid() const{
    return m_default_time_to_live_isValid;
}

OAIGetTableResponse_comment OAIGetTableResponse::getComment() const {
    return m_comment;
}
void OAIGetTableResponse::setComment(const OAIGetTableResponse_comment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIGetTableResponse::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIGetTableResponse::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIGetTableResponse_clientSideTimestamps OAIGetTableResponse::getClientSideTimestamps() const {
    return m_client_side_timestamps;
}
void OAIGetTableResponse::setClientSideTimestamps(const OAIGetTableResponse_clientSideTimestamps &client_side_timestamps) {
    m_client_side_timestamps = client_side_timestamps;
    m_client_side_timestamps_isSet = true;
}

bool OAIGetTableResponse::is_client_side_timestamps_Set() const{
    return m_client_side_timestamps_isSet;
}

bool OAIGetTableResponse::is_client_side_timestamps_Valid() const{
    return m_client_side_timestamps_isValid;
}

bool OAIGetTableResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_side_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTableResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keyspace_name_isValid && m_table_name_isValid && m_resource_arn_isValid && true;
}

} // namespace OpenAPI
