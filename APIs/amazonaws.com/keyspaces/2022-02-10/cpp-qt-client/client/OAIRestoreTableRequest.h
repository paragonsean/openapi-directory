/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestoreTableRequest.h
 *
 * 
 */

#ifndef OAIRestoreTableRequest_H
#define OAIRestoreTableRequest_H

#include <QJsonObject>

#include "OAIRestoreTableRequest_capacitySpecificationOverride.h"
#include "OAIRestoreTableRequest_encryptionSpecificationOverride.h"
#include "OAIRestoreTableRequest_pointInTimeRecoveryOverride.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRestoreTableRequest_capacitySpecificationOverride;
class OAIRestoreTableRequest_encryptionSpecificationOverride;
class OAIRestoreTableRequest_pointInTimeRecoveryOverride;

class OAIRestoreTableRequest : public OAIObject {
public:
    OAIRestoreTableRequest();
    OAIRestoreTableRequest(QString json);
    ~OAIRestoreTableRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSourceKeyspaceName() const;
    void setSourceKeyspaceName(const QString &source_keyspace_name);
    bool is_source_keyspace_name_Set() const;
    bool is_source_keyspace_name_Valid() const;

    QString getSourceTableName() const;
    void setSourceTableName(const QString &source_table_name);
    bool is_source_table_name_Set() const;
    bool is_source_table_name_Valid() const;

    QString getTargetKeyspaceName() const;
    void setTargetKeyspaceName(const QString &target_keyspace_name);
    bool is_target_keyspace_name_Set() const;
    bool is_target_keyspace_name_Valid() const;

    QString getTargetTableName() const;
    void setTargetTableName(const QString &target_table_name);
    bool is_target_table_name_Set() const;
    bool is_target_table_name_Valid() const;

    QDateTime getRestoreTimestamp() const;
    void setRestoreTimestamp(const QDateTime &restore_timestamp);
    bool is_restore_timestamp_Set() const;
    bool is_restore_timestamp_Valid() const;

    OAIRestoreTableRequest_capacitySpecificationOverride getCapacitySpecificationOverride() const;
    void setCapacitySpecificationOverride(const OAIRestoreTableRequest_capacitySpecificationOverride &capacity_specification_override);
    bool is_capacity_specification_override_Set() const;
    bool is_capacity_specification_override_Valid() const;

    OAIRestoreTableRequest_encryptionSpecificationOverride getEncryptionSpecificationOverride() const;
    void setEncryptionSpecificationOverride(const OAIRestoreTableRequest_encryptionSpecificationOverride &encryption_specification_override);
    bool is_encryption_specification_override_Set() const;
    bool is_encryption_specification_override_Valid() const;

    OAIRestoreTableRequest_pointInTimeRecoveryOverride getPointInTimeRecoveryOverride() const;
    void setPointInTimeRecoveryOverride(const OAIRestoreTableRequest_pointInTimeRecoveryOverride &point_in_time_recovery_override);
    bool is_point_in_time_recovery_override_Set() const;
    bool is_point_in_time_recovery_override_Valid() const;

    QList getTagsOverride() const;
    void setTagsOverride(const QList &tags_override);
    bool is_tags_override_Set() const;
    bool is_tags_override_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_source_keyspace_name;
    bool m_source_keyspace_name_isSet;
    bool m_source_keyspace_name_isValid;

    QString m_source_table_name;
    bool m_source_table_name_isSet;
    bool m_source_table_name_isValid;

    QString m_target_keyspace_name;
    bool m_target_keyspace_name_isSet;
    bool m_target_keyspace_name_isValid;

    QString m_target_table_name;
    bool m_target_table_name_isSet;
    bool m_target_table_name_isValid;

    QDateTime m_restore_timestamp;
    bool m_restore_timestamp_isSet;
    bool m_restore_timestamp_isValid;

    OAIRestoreTableRequest_capacitySpecificationOverride m_capacity_specification_override;
    bool m_capacity_specification_override_isSet;
    bool m_capacity_specification_override_isValid;

    OAIRestoreTableRequest_encryptionSpecificationOverride m_encryption_specification_override;
    bool m_encryption_specification_override_isSet;
    bool m_encryption_specification_override_isValid;

    OAIRestoreTableRequest_pointInTimeRecoveryOverride m_point_in_time_recovery_override;
    bool m_point_in_time_recovery_override_isSet;
    bool m_point_in_time_recovery_override_isValid;

    QList m_tags_override;
    bool m_tags_override_isSet;
    bool m_tags_override_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestoreTableRequest)

#endif // OAIRestoreTableRequest_H
