/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreTableRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreTableRequest::OAIRestoreTableRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreTableRequest::OAIRestoreTableRequest() {
    this->initializeModel();
}

OAIRestoreTableRequest::~OAIRestoreTableRequest() {}

void OAIRestoreTableRequest::initializeModel() {

    m_source_keyspace_name_isSet = false;
    m_source_keyspace_name_isValid = false;

    m_source_table_name_isSet = false;
    m_source_table_name_isValid = false;

    m_target_keyspace_name_isSet = false;
    m_target_keyspace_name_isValid = false;

    m_target_table_name_isSet = false;
    m_target_table_name_isValid = false;

    m_restore_timestamp_isSet = false;
    m_restore_timestamp_isValid = false;

    m_capacity_specification_override_isSet = false;
    m_capacity_specification_override_isValid = false;

    m_encryption_specification_override_isSet = false;
    m_encryption_specification_override_isValid = false;

    m_point_in_time_recovery_override_isSet = false;
    m_point_in_time_recovery_override_isValid = false;

    m_tags_override_isSet = false;
    m_tags_override_isValid = false;
}

void OAIRestoreTableRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreTableRequest::fromJsonObject(QJsonObject json) {

    m_source_keyspace_name_isValid = ::OpenAPI::fromJsonValue(m_source_keyspace_name, json[QString("sourceKeyspaceName")]);
    m_source_keyspace_name_isSet = !json[QString("sourceKeyspaceName")].isNull() && m_source_keyspace_name_isValid;

    m_source_table_name_isValid = ::OpenAPI::fromJsonValue(m_source_table_name, json[QString("sourceTableName")]);
    m_source_table_name_isSet = !json[QString("sourceTableName")].isNull() && m_source_table_name_isValid;

    m_target_keyspace_name_isValid = ::OpenAPI::fromJsonValue(m_target_keyspace_name, json[QString("targetKeyspaceName")]);
    m_target_keyspace_name_isSet = !json[QString("targetKeyspaceName")].isNull() && m_target_keyspace_name_isValid;

    m_target_table_name_isValid = ::OpenAPI::fromJsonValue(m_target_table_name, json[QString("targetTableName")]);
    m_target_table_name_isSet = !json[QString("targetTableName")].isNull() && m_target_table_name_isValid;

    m_restore_timestamp_isValid = ::OpenAPI::fromJsonValue(m_restore_timestamp, json[QString("restoreTimestamp")]);
    m_restore_timestamp_isSet = !json[QString("restoreTimestamp")].isNull() && m_restore_timestamp_isValid;

    m_capacity_specification_override_isValid = ::OpenAPI::fromJsonValue(m_capacity_specification_override, json[QString("capacitySpecificationOverride")]);
    m_capacity_specification_override_isSet = !json[QString("capacitySpecificationOverride")].isNull() && m_capacity_specification_override_isValid;

    m_encryption_specification_override_isValid = ::OpenAPI::fromJsonValue(m_encryption_specification_override, json[QString("encryptionSpecificationOverride")]);
    m_encryption_specification_override_isSet = !json[QString("encryptionSpecificationOverride")].isNull() && m_encryption_specification_override_isValid;

    m_point_in_time_recovery_override_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery_override, json[QString("pointInTimeRecoveryOverride")]);
    m_point_in_time_recovery_override_isSet = !json[QString("pointInTimeRecoveryOverride")].isNull() && m_point_in_time_recovery_override_isValid;

    m_tags_override_isValid = ::OpenAPI::fromJsonValue(m_tags_override, json[QString("tagsOverride")]);
    m_tags_override_isSet = !json[QString("tagsOverride")].isNull() && m_tags_override_isValid;
}

QString OAIRestoreTableRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreTableRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source_keyspace_name_isSet) {
        obj.insert(QString("sourceKeyspaceName"), ::OpenAPI::toJsonValue(m_source_keyspace_name));
    }
    if (m_source_table_name_isSet) {
        obj.insert(QString("sourceTableName"), ::OpenAPI::toJsonValue(m_source_table_name));
    }
    if (m_target_keyspace_name_isSet) {
        obj.insert(QString("targetKeyspaceName"), ::OpenAPI::toJsonValue(m_target_keyspace_name));
    }
    if (m_target_table_name_isSet) {
        obj.insert(QString("targetTableName"), ::OpenAPI::toJsonValue(m_target_table_name));
    }
    if (m_restore_timestamp_isSet) {
        obj.insert(QString("restoreTimestamp"), ::OpenAPI::toJsonValue(m_restore_timestamp));
    }
    if (m_capacity_specification_override.isSet()) {
        obj.insert(QString("capacitySpecificationOverride"), ::OpenAPI::toJsonValue(m_capacity_specification_override));
    }
    if (m_encryption_specification_override.isSet()) {
        obj.insert(QString("encryptionSpecificationOverride"), ::OpenAPI::toJsonValue(m_encryption_specification_override));
    }
    if (m_point_in_time_recovery_override.isSet()) {
        obj.insert(QString("pointInTimeRecoveryOverride"), ::OpenAPI::toJsonValue(m_point_in_time_recovery_override));
    }
    if (m_tags_override.isSet()) {
        obj.insert(QString("tagsOverride"), ::OpenAPI::toJsonValue(m_tags_override));
    }
    return obj;
}

QString OAIRestoreTableRequest::getSourceKeyspaceName() const {
    return m_source_keyspace_name;
}
void OAIRestoreTableRequest::setSourceKeyspaceName(const QString &source_keyspace_name) {
    m_source_keyspace_name = source_keyspace_name;
    m_source_keyspace_name_isSet = true;
}

bool OAIRestoreTableRequest::is_source_keyspace_name_Set() const{
    return m_source_keyspace_name_isSet;
}

bool OAIRestoreTableRequest::is_source_keyspace_name_Valid() const{
    return m_source_keyspace_name_isValid;
}

QString OAIRestoreTableRequest::getSourceTableName() const {
    return m_source_table_name;
}
void OAIRestoreTableRequest::setSourceTableName(const QString &source_table_name) {
    m_source_table_name = source_table_name;
    m_source_table_name_isSet = true;
}

bool OAIRestoreTableRequest::is_source_table_name_Set() const{
    return m_source_table_name_isSet;
}

bool OAIRestoreTableRequest::is_source_table_name_Valid() const{
    return m_source_table_name_isValid;
}

QString OAIRestoreTableRequest::getTargetKeyspaceName() const {
    return m_target_keyspace_name;
}
void OAIRestoreTableRequest::setTargetKeyspaceName(const QString &target_keyspace_name) {
    m_target_keyspace_name = target_keyspace_name;
    m_target_keyspace_name_isSet = true;
}

bool OAIRestoreTableRequest::is_target_keyspace_name_Set() const{
    return m_target_keyspace_name_isSet;
}

bool OAIRestoreTableRequest::is_target_keyspace_name_Valid() const{
    return m_target_keyspace_name_isValid;
}

QString OAIRestoreTableRequest::getTargetTableName() const {
    return m_target_table_name;
}
void OAIRestoreTableRequest::setTargetTableName(const QString &target_table_name) {
    m_target_table_name = target_table_name;
    m_target_table_name_isSet = true;
}

bool OAIRestoreTableRequest::is_target_table_name_Set() const{
    return m_target_table_name_isSet;
}

bool OAIRestoreTableRequest::is_target_table_name_Valid() const{
    return m_target_table_name_isValid;
}

QDateTime OAIRestoreTableRequest::getRestoreTimestamp() const {
    return m_restore_timestamp;
}
void OAIRestoreTableRequest::setRestoreTimestamp(const QDateTime &restore_timestamp) {
    m_restore_timestamp = restore_timestamp;
    m_restore_timestamp_isSet = true;
}

bool OAIRestoreTableRequest::is_restore_timestamp_Set() const{
    return m_restore_timestamp_isSet;
}

bool OAIRestoreTableRequest::is_restore_timestamp_Valid() const{
    return m_restore_timestamp_isValid;
}

OAIRestoreTableRequest_capacitySpecificationOverride OAIRestoreTableRequest::getCapacitySpecificationOverride() const {
    return m_capacity_specification_override;
}
void OAIRestoreTableRequest::setCapacitySpecificationOverride(const OAIRestoreTableRequest_capacitySpecificationOverride &capacity_specification_override) {
    m_capacity_specification_override = capacity_specification_override;
    m_capacity_specification_override_isSet = true;
}

bool OAIRestoreTableRequest::is_capacity_specification_override_Set() const{
    return m_capacity_specification_override_isSet;
}

bool OAIRestoreTableRequest::is_capacity_specification_override_Valid() const{
    return m_capacity_specification_override_isValid;
}

OAIRestoreTableRequest_encryptionSpecificationOverride OAIRestoreTableRequest::getEncryptionSpecificationOverride() const {
    return m_encryption_specification_override;
}
void OAIRestoreTableRequest::setEncryptionSpecificationOverride(const OAIRestoreTableRequest_encryptionSpecificationOverride &encryption_specification_override) {
    m_encryption_specification_override = encryption_specification_override;
    m_encryption_specification_override_isSet = true;
}

bool OAIRestoreTableRequest::is_encryption_specification_override_Set() const{
    return m_encryption_specification_override_isSet;
}

bool OAIRestoreTableRequest::is_encryption_specification_override_Valid() const{
    return m_encryption_specification_override_isValid;
}

OAIRestoreTableRequest_pointInTimeRecoveryOverride OAIRestoreTableRequest::getPointInTimeRecoveryOverride() const {
    return m_point_in_time_recovery_override;
}
void OAIRestoreTableRequest::setPointInTimeRecoveryOverride(const OAIRestoreTableRequest_pointInTimeRecoveryOverride &point_in_time_recovery_override) {
    m_point_in_time_recovery_override = point_in_time_recovery_override;
    m_point_in_time_recovery_override_isSet = true;
}

bool OAIRestoreTableRequest::is_point_in_time_recovery_override_Set() const{
    return m_point_in_time_recovery_override_isSet;
}

bool OAIRestoreTableRequest::is_point_in_time_recovery_override_Valid() const{
    return m_point_in_time_recovery_override_isValid;
}

QList OAIRestoreTableRequest::getTagsOverride() const {
    return m_tags_override;
}
void OAIRestoreTableRequest::setTagsOverride(const QList &tags_override) {
    m_tags_override = tags_override;
    m_tags_override_isSet = true;
}

bool OAIRestoreTableRequest::is_tags_override_Set() const{
    return m_tags_override_isSet;
}

bool OAIRestoreTableRequest::is_tags_override_Valid() const{
    return m_tags_override_isValid;
}

bool OAIRestoreTableRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_keyspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_keyspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_specification_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_specification_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_override.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreTableRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_keyspace_name_isValid && m_source_table_name_isValid && m_target_keyspace_name_isValid && m_target_table_name_isValid && true;
}

} // namespace OpenAPI
