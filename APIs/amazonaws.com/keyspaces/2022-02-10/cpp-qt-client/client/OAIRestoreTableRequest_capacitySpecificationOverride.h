/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestoreTableRequest_capacitySpecificationOverride.h
 *
 * 
 */

#ifndef OAIRestoreTableRequest_capacitySpecificationOverride_H
#define OAIRestoreTableRequest_capacitySpecificationOverride_H

#include <QJsonObject>

#include "OAIThroughputMode.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRestoreTableRequest_capacitySpecificationOverride : public OAIObject {
public:
    OAIRestoreTableRequest_capacitySpecificationOverride();
    OAIRestoreTableRequest_capacitySpecificationOverride(QString json);
    ~OAIRestoreTableRequest_capacitySpecificationOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIThroughputMode getThroughputMode() const;
    void setThroughputMode(const OAIThroughputMode &throughput_mode);
    bool is_throughput_mode_Set() const;
    bool is_throughput_mode_Valid() const;

    qint32 getReadCapacityUnits() const;
    void setReadCapacityUnits(const qint32 &read_capacity_units);
    bool is_read_capacity_units_Set() const;
    bool is_read_capacity_units_Valid() const;

    qint32 getWriteCapacityUnits() const;
    void setWriteCapacityUnits(const qint32 &write_capacity_units);
    bool is_write_capacity_units_Set() const;
    bool is_write_capacity_units_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIThroughputMode m_throughput_mode;
    bool m_throughput_mode_isSet;
    bool m_throughput_mode_isValid;

    qint32 m_read_capacity_units;
    bool m_read_capacity_units_isSet;
    bool m_read_capacity_units_isValid;

    qint32 m_write_capacity_units;
    bool m_write_capacity_units_isSet;
    bool m_write_capacity_units_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestoreTableRequest_capacitySpecificationOverride)

#endif // OAIRestoreTableRequest_capacitySpecificationOverride_H
