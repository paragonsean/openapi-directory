/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTableResponse_encryptionSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTableResponse_encryptionSpecification::OAIGetTableResponse_encryptionSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTableResponse_encryptionSpecification::OAIGetTableResponse_encryptionSpecification() {
    this->initializeModel();
}

OAIGetTableResponse_encryptionSpecification::~OAIGetTableResponse_encryptionSpecification() {}

void OAIGetTableResponse_encryptionSpecification::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_kms_key_identifier_isSet = false;
    m_kms_key_identifier_isValid = false;
}

void OAIGetTableResponse_encryptionSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTableResponse_encryptionSpecification::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_kms_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_kms_key_identifier, json[QString("kmsKeyIdentifier")]);
    m_kms_key_identifier_isSet = !json[QString("kmsKeyIdentifier")].isNull() && m_kms_key_identifier_isValid;
}

QString OAIGetTableResponse_encryptionSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTableResponse_encryptionSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_kms_key_identifier_isSet) {
        obj.insert(QString("kmsKeyIdentifier"), ::OpenAPI::toJsonValue(m_kms_key_identifier));
    }
    return obj;
}

OAIEncryptionType OAIGetTableResponse_encryptionSpecification::getType() const {
    return m_type;
}
void OAIGetTableResponse_encryptionSpecification::setType(const OAIEncryptionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetTableResponse_encryptionSpecification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetTableResponse_encryptionSpecification::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetTableResponse_encryptionSpecification::getKmsKeyIdentifier() const {
    return m_kms_key_identifier;
}
void OAIGetTableResponse_encryptionSpecification::setKmsKeyIdentifier(const QString &kms_key_identifier) {
    m_kms_key_identifier = kms_key_identifier;
    m_kms_key_identifier_isSet = true;
}

bool OAIGetTableResponse_encryptionSpecification::is_kms_key_identifier_Set() const{
    return m_kms_key_identifier_isSet;
}

bool OAIGetTableResponse_encryptionSpecification::is_kms_key_identifier_Valid() const{
    return m_kms_key_identifier_isValid;
}

bool OAIGetTableResponse_encryptionSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTableResponse_encryptionSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
