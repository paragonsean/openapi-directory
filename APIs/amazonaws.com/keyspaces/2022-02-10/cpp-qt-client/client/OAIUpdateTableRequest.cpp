/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTableRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTableRequest::OAIUpdateTableRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTableRequest::OAIUpdateTableRequest() {
    this->initializeModel();
}

OAIUpdateTableRequest::~OAIUpdateTableRequest() {}

void OAIUpdateTableRequest::initializeModel() {

    m_keyspace_name_isSet = false;
    m_keyspace_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_add_columns_isSet = false;
    m_add_columns_isValid = false;

    m_capacity_specification_isSet = false;
    m_capacity_specification_isValid = false;

    m_encryption_specification_isSet = false;
    m_encryption_specification_isValid = false;

    m_point_in_time_recovery_isSet = false;
    m_point_in_time_recovery_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_default_time_to_live_isSet = false;
    m_default_time_to_live_isValid = false;

    m_client_side_timestamps_isSet = false;
    m_client_side_timestamps_isValid = false;
}

void OAIUpdateTableRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTableRequest::fromJsonObject(QJsonObject json) {

    m_keyspace_name_isValid = ::OpenAPI::fromJsonValue(m_keyspace_name, json[QString("keyspaceName")]);
    m_keyspace_name_isSet = !json[QString("keyspaceName")].isNull() && m_keyspace_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_add_columns_isValid = ::OpenAPI::fromJsonValue(m_add_columns, json[QString("addColumns")]);
    m_add_columns_isSet = !json[QString("addColumns")].isNull() && m_add_columns_isValid;

    m_capacity_specification_isValid = ::OpenAPI::fromJsonValue(m_capacity_specification, json[QString("capacitySpecification")]);
    m_capacity_specification_isSet = !json[QString("capacitySpecification")].isNull() && m_capacity_specification_isValid;

    m_encryption_specification_isValid = ::OpenAPI::fromJsonValue(m_encryption_specification, json[QString("encryptionSpecification")]);
    m_encryption_specification_isSet = !json[QString("encryptionSpecification")].isNull() && m_encryption_specification_isValid;

    m_point_in_time_recovery_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery, json[QString("pointInTimeRecovery")]);
    m_point_in_time_recovery_isSet = !json[QString("pointInTimeRecovery")].isNull() && m_point_in_time_recovery_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_default_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_default_time_to_live, json[QString("defaultTimeToLive")]);
    m_default_time_to_live_isSet = !json[QString("defaultTimeToLive")].isNull() && m_default_time_to_live_isValid;

    m_client_side_timestamps_isValid = ::OpenAPI::fromJsonValue(m_client_side_timestamps, json[QString("clientSideTimestamps")]);
    m_client_side_timestamps_isSet = !json[QString("clientSideTimestamps")].isNull() && m_client_side_timestamps_isValid;
}

QString OAIUpdateTableRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTableRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_keyspace_name_isSet) {
        obj.insert(QString("keyspaceName"), ::OpenAPI::toJsonValue(m_keyspace_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_add_columns.isSet()) {
        obj.insert(QString("addColumns"), ::OpenAPI::toJsonValue(m_add_columns));
    }
    if (m_capacity_specification.isSet()) {
        obj.insert(QString("capacitySpecification"), ::OpenAPI::toJsonValue(m_capacity_specification));
    }
    if (m_encryption_specification.isSet()) {
        obj.insert(QString("encryptionSpecification"), ::OpenAPI::toJsonValue(m_encryption_specification));
    }
    if (m_point_in_time_recovery.isSet()) {
        obj.insert(QString("pointInTimeRecovery"), ::OpenAPI::toJsonValue(m_point_in_time_recovery));
    }
    if (m_ttl.isSet()) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_default_time_to_live_isSet) {
        obj.insert(QString("defaultTimeToLive"), ::OpenAPI::toJsonValue(m_default_time_to_live));
    }
    if (m_client_side_timestamps.isSet()) {
        obj.insert(QString("clientSideTimestamps"), ::OpenAPI::toJsonValue(m_client_side_timestamps));
    }
    return obj;
}

QString OAIUpdateTableRequest::getKeyspaceName() const {
    return m_keyspace_name;
}
void OAIUpdateTableRequest::setKeyspaceName(const QString &keyspace_name) {
    m_keyspace_name = keyspace_name;
    m_keyspace_name_isSet = true;
}

bool OAIUpdateTableRequest::is_keyspace_name_Set() const{
    return m_keyspace_name_isSet;
}

bool OAIUpdateTableRequest::is_keyspace_name_Valid() const{
    return m_keyspace_name_isValid;
}

QString OAIUpdateTableRequest::getTableName() const {
    return m_table_name;
}
void OAIUpdateTableRequest::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIUpdateTableRequest::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIUpdateTableRequest::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QList OAIUpdateTableRequest::getAddColumns() const {
    return m_add_columns;
}
void OAIUpdateTableRequest::setAddColumns(const QList &add_columns) {
    m_add_columns = add_columns;
    m_add_columns_isSet = true;
}

bool OAIUpdateTableRequest::is_add_columns_Set() const{
    return m_add_columns_isSet;
}

bool OAIUpdateTableRequest::is_add_columns_Valid() const{
    return m_add_columns_isValid;
}

OAIUpdateTableRequest_capacitySpecification OAIUpdateTableRequest::getCapacitySpecification() const {
    return m_capacity_specification;
}
void OAIUpdateTableRequest::setCapacitySpecification(const OAIUpdateTableRequest_capacitySpecification &capacity_specification) {
    m_capacity_specification = capacity_specification;
    m_capacity_specification_isSet = true;
}

bool OAIUpdateTableRequest::is_capacity_specification_Set() const{
    return m_capacity_specification_isSet;
}

bool OAIUpdateTableRequest::is_capacity_specification_Valid() const{
    return m_capacity_specification_isValid;
}

OAIUpdateTableRequest_encryptionSpecification OAIUpdateTableRequest::getEncryptionSpecification() const {
    return m_encryption_specification;
}
void OAIUpdateTableRequest::setEncryptionSpecification(const OAIUpdateTableRequest_encryptionSpecification &encryption_specification) {
    m_encryption_specification = encryption_specification;
    m_encryption_specification_isSet = true;
}

bool OAIUpdateTableRequest::is_encryption_specification_Set() const{
    return m_encryption_specification_isSet;
}

bool OAIUpdateTableRequest::is_encryption_specification_Valid() const{
    return m_encryption_specification_isValid;
}

OAIUpdateTableRequest_pointInTimeRecovery OAIUpdateTableRequest::getPointInTimeRecovery() const {
    return m_point_in_time_recovery;
}
void OAIUpdateTableRequest::setPointInTimeRecovery(const OAIUpdateTableRequest_pointInTimeRecovery &point_in_time_recovery) {
    m_point_in_time_recovery = point_in_time_recovery;
    m_point_in_time_recovery_isSet = true;
}

bool OAIUpdateTableRequest::is_point_in_time_recovery_Set() const{
    return m_point_in_time_recovery_isSet;
}

bool OAIUpdateTableRequest::is_point_in_time_recovery_Valid() const{
    return m_point_in_time_recovery_isValid;
}

OAIUpdateTableRequest_ttl OAIUpdateTableRequest::getTtl() const {
    return m_ttl;
}
void OAIUpdateTableRequest::setTtl(const OAIUpdateTableRequest_ttl &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIUpdateTableRequest::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIUpdateTableRequest::is_ttl_Valid() const{
    return m_ttl_isValid;
}

qint32 OAIUpdateTableRequest::getDefaultTimeToLive() const {
    return m_default_time_to_live;
}
void OAIUpdateTableRequest::setDefaultTimeToLive(const qint32 &default_time_to_live) {
    m_default_time_to_live = default_time_to_live;
    m_default_time_to_live_isSet = true;
}

bool OAIUpdateTableRequest::is_default_time_to_live_Set() const{
    return m_default_time_to_live_isSet;
}

bool OAIUpdateTableRequest::is_default_time_to_live_Valid() const{
    return m_default_time_to_live_isValid;
}

OAIUpdateTableRequest_clientSideTimestamps OAIUpdateTableRequest::getClientSideTimestamps() const {
    return m_client_side_timestamps;
}
void OAIUpdateTableRequest::setClientSideTimestamps(const OAIUpdateTableRequest_clientSideTimestamps &client_side_timestamps) {
    m_client_side_timestamps = client_side_timestamps;
    m_client_side_timestamps_isSet = true;
}

bool OAIUpdateTableRequest::is_client_side_timestamps_Set() const{
    return m_client_side_timestamps_isSet;
}

bool OAIUpdateTableRequest::is_client_side_timestamps_Valid() const{
    return m_client_side_timestamps_isValid;
}

bool OAIUpdateTableRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_side_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTableRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keyspace_name_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
