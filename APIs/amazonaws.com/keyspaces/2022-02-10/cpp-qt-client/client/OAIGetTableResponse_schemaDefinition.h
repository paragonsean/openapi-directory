/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTableResponse_schemaDefinition.h
 *
 * 
 */

#ifndef OAIGetTableResponse_schemaDefinition_H
#define OAIGetTableResponse_schemaDefinition_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetTableResponse_schemaDefinition : public OAIObject {
public:
    OAIGetTableResponse_schemaDefinition();
    OAIGetTableResponse_schemaDefinition(QString json);
    ~OAIGetTableResponse_schemaDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAllColumns() const;
    void setAllColumns(const QList &all_columns);
    bool is_all_columns_Set() const;
    bool is_all_columns_Valid() const;

    QList getPartitionKeys() const;
    void setPartitionKeys(const QList &partition_keys);
    bool is_partition_keys_Set() const;
    bool is_partition_keys_Valid() const;

    QList getClusteringKeys() const;
    void setClusteringKeys(const QList &clustering_keys);
    bool is_clustering_keys_Set() const;
    bool is_clustering_keys_Valid() const;

    QList getStaticColumns() const;
    void setStaticColumns(const QList &static_columns);
    bool is_static_columns_Set() const;
    bool is_static_columns_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_all_columns;
    bool m_all_columns_isSet;
    bool m_all_columns_isValid;

    QList m_partition_keys;
    bool m_partition_keys_isSet;
    bool m_partition_keys_isValid;

    QList m_clustering_keys;
    bool m_clustering_keys_isSet;
    bool m_clustering_keys_isValid;

    QList m_static_columns;
    bool m_static_columns_isSet;
    bool m_static_columns_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTableResponse_schemaDefinition)

#endif // OAIGetTableResponse_schemaDefinition_H
