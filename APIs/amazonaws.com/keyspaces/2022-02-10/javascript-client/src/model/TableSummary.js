/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TableSummary model module.
 * @module model/TableSummary
 * @version 2022-02-10
 */
class TableSummary {
    /**
     * Constructs a new <code>TableSummary</code>.
     * Returns the name of the specified table, the keyspace it is stored in, and the unique identifier in the format of an Amazon Resource Name (ARN).
     * @alias module:model/TableSummary
     * @param keyspaceName {String} 
     * @param tableName {String} 
     * @param resourceArn {String} 
     */
    constructor(keyspaceName, tableName, resourceArn) { 
        
        TableSummary.initialize(this, keyspaceName, tableName, resourceArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyspaceName, tableName, resourceArn) { 
        obj['keyspaceName'] = keyspaceName;
        obj['tableName'] = tableName;
        obj['resourceArn'] = resourceArn;
    }

    /**
     * Constructs a <code>TableSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableSummary} obj Optional instance to populate.
     * @return {module:model/TableSummary} The populated <code>TableSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableSummary();

            if (data.hasOwnProperty('keyspaceName')) {
                obj['keyspaceName'] = ApiClient.convertToType(data['keyspaceName'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
            if (data.hasOwnProperty('resourceArn')) {
                obj['resourceArn'] = ApiClient.convertToType(data['resourceArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TableSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `keyspaceName`
        if (data['keyspaceName']) { // data not null
          String.validateJSON(data['keyspaceName']);
        }
        // validate the optional field `tableName`
        if (data['tableName']) { // data not null
          String.validateJSON(data['tableName']);
        }
        // validate the optional field `resourceArn`
        if (data['resourceArn']) { // data not null
          String.validateJSON(data['resourceArn']);
        }

        return true;
    }


}

TableSummary.RequiredProperties = ["keyspaceName", "tableName", "resourceArn"];

/**
 * @member {String} keyspaceName
 */
TableSummary.prototype['keyspaceName'] = undefined;

/**
 * @member {String} tableName
 */
TableSummary.prototype['tableName'] = undefined;

/**
 * @member {String} resourceArn
 */
TableSummary.prototype['resourceArn'] = undefined;






export default TableSummary;

