/**
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonKeyspaces);
  }
}(this, function(expect, AmazonKeyspaces) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonKeyspaces.GetTableResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTableResponse', function() {
    it('should create an instance of GetTableResponse', function() {
      // uncomment below and update the code to test GetTableResponse
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be.a(AmazonKeyspaces.GetTableResponse);
    });

    it('should have the property keyspaceName (base name: "keyspaceName")', function() {
      // uncomment below and update the code to test the property keyspaceName
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property tableName (base name: "tableName")', function() {
      // uncomment below and update the code to test the property tableName
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceArn (base name: "resourceArn")', function() {
      // uncomment below and update the code to test the property resourceArn
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property creationTimestamp (base name: "creationTimestamp")', function() {
      // uncomment below and update the code to test the property creationTimestamp
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property schemaDefinition (base name: "schemaDefinition")', function() {
      // uncomment below and update the code to test the property schemaDefinition
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property capacitySpecification (base name: "capacitySpecification")', function() {
      // uncomment below and update the code to test the property capacitySpecification
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property encryptionSpecification (base name: "encryptionSpecification")', function() {
      // uncomment below and update the code to test the property encryptionSpecification
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property pointInTimeRecovery (base name: "pointInTimeRecovery")', function() {
      // uncomment below and update the code to test the property pointInTimeRecovery
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property ttl (base name: "ttl")', function() {
      // uncomment below and update the code to test the property ttl
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property defaultTimeToLive (base name: "defaultTimeToLive")', function() {
      // uncomment below and update the code to test the property defaultTimeToLive
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientSideTimestamps (base name: "clientSideTimestamps")', function() {
      // uncomment below and update the code to test the property clientSideTimestamps
      //var instance = new AmazonKeyspaces.GetTableResponse();
      //expect(instance).to.be();
    });

  });

}));
