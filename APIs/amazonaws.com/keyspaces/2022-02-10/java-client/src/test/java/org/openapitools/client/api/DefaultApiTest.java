/*
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateKeyspaceRequest;
import org.openapitools.client.model.CreateKeyspaceResponse;
import org.openapitools.client.model.CreateTableRequest;
import org.openapitools.client.model.CreateTableResponse;
import org.openapitools.client.model.DeleteKeyspaceRequest;
import org.openapitools.client.model.DeleteTableRequest;
import org.openapitools.client.model.GetKeyspaceRequest;
import org.openapitools.client.model.GetKeyspaceResponse;
import org.openapitools.client.model.GetTableRequest;
import org.openapitools.client.model.GetTableResponse;
import org.openapitools.client.model.ListKeyspacesRequest;
import org.openapitools.client.model.ListKeyspacesResponse;
import org.openapitools.client.model.ListTablesRequest;
import org.openapitools.client.model.ListTablesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RestoreTableRequest;
import org.openapitools.client.model.RestoreTableResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateTableRequest;
import org.openapitools.client.model.UpdateTableResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;The &lt;code&gt;CreateKeyspace&lt;/code&gt; operation adds a new keyspace to your account. In an Amazon Web Services account, keyspace names must be unique within each Region.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateKeyspace&lt;/code&gt; is an asynchronous operation. You can monitor the creation status of the new keyspace by using the &lt;code&gt;GetKeyspace&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/keyspaces/latest/devguide/working-with-keyspaces.html#keyspaces-create\&quot;&gt;Creating keyspaces&lt;/a&gt; in the &lt;i&gt;Amazon Keyspaces Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createKeyspaceTest() throws ApiException {
        String xAmzTarget = null;
        CreateKeyspaceRequest createKeyspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateKeyspaceResponse response = api.createKeyspace(xAmzTarget, createKeyspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The &lt;code&gt;CreateTable&lt;/code&gt; operation adds a new table to the specified keyspace. Within a keyspace, table names must be unique.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateTable&lt;/code&gt; is an asynchronous operation. When the request is received, the status of the table is set to &lt;code&gt;CREATING&lt;/code&gt;. You can monitor the creation status of the new table by using the &lt;code&gt;GetTable&lt;/code&gt; operation, which returns the current &lt;code&gt;status&lt;/code&gt; of the table. You can start using a table when the status is &lt;code&gt;ACTIVE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/keyspaces/latest/devguide/working-with-tables.html#tables-create\&quot;&gt;Creating tables&lt;/a&gt; in the &lt;i&gt;Amazon Keyspaces Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTableTest() throws ApiException {
        String xAmzTarget = null;
        CreateTableRequest createTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTableResponse response = api.createTable(xAmzTarget, createTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The &lt;code&gt;DeleteKeyspace&lt;/code&gt; operation deletes a keyspace and all of its tables. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyspaceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteKeyspaceRequest deleteKeyspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteKeyspace(xAmzTarget, deleteKeyspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The &lt;code&gt;DeleteTable&lt;/code&gt; operation deletes a table and all of its data. After a &lt;code&gt;DeleteTable&lt;/code&gt; request is received, the specified table is in the &lt;code&gt;DELETING&lt;/code&gt; state until Amazon Keyspaces completes the deletion. If the table is in the &lt;code&gt;ACTIVE&lt;/code&gt; state, you can delete it. If a table is either in the &lt;code&gt;CREATING&lt;/code&gt; or &lt;code&gt;UPDATING&lt;/code&gt; states, then Amazon Keyspaces returns a &lt;code&gt;ResourceInUseException&lt;/code&gt;. If the specified table does not exist, Amazon Keyspaces returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. If the table is already in the &lt;code&gt;DELETING&lt;/code&gt; state, no error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTableTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTableRequest deleteTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTable(xAmzTarget, deleteTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the name and the Amazon Resource Name (ARN) of the specified table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyspaceTest() throws ApiException {
        String xAmzTarget = null;
        GetKeyspaceRequest getKeyspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKeyspaceResponse response = api.getKeyspace(xAmzTarget, getKeyspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the table, including the table&#39;s name and current status, the keyspace name, configuration settings, and metadata.&lt;/p&gt; &lt;p&gt;To read table metadata using &lt;code&gt;GetTable&lt;/code&gt;, &lt;code&gt;Select&lt;/code&gt; action permissions for the table and system tables are required to complete the operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableTest() throws ApiException {
        String xAmzTarget = null;
        GetTableRequest getTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTableResponse response = api.getTable(xAmzTarget, getTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of keyspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKeyspacesTest() throws ApiException {
        String xAmzTarget = null;
        ListKeyspacesRequest listKeyspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListKeyspacesResponse response = api.listKeyspaces(xAmzTarget, listKeyspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of tables for a specified keyspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTablesTest() throws ApiException {
        String xAmzTarget = null;
        ListTablesRequest listTablesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTablesResponse response = api.listTables(xAmzTarget, listTablesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of all tags associated with the specified Amazon Keyspaces resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Restores the specified table to the specified point in time within the &lt;code&gt;earliest_restorable_timestamp&lt;/code&gt; and the current time. For more information about restore points, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery_HowItWorks.html#howitworks_backup_window\&quot;&gt; Time window for PITR continuous backups&lt;/a&gt; in the &lt;i&gt;Amazon Keyspaces Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account.&lt;/p&gt; &lt;p&gt;When you restore using point in time recovery, Amazon Keyspaces restores your source table&#39;s schema and data to the state based on the selected timestamp &lt;code&gt;(day:hour:minute:second)&lt;/code&gt; to a new table. The Time to Live (TTL) settings are also restored to the state based on the selected timestamp.&lt;/p&gt; &lt;p&gt;In addition to the table&#39;s schema, data, and TTL settings, &lt;code&gt;RestoreTable&lt;/code&gt; restores the capacity mode, encryption, and point-in-time recovery settings from the source table. Unlike the table&#39;s schema data and TTL settings, which are restored based on the selected timestamp, these settings are always restored based on the table&#39;s settings as of the current time or when the table was deleted.&lt;/p&gt; &lt;p&gt;You can also overwrite these settings during restore:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Read/write capacity mode&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provisioned throughput capacity settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Point-in-time (PITR) settings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery_HowItWorks.html#howitworks_backup_settings\&quot;&gt;PITR restore settings&lt;/a&gt; in the &lt;i&gt;Amazon Keyspaces Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Note that the following settings are not restored, and you must configure them manually for the new table:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Automatic scaling policies (for tables that use provisioned capacity mode)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Identity and Access Management (IAM) policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon CloudWatch metrics and alarms&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreTableTest() throws ApiException {
        String xAmzTarget = null;
        RestoreTableRequest restoreTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreTableResponse response = api.restoreTable(xAmzTarget, restoreTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates a set of tags with a Amazon Keyspaces resource. You can then activate these user-defined tags so that they appear on the Cost Management Console for cost allocation tracking. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html\&quot;&gt;Adding tags and labels to Amazon Keyspaces resources&lt;/a&gt; in the &lt;i&gt;Amazon Keyspaces Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For IAM policy examples that show how to control access to Amazon Keyspaces resources based on tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/keyspaces/latest/devguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-tags\&quot;&gt;Amazon Keyspaces resource access based on tags&lt;/a&gt; in the &lt;i&gt;Amazon Keyspaces Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the association of tags from a Amazon Keyspaces resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds new columns to the table or updates one of the table&#39;s settings, for example capacity mode, encryption, point-in-time recovery, or ttl settings. Note that you can only update one specific table setting per update operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTableTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTableRequest updateTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTableResponse response = api.updateTable(xAmzTarget, updateTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
