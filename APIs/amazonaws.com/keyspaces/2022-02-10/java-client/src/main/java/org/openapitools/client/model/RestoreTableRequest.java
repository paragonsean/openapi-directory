/*
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RestoreTableRequestCapacitySpecificationOverride;
import org.openapitools.client.model.RestoreTableRequestEncryptionSpecificationOverride;
import org.openapitools.client.model.RestoreTableRequestPointInTimeRecoveryOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestoreTableRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.448186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestoreTableRequest {
  public static final String SERIALIZED_NAME_SOURCE_KEYSPACE_NAME = "sourceKeyspaceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_KEYSPACE_NAME)
  private String sourceKeyspaceName;

  public static final String SERIALIZED_NAME_SOURCE_TABLE_NAME = "sourceTableName";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE_NAME)
  private String sourceTableName;

  public static final String SERIALIZED_NAME_TARGET_KEYSPACE_NAME = "targetKeyspaceName";
  @SerializedName(SERIALIZED_NAME_TARGET_KEYSPACE_NAME)
  private String targetKeyspaceName;

  public static final String SERIALIZED_NAME_TARGET_TABLE_NAME = "targetTableName";
  @SerializedName(SERIALIZED_NAME_TARGET_TABLE_NAME)
  private String targetTableName;

  public static final String SERIALIZED_NAME_RESTORE_TIMESTAMP = "restoreTimestamp";
  @SerializedName(SERIALIZED_NAME_RESTORE_TIMESTAMP)
  private OffsetDateTime restoreTimestamp;

  public static final String SERIALIZED_NAME_CAPACITY_SPECIFICATION_OVERRIDE = "capacitySpecificationOverride";
  @SerializedName(SERIALIZED_NAME_CAPACITY_SPECIFICATION_OVERRIDE)
  private RestoreTableRequestCapacitySpecificationOverride capacitySpecificationOverride;

  public static final String SERIALIZED_NAME_ENCRYPTION_SPECIFICATION_OVERRIDE = "encryptionSpecificationOverride";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SPECIFICATION_OVERRIDE)
  private RestoreTableRequestEncryptionSpecificationOverride encryptionSpecificationOverride;

  public static final String SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_OVERRIDE = "pointInTimeRecoveryOverride";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_OVERRIDE)
  private RestoreTableRequestPointInTimeRecoveryOverride pointInTimeRecoveryOverride;

  public static final String SERIALIZED_NAME_TAGS_OVERRIDE = "tagsOverride";
  @SerializedName(SERIALIZED_NAME_TAGS_OVERRIDE)
  private List tagsOverride;

  public RestoreTableRequest() {
  }

  public RestoreTableRequest sourceKeyspaceName(String sourceKeyspaceName) {
    this.sourceKeyspaceName = sourceKeyspaceName;
    return this;
  }

  /**
   * Get sourceKeyspaceName
   * @return sourceKeyspaceName
   */
  @javax.annotation.Nonnull
  public String getSourceKeyspaceName() {
    return sourceKeyspaceName;
  }

  public void setSourceKeyspaceName(String sourceKeyspaceName) {
    this.sourceKeyspaceName = sourceKeyspaceName;
  }


  public RestoreTableRequest sourceTableName(String sourceTableName) {
    this.sourceTableName = sourceTableName;
    return this;
  }

  /**
   * Get sourceTableName
   * @return sourceTableName
   */
  @javax.annotation.Nonnull
  public String getSourceTableName() {
    return sourceTableName;
  }

  public void setSourceTableName(String sourceTableName) {
    this.sourceTableName = sourceTableName;
  }


  public RestoreTableRequest targetKeyspaceName(String targetKeyspaceName) {
    this.targetKeyspaceName = targetKeyspaceName;
    return this;
  }

  /**
   * Get targetKeyspaceName
   * @return targetKeyspaceName
   */
  @javax.annotation.Nonnull
  public String getTargetKeyspaceName() {
    return targetKeyspaceName;
  }

  public void setTargetKeyspaceName(String targetKeyspaceName) {
    this.targetKeyspaceName = targetKeyspaceName;
  }


  public RestoreTableRequest targetTableName(String targetTableName) {
    this.targetTableName = targetTableName;
    return this;
  }

  /**
   * Get targetTableName
   * @return targetTableName
   */
  @javax.annotation.Nonnull
  public String getTargetTableName() {
    return targetTableName;
  }

  public void setTargetTableName(String targetTableName) {
    this.targetTableName = targetTableName;
  }


  public RestoreTableRequest restoreTimestamp(OffsetDateTime restoreTimestamp) {
    this.restoreTimestamp = restoreTimestamp;
    return this;
  }

  /**
   * Get restoreTimestamp
   * @return restoreTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestoreTimestamp() {
    return restoreTimestamp;
  }

  public void setRestoreTimestamp(OffsetDateTime restoreTimestamp) {
    this.restoreTimestamp = restoreTimestamp;
  }


  public RestoreTableRequest capacitySpecificationOverride(RestoreTableRequestCapacitySpecificationOverride capacitySpecificationOverride) {
    this.capacitySpecificationOverride = capacitySpecificationOverride;
    return this;
  }

  /**
   * Get capacitySpecificationOverride
   * @return capacitySpecificationOverride
   */
  @javax.annotation.Nullable
  public RestoreTableRequestCapacitySpecificationOverride getCapacitySpecificationOverride() {
    return capacitySpecificationOverride;
  }

  public void setCapacitySpecificationOverride(RestoreTableRequestCapacitySpecificationOverride capacitySpecificationOverride) {
    this.capacitySpecificationOverride = capacitySpecificationOverride;
  }


  public RestoreTableRequest encryptionSpecificationOverride(RestoreTableRequestEncryptionSpecificationOverride encryptionSpecificationOverride) {
    this.encryptionSpecificationOverride = encryptionSpecificationOverride;
    return this;
  }

  /**
   * Get encryptionSpecificationOverride
   * @return encryptionSpecificationOverride
   */
  @javax.annotation.Nullable
  public RestoreTableRequestEncryptionSpecificationOverride getEncryptionSpecificationOverride() {
    return encryptionSpecificationOverride;
  }

  public void setEncryptionSpecificationOverride(RestoreTableRequestEncryptionSpecificationOverride encryptionSpecificationOverride) {
    this.encryptionSpecificationOverride = encryptionSpecificationOverride;
  }


  public RestoreTableRequest pointInTimeRecoveryOverride(RestoreTableRequestPointInTimeRecoveryOverride pointInTimeRecoveryOverride) {
    this.pointInTimeRecoveryOverride = pointInTimeRecoveryOverride;
    return this;
  }

  /**
   * Get pointInTimeRecoveryOverride
   * @return pointInTimeRecoveryOverride
   */
  @javax.annotation.Nullable
  public RestoreTableRequestPointInTimeRecoveryOverride getPointInTimeRecoveryOverride() {
    return pointInTimeRecoveryOverride;
  }

  public void setPointInTimeRecoveryOverride(RestoreTableRequestPointInTimeRecoveryOverride pointInTimeRecoveryOverride) {
    this.pointInTimeRecoveryOverride = pointInTimeRecoveryOverride;
  }


  public RestoreTableRequest tagsOverride(List tagsOverride) {
    this.tagsOverride = tagsOverride;
    return this;
  }

  /**
   * Get tagsOverride
   * @return tagsOverride
   */
  @javax.annotation.Nullable
  public List getTagsOverride() {
    return tagsOverride;
  }

  public void setTagsOverride(List tagsOverride) {
    this.tagsOverride = tagsOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreTableRequest restoreTableRequest = (RestoreTableRequest) o;
    return Objects.equals(this.sourceKeyspaceName, restoreTableRequest.sourceKeyspaceName) &&
        Objects.equals(this.sourceTableName, restoreTableRequest.sourceTableName) &&
        Objects.equals(this.targetKeyspaceName, restoreTableRequest.targetKeyspaceName) &&
        Objects.equals(this.targetTableName, restoreTableRequest.targetTableName) &&
        Objects.equals(this.restoreTimestamp, restoreTableRequest.restoreTimestamp) &&
        Objects.equals(this.capacitySpecificationOverride, restoreTableRequest.capacitySpecificationOverride) &&
        Objects.equals(this.encryptionSpecificationOverride, restoreTableRequest.encryptionSpecificationOverride) &&
        Objects.equals(this.pointInTimeRecoveryOverride, restoreTableRequest.pointInTimeRecoveryOverride) &&
        Objects.equals(this.tagsOverride, restoreTableRequest.tagsOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceKeyspaceName, sourceTableName, targetKeyspaceName, targetTableName, restoreTimestamp, capacitySpecificationOverride, encryptionSpecificationOverride, pointInTimeRecoveryOverride, tagsOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreTableRequest {\n");
    sb.append("    sourceKeyspaceName: ").append(toIndentedString(sourceKeyspaceName)).append("\n");
    sb.append("    sourceTableName: ").append(toIndentedString(sourceTableName)).append("\n");
    sb.append("    targetKeyspaceName: ").append(toIndentedString(targetKeyspaceName)).append("\n");
    sb.append("    targetTableName: ").append(toIndentedString(targetTableName)).append("\n");
    sb.append("    restoreTimestamp: ").append(toIndentedString(restoreTimestamp)).append("\n");
    sb.append("    capacitySpecificationOverride: ").append(toIndentedString(capacitySpecificationOverride)).append("\n");
    sb.append("    encryptionSpecificationOverride: ").append(toIndentedString(encryptionSpecificationOverride)).append("\n");
    sb.append("    pointInTimeRecoveryOverride: ").append(toIndentedString(pointInTimeRecoveryOverride)).append("\n");
    sb.append("    tagsOverride: ").append(toIndentedString(tagsOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceKeyspaceName");
    openapiFields.add("sourceTableName");
    openapiFields.add("targetKeyspaceName");
    openapiFields.add("targetTableName");
    openapiFields.add("restoreTimestamp");
    openapiFields.add("capacitySpecificationOverride");
    openapiFields.add("encryptionSpecificationOverride");
    openapiFields.add("pointInTimeRecoveryOverride");
    openapiFields.add("tagsOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceKeyspaceName");
    openapiRequiredFields.add("sourceTableName");
    openapiRequiredFields.add("targetKeyspaceName");
    openapiRequiredFields.add("targetTableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestoreTableRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreTableRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreTableRequest is not found in the empty JSON string", RestoreTableRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestoreTableRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestoreTableRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RestoreTableRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `sourceKeyspaceName`
      String.validateJsonElement(jsonObj.get("sourceKeyspaceName"));
      // validate the required field `sourceTableName`
      String.validateJsonElement(jsonObj.get("sourceTableName"));
      // validate the required field `targetKeyspaceName`
      String.validateJsonElement(jsonObj.get("targetKeyspaceName"));
      // validate the required field `targetTableName`
      String.validateJsonElement(jsonObj.get("targetTableName"));
      // validate the optional field `restoreTimestamp`
      if (jsonObj.get("restoreTimestamp") != null && !jsonObj.get("restoreTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("restoreTimestamp"));
      }
      // validate the optional field `capacitySpecificationOverride`
      if (jsonObj.get("capacitySpecificationOverride") != null && !jsonObj.get("capacitySpecificationOverride").isJsonNull()) {
        RestoreTableRequestCapacitySpecificationOverride.validateJsonElement(jsonObj.get("capacitySpecificationOverride"));
      }
      // validate the optional field `encryptionSpecificationOverride`
      if (jsonObj.get("encryptionSpecificationOverride") != null && !jsonObj.get("encryptionSpecificationOverride").isJsonNull()) {
        RestoreTableRequestEncryptionSpecificationOverride.validateJsonElement(jsonObj.get("encryptionSpecificationOverride"));
      }
      // validate the optional field `pointInTimeRecoveryOverride`
      if (jsonObj.get("pointInTimeRecoveryOverride") != null && !jsonObj.get("pointInTimeRecoveryOverride").isJsonNull()) {
        RestoreTableRequestPointInTimeRecoveryOverride.validateJsonElement(jsonObj.get("pointInTimeRecoveryOverride"));
      }
      // validate the optional field `tagsOverride`
      if (jsonObj.get("tagsOverride") != null && !jsonObj.get("tagsOverride").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tagsOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreTableRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreTableRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreTableRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreTableRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreTableRequest>() {
           @Override
           public void write(JsonWriter out, RestoreTableRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreTableRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestoreTableRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestoreTableRequest
   * @throws IOException if the JSON string is invalid with respect to RestoreTableRequest
   */
  public static RestoreTableRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreTableRequest.class);
  }

  /**
   * Convert an instance of RestoreTableRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

