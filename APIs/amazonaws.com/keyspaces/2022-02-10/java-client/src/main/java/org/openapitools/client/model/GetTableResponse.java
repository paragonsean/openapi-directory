/*
 * Amazon Keyspaces
 * <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra-compatible database service. Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra workloads in the Amazon Web Services Cloud. With just a few clicks on the Amazon Web Services Management Console or a few lines of code, you can create keyspaces and tables in Amazon Keyspaces, without deploying any infrastructure or installing software. </p> <p>In addition to supporting Cassandra Query Language (CQL) requests via open-source Cassandra drivers, Amazon Keyspaces supports data definition language (DDL) operations to manage keyspaces and tables using the Amazon Web Services SDK and CLI, as well as infrastructure as code (IaC) services and tools such as CloudFormation and Terraform. This API reference describes the supported DDL operations in detail.</p> <p>For the list of all supported CQL APIs, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html\">Supported Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon Keyspaces API actions are recorded with CloudTrail, see <a href=\"https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail\">Amazon Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p> <p>For more information about Amazon Web Services APIs, for example how to implement retry logic or how to sign Amazon Web Services API requests, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a> in the <i>General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2022-02-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetTableResponseCapacitySpecification;
import org.openapitools.client.model.GetTableResponseClientSideTimestamps;
import org.openapitools.client.model.GetTableResponseComment;
import org.openapitools.client.model.GetTableResponseEncryptionSpecification;
import org.openapitools.client.model.GetTableResponsePointInTimeRecovery;
import org.openapitools.client.model.GetTableResponseSchemaDefinition;
import org.openapitools.client.model.GetTableResponseTtl;
import org.openapitools.client.model.TableStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTableResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:12.448186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTableResponse {
  public static final String SERIALIZED_NAME_KEYSPACE_NAME = "keyspaceName";
  @SerializedName(SERIALIZED_NAME_KEYSPACE_NAME)
  private String keyspaceName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "resourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_CREATION_TIMESTAMP = "creationTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATION_TIMESTAMP)
  private OffsetDateTime creationTimestamp;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TableStatus status;

  public static final String SERIALIZED_NAME_SCHEMA_DEFINITION = "schemaDefinition";
  @SerializedName(SERIALIZED_NAME_SCHEMA_DEFINITION)
  private GetTableResponseSchemaDefinition schemaDefinition;

  public static final String SERIALIZED_NAME_CAPACITY_SPECIFICATION = "capacitySpecification";
  @SerializedName(SERIALIZED_NAME_CAPACITY_SPECIFICATION)
  private GetTableResponseCapacitySpecification capacitySpecification;

  public static final String SERIALIZED_NAME_ENCRYPTION_SPECIFICATION = "encryptionSpecification";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SPECIFICATION)
  private GetTableResponseEncryptionSpecification encryptionSpecification;

  public static final String SERIALIZED_NAME_POINT_IN_TIME_RECOVERY = "pointInTimeRecovery";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME_RECOVERY)
  private GetTableResponsePointInTimeRecovery pointInTimeRecovery;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private GetTableResponseTtl ttl;

  public static final String SERIALIZED_NAME_DEFAULT_TIME_TO_LIVE = "defaultTimeToLive";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIME_TO_LIVE)
  private Integer defaultTimeToLive;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private GetTableResponseComment comment;

  public static final String SERIALIZED_NAME_CLIENT_SIDE_TIMESTAMPS = "clientSideTimestamps";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIDE_TIMESTAMPS)
  private GetTableResponseClientSideTimestamps clientSideTimestamps;

  public GetTableResponse() {
  }

  public GetTableResponse keyspaceName(String keyspaceName) {
    this.keyspaceName = keyspaceName;
    return this;
  }

  /**
   * Get keyspaceName
   * @return keyspaceName
   */
  @javax.annotation.Nonnull
  public String getKeyspaceName() {
    return keyspaceName;
  }

  public void setKeyspaceName(String keyspaceName) {
    this.keyspaceName = keyspaceName;
  }


  public GetTableResponse tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public GetTableResponse resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nonnull
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public GetTableResponse creationTimestamp(OffsetDateTime creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

  /**
   * Get creationTimestamp
   * @return creationTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimestamp() {
    return creationTimestamp;
  }

  public void setCreationTimestamp(OffsetDateTime creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }


  public GetTableResponse status(TableStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TableStatus getStatus() {
    return status;
  }

  public void setStatus(TableStatus status) {
    this.status = status;
  }


  public GetTableResponse schemaDefinition(GetTableResponseSchemaDefinition schemaDefinition) {
    this.schemaDefinition = schemaDefinition;
    return this;
  }

  /**
   * Get schemaDefinition
   * @return schemaDefinition
   */
  @javax.annotation.Nullable
  public GetTableResponseSchemaDefinition getSchemaDefinition() {
    return schemaDefinition;
  }

  public void setSchemaDefinition(GetTableResponseSchemaDefinition schemaDefinition) {
    this.schemaDefinition = schemaDefinition;
  }


  public GetTableResponse capacitySpecification(GetTableResponseCapacitySpecification capacitySpecification) {
    this.capacitySpecification = capacitySpecification;
    return this;
  }

  /**
   * Get capacitySpecification
   * @return capacitySpecification
   */
  @javax.annotation.Nullable
  public GetTableResponseCapacitySpecification getCapacitySpecification() {
    return capacitySpecification;
  }

  public void setCapacitySpecification(GetTableResponseCapacitySpecification capacitySpecification) {
    this.capacitySpecification = capacitySpecification;
  }


  public GetTableResponse encryptionSpecification(GetTableResponseEncryptionSpecification encryptionSpecification) {
    this.encryptionSpecification = encryptionSpecification;
    return this;
  }

  /**
   * Get encryptionSpecification
   * @return encryptionSpecification
   */
  @javax.annotation.Nullable
  public GetTableResponseEncryptionSpecification getEncryptionSpecification() {
    return encryptionSpecification;
  }

  public void setEncryptionSpecification(GetTableResponseEncryptionSpecification encryptionSpecification) {
    this.encryptionSpecification = encryptionSpecification;
  }


  public GetTableResponse pointInTimeRecovery(GetTableResponsePointInTimeRecovery pointInTimeRecovery) {
    this.pointInTimeRecovery = pointInTimeRecovery;
    return this;
  }

  /**
   * Get pointInTimeRecovery
   * @return pointInTimeRecovery
   */
  @javax.annotation.Nullable
  public GetTableResponsePointInTimeRecovery getPointInTimeRecovery() {
    return pointInTimeRecovery;
  }

  public void setPointInTimeRecovery(GetTableResponsePointInTimeRecovery pointInTimeRecovery) {
    this.pointInTimeRecovery = pointInTimeRecovery;
  }


  public GetTableResponse ttl(GetTableResponseTtl ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public GetTableResponseTtl getTtl() {
    return ttl;
  }

  public void setTtl(GetTableResponseTtl ttl) {
    this.ttl = ttl;
  }


  public GetTableResponse defaultTimeToLive(Integer defaultTimeToLive) {
    this.defaultTimeToLive = defaultTimeToLive;
    return this;
  }

  /**
   * Get defaultTimeToLive
   * @return defaultTimeToLive
   */
  @javax.annotation.Nullable
  public Integer getDefaultTimeToLive() {
    return defaultTimeToLive;
  }

  public void setDefaultTimeToLive(Integer defaultTimeToLive) {
    this.defaultTimeToLive = defaultTimeToLive;
  }


  public GetTableResponse comment(GetTableResponseComment comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public GetTableResponseComment getComment() {
    return comment;
  }

  public void setComment(GetTableResponseComment comment) {
    this.comment = comment;
  }


  public GetTableResponse clientSideTimestamps(GetTableResponseClientSideTimestamps clientSideTimestamps) {
    this.clientSideTimestamps = clientSideTimestamps;
    return this;
  }

  /**
   * Get clientSideTimestamps
   * @return clientSideTimestamps
   */
  @javax.annotation.Nullable
  public GetTableResponseClientSideTimestamps getClientSideTimestamps() {
    return clientSideTimestamps;
  }

  public void setClientSideTimestamps(GetTableResponseClientSideTimestamps clientSideTimestamps) {
    this.clientSideTimestamps = clientSideTimestamps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTableResponse getTableResponse = (GetTableResponse) o;
    return Objects.equals(this.keyspaceName, getTableResponse.keyspaceName) &&
        Objects.equals(this.tableName, getTableResponse.tableName) &&
        Objects.equals(this.resourceArn, getTableResponse.resourceArn) &&
        Objects.equals(this.creationTimestamp, getTableResponse.creationTimestamp) &&
        Objects.equals(this.status, getTableResponse.status) &&
        Objects.equals(this.schemaDefinition, getTableResponse.schemaDefinition) &&
        Objects.equals(this.capacitySpecification, getTableResponse.capacitySpecification) &&
        Objects.equals(this.encryptionSpecification, getTableResponse.encryptionSpecification) &&
        Objects.equals(this.pointInTimeRecovery, getTableResponse.pointInTimeRecovery) &&
        Objects.equals(this.ttl, getTableResponse.ttl) &&
        Objects.equals(this.defaultTimeToLive, getTableResponse.defaultTimeToLive) &&
        Objects.equals(this.comment, getTableResponse.comment) &&
        Objects.equals(this.clientSideTimestamps, getTableResponse.clientSideTimestamps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyspaceName, tableName, resourceArn, creationTimestamp, status, schemaDefinition, capacitySpecification, encryptionSpecification, pointInTimeRecovery, ttl, defaultTimeToLive, comment, clientSideTimestamps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTableResponse {\n");
    sb.append("    keyspaceName: ").append(toIndentedString(keyspaceName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    schemaDefinition: ").append(toIndentedString(schemaDefinition)).append("\n");
    sb.append("    capacitySpecification: ").append(toIndentedString(capacitySpecification)).append("\n");
    sb.append("    encryptionSpecification: ").append(toIndentedString(encryptionSpecification)).append("\n");
    sb.append("    pointInTimeRecovery: ").append(toIndentedString(pointInTimeRecovery)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    defaultTimeToLive: ").append(toIndentedString(defaultTimeToLive)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    clientSideTimestamps: ").append(toIndentedString(clientSideTimestamps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyspaceName");
    openapiFields.add("tableName");
    openapiFields.add("resourceArn");
    openapiFields.add("creationTimestamp");
    openapiFields.add("status");
    openapiFields.add("schemaDefinition");
    openapiFields.add("capacitySpecification");
    openapiFields.add("encryptionSpecification");
    openapiFields.add("pointInTimeRecovery");
    openapiFields.add("ttl");
    openapiFields.add("defaultTimeToLive");
    openapiFields.add("comment");
    openapiFields.add("clientSideTimestamps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyspaceName");
    openapiRequiredFields.add("tableName");
    openapiRequiredFields.add("resourceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTableResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTableResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTableResponse is not found in the empty JSON string", GetTableResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTableResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTableResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTableResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `keyspaceName`
      String.validateJsonElement(jsonObj.get("keyspaceName"));
      // validate the required field `tableName`
      String.validateJsonElement(jsonObj.get("tableName"));
      // validate the required field `resourceArn`
      String.validateJsonElement(jsonObj.get("resourceArn"));
      // validate the optional field `creationTimestamp`
      if (jsonObj.get("creationTimestamp") != null && !jsonObj.get("creationTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTimestamp"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TableStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `schemaDefinition`
      if (jsonObj.get("schemaDefinition") != null && !jsonObj.get("schemaDefinition").isJsonNull()) {
        GetTableResponseSchemaDefinition.validateJsonElement(jsonObj.get("schemaDefinition"));
      }
      // validate the optional field `capacitySpecification`
      if (jsonObj.get("capacitySpecification") != null && !jsonObj.get("capacitySpecification").isJsonNull()) {
        GetTableResponseCapacitySpecification.validateJsonElement(jsonObj.get("capacitySpecification"));
      }
      // validate the optional field `encryptionSpecification`
      if (jsonObj.get("encryptionSpecification") != null && !jsonObj.get("encryptionSpecification").isJsonNull()) {
        GetTableResponseEncryptionSpecification.validateJsonElement(jsonObj.get("encryptionSpecification"));
      }
      // validate the optional field `pointInTimeRecovery`
      if (jsonObj.get("pointInTimeRecovery") != null && !jsonObj.get("pointInTimeRecovery").isJsonNull()) {
        GetTableResponsePointInTimeRecovery.validateJsonElement(jsonObj.get("pointInTimeRecovery"));
      }
      // validate the optional field `ttl`
      if (jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) {
        GetTableResponseTtl.validateJsonElement(jsonObj.get("ttl"));
      }
      // validate the optional field `defaultTimeToLive`
      if (jsonObj.get("defaultTimeToLive") != null && !jsonObj.get("defaultTimeToLive").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("defaultTimeToLive"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        GetTableResponseComment.validateJsonElement(jsonObj.get("comment"));
      }
      // validate the optional field `clientSideTimestamps`
      if (jsonObj.get("clientSideTimestamps") != null && !jsonObj.get("clientSideTimestamps").isJsonNull()) {
        GetTableResponseClientSideTimestamps.validateJsonElement(jsonObj.get("clientSideTimestamps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTableResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTableResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTableResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTableResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTableResponse>() {
           @Override
           public void write(JsonWriter out, GetTableResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTableResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTableResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTableResponse
   * @throws IOException if the JSON string is invalid with respect to GetTableResponse
   */
  public static GetTableResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTableResponse.class);
  }

  /**
   * Convert an instance of GetTableResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

