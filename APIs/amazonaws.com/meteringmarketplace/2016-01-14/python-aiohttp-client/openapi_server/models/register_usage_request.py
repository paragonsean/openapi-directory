# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterUsageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_code: str=None, public_key_version: int=None, nonce: str=None):
        """RegisterUsageRequest - a model defined in OpenAPI

        :param product_code: The product_code of this RegisterUsageRequest.
        :param public_key_version: The public_key_version of this RegisterUsageRequest.
        :param nonce: The nonce of this RegisterUsageRequest.
        """
        self.openapi_types = {
            'product_code': str,
            'public_key_version': int,
            'nonce': str
        }

        self.attribute_map = {
            'product_code': 'ProductCode',
            'public_key_version': 'PublicKeyVersion',
            'nonce': 'Nonce'
        }

        self._product_code = product_code
        self._public_key_version = public_key_version
        self._nonce = nonce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterUsageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterUsageRequest of this RegisterUsageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_code(self):
        """Gets the product_code of this RegisterUsageRequest.


        :return: The product_code of this RegisterUsageRequest.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this RegisterUsageRequest.


        :param product_code: The product_code of this RegisterUsageRequest.
        :type product_code: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")

        self._product_code = product_code

    @property
    def public_key_version(self):
        """Gets the public_key_version of this RegisterUsageRequest.


        :return: The public_key_version of this RegisterUsageRequest.
        :rtype: int
        """
        return self._public_key_version

    @public_key_version.setter
    def public_key_version(self, public_key_version):
        """Sets the public_key_version of this RegisterUsageRequest.


        :param public_key_version: The public_key_version of this RegisterUsageRequest.
        :type public_key_version: int
        """
        if public_key_version is None:
            raise ValueError("Invalid value for `public_key_version`, must not be `None`")

        self._public_key_version = public_key_version

    @property
    def nonce(self):
        """Gets the nonce of this RegisterUsageRequest.


        :return: The nonce of this RegisterUsageRequest.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this RegisterUsageRequest.


        :param nonce: The nonce of this RegisterUsageRequest.
        :type nonce: str
        """

        self._nonce = nonce
