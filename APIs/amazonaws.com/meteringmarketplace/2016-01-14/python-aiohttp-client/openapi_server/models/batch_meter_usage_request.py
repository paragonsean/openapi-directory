# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchMeterUsageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, usage_records: List=None, product_code: str=None):
        """BatchMeterUsageRequest - a model defined in OpenAPI

        :param usage_records: The usage_records of this BatchMeterUsageRequest.
        :param product_code: The product_code of this BatchMeterUsageRequest.
        """
        self.openapi_types = {
            'usage_records': List,
            'product_code': str
        }

        self.attribute_map = {
            'usage_records': 'UsageRecords',
            'product_code': 'ProductCode'
        }

        self._usage_records = usage_records
        self._product_code = product_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchMeterUsageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchMeterUsageRequest of this BatchMeterUsageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def usage_records(self):
        """Gets the usage_records of this BatchMeterUsageRequest.


        :return: The usage_records of this BatchMeterUsageRequest.
        :rtype: List
        """
        return self._usage_records

    @usage_records.setter
    def usage_records(self, usage_records):
        """Sets the usage_records of this BatchMeterUsageRequest.


        :param usage_records: The usage_records of this BatchMeterUsageRequest.
        :type usage_records: List
        """
        if usage_records is None:
            raise ValueError("Invalid value for `usage_records`, must not be `None`")

        self._usage_records = usage_records

    @property
    def product_code(self):
        """Gets the product_code of this BatchMeterUsageRequest.


        :return: The product_code of this BatchMeterUsageRequest.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this BatchMeterUsageRequest.


        :param product_code: The product_code of this BatchMeterUsageRequest.
        :type product_code: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")

        self._product_code = product_code
