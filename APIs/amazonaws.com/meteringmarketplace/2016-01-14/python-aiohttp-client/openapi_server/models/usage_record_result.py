# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_record_result_status import UsageRecordResultStatus
from openapi_server.models.usage_record_result_usage_record import UsageRecordResultUsageRecord
from openapi_server import util


class UsageRecordResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, usage_record: UsageRecordResultUsageRecord=None, metering_record_id: str=None, status: UsageRecordResultStatus=None):
        """UsageRecordResult - a model defined in OpenAPI

        :param usage_record: The usage_record of this UsageRecordResult.
        :param metering_record_id: The metering_record_id of this UsageRecordResult.
        :param status: The status of this UsageRecordResult.
        """
        self.openapi_types = {
            'usage_record': UsageRecordResultUsageRecord,
            'metering_record_id': str,
            'status': UsageRecordResultStatus
        }

        self.attribute_map = {
            'usage_record': 'UsageRecord',
            'metering_record_id': 'MeteringRecordId',
            'status': 'Status'
        }

        self._usage_record = usage_record
        self._metering_record_id = metering_record_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageRecordResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageRecordResult of this UsageRecordResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def usage_record(self):
        """Gets the usage_record of this UsageRecordResult.


        :return: The usage_record of this UsageRecordResult.
        :rtype: UsageRecordResultUsageRecord
        """
        return self._usage_record

    @usage_record.setter
    def usage_record(self, usage_record):
        """Sets the usage_record of this UsageRecordResult.


        :param usage_record: The usage_record of this UsageRecordResult.
        :type usage_record: UsageRecordResultUsageRecord
        """

        self._usage_record = usage_record

    @property
    def metering_record_id(self):
        """Gets the metering_record_id of this UsageRecordResult.


        :return: The metering_record_id of this UsageRecordResult.
        :rtype: str
        """
        return self._metering_record_id

    @metering_record_id.setter
    def metering_record_id(self, metering_record_id):
        """Sets the metering_record_id of this UsageRecordResult.


        :param metering_record_id: The metering_record_id of this UsageRecordResult.
        :type metering_record_id: str
        """

        self._metering_record_id = metering_record_id

    @property
    def status(self):
        """Gets the status of this UsageRecordResult.


        :return: The status of this UsageRecordResult.
        :rtype: UsageRecordResultStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UsageRecordResult.


        :param status: The status of this UsageRecordResult.
        :type status: UsageRecordResultStatus
        """

        self._status = status
