# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeterUsageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_code: str=None, timestamp: datetime=None, usage_dimension: str=None, usage_quantity: int=None, dry_run: bool=None, usage_allocations: List=None):
        """MeterUsageRequest - a model defined in OpenAPI

        :param product_code: The product_code of this MeterUsageRequest.
        :param timestamp: The timestamp of this MeterUsageRequest.
        :param usage_dimension: The usage_dimension of this MeterUsageRequest.
        :param usage_quantity: The usage_quantity of this MeterUsageRequest.
        :param dry_run: The dry_run of this MeterUsageRequest.
        :param usage_allocations: The usage_allocations of this MeterUsageRequest.
        """
        self.openapi_types = {
            'product_code': str,
            'timestamp': datetime,
            'usage_dimension': str,
            'usage_quantity': int,
            'dry_run': bool,
            'usage_allocations': List
        }

        self.attribute_map = {
            'product_code': 'ProductCode',
            'timestamp': 'Timestamp',
            'usage_dimension': 'UsageDimension',
            'usage_quantity': 'UsageQuantity',
            'dry_run': 'DryRun',
            'usage_allocations': 'UsageAllocations'
        }

        self._product_code = product_code
        self._timestamp = timestamp
        self._usage_dimension = usage_dimension
        self._usage_quantity = usage_quantity
        self._dry_run = dry_run
        self._usage_allocations = usage_allocations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeterUsageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeterUsageRequest of this MeterUsageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_code(self):
        """Gets the product_code of this MeterUsageRequest.


        :return: The product_code of this MeterUsageRequest.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this MeterUsageRequest.


        :param product_code: The product_code of this MeterUsageRequest.
        :type product_code: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")

        self._product_code = product_code

    @property
    def timestamp(self):
        """Gets the timestamp of this MeterUsageRequest.


        :return: The timestamp of this MeterUsageRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MeterUsageRequest.


        :param timestamp: The timestamp of this MeterUsageRequest.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def usage_dimension(self):
        """Gets the usage_dimension of this MeterUsageRequest.


        :return: The usage_dimension of this MeterUsageRequest.
        :rtype: str
        """
        return self._usage_dimension

    @usage_dimension.setter
    def usage_dimension(self, usage_dimension):
        """Sets the usage_dimension of this MeterUsageRequest.


        :param usage_dimension: The usage_dimension of this MeterUsageRequest.
        :type usage_dimension: str
        """
        if usage_dimension is None:
            raise ValueError("Invalid value for `usage_dimension`, must not be `None`")

        self._usage_dimension = usage_dimension

    @property
    def usage_quantity(self):
        """Gets the usage_quantity of this MeterUsageRequest.


        :return: The usage_quantity of this MeterUsageRequest.
        :rtype: int
        """
        return self._usage_quantity

    @usage_quantity.setter
    def usage_quantity(self, usage_quantity):
        """Sets the usage_quantity of this MeterUsageRequest.


        :param usage_quantity: The usage_quantity of this MeterUsageRequest.
        :type usage_quantity: int
        """

        self._usage_quantity = usage_quantity

    @property
    def dry_run(self):
        """Gets the dry_run of this MeterUsageRequest.


        :return: The dry_run of this MeterUsageRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this MeterUsageRequest.


        :param dry_run: The dry_run of this MeterUsageRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def usage_allocations(self):
        """Gets the usage_allocations of this MeterUsageRequest.


        :return: The usage_allocations of this MeterUsageRequest.
        :rtype: List
        """
        return self._usage_allocations

    @usage_allocations.setter
    def usage_allocations(self, usage_allocations):
        """Sets the usage_allocations of this MeterUsageRequest.


        :param usage_allocations: The usage_allocations of this MeterUsageRequest.
        :type usage_allocations: List
        """

        self._usage_allocations = usage_allocations
