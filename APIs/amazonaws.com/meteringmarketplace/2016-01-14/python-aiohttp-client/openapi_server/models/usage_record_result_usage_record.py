# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageRecordResultUsageRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, customer_identifier: str=None, dimension: str=None, quantity: int=None, usage_allocations: List=None):
        """UsageRecordResultUsageRecord - a model defined in OpenAPI

        :param timestamp: The timestamp of this UsageRecordResultUsageRecord.
        :param customer_identifier: The customer_identifier of this UsageRecordResultUsageRecord.
        :param dimension: The dimension of this UsageRecordResultUsageRecord.
        :param quantity: The quantity of this UsageRecordResultUsageRecord.
        :param usage_allocations: The usage_allocations of this UsageRecordResultUsageRecord.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'customer_identifier': str,
            'dimension': str,
            'quantity': int,
            'usage_allocations': List
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'customer_identifier': 'CustomerIdentifier',
            'dimension': 'Dimension',
            'quantity': 'Quantity',
            'usage_allocations': 'UsageAllocations'
        }

        self._timestamp = timestamp
        self._customer_identifier = customer_identifier
        self._dimension = dimension
        self._quantity = quantity
        self._usage_allocations = usage_allocations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageRecordResultUsageRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageRecordResult_UsageRecord of this UsageRecordResultUsageRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this UsageRecordResultUsageRecord.


        :return: The timestamp of this UsageRecordResultUsageRecord.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this UsageRecordResultUsageRecord.


        :param timestamp: The timestamp of this UsageRecordResultUsageRecord.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def customer_identifier(self):
        """Gets the customer_identifier of this UsageRecordResultUsageRecord.


        :return: The customer_identifier of this UsageRecordResultUsageRecord.
        :rtype: str
        """
        return self._customer_identifier

    @customer_identifier.setter
    def customer_identifier(self, customer_identifier):
        """Sets the customer_identifier of this UsageRecordResultUsageRecord.


        :param customer_identifier: The customer_identifier of this UsageRecordResultUsageRecord.
        :type customer_identifier: str
        """
        if customer_identifier is None:
            raise ValueError("Invalid value for `customer_identifier`, must not be `None`")

        self._customer_identifier = customer_identifier

    @property
    def dimension(self):
        """Gets the dimension of this UsageRecordResultUsageRecord.


        :return: The dimension of this UsageRecordResultUsageRecord.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this UsageRecordResultUsageRecord.


        :param dimension: The dimension of this UsageRecordResultUsageRecord.
        :type dimension: str
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")

        self._dimension = dimension

    @property
    def quantity(self):
        """Gets the quantity of this UsageRecordResultUsageRecord.


        :return: The quantity of this UsageRecordResultUsageRecord.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this UsageRecordResultUsageRecord.


        :param quantity: The quantity of this UsageRecordResultUsageRecord.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def usage_allocations(self):
        """Gets the usage_allocations of this UsageRecordResultUsageRecord.


        :return: The usage_allocations of this UsageRecordResultUsageRecord.
        :rtype: List
        """
        return self._usage_allocations

    @usage_allocations.setter
    def usage_allocations(self, usage_allocations):
        """Sets the usage_allocations of this UsageRecordResultUsageRecord.


        :param usage_allocations: The usage_allocations of this UsageRecordResultUsageRecord.
        :type usage_allocations: List
        """

        self._usage_allocations = usage_allocations
