/**
 * AWSMarketplace Metering
 * <fullname>AWS Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\">AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a container running on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering record for a set of customers. <code>BatchMeterUsage</code> is called from a software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you can do so if you want to receive usage data in your seller reports. For more information on using the <code>RegisterUsage</code> operation, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\">Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS CloudTrail User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageAllocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageAllocation::OAIUsageAllocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageAllocation::OAIUsageAllocation() {
    this->initializeModel();
}

OAIUsageAllocation::~OAIUsageAllocation() {}

void OAIUsageAllocation::initializeModel() {

    m_allocated_usage_quantity_isSet = false;
    m_allocated_usage_quantity_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUsageAllocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageAllocation::fromJsonObject(QJsonObject json) {

    m_allocated_usage_quantity_isValid = ::OpenAPI::fromJsonValue(m_allocated_usage_quantity, json[QString("AllocatedUsageQuantity")]);
    m_allocated_usage_quantity_isSet = !json[QString("AllocatedUsageQuantity")].isNull() && m_allocated_usage_quantity_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIUsageAllocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageAllocation::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_usage_quantity_isSet) {
        obj.insert(QString("AllocatedUsageQuantity"), ::OpenAPI::toJsonValue(m_allocated_usage_quantity));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAIUsageAllocation::getAllocatedUsageQuantity() const {
    return m_allocated_usage_quantity;
}
void OAIUsageAllocation::setAllocatedUsageQuantity(const qint32 &allocated_usage_quantity) {
    m_allocated_usage_quantity = allocated_usage_quantity;
    m_allocated_usage_quantity_isSet = true;
}

bool OAIUsageAllocation::is_allocated_usage_quantity_Set() const{
    return m_allocated_usage_quantity_isSet;
}

bool OAIUsageAllocation::is_allocated_usage_quantity_Valid() const{
    return m_allocated_usage_quantity_isValid;
}

QList OAIUsageAllocation::getTags() const {
    return m_tags;
}
void OAIUsageAllocation::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUsageAllocation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUsageAllocation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUsageAllocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_usage_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageAllocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allocated_usage_quantity_isValid && true;
}

} // namespace OpenAPI
