/**
 * AWSMarketplace Metering
 * <fullname>AWS Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\">AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a container running on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering record for a set of customers. <code>BatchMeterUsage</code> is called from a software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you can do so if you want to receive usage data in your seller reports. For more information on using the <code>RegisterUsage</code> operation, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\">Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS CloudTrail User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeterUsageRequest.h
 *
 * 
 */

#ifndef OAIMeterUsageRequest_H
#define OAIMeterUsageRequest_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeterUsageRequest : public OAIObject {
public:
    OAIMeterUsageRequest();
    OAIMeterUsageRequest(QString json);
    ~OAIMeterUsageRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProductCode() const;
    void setProductCode(const QString &product_code);
    bool is_product_code_Set() const;
    bool is_product_code_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getUsageDimension() const;
    void setUsageDimension(const QString &usage_dimension);
    bool is_usage_dimension_Set() const;
    bool is_usage_dimension_Valid() const;

    qint32 getUsageQuantity() const;
    void setUsageQuantity(const qint32 &usage_quantity);
    bool is_usage_quantity_Set() const;
    bool is_usage_quantity_Valid() const;

    bool getDryRun() const;
    void setDryRun(const bool &dry_run);
    bool is_dry_run_Set() const;
    bool is_dry_run_Valid() const;

    QList getUsageAllocations() const;
    void setUsageAllocations(const QList &usage_allocations);
    bool is_usage_allocations_Set() const;
    bool is_usage_allocations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_product_code;
    bool m_product_code_isSet;
    bool m_product_code_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_usage_dimension;
    bool m_usage_dimension_isSet;
    bool m_usage_dimension_isValid;

    qint32 m_usage_quantity;
    bool m_usage_quantity_isSet;
    bool m_usage_quantity_isValid;

    bool m_dry_run;
    bool m_dry_run_isSet;
    bool m_dry_run_isValid;

    QList m_usage_allocations;
    bool m_usage_allocations_isSet;
    bool m_usage_allocations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeterUsageRequest)

#endif // OAIMeterUsageRequest_H
