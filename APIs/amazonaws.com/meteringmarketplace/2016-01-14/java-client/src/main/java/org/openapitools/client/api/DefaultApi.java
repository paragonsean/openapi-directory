/*
 * AWSMarketplace Metering
 * <fullname>AWS Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\">AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a container running on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering record for a set of customers. <code>BatchMeterUsage</code> is called from a software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you can do so if you want to receive usage data in your seller reports. For more information on using the <code>RegisterUsage</code> operation, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\">Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS CloudTrail User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchMeterUsageRequest;
import org.openapitools.client.model.BatchMeterUsageResult;
import org.openapitools.client.model.MeterUsageRequest;
import org.openapitools.client.model.MeterUsageResult;
import org.openapitools.client.model.RegisterUsageRequest;
import org.openapitools.client.model.RegisterUsageResult;
import org.openapitools.client.model.ResolveCustomerRequest;
import org.openapitools.client.model.ResolveCustomerResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchMeterUsage
     * @param xAmzTarget  (required)
     * @param batchMeterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCustomerIdentifierException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchMeterUsageCall(String xAmzTarget, BatchMeterUsageRequest batchMeterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchMeterUsageRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSMPMeteringService.BatchMeterUsage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchMeterUsageValidateBeforeCall(String xAmzTarget, BatchMeterUsageRequest batchMeterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchMeterUsage(Async)");
        }

        // verify the required parameter 'batchMeterUsageRequest' is set
        if (batchMeterUsageRequest == null) {
            throw new ApiException("Missing the required parameter 'batchMeterUsageRequest' when calling batchMeterUsage(Async)");
        }

        return batchMeterUsageCall(xAmzTarget, batchMeterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; is called from a SaaS application listed on AWS Marketplace to post metering records for a set of customers.&lt;/p&gt; &lt;p&gt;For identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.&lt;/p&gt; &lt;p&gt;Every request to &lt;code&gt;BatchMeterUsage&lt;/code&gt; is for one product. If you need to meter usage for multiple products, you must make multiple calls to &lt;code&gt;BatchMeterUsage&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; can process up to 25 &lt;code&gt;UsageRecords&lt;/code&gt; at a time.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;UsageRecord&lt;/code&gt; can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; returns a list of &lt;code&gt;UsageRecordResult&lt;/code&gt; objects, showing the result for each &lt;code&gt;UsageRecord&lt;/code&gt;, as well as a list of &lt;code&gt;UnprocessedRecords&lt;/code&gt;, indicating errors in the service side that you should retry.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; requests must be less than 1MB in size.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For an example of using &lt;code&gt;BatchMeterUsage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\&quot;&gt; BatchMeterUsage code example&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchMeterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchMeterUsageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCustomerIdentifierException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public BatchMeterUsageResult batchMeterUsage(String xAmzTarget, BatchMeterUsageRequest batchMeterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchMeterUsageResult> localVarResp = batchMeterUsageWithHttpInfo(xAmzTarget, batchMeterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; is called from a SaaS application listed on AWS Marketplace to post metering records for a set of customers.&lt;/p&gt; &lt;p&gt;For identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.&lt;/p&gt; &lt;p&gt;Every request to &lt;code&gt;BatchMeterUsage&lt;/code&gt; is for one product. If you need to meter usage for multiple products, you must make multiple calls to &lt;code&gt;BatchMeterUsage&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; can process up to 25 &lt;code&gt;UsageRecords&lt;/code&gt; at a time.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;UsageRecord&lt;/code&gt; can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; returns a list of &lt;code&gt;UsageRecordResult&lt;/code&gt; objects, showing the result for each &lt;code&gt;UsageRecord&lt;/code&gt;, as well as a list of &lt;code&gt;UnprocessedRecords&lt;/code&gt;, indicating errors in the service side that you should retry.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; requests must be less than 1MB in size.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For an example of using &lt;code&gt;BatchMeterUsage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\&quot;&gt; BatchMeterUsage code example&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchMeterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchMeterUsageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCustomerIdentifierException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchMeterUsageResult> batchMeterUsageWithHttpInfo(String xAmzTarget, BatchMeterUsageRequest batchMeterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchMeterUsageValidateBeforeCall(xAmzTarget, batchMeterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchMeterUsageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; is called from a SaaS application listed on AWS Marketplace to post metering records for a set of customers.&lt;/p&gt; &lt;p&gt;For identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.&lt;/p&gt; &lt;p&gt;Every request to &lt;code&gt;BatchMeterUsage&lt;/code&gt; is for one product. If you need to meter usage for multiple products, you must make multiple calls to &lt;code&gt;BatchMeterUsage&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; can process up to 25 &lt;code&gt;UsageRecords&lt;/code&gt; at a time.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;UsageRecord&lt;/code&gt; can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; returns a list of &lt;code&gt;UsageRecordResult&lt;/code&gt; objects, showing the result for each &lt;code&gt;UsageRecord&lt;/code&gt;, as well as a list of &lt;code&gt;UnprocessedRecords&lt;/code&gt;, indicating errors in the service side that you should retry.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; requests must be less than 1MB in size.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For an example of using &lt;code&gt;BatchMeterUsage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\&quot;&gt; BatchMeterUsage code example&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchMeterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCustomerIdentifierException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchMeterUsageAsync(String xAmzTarget, BatchMeterUsageRequest batchMeterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchMeterUsageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchMeterUsageValidateBeforeCall(xAmzTarget, batchMeterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchMeterUsageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meterUsage
     * @param xAmzTarget  (required)
     * @param meterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEndpointRegionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meterUsageCall(String xAmzTarget, MeterUsageRequest meterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meterUsageRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSMPMeteringService.MeterUsage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meterUsageValidateBeforeCall(String xAmzTarget, MeterUsageRequest meterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling meterUsage(Async)");
        }

        // verify the required parameter 'meterUsageRequest' is set
        if (meterUsageRequest == null) {
            throw new ApiException("Missing the required parameter 'meterUsageRequest' when calling meterUsage(Async)");
        }

        return meterUsageCall(xAmzTarget, meterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.&lt;/p&gt; &lt;p&gt; &lt;code&gt;MeterUsage&lt;/code&gt; is authenticated on the buyer&#39;s AWS account using credentials from the EC2 instance, ECS task, or EKS pod.&lt;/p&gt; &lt;p&gt; &lt;code&gt;MeterUsage&lt;/code&gt; can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).&lt;/p&gt; &lt;p&gt;Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param meterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MeterUsageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEndpointRegionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
     </table>
     */
    public MeterUsageResult meterUsage(String xAmzTarget, MeterUsageRequest meterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MeterUsageResult> localVarResp = meterUsageWithHttpInfo(xAmzTarget, meterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.&lt;/p&gt; &lt;p&gt; &lt;code&gt;MeterUsage&lt;/code&gt; is authenticated on the buyer&#39;s AWS account using credentials from the EC2 instance, ECS task, or EKS pod.&lt;/p&gt; &lt;p&gt; &lt;code&gt;MeterUsage&lt;/code&gt; can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).&lt;/p&gt; &lt;p&gt;Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param meterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MeterUsageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEndpointRegionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeterUsageResult> meterUsageWithHttpInfo(String xAmzTarget, MeterUsageRequest meterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = meterUsageValidateBeforeCall(xAmzTarget, meterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MeterUsageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.&lt;/p&gt; &lt;p&gt; &lt;code&gt;MeterUsage&lt;/code&gt; is authenticated on the buyer&#39;s AWS account using credentials from the EC2 instance, ECS task, or EKS pod.&lt;/p&gt; &lt;p&gt; &lt;code&gt;MeterUsage&lt;/code&gt; can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).&lt;/p&gt; &lt;p&gt;Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param meterUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUsageDimensionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUsageAllocationsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEndpointRegionException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TimestampOutOfBoundsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DuplicateRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meterUsageAsync(String xAmzTarget, MeterUsageRequest meterUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MeterUsageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = meterUsageValidateBeforeCall(xAmzTarget, meterUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MeterUsageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUsage
     * @param xAmzTarget  (required)
     * @param registerUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRegionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPublicKeyVersionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUsageCall(String xAmzTarget, RegisterUsageRequest registerUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerUsageRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSMPMeteringService.RegisterUsage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUsageValidateBeforeCall(String xAmzTarget, RegisterUsageRequest registerUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling registerUsage(Async)");
        }

        // verify the required parameter 'registerUsageRequest' is set
        if (registerUsageRequest == null) {
            throw new ApiException("Missing the required parameter 'registerUsageRequest' when calling registerUsage(Async)");
        }

        return registerUsageCall(xAmzTarget, registerUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the &lt;code&gt;RegisterUsage&lt;/code&gt; operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren&#39;t required to call &lt;code&gt;RegisterUsage&lt;/code&gt;, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of &lt;code&gt;RegisterUsage&lt;/code&gt;. &lt;code&gt;RegisterUsage&lt;/code&gt; performs two primary functions: metering and entitlement.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Entitlement&lt;/i&gt;: &lt;code&gt;RegisterUsage&lt;/code&gt; allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with &lt;code&gt;RegisterUsage&lt;/code&gt; is only required to guard against unauthorized use at container startup, as such a &lt;code&gt;CustomerNotSubscribedException&lt;/code&gt; or &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; will only be thrown on the initial call to &lt;code&gt;RegisterUsage&lt;/code&gt;. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a &lt;code&gt;CustomerNotSubscribedException&lt;/code&gt;, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Metering&lt;/i&gt;: &lt;code&gt;RegisterUsage&lt;/code&gt; meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane -- your software is not required to perform any metering specific actions, other than call &lt;code&gt;RegisterUsage&lt;/code&gt; once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param registerUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RegisterUsageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRegionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPublicKeyVersionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterUsageResult registerUsage(String xAmzTarget, RegisterUsageRequest registerUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RegisterUsageResult> localVarResp = registerUsageWithHttpInfo(xAmzTarget, registerUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the &lt;code&gt;RegisterUsage&lt;/code&gt; operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren&#39;t required to call &lt;code&gt;RegisterUsage&lt;/code&gt;, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of &lt;code&gt;RegisterUsage&lt;/code&gt;. &lt;code&gt;RegisterUsage&lt;/code&gt; performs two primary functions: metering and entitlement.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Entitlement&lt;/i&gt;: &lt;code&gt;RegisterUsage&lt;/code&gt; allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with &lt;code&gt;RegisterUsage&lt;/code&gt; is only required to guard against unauthorized use at container startup, as such a &lt;code&gt;CustomerNotSubscribedException&lt;/code&gt; or &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; will only be thrown on the initial call to &lt;code&gt;RegisterUsage&lt;/code&gt;. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a &lt;code&gt;CustomerNotSubscribedException&lt;/code&gt;, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Metering&lt;/i&gt;: &lt;code&gt;RegisterUsage&lt;/code&gt; meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane -- your software is not required to perform any metering specific actions, other than call &lt;code&gt;RegisterUsage&lt;/code&gt; once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param registerUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RegisterUsageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRegionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPublicKeyVersionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterUsageResult> registerUsageWithHttpInfo(String xAmzTarget, RegisterUsageRequest registerUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = registerUsageValidateBeforeCall(xAmzTarget, registerUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RegisterUsageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the &lt;code&gt;RegisterUsage&lt;/code&gt; operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren&#39;t required to call &lt;code&gt;RegisterUsage&lt;/code&gt;, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of &lt;code&gt;RegisterUsage&lt;/code&gt;. &lt;code&gt;RegisterUsage&lt;/code&gt; performs two primary functions: metering and entitlement.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Entitlement&lt;/i&gt;: &lt;code&gt;RegisterUsage&lt;/code&gt; allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with &lt;code&gt;RegisterUsage&lt;/code&gt; is only required to guard against unauthorized use at container startup, as such a &lt;code&gt;CustomerNotSubscribedException&lt;/code&gt; or &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; will only be thrown on the initial call to &lt;code&gt;RegisterUsage&lt;/code&gt;. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a &lt;code&gt;CustomerNotSubscribedException&lt;/code&gt;, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Metering&lt;/i&gt;: &lt;code&gt;RegisterUsage&lt;/code&gt; meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane -- your software is not required to perform any metering specific actions, other than call &lt;code&gt;RegisterUsage&lt;/code&gt; once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param registerUsageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidProductCodeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRegionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPublicKeyVersionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CustomerNotEntitledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUsageAsync(String xAmzTarget, RegisterUsageRequest registerUsageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RegisterUsageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUsageValidateBeforeCall(xAmzTarget, registerUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RegisterUsageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resolveCustomer
     * @param xAmzTarget  (required)
     * @param resolveCustomerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveCustomerCall(String xAmzTarget, ResolveCustomerRequest resolveCustomerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resolveCustomerRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSMPMeteringService.ResolveCustomer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolveCustomerValidateBeforeCall(String xAmzTarget, ResolveCustomerRequest resolveCustomerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling resolveCustomer(Async)");
        }

        // verify the required parameter 'resolveCustomerRequest' is set
        if (resolveCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'resolveCustomerRequest' when calling resolveCustomer(Async)");
        }

        return resolveCustomerCall(xAmzTarget, resolveCustomerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;ResolveCustomer&lt;/code&gt; is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a &lt;code&gt;CustomerIdentifier&lt;/code&gt; along with the &lt;code&gt;CustomerAWSAccountId&lt;/code&gt; and &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The API needs to called from the seller account id used to publish the SaaS application to successfully resolve the token.&lt;/p&gt; &lt;p&gt;For an example of using &lt;code&gt;ResolveCustomer&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\&quot;&gt; ResolveCustomer code example&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param resolveCustomerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ResolveCustomerResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public ResolveCustomerResult resolveCustomer(String xAmzTarget, ResolveCustomerRequest resolveCustomerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ResolveCustomerResult> localVarResp = resolveCustomerWithHttpInfo(xAmzTarget, resolveCustomerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;ResolveCustomer&lt;/code&gt; is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a &lt;code&gt;CustomerIdentifier&lt;/code&gt; along with the &lt;code&gt;CustomerAWSAccountId&lt;/code&gt; and &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The API needs to called from the seller account id used to publish the SaaS application to successfully resolve the token.&lt;/p&gt; &lt;p&gt;For an example of using &lt;code&gt;ResolveCustomer&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\&quot;&gt; ResolveCustomer code example&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param resolveCustomerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ResolveCustomerResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResolveCustomerResult> resolveCustomerWithHttpInfo(String xAmzTarget, ResolveCustomerRequest resolveCustomerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = resolveCustomerValidateBeforeCall(xAmzTarget, resolveCustomerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ResolveCustomerResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;code&gt;ResolveCustomer&lt;/code&gt; is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a &lt;code&gt;CustomerIdentifier&lt;/code&gt; along with the &lt;code&gt;CustomerAWSAccountId&lt;/code&gt; and &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The API needs to called from the seller account id used to publish the SaaS application to successfully resolve the token.&lt;/p&gt; &lt;p&gt;For an example of using &lt;code&gt;ResolveCustomer&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\&quot;&gt; ResolveCustomer code example&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param resolveCustomerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ExpiredTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DisabledApiException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveCustomerAsync(String xAmzTarget, ResolveCustomerRequest resolveCustomerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ResolveCustomerResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolveCustomerValidateBeforeCall(xAmzTarget, resolveCustomerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ResolveCustomerResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
