/*
 * AWSMarketplace Metering
 * <fullname>AWS Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\">AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a container running on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering record for a set of customers. <code>BatchMeterUsage</code> is called from a software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you can do so if you want to receive usage data in your seller reports. For more information on using the <code>RegisterUsage</code> operation, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\">Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS CloudTrail User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsageRecordResultUsageRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:58.346189-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageRecordResultUsageRecord {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_CUSTOMER_IDENTIFIER = "CustomerIdentifier";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IDENTIFIER)
  private String customerIdentifier;

  public static final String SERIALIZED_NAME_DIMENSION = "Dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private String dimension;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_USAGE_ALLOCATIONS = "UsageAllocations";
  @SerializedName(SERIALIZED_NAME_USAGE_ALLOCATIONS)
  private List usageAllocations;

  public UsageRecordResultUsageRecord() {
  }

  public UsageRecordResultUsageRecord timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public UsageRecordResultUsageRecord customerIdentifier(String customerIdentifier) {
    this.customerIdentifier = customerIdentifier;
    return this;
  }

  /**
   * Get customerIdentifier
   * @return customerIdentifier
   */
  @javax.annotation.Nonnull
  public String getCustomerIdentifier() {
    return customerIdentifier;
  }

  public void setCustomerIdentifier(String customerIdentifier) {
    this.customerIdentifier = customerIdentifier;
  }


  public UsageRecordResultUsageRecord dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nonnull
  public String getDimension() {
    return dimension;
  }

  public void setDimension(String dimension) {
    this.dimension = dimension;
  }


  public UsageRecordResultUsageRecord quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public UsageRecordResultUsageRecord usageAllocations(List usageAllocations) {
    this.usageAllocations = usageAllocations;
    return this;
  }

  /**
   * Get usageAllocations
   * @return usageAllocations
   */
  @javax.annotation.Nullable
  public List getUsageAllocations() {
    return usageAllocations;
  }

  public void setUsageAllocations(List usageAllocations) {
    this.usageAllocations = usageAllocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageRecordResultUsageRecord usageRecordResultUsageRecord = (UsageRecordResultUsageRecord) o;
    return Objects.equals(this.timestamp, usageRecordResultUsageRecord.timestamp) &&
        Objects.equals(this.customerIdentifier, usageRecordResultUsageRecord.customerIdentifier) &&
        Objects.equals(this.dimension, usageRecordResultUsageRecord.dimension) &&
        Objects.equals(this.quantity, usageRecordResultUsageRecord.quantity) &&
        Objects.equals(this.usageAllocations, usageRecordResultUsageRecord.usageAllocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, customerIdentifier, dimension, quantity, usageAllocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageRecordResultUsageRecord {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    customerIdentifier: ").append(toIndentedString(customerIdentifier)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    usageAllocations: ").append(toIndentedString(usageAllocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("CustomerIdentifier");
    openapiFields.add("Dimension");
    openapiFields.add("Quantity");
    openapiFields.add("UsageAllocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Timestamp");
    openapiRequiredFields.add("CustomerIdentifier");
    openapiRequiredFields.add("Dimension");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageRecordResultUsageRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageRecordResultUsageRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageRecordResultUsageRecord is not found in the empty JSON string", UsageRecordResultUsageRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageRecordResultUsageRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageRecordResultUsageRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsageRecordResultUsageRecord.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      // validate the required field `CustomerIdentifier`
      String.validateJsonElement(jsonObj.get("CustomerIdentifier"));
      // validate the required field `Dimension`
      String.validateJsonElement(jsonObj.get("Dimension"));
      // validate the optional field `Quantity`
      if (jsonObj.get("Quantity") != null && !jsonObj.get("Quantity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Quantity"));
      }
      // validate the optional field `UsageAllocations`
      if (jsonObj.get("UsageAllocations") != null && !jsonObj.get("UsageAllocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UsageAllocations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageRecordResultUsageRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageRecordResultUsageRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageRecordResultUsageRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageRecordResultUsageRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageRecordResultUsageRecord>() {
           @Override
           public void write(JsonWriter out, UsageRecordResultUsageRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageRecordResultUsageRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageRecordResultUsageRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageRecordResultUsageRecord
   * @throws IOException if the JSON string is invalid with respect to UsageRecordResultUsageRecord
   */
  public static UsageRecordResultUsageRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageRecordResultUsageRecord.class);
  }

  /**
   * Convert an instance of UsageRecordResultUsageRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

