openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>AWS Marketplace Metering Service</fullname> <p>This reference\
    \ provides descriptions of the low-level AWS Marketplace Metering Service API.</p>\
    \ <p>AWS Marketplace sellers can use this API to submit usage data for custom\
    \ usage dimensions.</p> <p>For information on the permissions you need to use\
    \ this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\"\
    >AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace\
    \ Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li>\
    \ <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product.\
    \ <code>MeterUsage</code> is called from an EC2 instance or a container running\
    \ on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering\
    \ record for a set of customers. <code>BatchMeterUsage</code> is called from a\
    \ software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New\
    \ Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application\
    \ during the registration process. When a buyer visits your website during the\
    \ registration process, the buyer submits a Registration Token through the browser.\
    \ The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code>\
    \ along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>\
    \ </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b>\
    \ </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace\
    \ must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code>\
    \ operation for software entitlement and metering. Free and BYOL products for\
    \ Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>,\
    \ but you can do so if you want to receive usage data in your seller reports.\
    \ For more information on using the <code>RegisterUsage</code> operation, see\
    \ <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\"\
    >Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code>\
    \ API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that\
    \ the SaaS metering records that you sent are accurate by searching for records\
    \ with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also\
    \ use CloudTrail to audit records over time. For more information, see the <i>\
    \ <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\"\
    >AWS CloudTrail User Guide</a>.</i> </p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWSMarketplace Metering
  version: 2016-01-14
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: meteringmarketplace
  x-aws-signingName: aws-marketplace
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/meteringmarketplace-2016-01-14.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/marketplace/
servers:
- description: The AWSMarketplace Metering multi-region endpoint
  url: "http://metering.marketplace.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWSMarketplace Metering multi-region endpoint
  url: "https://metering.marketplace.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWSMarketplace Metering endpoint for China (Beijing) and China
    (Ningxia)
  url: "http://metering.marketplace.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AWSMarketplace Metering endpoint for China (Beijing) and China
    (Ningxia)
  url: "https://metering.marketplace.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=AWSMPMeteringService.BatchMeterUsage:
    post:
      description: "<p> <code>BatchMeterUsage</code> is called from a SaaS application\
        \ listed on AWS Marketplace to post metering records for a set of customers.</p>\
        \ <p>For identical requests, the API is idempotent; requests can be retried\
        \ with the same records or a subset of the input records.</p> <p>Every request\
        \ to <code>BatchMeterUsage</code> is for one product. If you need to meter\
        \ usage for multiple products, you must make multiple calls to <code>BatchMeterUsage</code>.</p>\
        \ <p>Usage records are expected to be submitted as quickly as possible after\
        \ the event that is being recorded, and are not accepted more than 6 hours\
        \ after the event.</p> <p> <code>BatchMeterUsage</code> can process up to\
        \ 25 <code>UsageRecords</code> at a time.</p> <p>A <code>UsageRecord</code>\
        \ can optionally include multiple usage allocations, to provide customers\
        \ with usage data split into buckets by tags that you define (or allow the\
        \ customer to define).</p> <p> <code>BatchMeterUsage</code> returns a list\
        \ of <code>UsageRecordResult</code> objects, showing the result for each <code>UsageRecord</code>,\
        \ as well as a list of <code>UnprocessedRecords</code>, indicating errors\
        \ in the service side that you should retry.</p> <p> <code>BatchMeterUsage</code>\
        \ requests must be less than 1MB in size.</p> <note> <p>For an example of\
        \ using <code>BatchMeterUsage</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\"\
        > BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p>\
        \ </note>"
      operationId: BatchMeterUsage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSMPMeteringService.BatchMeterUsage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchMeterUsageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchMeterUsageResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
          description: InternalServiceErrorException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidProductCodeException'
          description: InvalidProductCodeException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUsageDimensionException'
          description: InvalidUsageDimensionException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
          description: InvalidTagException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUsageAllocationsException'
          description: InvalidUsageAllocationsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCustomerIdentifierException'
          description: InvalidCustomerIdentifierException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimestampOutOfBoundsException'
          description: TimestampOutOfBoundsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledApiException'
          description: DisabledApiException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSMPMeteringService.MeterUsage:
    post:
      description: "<p>API to emit metering records. For identical requests, the API\
        \ is idempotent. It simply returns the metering record ID.</p> <p> <code>MeterUsage</code>\
        \ is authenticated on the buyer's AWS account using credentials from the EC2\
        \ instance, ECS task, or EKS pod.</p> <p> <code>MeterUsage</code> can optionally\
        \ include multiple usage allocations, to provide customers with usage data\
        \ split into buckets by tags that you define (or allow the customer to define).</p>\
        \ <p>Usage records are expected to be submitted as quickly as possible after\
        \ the event that is being recorded, and are not accepted more than 6 hours\
        \ after the event.</p>"
      operationId: MeterUsage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSMPMeteringService.MeterUsage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeterUsageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterUsageResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
          description: InternalServiceErrorException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidProductCodeException'
          description: InvalidProductCodeException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUsageDimensionException'
          description: InvalidUsageDimensionException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
          description: InvalidTagException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUsageAllocationsException'
          description: InvalidUsageAllocationsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEndpointRegionException'
          description: InvalidEndpointRegionException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimestampOutOfBoundsException'
          description: TimestampOutOfBoundsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateRequestException'
          description: DuplicateRequestException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerNotEntitledException'
          description: CustomerNotEntitledException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSMPMeteringService.RegisterUsage:
    post:
      description: "<p>Paid container software products sold through AWS Marketplace\
        \ must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code>\
        \ operation for software entitlement and metering. Free and BYOL products\
        \ for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>,\
        \ but you may choose to do so if you would like to receive usage data in your\
        \ seller reports. The sections below explain the behavior of <code>RegisterUsage</code>.\
        \ <code>RegisterUsage</code> performs two primary functions: metering and\
        \ entitlement.</p> <ul> <li> <p> <i>Entitlement</i>: <code>RegisterUsage</code>\
        \ allows you to verify that the customer running your paid software is subscribed\
        \ to your product on AWS Marketplace, enabling you to guard against unauthorized\
        \ use. Your container image that integrates with <code>RegisterUsage</code>\
        \ is only required to guard against unauthorized use at container startup,\
        \ as such a <code>CustomerNotSubscribedException</code> or <code>PlatformNotSupportedException</code>\
        \ will only be thrown on the initial call to <code>RegisterUsage</code>. Subsequent\
        \ calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS\
        \ pod will not throw a <code>CustomerNotSubscribedException</code>, even if\
        \ the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is\
        \ still running.</p> </li> <li> <p> <i>Metering</i>: <code>RegisterUsage</code>\
        \ meters software use per ECS task, per hour, or per pod for Amazon EKS with\
        \ usage prorated to the second. A minimum of 1 minute of usage applies to\
        \ tasks that are short lived. For example, if a customer has a 10 node Amazon\
        \ ECS or Amazon EKS cluster and a service configured as a Daemon Set, then\
        \ Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and\
        \ the customer will be charged: (10 * hourly_rate). Metering for software\
        \ use is automatically handled by the AWS Marketplace Metering Control Plane\
        \ -- your software is not required to perform any metering specific actions,\
        \ other than call <code>RegisterUsage</code> once for metering of software\
        \ use to commence. The AWS Marketplace Metering Control Plane will also continue\
        \ to bill customers for running ECS tasks and Amazon EKS pods, regardless\
        \ of the customers subscription state, removing the need for your software\
        \ to perform entitlement checks at runtime.</p> </li> </ul>"
      operationId: RegisterUsage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSMPMeteringService.RegisterUsage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUsageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUsageResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidProductCodeException'
          description: InvalidProductCodeException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRegionException'
          description: InvalidRegionException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPublicKeyVersionException'
          description: InvalidPublicKeyVersionException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformNotSupportedException'
          description: PlatformNotSupportedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerNotEntitledException'
          description: CustomerNotEntitledException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
          description: InternalServiceErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledApiException'
          description: DisabledApiException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSMPMeteringService.ResolveCustomer:
    post:
      description: "<p> <code>ResolveCustomer</code> is called by a SaaS application\
        \ during the registration process. When a buyer visits your website during\
        \ the registration process, the buyer submits a registration token through\
        \ their browser. The registration token is resolved through this API to obtain\
        \ a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code>\
        \ and <code>ProductCode</code>.</p> <note> <p>The API needs to called from\
        \ the seller account id used to publish the SaaS application to successfully\
        \ resolve the token.</p> <p>For an example of using <code>ResolveCustomer</code>,\
        \ see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\"\
        > ResolveCustomer code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p>\
        \ </note>"
      operationId: ResolveCustomer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSMPMeteringService.ResolveCustomer
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveCustomerRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveCustomerResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTokenException'
          description: InvalidTokenException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenException'
          description: ExpiredTokenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
          description: InternalServiceErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledApiException'
          description: DisabledApiException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    BatchMeterUsageResult:
      description: Contains the <code>UsageRecords</code> processed by <code>BatchMeterUsage</code>
        and any records that have failed due to transient error.
      example:
        UnprocessedRecords: ""
        Results: ""
      properties:
        Results:
          allOf:
          - $ref: '#/components/schemas/UsageRecordResultList'
          - description: Contains all <code>UsageRecords</code> processed by <code>BatchMeterUsage</code>.
              These records were either honored by AWS Marketplace Metering Service
              or were invalid. Invalid records should be fixed before being resubmitted.
        UnprocessedRecords:
          allOf:
          - $ref: '#/components/schemas/UsageRecordList'
          - description: Contains all <code>UsageRecords</code> that were not processed
              by <code>BatchMeterUsage</code>. This is a list of <code>UsageRecords</code>.
              You can retry the failed request by making another <code>BatchMeterUsage</code>
              call with this list as input in the <code>BatchMeterUsageRequest</code>.
      type: object
    BatchMeterUsageRequest:
      description: "A <code>BatchMeterUsageRequest</code> contains <code>UsageRecords</code>,\
        \ which indicate quantities of usage within your application."
      example:
        ProductCode: ""
        UsageRecords: ""
      properties:
        UsageRecords:
          allOf:
          - $ref: '#/components/schemas/UsageRecordList'
          - description: The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code>
              accepts up to 25 <code>UsageRecords</code> at a time.
        ProductCode:
          allOf:
          - $ref: '#/components/schemas/ProductCode'
          - description: Product code is used to uniquely identify a product in AWS
              Marketplace. The product code should be the same as the one used during
              the publishing of a new product.
      required:
      - ProductCode
      - UsageRecords
      title: BatchMeterUsageRequest
      type: object
    InternalServiceErrorException: {}
    InvalidProductCodeException: {}
    InvalidUsageDimensionException: {}
    InvalidTagException: {}
    InvalidUsageAllocationsException: {}
    InvalidCustomerIdentifierException: {}
    TimestampOutOfBoundsException: {}
    ThrottlingException: {}
    DisabledApiException: {}
    MeterUsageResult:
      example:
        MeteringRecordId: ""
      properties:
        MeteringRecordId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Metering record id.
      type: object
    MeterUsageRequest:
      example:
        ProductCode: ""
        DryRun: ""
        UsageQuantity: ""
        UsageAllocations: ""
        Timestamp: ""
        UsageDimension: ""
      properties:
        ProductCode:
          allOf:
          - $ref: '#/components/schemas/ProductCode'
          - description: Product code is used to uniquely identify a product in AWS
              Marketplace. The product code should be the same as the one used during
              the publishing of a new product.
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "Timestamp, in UTC, for which the usage is being reported.\
              \ Your application can meter usage for up to one hour in the past. Make\
              \ sure the <code>timestamp</code> value is not before the start of the\
              \ software usage."
        UsageDimension:
          allOf:
          - $ref: '#/components/schemas/UsageDimension'
          - description: It will be one of the fcp dimension name provided during
              the publishing of the product.
        UsageQuantity:
          allOf:
          - $ref: '#/components/schemas/UsageQuantity'
          - description: Consumption value for the hour. Defaults to <code>0</code>
              if not specified.
        DryRun:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Checks whether you have the permissions required for the\
              \ action, but does not make the request. If you have the permissions,\
              \ the request returns <code>DryRunOperation</code>; otherwise, it returns\
              \ <code>UnauthorizedException</code>. Defaults to <code>false</code>\
              \ if not specified."
        UsageAllocations:
          allOf:
          - $ref: '#/components/schemas/UsageAllocations'
          - description: "<p>The set of <code>UsageAllocations</code> to submit.</p>\
              \ <p>The sum of all <code>UsageAllocation</code> quantities must equal\
              \ the <code>UsageQuantity</code> of the <code>MeterUsage</code> request,\
              \ and each <code>UsageAllocation</code> must have a unique set of tags\
              \ (include no tags).</p>"
      required:
      - ProductCode
      - Timestamp
      - UsageDimension
      title: MeterUsageRequest
      type: object
    InvalidEndpointRegionException: {}
    DuplicateRequestException: {}
    CustomerNotEntitledException: {}
    RegisterUsageResult:
      example:
        PublicKeyRotationTimestamp: ""
        Signature: ""
      properties:
        PublicKeyRotationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: (Optional) Only included when public key version has expired
        Signature:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: JWT Token
      type: object
    RegisterUsageRequest:
      example:
        Nonce: ""
        ProductCode: ""
        PublicKeyVersion: ""
      properties:
        ProductCode:
          allOf:
          - $ref: '#/components/schemas/ProductCode'
          - description: Product code is used to uniquely identify a product in AWS
              Marketplace. The product code should be the same as the one used during
              the publishing of a new product.
        PublicKeyVersion:
          allOf:
          - $ref: '#/components/schemas/VersionInteger'
          - description: Public Key Version provided by AWS Marketplace
        Nonce:
          allOf:
          - $ref: '#/components/schemas/Nonce'
          - description: (Optional) To scope down the registration to a specific running
              software instance and guard against replay attacks.
      required:
      - ProductCode
      - PublicKeyVersion
      title: RegisterUsageRequest
      type: object
    InvalidRegionException: {}
    InvalidPublicKeyVersionException: {}
    PlatformNotSupportedException: {}
    ResolveCustomerResult:
      description: The result of the <code>ResolveCustomer</code> operation. Contains
        the <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code>
        and <code>ProductCode</code>.
      example:
        ProductCode: ""
        CustomerAWSAccountId: ""
        CustomerIdentifier: ""
      properties:
        CustomerIdentifier:
          allOf:
          - $ref: '#/components/schemas/CustomerIdentifier'
          - description: The <code>CustomerIdentifier</code> is used to identify an
              individual customer in your application. Calls to <code>BatchMeterUsage</code>
              require <code>CustomerIdentifiers</code> for each <code>UsageRecord</code>.
        ProductCode:
          allOf:
          - $ref: '#/components/schemas/ProductCode'
          - description: The product code is returned to confirm that the buyer is
              registering for your product. Subsequent <code>BatchMeterUsage</code>
              calls should be made using this product code.
        CustomerAWSAccountId:
          allOf:
          - $ref: '#/components/schemas/CustomerAWSAccountId'
          - description: The <code>CustomerAWSAccountId</code> provides the AWS account
              ID associated with the <code>CustomerIdentifier</code> for the individual
              customer.
      type: object
    ResolveCustomerRequest:
      description: Contains input to the <code>ResolveCustomer</code> operation.
      example:
        RegistrationToken: ""
      properties:
        RegistrationToken:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "When a buyer visits your website during the registration\
              \ process, the buyer submits a registration token through the browser.\
              \ The registration token is resolved to obtain a <code>CustomerIdentifier</code>\
              \ along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>."
      required:
      - RegistrationToken
      title: ResolveCustomerRequest
      type: object
    InvalidTokenException: {}
    ExpiredTokenException: {}
    AllocatedUsageQuantity:
      maximum: 2147483647
      minimum: 0
      type: integer
    UsageRecordList:
      items:
        $ref: '#/components/schemas/UsageRecord'
      maxItems: 25
      minItems: 0
      type: array
    ProductCode:
      maxLength: 255
      minLength: 1
      pattern: "^[-a-zA-Z0-9/=:_.@]*$"
      type: string
    UsageRecordResultList:
      items:
        $ref: '#/components/schemas/UsageRecordResult'
      type: array
    Boolean:
      type: boolean
    CustomerAWSAccountId:
      maxLength: 255
      minLength: 1
      pattern: "^[0-9]+$"
      type: string
    CustomerIdentifier:
      maxLength: 255
      minLength: 1
      pattern: "[\\s\\S]+"
      type: string
    Timestamp:
      format: date-time
      type: string
    UsageDimension:
      maxLength: 255
      minLength: 1
      pattern: "[\\s\\S]+"
      type: string
    UsageQuantity:
      maximum: 2147483647
      minimum: 0
      type: integer
    UsageAllocations:
      items:
        $ref: '#/components/schemas/UsageAllocation'
      maxItems: 2500
      minItems: 1
      type: array
    String:
      type: string
    NonEmptyString:
      pattern: "[\\s\\S]+"
      type: string
    Nonce:
      maxLength: 255
      pattern: "[\\s\\S]*"
      type: string
    VersionInteger:
      minimum: 1
      type: integer
    TagKey:
      maxLength: 100
      minLength: 1
      pattern: "^[a-zA-Z0-9+ -=._:\\/@]+$"
      type: string
    TagValue:
      maxLength: 256
      minLength: 1
      pattern: "^[a-zA-Z0-9+ -=._:\\/@]+$"
      type: string
    Tag:
      description: Metadata assigned to an allocation. Each tag is made up of a <code>key</code>
        and a <code>value</code>.
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: One part of a key-value pair that makes up a <code>tag</code>.
              A <code>key</code> is a label that acts like a category for the specific
              tag values.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: One part of a key-value pair that makes up a <code>tag</code>.
              A <code>value</code> acts as a descriptor within a tag category (key).
              The value can be empty or null.
      required:
      - Key
      - Value
      type: object
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      maxItems: 5
      minItems: 1
      type: array
    UsageAllocation:
      description: <p>Usage allocations allow you to split usage into buckets by tags.</p>
        <p>Each <code>UsageAllocation</code> indicates the usage quantity for a specific
        set of tags.</p>
      properties:
        AllocatedUsageQuantity:
          allOf:
          - $ref: '#/components/schemas/AllocatedUsageQuantity'
          - description: The total quantity allocated to this bucket of usage.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "The set of tags that define the bucket of usage. For the\
              \ bucket of items with no tags, this parameter can be left out."
      required:
      - AllocatedUsageQuantity
      type: object
    UsageRecord:
      description: "<p>A <code>UsageRecord</code> indicates a quantity of usage for\
        \ a given product, customer, dimension and time.</p> <p>Multiple requests\
        \ with the same <code>UsageRecords</code> as input will be de-duplicated to\
        \ prevent double charges.</p>"
      properties:
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>Timestamp, in UTC, for which the usage is being reported.</p>\
              \ <p>Your application can meter usage for up to one hour in the past.\
              \ Make sure the <code>timestamp</code> value is not before the start\
              \ of the software usage.</p>"
        CustomerIdentifier:
          allOf:
          - $ref: '#/components/schemas/CustomerIdentifier'
          - description: The <code>CustomerIdentifier</code> is obtained through the
              <code>ResolveCustomer</code> operation and represents an individual
              buyer in your application.
        Dimension:
          allOf:
          - $ref: '#/components/schemas/UsageDimension'
          - description: "During the process of registering a product on AWS Marketplace,\
              \ dimensions are specified. These represent different units of value\
              \ in your application."
        Quantity:
          allOf:
          - $ref: '#/components/schemas/UsageQuantity'
          - description: The quantity of usage consumed by the customer for the given
              dimension and time. Defaults to <code>0</code> if not specified.
        UsageAllocations:
          allOf:
          - $ref: '#/components/schemas/UsageAllocations'
          - description: The set of <code>UsageAllocations</code> to submit. The sum
              of all <code>UsageAllocation</code> quantities must equal the Quantity
              of the <code>UsageRecord</code>.
      required:
      - CustomerIdentifier
      - Dimension
      - Timestamp
      type: object
    UsageRecordResultStatus:
      enum:
      - Success
      - CustomerNotSubscribed
      - DuplicateRecord
      type: string
    UsageRecordResult:
      description: A <code>UsageRecordResult</code> indicates the status of a given
        <code>UsageRecord</code> processed by <code>BatchMeterUsage</code>.
      properties:
        UsageRecord:
          $ref: '#/components/schemas/UsageRecordResult_UsageRecord'
        MeteringRecordId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The <code>MeteringRecordId</code> is a unique identifier
              for this metering event.
        Status:
          allOf:
          - $ref: '#/components/schemas/UsageRecordResultStatus'
          - description: "<p>The <code>UsageRecordResult</code> <code>Status</code>\
              \ indicates the status of an individual <code>UsageRecord</code> processed\
              \ by <code>BatchMeterUsage</code>.</p> <ul> <li> <p> <i>Success</i>-\
              \ The <code>UsageRecord</code> was accepted and honored by <code>BatchMeterUsage</code>.</p>\
              \ </li> <li> <p> <i>CustomerNotSubscribed</i>- The <code>CustomerIdentifier</code>\
              \ specified is not able to use your product. The <code>UsageRecord</code>\
              \ was not honored. There are three causes for this result:</p> <ul>\
              \ <li> <p>The customer identifier is invalid.</p> </li> <li> <p>The\
              \ customer identifier provided in the metering record does not have\
              \ an active agreement or subscription with this product. Future <code>UsageRecords</code>\
              \ for this customer will fail until the customer subscribes to your\
              \ product.</p> </li> <li> <p>The customer's AWS account was suspended.</p>\
              \ </li> </ul> </li> <li> <p> <i>DuplicateRecord</i>- Indicates that\
              \ the <code>UsageRecord</code> was invalid and not honored. A previously\
              \ metered <code>UsageRecord</code> had the same customer, dimension,\
              \ and time, but a different quantity.</p> </li> </ul>"
      type: object
    UsageRecordResult_UsageRecord:
      allOf:
      - $ref: '#/components/schemas/UsageRecord'
      - description: The <code>UsageRecord</code> that was part of the <code>BatchMeterUsage</code>
          request.
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

