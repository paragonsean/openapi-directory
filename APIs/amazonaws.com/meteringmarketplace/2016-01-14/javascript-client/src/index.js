/**
 * AWSMarketplace Metering
 * <fullname>AWS Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\">AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a container running on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering record for a set of customers. <code>BatchMeterUsage</code> is called from a software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you can do so if you want to receive usage data in your seller reports. For more information on using the <code>RegisterUsage</code> operation, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\">Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS CloudTrail User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BatchMeterUsageRequest from './model/BatchMeterUsageRequest';
import BatchMeterUsageResult from './model/BatchMeterUsageResult';
import MeterUsageRequest from './model/MeterUsageRequest';
import MeterUsageResult from './model/MeterUsageResult';
import RegisterUsageRequest from './model/RegisterUsageRequest';
import RegisterUsageResult from './model/RegisterUsageResult';
import ResolveCustomerRequest from './model/ResolveCustomerRequest';
import ResolveCustomerResult from './model/ResolveCustomerResult';
import Tag from './model/Tag';
import UsageAllocation from './model/UsageAllocation';
import UsageRecord from './model/UsageRecord';
import UsageRecordResult from './model/UsageRecordResult';
import UsageRecordResultStatus from './model/UsageRecordResultStatus';
import UsageRecordResultUsageRecord from './model/UsageRecordResultUsageRecord';
import DefaultApi from './api/DefaultApi';


/**
* &lt;fullname&gt;AWS Marketplace Metering Service&lt;/fullname&gt; &lt;p&gt;This reference provides descriptions of the low-level AWS Marketplace Metering Service API.&lt;/p&gt; &lt;p&gt;AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.&lt;/p&gt; &lt;p&gt;For information on the permissions you need to use this API, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\&quot;&gt;AWS Marketplace metering and entitlement API permissions&lt;/a&gt; in the &lt;i&gt;AWS Marketplace Seller Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;Submitting Metering Records&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;MeterUsage&lt;/i&gt; - Submits the metering record for an AWS Marketplace product. &lt;code&gt;MeterUsage&lt;/code&gt; is called from an EC2 instance or a container running on EKS or ECS.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;BatchMeterUsage&lt;/i&gt; - Submits the metering record for a set of customers. &lt;code&gt;BatchMeterUsage&lt;/code&gt; is called from a software-as-a-service (SaaS) application.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Accepting New Customers&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;ResolveCustomer&lt;/i&gt; - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a &lt;code&gt;CustomerIdentifier&lt;/code&gt; along with the &lt;code&gt;CustomerAWSAccountId&lt;/code&gt; and &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Entitlement and Metering for Paid Container Products&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the &lt;code&gt;RegisterUsage&lt;/code&gt; operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren&#39;t required to call &lt;code&gt;RegisterUsage&lt;/code&gt;, but you can do so if you want to receive usage data in your seller reports. For more information on using the &lt;code&gt;RegisterUsage&lt;/code&gt; operation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\&quot;&gt;Container-Based Products&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;BatchMeterUsage&lt;/code&gt; API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the &lt;code&gt;eventName&lt;/code&gt; of &lt;code&gt;BatchMeterUsage&lt;/code&gt;. You can also use CloudTrail to audit records over time. For more information, see the &lt;i&gt; &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\&quot;&gt;AWS CloudTrail User Guide&lt;/a&gt;.&lt;/i&gt; &lt;/p&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AwsMarketplaceMetering = require('index'); // See note below*.
* var xxxSvc = new AwsMarketplaceMetering.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AwsMarketplaceMetering.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AwsMarketplaceMetering.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AwsMarketplaceMetering.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2016-01-14
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BatchMeterUsageRequest model constructor.
     * @property {module:model/BatchMeterUsageRequest}
     */
    BatchMeterUsageRequest,

    /**
     * The BatchMeterUsageResult model constructor.
     * @property {module:model/BatchMeterUsageResult}
     */
    BatchMeterUsageResult,

    /**
     * The MeterUsageRequest model constructor.
     * @property {module:model/MeterUsageRequest}
     */
    MeterUsageRequest,

    /**
     * The MeterUsageResult model constructor.
     * @property {module:model/MeterUsageResult}
     */
    MeterUsageResult,

    /**
     * The RegisterUsageRequest model constructor.
     * @property {module:model/RegisterUsageRequest}
     */
    RegisterUsageRequest,

    /**
     * The RegisterUsageResult model constructor.
     * @property {module:model/RegisterUsageResult}
     */
    RegisterUsageResult,

    /**
     * The ResolveCustomerRequest model constructor.
     * @property {module:model/ResolveCustomerRequest}
     */
    ResolveCustomerRequest,

    /**
     * The ResolveCustomerResult model constructor.
     * @property {module:model/ResolveCustomerResult}
     */
    ResolveCustomerResult,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The UsageAllocation model constructor.
     * @property {module:model/UsageAllocation}
     */
    UsageAllocation,

    /**
     * The UsageRecord model constructor.
     * @property {module:model/UsageRecord}
     */
    UsageRecord,

    /**
     * The UsageRecordResult model constructor.
     * @property {module:model/UsageRecordResult}
     */
    UsageRecordResult,

    /**
     * The UsageRecordResultStatus model constructor.
     * @property {module:model/UsageRecordResultStatus}
     */
    UsageRecordResultStatus,

    /**
     * The UsageRecordResultUsageRecord model constructor.
     * @property {module:model/UsageRecordResultUsageRecord}
     */
    UsageRecordResultUsageRecord,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
