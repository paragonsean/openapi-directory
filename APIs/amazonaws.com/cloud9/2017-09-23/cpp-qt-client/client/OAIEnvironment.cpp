/**
 * AWS Cloud9
 * <fullname>Cloud9</fullname> <p>Cloud9 is a collection of tools that you can use to code, build, run, test, debug, and release software in the cloud.</p> <p>For more information about Cloud9, see the <a href=\"https://docs.aws.amazon.com/cloud9/latest/user-guide\">Cloud9 User Guide</a>.</p> <p>Cloud9 supports these operations:</p> <ul> <li> <p> <code>CreateEnvironmentEC2</code>: Creates an Cloud9 development environment, launches an Amazon EC2 instance, and then connects from the instance to the environment.</p> </li> <li> <p> <code>CreateEnvironmentMembership</code>: Adds an environment member to an environment.</p> </li> <li> <p> <code>DeleteEnvironment</code>: Deletes an environment. If an Amazon EC2 instance is connected to the environment, also terminates the instance.</p> </li> <li> <p> <code>DeleteEnvironmentMembership</code>: Deletes an environment member from an environment.</p> </li> <li> <p> <code>DescribeEnvironmentMemberships</code>: Gets information about environment members for an environment.</p> </li> <li> <p> <code>DescribeEnvironments</code>: Gets information about environments.</p> </li> <li> <p> <code>DescribeEnvironmentStatus</code>: Gets status information for an environment.</p> </li> <li> <p> <code>ListEnvironments</code>: Gets a list of environment identifiers.</p> </li> <li> <p> <code>ListTagsForResource</code>: Gets the tags for an environment.</p> </li> <li> <p> <code>TagResource</code>: Adds tags to an environment.</p> </li> <li> <p> <code>UntagResource</code>: Removes tags from an environment.</p> </li> <li> <p> <code>UpdateEnvironment</code>: Changes the settings of an existing environment.</p> </li> <li> <p> <code>UpdateEnvironmentMembership</code>: Changes the settings of an existing environment member for an environment.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-09-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_owner_arn_isSet = false;
    m_owner_arn_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_managed_credentials_status_isSet = false;
    m_managed_credentials_status_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_owner_arn_isValid = ::OpenAPI::fromJsonValue(m_owner_arn, json[QString("ownerArn")]);
    m_owner_arn_isSet = !json[QString("ownerArn")].isNull() && m_owner_arn_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("lifecycle")]);
    m_lifecycle_isSet = !json[QString("lifecycle")].isNull() && m_lifecycle_isValid;

    m_managed_credentials_status_isValid = ::OpenAPI::fromJsonValue(m_managed_credentials_status, json[QString("managedCredentialsStatus")]);
    m_managed_credentials_status_isSet = !json[QString("managedCredentialsStatus")].isNull() && m_managed_credentials_status_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_owner_arn_isSet) {
        obj.insert(QString("ownerArn"), ::OpenAPI::toJsonValue(m_owner_arn));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_managed_credentials_status.isSet()) {
        obj.insert(QString("managedCredentialsStatus"), ::OpenAPI::toJsonValue(m_managed_credentials_status));
    }
    return obj;
}

QString OAIEnvironment::getId() const {
    return m_id;
}
void OAIEnvironment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnvironment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnvironment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnvironment::getName() const {
    return m_name;
}
void OAIEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnvironment::getDescription() const {
    return m_description;
}
void OAIEnvironment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnvironment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnvironment::is_description_Valid() const{
    return m_description_isValid;
}

OAIEnvironmentType OAIEnvironment::getType() const {
    return m_type;
}
void OAIEnvironment::setType(const OAIEnvironmentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEnvironment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEnvironment::is_type_Valid() const{
    return m_type_isValid;
}

OAIConnectionType OAIEnvironment::getConnectionType() const {
    return m_connection_type;
}
void OAIEnvironment::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIEnvironment::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIEnvironment::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIEnvironment::getArn() const {
    return m_arn;
}
void OAIEnvironment::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIEnvironment::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIEnvironment::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIEnvironment::getOwnerArn() const {
    return m_owner_arn;
}
void OAIEnvironment::setOwnerArn(const QString &owner_arn) {
    m_owner_arn = owner_arn;
    m_owner_arn_isSet = true;
}

bool OAIEnvironment::is_owner_arn_Set() const{
    return m_owner_arn_isSet;
}

bool OAIEnvironment::is_owner_arn_Valid() const{
    return m_owner_arn_isValid;
}

OAIEnvironment_lifecycle OAIEnvironment::getLifecycle() const {
    return m_lifecycle;
}
void OAIEnvironment::setLifecycle(const OAIEnvironment_lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIEnvironment::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIEnvironment::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIManagedCredentialsStatus OAIEnvironment::getManagedCredentialsStatus() const {
    return m_managed_credentials_status;
}
void OAIEnvironment::setManagedCredentialsStatus(const OAIManagedCredentialsStatus &managed_credentials_status) {
    m_managed_credentials_status = managed_credentials_status;
    m_managed_credentials_status_isSet = true;
}

bool OAIEnvironment::is_managed_credentials_status_Set() const{
    return m_managed_credentials_status_isSet;
}

bool OAIEnvironment::is_managed_credentials_status_Valid() const{
    return m_managed_credentials_status_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_credentials_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_arn_isValid && m_owner_arn_isValid && true;
}

} // namespace OpenAPI
