/**
 * AWS Cloud9
 * <fullname>Cloud9</fullname> <p>Cloud9 is a collection of tools that you can use to code, build, run, test, debug, and release software in the cloud.</p> <p>For more information about Cloud9, see the <a href=\"https://docs.aws.amazon.com/cloud9/latest/user-guide\">Cloud9 User Guide</a>.</p> <p>Cloud9 supports these operations:</p> <ul> <li> <p> <code>CreateEnvironmentEC2</code>: Creates an Cloud9 development environment, launches an Amazon EC2 instance, and then connects from the instance to the environment.</p> </li> <li> <p> <code>CreateEnvironmentMembership</code>: Adds an environment member to an environment.</p> </li> <li> <p> <code>DeleteEnvironment</code>: Deletes an environment. If an Amazon EC2 instance is connected to the environment, also terminates the instance.</p> </li> <li> <p> <code>DeleteEnvironmentMembership</code>: Deletes an environment member from an environment.</p> </li> <li> <p> <code>DescribeEnvironmentMemberships</code>: Gets information about environment members for an environment.</p> </li> <li> <p> <code>DescribeEnvironments</code>: Gets information about environments.</p> </li> <li> <p> <code>DescribeEnvironmentStatus</code>: Gets status information for an environment.</p> </li> <li> <p> <code>ListEnvironments</code>: Gets a list of environment identifiers.</p> </li> <li> <p> <code>ListTagsForResource</code>: Gets the tags for an environment.</p> </li> <li> <p> <code>TagResource</code>: Adds tags to an environment.</p> </li> <li> <p> <code>UntagResource</code>: Removes tags from an environment.</p> </li> <li> <p> <code>UpdateEnvironment</code>: Changes the settings of an existing environment.</p> </li> <li> <p> <code>UpdateEnvironmentMembership</code>: Changes the settings of an existing environment member for an environment.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-09-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEnvironmentEC2Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEnvironmentEC2Request::OAICreateEnvironmentEC2Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEnvironmentEC2Request::OAICreateEnvironmentEC2Request() {
    this->initializeModel();
}

OAICreateEnvironmentEC2Request::~OAICreateEnvironmentEC2Request() {}

void OAICreateEnvironmentEC2Request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_automatic_stop_time_minutes_isSet = false;
    m_automatic_stop_time_minutes_isValid = false;

    m_owner_arn_isSet = false;
    m_owner_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;
}

void OAICreateEnvironmentEC2Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEnvironmentEC2Request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_automatic_stop_time_minutes_isValid = ::OpenAPI::fromJsonValue(m_automatic_stop_time_minutes, json[QString("automaticStopTimeMinutes")]);
    m_automatic_stop_time_minutes_isSet = !json[QString("automaticStopTimeMinutes")].isNull() && m_automatic_stop_time_minutes_isValid;

    m_owner_arn_isValid = ::OpenAPI::fromJsonValue(m_owner_arn, json[QString("ownerArn")]);
    m_owner_arn_isSet = !json[QString("ownerArn")].isNull() && m_owner_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;
}

QString OAICreateEnvironmentEC2Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEnvironmentEC2Request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_automatic_stop_time_minutes_isSet) {
        obj.insert(QString("automaticStopTimeMinutes"), ::OpenAPI::toJsonValue(m_automatic_stop_time_minutes));
    }
    if (m_owner_arn_isSet) {
        obj.insert(QString("ownerArn"), ::OpenAPI::toJsonValue(m_owner_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    return obj;
}

QString OAICreateEnvironmentEC2Request::getName() const {
    return m_name;
}
void OAICreateEnvironmentEC2Request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEnvironmentEC2Request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateEnvironmentEC2Request::getDescription() const {
    return m_description;
}
void OAICreateEnvironmentEC2Request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateEnvironmentEC2Request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateEnvironmentEC2Request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateEnvironmentEC2Request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateEnvironmentEC2Request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreateEnvironmentEC2Request::getInstanceType() const {
    return m_instance_type;
}
void OAICreateEnvironmentEC2Request::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateEnvironmentEC2Request::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAICreateEnvironmentEC2Request::getSubnetId() const {
    return m_subnet_id;
}
void OAICreateEnvironmentEC2Request::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAICreateEnvironmentEC2Request::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAICreateEnvironmentEC2Request::getImageId() const {
    return m_image_id;
}
void OAICreateEnvironmentEC2Request::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAICreateEnvironmentEC2Request::is_image_id_Valid() const{
    return m_image_id_isValid;
}

qint32 OAICreateEnvironmentEC2Request::getAutomaticStopTimeMinutes() const {
    return m_automatic_stop_time_minutes;
}
void OAICreateEnvironmentEC2Request::setAutomaticStopTimeMinutes(const qint32 &automatic_stop_time_minutes) {
    m_automatic_stop_time_minutes = automatic_stop_time_minutes;
    m_automatic_stop_time_minutes_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_automatic_stop_time_minutes_Set() const{
    return m_automatic_stop_time_minutes_isSet;
}

bool OAICreateEnvironmentEC2Request::is_automatic_stop_time_minutes_Valid() const{
    return m_automatic_stop_time_minutes_isValid;
}

QString OAICreateEnvironmentEC2Request::getOwnerArn() const {
    return m_owner_arn;
}
void OAICreateEnvironmentEC2Request::setOwnerArn(const QString &owner_arn) {
    m_owner_arn = owner_arn;
    m_owner_arn_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_owner_arn_Set() const{
    return m_owner_arn_isSet;
}

bool OAICreateEnvironmentEC2Request::is_owner_arn_Valid() const{
    return m_owner_arn_isValid;
}

QList OAICreateEnvironmentEC2Request::getTags() const {
    return m_tags;
}
void OAICreateEnvironmentEC2Request::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEnvironmentEC2Request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIConnectionType OAICreateEnvironmentEC2Request::getConnectionType() const {
    return m_connection_type;
}
void OAICreateEnvironmentEC2Request::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAICreateEnvironmentEC2Request::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

bool OAICreateEnvironmentEC2Request::getDryRun() const {
    return m_dry_run;
}
void OAICreateEnvironmentEC2Request::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAICreateEnvironmentEC2Request::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAICreateEnvironmentEC2Request::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

bool OAICreateEnvironmentEC2Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_stop_time_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEnvironmentEC2Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
