/*
 * AWS Cloud9
 * <fullname>Cloud9</fullname> <p>Cloud9 is a collection of tools that you can use to code, build, run, test, debug, and release software in the cloud.</p> <p>For more information about Cloud9, see the <a href=\"https://docs.aws.amazon.com/cloud9/latest/user-guide\">Cloud9 User Guide</a>.</p> <p>Cloud9 supports these operations:</p> <ul> <li> <p> <code>CreateEnvironmentEC2</code>: Creates an Cloud9 development environment, launches an Amazon EC2 instance, and then connects from the instance to the environment.</p> </li> <li> <p> <code>CreateEnvironmentMembership</code>: Adds an environment member to an environment.</p> </li> <li> <p> <code>DeleteEnvironment</code>: Deletes an environment. If an Amazon EC2 instance is connected to the environment, also terminates the instance.</p> </li> <li> <p> <code>DeleteEnvironmentMembership</code>: Deletes an environment member from an environment.</p> </li> <li> <p> <code>DescribeEnvironmentMemberships</code>: Gets information about environment members for an environment.</p> </li> <li> <p> <code>DescribeEnvironments</code>: Gets information about environments.</p> </li> <li> <p> <code>DescribeEnvironmentStatus</code>: Gets status information for an environment.</p> </li> <li> <p> <code>ListEnvironments</code>: Gets a list of environment identifiers.</p> </li> <li> <p> <code>ListTagsForResource</code>: Gets the tags for an environment.</p> </li> <li> <p> <code>TagResource</code>: Adds tags to an environment.</p> </li> <li> <p> <code>UntagResource</code>: Removes tags from an environment.</p> </li> <li> <p> <code>UpdateEnvironment</code>: Changes the settings of an existing environment.</p> </li> <li> <p> <code>UpdateEnvironmentMembership</code>: Changes the settings of an existing environment member for an environment.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-09-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEnvironmentEC2Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:31.731931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEnvironmentEC2Request {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_AUTOMATIC_STOP_TIME_MINUTES = "automaticStopTimeMinutes";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_STOP_TIME_MINUTES)
  private Integer automaticStopTimeMinutes;

  public static final String SERIALIZED_NAME_OWNER_ARN = "ownerArn";
  @SerializedName(SERIALIZED_NAME_OWNER_ARN)
  private String ownerArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionType connectionType;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public CreateEnvironmentEC2Request() {
  }

  public CreateEnvironmentEC2Request name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateEnvironmentEC2Request description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateEnvironmentEC2Request clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateEnvironmentEC2Request instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public CreateEnvironmentEC2Request subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public CreateEnvironmentEC2Request imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public CreateEnvironmentEC2Request automaticStopTimeMinutes(Integer automaticStopTimeMinutes) {
    this.automaticStopTimeMinutes = automaticStopTimeMinutes;
    return this;
  }

  /**
   * Get automaticStopTimeMinutes
   * @return automaticStopTimeMinutes
   */
  @javax.annotation.Nullable
  public Integer getAutomaticStopTimeMinutes() {
    return automaticStopTimeMinutes;
  }

  public void setAutomaticStopTimeMinutes(Integer automaticStopTimeMinutes) {
    this.automaticStopTimeMinutes = automaticStopTimeMinutes;
  }


  public CreateEnvironmentEC2Request ownerArn(String ownerArn) {
    this.ownerArn = ownerArn;
    return this;
  }

  /**
   * Get ownerArn
   * @return ownerArn
   */
  @javax.annotation.Nullable
  public String getOwnerArn() {
    return ownerArn;
  }

  public void setOwnerArn(String ownerArn) {
    this.ownerArn = ownerArn;
  }


  public CreateEnvironmentEC2Request tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateEnvironmentEC2Request connectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionType getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
  }


  public CreateEnvironmentEC2Request dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Get dryRun
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEnvironmentEC2Request createEnvironmentEC2Request = (CreateEnvironmentEC2Request) o;
    return Objects.equals(this.name, createEnvironmentEC2Request.name) &&
        Objects.equals(this.description, createEnvironmentEC2Request.description) &&
        Objects.equals(this.clientRequestToken, createEnvironmentEC2Request.clientRequestToken) &&
        Objects.equals(this.instanceType, createEnvironmentEC2Request.instanceType) &&
        Objects.equals(this.subnetId, createEnvironmentEC2Request.subnetId) &&
        Objects.equals(this.imageId, createEnvironmentEC2Request.imageId) &&
        Objects.equals(this.automaticStopTimeMinutes, createEnvironmentEC2Request.automaticStopTimeMinutes) &&
        Objects.equals(this.ownerArn, createEnvironmentEC2Request.ownerArn) &&
        Objects.equals(this.tags, createEnvironmentEC2Request.tags) &&
        Objects.equals(this.connectionType, createEnvironmentEC2Request.connectionType) &&
        Objects.equals(this.dryRun, createEnvironmentEC2Request.dryRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, clientRequestToken, instanceType, subnetId, imageId, automaticStopTimeMinutes, ownerArn, tags, connectionType, dryRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEnvironmentEC2Request {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    automaticStopTimeMinutes: ").append(toIndentedString(automaticStopTimeMinutes)).append("\n");
    sb.append("    ownerArn: ").append(toIndentedString(ownerArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("clientRequestToken");
    openapiFields.add("instanceType");
    openapiFields.add("subnetId");
    openapiFields.add("imageId");
    openapiFields.add("automaticStopTimeMinutes");
    openapiFields.add("ownerArn");
    openapiFields.add("tags");
    openapiFields.add("connectionType");
    openapiFields.add("dryRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("instanceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEnvironmentEC2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEnvironmentEC2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEnvironmentEC2Request is not found in the empty JSON string", CreateEnvironmentEC2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEnvironmentEC2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEnvironmentEC2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEnvironmentEC2Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `clientRequestToken`
      if (jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientRequestToken"));
      }
      // validate the required field `instanceType`
      String.validateJsonElement(jsonObj.get("instanceType"));
      // validate the optional field `subnetId`
      if (jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subnetId"));
      }
      // validate the optional field `imageId`
      if (jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageId"));
      }
      // validate the optional field `automaticStopTimeMinutes`
      if (jsonObj.get("automaticStopTimeMinutes") != null && !jsonObj.get("automaticStopTimeMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("automaticStopTimeMinutes"));
      }
      // validate the optional field `ownerArn`
      if (jsonObj.get("ownerArn") != null && !jsonObj.get("ownerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ownerArn"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `connectionType`
      if (jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) {
        ConnectionType.validateJsonElement(jsonObj.get("connectionType"));
      }
      // validate the optional field `dryRun`
      if (jsonObj.get("dryRun") != null && !jsonObj.get("dryRun").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("dryRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEnvironmentEC2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEnvironmentEC2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEnvironmentEC2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEnvironmentEC2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEnvironmentEC2Request>() {
           @Override
           public void write(JsonWriter out, CreateEnvironmentEC2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEnvironmentEC2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEnvironmentEC2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEnvironmentEC2Request
   * @throws IOException if the JSON string is invalid with respect to CreateEnvironmentEC2Request
   */
  public static CreateEnvironmentEC2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEnvironmentEC2Request.class);
  }

  /**
   * Convert an instance of CreateEnvironmentEC2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

