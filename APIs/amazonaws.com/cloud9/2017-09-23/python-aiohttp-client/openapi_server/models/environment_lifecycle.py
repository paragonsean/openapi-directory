# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_lifecycle_status import EnvironmentLifecycleStatus
from openapi_server import util


class EnvironmentLifecycle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: EnvironmentLifecycleStatus=None, reason: str=None, failure_resource: str=None):
        """EnvironmentLifecycle - a model defined in OpenAPI

        :param status: The status of this EnvironmentLifecycle.
        :param reason: The reason of this EnvironmentLifecycle.
        :param failure_resource: The failure_resource of this EnvironmentLifecycle.
        """
        self.openapi_types = {
            'status': EnvironmentLifecycleStatus,
            'reason': str,
            'failure_resource': str
        }

        self.attribute_map = {
            'status': 'status',
            'reason': 'reason',
            'failure_resource': 'failureResource'
        }

        self._status = status
        self._reason = reason
        self._failure_resource = failure_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentLifecycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment_lifecycle of this EnvironmentLifecycle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this EnvironmentLifecycle.


        :return: The status of this EnvironmentLifecycle.
        :rtype: EnvironmentLifecycleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvironmentLifecycle.


        :param status: The status of this EnvironmentLifecycle.
        :type status: EnvironmentLifecycleStatus
        """

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this EnvironmentLifecycle.


        :return: The reason of this EnvironmentLifecycle.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EnvironmentLifecycle.


        :param reason: The reason of this EnvironmentLifecycle.
        :type reason: str
        """

        self._reason = reason

    @property
    def failure_resource(self):
        """Gets the failure_resource of this EnvironmentLifecycle.


        :return: The failure_resource of this EnvironmentLifecycle.
        :rtype: str
        """
        return self._failure_resource

    @failure_resource.setter
    def failure_resource(self, failure_resource):
        """Sets the failure_resource of this EnvironmentLifecycle.


        :param failure_resource: The failure_resource of this EnvironmentLifecycle.
        :type failure_resource: str
        """

        self._failure_resource = failure_resource
