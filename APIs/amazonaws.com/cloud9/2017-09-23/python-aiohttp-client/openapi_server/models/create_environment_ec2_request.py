# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_type import ConnectionType
from openapi_server import util


class CreateEnvironmentEC2Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, client_request_token: str=None, instance_type: str=None, subnet_id: str=None, image_id: str=None, automatic_stop_time_minutes: int=None, owner_arn: str=None, tags: List=None, connection_type: ConnectionType=None, dry_run: bool=None):
        """CreateEnvironmentEC2Request - a model defined in OpenAPI

        :param name: The name of this CreateEnvironmentEC2Request.
        :param description: The description of this CreateEnvironmentEC2Request.
        :param client_request_token: The client_request_token of this CreateEnvironmentEC2Request.
        :param instance_type: The instance_type of this CreateEnvironmentEC2Request.
        :param subnet_id: The subnet_id of this CreateEnvironmentEC2Request.
        :param image_id: The image_id of this CreateEnvironmentEC2Request.
        :param automatic_stop_time_minutes: The automatic_stop_time_minutes of this CreateEnvironmentEC2Request.
        :param owner_arn: The owner_arn of this CreateEnvironmentEC2Request.
        :param tags: The tags of this CreateEnvironmentEC2Request.
        :param connection_type: The connection_type of this CreateEnvironmentEC2Request.
        :param dry_run: The dry_run of this CreateEnvironmentEC2Request.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'client_request_token': str,
            'instance_type': str,
            'subnet_id': str,
            'image_id': str,
            'automatic_stop_time_minutes': int,
            'owner_arn': str,
            'tags': List,
            'connection_type': ConnectionType,
            'dry_run': bool
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'client_request_token': 'clientRequestToken',
            'instance_type': 'instanceType',
            'subnet_id': 'subnetId',
            'image_id': 'imageId',
            'automatic_stop_time_minutes': 'automaticStopTimeMinutes',
            'owner_arn': 'ownerArn',
            'tags': 'tags',
            'connection_type': 'connectionType',
            'dry_run': 'dryRun'
        }

        self._name = name
        self._description = description
        self._client_request_token = client_request_token
        self._instance_type = instance_type
        self._subnet_id = subnet_id
        self._image_id = image_id
        self._automatic_stop_time_minutes = automatic_stop_time_minutes
        self._owner_arn = owner_arn
        self._tags = tags
        self._connection_type = connection_type
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentEC2Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentEC2Request of this CreateEnvironmentEC2Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateEnvironmentEC2Request.


        :return: The name of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEnvironmentEC2Request.


        :param name: The name of this CreateEnvironmentEC2Request.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentEC2Request.


        :return: The description of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentEC2Request.


        :param description: The description of this CreateEnvironmentEC2Request.
        :type description: str
        """

        self._description = description

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateEnvironmentEC2Request.


        :return: The client_request_token of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateEnvironmentEC2Request.


        :param client_request_token: The client_request_token of this CreateEnvironmentEC2Request.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def instance_type(self):
        """Gets the instance_type of this CreateEnvironmentEC2Request.


        :return: The instance_type of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this CreateEnvironmentEC2Request.


        :param instance_type: The instance_type of this CreateEnvironmentEC2Request.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def subnet_id(self):
        """Gets the subnet_id of this CreateEnvironmentEC2Request.


        :return: The subnet_id of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this CreateEnvironmentEC2Request.


        :param subnet_id: The subnet_id of this CreateEnvironmentEC2Request.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def image_id(self):
        """Gets the image_id of this CreateEnvironmentEC2Request.


        :return: The image_id of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CreateEnvironmentEC2Request.


        :param image_id: The image_id of this CreateEnvironmentEC2Request.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def automatic_stop_time_minutes(self):
        """Gets the automatic_stop_time_minutes of this CreateEnvironmentEC2Request.


        :return: The automatic_stop_time_minutes of this CreateEnvironmentEC2Request.
        :rtype: int
        """
        return self._automatic_stop_time_minutes

    @automatic_stop_time_minutes.setter
    def automatic_stop_time_minutes(self, automatic_stop_time_minutes):
        """Sets the automatic_stop_time_minutes of this CreateEnvironmentEC2Request.


        :param automatic_stop_time_minutes: The automatic_stop_time_minutes of this CreateEnvironmentEC2Request.
        :type automatic_stop_time_minutes: int
        """

        self._automatic_stop_time_minutes = automatic_stop_time_minutes

    @property
    def owner_arn(self):
        """Gets the owner_arn of this CreateEnvironmentEC2Request.


        :return: The owner_arn of this CreateEnvironmentEC2Request.
        :rtype: str
        """
        return self._owner_arn

    @owner_arn.setter
    def owner_arn(self, owner_arn):
        """Sets the owner_arn of this CreateEnvironmentEC2Request.


        :param owner_arn: The owner_arn of this CreateEnvironmentEC2Request.
        :type owner_arn: str
        """

        self._owner_arn = owner_arn

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentEC2Request.


        :return: The tags of this CreateEnvironmentEC2Request.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentEC2Request.


        :param tags: The tags of this CreateEnvironmentEC2Request.
        :type tags: List
        """

        self._tags = tags

    @property
    def connection_type(self):
        """Gets the connection_type of this CreateEnvironmentEC2Request.


        :return: The connection_type of this CreateEnvironmentEC2Request.
        :rtype: ConnectionType
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this CreateEnvironmentEC2Request.


        :param connection_type: The connection_type of this CreateEnvironmentEC2Request.
        :type connection_type: ConnectionType
        """

        self._connection_type = connection_type

    @property
    def dry_run(self):
        """Gets the dry_run of this CreateEnvironmentEC2Request.


        :return: The dry_run of this CreateEnvironmentEC2Request.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this CreateEnvironmentEC2Request.


        :param dry_run: The dry_run of this CreateEnvironmentEC2Request.
        :type dry_run: bool
        """

        self._dry_run = dry_run
