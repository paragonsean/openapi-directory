# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permissions import Permissions
from openapi_server import util


class UpdateEnvironmentMembershipResultMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permissions: Permissions=None, user_id: str=None, user_arn: str=None, environment_id: str=None, last_access: datetime=None):
        """UpdateEnvironmentMembershipResultMembership - a model defined in OpenAPI

        :param permissions: The permissions of this UpdateEnvironmentMembershipResultMembership.
        :param user_id: The user_id of this UpdateEnvironmentMembershipResultMembership.
        :param user_arn: The user_arn of this UpdateEnvironmentMembershipResultMembership.
        :param environment_id: The environment_id of this UpdateEnvironmentMembershipResultMembership.
        :param last_access: The last_access of this UpdateEnvironmentMembershipResultMembership.
        """
        self.openapi_types = {
            'permissions': Permissions,
            'user_id': str,
            'user_arn': str,
            'environment_id': str,
            'last_access': datetime
        }

        self.attribute_map = {
            'permissions': 'permissions',
            'user_id': 'userId',
            'user_arn': 'userArn',
            'environment_id': 'environmentId',
            'last_access': 'lastAccess'
        }

        self._permissions = permissions
        self._user_id = user_id
        self._user_arn = user_arn
        self._environment_id = environment_id
        self._last_access = last_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEnvironmentMembershipResultMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEnvironmentMembershipResult_membership of this UpdateEnvironmentMembershipResultMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permissions(self):
        """Gets the permissions of this UpdateEnvironmentMembershipResultMembership.


        :return: The permissions of this UpdateEnvironmentMembershipResultMembership.
        :rtype: Permissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UpdateEnvironmentMembershipResultMembership.


        :param permissions: The permissions of this UpdateEnvironmentMembershipResultMembership.
        :type permissions: Permissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def user_id(self):
        """Gets the user_id of this UpdateEnvironmentMembershipResultMembership.


        :return: The user_id of this UpdateEnvironmentMembershipResultMembership.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UpdateEnvironmentMembershipResultMembership.


        :param user_id: The user_id of this UpdateEnvironmentMembershipResultMembership.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user_arn(self):
        """Gets the user_arn of this UpdateEnvironmentMembershipResultMembership.


        :return: The user_arn of this UpdateEnvironmentMembershipResultMembership.
        :rtype: str
        """
        return self._user_arn

    @user_arn.setter
    def user_arn(self, user_arn):
        """Sets the user_arn of this UpdateEnvironmentMembershipResultMembership.


        :param user_arn: The user_arn of this UpdateEnvironmentMembershipResultMembership.
        :type user_arn: str
        """
        if user_arn is None:
            raise ValueError("Invalid value for `user_arn`, must not be `None`")

        self._user_arn = user_arn

    @property
    def environment_id(self):
        """Gets the environment_id of this UpdateEnvironmentMembershipResultMembership.


        :return: The environment_id of this UpdateEnvironmentMembershipResultMembership.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this UpdateEnvironmentMembershipResultMembership.


        :param environment_id: The environment_id of this UpdateEnvironmentMembershipResultMembership.
        :type environment_id: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")

        self._environment_id = environment_id

    @property
    def last_access(self):
        """Gets the last_access of this UpdateEnvironmentMembershipResultMembership.


        :return: The last_access of this UpdateEnvironmentMembershipResultMembership.
        :rtype: datetime
        """
        return self._last_access

    @last_access.setter
    def last_access(self, last_access):
        """Sets the last_access of this UpdateEnvironmentMembershipResultMembership.


        :param last_access: The last_access of this UpdateEnvironmentMembershipResultMembership.
        :type last_access: datetime
        """

        self._last_access = last_access
