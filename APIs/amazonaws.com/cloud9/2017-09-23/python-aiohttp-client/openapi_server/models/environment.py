# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_type import ConnectionType
from openapi_server.models.environment_lifecycle import EnvironmentLifecycle
from openapi_server.models.environment_type import EnvironmentType
from openapi_server.models.managed_credentials_status import ManagedCredentialsStatus
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, type: EnvironmentType=None, connection_type: ConnectionType=None, arn: str=None, owner_arn: str=None, lifecycle: EnvironmentLifecycle=None, managed_credentials_status: ManagedCredentialsStatus=None):
        """Environment - a model defined in OpenAPI

        :param id: The id of this Environment.
        :param name: The name of this Environment.
        :param description: The description of this Environment.
        :param type: The type of this Environment.
        :param connection_type: The connection_type of this Environment.
        :param arn: The arn of this Environment.
        :param owner_arn: The owner_arn of this Environment.
        :param lifecycle: The lifecycle of this Environment.
        :param managed_credentials_status: The managed_credentials_status of this Environment.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'type': EnvironmentType,
            'connection_type': ConnectionType,
            'arn': str,
            'owner_arn': str,
            'lifecycle': EnvironmentLifecycle,
            'managed_credentials_status': ManagedCredentialsStatus
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'connection_type': 'connectionType',
            'arn': 'arn',
            'owner_arn': 'ownerArn',
            'lifecycle': 'lifecycle',
            'managed_credentials_status': 'managedCredentialsStatus'
        }

        self._id = id
        self._name = name
        self._description = description
        self._type = type
        self._connection_type = connection_type
        self._arn = arn
        self._owner_arn = owner_arn
        self._lifecycle = lifecycle
        self._managed_credentials_status = managed_credentials_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Environment.


        :return: The id of this Environment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.


        :param id: The id of this Environment.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Environment.


        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.


        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Environment.


        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.


        :param description: The description of this Environment.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Environment.


        :return: The type of this Environment.
        :rtype: EnvironmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Environment.


        :param type: The type of this Environment.
        :type type: EnvironmentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def connection_type(self):
        """Gets the connection_type of this Environment.


        :return: The connection_type of this Environment.
        :rtype: ConnectionType
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this Environment.


        :param connection_type: The connection_type of this Environment.
        :type connection_type: ConnectionType
        """

        self._connection_type = connection_type

    @property
    def arn(self):
        """Gets the arn of this Environment.


        :return: The arn of this Environment.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Environment.


        :param arn: The arn of this Environment.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def owner_arn(self):
        """Gets the owner_arn of this Environment.


        :return: The owner_arn of this Environment.
        :rtype: str
        """
        return self._owner_arn

    @owner_arn.setter
    def owner_arn(self, owner_arn):
        """Sets the owner_arn of this Environment.


        :param owner_arn: The owner_arn of this Environment.
        :type owner_arn: str
        """
        if owner_arn is None:
            raise ValueError("Invalid value for `owner_arn`, must not be `None`")

        self._owner_arn = owner_arn

    @property
    def lifecycle(self):
        """Gets the lifecycle of this Environment.


        :return: The lifecycle of this Environment.
        :rtype: EnvironmentLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this Environment.


        :param lifecycle: The lifecycle of this Environment.
        :type lifecycle: EnvironmentLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def managed_credentials_status(self):
        """Gets the managed_credentials_status of this Environment.


        :return: The managed_credentials_status of this Environment.
        :rtype: ManagedCredentialsStatus
        """
        return self._managed_credentials_status

    @managed_credentials_status.setter
    def managed_credentials_status(self, managed_credentials_status):
        """Sets the managed_credentials_status of this Environment.


        :param managed_credentials_status: The managed_credentials_status of this Environment.
        :type managed_credentials_status: ManagedCredentialsStatus
        """

        self._managed_credentials_status = managed_credentials_status
