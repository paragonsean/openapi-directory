/**
 * AWS Cloud9
 * <fullname>Cloud9</fullname> <p>Cloud9 is a collection of tools that you can use to code, build, run, test, debug, and release software in the cloud.</p> <p>For more information about Cloud9, see the <a href=\"https://docs.aws.amazon.com/cloud9/latest/user-guide\">Cloud9 User Guide</a>.</p> <p>Cloud9 supports these operations:</p> <ul> <li> <p> <code>CreateEnvironmentEC2</code>: Creates an Cloud9 development environment, launches an Amazon EC2 instance, and then connects from the instance to the environment.</p> </li> <li> <p> <code>CreateEnvironmentMembership</code>: Adds an environment member to an environment.</p> </li> <li> <p> <code>DeleteEnvironment</code>: Deletes an environment. If an Amazon EC2 instance is connected to the environment, also terminates the instance.</p> </li> <li> <p> <code>DeleteEnvironmentMembership</code>: Deletes an environment member from an environment.</p> </li> <li> <p> <code>DescribeEnvironmentMemberships</code>: Gets information about environment members for an environment.</p> </li> <li> <p> <code>DescribeEnvironments</code>: Gets information about environments.</p> </li> <li> <p> <code>DescribeEnvironmentStatus</code>: Gets status information for an environment.</p> </li> <li> <p> <code>ListEnvironments</code>: Gets a list of environment identifiers.</p> </li> <li> <p> <code>ListTagsForResource</code>: Gets the tags for an environment.</p> </li> <li> <p> <code>TagResource</code>: Adds tags to an environment.</p> </li> <li> <p> <code>UntagResource</code>: Removes tags from an environment.</p> </li> <li> <p> <code>UpdateEnvironment</code>: Changes the settings of an existing environment.</p> </li> <li> <p> <code>UpdateEnvironmentMembership</code>: Changes the settings of an existing environment member for an environment.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-09-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionType from './ConnectionType';

/**
 * The CreateEnvironmentEC2Request model module.
 * @module model/CreateEnvironmentEC2Request
 * @version 2017-09-23
 */
class CreateEnvironmentEC2Request {
    /**
     * Constructs a new <code>CreateEnvironmentEC2Request</code>.
     * @alias module:model/CreateEnvironmentEC2Request
     * @param name {String} 
     * @param instanceType {String} 
     */
    constructor(name, instanceType) { 
        
        CreateEnvironmentEC2Request.initialize(this, name, instanceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, instanceType) { 
        obj['name'] = name;
        obj['instanceType'] = instanceType;
    }

    /**
     * Constructs a <code>CreateEnvironmentEC2Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateEnvironmentEC2Request} obj Optional instance to populate.
     * @return {module:model/CreateEnvironmentEC2Request} The populated <code>CreateEnvironmentEC2Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateEnvironmentEC2Request();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('clientRequestToken')) {
                obj['clientRequestToken'] = ApiClient.convertToType(data['clientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
            if (data.hasOwnProperty('automaticStopTimeMinutes')) {
                obj['automaticStopTimeMinutes'] = ApiClient.convertToType(data['automaticStopTimeMinutes'], 'Number');
            }
            if (data.hasOwnProperty('ownerArn')) {
                obj['ownerArn'] = ApiClient.convertToType(data['ownerArn'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Array);
            }
            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], ConnectionType);
            }
            if (data.hasOwnProperty('dryRun')) {
                obj['dryRun'] = ApiClient.convertToType(data['dryRun'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateEnvironmentEC2Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateEnvironmentEC2Request</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateEnvironmentEC2Request.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `clientRequestToken`
        if (data['clientRequestToken']) { // data not null
          String.validateJSON(data['clientRequestToken']);
        }
        // validate the optional field `instanceType`
        if (data['instanceType']) { // data not null
          String.validateJSON(data['instanceType']);
        }
        // validate the optional field `subnetId`
        if (data['subnetId']) { // data not null
          String.validateJSON(data['subnetId']);
        }
        // validate the optional field `imageId`
        if (data['imageId']) { // data not null
          String.validateJSON(data['imageId']);
        }
        // validate the optional field `automaticStopTimeMinutes`
        if (data['automaticStopTimeMinutes']) { // data not null
          Number.validateJSON(data['automaticStopTimeMinutes']);
        }
        // validate the optional field `ownerArn`
        if (data['ownerArn']) { // data not null
          String.validateJSON(data['ownerArn']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Array.validateJSON(data['tags']);
        }
        // validate the optional field `connectionType`
        if (data['connectionType']) { // data not null
          ConnectionType.validateJSON(data['connectionType']);
        }
        // validate the optional field `dryRun`
        if (data['dryRun']) { // data not null
          Boolean.validateJSON(data['dryRun']);
        }

        return true;
    }


}

CreateEnvironmentEC2Request.RequiredProperties = ["name", "instanceType"];

/**
 * @member {String} name
 */
CreateEnvironmentEC2Request.prototype['name'] = undefined;

/**
 * @member {String} description
 */
CreateEnvironmentEC2Request.prototype['description'] = undefined;

/**
 * @member {String} clientRequestToken
 */
CreateEnvironmentEC2Request.prototype['clientRequestToken'] = undefined;

/**
 * @member {String} instanceType
 */
CreateEnvironmentEC2Request.prototype['instanceType'] = undefined;

/**
 * @member {String} subnetId
 */
CreateEnvironmentEC2Request.prototype['subnetId'] = undefined;

/**
 * @member {String} imageId
 */
CreateEnvironmentEC2Request.prototype['imageId'] = undefined;

/**
 * @member {Number} automaticStopTimeMinutes
 */
CreateEnvironmentEC2Request.prototype['automaticStopTimeMinutes'] = undefined;

/**
 * @member {String} ownerArn
 */
CreateEnvironmentEC2Request.prototype['ownerArn'] = undefined;

/**
 * @member {Array} tags
 */
CreateEnvironmentEC2Request.prototype['tags'] = undefined;

/**
 * @member {module:model/ConnectionType} connectionType
 */
CreateEnvironmentEC2Request.prototype['connectionType'] = undefined;

/**
 * @member {Boolean} dryRun
 */
CreateEnvironmentEC2Request.prototype['dryRun'] = undefined;






export default CreateEnvironmentEC2Request;

