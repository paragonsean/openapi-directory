# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_network import QueryNetwork
from openapi_server.models.query_transaction_status import QueryTransactionStatus
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: QueryNetwork=None, block_hash: str=None, transaction_hash: str=None, block_number: str=None, transaction_timestamp: datetime=None, transaction_index: int=None, number_of_transactions: int=None, status: QueryTransactionStatus=None, to: str=None, _from: str=None, contract_address: str=None, gas_used: str=None, cumulative_gas_used: str=None, effective_gas_price: str=None, signature_v: int=None, signature_r: str=None, signature_s: str=None, transaction_fee: str=None, transaction_id: str=None):
        """Transaction - a model defined in OpenAPI

        :param network: The network of this Transaction.
        :param block_hash: The block_hash of this Transaction.
        :param transaction_hash: The transaction_hash of this Transaction.
        :param block_number: The block_number of this Transaction.
        :param transaction_timestamp: The transaction_timestamp of this Transaction.
        :param transaction_index: The transaction_index of this Transaction.
        :param number_of_transactions: The number_of_transactions of this Transaction.
        :param status: The status of this Transaction.
        :param to: The to of this Transaction.
        :param _from: The _from of this Transaction.
        :param contract_address: The contract_address of this Transaction.
        :param gas_used: The gas_used of this Transaction.
        :param cumulative_gas_used: The cumulative_gas_used of this Transaction.
        :param effective_gas_price: The effective_gas_price of this Transaction.
        :param signature_v: The signature_v of this Transaction.
        :param signature_r: The signature_r of this Transaction.
        :param signature_s: The signature_s of this Transaction.
        :param transaction_fee: The transaction_fee of this Transaction.
        :param transaction_id: The transaction_id of this Transaction.
        """
        self.openapi_types = {
            'network': QueryNetwork,
            'block_hash': str,
            'transaction_hash': str,
            'block_number': str,
            'transaction_timestamp': datetime,
            'transaction_index': int,
            'number_of_transactions': int,
            'status': QueryTransactionStatus,
            'to': str,
            '_from': str,
            'contract_address': str,
            'gas_used': str,
            'cumulative_gas_used': str,
            'effective_gas_price': str,
            'signature_v': int,
            'signature_r': str,
            'signature_s': str,
            'transaction_fee': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'network': 'network',
            'block_hash': 'blockHash',
            'transaction_hash': 'transactionHash',
            'block_number': 'blockNumber',
            'transaction_timestamp': 'transactionTimestamp',
            'transaction_index': 'transactionIndex',
            'number_of_transactions': 'numberOfTransactions',
            'status': 'status',
            'to': 'to',
            '_from': 'from',
            'contract_address': 'contractAddress',
            'gas_used': 'gasUsed',
            'cumulative_gas_used': 'cumulativeGasUsed',
            'effective_gas_price': 'effectiveGasPrice',
            'signature_v': 'signatureV',
            'signature_r': 'signatureR',
            'signature_s': 'signatureS',
            'transaction_fee': 'transactionFee',
            'transaction_id': 'transactionId'
        }

        self._network = network
        self._block_hash = block_hash
        self._transaction_hash = transaction_hash
        self._block_number = block_number
        self._transaction_timestamp = transaction_timestamp
        self._transaction_index = transaction_index
        self._number_of_transactions = number_of_transactions
        self._status = status
        self._to = to
        self.__from = _from
        self._contract_address = contract_address
        self._gas_used = gas_used
        self._cumulative_gas_used = cumulative_gas_used
        self._effective_gas_price = effective_gas_price
        self._signature_v = signature_v
        self._signature_r = signature_r
        self._signature_s = signature_s
        self._transaction_fee = transaction_fee
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this Transaction.


        :return: The network of this Transaction.
        :rtype: QueryNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Transaction.


        :param network: The network of this Transaction.
        :type network: QueryNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def block_hash(self):
        """Gets the block_hash of this Transaction.


        :return: The block_hash of this Transaction.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash):
        """Sets the block_hash of this Transaction.


        :param block_hash: The block_hash of this Transaction.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this Transaction.


        :return: The transaction_hash of this Transaction.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this Transaction.


        :param transaction_hash: The transaction_hash of this Transaction.
        :type transaction_hash: str
        """
        if transaction_hash is None:
            raise ValueError("Invalid value for `transaction_hash`, must not be `None`")

        self._transaction_hash = transaction_hash

    @property
    def block_number(self):
        """Gets the block_number of this Transaction.


        :return: The block_number of this Transaction.
        :rtype: str
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number):
        """Sets the block_number of this Transaction.


        :param block_number: The block_number of this Transaction.
        :type block_number: str
        """

        self._block_number = block_number

    @property
    def transaction_timestamp(self):
        """Gets the transaction_timestamp of this Transaction.


        :return: The transaction_timestamp of this Transaction.
        :rtype: datetime
        """
        return self._transaction_timestamp

    @transaction_timestamp.setter
    def transaction_timestamp(self, transaction_timestamp):
        """Sets the transaction_timestamp of this Transaction.


        :param transaction_timestamp: The transaction_timestamp of this Transaction.
        :type transaction_timestamp: datetime
        """
        if transaction_timestamp is None:
            raise ValueError("Invalid value for `transaction_timestamp`, must not be `None`")

        self._transaction_timestamp = transaction_timestamp

    @property
    def transaction_index(self):
        """Gets the transaction_index of this Transaction.


        :return: The transaction_index of this Transaction.
        :rtype: int
        """
        return self._transaction_index

    @transaction_index.setter
    def transaction_index(self, transaction_index):
        """Sets the transaction_index of this Transaction.


        :param transaction_index: The transaction_index of this Transaction.
        :type transaction_index: int
        """
        if transaction_index is None:
            raise ValueError("Invalid value for `transaction_index`, must not be `None`")

        self._transaction_index = transaction_index

    @property
    def number_of_transactions(self):
        """Gets the number_of_transactions of this Transaction.


        :return: The number_of_transactions of this Transaction.
        :rtype: int
        """
        return self._number_of_transactions

    @number_of_transactions.setter
    def number_of_transactions(self, number_of_transactions):
        """Sets the number_of_transactions of this Transaction.


        :param number_of_transactions: The number_of_transactions of this Transaction.
        :type number_of_transactions: int
        """
        if number_of_transactions is None:
            raise ValueError("Invalid value for `number_of_transactions`, must not be `None`")

        self._number_of_transactions = number_of_transactions

    @property
    def status(self):
        """Gets the status of this Transaction.


        :return: The status of this Transaction.
        :rtype: QueryTransactionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.


        :param status: The status of this Transaction.
        :type status: QueryTransactionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def to(self):
        """Gets the to of this Transaction.


        :return: The to of this Transaction.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Transaction.


        :param to: The to of this Transaction.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def _from(self):
        """Gets the _from of this Transaction.


        :return: The _from of this Transaction.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Transaction.


        :param _from: The _from of this Transaction.
        :type _from: str
        """

        self.__from = _from

    @property
    def contract_address(self):
        """Gets the contract_address of this Transaction.


        :return: The contract_address of this Transaction.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this Transaction.


        :param contract_address: The contract_address of this Transaction.
        :type contract_address: str
        """

        self._contract_address = contract_address

    @property
    def gas_used(self):
        """Gets the gas_used of this Transaction.


        :return: The gas_used of this Transaction.
        :rtype: str
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used):
        """Sets the gas_used of this Transaction.


        :param gas_used: The gas_used of this Transaction.
        :type gas_used: str
        """

        self._gas_used = gas_used

    @property
    def cumulative_gas_used(self):
        """Gets the cumulative_gas_used of this Transaction.


        :return: The cumulative_gas_used of this Transaction.
        :rtype: str
        """
        return self._cumulative_gas_used

    @cumulative_gas_used.setter
    def cumulative_gas_used(self, cumulative_gas_used):
        """Sets the cumulative_gas_used of this Transaction.


        :param cumulative_gas_used: The cumulative_gas_used of this Transaction.
        :type cumulative_gas_used: str
        """

        self._cumulative_gas_used = cumulative_gas_used

    @property
    def effective_gas_price(self):
        """Gets the effective_gas_price of this Transaction.


        :return: The effective_gas_price of this Transaction.
        :rtype: str
        """
        return self._effective_gas_price

    @effective_gas_price.setter
    def effective_gas_price(self, effective_gas_price):
        """Sets the effective_gas_price of this Transaction.


        :param effective_gas_price: The effective_gas_price of this Transaction.
        :type effective_gas_price: str
        """

        self._effective_gas_price = effective_gas_price

    @property
    def signature_v(self):
        """Gets the signature_v of this Transaction.


        :return: The signature_v of this Transaction.
        :rtype: int
        """
        return self._signature_v

    @signature_v.setter
    def signature_v(self, signature_v):
        """Sets the signature_v of this Transaction.


        :param signature_v: The signature_v of this Transaction.
        :type signature_v: int
        """

        self._signature_v = signature_v

    @property
    def signature_r(self):
        """Gets the signature_r of this Transaction.


        :return: The signature_r of this Transaction.
        :rtype: str
        """
        return self._signature_r

    @signature_r.setter
    def signature_r(self, signature_r):
        """Sets the signature_r of this Transaction.


        :param signature_r: The signature_r of this Transaction.
        :type signature_r: str
        """

        self._signature_r = signature_r

    @property
    def signature_s(self):
        """Gets the signature_s of this Transaction.


        :return: The signature_s of this Transaction.
        :rtype: str
        """
        return self._signature_s

    @signature_s.setter
    def signature_s(self, signature_s):
        """Sets the signature_s of this Transaction.


        :param signature_s: The signature_s of this Transaction.
        :type signature_s: str
        """

        self._signature_s = signature_s

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this Transaction.


        :return: The transaction_fee of this Transaction.
        :rtype: str
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this Transaction.


        :param transaction_fee: The transaction_fee of this Transaction.
        :type transaction_fee: str
        """

        self._transaction_fee = transaction_fee

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Transaction.


        :return: The transaction_id of this Transaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Transaction.


        :param transaction_id: The transaction_id of this Transaction.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id
