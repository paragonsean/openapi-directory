# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blockchain_instant import BlockchainInstant
from openapi_server.models.list_transactions_input_sort import ListTransactionsInputSort
from openapi_server.models.query_network import QueryNetwork
from openapi_server import util


class ListTransactionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, network: QueryNetwork=None, from_blockchain_instant: BlockchainInstant=None, to_blockchain_instant: BlockchainInstant=None, sort: ListTransactionsInputSort=None, next_token: str=None, max_results: int=None):
        """ListTransactionsInput - a model defined in OpenAPI

        :param address: The address of this ListTransactionsInput.
        :param network: The network of this ListTransactionsInput.
        :param from_blockchain_instant: The from_blockchain_instant of this ListTransactionsInput.
        :param to_blockchain_instant: The to_blockchain_instant of this ListTransactionsInput.
        :param sort: The sort of this ListTransactionsInput.
        :param next_token: The next_token of this ListTransactionsInput.
        :param max_results: The max_results of this ListTransactionsInput.
        """
        self.openapi_types = {
            'address': str,
            'network': QueryNetwork,
            'from_blockchain_instant': BlockchainInstant,
            'to_blockchain_instant': BlockchainInstant,
            'sort': ListTransactionsInputSort,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'address': 'address',
            'network': 'network',
            'from_blockchain_instant': 'fromBlockchainInstant',
            'to_blockchain_instant': 'toBlockchainInstant',
            'sort': 'sort',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._address = address
        self._network = network
        self._from_blockchain_instant = from_blockchain_instant
        self._to_blockchain_instant = to_blockchain_instant
        self._sort = sort
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTransactionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTransactionsInput of this ListTransactionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ListTransactionsInput.


        :return: The address of this ListTransactionsInput.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ListTransactionsInput.


        :param address: The address of this ListTransactionsInput.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def network(self):
        """Gets the network of this ListTransactionsInput.


        :return: The network of this ListTransactionsInput.
        :rtype: QueryNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ListTransactionsInput.


        :param network: The network of this ListTransactionsInput.
        :type network: QueryNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def from_blockchain_instant(self):
        """Gets the from_blockchain_instant of this ListTransactionsInput.


        :return: The from_blockchain_instant of this ListTransactionsInput.
        :rtype: BlockchainInstant
        """
        return self._from_blockchain_instant

    @from_blockchain_instant.setter
    def from_blockchain_instant(self, from_blockchain_instant):
        """Sets the from_blockchain_instant of this ListTransactionsInput.


        :param from_blockchain_instant: The from_blockchain_instant of this ListTransactionsInput.
        :type from_blockchain_instant: BlockchainInstant
        """

        self._from_blockchain_instant = from_blockchain_instant

    @property
    def to_blockchain_instant(self):
        """Gets the to_blockchain_instant of this ListTransactionsInput.


        :return: The to_blockchain_instant of this ListTransactionsInput.
        :rtype: BlockchainInstant
        """
        return self._to_blockchain_instant

    @to_blockchain_instant.setter
    def to_blockchain_instant(self, to_blockchain_instant):
        """Sets the to_blockchain_instant of this ListTransactionsInput.


        :param to_blockchain_instant: The to_blockchain_instant of this ListTransactionsInput.
        :type to_blockchain_instant: BlockchainInstant
        """

        self._to_blockchain_instant = to_blockchain_instant

    @property
    def sort(self):
        """Gets the sort of this ListTransactionsInput.


        :return: The sort of this ListTransactionsInput.
        :rtype: ListTransactionsInputSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListTransactionsInput.


        :param sort: The sort of this ListTransactionsInput.
        :type sort: ListTransactionsInputSort
        """

        self._sort = sort

    @property
    def next_token(self):
        """Gets the next_token of this ListTransactionsInput.


        :return: The next_token of this ListTransactionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTransactionsInput.


        :param next_token: The next_token of this ListTransactionsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListTransactionsInput.


        :return: The max_results of this ListTransactionsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTransactionsInput.


        :param max_results: The max_results of this ListTransactionsInput.
        :type max_results: int
        """

        self._max_results = max_results
