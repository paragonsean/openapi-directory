# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_network import QueryNetwork
from openapi_server import util


class GetTransactionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_hash: str=None, network: QueryNetwork=None):
        """GetTransactionInput - a model defined in OpenAPI

        :param transaction_hash: The transaction_hash of this GetTransactionInput.
        :param network: The network of this GetTransactionInput.
        """
        self.openapi_types = {
            'transaction_hash': str,
            'network': QueryNetwork
        }

        self.attribute_map = {
            'transaction_hash': 'transactionHash',
            'network': 'network'
        }

        self._transaction_hash = transaction_hash
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTransactionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTransactionInput of this GetTransactionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this GetTransactionInput.


        :return: The transaction_hash of this GetTransactionInput.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this GetTransactionInput.


        :param transaction_hash: The transaction_hash of this GetTransactionInput.
        :type transaction_hash: str
        """
        if transaction_hash is None:
            raise ValueError("Invalid value for `transaction_hash`, must not be `None`")

        self._transaction_hash = transaction_hash

    @property
    def network(self):
        """Gets the network of this GetTransactionInput.


        :return: The network of this GetTransactionInput.
        :rtype: QueryNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GetTransactionInput.


        :param network: The network of this GetTransactionInput.
        :type network: QueryNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network
