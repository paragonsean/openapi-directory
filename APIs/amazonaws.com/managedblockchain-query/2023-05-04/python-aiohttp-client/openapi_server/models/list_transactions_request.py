# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_token_balance_request_at_blockchain_instant import GetTokenBalanceRequestAtBlockchainInstant
from openapi_server.models.list_transactions_request_sort import ListTransactionsRequestSort
import re
from openapi_server import util


class ListTransactionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, network: str=None, from_blockchain_instant: GetTokenBalanceRequestAtBlockchainInstant=None, to_blockchain_instant: GetTokenBalanceRequestAtBlockchainInstant=None, sort: ListTransactionsRequestSort=None, next_token: str=None, max_results: int=None):
        """ListTransactionsRequest - a model defined in OpenAPI

        :param address: The address of this ListTransactionsRequest.
        :param network: The network of this ListTransactionsRequest.
        :param from_blockchain_instant: The from_blockchain_instant of this ListTransactionsRequest.
        :param to_blockchain_instant: The to_blockchain_instant of this ListTransactionsRequest.
        :param sort: The sort of this ListTransactionsRequest.
        :param next_token: The next_token of this ListTransactionsRequest.
        :param max_results: The max_results of this ListTransactionsRequest.
        """
        self.openapi_types = {
            'address': str,
            'network': str,
            'from_blockchain_instant': GetTokenBalanceRequestAtBlockchainInstant,
            'to_blockchain_instant': GetTokenBalanceRequestAtBlockchainInstant,
            'sort': ListTransactionsRequestSort,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'address': 'address',
            'network': 'network',
            'from_blockchain_instant': 'fromBlockchainInstant',
            'to_blockchain_instant': 'toBlockchainInstant',
            'sort': 'sort',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._address = address
        self._network = network
        self._from_blockchain_instant = from_blockchain_instant
        self._to_blockchain_instant = to_blockchain_instant
        self._sort = sort
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTransactionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTransactions_request of this ListTransactionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ListTransactionsRequest.

        The address (either a contract or wallet), whose transactions are being requested.

        :return: The address of this ListTransactionsRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ListTransactionsRequest.

        The address (either a contract or wallet), whose transactions are being requested.

        :param address: The address of this ListTransactionsRequest.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")
        if address is not None and not re.search(r'[-A-Za-z0-9]{13,74}', address):
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/[-A-Za-z0-9]{13,74}/`")

        self._address = address

    @property
    def network(self):
        """Gets the network of this ListTransactionsRequest.

        The blockchain network where the transactions occurred.

        :return: The network of this ListTransactionsRequest.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ListTransactionsRequest.

        The blockchain network where the transactions occurred.

        :param network: The network of this ListTransactionsRequest.
        :type network: str
        """
        allowed_values = ["ETHEREUM_MAINNET", "BITCOIN_MAINNET"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def from_blockchain_instant(self):
        """Gets the from_blockchain_instant of this ListTransactionsRequest.


        :return: The from_blockchain_instant of this ListTransactionsRequest.
        :rtype: GetTokenBalanceRequestAtBlockchainInstant
        """
        return self._from_blockchain_instant

    @from_blockchain_instant.setter
    def from_blockchain_instant(self, from_blockchain_instant):
        """Sets the from_blockchain_instant of this ListTransactionsRequest.


        :param from_blockchain_instant: The from_blockchain_instant of this ListTransactionsRequest.
        :type from_blockchain_instant: GetTokenBalanceRequestAtBlockchainInstant
        """

        self._from_blockchain_instant = from_blockchain_instant

    @property
    def to_blockchain_instant(self):
        """Gets the to_blockchain_instant of this ListTransactionsRequest.


        :return: The to_blockchain_instant of this ListTransactionsRequest.
        :rtype: GetTokenBalanceRequestAtBlockchainInstant
        """
        return self._to_blockchain_instant

    @to_blockchain_instant.setter
    def to_blockchain_instant(self, to_blockchain_instant):
        """Sets the to_blockchain_instant of this ListTransactionsRequest.


        :param to_blockchain_instant: The to_blockchain_instant of this ListTransactionsRequest.
        :type to_blockchain_instant: GetTokenBalanceRequestAtBlockchainInstant
        """

        self._to_blockchain_instant = to_blockchain_instant

    @property
    def sort(self):
        """Gets the sort of this ListTransactionsRequest.


        :return: The sort of this ListTransactionsRequest.
        :rtype: ListTransactionsRequestSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListTransactionsRequest.


        :param sort: The sort of this ListTransactionsRequest.
        :type sort: ListTransactionsRequestSort
        """

        self._sort = sort

    @property
    def next_token(self):
        """Gets the next_token of this ListTransactionsRequest.

        The pagination token that indicates the next set of results to retrieve.

        :return: The next_token of this ListTransactionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTransactionsRequest.

        The pagination token that indicates the next set of results to retrieve.

        :param next_token: The next_token of this ListTransactionsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 131070:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `131070`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListTransactionsRequest.

        <p>The maximum number of transactions to list.</p> <note> <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p> <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p> </note>

        :return: The max_results of this ListTransactionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTransactionsRequest.

        <p>The maximum number of transactions to list.</p> <note> <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p> <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p> </note>

        :param max_results: The max_results of this ListTransactionsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 250:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `250`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
