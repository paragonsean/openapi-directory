# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_token_balances_request_owner_filter import ListTokenBalancesRequestOwnerFilter
from openapi_server.models.list_token_balances_request_token_filter import ListTokenBalancesRequestTokenFilter
from openapi_server import util


class ListTokenBalancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_filter: ListTokenBalancesRequestOwnerFilter=None, token_filter: ListTokenBalancesRequestTokenFilter=None, next_token: str=None, max_results: int=None):
        """ListTokenBalancesRequest - a model defined in OpenAPI

        :param owner_filter: The owner_filter of this ListTokenBalancesRequest.
        :param token_filter: The token_filter of this ListTokenBalancesRequest.
        :param next_token: The next_token of this ListTokenBalancesRequest.
        :param max_results: The max_results of this ListTokenBalancesRequest.
        """
        self.openapi_types = {
            'owner_filter': ListTokenBalancesRequestOwnerFilter,
            'token_filter': ListTokenBalancesRequestTokenFilter,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'owner_filter': 'ownerFilter',
            'token_filter': 'tokenFilter',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._owner_filter = owner_filter
        self._token_filter = token_filter
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTokenBalancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTokenBalances_request of this ListTokenBalancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_filter(self):
        """Gets the owner_filter of this ListTokenBalancesRequest.


        :return: The owner_filter of this ListTokenBalancesRequest.
        :rtype: ListTokenBalancesRequestOwnerFilter
        """
        return self._owner_filter

    @owner_filter.setter
    def owner_filter(self, owner_filter):
        """Sets the owner_filter of this ListTokenBalancesRequest.


        :param owner_filter: The owner_filter of this ListTokenBalancesRequest.
        :type owner_filter: ListTokenBalancesRequestOwnerFilter
        """

        self._owner_filter = owner_filter

    @property
    def token_filter(self):
        """Gets the token_filter of this ListTokenBalancesRequest.


        :return: The token_filter of this ListTokenBalancesRequest.
        :rtype: ListTokenBalancesRequestTokenFilter
        """
        return self._token_filter

    @token_filter.setter
    def token_filter(self, token_filter):
        """Sets the token_filter of this ListTokenBalancesRequest.


        :param token_filter: The token_filter of this ListTokenBalancesRequest.
        :type token_filter: ListTokenBalancesRequestTokenFilter
        """
        if token_filter is None:
            raise ValueError("Invalid value for `token_filter`, must not be `None`")

        self._token_filter = token_filter

    @property
    def next_token(self):
        """Gets the next_token of this ListTokenBalancesRequest.

        The pagination token that indicates the next set of results to retrieve.

        :return: The next_token of this ListTokenBalancesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTokenBalancesRequest.

        The pagination token that indicates the next set of results to retrieve.

        :param next_token: The next_token of this ListTokenBalancesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 131070:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `131070`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListTokenBalancesRequest.

        The maximum number of token balances to return.

        :return: The max_results of this ListTokenBalancesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTokenBalancesRequest.

        The maximum number of token balances to return.

        :param max_results: The max_results of this ListTokenBalancesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 250:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `250`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
