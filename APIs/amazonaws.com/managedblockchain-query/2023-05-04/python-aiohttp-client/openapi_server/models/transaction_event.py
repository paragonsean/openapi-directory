# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_network import QueryNetwork
from openapi_server.models.query_transaction_event_type import QueryTransactionEventType
from openapi_server import util


class TransactionEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: QueryNetwork=None, transaction_hash: str=None, event_type: QueryTransactionEventType=None, _from: str=None, to: str=None, value: str=None, contract_address: str=None, token_id: str=None, transaction_id: str=None, vout_index: int=None):
        """TransactionEvent - a model defined in OpenAPI

        :param network: The network of this TransactionEvent.
        :param transaction_hash: The transaction_hash of this TransactionEvent.
        :param event_type: The event_type of this TransactionEvent.
        :param _from: The _from of this TransactionEvent.
        :param to: The to of this TransactionEvent.
        :param value: The value of this TransactionEvent.
        :param contract_address: The contract_address of this TransactionEvent.
        :param token_id: The token_id of this TransactionEvent.
        :param transaction_id: The transaction_id of this TransactionEvent.
        :param vout_index: The vout_index of this TransactionEvent.
        """
        self.openapi_types = {
            'network': QueryNetwork,
            'transaction_hash': str,
            'event_type': QueryTransactionEventType,
            '_from': str,
            'to': str,
            'value': str,
            'contract_address': str,
            'token_id': str,
            'transaction_id': str,
            'vout_index': int
        }

        self.attribute_map = {
            'network': 'network',
            'transaction_hash': 'transactionHash',
            'event_type': 'eventType',
            '_from': 'from',
            'to': 'to',
            'value': 'value',
            'contract_address': 'contractAddress',
            'token_id': 'tokenId',
            'transaction_id': 'transactionId',
            'vout_index': 'voutIndex'
        }

        self._network = network
        self._transaction_hash = transaction_hash
        self._event_type = event_type
        self.__from = _from
        self._to = to
        self._value = value
        self._contract_address = contract_address
        self._token_id = token_id
        self._transaction_id = transaction_id
        self._vout_index = vout_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionEvent of this TransactionEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this TransactionEvent.


        :return: The network of this TransactionEvent.
        :rtype: QueryNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this TransactionEvent.


        :param network: The network of this TransactionEvent.
        :type network: QueryNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this TransactionEvent.


        :return: The transaction_hash of this TransactionEvent.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this TransactionEvent.


        :param transaction_hash: The transaction_hash of this TransactionEvent.
        :type transaction_hash: str
        """
        if transaction_hash is None:
            raise ValueError("Invalid value for `transaction_hash`, must not be `None`")

        self._transaction_hash = transaction_hash

    @property
    def event_type(self):
        """Gets the event_type of this TransactionEvent.


        :return: The event_type of this TransactionEvent.
        :rtype: QueryTransactionEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this TransactionEvent.


        :param event_type: The event_type of this TransactionEvent.
        :type event_type: QueryTransactionEventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def _from(self):
        """Gets the _from of this TransactionEvent.


        :return: The _from of this TransactionEvent.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TransactionEvent.


        :param _from: The _from of this TransactionEvent.
        :type _from: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this TransactionEvent.


        :return: The to of this TransactionEvent.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this TransactionEvent.


        :param to: The to of this TransactionEvent.
        :type to: str
        """

        self._to = to

    @property
    def value(self):
        """Gets the value of this TransactionEvent.


        :return: The value of this TransactionEvent.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TransactionEvent.


        :param value: The value of this TransactionEvent.
        :type value: str
        """

        self._value = value

    @property
    def contract_address(self):
        """Gets the contract_address of this TransactionEvent.


        :return: The contract_address of this TransactionEvent.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this TransactionEvent.


        :param contract_address: The contract_address of this TransactionEvent.
        :type contract_address: str
        """

        self._contract_address = contract_address

    @property
    def token_id(self):
        """Gets the token_id of this TransactionEvent.


        :return: The token_id of this TransactionEvent.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TransactionEvent.


        :param token_id: The token_id of this TransactionEvent.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionEvent.


        :return: The transaction_id of this TransactionEvent.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionEvent.


        :param transaction_id: The transaction_id of this TransactionEvent.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def vout_index(self):
        """Gets the vout_index of this TransactionEvent.


        :return: The vout_index of this TransactionEvent.
        :rtype: int
        """
        return self._vout_index

    @vout_index.setter
    def vout_index(self, vout_index):
        """Sets the vout_index of this TransactionEvent.


        :param vout_index: The vout_index of this TransactionEvent.
        :type vout_index: int
        """

        self._vout_index = vout_index
