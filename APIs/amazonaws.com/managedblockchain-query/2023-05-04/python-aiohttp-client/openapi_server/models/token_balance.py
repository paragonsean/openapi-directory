# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_token_balance_input_at_blockchain_instant import GetTokenBalanceInputAtBlockchainInstant
from openapi_server.models.token_balance_last_updated_time import TokenBalanceLastUpdatedTime
from openapi_server.models.token_balance_owner_identifier import TokenBalanceOwnerIdentifier
from openapi_server.models.token_balance_token_identifier import TokenBalanceTokenIdentifier
from openapi_server import util


class TokenBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_identifier: TokenBalanceOwnerIdentifier=None, token_identifier: TokenBalanceTokenIdentifier=None, balance: str=None, at_blockchain_instant: GetTokenBalanceInputAtBlockchainInstant=None, last_updated_time: TokenBalanceLastUpdatedTime=None):
        """TokenBalance - a model defined in OpenAPI

        :param owner_identifier: The owner_identifier of this TokenBalance.
        :param token_identifier: The token_identifier of this TokenBalance.
        :param balance: The balance of this TokenBalance.
        :param at_blockchain_instant: The at_blockchain_instant of this TokenBalance.
        :param last_updated_time: The last_updated_time of this TokenBalance.
        """
        self.openapi_types = {
            'owner_identifier': TokenBalanceOwnerIdentifier,
            'token_identifier': TokenBalanceTokenIdentifier,
            'balance': str,
            'at_blockchain_instant': GetTokenBalanceInputAtBlockchainInstant,
            'last_updated_time': TokenBalanceLastUpdatedTime
        }

        self.attribute_map = {
            'owner_identifier': 'ownerIdentifier',
            'token_identifier': 'tokenIdentifier',
            'balance': 'balance',
            'at_blockchain_instant': 'atBlockchainInstant',
            'last_updated_time': 'lastUpdatedTime'
        }

        self._owner_identifier = owner_identifier
        self._token_identifier = token_identifier
        self._balance = balance
        self._at_blockchain_instant = at_blockchain_instant
        self._last_updated_time = last_updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenBalance of this TokenBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_identifier(self):
        """Gets the owner_identifier of this TokenBalance.


        :return: The owner_identifier of this TokenBalance.
        :rtype: TokenBalanceOwnerIdentifier
        """
        return self._owner_identifier

    @owner_identifier.setter
    def owner_identifier(self, owner_identifier):
        """Sets the owner_identifier of this TokenBalance.


        :param owner_identifier: The owner_identifier of this TokenBalance.
        :type owner_identifier: TokenBalanceOwnerIdentifier
        """

        self._owner_identifier = owner_identifier

    @property
    def token_identifier(self):
        """Gets the token_identifier of this TokenBalance.


        :return: The token_identifier of this TokenBalance.
        :rtype: TokenBalanceTokenIdentifier
        """
        return self._token_identifier

    @token_identifier.setter
    def token_identifier(self, token_identifier):
        """Sets the token_identifier of this TokenBalance.


        :param token_identifier: The token_identifier of this TokenBalance.
        :type token_identifier: TokenBalanceTokenIdentifier
        """

        self._token_identifier = token_identifier

    @property
    def balance(self):
        """Gets the balance of this TokenBalance.


        :return: The balance of this TokenBalance.
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this TokenBalance.


        :param balance: The balance of this TokenBalance.
        :type balance: str
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def at_blockchain_instant(self):
        """Gets the at_blockchain_instant of this TokenBalance.


        :return: The at_blockchain_instant of this TokenBalance.
        :rtype: GetTokenBalanceInputAtBlockchainInstant
        """
        return self._at_blockchain_instant

    @at_blockchain_instant.setter
    def at_blockchain_instant(self, at_blockchain_instant):
        """Sets the at_blockchain_instant of this TokenBalance.


        :param at_blockchain_instant: The at_blockchain_instant of this TokenBalance.
        :type at_blockchain_instant: GetTokenBalanceInputAtBlockchainInstant
        """
        if at_blockchain_instant is None:
            raise ValueError("Invalid value for `at_blockchain_instant`, must not be `None`")

        self._at_blockchain_instant = at_blockchain_instant

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this TokenBalance.


        :return: The last_updated_time of this TokenBalance.
        :rtype: TokenBalanceLastUpdatedTime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this TokenBalance.


        :param last_updated_time: The last_updated_time of this TokenBalance.
        :type last_updated_time: TokenBalanceLastUpdatedTime
        """

        self._last_updated_time = last_updated_time
