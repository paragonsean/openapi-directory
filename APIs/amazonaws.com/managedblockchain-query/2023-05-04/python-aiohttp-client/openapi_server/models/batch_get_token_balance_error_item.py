# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blockchain_instant import BlockchainInstant
from openapi_server.models.error_type import ErrorType
from openapi_server.models.owner_identifier import OwnerIdentifier
from openapi_server.models.token_identifier import TokenIdentifier
from openapi_server import util


class BatchGetTokenBalanceErrorItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_identifier: TokenIdentifier=None, owner_identifier: OwnerIdentifier=None, at_blockchain_instant: BlockchainInstant=None, error_code: str=None, error_message: str=None, error_type: ErrorType=None):
        """BatchGetTokenBalanceErrorItem - a model defined in OpenAPI

        :param token_identifier: The token_identifier of this BatchGetTokenBalanceErrorItem.
        :param owner_identifier: The owner_identifier of this BatchGetTokenBalanceErrorItem.
        :param at_blockchain_instant: The at_blockchain_instant of this BatchGetTokenBalanceErrorItem.
        :param error_code: The error_code of this BatchGetTokenBalanceErrorItem.
        :param error_message: The error_message of this BatchGetTokenBalanceErrorItem.
        :param error_type: The error_type of this BatchGetTokenBalanceErrorItem.
        """
        self.openapi_types = {
            'token_identifier': TokenIdentifier,
            'owner_identifier': OwnerIdentifier,
            'at_blockchain_instant': BlockchainInstant,
            'error_code': str,
            'error_message': str,
            'error_type': ErrorType
        }

        self.attribute_map = {
            'token_identifier': 'tokenIdentifier',
            'owner_identifier': 'ownerIdentifier',
            'at_blockchain_instant': 'atBlockchainInstant',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'error_type': 'errorType'
        }

        self._token_identifier = token_identifier
        self._owner_identifier = owner_identifier
        self._at_blockchain_instant = at_blockchain_instant
        self._error_code = error_code
        self._error_message = error_message
        self._error_type = error_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetTokenBalanceErrorItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetTokenBalanceErrorItem of this BatchGetTokenBalanceErrorItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_identifier(self):
        """Gets the token_identifier of this BatchGetTokenBalanceErrorItem.


        :return: The token_identifier of this BatchGetTokenBalanceErrorItem.
        :rtype: TokenIdentifier
        """
        return self._token_identifier

    @token_identifier.setter
    def token_identifier(self, token_identifier):
        """Sets the token_identifier of this BatchGetTokenBalanceErrorItem.


        :param token_identifier: The token_identifier of this BatchGetTokenBalanceErrorItem.
        :type token_identifier: TokenIdentifier
        """

        self._token_identifier = token_identifier

    @property
    def owner_identifier(self):
        """Gets the owner_identifier of this BatchGetTokenBalanceErrorItem.


        :return: The owner_identifier of this BatchGetTokenBalanceErrorItem.
        :rtype: OwnerIdentifier
        """
        return self._owner_identifier

    @owner_identifier.setter
    def owner_identifier(self, owner_identifier):
        """Sets the owner_identifier of this BatchGetTokenBalanceErrorItem.


        :param owner_identifier: The owner_identifier of this BatchGetTokenBalanceErrorItem.
        :type owner_identifier: OwnerIdentifier
        """

        self._owner_identifier = owner_identifier

    @property
    def at_blockchain_instant(self):
        """Gets the at_blockchain_instant of this BatchGetTokenBalanceErrorItem.


        :return: The at_blockchain_instant of this BatchGetTokenBalanceErrorItem.
        :rtype: BlockchainInstant
        """
        return self._at_blockchain_instant

    @at_blockchain_instant.setter
    def at_blockchain_instant(self, at_blockchain_instant):
        """Sets the at_blockchain_instant of this BatchGetTokenBalanceErrorItem.


        :param at_blockchain_instant: The at_blockchain_instant of this BatchGetTokenBalanceErrorItem.
        :type at_blockchain_instant: BlockchainInstant
        """

        self._at_blockchain_instant = at_blockchain_instant

    @property
    def error_code(self):
        """Gets the error_code of this BatchGetTokenBalanceErrorItem.


        :return: The error_code of this BatchGetTokenBalanceErrorItem.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BatchGetTokenBalanceErrorItem.


        :param error_code: The error_code of this BatchGetTokenBalanceErrorItem.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this BatchGetTokenBalanceErrorItem.


        :return: The error_message of this BatchGetTokenBalanceErrorItem.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BatchGetTokenBalanceErrorItem.


        :param error_message: The error_message of this BatchGetTokenBalanceErrorItem.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def error_type(self):
        """Gets the error_type of this BatchGetTokenBalanceErrorItem.


        :return: The error_type of this BatchGetTokenBalanceErrorItem.
        :rtype: ErrorType
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this BatchGetTokenBalanceErrorItem.


        :param error_type: The error_type of this BatchGetTokenBalanceErrorItem.
        :type error_type: ErrorType
        """
        if error_type is None:
            raise ValueError("Invalid value for `error_type`, must not be `None`")

        self._error_type = error_type
