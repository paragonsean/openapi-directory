# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetTransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_hash: str=None, network: str=None):
        """GetTransactionRequest - a model defined in OpenAPI

        :param transaction_hash: The transaction_hash of this GetTransactionRequest.
        :param network: The network of this GetTransactionRequest.
        """
        self.openapi_types = {
            'transaction_hash': str,
            'network': str
        }

        self.attribute_map = {
            'transaction_hash': 'transactionHash',
            'network': 'network'
        }

        self._transaction_hash = transaction_hash
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTransaction_request of this GetTransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this GetTransactionRequest.

        The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.

        :return: The transaction_hash of this GetTransactionRequest.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this GetTransactionRequest.

        The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.

        :param transaction_hash: The transaction_hash of this GetTransactionRequest.
        :type transaction_hash: str
        """
        if transaction_hash is None:
            raise ValueError("Invalid value for `transaction_hash`, must not be `None`")
        if transaction_hash is not None and not re.search(r'(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})', transaction_hash):
            raise ValueError("Invalid value for `transaction_hash`, must be a follow pattern or equal to `/(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})/`")

        self._transaction_hash = transaction_hash

    @property
    def network(self):
        """Gets the network of this GetTransactionRequest.

        The blockchain network where the transaction occurred.

        :return: The network of this GetTransactionRequest.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GetTransactionRequest.

        The blockchain network where the transaction occurred.

        :param network: The network of this GetTransactionRequest.
        :type network: str
        """
        allowed_values = ["ETHEREUM_MAINNET", "BITCOIN_MAINNET"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network
