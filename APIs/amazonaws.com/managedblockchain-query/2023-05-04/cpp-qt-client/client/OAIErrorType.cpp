/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorType::OAIErrorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorType::OAIErrorType() {
    this->initializeModel();
}

OAIErrorType::~OAIErrorType() {}

void OAIErrorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VALIDATION_EXCEPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorType::VALIDATION_EXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_NOT_FOUND_EXCEPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorType::RESOURCE_NOT_FOUND_EXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorType::VALIDATION_EXCEPTION:
            val = "VALIDATION_EXCEPTION";
            break;
        case eOAIErrorType::RESOURCE_NOT_FOUND_EXCEPTION:
            val = "RESOURCE_NOT_FOUND_EXCEPTION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorType::eOAIErrorType OAIErrorType::getValue() const {
    return m_value;
}

void OAIErrorType::setValue(const OAIErrorType::eOAIErrorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
