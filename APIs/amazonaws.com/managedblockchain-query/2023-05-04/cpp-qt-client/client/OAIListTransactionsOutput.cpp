/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTransactionsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTransactionsOutput::OAIListTransactionsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTransactionsOutput::OAIListTransactionsOutput() {
    this->initializeModel();
}

OAIListTransactionsOutput::~OAIListTransactionsOutput() {}

void OAIListTransactionsOutput::initializeModel() {

    m_transactions_isSet = false;
    m_transactions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTransactionsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTransactionsOutput::fromJsonObject(QJsonObject json) {

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTransactionsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTransactionsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_transactions.isSet()) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListTransactionsOutput::getTransactions() const {
    return m_transactions;
}
void OAIListTransactionsOutput::setTransactions(const QList &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIListTransactionsOutput::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIListTransactionsOutput::is_transactions_Valid() const{
    return m_transactions_isValid;
}

QString OAIListTransactionsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListTransactionsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTransactionsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTransactionsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTransactionsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTransactionsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transactions_isValid && true;
}

} // namespace OpenAPI
