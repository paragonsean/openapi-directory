/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBatchGetTokenBalanceOutputItem.h
 *
 * The container for the properties of a token balance output.
 */

#ifndef OAIBatchGetTokenBalanceOutputItem_H
#define OAIBatchGetTokenBalanceOutputItem_H

#include <QJsonObject>

#include "OAIBlockchainInstant.h"
#include "OAIOwnerIdentifier.h"
#include "OAITokenIdentifier.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOwnerIdentifier;
class OAITokenIdentifier;
class OAIBlockchainInstant;

class OAIBatchGetTokenBalanceOutputItem : public OAIObject {
public:
    OAIBatchGetTokenBalanceOutputItem();
    OAIBatchGetTokenBalanceOutputItem(QString json);
    ~OAIBatchGetTokenBalanceOutputItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOwnerIdentifier getOwnerIdentifier() const;
    void setOwnerIdentifier(const OAIOwnerIdentifier &owner_identifier);
    bool is_owner_identifier_Set() const;
    bool is_owner_identifier_Valid() const;

    OAITokenIdentifier getTokenIdentifier() const;
    void setTokenIdentifier(const OAITokenIdentifier &token_identifier);
    bool is_token_identifier_Set() const;
    bool is_token_identifier_Valid() const;

    QString getBalance() const;
    void setBalance(const QString &balance);
    bool is_balance_Set() const;
    bool is_balance_Valid() const;

    OAIBlockchainInstant getAtBlockchainInstant() const;
    void setAtBlockchainInstant(const OAIBlockchainInstant &at_blockchain_instant);
    bool is_at_blockchain_instant_Set() const;
    bool is_at_blockchain_instant_Valid() const;

    OAIBlockchainInstant getLastUpdatedTime() const;
    void setLastUpdatedTime(const OAIBlockchainInstant &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOwnerIdentifier m_owner_identifier;
    bool m_owner_identifier_isSet;
    bool m_owner_identifier_isValid;

    OAITokenIdentifier m_token_identifier;
    bool m_token_identifier_isSet;
    bool m_token_identifier_isValid;

    QString m_balance;
    bool m_balance_isSet;
    bool m_balance_isValid;

    OAIBlockchainInstant m_at_blockchain_instant;
    bool m_at_blockchain_instant_isSet;
    bool m_at_blockchain_instant_isValid;

    OAIBlockchainInstant m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBatchGetTokenBalanceOutputItem)

#endif // OAIBatchGetTokenBalanceOutputItem_H
