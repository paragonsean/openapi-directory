/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTokenBalanceInput.h
 *
 * 
 */

#ifndef OAIGetTokenBalanceInput_H
#define OAIGetTokenBalanceInput_H

#include <QJsonObject>

#include "OAIGetTokenBalanceInput_atBlockchainInstant.h"
#include "OAIGetTokenBalanceInput_ownerIdentifier.h"
#include "OAIGetTokenBalanceInput_tokenIdentifier.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTokenBalanceInput_tokenIdentifier;
class OAIGetTokenBalanceInput_ownerIdentifier;
class OAIGetTokenBalanceInput_atBlockchainInstant;

class OAIGetTokenBalanceInput : public OAIObject {
public:
    OAIGetTokenBalanceInput();
    OAIGetTokenBalanceInput(QString json);
    ~OAIGetTokenBalanceInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetTokenBalanceInput_tokenIdentifier getTokenIdentifier() const;
    void setTokenIdentifier(const OAIGetTokenBalanceInput_tokenIdentifier &token_identifier);
    bool is_token_identifier_Set() const;
    bool is_token_identifier_Valid() const;

    OAIGetTokenBalanceInput_ownerIdentifier getOwnerIdentifier() const;
    void setOwnerIdentifier(const OAIGetTokenBalanceInput_ownerIdentifier &owner_identifier);
    bool is_owner_identifier_Set() const;
    bool is_owner_identifier_Valid() const;

    OAIGetTokenBalanceInput_atBlockchainInstant getAtBlockchainInstant() const;
    void setAtBlockchainInstant(const OAIGetTokenBalanceInput_atBlockchainInstant &at_blockchain_instant);
    bool is_at_blockchain_instant_Set() const;
    bool is_at_blockchain_instant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetTokenBalanceInput_tokenIdentifier m_token_identifier;
    bool m_token_identifier_isSet;
    bool m_token_identifier_isValid;

    OAIGetTokenBalanceInput_ownerIdentifier m_owner_identifier;
    bool m_owner_identifier_isSet;
    bool m_owner_identifier_isValid;

    OAIGetTokenBalanceInput_atBlockchainInstant m_at_blockchain_instant;
    bool m_at_blockchain_instant_isSet;
    bool m_at_blockchain_instant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTokenBalanceInput)

#endif // OAIGetTokenBalanceInput_H
