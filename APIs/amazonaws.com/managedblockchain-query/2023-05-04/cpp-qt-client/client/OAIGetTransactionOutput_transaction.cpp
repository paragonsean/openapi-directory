/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactionOutput_transaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactionOutput_transaction::OAIGetTransactionOutput_transaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactionOutput_transaction::OAIGetTransactionOutput_transaction() {
    this->initializeModel();
}

OAIGetTransactionOutput_transaction::~OAIGetTransactionOutput_transaction() {}

void OAIGetTransactionOutput_transaction::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_block_hash_isSet = false;
    m_block_hash_isValid = false;

    m_transaction_hash_isSet = false;
    m_transaction_hash_isValid = false;

    m_block_number_isSet = false;
    m_block_number_isValid = false;

    m_transaction_timestamp_isSet = false;
    m_transaction_timestamp_isValid = false;

    m_transaction_index_isSet = false;
    m_transaction_index_isValid = false;

    m_number_of_transactions_isSet = false;
    m_number_of_transactions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_contract_address_isSet = false;
    m_contract_address_isValid = false;

    m_gas_used_isSet = false;
    m_gas_used_isValid = false;

    m_cumulative_gas_used_isSet = false;
    m_cumulative_gas_used_isValid = false;

    m_effective_gas_price_isSet = false;
    m_effective_gas_price_isValid = false;

    m_signature_v_isSet = false;
    m_signature_v_isValid = false;

    m_signature_r_isSet = false;
    m_signature_r_isValid = false;

    m_signature_s_isSet = false;
    m_signature_s_isValid = false;

    m_transaction_fee_isSet = false;
    m_transaction_fee_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIGetTransactionOutput_transaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactionOutput_transaction::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_block_hash_isValid = ::OpenAPI::fromJsonValue(m_block_hash, json[QString("blockHash")]);
    m_block_hash_isSet = !json[QString("blockHash")].isNull() && m_block_hash_isValid;

    m_transaction_hash_isValid = ::OpenAPI::fromJsonValue(m_transaction_hash, json[QString("transactionHash")]);
    m_transaction_hash_isSet = !json[QString("transactionHash")].isNull() && m_transaction_hash_isValid;

    m_block_number_isValid = ::OpenAPI::fromJsonValue(m_block_number, json[QString("blockNumber")]);
    m_block_number_isSet = !json[QString("blockNumber")].isNull() && m_block_number_isValid;

    m_transaction_timestamp_isValid = ::OpenAPI::fromJsonValue(m_transaction_timestamp, json[QString("transactionTimestamp")]);
    m_transaction_timestamp_isSet = !json[QString("transactionTimestamp")].isNull() && m_transaction_timestamp_isValid;

    m_transaction_index_isValid = ::OpenAPI::fromJsonValue(m_transaction_index, json[QString("transactionIndex")]);
    m_transaction_index_isSet = !json[QString("transactionIndex")].isNull() && m_transaction_index_isValid;

    m_number_of_transactions_isValid = ::OpenAPI::fromJsonValue(m_number_of_transactions, json[QString("numberOfTransactions")]);
    m_number_of_transactions_isSet = !json[QString("numberOfTransactions")].isNull() && m_number_of_transactions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_contract_address_isValid = ::OpenAPI::fromJsonValue(m_contract_address, json[QString("contractAddress")]);
    m_contract_address_isSet = !json[QString("contractAddress")].isNull() && m_contract_address_isValid;

    m_gas_used_isValid = ::OpenAPI::fromJsonValue(m_gas_used, json[QString("gasUsed")]);
    m_gas_used_isSet = !json[QString("gasUsed")].isNull() && m_gas_used_isValid;

    m_cumulative_gas_used_isValid = ::OpenAPI::fromJsonValue(m_cumulative_gas_used, json[QString("cumulativeGasUsed")]);
    m_cumulative_gas_used_isSet = !json[QString("cumulativeGasUsed")].isNull() && m_cumulative_gas_used_isValid;

    m_effective_gas_price_isValid = ::OpenAPI::fromJsonValue(m_effective_gas_price, json[QString("effectiveGasPrice")]);
    m_effective_gas_price_isSet = !json[QString("effectiveGasPrice")].isNull() && m_effective_gas_price_isValid;

    m_signature_v_isValid = ::OpenAPI::fromJsonValue(m_signature_v, json[QString("signatureV")]);
    m_signature_v_isSet = !json[QString("signatureV")].isNull() && m_signature_v_isValid;

    m_signature_r_isValid = ::OpenAPI::fromJsonValue(m_signature_r, json[QString("signatureR")]);
    m_signature_r_isSet = !json[QString("signatureR")].isNull() && m_signature_r_isValid;

    m_signature_s_isValid = ::OpenAPI::fromJsonValue(m_signature_s, json[QString("signatureS")]);
    m_signature_s_isSet = !json[QString("signatureS")].isNull() && m_signature_s_isValid;

    m_transaction_fee_isValid = ::OpenAPI::fromJsonValue(m_transaction_fee, json[QString("transactionFee")]);
    m_transaction_fee_isSet = !json[QString("transactionFee")].isNull() && m_transaction_fee_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAIGetTransactionOutput_transaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactionOutput_transaction::asJsonObject() const {
    QJsonObject obj;
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_block_hash_isSet) {
        obj.insert(QString("blockHash"), ::OpenAPI::toJsonValue(m_block_hash));
    }
    if (m_transaction_hash_isSet) {
        obj.insert(QString("transactionHash"), ::OpenAPI::toJsonValue(m_transaction_hash));
    }
    if (m_block_number_isSet) {
        obj.insert(QString("blockNumber"), ::OpenAPI::toJsonValue(m_block_number));
    }
    if (m_transaction_timestamp_isSet) {
        obj.insert(QString("transactionTimestamp"), ::OpenAPI::toJsonValue(m_transaction_timestamp));
    }
    if (m_transaction_index_isSet) {
        obj.insert(QString("transactionIndex"), ::OpenAPI::toJsonValue(m_transaction_index));
    }
    if (m_number_of_transactions_isSet) {
        obj.insert(QString("numberOfTransactions"), ::OpenAPI::toJsonValue(m_number_of_transactions));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_contract_address_isSet) {
        obj.insert(QString("contractAddress"), ::OpenAPI::toJsonValue(m_contract_address));
    }
    if (m_gas_used_isSet) {
        obj.insert(QString("gasUsed"), ::OpenAPI::toJsonValue(m_gas_used));
    }
    if (m_cumulative_gas_used_isSet) {
        obj.insert(QString("cumulativeGasUsed"), ::OpenAPI::toJsonValue(m_cumulative_gas_used));
    }
    if (m_effective_gas_price_isSet) {
        obj.insert(QString("effectiveGasPrice"), ::OpenAPI::toJsonValue(m_effective_gas_price));
    }
    if (m_signature_v_isSet) {
        obj.insert(QString("signatureV"), ::OpenAPI::toJsonValue(m_signature_v));
    }
    if (m_signature_r_isSet) {
        obj.insert(QString("signatureR"), ::OpenAPI::toJsonValue(m_signature_r));
    }
    if (m_signature_s_isSet) {
        obj.insert(QString("signatureS"), ::OpenAPI::toJsonValue(m_signature_s));
    }
    if (m_transaction_fee_isSet) {
        obj.insert(QString("transactionFee"), ::OpenAPI::toJsonValue(m_transaction_fee));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

OAIQueryNetwork OAIGetTransactionOutput_transaction::getNetwork() const {
    return m_network;
}
void OAIGetTransactionOutput_transaction::setNetwork(const OAIQueryNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGetTransactionOutput_transaction::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGetTransactionOutput_transaction::getBlockHash() const {
    return m_block_hash;
}
void OAIGetTransactionOutput_transaction::setBlockHash(const QString &block_hash) {
    m_block_hash = block_hash;
    m_block_hash_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_block_hash_Set() const{
    return m_block_hash_isSet;
}

bool OAIGetTransactionOutput_transaction::is_block_hash_Valid() const{
    return m_block_hash_isValid;
}

QString OAIGetTransactionOutput_transaction::getTransactionHash() const {
    return m_transaction_hash;
}
void OAIGetTransactionOutput_transaction::setTransactionHash(const QString &transaction_hash) {
    m_transaction_hash = transaction_hash;
    m_transaction_hash_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_transaction_hash_Set() const{
    return m_transaction_hash_isSet;
}

bool OAIGetTransactionOutput_transaction::is_transaction_hash_Valid() const{
    return m_transaction_hash_isValid;
}

QString OAIGetTransactionOutput_transaction::getBlockNumber() const {
    return m_block_number;
}
void OAIGetTransactionOutput_transaction::setBlockNumber(const QString &block_number) {
    m_block_number = block_number;
    m_block_number_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_block_number_Set() const{
    return m_block_number_isSet;
}

bool OAIGetTransactionOutput_transaction::is_block_number_Valid() const{
    return m_block_number_isValid;
}

QDateTime OAIGetTransactionOutput_transaction::getTransactionTimestamp() const {
    return m_transaction_timestamp;
}
void OAIGetTransactionOutput_transaction::setTransactionTimestamp(const QDateTime &transaction_timestamp) {
    m_transaction_timestamp = transaction_timestamp;
    m_transaction_timestamp_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_transaction_timestamp_Set() const{
    return m_transaction_timestamp_isSet;
}

bool OAIGetTransactionOutput_transaction::is_transaction_timestamp_Valid() const{
    return m_transaction_timestamp_isValid;
}

qint32 OAIGetTransactionOutput_transaction::getTransactionIndex() const {
    return m_transaction_index;
}
void OAIGetTransactionOutput_transaction::setTransactionIndex(const qint32 &transaction_index) {
    m_transaction_index = transaction_index;
    m_transaction_index_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_transaction_index_Set() const{
    return m_transaction_index_isSet;
}

bool OAIGetTransactionOutput_transaction::is_transaction_index_Valid() const{
    return m_transaction_index_isValid;
}

qint32 OAIGetTransactionOutput_transaction::getNumberOfTransactions() const {
    return m_number_of_transactions;
}
void OAIGetTransactionOutput_transaction::setNumberOfTransactions(const qint32 &number_of_transactions) {
    m_number_of_transactions = number_of_transactions;
    m_number_of_transactions_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_number_of_transactions_Set() const{
    return m_number_of_transactions_isSet;
}

bool OAIGetTransactionOutput_transaction::is_number_of_transactions_Valid() const{
    return m_number_of_transactions_isValid;
}

OAIQueryTransactionStatus OAIGetTransactionOutput_transaction::getStatus() const {
    return m_status;
}
void OAIGetTransactionOutput_transaction::setStatus(const OAIQueryTransactionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetTransactionOutput_transaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetTransactionOutput_transaction::getTo() const {
    return m_to;
}
void OAIGetTransactionOutput_transaction::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_to_Set() const{
    return m_to_isSet;
}

bool OAIGetTransactionOutput_transaction::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIGetTransactionOutput_transaction::getFrom() const {
    return m_from;
}
void OAIGetTransactionOutput_transaction::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_from_Set() const{
    return m_from_isSet;
}

bool OAIGetTransactionOutput_transaction::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIGetTransactionOutput_transaction::getContractAddress() const {
    return m_contract_address;
}
void OAIGetTransactionOutput_transaction::setContractAddress(const QString &contract_address) {
    m_contract_address = contract_address;
    m_contract_address_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_contract_address_Set() const{
    return m_contract_address_isSet;
}

bool OAIGetTransactionOutput_transaction::is_contract_address_Valid() const{
    return m_contract_address_isValid;
}

QString OAIGetTransactionOutput_transaction::getGasUsed() const {
    return m_gas_used;
}
void OAIGetTransactionOutput_transaction::setGasUsed(const QString &gas_used) {
    m_gas_used = gas_used;
    m_gas_used_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_gas_used_Set() const{
    return m_gas_used_isSet;
}

bool OAIGetTransactionOutput_transaction::is_gas_used_Valid() const{
    return m_gas_used_isValid;
}

QString OAIGetTransactionOutput_transaction::getCumulativeGasUsed() const {
    return m_cumulative_gas_used;
}
void OAIGetTransactionOutput_transaction::setCumulativeGasUsed(const QString &cumulative_gas_used) {
    m_cumulative_gas_used = cumulative_gas_used;
    m_cumulative_gas_used_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_cumulative_gas_used_Set() const{
    return m_cumulative_gas_used_isSet;
}

bool OAIGetTransactionOutput_transaction::is_cumulative_gas_used_Valid() const{
    return m_cumulative_gas_used_isValid;
}

QString OAIGetTransactionOutput_transaction::getEffectiveGasPrice() const {
    return m_effective_gas_price;
}
void OAIGetTransactionOutput_transaction::setEffectiveGasPrice(const QString &effective_gas_price) {
    m_effective_gas_price = effective_gas_price;
    m_effective_gas_price_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_effective_gas_price_Set() const{
    return m_effective_gas_price_isSet;
}

bool OAIGetTransactionOutput_transaction::is_effective_gas_price_Valid() const{
    return m_effective_gas_price_isValid;
}

qint32 OAIGetTransactionOutput_transaction::getSignatureV() const {
    return m_signature_v;
}
void OAIGetTransactionOutput_transaction::setSignatureV(const qint32 &signature_v) {
    m_signature_v = signature_v;
    m_signature_v_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_signature_v_Set() const{
    return m_signature_v_isSet;
}

bool OAIGetTransactionOutput_transaction::is_signature_v_Valid() const{
    return m_signature_v_isValid;
}

QString OAIGetTransactionOutput_transaction::getSignatureR() const {
    return m_signature_r;
}
void OAIGetTransactionOutput_transaction::setSignatureR(const QString &signature_r) {
    m_signature_r = signature_r;
    m_signature_r_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_signature_r_Set() const{
    return m_signature_r_isSet;
}

bool OAIGetTransactionOutput_transaction::is_signature_r_Valid() const{
    return m_signature_r_isValid;
}

QString OAIGetTransactionOutput_transaction::getSignatureS() const {
    return m_signature_s;
}
void OAIGetTransactionOutput_transaction::setSignatureS(const QString &signature_s) {
    m_signature_s = signature_s;
    m_signature_s_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_signature_s_Set() const{
    return m_signature_s_isSet;
}

bool OAIGetTransactionOutput_transaction::is_signature_s_Valid() const{
    return m_signature_s_isValid;
}

QString OAIGetTransactionOutput_transaction::getTransactionFee() const {
    return m_transaction_fee;
}
void OAIGetTransactionOutput_transaction::setTransactionFee(const QString &transaction_fee) {
    m_transaction_fee = transaction_fee;
    m_transaction_fee_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_transaction_fee_Set() const{
    return m_transaction_fee_isSet;
}

bool OAIGetTransactionOutput_transaction::is_transaction_fee_Valid() const{
    return m_transaction_fee_isValid;
}

QString OAIGetTransactionOutput_transaction::getTransactionId() const {
    return m_transaction_id;
}
void OAIGetTransactionOutput_transaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIGetTransactionOutput_transaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIGetTransactionOutput_transaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIGetTransactionOutput_transaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_transactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cumulative_gas_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_gas_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_v_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_r_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactionOutput_transaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_isValid && m_transaction_hash_isValid && m_transaction_timestamp_isValid && m_transaction_index_isValid && m_number_of_transactions_isValid && m_status_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
