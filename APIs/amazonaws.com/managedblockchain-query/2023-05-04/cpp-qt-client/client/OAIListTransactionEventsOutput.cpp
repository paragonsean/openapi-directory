/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTransactionEventsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTransactionEventsOutput::OAIListTransactionEventsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTransactionEventsOutput::OAIListTransactionEventsOutput() {
    this->initializeModel();
}

OAIListTransactionEventsOutput::~OAIListTransactionEventsOutput() {}

void OAIListTransactionEventsOutput::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTransactionEventsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTransactionEventsOutput::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTransactionEventsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTransactionEventsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListTransactionEventsOutput::getEvents() const {
    return m_events;
}
void OAIListTransactionEventsOutput::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIListTransactionEventsOutput::is_events_Set() const{
    return m_events_isSet;
}

bool OAIListTransactionEventsOutput::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIListTransactionEventsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListTransactionEventsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTransactionEventsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTransactionEventsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTransactionEventsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTransactionEventsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && true;
}

} // namespace OpenAPI
