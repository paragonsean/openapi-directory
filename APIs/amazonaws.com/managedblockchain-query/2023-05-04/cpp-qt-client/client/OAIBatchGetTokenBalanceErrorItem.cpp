/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetTokenBalanceErrorItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetTokenBalanceErrorItem::OAIBatchGetTokenBalanceErrorItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetTokenBalanceErrorItem::OAIBatchGetTokenBalanceErrorItem() {
    this->initializeModel();
}

OAIBatchGetTokenBalanceErrorItem::~OAIBatchGetTokenBalanceErrorItem() {}

void OAIBatchGetTokenBalanceErrorItem::initializeModel() {

    m_token_identifier_isSet = false;
    m_token_identifier_isValid = false;

    m_owner_identifier_isSet = false;
    m_owner_identifier_isValid = false;

    m_at_blockchain_instant_isSet = false;
    m_at_blockchain_instant_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;
}

void OAIBatchGetTokenBalanceErrorItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetTokenBalanceErrorItem::fromJsonObject(QJsonObject json) {

    m_token_identifier_isValid = ::OpenAPI::fromJsonValue(m_token_identifier, json[QString("tokenIdentifier")]);
    m_token_identifier_isSet = !json[QString("tokenIdentifier")].isNull() && m_token_identifier_isValid;

    m_owner_identifier_isValid = ::OpenAPI::fromJsonValue(m_owner_identifier, json[QString("ownerIdentifier")]);
    m_owner_identifier_isSet = !json[QString("ownerIdentifier")].isNull() && m_owner_identifier_isValid;

    m_at_blockchain_instant_isValid = ::OpenAPI::fromJsonValue(m_at_blockchain_instant, json[QString("atBlockchainInstant")]);
    m_at_blockchain_instant_isSet = !json[QString("atBlockchainInstant")].isNull() && m_at_blockchain_instant_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;
}

QString OAIBatchGetTokenBalanceErrorItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetTokenBalanceErrorItem::asJsonObject() const {
    QJsonObject obj;
    if (m_token_identifier.isSet()) {
        obj.insert(QString("tokenIdentifier"), ::OpenAPI::toJsonValue(m_token_identifier));
    }
    if (m_owner_identifier.isSet()) {
        obj.insert(QString("ownerIdentifier"), ::OpenAPI::toJsonValue(m_owner_identifier));
    }
    if (m_at_blockchain_instant.isSet()) {
        obj.insert(QString("atBlockchainInstant"), ::OpenAPI::toJsonValue(m_at_blockchain_instant));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_type.isSet()) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    return obj;
}

OAITokenIdentifier OAIBatchGetTokenBalanceErrorItem::getTokenIdentifier() const {
    return m_token_identifier;
}
void OAIBatchGetTokenBalanceErrorItem::setTokenIdentifier(const OAITokenIdentifier &token_identifier) {
    m_token_identifier = token_identifier;
    m_token_identifier_isSet = true;
}

bool OAIBatchGetTokenBalanceErrorItem::is_token_identifier_Set() const{
    return m_token_identifier_isSet;
}

bool OAIBatchGetTokenBalanceErrorItem::is_token_identifier_Valid() const{
    return m_token_identifier_isValid;
}

OAIOwnerIdentifier OAIBatchGetTokenBalanceErrorItem::getOwnerIdentifier() const {
    return m_owner_identifier;
}
void OAIBatchGetTokenBalanceErrorItem::setOwnerIdentifier(const OAIOwnerIdentifier &owner_identifier) {
    m_owner_identifier = owner_identifier;
    m_owner_identifier_isSet = true;
}

bool OAIBatchGetTokenBalanceErrorItem::is_owner_identifier_Set() const{
    return m_owner_identifier_isSet;
}

bool OAIBatchGetTokenBalanceErrorItem::is_owner_identifier_Valid() const{
    return m_owner_identifier_isValid;
}

OAIBlockchainInstant OAIBatchGetTokenBalanceErrorItem::getAtBlockchainInstant() const {
    return m_at_blockchain_instant;
}
void OAIBatchGetTokenBalanceErrorItem::setAtBlockchainInstant(const OAIBlockchainInstant &at_blockchain_instant) {
    m_at_blockchain_instant = at_blockchain_instant;
    m_at_blockchain_instant_isSet = true;
}

bool OAIBatchGetTokenBalanceErrorItem::is_at_blockchain_instant_Set() const{
    return m_at_blockchain_instant_isSet;
}

bool OAIBatchGetTokenBalanceErrorItem::is_at_blockchain_instant_Valid() const{
    return m_at_blockchain_instant_isValid;
}

QString OAIBatchGetTokenBalanceErrorItem::getErrorCode() const {
    return m_error_code;
}
void OAIBatchGetTokenBalanceErrorItem::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIBatchGetTokenBalanceErrorItem::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIBatchGetTokenBalanceErrorItem::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIBatchGetTokenBalanceErrorItem::getErrorMessage() const {
    return m_error_message;
}
void OAIBatchGetTokenBalanceErrorItem::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBatchGetTokenBalanceErrorItem::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBatchGetTokenBalanceErrorItem::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIErrorType OAIBatchGetTokenBalanceErrorItem::getErrorType() const {
    return m_error_type;
}
void OAIBatchGetTokenBalanceErrorItem::setErrorType(const OAIErrorType &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIBatchGetTokenBalanceErrorItem::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIBatchGetTokenBalanceErrorItem::is_error_type_Valid() const{
    return m_error_type_isValid;
}

bool OAIBatchGetTokenBalanceErrorItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_blockchain_instant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetTokenBalanceErrorItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_code_isValid && m_error_message_isValid && m_error_type_isValid && true;
}

} // namespace OpenAPI
