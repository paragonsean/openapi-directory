/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTokenBalances_request_tokenFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTokenBalances_request_tokenFilter::OAIListTokenBalances_request_tokenFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTokenBalances_request_tokenFilter::OAIListTokenBalances_request_tokenFilter() {
    this->initializeModel();
}

OAIListTokenBalances_request_tokenFilter::~OAIListTokenBalances_request_tokenFilter() {}

void OAIListTokenBalances_request_tokenFilter::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_contract_address_isSet = false;
    m_contract_address_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;
}

void OAIListTokenBalances_request_tokenFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTokenBalances_request_tokenFilter::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_contract_address_isValid = ::OpenAPI::fromJsonValue(m_contract_address, json[QString("contractAddress")]);
    m_contract_address_isSet = !json[QString("contractAddress")].isNull() && m_contract_address_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;
}

QString OAIListTokenBalances_request_tokenFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTokenBalances_request_tokenFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_contract_address_isSet) {
        obj.insert(QString("contractAddress"), ::OpenAPI::toJsonValue(m_contract_address));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    return obj;
}

OAIQueryNetwork OAIListTokenBalances_request_tokenFilter::getNetwork() const {
    return m_network;
}
void OAIListTokenBalances_request_tokenFilter::setNetwork(const OAIQueryNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIListTokenBalances_request_tokenFilter::is_network_Set() const{
    return m_network_isSet;
}

bool OAIListTokenBalances_request_tokenFilter::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIListTokenBalances_request_tokenFilter::getContractAddress() const {
    return m_contract_address;
}
void OAIListTokenBalances_request_tokenFilter::setContractAddress(const QString &contract_address) {
    m_contract_address = contract_address;
    m_contract_address_isSet = true;
}

bool OAIListTokenBalances_request_tokenFilter::is_contract_address_Set() const{
    return m_contract_address_isSet;
}

bool OAIListTokenBalances_request_tokenFilter::is_contract_address_Valid() const{
    return m_contract_address_isValid;
}

QString OAIListTokenBalances_request_tokenFilter::getTokenId() const {
    return m_token_id;
}
void OAIListTokenBalances_request_tokenFilter::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIListTokenBalances_request_tokenFilter::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIListTokenBalances_request_tokenFilter::is_token_id_Valid() const{
    return m_token_id_isValid;
}

bool OAIListTokenBalances_request_tokenFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTokenBalances_request_tokenFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
