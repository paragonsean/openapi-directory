/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionEvent::OAITransactionEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionEvent::OAITransactionEvent() {
    this->initializeModel();
}

OAITransactionEvent::~OAITransactionEvent() {}

void OAITransactionEvent::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_transaction_hash_isSet = false;
    m_transaction_hash_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_contract_address_isSet = false;
    m_contract_address_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_vout_index_isSet = false;
    m_vout_index_isValid = false;
}

void OAITransactionEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionEvent::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_transaction_hash_isValid = ::OpenAPI::fromJsonValue(m_transaction_hash, json[QString("transactionHash")]);
    m_transaction_hash_isSet = !json[QString("transactionHash")].isNull() && m_transaction_hash_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_contract_address_isValid = ::OpenAPI::fromJsonValue(m_contract_address, json[QString("contractAddress")]);
    m_contract_address_isSet = !json[QString("contractAddress")].isNull() && m_contract_address_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_vout_index_isValid = ::OpenAPI::fromJsonValue(m_vout_index, json[QString("voutIndex")]);
    m_vout_index_isSet = !json[QString("voutIndex")].isNull() && m_vout_index_isValid;
}

QString OAITransactionEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_transaction_hash_isSet) {
        obj.insert(QString("transactionHash"), ::OpenAPI::toJsonValue(m_transaction_hash));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_contract_address_isSet) {
        obj.insert(QString("contractAddress"), ::OpenAPI::toJsonValue(m_contract_address));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_vout_index_isSet) {
        obj.insert(QString("voutIndex"), ::OpenAPI::toJsonValue(m_vout_index));
    }
    return obj;
}

OAIQueryNetwork OAITransactionEvent::getNetwork() const {
    return m_network;
}
void OAITransactionEvent::setNetwork(const OAIQueryNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAITransactionEvent::is_network_Set() const{
    return m_network_isSet;
}

bool OAITransactionEvent::is_network_Valid() const{
    return m_network_isValid;
}

QString OAITransactionEvent::getTransactionHash() const {
    return m_transaction_hash;
}
void OAITransactionEvent::setTransactionHash(const QString &transaction_hash) {
    m_transaction_hash = transaction_hash;
    m_transaction_hash_isSet = true;
}

bool OAITransactionEvent::is_transaction_hash_Set() const{
    return m_transaction_hash_isSet;
}

bool OAITransactionEvent::is_transaction_hash_Valid() const{
    return m_transaction_hash_isValid;
}

OAIQueryTransactionEventType OAITransactionEvent::getEventType() const {
    return m_event_type;
}
void OAITransactionEvent::setEventType(const OAIQueryTransactionEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAITransactionEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAITransactionEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAITransactionEvent::getFrom() const {
    return m_from;
}
void OAITransactionEvent::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITransactionEvent::is_from_Set() const{
    return m_from_isSet;
}

bool OAITransactionEvent::is_from_Valid() const{
    return m_from_isValid;
}

QString OAITransactionEvent::getTo() const {
    return m_to;
}
void OAITransactionEvent::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITransactionEvent::is_to_Set() const{
    return m_to_isSet;
}

bool OAITransactionEvent::is_to_Valid() const{
    return m_to_isValid;
}

QString OAITransactionEvent::getValue() const {
    return m_value;
}
void OAITransactionEvent::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITransactionEvent::is_value_Set() const{
    return m_value_isSet;
}

bool OAITransactionEvent::is_value_Valid() const{
    return m_value_isValid;
}

QString OAITransactionEvent::getContractAddress() const {
    return m_contract_address;
}
void OAITransactionEvent::setContractAddress(const QString &contract_address) {
    m_contract_address = contract_address;
    m_contract_address_isSet = true;
}

bool OAITransactionEvent::is_contract_address_Set() const{
    return m_contract_address_isSet;
}

bool OAITransactionEvent::is_contract_address_Valid() const{
    return m_contract_address_isValid;
}

QString OAITransactionEvent::getTokenId() const {
    return m_token_id;
}
void OAITransactionEvent::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAITransactionEvent::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAITransactionEvent::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QString OAITransactionEvent::getTransactionId() const {
    return m_transaction_id;
}
void OAITransactionEvent::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITransactionEvent::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITransactionEvent::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

qint32 OAITransactionEvent::getVoutIndex() const {
    return m_vout_index;
}
void OAITransactionEvent::setVoutIndex(const qint32 &vout_index) {
    m_vout_index = vout_index;
    m_vout_index_isSet = true;
}

bool OAITransactionEvent::is_vout_index_Set() const{
    return m_vout_index_isSet;
}

bool OAITransactionEvent::is_vout_index_Valid() const{
    return m_vout_index_isValid;
}

bool OAITransactionEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vout_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_isValid && m_transaction_hash_isValid && m_event_type_isValid && true;
}

} // namespace OpenAPI
