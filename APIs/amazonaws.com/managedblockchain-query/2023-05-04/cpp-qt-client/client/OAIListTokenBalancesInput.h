/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListTokenBalancesInput.h
 *
 * 
 */

#ifndef OAIListTokenBalancesInput_H
#define OAIListTokenBalancesInput_H

#include <QJsonObject>

#include "OAIListTokenBalancesInput_ownerFilter.h"
#include "OAIListTokenBalancesInput_tokenFilter.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListTokenBalancesInput_ownerFilter;
class OAIListTokenBalancesInput_tokenFilter;

class OAIListTokenBalancesInput : public OAIObject {
public:
    OAIListTokenBalancesInput();
    OAIListTokenBalancesInput(QString json);
    ~OAIListTokenBalancesInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIListTokenBalancesInput_ownerFilter getOwnerFilter() const;
    void setOwnerFilter(const OAIListTokenBalancesInput_ownerFilter &owner_filter);
    bool is_owner_filter_Set() const;
    bool is_owner_filter_Valid() const;

    OAIListTokenBalancesInput_tokenFilter getTokenFilter() const;
    void setTokenFilter(const OAIListTokenBalancesInput_tokenFilter &token_filter);
    bool is_token_filter_Set() const;
    bool is_token_filter_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIListTokenBalancesInput_ownerFilter m_owner_filter;
    bool m_owner_filter_isSet;
    bool m_owner_filter_isValid;

    OAIListTokenBalancesInput_tokenFilter m_token_filter;
    bool m_token_filter_isSet;
    bool m_token_filter_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListTokenBalancesInput)

#endif // OAIListTokenBalancesInput_H
