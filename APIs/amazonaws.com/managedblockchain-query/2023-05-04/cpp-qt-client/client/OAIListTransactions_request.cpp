/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTransactions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTransactions_request::OAIListTransactions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTransactions_request::OAIListTransactions_request() {
    this->initializeModel();
}

OAIListTransactions_request::~OAIListTransactions_request() {}

void OAIListTransactions_request::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_from_blockchain_instant_isSet = false;
    m_from_blockchain_instant_isValid = false;

    m_to_blockchain_instant_isSet = false;
    m_to_blockchain_instant_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListTransactions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTransactions_request::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_from_blockchain_instant_isValid = ::OpenAPI::fromJsonValue(m_from_blockchain_instant, json[QString("fromBlockchainInstant")]);
    m_from_blockchain_instant_isSet = !json[QString("fromBlockchainInstant")].isNull() && m_from_blockchain_instant_isValid;

    m_to_blockchain_instant_isValid = ::OpenAPI::fromJsonValue(m_to_blockchain_instant, json[QString("toBlockchainInstant")]);
    m_to_blockchain_instant_isSet = !json[QString("toBlockchainInstant")].isNull() && m_to_blockchain_instant_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListTransactions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTransactions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_from_blockchain_instant.isSet()) {
        obj.insert(QString("fromBlockchainInstant"), ::OpenAPI::toJsonValue(m_from_blockchain_instant));
    }
    if (m_to_blockchain_instant.isSet()) {
        obj.insert(QString("toBlockchainInstant"), ::OpenAPI::toJsonValue(m_to_blockchain_instant));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListTransactions_request::getAddress() const {
    return m_address;
}
void OAIListTransactions_request::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIListTransactions_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAIListTransactions_request::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIListTransactions_request::getNetwork() const {
    return m_network;
}
void OAIListTransactions_request::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIListTransactions_request::is_network_Set() const{
    return m_network_isSet;
}

bool OAIListTransactions_request::is_network_Valid() const{
    return m_network_isValid;
}

OAIGetTokenBalance_request_atBlockchainInstant OAIListTransactions_request::getFromBlockchainInstant() const {
    return m_from_blockchain_instant;
}
void OAIListTransactions_request::setFromBlockchainInstant(const OAIGetTokenBalance_request_atBlockchainInstant &from_blockchain_instant) {
    m_from_blockchain_instant = from_blockchain_instant;
    m_from_blockchain_instant_isSet = true;
}

bool OAIListTransactions_request::is_from_blockchain_instant_Set() const{
    return m_from_blockchain_instant_isSet;
}

bool OAIListTransactions_request::is_from_blockchain_instant_Valid() const{
    return m_from_blockchain_instant_isValid;
}

OAIGetTokenBalance_request_atBlockchainInstant OAIListTransactions_request::getToBlockchainInstant() const {
    return m_to_blockchain_instant;
}
void OAIListTransactions_request::setToBlockchainInstant(const OAIGetTokenBalance_request_atBlockchainInstant &to_blockchain_instant) {
    m_to_blockchain_instant = to_blockchain_instant;
    m_to_blockchain_instant_isSet = true;
}

bool OAIListTransactions_request::is_to_blockchain_instant_Set() const{
    return m_to_blockchain_instant_isSet;
}

bool OAIListTransactions_request::is_to_blockchain_instant_Valid() const{
    return m_to_blockchain_instant_isValid;
}

OAIListTransactions_request_sort OAIListTransactions_request::getSort() const {
    return m_sort;
}
void OAIListTransactions_request::setSort(const OAIListTransactions_request_sort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIListTransactions_request::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIListTransactions_request::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAIListTransactions_request::getNextToken() const {
    return m_next_token;
}
void OAIListTransactions_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTransactions_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTransactions_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListTransactions_request::getMaxResults() const {
    return m_max_results;
}
void OAIListTransactions_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTransactions_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTransactions_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListTransactions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_blockchain_instant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_blockchain_instant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTransactions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_network_isValid && true;
}

} // namespace OpenAPI
