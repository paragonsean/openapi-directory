/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTokenBalancesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTokenBalancesOutput::OAIListTokenBalancesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTokenBalancesOutput::OAIListTokenBalancesOutput() {
    this->initializeModel();
}

OAIListTokenBalancesOutput::~OAIListTokenBalancesOutput() {}

void OAIListTokenBalancesOutput::initializeModel() {

    m_token_balances_isSet = false;
    m_token_balances_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTokenBalancesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTokenBalancesOutput::fromJsonObject(QJsonObject json) {

    m_token_balances_isValid = ::OpenAPI::fromJsonValue(m_token_balances, json[QString("tokenBalances")]);
    m_token_balances_isSet = !json[QString("tokenBalances")].isNull() && m_token_balances_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTokenBalancesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTokenBalancesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_token_balances.isSet()) {
        obj.insert(QString("tokenBalances"), ::OpenAPI::toJsonValue(m_token_balances));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListTokenBalancesOutput::getTokenBalances() const {
    return m_token_balances;
}
void OAIListTokenBalancesOutput::setTokenBalances(const QList &token_balances) {
    m_token_balances = token_balances;
    m_token_balances_isSet = true;
}

bool OAIListTokenBalancesOutput::is_token_balances_Set() const{
    return m_token_balances_isSet;
}

bool OAIListTokenBalancesOutput::is_token_balances_Valid() const{
    return m_token_balances_isValid;
}

QString OAIListTokenBalancesOutput::getNextToken() const {
    return m_next_token;
}
void OAIListTokenBalancesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTokenBalancesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTokenBalancesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTokenBalancesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_balances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTokenBalancesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_balances_isValid && true;
}

} // namespace OpenAPI
