/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTokenBalancesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTokenBalancesInput::OAIListTokenBalancesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTokenBalancesInput::OAIListTokenBalancesInput() {
    this->initializeModel();
}

OAIListTokenBalancesInput::~OAIListTokenBalancesInput() {}

void OAIListTokenBalancesInput::initializeModel() {

    m_owner_filter_isSet = false;
    m_owner_filter_isValid = false;

    m_token_filter_isSet = false;
    m_token_filter_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListTokenBalancesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTokenBalancesInput::fromJsonObject(QJsonObject json) {

    m_owner_filter_isValid = ::OpenAPI::fromJsonValue(m_owner_filter, json[QString("ownerFilter")]);
    m_owner_filter_isSet = !json[QString("ownerFilter")].isNull() && m_owner_filter_isValid;

    m_token_filter_isValid = ::OpenAPI::fromJsonValue(m_token_filter, json[QString("tokenFilter")]);
    m_token_filter_isSet = !json[QString("tokenFilter")].isNull() && m_token_filter_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListTokenBalancesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTokenBalancesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_filter.isSet()) {
        obj.insert(QString("ownerFilter"), ::OpenAPI::toJsonValue(m_owner_filter));
    }
    if (m_token_filter.isSet()) {
        obj.insert(QString("tokenFilter"), ::OpenAPI::toJsonValue(m_token_filter));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIListTokenBalancesInput_ownerFilter OAIListTokenBalancesInput::getOwnerFilter() const {
    return m_owner_filter;
}
void OAIListTokenBalancesInput::setOwnerFilter(const OAIListTokenBalancesInput_ownerFilter &owner_filter) {
    m_owner_filter = owner_filter;
    m_owner_filter_isSet = true;
}

bool OAIListTokenBalancesInput::is_owner_filter_Set() const{
    return m_owner_filter_isSet;
}

bool OAIListTokenBalancesInput::is_owner_filter_Valid() const{
    return m_owner_filter_isValid;
}

OAIListTokenBalancesInput_tokenFilter OAIListTokenBalancesInput::getTokenFilter() const {
    return m_token_filter;
}
void OAIListTokenBalancesInput::setTokenFilter(const OAIListTokenBalancesInput_tokenFilter &token_filter) {
    m_token_filter = token_filter;
    m_token_filter_isSet = true;
}

bool OAIListTokenBalancesInput::is_token_filter_Set() const{
    return m_token_filter_isSet;
}

bool OAIListTokenBalancesInput::is_token_filter_Valid() const{
    return m_token_filter_isValid;
}

QString OAIListTokenBalancesInput::getNextToken() const {
    return m_next_token;
}
void OAIListTokenBalancesInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTokenBalancesInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTokenBalancesInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListTokenBalancesInput::getMaxResults() const {
    return m_max_results;
}
void OAIListTokenBalancesInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTokenBalancesInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTokenBalancesInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListTokenBalancesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTokenBalancesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_filter_isValid && true;
}

} // namespace OpenAPI
