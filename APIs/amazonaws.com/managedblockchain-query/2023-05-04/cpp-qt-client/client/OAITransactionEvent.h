/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransactionEvent.h
 *
 * The container for the properties of a transaction event.
 */

#ifndef OAITransactionEvent_H
#define OAITransactionEvent_H

#include <QJsonObject>

#include "OAIQueryNetwork.h"
#include "OAIQueryTransactionEventType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITransactionEvent : public OAIObject {
public:
    OAITransactionEvent();
    OAITransactionEvent(QString json);
    ~OAITransactionEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIQueryNetwork getNetwork() const;
    void setNetwork(const OAIQueryNetwork &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getTransactionHash() const;
    void setTransactionHash(const QString &transaction_hash);
    bool is_transaction_hash_Set() const;
    bool is_transaction_hash_Valid() const;

    OAIQueryTransactionEventType getEventType() const;
    void setEventType(const OAIQueryTransactionEventType &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    QString getContractAddress() const;
    void setContractAddress(const QString &contract_address);
    bool is_contract_address_Set() const;
    bool is_contract_address_Valid() const;

    QString getTokenId() const;
    void setTokenId(const QString &token_id);
    bool is_token_id_Set() const;
    bool is_token_id_Valid() const;

    QString getTransactionId() const;
    void setTransactionId(const QString &transaction_id);
    bool is_transaction_id_Set() const;
    bool is_transaction_id_Valid() const;

    qint32 getVoutIndex() const;
    void setVoutIndex(const qint32 &vout_index);
    bool is_vout_index_Set() const;
    bool is_vout_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIQueryNetwork m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_transaction_hash;
    bool m_transaction_hash_isSet;
    bool m_transaction_hash_isValid;

    OAIQueryTransactionEventType m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    QString m_contract_address;
    bool m_contract_address_isSet;
    bool m_contract_address_isValid;

    QString m_token_id;
    bool m_token_id_isSet;
    bool m_token_id_isValid;

    QString m_transaction_id;
    bool m_transaction_id_isSet;
    bool m_transaction_id_isValid;

    qint32 m_vout_index;
    bool m_vout_index_isSet;
    bool m_vout_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransactionEvent)

#endif // OAITransactionEvent_H
