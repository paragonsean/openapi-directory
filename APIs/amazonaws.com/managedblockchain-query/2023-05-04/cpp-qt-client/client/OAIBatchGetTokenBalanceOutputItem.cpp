/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetTokenBalanceOutputItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetTokenBalanceOutputItem::OAIBatchGetTokenBalanceOutputItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetTokenBalanceOutputItem::OAIBatchGetTokenBalanceOutputItem() {
    this->initializeModel();
}

OAIBatchGetTokenBalanceOutputItem::~OAIBatchGetTokenBalanceOutputItem() {}

void OAIBatchGetTokenBalanceOutputItem::initializeModel() {

    m_owner_identifier_isSet = false;
    m_owner_identifier_isValid = false;

    m_token_identifier_isSet = false;
    m_token_identifier_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_at_blockchain_instant_isSet = false;
    m_at_blockchain_instant_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIBatchGetTokenBalanceOutputItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetTokenBalanceOutputItem::fromJsonObject(QJsonObject json) {

    m_owner_identifier_isValid = ::OpenAPI::fromJsonValue(m_owner_identifier, json[QString("ownerIdentifier")]);
    m_owner_identifier_isSet = !json[QString("ownerIdentifier")].isNull() && m_owner_identifier_isValid;

    m_token_identifier_isValid = ::OpenAPI::fromJsonValue(m_token_identifier, json[QString("tokenIdentifier")]);
    m_token_identifier_isSet = !json[QString("tokenIdentifier")].isNull() && m_token_identifier_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_at_blockchain_instant_isValid = ::OpenAPI::fromJsonValue(m_at_blockchain_instant, json[QString("atBlockchainInstant")]);
    m_at_blockchain_instant_isSet = !json[QString("atBlockchainInstant")].isNull() && m_at_blockchain_instant_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIBatchGetTokenBalanceOutputItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetTokenBalanceOutputItem::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_identifier.isSet()) {
        obj.insert(QString("ownerIdentifier"), ::OpenAPI::toJsonValue(m_owner_identifier));
    }
    if (m_token_identifier.isSet()) {
        obj.insert(QString("tokenIdentifier"), ::OpenAPI::toJsonValue(m_token_identifier));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_at_blockchain_instant.isSet()) {
        obj.insert(QString("atBlockchainInstant"), ::OpenAPI::toJsonValue(m_at_blockchain_instant));
    }
    if (m_last_updated_time.isSet()) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

OAIOwnerIdentifier OAIBatchGetTokenBalanceOutputItem::getOwnerIdentifier() const {
    return m_owner_identifier;
}
void OAIBatchGetTokenBalanceOutputItem::setOwnerIdentifier(const OAIOwnerIdentifier &owner_identifier) {
    m_owner_identifier = owner_identifier;
    m_owner_identifier_isSet = true;
}

bool OAIBatchGetTokenBalanceOutputItem::is_owner_identifier_Set() const{
    return m_owner_identifier_isSet;
}

bool OAIBatchGetTokenBalanceOutputItem::is_owner_identifier_Valid() const{
    return m_owner_identifier_isValid;
}

OAITokenIdentifier OAIBatchGetTokenBalanceOutputItem::getTokenIdentifier() const {
    return m_token_identifier;
}
void OAIBatchGetTokenBalanceOutputItem::setTokenIdentifier(const OAITokenIdentifier &token_identifier) {
    m_token_identifier = token_identifier;
    m_token_identifier_isSet = true;
}

bool OAIBatchGetTokenBalanceOutputItem::is_token_identifier_Set() const{
    return m_token_identifier_isSet;
}

bool OAIBatchGetTokenBalanceOutputItem::is_token_identifier_Valid() const{
    return m_token_identifier_isValid;
}

QString OAIBatchGetTokenBalanceOutputItem::getBalance() const {
    return m_balance;
}
void OAIBatchGetTokenBalanceOutputItem::setBalance(const QString &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIBatchGetTokenBalanceOutputItem::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIBatchGetTokenBalanceOutputItem::is_balance_Valid() const{
    return m_balance_isValid;
}

OAIBlockchainInstant OAIBatchGetTokenBalanceOutputItem::getAtBlockchainInstant() const {
    return m_at_blockchain_instant;
}
void OAIBatchGetTokenBalanceOutputItem::setAtBlockchainInstant(const OAIBlockchainInstant &at_blockchain_instant) {
    m_at_blockchain_instant = at_blockchain_instant;
    m_at_blockchain_instant_isSet = true;
}

bool OAIBatchGetTokenBalanceOutputItem::is_at_blockchain_instant_Set() const{
    return m_at_blockchain_instant_isSet;
}

bool OAIBatchGetTokenBalanceOutputItem::is_at_blockchain_instant_Valid() const{
    return m_at_blockchain_instant_isValid;
}

OAIBlockchainInstant OAIBatchGetTokenBalanceOutputItem::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIBatchGetTokenBalanceOutputItem::setLastUpdatedTime(const OAIBlockchainInstant &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIBatchGetTokenBalanceOutputItem::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIBatchGetTokenBalanceOutputItem::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIBatchGetTokenBalanceOutputItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_blockchain_instant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetTokenBalanceOutputItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_at_blockchain_instant_isValid && true;
}

} // namespace OpenAPI
