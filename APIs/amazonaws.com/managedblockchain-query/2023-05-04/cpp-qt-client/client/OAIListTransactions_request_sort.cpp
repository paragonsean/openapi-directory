/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTransactions_request_sort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTransactions_request_sort::OAIListTransactions_request_sort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTransactions_request_sort::OAIListTransactions_request_sort() {
    this->initializeModel();
}

OAIListTransactions_request_sort::~OAIListTransactions_request_sort() {}

void OAIListTransactions_request_sort::initializeModel() {

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListTransactions_request_sort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTransactions_request_sort::fromJsonObject(QJsonObject json) {

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListTransactions_request_sort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTransactions_request_sort::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

OAIListTransactionsSortBy OAIListTransactions_request_sort::getSortBy() const {
    return m_sort_by;
}
void OAIListTransactions_request_sort::setSortBy(const OAIListTransactionsSortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListTransactions_request_sort::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListTransactions_request_sort::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListTransactions_request_sort::getSortOrder() const {
    return m_sort_order;
}
void OAIListTransactions_request_sort::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListTransactions_request_sort::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListTransactions_request_sort::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListTransactions_request_sort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTransactions_request_sort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
