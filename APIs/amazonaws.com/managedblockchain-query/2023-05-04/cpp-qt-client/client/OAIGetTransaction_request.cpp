/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransaction_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransaction_request::OAIGetTransaction_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransaction_request::OAIGetTransaction_request() {
    this->initializeModel();
}

OAIGetTransaction_request::~OAIGetTransaction_request() {}

void OAIGetTransaction_request::initializeModel() {

    m_transaction_hash_isSet = false;
    m_transaction_hash_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;
}

void OAIGetTransaction_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransaction_request::fromJsonObject(QJsonObject json) {

    m_transaction_hash_isValid = ::OpenAPI::fromJsonValue(m_transaction_hash, json[QString("transactionHash")]);
    m_transaction_hash_isSet = !json[QString("transactionHash")].isNull() && m_transaction_hash_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;
}

QString OAIGetTransaction_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransaction_request::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_hash_isSet) {
        obj.insert(QString("transactionHash"), ::OpenAPI::toJsonValue(m_transaction_hash));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    return obj;
}

QString OAIGetTransaction_request::getTransactionHash() const {
    return m_transaction_hash;
}
void OAIGetTransaction_request::setTransactionHash(const QString &transaction_hash) {
    m_transaction_hash = transaction_hash;
    m_transaction_hash_isSet = true;
}

bool OAIGetTransaction_request::is_transaction_hash_Set() const{
    return m_transaction_hash_isSet;
}

bool OAIGetTransaction_request::is_transaction_hash_Valid() const{
    return m_transaction_hash_isValid;
}

QString OAIGetTransaction_request::getNetwork() const {
    return m_network;
}
void OAIGetTransaction_request::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGetTransaction_request::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGetTransaction_request::is_network_Valid() const{
    return m_network_isValid;
}

bool OAIGetTransaction_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransaction_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_hash_isValid && m_network_isValid && true;
}

} // namespace OpenAPI
