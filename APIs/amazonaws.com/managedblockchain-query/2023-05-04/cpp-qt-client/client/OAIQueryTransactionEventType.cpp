/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryTransactionEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryTransactionEventType::OAIQueryTransactionEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryTransactionEventType::OAIQueryTransactionEventType() {
    this->initializeModel();
}

OAIQueryTransactionEventType::~OAIQueryTransactionEventType() {}

void OAIQueryTransactionEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQueryTransactionEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQueryTransactionEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ERC20_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC20_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERC20_MINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC20_MINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERC20_BURN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC20_BURN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERC20_DEPOSIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC20_DEPOSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERC20_WITHDRAWAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC20_WITHDRAWAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERC721_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC721_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERC1155_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ERC1155_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BITCOIN_VIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::BITCOIN_VIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BITCOIN_VOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::BITCOIN_VOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ETH_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::INTERNAL_ETH_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ETH_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryTransactionEventType::ETH_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQueryTransactionEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQueryTransactionEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQueryTransactionEventType::ERC20_TRANSFER:
            val = "ERC20_TRANSFER";
            break;
        case eOAIQueryTransactionEventType::ERC20_MINT:
            val = "ERC20_MINT";
            break;
        case eOAIQueryTransactionEventType::ERC20_BURN:
            val = "ERC20_BURN";
            break;
        case eOAIQueryTransactionEventType::ERC20_DEPOSIT:
            val = "ERC20_DEPOSIT";
            break;
        case eOAIQueryTransactionEventType::ERC20_WITHDRAWAL:
            val = "ERC20_WITHDRAWAL";
            break;
        case eOAIQueryTransactionEventType::ERC721_TRANSFER:
            val = "ERC721_TRANSFER";
            break;
        case eOAIQueryTransactionEventType::ERC1155_TRANSFER:
            val = "ERC1155_TRANSFER";
            break;
        case eOAIQueryTransactionEventType::BITCOIN_VIN:
            val = "BITCOIN_VIN";
            break;
        case eOAIQueryTransactionEventType::BITCOIN_VOUT:
            val = "BITCOIN_VOUT";
            break;
        case eOAIQueryTransactionEventType::INTERNAL_ETH_TRANSFER:
            val = "INTERNAL_ETH_TRANSFER";
            break;
        case eOAIQueryTransactionEventType::ETH_TRANSFER:
            val = "ETH_TRANSFER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQueryTransactionEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQueryTransactionEventType::eOAIQueryTransactionEventType OAIQueryTransactionEventType::getValue() const {
    return m_value;
}

void OAIQueryTransactionEventType::setValue(const OAIQueryTransactionEventType::eOAIQueryTransactionEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQueryTransactionEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIQueryTransactionEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
