/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTokenBalances_request_ownerFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTokenBalances_request_ownerFilter::OAIListTokenBalances_request_ownerFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTokenBalances_request_ownerFilter::OAIListTokenBalances_request_ownerFilter() {
    this->initializeModel();
}

OAIListTokenBalances_request_ownerFilter::~OAIListTokenBalances_request_ownerFilter() {}

void OAIListTokenBalances_request_ownerFilter::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;
}

void OAIListTokenBalances_request_ownerFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTokenBalances_request_ownerFilter::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;
}

QString OAIListTokenBalances_request_ownerFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTokenBalances_request_ownerFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    return obj;
}

QString OAIListTokenBalances_request_ownerFilter::getAddress() const {
    return m_address;
}
void OAIListTokenBalances_request_ownerFilter::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIListTokenBalances_request_ownerFilter::is_address_Set() const{
    return m_address_isSet;
}

bool OAIListTokenBalances_request_ownerFilter::is_address_Valid() const{
    return m_address_isValid;
}

bool OAIListTokenBalances_request_ownerFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTokenBalances_request_ownerFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
