/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITokenBalance.h
 *
 * The balance of the token.
 */

#ifndef OAITokenBalance_H
#define OAITokenBalance_H

#include <QJsonObject>

#include "OAIGetTokenBalanceInput_atBlockchainInstant.h"
#include "OAITokenBalance_lastUpdatedTime.h"
#include "OAITokenBalance_ownerIdentifier.h"
#include "OAITokenBalance_tokenIdentifier.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITokenBalance_ownerIdentifier;
class OAITokenBalance_tokenIdentifier;
class OAIGetTokenBalanceInput_atBlockchainInstant;
class OAITokenBalance_lastUpdatedTime;

class OAITokenBalance : public OAIObject {
public:
    OAITokenBalance();
    OAITokenBalance(QString json);
    ~OAITokenBalance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITokenBalance_ownerIdentifier getOwnerIdentifier() const;
    void setOwnerIdentifier(const OAITokenBalance_ownerIdentifier &owner_identifier);
    bool is_owner_identifier_Set() const;
    bool is_owner_identifier_Valid() const;

    OAITokenBalance_tokenIdentifier getTokenIdentifier() const;
    void setTokenIdentifier(const OAITokenBalance_tokenIdentifier &token_identifier);
    bool is_token_identifier_Set() const;
    bool is_token_identifier_Valid() const;

    QString getBalance() const;
    void setBalance(const QString &balance);
    bool is_balance_Set() const;
    bool is_balance_Valid() const;

    OAIGetTokenBalanceInput_atBlockchainInstant getAtBlockchainInstant() const;
    void setAtBlockchainInstant(const OAIGetTokenBalanceInput_atBlockchainInstant &at_blockchain_instant);
    bool is_at_blockchain_instant_Set() const;
    bool is_at_blockchain_instant_Valid() const;

    OAITokenBalance_lastUpdatedTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const OAITokenBalance_lastUpdatedTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITokenBalance_ownerIdentifier m_owner_identifier;
    bool m_owner_identifier_isSet;
    bool m_owner_identifier_isValid;

    OAITokenBalance_tokenIdentifier m_token_identifier;
    bool m_token_identifier_isSet;
    bool m_token_identifier_isValid;

    QString m_balance;
    bool m_balance_isSet;
    bool m_balance_isValid;

    OAIGetTokenBalanceInput_atBlockchainInstant m_at_blockchain_instant;
    bool m_at_blockchain_instant_isSet;
    bool m_at_blockchain_instant_isValid;

    OAITokenBalance_lastUpdatedTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITokenBalance)

#endif // OAITokenBalance_H
