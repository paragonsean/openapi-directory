/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTokenBalanceInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTokenBalanceInput::OAIGetTokenBalanceInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTokenBalanceInput::OAIGetTokenBalanceInput() {
    this->initializeModel();
}

OAIGetTokenBalanceInput::~OAIGetTokenBalanceInput() {}

void OAIGetTokenBalanceInput::initializeModel() {

    m_token_identifier_isSet = false;
    m_token_identifier_isValid = false;

    m_owner_identifier_isSet = false;
    m_owner_identifier_isValid = false;

    m_at_blockchain_instant_isSet = false;
    m_at_blockchain_instant_isValid = false;
}

void OAIGetTokenBalanceInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTokenBalanceInput::fromJsonObject(QJsonObject json) {

    m_token_identifier_isValid = ::OpenAPI::fromJsonValue(m_token_identifier, json[QString("tokenIdentifier")]);
    m_token_identifier_isSet = !json[QString("tokenIdentifier")].isNull() && m_token_identifier_isValid;

    m_owner_identifier_isValid = ::OpenAPI::fromJsonValue(m_owner_identifier, json[QString("ownerIdentifier")]);
    m_owner_identifier_isSet = !json[QString("ownerIdentifier")].isNull() && m_owner_identifier_isValid;

    m_at_blockchain_instant_isValid = ::OpenAPI::fromJsonValue(m_at_blockchain_instant, json[QString("atBlockchainInstant")]);
    m_at_blockchain_instant_isSet = !json[QString("atBlockchainInstant")].isNull() && m_at_blockchain_instant_isValid;
}

QString OAIGetTokenBalanceInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTokenBalanceInput::asJsonObject() const {
    QJsonObject obj;
    if (m_token_identifier.isSet()) {
        obj.insert(QString("tokenIdentifier"), ::OpenAPI::toJsonValue(m_token_identifier));
    }
    if (m_owner_identifier.isSet()) {
        obj.insert(QString("ownerIdentifier"), ::OpenAPI::toJsonValue(m_owner_identifier));
    }
    if (m_at_blockchain_instant.isSet()) {
        obj.insert(QString("atBlockchainInstant"), ::OpenAPI::toJsonValue(m_at_blockchain_instant));
    }
    return obj;
}

OAIGetTokenBalanceInput_tokenIdentifier OAIGetTokenBalanceInput::getTokenIdentifier() const {
    return m_token_identifier;
}
void OAIGetTokenBalanceInput::setTokenIdentifier(const OAIGetTokenBalanceInput_tokenIdentifier &token_identifier) {
    m_token_identifier = token_identifier;
    m_token_identifier_isSet = true;
}

bool OAIGetTokenBalanceInput::is_token_identifier_Set() const{
    return m_token_identifier_isSet;
}

bool OAIGetTokenBalanceInput::is_token_identifier_Valid() const{
    return m_token_identifier_isValid;
}

OAIGetTokenBalanceInput_ownerIdentifier OAIGetTokenBalanceInput::getOwnerIdentifier() const {
    return m_owner_identifier;
}
void OAIGetTokenBalanceInput::setOwnerIdentifier(const OAIGetTokenBalanceInput_ownerIdentifier &owner_identifier) {
    m_owner_identifier = owner_identifier;
    m_owner_identifier_isSet = true;
}

bool OAIGetTokenBalanceInput::is_owner_identifier_Set() const{
    return m_owner_identifier_isSet;
}

bool OAIGetTokenBalanceInput::is_owner_identifier_Valid() const{
    return m_owner_identifier_isValid;
}

OAIGetTokenBalanceInput_atBlockchainInstant OAIGetTokenBalanceInput::getAtBlockchainInstant() const {
    return m_at_blockchain_instant;
}
void OAIGetTokenBalanceInput::setAtBlockchainInstant(const OAIGetTokenBalanceInput_atBlockchainInstant &at_blockchain_instant) {
    m_at_blockchain_instant = at_blockchain_instant;
    m_at_blockchain_instant_isSet = true;
}

bool OAIGetTokenBalanceInput::is_at_blockchain_instant_Set() const{
    return m_at_blockchain_instant_isSet;
}

bool OAIGetTokenBalanceInput::is_at_blockchain_instant_Valid() const{
    return m_at_blockchain_instant_isValid;
}

bool OAIGetTokenBalanceInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_blockchain_instant.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTokenBalanceInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_identifier_isValid && m_owner_identifier_isValid && true;
}

} // namespace OpenAPI
