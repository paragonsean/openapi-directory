/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTransactionOutput_transaction.h
 *
 * 
 */

#ifndef OAIGetTransactionOutput_transaction_H
#define OAIGetTransactionOutput_transaction_H

#include <QJsonObject>

#include "OAIQueryNetwork.h"
#include "OAIQueryTransactionStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetTransactionOutput_transaction : public OAIObject {
public:
    OAIGetTransactionOutput_transaction();
    OAIGetTransactionOutput_transaction(QString json);
    ~OAIGetTransactionOutput_transaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIQueryNetwork getNetwork() const;
    void setNetwork(const OAIQueryNetwork &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getBlockHash() const;
    void setBlockHash(const QString &block_hash);
    bool is_block_hash_Set() const;
    bool is_block_hash_Valid() const;

    QString getTransactionHash() const;
    void setTransactionHash(const QString &transaction_hash);
    bool is_transaction_hash_Set() const;
    bool is_transaction_hash_Valid() const;

    QString getBlockNumber() const;
    void setBlockNumber(const QString &block_number);
    bool is_block_number_Set() const;
    bool is_block_number_Valid() const;

    QDateTime getTransactionTimestamp() const;
    void setTransactionTimestamp(const QDateTime &transaction_timestamp);
    bool is_transaction_timestamp_Set() const;
    bool is_transaction_timestamp_Valid() const;

    qint32 getTransactionIndex() const;
    void setTransactionIndex(const qint32 &transaction_index);
    bool is_transaction_index_Set() const;
    bool is_transaction_index_Valid() const;

    qint32 getNumberOfTransactions() const;
    void setNumberOfTransactions(const qint32 &number_of_transactions);
    bool is_number_of_transactions_Set() const;
    bool is_number_of_transactions_Valid() const;

    OAIQueryTransactionStatus getStatus() const;
    void setStatus(const OAIQueryTransactionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getContractAddress() const;
    void setContractAddress(const QString &contract_address);
    bool is_contract_address_Set() const;
    bool is_contract_address_Valid() const;

    QString getGasUsed() const;
    void setGasUsed(const QString &gas_used);
    bool is_gas_used_Set() const;
    bool is_gas_used_Valid() const;

    QString getCumulativeGasUsed() const;
    void setCumulativeGasUsed(const QString &cumulative_gas_used);
    bool is_cumulative_gas_used_Set() const;
    bool is_cumulative_gas_used_Valid() const;

    QString getEffectiveGasPrice() const;
    void setEffectiveGasPrice(const QString &effective_gas_price);
    bool is_effective_gas_price_Set() const;
    bool is_effective_gas_price_Valid() const;

    qint32 getSignatureV() const;
    void setSignatureV(const qint32 &signature_v);
    bool is_signature_v_Set() const;
    bool is_signature_v_Valid() const;

    QString getSignatureR() const;
    void setSignatureR(const QString &signature_r);
    bool is_signature_r_Set() const;
    bool is_signature_r_Valid() const;

    QString getSignatureS() const;
    void setSignatureS(const QString &signature_s);
    bool is_signature_s_Set() const;
    bool is_signature_s_Valid() const;

    QString getTransactionFee() const;
    void setTransactionFee(const QString &transaction_fee);
    bool is_transaction_fee_Set() const;
    bool is_transaction_fee_Valid() const;

    QString getTransactionId() const;
    void setTransactionId(const QString &transaction_id);
    bool is_transaction_id_Set() const;
    bool is_transaction_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIQueryNetwork m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_block_hash;
    bool m_block_hash_isSet;
    bool m_block_hash_isValid;

    QString m_transaction_hash;
    bool m_transaction_hash_isSet;
    bool m_transaction_hash_isValid;

    QString m_block_number;
    bool m_block_number_isSet;
    bool m_block_number_isValid;

    QDateTime m_transaction_timestamp;
    bool m_transaction_timestamp_isSet;
    bool m_transaction_timestamp_isValid;

    qint32 m_transaction_index;
    bool m_transaction_index_isSet;
    bool m_transaction_index_isValid;

    qint32 m_number_of_transactions;
    bool m_number_of_transactions_isSet;
    bool m_number_of_transactions_isValid;

    OAIQueryTransactionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_contract_address;
    bool m_contract_address_isSet;
    bool m_contract_address_isValid;

    QString m_gas_used;
    bool m_gas_used_isSet;
    bool m_gas_used_isValid;

    QString m_cumulative_gas_used;
    bool m_cumulative_gas_used_isSet;
    bool m_cumulative_gas_used_isValid;

    QString m_effective_gas_price;
    bool m_effective_gas_price_isSet;
    bool m_effective_gas_price_isValid;

    qint32 m_signature_v;
    bool m_signature_v_isSet;
    bool m_signature_v_isValid;

    QString m_signature_r;
    bool m_signature_r_isSet;
    bool m_signature_r_isValid;

    QString m_signature_s;
    bool m_signature_s_isSet;
    bool m_signature_s_isValid;

    QString m_transaction_fee;
    bool m_transaction_fee_isSet;
    bool m_transaction_fee_isValid;

    QString m_transaction_id;
    bool m_transaction_id_isSet;
    bool m_transaction_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTransactionOutput_transaction)

#endif // OAIGetTransactionOutput_transaction_H
