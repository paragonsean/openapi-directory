/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTransactionEventsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTransactionEventsInput::OAIListTransactionEventsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTransactionEventsInput::OAIListTransactionEventsInput() {
    this->initializeModel();
}

OAIListTransactionEventsInput::~OAIListTransactionEventsInput() {}

void OAIListTransactionEventsInput::initializeModel() {

    m_transaction_hash_isSet = false;
    m_transaction_hash_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListTransactionEventsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTransactionEventsInput::fromJsonObject(QJsonObject json) {

    m_transaction_hash_isValid = ::OpenAPI::fromJsonValue(m_transaction_hash, json[QString("transactionHash")]);
    m_transaction_hash_isSet = !json[QString("transactionHash")].isNull() && m_transaction_hash_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListTransactionEventsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTransactionEventsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_hash_isSet) {
        obj.insert(QString("transactionHash"), ::OpenAPI::toJsonValue(m_transaction_hash));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListTransactionEventsInput::getTransactionHash() const {
    return m_transaction_hash;
}
void OAIListTransactionEventsInput::setTransactionHash(const QString &transaction_hash) {
    m_transaction_hash = transaction_hash;
    m_transaction_hash_isSet = true;
}

bool OAIListTransactionEventsInput::is_transaction_hash_Set() const{
    return m_transaction_hash_isSet;
}

bool OAIListTransactionEventsInput::is_transaction_hash_Valid() const{
    return m_transaction_hash_isValid;
}

OAIQueryNetwork OAIListTransactionEventsInput::getNetwork() const {
    return m_network;
}
void OAIListTransactionEventsInput::setNetwork(const OAIQueryNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIListTransactionEventsInput::is_network_Set() const{
    return m_network_isSet;
}

bool OAIListTransactionEventsInput::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIListTransactionEventsInput::getNextToken() const {
    return m_next_token;
}
void OAIListTransactionEventsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTransactionEventsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTransactionEventsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListTransactionEventsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListTransactionEventsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTransactionEventsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTransactionEventsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListTransactionEventsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTransactionEventsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_hash_isValid && m_network_isValid && true;
}

} // namespace OpenAPI
