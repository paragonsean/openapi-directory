/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListTransactionsInput.h
 *
 * 
 */

#ifndef OAIListTransactionsInput_H
#define OAIListTransactionsInput_H

#include <QJsonObject>

#include "OAIBlockchainInstant.h"
#include "OAIListTransactionsInput_sort.h"
#include "OAIQueryNetwork.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBlockchainInstant;
class OAIListTransactionsInput_sort;

class OAIListTransactionsInput : public OAIObject {
public:
    OAIListTransactionsInput();
    OAIListTransactionsInput(QString json);
    ~OAIListTransactionsInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    OAIQueryNetwork getNetwork() const;
    void setNetwork(const OAIQueryNetwork &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    OAIBlockchainInstant getFromBlockchainInstant() const;
    void setFromBlockchainInstant(const OAIBlockchainInstant &from_blockchain_instant);
    bool is_from_blockchain_instant_Set() const;
    bool is_from_blockchain_instant_Valid() const;

    OAIBlockchainInstant getToBlockchainInstant() const;
    void setToBlockchainInstant(const OAIBlockchainInstant &to_blockchain_instant);
    bool is_to_blockchain_instant_Set() const;
    bool is_to_blockchain_instant_Valid() const;

    OAIListTransactionsInput_sort getSort() const;
    void setSort(const OAIListTransactionsInput_sort &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    OAIQueryNetwork m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    OAIBlockchainInstant m_from_blockchain_instant;
    bool m_from_blockchain_instant_isSet;
    bool m_from_blockchain_instant_isValid;

    OAIBlockchainInstant m_to_blockchain_instant;
    bool m_to_blockchain_instant_isSet;
    bool m_to_blockchain_instant_isValid;

    OAIListTransactionsInput_sort m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListTransactionsInput)

#endif // OAIListTransactionsInput_H
