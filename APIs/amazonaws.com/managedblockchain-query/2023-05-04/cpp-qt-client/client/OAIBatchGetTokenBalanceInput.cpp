/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetTokenBalanceInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetTokenBalanceInput::OAIBatchGetTokenBalanceInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetTokenBalanceInput::OAIBatchGetTokenBalanceInput() {
    this->initializeModel();
}

OAIBatchGetTokenBalanceInput::~OAIBatchGetTokenBalanceInput() {}

void OAIBatchGetTokenBalanceInput::initializeModel() {

    m_get_token_balance_inputs_isSet = false;
    m_get_token_balance_inputs_isValid = false;
}

void OAIBatchGetTokenBalanceInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetTokenBalanceInput::fromJsonObject(QJsonObject json) {

    m_get_token_balance_inputs_isValid = ::OpenAPI::fromJsonValue(m_get_token_balance_inputs, json[QString("getTokenBalanceInputs")]);
    m_get_token_balance_inputs_isSet = !json[QString("getTokenBalanceInputs")].isNull() && m_get_token_balance_inputs_isValid;
}

QString OAIBatchGetTokenBalanceInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetTokenBalanceInput::asJsonObject() const {
    QJsonObject obj;
    if (m_get_token_balance_inputs.isSet()) {
        obj.insert(QString("getTokenBalanceInputs"), ::OpenAPI::toJsonValue(m_get_token_balance_inputs));
    }
    return obj;
}

QList OAIBatchGetTokenBalanceInput::getGetTokenBalanceInputs() const {
    return m_get_token_balance_inputs;
}
void OAIBatchGetTokenBalanceInput::setGetTokenBalanceInputs(const QList &get_token_balance_inputs) {
    m_get_token_balance_inputs = get_token_balance_inputs;
    m_get_token_balance_inputs_isSet = true;
}

bool OAIBatchGetTokenBalanceInput::is_get_token_balance_inputs_Set() const{
    return m_get_token_balance_inputs_isSet;
}

bool OAIBatchGetTokenBalanceInput::is_get_token_balance_inputs_Valid() const{
    return m_get_token_balance_inputs_isValid;
}

bool OAIBatchGetTokenBalanceInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_get_token_balance_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetTokenBalanceInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
