/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetTokenBalance_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetTokenBalance_request::OAIBatchGetTokenBalance_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetTokenBalance_request::OAIBatchGetTokenBalance_request() {
    this->initializeModel();
}

OAIBatchGetTokenBalance_request::~OAIBatchGetTokenBalance_request() {}

void OAIBatchGetTokenBalance_request::initializeModel() {

    m_get_token_balance_inputs_isSet = false;
    m_get_token_balance_inputs_isValid = false;
}

void OAIBatchGetTokenBalance_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetTokenBalance_request::fromJsonObject(QJsonObject json) {

    m_get_token_balance_inputs_isValid = ::OpenAPI::fromJsonValue(m_get_token_balance_inputs, json[QString("getTokenBalanceInputs")]);
    m_get_token_balance_inputs_isSet = !json[QString("getTokenBalanceInputs")].isNull() && m_get_token_balance_inputs_isValid;
}

QString OAIBatchGetTokenBalance_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetTokenBalance_request::asJsonObject() const {
    QJsonObject obj;
    if (m_get_token_balance_inputs.size() > 0) {
        obj.insert(QString("getTokenBalanceInputs"), ::OpenAPI::toJsonValue(m_get_token_balance_inputs));
    }
    return obj;
}

QList<OAIBatchGetTokenBalanceInputItem> OAIBatchGetTokenBalance_request::getGetTokenBalanceInputs() const {
    return m_get_token_balance_inputs;
}
void OAIBatchGetTokenBalance_request::setGetTokenBalanceInputs(const QList<OAIBatchGetTokenBalanceInputItem> &get_token_balance_inputs) {
    m_get_token_balance_inputs = get_token_balance_inputs;
    m_get_token_balance_inputs_isSet = true;
}

bool OAIBatchGetTokenBalance_request::is_get_token_balance_inputs_Set() const{
    return m_get_token_balance_inputs_isSet;
}

bool OAIBatchGetTokenBalance_request::is_get_token_balance_inputs_Valid() const{
    return m_get_token_balance_inputs_isValid;
}

bool OAIBatchGetTokenBalance_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_get_token_balance_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetTokenBalance_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
