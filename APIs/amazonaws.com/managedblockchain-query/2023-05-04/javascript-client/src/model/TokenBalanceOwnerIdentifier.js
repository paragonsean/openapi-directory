/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OwnerIdentifier from './OwnerIdentifier';

/**
 * The TokenBalanceOwnerIdentifier model module.
 * @module model/TokenBalanceOwnerIdentifier
 * @version 2023-05-04
 */
class TokenBalanceOwnerIdentifier {
    /**
     * Constructs a new <code>TokenBalanceOwnerIdentifier</code>.
     * @alias module:model/TokenBalanceOwnerIdentifier
     * @implements module:model/OwnerIdentifier
     * @param address {String} 
     */
    constructor(address) { 
        OwnerIdentifier.initialize(this, address);
        TokenBalanceOwnerIdentifier.initialize(this, address);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address) { 
        obj['address'] = address;
    }

    /**
     * Constructs a <code>TokenBalanceOwnerIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenBalanceOwnerIdentifier} obj Optional instance to populate.
     * @return {module:model/TokenBalanceOwnerIdentifier} The populated <code>TokenBalanceOwnerIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenBalanceOwnerIdentifier();
            OwnerIdentifier.constructFromObject(data, obj);

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenBalanceOwnerIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenBalanceOwnerIdentifier</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenBalanceOwnerIdentifier.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          String.validateJSON(data['address']);
        }

        return true;
    }


}

TokenBalanceOwnerIdentifier.RequiredProperties = ["address"];

/**
 * @member {String} address
 */
TokenBalanceOwnerIdentifier.prototype['address'] = undefined;


// Implement OwnerIdentifier interface:
/**
 * @member {String} address
 */
OwnerIdentifier.prototype['address'] = undefined;




export default TokenBalanceOwnerIdentifier;

