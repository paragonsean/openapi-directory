/**
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonManagedBlockchainQuery);
  }
}(this, function(expect, AmazonManagedBlockchainQuery) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonManagedBlockchainQuery.GetTokenBalanceInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTokenBalanceInput', function() {
    it('should create an instance of GetTokenBalanceInput', function() {
      // uncomment below and update the code to test GetTokenBalanceInput
      //var instance = new AmazonManagedBlockchainQuery.GetTokenBalanceInput();
      //expect(instance).to.be.a(AmazonManagedBlockchainQuery.GetTokenBalanceInput);
    });

    it('should have the property tokenIdentifier (base name: "tokenIdentifier")', function() {
      // uncomment below and update the code to test the property tokenIdentifier
      //var instance = new AmazonManagedBlockchainQuery.GetTokenBalanceInput();
      //expect(instance).to.be();
    });

    it('should have the property ownerIdentifier (base name: "ownerIdentifier")', function() {
      // uncomment below and update the code to test the property ownerIdentifier
      //var instance = new AmazonManagedBlockchainQuery.GetTokenBalanceInput();
      //expect(instance).to.be();
    });

    it('should have the property atBlockchainInstant (base name: "atBlockchainInstant")', function() {
      // uncomment below and update the code to test the property atBlockchainInstant
      //var instance = new AmazonManagedBlockchainQuery.GetTokenBalanceInput();
      //expect(instance).to.be();
    });

  });

}));
