/*
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchGetTokenBalanceOutput;
import org.openapitools.client.model.BatchGetTokenBalanceRequest;
import org.openapitools.client.model.GetTokenBalanceOutput;
import org.openapitools.client.model.GetTokenBalanceRequest;
import org.openapitools.client.model.GetTransactionOutput;
import org.openapitools.client.model.GetTransactionRequest;
import org.openapitools.client.model.ListTokenBalancesOutput;
import org.openapitools.client.model.ListTokenBalancesRequest;
import org.openapitools.client.model.ListTransactionEventsOutput;
import org.openapitools.client.model.ListTransactionEventsRequest;
import org.openapitools.client.model.ListTransactionsOutput;
import org.openapitools.client.model.ListTransactionsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Gets the token balance for a batch of tokens by using the &lt;code&gt;GetTokenBalance&lt;/code&gt; action for every token in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetTokenBalanceTest() throws ApiException {
        BatchGetTokenBalanceRequest batchGetTokenBalanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetTokenBalanceOutput response = api.batchGetTokenBalance(batchGetTokenBalanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the balance of a specific token, including native tokens, for a given address (wallet or contract) on the blockchain.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenBalanceTest() throws ApiException {
        GetTokenBalanceRequest getTokenBalanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTokenBalanceOutput response = api.getTokenBalance(getTokenBalanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the details of a transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        GetTransactionRequest getTransactionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTransactionOutput response = api.getTransaction(getTransactionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This action returns the following for a given a blockchain network:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Lists all token balances owned by an address (either a contact address or a wallet address).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lists all token balances for all tokens created by a contract.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lists all token balances for a given token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;You must always specify the network property of the &lt;code&gt;tokenFilter&lt;/code&gt; when using this operation.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenBalancesTest() throws ApiException {
        ListTokenBalancesRequest listTokenBalancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTokenBalancesOutput response = api.listTokenBalances(listTokenBalancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * An array of &lt;code&gt;TransactionEvent&lt;/code&gt; objects. Each object contains details about the transaction event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionEventsTest() throws ApiException {
        ListTransactionEventsRequest listTransactionEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTransactionEventsOutput response = api.listTransactionEvents(listTransactionEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all of the transactions on a given wallet address or to a specific contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        ListTransactionsRequest listTransactionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTransactionsOutput response = api.listTransactions(listTransactionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

}
