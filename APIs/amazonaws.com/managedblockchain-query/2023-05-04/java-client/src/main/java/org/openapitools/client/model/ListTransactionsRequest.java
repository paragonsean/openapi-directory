/*
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetTokenBalanceRequestAtBlockchainInstant;
import org.openapitools.client.model.ListTransactionsRequestSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTransactionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:55.064789-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTransactionsRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  /**
   * The blockchain network where the transactions occurred.
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    ETHEREUM_MAINNET("ETHEREUM_MAINNET"),
    
    BITCOIN_MAINNET("BITCOIN_MAINNET");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String value) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  public static final String SERIALIZED_NAME_FROM_BLOCKCHAIN_INSTANT = "fromBlockchainInstant";
  @SerializedName(SERIALIZED_NAME_FROM_BLOCKCHAIN_INSTANT)
  private GetTokenBalanceRequestAtBlockchainInstant fromBlockchainInstant;

  public static final String SERIALIZED_NAME_TO_BLOCKCHAIN_INSTANT = "toBlockchainInstant";
  @SerializedName(SERIALIZED_NAME_TO_BLOCKCHAIN_INSTANT)
  private GetTokenBalanceRequestAtBlockchainInstant toBlockchainInstant;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private ListTransactionsRequestSort sort;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListTransactionsRequest() {
  }

  public ListTransactionsRequest address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The address (either a contract or wallet), whose transactions are being requested.
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ListTransactionsRequest network(NetworkEnum network) {
    this.network = network;
    return this;
  }

  /**
   * The blockchain network where the transactions occurred.
   * @return network
   */
  @javax.annotation.Nonnull
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }


  public ListTransactionsRequest fromBlockchainInstant(GetTokenBalanceRequestAtBlockchainInstant fromBlockchainInstant) {
    this.fromBlockchainInstant = fromBlockchainInstant;
    return this;
  }

  /**
   * Get fromBlockchainInstant
   * @return fromBlockchainInstant
   */
  @javax.annotation.Nullable
  public GetTokenBalanceRequestAtBlockchainInstant getFromBlockchainInstant() {
    return fromBlockchainInstant;
  }

  public void setFromBlockchainInstant(GetTokenBalanceRequestAtBlockchainInstant fromBlockchainInstant) {
    this.fromBlockchainInstant = fromBlockchainInstant;
  }


  public ListTransactionsRequest toBlockchainInstant(GetTokenBalanceRequestAtBlockchainInstant toBlockchainInstant) {
    this.toBlockchainInstant = toBlockchainInstant;
    return this;
  }

  /**
   * Get toBlockchainInstant
   * @return toBlockchainInstant
   */
  @javax.annotation.Nullable
  public GetTokenBalanceRequestAtBlockchainInstant getToBlockchainInstant() {
    return toBlockchainInstant;
  }

  public void setToBlockchainInstant(GetTokenBalanceRequestAtBlockchainInstant toBlockchainInstant) {
    this.toBlockchainInstant = toBlockchainInstant;
  }


  public ListTransactionsRequest sort(ListTransactionsRequestSort sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public ListTransactionsRequestSort getSort() {
    return sort;
  }

  public void setSort(ListTransactionsRequestSort sort) {
    this.sort = sort;
  }


  public ListTransactionsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The pagination token that indicates the next set of results to retrieve.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListTransactionsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * &lt;p&gt;The maximum number of transactions to list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Even if additional results can be retrieved, the request can return less results than &lt;code&gt;maxResults&lt;/code&gt; or an empty array of results.&lt;/p&gt; &lt;p&gt;To retrieve the next set of results, make another request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. The value of &lt;code&gt;nextToken&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; when there are no more results to return&lt;/p&gt; &lt;/note&gt;
   * minimum: 1
   * maximum: 250
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTransactionsRequest listTransactionsRequest = (ListTransactionsRequest) o;
    return Objects.equals(this.address, listTransactionsRequest.address) &&
        Objects.equals(this.network, listTransactionsRequest.network) &&
        Objects.equals(this.fromBlockchainInstant, listTransactionsRequest.fromBlockchainInstant) &&
        Objects.equals(this.toBlockchainInstant, listTransactionsRequest.toBlockchainInstant) &&
        Objects.equals(this.sort, listTransactionsRequest.sort) &&
        Objects.equals(this.nextToken, listTransactionsRequest.nextToken) &&
        Objects.equals(this.maxResults, listTransactionsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, network, fromBlockchainInstant, toBlockchainInstant, sort, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTransactionsRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    fromBlockchainInstant: ").append(toIndentedString(fromBlockchainInstant)).append("\n");
    sb.append("    toBlockchainInstant: ").append(toIndentedString(toBlockchainInstant)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("network");
    openapiFields.add("fromBlockchainInstant");
    openapiFields.add("toBlockchainInstant");
    openapiFields.add("sort");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("network");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTransactionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTransactionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTransactionsRequest is not found in the empty JSON string", ListTransactionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTransactionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTransactionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListTransactionsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the required field `network`
      NetworkEnum.validateJsonElement(jsonObj.get("network"));
      // validate the optional field `fromBlockchainInstant`
      if (jsonObj.get("fromBlockchainInstant") != null && !jsonObj.get("fromBlockchainInstant").isJsonNull()) {
        GetTokenBalanceRequestAtBlockchainInstant.validateJsonElement(jsonObj.get("fromBlockchainInstant"));
      }
      // validate the optional field `toBlockchainInstant`
      if (jsonObj.get("toBlockchainInstant") != null && !jsonObj.get("toBlockchainInstant").isJsonNull()) {
        GetTokenBalanceRequestAtBlockchainInstant.validateJsonElement(jsonObj.get("toBlockchainInstant"));
      }
      // validate the optional field `sort`
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        ListTransactionsRequestSort.validateJsonElement(jsonObj.get("sort"));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTransactionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTransactionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTransactionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTransactionsRequest>() {
           @Override
           public void write(JsonWriter out, ListTransactionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTransactionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTransactionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTransactionsRequest
   * @throws IOException if the JSON string is invalid with respect to ListTransactionsRequest
   */
  public static ListTransactionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTransactionsRequest.class);
  }

  /**
   * Convert an instance of ListTransactionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

