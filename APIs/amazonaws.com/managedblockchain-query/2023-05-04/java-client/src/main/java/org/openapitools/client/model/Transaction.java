/*
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.QueryNetwork;
import org.openapitools.client.model.QueryTransactionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;There are two possible types of transactions used for this data type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A Bitcoin transaction is a movement of BTC from one address to another.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Ethereum transaction refers to an action initiated by an externally owned account, which is an account managed by a human, not a contract. For example, if Bob sends Alice 1 ETH, Bob&#39;s account must be debited and Alice&#39;s must be credited. This state-changing action occurs within a transaction.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:55.064789-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private QueryNetwork network;

  public static final String SERIALIZED_NAME_BLOCK_HASH = "blockHash";
  @SerializedName(SERIALIZED_NAME_BLOCK_HASH)
  private String blockHash;

  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "blockNumber";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private String blockNumber;

  public static final String SERIALIZED_NAME_TRANSACTION_TIMESTAMP = "transactionTimestamp";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TIMESTAMP)
  private OffsetDateTime transactionTimestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX = "transactionIndex";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX)
  private Integer transactionIndex;

  public static final String SERIALIZED_NAME_NUMBER_OF_TRANSACTIONS = "numberOfTransactions";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TRANSACTIONS)
  private Integer numberOfTransactions;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private QueryTransactionStatus status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contractAddress";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
  private String contractAddress;

  public static final String SERIALIZED_NAME_GAS_USED = "gasUsed";
  @SerializedName(SERIALIZED_NAME_GAS_USED)
  private String gasUsed;

  public static final String SERIALIZED_NAME_CUMULATIVE_GAS_USED = "cumulativeGasUsed";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_GAS_USED)
  private String cumulativeGasUsed;

  public static final String SERIALIZED_NAME_EFFECTIVE_GAS_PRICE = "effectiveGasPrice";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_GAS_PRICE)
  private String effectiveGasPrice;

  public static final String SERIALIZED_NAME_SIGNATURE_V = "signatureV";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_V)
  private Integer signatureV;

  public static final String SERIALIZED_NAME_SIGNATURE_R = "signatureR";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_R)
  private String signatureR;

  public static final String SERIALIZED_NAME_SIGNATURE_S = "signatureS";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_S)
  private String signatureS;

  public static final String SERIALIZED_NAME_TRANSACTION_FEE = "transactionFee";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE)
  private String transactionFee;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public Transaction() {
  }

  public Transaction network(QueryNetwork network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nonnull
  public QueryNetwork getNetwork() {
    return network;
  }

  public void setNetwork(QueryNetwork network) {
    this.network = network;
  }


  public Transaction blockHash(String blockHash) {
    this.blockHash = blockHash;
    return this;
  }

  /**
   * Get blockHash
   * @return blockHash
   */
  @javax.annotation.Nullable
  public String getBlockHash() {
    return blockHash;
  }

  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }


  public Transaction transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

  /**
   * Get transactionHash
   * @return transactionHash
   */
  @javax.annotation.Nonnull
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public Transaction blockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
    return this;
  }

  /**
   * Get blockNumber
   * @return blockNumber
   */
  @javax.annotation.Nullable
  public String getBlockNumber() {
    return blockNumber;
  }

  public void setBlockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
  }


  public Transaction transactionTimestamp(OffsetDateTime transactionTimestamp) {
    this.transactionTimestamp = transactionTimestamp;
    return this;
  }

  /**
   * Get transactionTimestamp
   * @return transactionTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTransactionTimestamp() {
    return transactionTimestamp;
  }

  public void setTransactionTimestamp(OffsetDateTime transactionTimestamp) {
    this.transactionTimestamp = transactionTimestamp;
  }


  public Transaction transactionIndex(Integer transactionIndex) {
    this.transactionIndex = transactionIndex;
    return this;
  }

  /**
   * Get transactionIndex
   * @return transactionIndex
   */
  @javax.annotation.Nonnull
  public Integer getTransactionIndex() {
    return transactionIndex;
  }

  public void setTransactionIndex(Integer transactionIndex) {
    this.transactionIndex = transactionIndex;
  }


  public Transaction numberOfTransactions(Integer numberOfTransactions) {
    this.numberOfTransactions = numberOfTransactions;
    return this;
  }

  /**
   * Get numberOfTransactions
   * @return numberOfTransactions
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfTransactions() {
    return numberOfTransactions;
  }

  public void setNumberOfTransactions(Integer numberOfTransactions) {
    this.numberOfTransactions = numberOfTransactions;
  }


  public Transaction status(QueryTransactionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public QueryTransactionStatus getStatus() {
    return status;
  }

  public void setStatus(QueryTransactionStatus status) {
    this.status = status;
  }


  public Transaction to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public Transaction from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public Transaction contractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
    return this;
  }

  /**
   * Get contractAddress
   * @return contractAddress
   */
  @javax.annotation.Nullable
  public String getContractAddress() {
    return contractAddress;
  }

  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public Transaction gasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

  /**
   * Get gasUsed
   * @return gasUsed
   */
  @javax.annotation.Nullable
  public String getGasUsed() {
    return gasUsed;
  }

  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }


  public Transaction cumulativeGasUsed(String cumulativeGasUsed) {
    this.cumulativeGasUsed = cumulativeGasUsed;
    return this;
  }

  /**
   * Get cumulativeGasUsed
   * @return cumulativeGasUsed
   */
  @javax.annotation.Nullable
  public String getCumulativeGasUsed() {
    return cumulativeGasUsed;
  }

  public void setCumulativeGasUsed(String cumulativeGasUsed) {
    this.cumulativeGasUsed = cumulativeGasUsed;
  }


  public Transaction effectiveGasPrice(String effectiveGasPrice) {
    this.effectiveGasPrice = effectiveGasPrice;
    return this;
  }

  /**
   * Get effectiveGasPrice
   * @return effectiveGasPrice
   */
  @javax.annotation.Nullable
  public String getEffectiveGasPrice() {
    return effectiveGasPrice;
  }

  public void setEffectiveGasPrice(String effectiveGasPrice) {
    this.effectiveGasPrice = effectiveGasPrice;
  }


  public Transaction signatureV(Integer signatureV) {
    this.signatureV = signatureV;
    return this;
  }

  /**
   * Get signatureV
   * @return signatureV
   */
  @javax.annotation.Nullable
  public Integer getSignatureV() {
    return signatureV;
  }

  public void setSignatureV(Integer signatureV) {
    this.signatureV = signatureV;
  }


  public Transaction signatureR(String signatureR) {
    this.signatureR = signatureR;
    return this;
  }

  /**
   * Get signatureR
   * @return signatureR
   */
  @javax.annotation.Nullable
  public String getSignatureR() {
    return signatureR;
  }

  public void setSignatureR(String signatureR) {
    this.signatureR = signatureR;
  }


  public Transaction signatureS(String signatureS) {
    this.signatureS = signatureS;
    return this;
  }

  /**
   * Get signatureS
   * @return signatureS
   */
  @javax.annotation.Nullable
  public String getSignatureS() {
    return signatureS;
  }

  public void setSignatureS(String signatureS) {
    this.signatureS = signatureS;
  }


  public Transaction transactionFee(String transactionFee) {
    this.transactionFee = transactionFee;
    return this;
  }

  /**
   * Get transactionFee
   * @return transactionFee
   */
  @javax.annotation.Nullable
  public String getTransactionFee() {
    return transactionFee;
  }

  public void setTransactionFee(String transactionFee) {
    this.transactionFee = transactionFee;
  }


  public Transaction transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.network, transaction.network) &&
        Objects.equals(this.blockHash, transaction.blockHash) &&
        Objects.equals(this.transactionHash, transaction.transactionHash) &&
        Objects.equals(this.blockNumber, transaction.blockNumber) &&
        Objects.equals(this.transactionTimestamp, transaction.transactionTimestamp) &&
        Objects.equals(this.transactionIndex, transaction.transactionIndex) &&
        Objects.equals(this.numberOfTransactions, transaction.numberOfTransactions) &&
        Objects.equals(this.status, transaction.status) &&
        Objects.equals(this.to, transaction.to) &&
        Objects.equals(this.from, transaction.from) &&
        Objects.equals(this.contractAddress, transaction.contractAddress) &&
        Objects.equals(this.gasUsed, transaction.gasUsed) &&
        Objects.equals(this.cumulativeGasUsed, transaction.cumulativeGasUsed) &&
        Objects.equals(this.effectiveGasPrice, transaction.effectiveGasPrice) &&
        Objects.equals(this.signatureV, transaction.signatureV) &&
        Objects.equals(this.signatureR, transaction.signatureR) &&
        Objects.equals(this.signatureS, transaction.signatureS) &&
        Objects.equals(this.transactionFee, transaction.transactionFee) &&
        Objects.equals(this.transactionId, transaction.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, blockHash, transactionHash, blockNumber, transactionTimestamp, transactionIndex, numberOfTransactions, status, to, from, contractAddress, gasUsed, cumulativeGasUsed, effectiveGasPrice, signatureV, signatureR, signatureS, transactionFee, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    transactionTimestamp: ").append(toIndentedString(transactionTimestamp)).append("\n");
    sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
    sb.append("    numberOfTransactions: ").append(toIndentedString(numberOfTransactions)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    cumulativeGasUsed: ").append(toIndentedString(cumulativeGasUsed)).append("\n");
    sb.append("    effectiveGasPrice: ").append(toIndentedString(effectiveGasPrice)).append("\n");
    sb.append("    signatureV: ").append(toIndentedString(signatureV)).append("\n");
    sb.append("    signatureR: ").append(toIndentedString(signatureR)).append("\n");
    sb.append("    signatureS: ").append(toIndentedString(signatureS)).append("\n");
    sb.append("    transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("network");
    openapiFields.add("blockHash");
    openapiFields.add("transactionHash");
    openapiFields.add("blockNumber");
    openapiFields.add("transactionTimestamp");
    openapiFields.add("transactionIndex");
    openapiFields.add("numberOfTransactions");
    openapiFields.add("status");
    openapiFields.add("to");
    openapiFields.add("from");
    openapiFields.add("contractAddress");
    openapiFields.add("gasUsed");
    openapiFields.add("cumulativeGasUsed");
    openapiFields.add("effectiveGasPrice");
    openapiFields.add("signatureV");
    openapiFields.add("signatureR");
    openapiFields.add("signatureS");
    openapiFields.add("transactionFee");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("transactionHash");
    openapiRequiredFields.add("transactionTimestamp");
    openapiRequiredFields.add("transactionIndex");
    openapiRequiredFields.add("numberOfTransactions");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `network`
      QueryNetwork.validateJsonElement(jsonObj.get("network"));
      // validate the optional field `blockHash`
      if (jsonObj.get("blockHash") != null && !jsonObj.get("blockHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("blockHash"));
      }
      // validate the required field `transactionHash`
      String.validateJsonElement(jsonObj.get("transactionHash"));
      // validate the optional field `blockNumber`
      if (jsonObj.get("blockNumber") != null && !jsonObj.get("blockNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("blockNumber"));
      }
      // validate the required field `transactionTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("transactionTimestamp"));
      // validate the required field `transactionIndex`
      Integer.validateJsonElement(jsonObj.get("transactionIndex"));
      // validate the required field `numberOfTransactions`
      Integer.validateJsonElement(jsonObj.get("numberOfTransactions"));
      // validate the required field `status`
      QueryTransactionStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `to`
      String.validateJsonElement(jsonObj.get("to"));
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("from"));
      }
      // validate the optional field `contractAddress`
      if (jsonObj.get("contractAddress") != null && !jsonObj.get("contractAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("contractAddress"));
      }
      // validate the optional field `gasUsed`
      if (jsonObj.get("gasUsed") != null && !jsonObj.get("gasUsed").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("gasUsed"));
      }
      // validate the optional field `cumulativeGasUsed`
      if (jsonObj.get("cumulativeGasUsed") != null && !jsonObj.get("cumulativeGasUsed").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cumulativeGasUsed"));
      }
      // validate the optional field `effectiveGasPrice`
      if (jsonObj.get("effectiveGasPrice") != null && !jsonObj.get("effectiveGasPrice").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("effectiveGasPrice"));
      }
      // validate the optional field `signatureV`
      if (jsonObj.get("signatureV") != null && !jsonObj.get("signatureV").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("signatureV"));
      }
      // validate the optional field `signatureR`
      if (jsonObj.get("signatureR") != null && !jsonObj.get("signatureR").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("signatureR"));
      }
      // validate the optional field `signatureS`
      if (jsonObj.get("signatureS") != null && !jsonObj.get("signatureS").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("signatureS"));
      }
      // validate the optional field `transactionFee`
      if (jsonObj.get("transactionFee") != null && !jsonObj.get("transactionFee").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("transactionFee"));
      }
      // validate the optional field `transactionId`
      if (jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("transactionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

