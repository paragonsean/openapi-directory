/*
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlockchainInstant;
import org.openapitools.client.model.ErrorType;
import org.openapitools.client.model.OwnerIdentifier;
import org.openapitools.client.model.TokenIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Error generated from a failed &lt;code&gt;BatchGetTokenBalance&lt;/code&gt; request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:55.064789-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetTokenBalanceErrorItem {
  public static final String SERIALIZED_NAME_TOKEN_IDENTIFIER = "tokenIdentifier";
  @SerializedName(SERIALIZED_NAME_TOKEN_IDENTIFIER)
  private TokenIdentifier tokenIdentifier;

  public static final String SERIALIZED_NAME_OWNER_IDENTIFIER = "ownerIdentifier";
  @SerializedName(SERIALIZED_NAME_OWNER_IDENTIFIER)
  private OwnerIdentifier ownerIdentifier;

  public static final String SERIALIZED_NAME_AT_BLOCKCHAIN_INSTANT = "atBlockchainInstant";
  @SerializedName(SERIALIZED_NAME_AT_BLOCKCHAIN_INSTANT)
  private BlockchainInstant atBlockchainInstant;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private ErrorType errorType;

  public BatchGetTokenBalanceErrorItem() {
  }

  public BatchGetTokenBalanceErrorItem tokenIdentifier(TokenIdentifier tokenIdentifier) {
    this.tokenIdentifier = tokenIdentifier;
    return this;
  }

  /**
   * Get tokenIdentifier
   * @return tokenIdentifier
   */
  @javax.annotation.Nullable
  public TokenIdentifier getTokenIdentifier() {
    return tokenIdentifier;
  }

  public void setTokenIdentifier(TokenIdentifier tokenIdentifier) {
    this.tokenIdentifier = tokenIdentifier;
  }


  public BatchGetTokenBalanceErrorItem ownerIdentifier(OwnerIdentifier ownerIdentifier) {
    this.ownerIdentifier = ownerIdentifier;
    return this;
  }

  /**
   * Get ownerIdentifier
   * @return ownerIdentifier
   */
  @javax.annotation.Nullable
  public OwnerIdentifier getOwnerIdentifier() {
    return ownerIdentifier;
  }

  public void setOwnerIdentifier(OwnerIdentifier ownerIdentifier) {
    this.ownerIdentifier = ownerIdentifier;
  }


  public BatchGetTokenBalanceErrorItem atBlockchainInstant(BlockchainInstant atBlockchainInstant) {
    this.atBlockchainInstant = atBlockchainInstant;
    return this;
  }

  /**
   * Get atBlockchainInstant
   * @return atBlockchainInstant
   */
  @javax.annotation.Nullable
  public BlockchainInstant getAtBlockchainInstant() {
    return atBlockchainInstant;
  }

  public void setAtBlockchainInstant(BlockchainInstant atBlockchainInstant) {
    this.atBlockchainInstant = atBlockchainInstant;
  }


  public BatchGetTokenBalanceErrorItem errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nonnull
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public BatchGetTokenBalanceErrorItem errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nonnull
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public BatchGetTokenBalanceErrorItem errorType(ErrorType errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * Get errorType
   * @return errorType
   */
  @javax.annotation.Nonnull
  public ErrorType getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorType errorType) {
    this.errorType = errorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetTokenBalanceErrorItem batchGetTokenBalanceErrorItem = (BatchGetTokenBalanceErrorItem) o;
    return Objects.equals(this.tokenIdentifier, batchGetTokenBalanceErrorItem.tokenIdentifier) &&
        Objects.equals(this.ownerIdentifier, batchGetTokenBalanceErrorItem.ownerIdentifier) &&
        Objects.equals(this.atBlockchainInstant, batchGetTokenBalanceErrorItem.atBlockchainInstant) &&
        Objects.equals(this.errorCode, batchGetTokenBalanceErrorItem.errorCode) &&
        Objects.equals(this.errorMessage, batchGetTokenBalanceErrorItem.errorMessage) &&
        Objects.equals(this.errorType, batchGetTokenBalanceErrorItem.errorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenIdentifier, ownerIdentifier, atBlockchainInstant, errorCode, errorMessage, errorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetTokenBalanceErrorItem {\n");
    sb.append("    tokenIdentifier: ").append(toIndentedString(tokenIdentifier)).append("\n");
    sb.append("    ownerIdentifier: ").append(toIndentedString(ownerIdentifier)).append("\n");
    sb.append("    atBlockchainInstant: ").append(toIndentedString(atBlockchainInstant)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tokenIdentifier");
    openapiFields.add("ownerIdentifier");
    openapiFields.add("atBlockchainInstant");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("errorType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("errorCode");
    openapiRequiredFields.add("errorMessage");
    openapiRequiredFields.add("errorType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetTokenBalanceErrorItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetTokenBalanceErrorItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetTokenBalanceErrorItem is not found in the empty JSON string", BatchGetTokenBalanceErrorItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetTokenBalanceErrorItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetTokenBalanceErrorItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchGetTokenBalanceErrorItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tokenIdentifier`
      if (jsonObj.get("tokenIdentifier") != null && !jsonObj.get("tokenIdentifier").isJsonNull()) {
        TokenIdentifier.validateJsonElement(jsonObj.get("tokenIdentifier"));
      }
      // validate the optional field `ownerIdentifier`
      if (jsonObj.get("ownerIdentifier") != null && !jsonObj.get("ownerIdentifier").isJsonNull()) {
        OwnerIdentifier.validateJsonElement(jsonObj.get("ownerIdentifier"));
      }
      // validate the optional field `atBlockchainInstant`
      if (jsonObj.get("atBlockchainInstant") != null && !jsonObj.get("atBlockchainInstant").isJsonNull()) {
        BlockchainInstant.validateJsonElement(jsonObj.get("atBlockchainInstant"));
      }
      // validate the required field `errorCode`
      String.validateJsonElement(jsonObj.get("errorCode"));
      // validate the required field `errorMessage`
      String.validateJsonElement(jsonObj.get("errorMessage"));
      // validate the required field `errorType`
      ErrorType.validateJsonElement(jsonObj.get("errorType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetTokenBalanceErrorItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetTokenBalanceErrorItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetTokenBalanceErrorItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetTokenBalanceErrorItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetTokenBalanceErrorItem>() {
           @Override
           public void write(JsonWriter out, BatchGetTokenBalanceErrorItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetTokenBalanceErrorItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetTokenBalanceErrorItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetTokenBalanceErrorItem
   * @throws IOException if the JSON string is invalid with respect to BatchGetTokenBalanceErrorItem
   */
  public static BatchGetTokenBalanceErrorItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetTokenBalanceErrorItem.class);
  }

  /**
   * Convert an instance of BatchGetTokenBalanceErrorItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

