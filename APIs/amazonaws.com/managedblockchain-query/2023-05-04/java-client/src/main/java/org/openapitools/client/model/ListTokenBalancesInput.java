/*
 * Amazon Managed Blockchain Query
 * Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
 *
 * The version of the OpenAPI document: 2023-05-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListTokenBalancesInputOwnerFilter;
import org.openapitools.client.model.ListTokenBalancesInputTokenFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTokenBalancesInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:55.064789-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTokenBalancesInput {
  public static final String SERIALIZED_NAME_OWNER_FILTER = "ownerFilter";
  @SerializedName(SERIALIZED_NAME_OWNER_FILTER)
  private ListTokenBalancesInputOwnerFilter ownerFilter;

  public static final String SERIALIZED_NAME_TOKEN_FILTER = "tokenFilter";
  @SerializedName(SERIALIZED_NAME_TOKEN_FILTER)
  private ListTokenBalancesInputTokenFilter tokenFilter;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListTokenBalancesInput() {
  }

  public ListTokenBalancesInput ownerFilter(ListTokenBalancesInputOwnerFilter ownerFilter) {
    this.ownerFilter = ownerFilter;
    return this;
  }

  /**
   * Get ownerFilter
   * @return ownerFilter
   */
  @javax.annotation.Nullable
  public ListTokenBalancesInputOwnerFilter getOwnerFilter() {
    return ownerFilter;
  }

  public void setOwnerFilter(ListTokenBalancesInputOwnerFilter ownerFilter) {
    this.ownerFilter = ownerFilter;
  }


  public ListTokenBalancesInput tokenFilter(ListTokenBalancesInputTokenFilter tokenFilter) {
    this.tokenFilter = tokenFilter;
    return this;
  }

  /**
   * Get tokenFilter
   * @return tokenFilter
   */
  @javax.annotation.Nonnull
  public ListTokenBalancesInputTokenFilter getTokenFilter() {
    return tokenFilter;
  }

  public void setTokenFilter(ListTokenBalancesInputTokenFilter tokenFilter) {
    this.tokenFilter = tokenFilter;
  }


  public ListTokenBalancesInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListTokenBalancesInput maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTokenBalancesInput listTokenBalancesInput = (ListTokenBalancesInput) o;
    return Objects.equals(this.ownerFilter, listTokenBalancesInput.ownerFilter) &&
        Objects.equals(this.tokenFilter, listTokenBalancesInput.tokenFilter) &&
        Objects.equals(this.nextToken, listTokenBalancesInput.nextToken) &&
        Objects.equals(this.maxResults, listTokenBalancesInput.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerFilter, tokenFilter, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTokenBalancesInput {\n");
    sb.append("    ownerFilter: ").append(toIndentedString(ownerFilter)).append("\n");
    sb.append("    tokenFilter: ").append(toIndentedString(tokenFilter)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ownerFilter");
    openapiFields.add("tokenFilter");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tokenFilter");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTokenBalancesInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTokenBalancesInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTokenBalancesInput is not found in the empty JSON string", ListTokenBalancesInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTokenBalancesInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTokenBalancesInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListTokenBalancesInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ownerFilter`
      if (jsonObj.get("ownerFilter") != null && !jsonObj.get("ownerFilter").isJsonNull()) {
        ListTokenBalancesInputOwnerFilter.validateJsonElement(jsonObj.get("ownerFilter"));
      }
      // validate the required field `tokenFilter`
      ListTokenBalancesInputTokenFilter.validateJsonElement(jsonObj.get("tokenFilter"));
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `maxResults`
      if (jsonObj.get("maxResults") != null && !jsonObj.get("maxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTokenBalancesInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTokenBalancesInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTokenBalancesInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTokenBalancesInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTokenBalancesInput>() {
           @Override
           public void write(JsonWriter out, ListTokenBalancesInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTokenBalancesInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTokenBalancesInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTokenBalancesInput
   * @throws IOException if the JSON string is invalid with respect to ListTokenBalancesInput
   */
  public static ListTokenBalancesInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTokenBalancesInput.class);
  }

  /**
   * Convert an instance of ListTokenBalancesInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

