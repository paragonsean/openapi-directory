/*
 * AWS Organizations
 * <p>Organizations is a web service that enables you to consolidate your multiple Amazon Web Services accounts into an <i>organization</i> and centrally manage your accounts and their resources.</p> <p>This guide provides descriptions of the Organizations operations. For more information about using this service, see the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html\">Organizations User Guide</a>.</p> <p> <b>Support and feedback for Organizations</b> </p> <p>We welcome your feedback. Send your comments to <a href=\"mailto:feedback-awsorganizations@amazon.com\">feedback-awsorganizations@amazon.com</a> or post your feedback and questions in the <a href=\"http://forums.aws.amazon.com/forum.jspa?forumID=219\">Organizations support forum</a>. For more information about the Amazon Web Services support forums, see <a href=\"http://forums.aws.amazon.com/help.jspa\">Forums Help</a>.</p> <p> <b>Endpoint to call When using the CLI or the Amazon Web Services SDK</b> </p> <p>For the current release of Organizations, specify the <code>us-east-1</code> region for all Amazon Web Services API and CLI calls made from the commercial Amazon Web Services Regions outside of China. If calling from one of the Amazon Web Services Regions in China, then specify <code>cn-northwest-1</code>. You can do this in the CLI by using these parameters and commands:</p> <ul> <li> <p>Use the following parameter with each command to specify both the endpoint and its region:</p> <p> <code>--endpoint-url https://organizations.us-east-1.amazonaws.com</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>--endpoint-url https://organizations.cn-northwest-1.amazonaws.com.cn</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the default endpoint, but configure your default region with this command:</p> <p> <code>aws configure set default.region us-east-1</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>aws configure set default.region cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the following parameter with each command to specify the endpoint:</p> <p> <code>--region us-east-1</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>--region cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> </ul> <p> <b>Recording API Requests</b> </p> <p>Organizations supports CloudTrail, a service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. By using information collected by CloudTrail, you can determine which requests the Organizations service received, who made the request and when, and so on. For more about Organizations and its support for CloudTrail, see <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_incident-response.html#orgs_cloudtrail-integration\">Logging Organizations Events with CloudTrail</a> in the <i>Organizations User Guide</i>. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html\">CloudTrail User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptHandshakeRequest;
import org.openapitools.client.model.AcceptHandshakeResponse;
import org.openapitools.client.model.AttachPolicyRequest;
import org.openapitools.client.model.CancelHandshakeRequest;
import org.openapitools.client.model.CancelHandshakeResponse;
import org.openapitools.client.model.CloseAccountRequest;
import org.openapitools.client.model.CreateAccountRequest;
import org.openapitools.client.model.CreateAccountResponse;
import org.openapitools.client.model.CreateGovCloudAccountRequest;
import org.openapitools.client.model.CreateGovCloudAccountResponse;
import org.openapitools.client.model.CreateOrganizationRequest;
import org.openapitools.client.model.CreateOrganizationResponse;
import org.openapitools.client.model.CreateOrganizationalUnitRequest;
import org.openapitools.client.model.CreateOrganizationalUnitResponse;
import org.openapitools.client.model.CreatePolicyRequest;
import org.openapitools.client.model.CreatePolicyResponse;
import org.openapitools.client.model.DeclineHandshakeRequest;
import org.openapitools.client.model.DeclineHandshakeResponse;
import org.openapitools.client.model.DeleteOrganizationalUnitRequest;
import org.openapitools.client.model.DeletePolicyRequest;
import org.openapitools.client.model.DeregisterDelegatedAdministratorRequest;
import org.openapitools.client.model.DescribeAccountRequest;
import org.openapitools.client.model.DescribeAccountResponse;
import org.openapitools.client.model.DescribeCreateAccountStatusRequest;
import org.openapitools.client.model.DescribeCreateAccountStatusResponse;
import org.openapitools.client.model.DescribeEffectivePolicyRequest;
import org.openapitools.client.model.DescribeEffectivePolicyResponse;
import org.openapitools.client.model.DescribeHandshakeRequest;
import org.openapitools.client.model.DescribeHandshakeResponse;
import org.openapitools.client.model.DescribeOrganizationResponse;
import org.openapitools.client.model.DescribeOrganizationalUnitRequest;
import org.openapitools.client.model.DescribeOrganizationalUnitResponse;
import org.openapitools.client.model.DescribePolicyRequest;
import org.openapitools.client.model.DescribePolicyResponse;
import org.openapitools.client.model.DescribeResourcePolicyResponse;
import org.openapitools.client.model.DetachPolicyRequest;
import org.openapitools.client.model.DisableAWSServiceAccessRequest;
import org.openapitools.client.model.DisablePolicyTypeRequest;
import org.openapitools.client.model.DisablePolicyTypeResponse;
import org.openapitools.client.model.EnableAWSServiceAccessRequest;
import org.openapitools.client.model.EnableAllFeaturesResponse;
import org.openapitools.client.model.EnablePolicyTypeRequest;
import org.openapitools.client.model.EnablePolicyTypeResponse;
import org.openapitools.client.model.InviteAccountToOrganizationRequest;
import org.openapitools.client.model.InviteAccountToOrganizationResponse;
import org.openapitools.client.model.ListAWSServiceAccessForOrganizationRequest;
import org.openapitools.client.model.ListAWSServiceAccessForOrganizationResponse;
import org.openapitools.client.model.ListAccountsForParentRequest;
import org.openapitools.client.model.ListAccountsForParentResponse;
import org.openapitools.client.model.ListAccountsRequest;
import org.openapitools.client.model.ListAccountsResponse;
import org.openapitools.client.model.ListChildrenRequest;
import org.openapitools.client.model.ListChildrenResponse;
import org.openapitools.client.model.ListCreateAccountStatusRequest;
import org.openapitools.client.model.ListCreateAccountStatusResponse;
import org.openapitools.client.model.ListDelegatedAdministratorsRequest;
import org.openapitools.client.model.ListDelegatedAdministratorsResponse;
import org.openapitools.client.model.ListDelegatedServicesForAccountRequest;
import org.openapitools.client.model.ListDelegatedServicesForAccountResponse;
import org.openapitools.client.model.ListHandshakesForAccountRequest;
import org.openapitools.client.model.ListHandshakesForAccountResponse;
import org.openapitools.client.model.ListHandshakesForOrganizationRequest;
import org.openapitools.client.model.ListHandshakesForOrganizationResponse;
import org.openapitools.client.model.ListOrganizationalUnitsForParentRequest;
import org.openapitools.client.model.ListOrganizationalUnitsForParentResponse;
import org.openapitools.client.model.ListParentsRequest;
import org.openapitools.client.model.ListParentsResponse;
import org.openapitools.client.model.ListPoliciesForTargetRequest;
import org.openapitools.client.model.ListPoliciesForTargetResponse;
import org.openapitools.client.model.ListPoliciesRequest;
import org.openapitools.client.model.ListPoliciesResponse;
import org.openapitools.client.model.ListRootsRequest;
import org.openapitools.client.model.ListRootsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTargetsForPolicyRequest;
import org.openapitools.client.model.ListTargetsForPolicyResponse;
import org.openapitools.client.model.MoveAccountRequest;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResponse;
import org.openapitools.client.model.RegisterDelegatedAdministratorRequest;
import org.openapitools.client.model.RemoveAccountFromOrganizationRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateOrganizationalUnitRequest;
import org.openapitools.client.model.UpdateOrganizationalUnitResponse;
import org.openapitools.client.model.UpdatePolicyRequest;
import org.openapitools.client.model.UpdatePolicyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptHandshake
     * @param xAmzTarget  (required)
     * @param acceptHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptHandshakeCall(String xAmzTarget, AcceptHandshakeRequest acceptHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptHandshakeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.AcceptHandshake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptHandshakeValidateBeforeCall(String xAmzTarget, AcceptHandshakeRequest acceptHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling acceptHandshake(Async)");
        }

        // verify the required parameter 'acceptHandshakeRequest' is set
        if (acceptHandshakeRequest == null) {
            throw new ApiException("Missing the required parameter 'acceptHandshakeRequest' when calling acceptHandshake(Async)");
        }

        return acceptHandshakeCall(xAmzTarget, acceptHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends a response to the originator of a handshake agreeing to the action proposed by the handshake request.&lt;/p&gt; &lt;p&gt;You can only call this operation by the following principals when they also have the relevant IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Invitation to join&lt;/b&gt; or &lt;b&gt;Approve all features request&lt;/b&gt; handshakes: only a principal from the member account.&lt;/p&gt; &lt;p&gt;The user who calls the API for an invitation to join must have the &lt;code&gt;organizations:AcceptHandshake&lt;/code&gt; permission. If you enabled all features in the organization, the user must also have the &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission so that Organizations can create the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Enable all features final confirmation&lt;/b&gt; handshake: only a principal from the management account.&lt;/p&gt; &lt;p&gt;For more information about invitations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html\&quot;&gt;Inviting an Amazon Web Services account to join your organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; For more information about requests to enable all features in the organization, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling all features in your organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you accept a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param acceptHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AcceptHandshakeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public AcceptHandshakeResponse acceptHandshake(String xAmzTarget, AcceptHandshakeRequest acceptHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AcceptHandshakeResponse> localVarResp = acceptHandshakeWithHttpInfo(xAmzTarget, acceptHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends a response to the originator of a handshake agreeing to the action proposed by the handshake request.&lt;/p&gt; &lt;p&gt;You can only call this operation by the following principals when they also have the relevant IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Invitation to join&lt;/b&gt; or &lt;b&gt;Approve all features request&lt;/b&gt; handshakes: only a principal from the member account.&lt;/p&gt; &lt;p&gt;The user who calls the API for an invitation to join must have the &lt;code&gt;organizations:AcceptHandshake&lt;/code&gt; permission. If you enabled all features in the organization, the user must also have the &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission so that Organizations can create the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Enable all features final confirmation&lt;/b&gt; handshake: only a principal from the management account.&lt;/p&gt; &lt;p&gt;For more information about invitations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html\&quot;&gt;Inviting an Amazon Web Services account to join your organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; For more information about requests to enable all features in the organization, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling all features in your organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you accept a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param acceptHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AcceptHandshakeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AcceptHandshakeResponse> acceptHandshakeWithHttpInfo(String xAmzTarget, AcceptHandshakeRequest acceptHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = acceptHandshakeValidateBeforeCall(xAmzTarget, acceptHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AcceptHandshakeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends a response to the originator of a handshake agreeing to the action proposed by the handshake request.&lt;/p&gt; &lt;p&gt;You can only call this operation by the following principals when they also have the relevant IAM permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Invitation to join&lt;/b&gt; or &lt;b&gt;Approve all features request&lt;/b&gt; handshakes: only a principal from the member account.&lt;/p&gt; &lt;p&gt;The user who calls the API for an invitation to join must have the &lt;code&gt;organizations:AcceptHandshake&lt;/code&gt; permission. If you enabled all features in the organization, the user must also have the &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission so that Organizations can create the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Enable all features final confirmation&lt;/b&gt; handshake: only a principal from the management account.&lt;/p&gt; &lt;p&gt;For more information about invitations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html\&quot;&gt;Inviting an Amazon Web Services account to join your organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; For more information about requests to enable all features in the organization, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling all features in your organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you accept a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param acceptHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptHandshakeAsync(String xAmzTarget, AcceptHandshakeRequest acceptHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AcceptHandshakeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptHandshakeValidateBeforeCall(xAmzTarget, acceptHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AcceptHandshakeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachPolicy
     * @param xAmzTarget  (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyAttachmentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachPolicyCall(String xAmzTarget, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.AttachPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachPolicyValidateBeforeCall(String xAmzTarget, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling attachPolicy(Async)");
        }

        // verify the required parameter 'attachPolicyRequest' is set
        if (attachPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'attachPolicyRequest' when calling attachPolicy(Async)");
        }

        return attachPolicyCall(xAmzTarget, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches a policy to a root, an organizational unit (OU), or an individual account. How the policy affects accounts depends on the type of policy. Refer to the &lt;i&gt;Organizations User Guide&lt;/i&gt; for information about each policy type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html\&quot;&gt;AISERVICES_OPT_OUT_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html\&quot;&gt;BACKUP_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html\&quot;&gt;SERVICE_CONTROL_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html\&quot;&gt;TAG_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyAttachmentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public void attachPolicy(String xAmzTarget, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        attachPolicyWithHttpInfo(xAmzTarget, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Attaches a policy to a root, an organizational unit (OU), or an individual account. How the policy affects accounts depends on the type of policy. Refer to the &lt;i&gt;Organizations User Guide&lt;/i&gt; for information about each policy type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html\&quot;&gt;AISERVICES_OPT_OUT_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html\&quot;&gt;BACKUP_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html\&quot;&gt;SERVICE_CONTROL_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html\&quot;&gt;TAG_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyAttachmentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attachPolicyWithHttpInfo(String xAmzTarget, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = attachPolicyValidateBeforeCall(xAmzTarget, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches a policy to a root, an organizational unit (OU), or an individual account. How the policy affects accounts depends on the type of policy. Refer to the &lt;i&gt;Organizations User Guide&lt;/i&gt; for information about each policy type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html\&quot;&gt;AISERVICES_OPT_OUT_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html\&quot;&gt;BACKUP_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html\&quot;&gt;SERVICE_CONTROL_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html\&quot;&gt;TAG_POLICY&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyAttachmentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachPolicyAsync(String xAmzTarget, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachPolicyValidateBeforeCall(xAmzTarget, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelHandshake
     * @param xAmzTarget  (required)
     * @param cancelHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelHandshakeCall(String xAmzTarget, CancelHandshakeRequest cancelHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelHandshakeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CancelHandshake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelHandshakeValidateBeforeCall(String xAmzTarget, CancelHandshakeRequest cancelHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling cancelHandshake(Async)");
        }

        // verify the required parameter 'cancelHandshakeRequest' is set
        if (cancelHandshakeRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelHandshakeRequest' when calling cancelHandshake(Async)");
        }

        return cancelHandshakeCall(xAmzTarget, cancelHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels a handshake. Canceling a handshake sets the handshake state to &lt;code&gt;CANCELED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the account that originated the handshake. The recipient of the handshake can&#39;t cancel it, but can use &lt;a&gt;DeclineHandshake&lt;/a&gt; instead. After a handshake is canceled, the recipient can no longer respond to that handshake.&lt;/p&gt; &lt;p&gt;After you cancel a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelHandshakeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public CancelHandshakeResponse cancelHandshake(String xAmzTarget, CancelHandshakeRequest cancelHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelHandshakeResponse> localVarResp = cancelHandshakeWithHttpInfo(xAmzTarget, cancelHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels a handshake. Canceling a handshake sets the handshake state to &lt;code&gt;CANCELED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the account that originated the handshake. The recipient of the handshake can&#39;t cancel it, but can use &lt;a&gt;DeclineHandshake&lt;/a&gt; instead. After a handshake is canceled, the recipient can no longer respond to that handshake.&lt;/p&gt; &lt;p&gt;After you cancel a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelHandshakeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelHandshakeResponse> cancelHandshakeWithHttpInfo(String xAmzTarget, CancelHandshakeRequest cancelHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = cancelHandshakeValidateBeforeCall(xAmzTarget, cancelHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelHandshakeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels a handshake. Canceling a handshake sets the handshake state to &lt;code&gt;CANCELED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the account that originated the handshake. The recipient of the handshake can&#39;t cancel it, but can use &lt;a&gt;DeclineHandshake&lt;/a&gt; instead. After a handshake is canceled, the recipient can no longer respond to that handshake.&lt;/p&gt; &lt;p&gt;After you cancel a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelHandshakeAsync(String xAmzTarget, CancelHandshakeRequest cancelHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelHandshakeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelHandshakeValidateBeforeCall(xAmzTarget, cancelHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelHandshakeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closeAccount
     * @param xAmzTarget  (required)
     * @param closeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeAccountCall(String xAmzTarget, CloseAccountRequest closeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = closeAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CloseAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeAccountValidateBeforeCall(String xAmzTarget, CloseAccountRequest closeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling closeAccount(Async)");
        }

        // verify the required parameter 'closeAccountRequest' is set
        if (closeAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'closeAccountRequest' when calling closeAccount(Async)");
        }

        return closeAccountCall(xAmzTarget, closeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Closes an Amazon Web Services member account within an organization. You can close an account when &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features are enabled &lt;/a&gt;. You can&#39;t close the management account with this API. This is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CloseAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account closure might still be in progress. You need to wait a few minutes before the account is fully closed. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;AccountId&lt;/code&gt; that you sent in the &lt;code&gt;CloseAccount&lt;/code&gt; request to provide as a parameter to the &lt;a&gt;DescribeAccount&lt;/a&gt; operation. &lt;/p&gt; &lt;p&gt;While the close account request is in progress, Account status will indicate PENDING_CLOSURE. When the close account request completes, the status will change to SUSPENDED. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CloseAccountResult&lt;/code&gt; event that gets published after the account closes successfully. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration\&quot;&gt;Logging and monitoring in Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can close only 10% of member accounts, between 10 and 200, within a rolling 30 day period. This quota is not bound by a calendar month, but starts when you close an account.&lt;/p&gt; &lt;p&gt;After you reach this limit, you can close additional accounts in the Billing console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/close-account.html\&quot;&gt;Closing an account&lt;/a&gt; in the Amazon Web Services Billing and Cost Management User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To reinstate a closed account, contact Amazon Web Services Support within the 90-day grace period while the account is in SUSPENDED status. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the Amazon Web Services account you attempt to close is linked to an Amazon Web Services GovCloud (US) account, the &lt;code&gt;CloseAccount&lt;/code&gt; request will close both accounts. To learn important pre-closure details, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/Closing-govcloud-account.html\&quot;&gt; Closing an Amazon Web Services GovCloud (US) account&lt;/a&gt; in the &lt;i&gt; Amazon Web Services GovCloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;p&gt;For more information about closing accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param closeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public void closeAccount(String xAmzTarget, CloseAccountRequest closeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        closeAccountWithHttpInfo(xAmzTarget, closeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Closes an Amazon Web Services member account within an organization. You can close an account when &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features are enabled &lt;/a&gt;. You can&#39;t close the management account with this API. This is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CloseAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account closure might still be in progress. You need to wait a few minutes before the account is fully closed. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;AccountId&lt;/code&gt; that you sent in the &lt;code&gt;CloseAccount&lt;/code&gt; request to provide as a parameter to the &lt;a&gt;DescribeAccount&lt;/a&gt; operation. &lt;/p&gt; &lt;p&gt;While the close account request is in progress, Account status will indicate PENDING_CLOSURE. When the close account request completes, the status will change to SUSPENDED. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CloseAccountResult&lt;/code&gt; event that gets published after the account closes successfully. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration\&quot;&gt;Logging and monitoring in Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can close only 10% of member accounts, between 10 and 200, within a rolling 30 day period. This quota is not bound by a calendar month, but starts when you close an account.&lt;/p&gt; &lt;p&gt;After you reach this limit, you can close additional accounts in the Billing console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/close-account.html\&quot;&gt;Closing an account&lt;/a&gt; in the Amazon Web Services Billing and Cost Management User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To reinstate a closed account, contact Amazon Web Services Support within the 90-day grace period while the account is in SUSPENDED status. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the Amazon Web Services account you attempt to close is linked to an Amazon Web Services GovCloud (US) account, the &lt;code&gt;CloseAccount&lt;/code&gt; request will close both accounts. To learn important pre-closure details, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/Closing-govcloud-account.html\&quot;&gt; Closing an Amazon Web Services GovCloud (US) account&lt;/a&gt; in the &lt;i&gt; Amazon Web Services GovCloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;p&gt;For more information about closing accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param closeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> closeAccountWithHttpInfo(String xAmzTarget, CloseAccountRequest closeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = closeAccountValidateBeforeCall(xAmzTarget, closeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Closes an Amazon Web Services member account within an organization. You can close an account when &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features are enabled &lt;/a&gt;. You can&#39;t close the management account with this API. This is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CloseAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account closure might still be in progress. You need to wait a few minutes before the account is fully closed. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;AccountId&lt;/code&gt; that you sent in the &lt;code&gt;CloseAccount&lt;/code&gt; request to provide as a parameter to the &lt;a&gt;DescribeAccount&lt;/a&gt; operation. &lt;/p&gt; &lt;p&gt;While the close account request is in progress, Account status will indicate PENDING_CLOSURE. When the close account request completes, the status will change to SUSPENDED. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CloseAccountResult&lt;/code&gt; event that gets published after the account closes successfully. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration\&quot;&gt;Logging and monitoring in Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can close only 10% of member accounts, between 10 and 200, within a rolling 30 day period. This quota is not bound by a calendar month, but starts when you close an account.&lt;/p&gt; &lt;p&gt;After you reach this limit, you can close additional accounts in the Billing console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/close-account.html\&quot;&gt;Closing an account&lt;/a&gt; in the Amazon Web Services Billing and Cost Management User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To reinstate a closed account, contact Amazon Web Services Support within the 90-day grace period while the account is in SUSPENDED status. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the Amazon Web Services account you attempt to close is linked to an Amazon Web Services GovCloud (US) account, the &lt;code&gt;CloseAccount&lt;/code&gt; request will close both accounts. To learn important pre-closure details, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/Closing-govcloud-account.html\&quot;&gt; Closing an Amazon Web Services GovCloud (US) account&lt;/a&gt; in the &lt;i&gt; Amazon Web Services GovCloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;p&gt;For more information about closing accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param closeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyClosedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeAccountAsync(String xAmzTarget, CloseAccountRequest closeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeAccountValidateBeforeCall(xAmzTarget, closeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccount
     * @param xAmzTarget  (required)
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountCall(String xAmzTarget, CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CreateAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountValidateBeforeCall(String xAmzTarget, CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createAccount(Async)");
        }

        // verify the required parameter 'createAccountRequest' is set
        if (createAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRequest' when calling createAccount(Async)");
        }

        return createAccountCall(xAmzTarget, createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Web Services account that is automatically a member of the organization whose credentials made the request. This is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CreateAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account initialization might still be in progress. You might need to wait a few minutes before you can successfully access the account. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;Id&lt;/code&gt; value of the &lt;code&gt;CreateAccountStatus&lt;/code&gt; response element from this operation to provide as a parameter to the &lt;a&gt;DescribeCreateAccountStatus&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CreateAccountResult&lt;/code&gt; event. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration\&quot;&gt;Logging and monitoring in Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The user who calls the API to create an account must have the &lt;code&gt;organizations:CreateAccount&lt;/code&gt; permission. If you enabled all features in the organization, Organizations creates the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;Organizations preconfigures the new member account with a role (named &lt;code&gt;OrganizationAccountAccessRole&lt;/code&gt; by default) that grants users in the management account administrator permissions in the new member account. Principals in the management account can assume the role. Organizations clones the company name and address information for the new account from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;For more information about creating accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html\&quot;&gt;Creating an Amazon Web Services account in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When you create an account in an organization using the Organizations console, API, or CLI commands, the information required for the account to operate as a standalone account, such as a payment method and signing the end user license agreement (EULA) is &lt;i&gt;not&lt;/i&gt; automatically collected. If you must remove an account from your organization later, you can do so only after you provide the missing information. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization as a member account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that you exceeded your account limits for the organization, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CreateAccount&lt;/code&gt; to create multiple temporary accounts isn&#39;t recommended. You can only close an account from the Billing and Cost Management console, and you must be signed in as the root user. For information on the requirements and process for closing an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;When you create a member account with this operation, you can choose whether to create the account with the &lt;b&gt;IAM User and Role Access to Billing Information&lt;/b&gt; switch enabled. If you enable it, IAM users and roles that have appropriate permissions can view billing information for the account. If you disable it, only the account root user can access billing information. For information about how to disable this switch for an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html\&quot;&gt;Granting Access to Your Billing Information and Tools&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountResponse createAccount(String xAmzTarget, CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateAccountResponse> localVarResp = createAccountWithHttpInfo(xAmzTarget, createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Web Services account that is automatically a member of the organization whose credentials made the request. This is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CreateAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account initialization might still be in progress. You might need to wait a few minutes before you can successfully access the account. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;Id&lt;/code&gt; value of the &lt;code&gt;CreateAccountStatus&lt;/code&gt; response element from this operation to provide as a parameter to the &lt;a&gt;DescribeCreateAccountStatus&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CreateAccountResult&lt;/code&gt; event. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration\&quot;&gt;Logging and monitoring in Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The user who calls the API to create an account must have the &lt;code&gt;organizations:CreateAccount&lt;/code&gt; permission. If you enabled all features in the organization, Organizations creates the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;Organizations preconfigures the new member account with a role (named &lt;code&gt;OrganizationAccountAccessRole&lt;/code&gt; by default) that grants users in the management account administrator permissions in the new member account. Principals in the management account can assume the role. Organizations clones the company name and address information for the new account from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;For more information about creating accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html\&quot;&gt;Creating an Amazon Web Services account in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When you create an account in an organization using the Organizations console, API, or CLI commands, the information required for the account to operate as a standalone account, such as a payment method and signing the end user license agreement (EULA) is &lt;i&gt;not&lt;/i&gt; automatically collected. If you must remove an account from your organization later, you can do so only after you provide the missing information. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization as a member account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that you exceeded your account limits for the organization, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CreateAccount&lt;/code&gt; to create multiple temporary accounts isn&#39;t recommended. You can only close an account from the Billing and Cost Management console, and you must be signed in as the root user. For information on the requirements and process for closing an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;When you create a member account with this operation, you can choose whether to create the account with the &lt;b&gt;IAM User and Role Access to Billing Information&lt;/b&gt; switch enabled. If you enable it, IAM users and roles that have appropriate permissions can view billing information for the account. If you disable it, only the account root user can access billing information. For information about how to disable this switch for an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html\&quot;&gt;Granting Access to Your Billing Information and Tools&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountResponse> createAccountWithHttpInfo(String xAmzTarget, CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createAccountValidateBeforeCall(xAmzTarget, createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon Web Services account that is automatically a member of the organization whose credentials made the request. This is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CreateAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account initialization might still be in progress. You might need to wait a few minutes before you can successfully access the account. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;Id&lt;/code&gt; value of the &lt;code&gt;CreateAccountStatus&lt;/code&gt; response element from this operation to provide as a parameter to the &lt;a&gt;DescribeCreateAccountStatus&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CreateAccountResult&lt;/code&gt; event. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration\&quot;&gt;Logging and monitoring in Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The user who calls the API to create an account must have the &lt;code&gt;organizations:CreateAccount&lt;/code&gt; permission. If you enabled all features in the organization, Organizations creates the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;Organizations preconfigures the new member account with a role (named &lt;code&gt;OrganizationAccountAccessRole&lt;/code&gt; by default) that grants users in the management account administrator permissions in the new member account. Principals in the management account can assume the role. Organizations clones the company name and address information for the new account from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;For more information about creating accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html\&quot;&gt;Creating an Amazon Web Services account in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When you create an account in an organization using the Organizations console, API, or CLI commands, the information required for the account to operate as a standalone account, such as a payment method and signing the end user license agreement (EULA) is &lt;i&gt;not&lt;/i&gt; automatically collected. If you must remove an account from your organization later, you can do so only after you provide the missing information. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization as a member account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that you exceeded your account limits for the organization, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CreateAccount&lt;/code&gt; to create multiple temporary accounts isn&#39;t recommended. You can only close an account from the Billing and Cost Management console, and you must be signed in as the root user. For information on the requirements and process for closing an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;When you create a member account with this operation, you can choose whether to create the account with the &lt;b&gt;IAM User and Role Access to Billing Information&lt;/b&gt; switch enabled. If you enable it, IAM users and roles that have appropriate permissions can view billing information for the account. If you disable it, only the account root user can access billing information. For information about how to disable this switch for an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html\&quot;&gt;Granting Access to Your Billing Information and Tools&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAsync(String xAmzTarget, CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountValidateBeforeCall(xAmzTarget, createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGovCloudAccount
     * @param xAmzTarget  (required)
     * @param createGovCloudAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGovCloudAccountCall(String xAmzTarget, CreateGovCloudAccountRequest createGovCloudAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGovCloudAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CreateGovCloudAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGovCloudAccountValidateBeforeCall(String xAmzTarget, CreateGovCloudAccountRequest createGovCloudAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createGovCloudAccount(Async)");
        }

        // verify the required parameter 'createGovCloudAccountRequest' is set
        if (createGovCloudAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createGovCloudAccountRequest' when calling createGovCloudAccount(Async)");
        }

        return createGovCloudAccountCall(xAmzTarget, createGovCloudAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This action is available if all of the following are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You&#39;re authorized to create accounts in the Amazon Web Services GovCloud (US) Region. For more information on the Amazon Web Services GovCloud (US) Region, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html\&quot;&gt; &lt;i&gt;Amazon Web Services GovCloud User Guide&lt;/i&gt;.&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You already have an account in the Amazon Web Services GovCloud (US) Region that is paired with a management account of an organization in the commercial Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You call this action from the management account of your organization in the commercial Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You have the &lt;code&gt;organizations:CreateGovCloudAccount&lt;/code&gt; permission. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Organizations automatically creates the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Amazon Web Services automatically enables CloudTrail for Amazon Web Services GovCloud (US) accounts, but you should also do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Verify that CloudTrail is enabled to store logs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create an Amazon S3 bucket for CloudTrail log storage.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html\&quot;&gt;Verifying CloudTrail Is Enabled&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission. The tags are attached to the commercial account associated with the GovCloud account, rather than the GovCloud account itself. To add tags to the GovCloud account, call the &lt;a&gt;TagResource&lt;/a&gt; operation in the GovCloud Region after the new GovCloud account exists.&lt;/p&gt; &lt;p&gt;You call this action from the management account of your organization in the commercial Region to create a standalone Amazon Web Services account in the Amazon Web Services GovCloud (US) Region. After the account is created, the management account of an organization in the Amazon Web Services GovCloud (US) Region can invite it to that organization. For more information on inviting standalone accounts in the Amazon Web Services GovCloud (US) to join an organization, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html\&quot;&gt;Organizations&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Calling &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account initialization might still be in progress. You might need to wait a few minutes before you can successfully access the account. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;OperationId&lt;/code&gt; response element from this operation to provide as a parameter to the &lt;a&gt;DescribeCreateAccountStatus&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CreateAccountResult&lt;/code&gt; event. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html\&quot;&gt;Monitoring the Activity in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;p&gt;When you call the &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; action, you create two accounts: a standalone account in the Amazon Web Services GovCloud (US) Region and an associated account in the commercial Region for billing and support purposes. The account in the commercial Region is automatically a member of the organization whose credentials made the request. Both accounts are associated with the same email address.&lt;/p&gt; &lt;p&gt;A role is created in the new account in the commercial Region that allows the management account in the organization in the commercial Region to assume it. An Amazon Web Services GovCloud (US) account is then created and associated with the commercial account that you just created. A role is also created in the new Amazon Web Services GovCloud (US) account that can be assumed by the Amazon Web Services GovCloud (US) account that is associated with the management account of the commercial organization. For more information and to view a diagram that explains how account access works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html\&quot;&gt;Organizations&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;For more information about creating accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html\&quot;&gt;Creating an Amazon Web Services account in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When you create an account in an organization using the Organizations console, API, or CLI commands, the information required for the account to operate as a standalone account is &lt;i&gt;not&lt;/i&gt; automatically collected. This includes a payment method and signing the end user license agreement (EULA). If you must remove an account from your organization later, you can do so only after you provide the missing information. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization as a member account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that you exceeded your account limits for the organization, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; to create multiple temporary accounts isn&#39;t recommended. You can only close an account from the Amazon Web Services Billing and Cost Management console, and you must be signed in as the root user. For information on the requirements and process for closing an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;When you create a member account with this operation, you can choose whether to create the account with the &lt;b&gt;IAM User and Role Access to Billing Information&lt;/b&gt; switch enabled. If you enable it, IAM users and roles that have appropriate permissions can view billing information for the account. If you disable it, only the account root user can access billing information. For information about how to disable this switch for an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html\&quot;&gt;Granting Access to Your Billing Information and Tools&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createGovCloudAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateGovCloudAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGovCloudAccountResponse createGovCloudAccount(String xAmzTarget, CreateGovCloudAccountRequest createGovCloudAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateGovCloudAccountResponse> localVarResp = createGovCloudAccountWithHttpInfo(xAmzTarget, createGovCloudAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This action is available if all of the following are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You&#39;re authorized to create accounts in the Amazon Web Services GovCloud (US) Region. For more information on the Amazon Web Services GovCloud (US) Region, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html\&quot;&gt; &lt;i&gt;Amazon Web Services GovCloud User Guide&lt;/i&gt;.&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You already have an account in the Amazon Web Services GovCloud (US) Region that is paired with a management account of an organization in the commercial Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You call this action from the management account of your organization in the commercial Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You have the &lt;code&gt;organizations:CreateGovCloudAccount&lt;/code&gt; permission. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Organizations automatically creates the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Amazon Web Services automatically enables CloudTrail for Amazon Web Services GovCloud (US) accounts, but you should also do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Verify that CloudTrail is enabled to store logs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create an Amazon S3 bucket for CloudTrail log storage.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html\&quot;&gt;Verifying CloudTrail Is Enabled&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission. The tags are attached to the commercial account associated with the GovCloud account, rather than the GovCloud account itself. To add tags to the GovCloud account, call the &lt;a&gt;TagResource&lt;/a&gt; operation in the GovCloud Region after the new GovCloud account exists.&lt;/p&gt; &lt;p&gt;You call this action from the management account of your organization in the commercial Region to create a standalone Amazon Web Services account in the Amazon Web Services GovCloud (US) Region. After the account is created, the management account of an organization in the Amazon Web Services GovCloud (US) Region can invite it to that organization. For more information on inviting standalone accounts in the Amazon Web Services GovCloud (US) to join an organization, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html\&quot;&gt;Organizations&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Calling &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account initialization might still be in progress. You might need to wait a few minutes before you can successfully access the account. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;OperationId&lt;/code&gt; response element from this operation to provide as a parameter to the &lt;a&gt;DescribeCreateAccountStatus&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CreateAccountResult&lt;/code&gt; event. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html\&quot;&gt;Monitoring the Activity in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;p&gt;When you call the &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; action, you create two accounts: a standalone account in the Amazon Web Services GovCloud (US) Region and an associated account in the commercial Region for billing and support purposes. The account in the commercial Region is automatically a member of the organization whose credentials made the request. Both accounts are associated with the same email address.&lt;/p&gt; &lt;p&gt;A role is created in the new account in the commercial Region that allows the management account in the organization in the commercial Region to assume it. An Amazon Web Services GovCloud (US) account is then created and associated with the commercial account that you just created. A role is also created in the new Amazon Web Services GovCloud (US) account that can be assumed by the Amazon Web Services GovCloud (US) account that is associated with the management account of the commercial organization. For more information and to view a diagram that explains how account access works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html\&quot;&gt;Organizations&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;For more information about creating accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html\&quot;&gt;Creating an Amazon Web Services account in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When you create an account in an organization using the Organizations console, API, or CLI commands, the information required for the account to operate as a standalone account is &lt;i&gt;not&lt;/i&gt; automatically collected. This includes a payment method and signing the end user license agreement (EULA). If you must remove an account from your organization later, you can do so only after you provide the missing information. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization as a member account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that you exceeded your account limits for the organization, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; to create multiple temporary accounts isn&#39;t recommended. You can only close an account from the Amazon Web Services Billing and Cost Management console, and you must be signed in as the root user. For information on the requirements and process for closing an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;When you create a member account with this operation, you can choose whether to create the account with the &lt;b&gt;IAM User and Role Access to Billing Information&lt;/b&gt; switch enabled. If you enable it, IAM users and roles that have appropriate permissions can view billing information for the account. If you disable it, only the account root user can access billing information. For information about how to disable this switch for an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html\&quot;&gt;Granting Access to Your Billing Information and Tools&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createGovCloudAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateGovCloudAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGovCloudAccountResponse> createGovCloudAccountWithHttpInfo(String xAmzTarget, CreateGovCloudAccountRequest createGovCloudAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createGovCloudAccountValidateBeforeCall(xAmzTarget, createGovCloudAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateGovCloudAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This action is available if all of the following are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You&#39;re authorized to create accounts in the Amazon Web Services GovCloud (US) Region. For more information on the Amazon Web Services GovCloud (US) Region, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html\&quot;&gt; &lt;i&gt;Amazon Web Services GovCloud User Guide&lt;/i&gt;.&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You already have an account in the Amazon Web Services GovCloud (US) Region that is paired with a management account of an organization in the commercial Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You call this action from the management account of your organization in the commercial Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You have the &lt;code&gt;organizations:CreateGovCloudAccount&lt;/code&gt; permission. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Organizations automatically creates the required service-linked role named &lt;code&gt;AWSServiceRoleForOrganizations&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs\&quot;&gt;Organizations and Service-Linked Roles&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Amazon Web Services automatically enables CloudTrail for Amazon Web Services GovCloud (US) accounts, but you should also do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Verify that CloudTrail is enabled to store logs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create an Amazon S3 bucket for CloudTrail log storage.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html\&quot;&gt;Verifying CloudTrail Is Enabled&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission. The tags are attached to the commercial account associated with the GovCloud account, rather than the GovCloud account itself. To add tags to the GovCloud account, call the &lt;a&gt;TagResource&lt;/a&gt; operation in the GovCloud Region after the new GovCloud account exists.&lt;/p&gt; &lt;p&gt;You call this action from the management account of your organization in the commercial Region to create a standalone Amazon Web Services account in the Amazon Web Services GovCloud (US) Region. After the account is created, the management account of an organization in the Amazon Web Services GovCloud (US) Region can invite it to that organization. For more information on inviting standalone accounts in the Amazon Web Services GovCloud (US) to join an organization, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html\&quot;&gt;Organizations&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Calling &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; is an asynchronous request that Amazon Web Services performs in the background. Because &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; operates asynchronously, it can return a successful completion message even though account initialization might still be in progress. You might need to wait a few minutes before you can successfully access the account. To check the status of the request, do one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;OperationId&lt;/code&gt; response element from this operation to provide as a parameter to the &lt;a&gt;DescribeCreateAccountStatus&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Check the CloudTrail log for the &lt;code&gt;CreateAccountResult&lt;/code&gt; event. For information on using CloudTrail with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html\&quot;&gt;Monitoring the Activity in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;p&gt;When you call the &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; action, you create two accounts: a standalone account in the Amazon Web Services GovCloud (US) Region and an associated account in the commercial Region for billing and support purposes. The account in the commercial Region is automatically a member of the organization whose credentials made the request. Both accounts are associated with the same email address.&lt;/p&gt; &lt;p&gt;A role is created in the new account in the commercial Region that allows the management account in the organization in the commercial Region to assume it. An Amazon Web Services GovCloud (US) account is then created and associated with the commercial account that you just created. A role is also created in the new Amazon Web Services GovCloud (US) account that can be assumed by the Amazon Web Services GovCloud (US) account that is associated with the management account of the commercial organization. For more information and to view a diagram that explains how account access works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html\&quot;&gt;Organizations&lt;/a&gt; in the &lt;i&gt;Amazon Web Services GovCloud User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;For more information about creating accounts, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html\&quot;&gt;Creating an Amazon Web Services account in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When you create an account in an organization using the Organizations console, API, or CLI commands, the information required for the account to operate as a standalone account is &lt;i&gt;not&lt;/i&gt; automatically collected. This includes a payment method and signing the end user license agreement (EULA). If you must remove an account from your organization later, you can do so only after you provide the missing information. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization as a member account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that you exceeded your account limits for the organization, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you get an exception that indicates that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;CreateGovCloudAccount&lt;/code&gt; to create multiple temporary accounts isn&#39;t recommended. You can only close an account from the Amazon Web Services Billing and Cost Management console, and you must be signed in as the root user. For information on the requirements and process for closing an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html\&quot;&gt;Closing an Amazon Web Services account&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;When you create a member account with this operation, you can choose whether to create the account with the &lt;b&gt;IAM User and Role Access to Billing Information&lt;/b&gt; switch enabled. If you enable it, IAM users and roles that have appropriate permissions can view billing information for the account. If you disable it, only the account root user can access billing information. For information about how to disable this switch for an account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html\&quot;&gt;Granting Access to Your Billing Information and Tools&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createGovCloudAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGovCloudAccountAsync(String xAmzTarget, CreateGovCloudAccountRequest createGovCloudAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateGovCloudAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGovCloudAccountValidateBeforeCall(xAmzTarget, createGovCloudAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateGovCloudAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganization
     * @param xAmzTarget  (required)
     * @param createOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyInOrganizationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationCall(String xAmzTarget, CreateOrganizationRequest createOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CreateOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationValidateBeforeCall(String xAmzTarget, CreateOrganizationRequest createOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createOrganization(Async)");
        }

        // verify the required parameter 'createOrganizationRequest' is set
        if (createOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationRequest' when calling createOrganization(Async)");
        }

        return createOrganizationCall(xAmzTarget, createOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Web Services organization. The account whose user is calling the &lt;code&gt;CreateOrganization&lt;/code&gt; operation automatically becomes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\&quot;&gt;management account&lt;/a&gt; of the new organization.&lt;/p&gt; &lt;p&gt;This operation must be called using credentials from the account that is to become the new organization&#39;s management account. The principal must also have the relevant IAM permissions.&lt;/p&gt; &lt;p&gt;By default (or if you set the &lt;code&gt;FeatureSet&lt;/code&gt; parameter to &lt;code&gt;ALL&lt;/code&gt;), the new organization is created with all features enabled and service control policies automatically enabled in the root. If you instead choose to create the organization supporting only the consolidated billing features by setting the &lt;code&gt;FeatureSet&lt;/code&gt; parameter to &lt;code&gt;CONSOLIDATED_BILLING\&quot;&lt;/code&gt;, no policy types are enabled by default, and you can&#39;t use organization policies&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyInOrganizationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationResponse createOrganization(String xAmzTarget, CreateOrganizationRequest createOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateOrganizationResponse> localVarResp = createOrganizationWithHttpInfo(xAmzTarget, createOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Web Services organization. The account whose user is calling the &lt;code&gt;CreateOrganization&lt;/code&gt; operation automatically becomes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\&quot;&gt;management account&lt;/a&gt; of the new organization.&lt;/p&gt; &lt;p&gt;This operation must be called using credentials from the account that is to become the new organization&#39;s management account. The principal must also have the relevant IAM permissions.&lt;/p&gt; &lt;p&gt;By default (or if you set the &lt;code&gt;FeatureSet&lt;/code&gt; parameter to &lt;code&gt;ALL&lt;/code&gt;), the new organization is created with all features enabled and service control policies automatically enabled in the root. If you instead choose to create the organization supporting only the consolidated billing features by setting the &lt;code&gt;FeatureSet&lt;/code&gt; parameter to &lt;code&gt;CONSOLIDATED_BILLING\&quot;&lt;/code&gt;, no policy types are enabled by default, and you can&#39;t use organization policies&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyInOrganizationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrganizationResponse> createOrganizationWithHttpInfo(String xAmzTarget, CreateOrganizationRequest createOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationValidateBeforeCall(xAmzTarget, createOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon Web Services organization. The account whose user is calling the &lt;code&gt;CreateOrganization&lt;/code&gt; operation automatically becomes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\&quot;&gt;management account&lt;/a&gt; of the new organization.&lt;/p&gt; &lt;p&gt;This operation must be called using credentials from the account that is to become the new organization&#39;s management account. The principal must also have the relevant IAM permissions.&lt;/p&gt; &lt;p&gt;By default (or if you set the &lt;code&gt;FeatureSet&lt;/code&gt; parameter to &lt;code&gt;ALL&lt;/code&gt;), the new organization is created with all features enabled and service control policies automatically enabled in the root. If you instead choose to create the organization supporting only the consolidated billing features by setting the &lt;code&gt;FeatureSet&lt;/code&gt; parameter to &lt;code&gt;CONSOLIDATED_BILLING\&quot;&lt;/code&gt;, no policy types are enabled by default, and you can&#39;t use organization policies&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyInOrganizationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationAsync(String xAmzTarget, CreateOrganizationRequest createOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationValidateBeforeCall(xAmzTarget, createOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationalUnit
     * @param xAmzTarget  (required)
     * @param createOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationalUnitCall(String xAmzTarget, CreateOrganizationalUnitRequest createOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrganizationalUnitRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CreateOrganizationalUnit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationalUnitValidateBeforeCall(String xAmzTarget, CreateOrganizationalUnitRequest createOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createOrganizationalUnit(Async)");
        }

        // verify the required parameter 'createOrganizationalUnitRequest' is set
        if (createOrganizationalUnitRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrganizationalUnitRequest' when calling createOrganizationalUnit(Async)");
        }

        return createOrganizationalUnitCall(xAmzTarget, createOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an organizational unit (OU) within a root or parent OU. An OU is a container for accounts that enables you to organize your accounts to apply policies according to your business requirements. The number of levels deep that you can nest OUs is dependent upon the policy types enabled for that root. For service control policies, the limit is five.&lt;/p&gt; &lt;p&gt;For more information about OUs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html\&quot;&gt;Managing Organizational Units&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateOrganizationalUnitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationalUnitResponse createOrganizationalUnit(String xAmzTarget, CreateOrganizationalUnitRequest createOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateOrganizationalUnitResponse> localVarResp = createOrganizationalUnitWithHttpInfo(xAmzTarget, createOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an organizational unit (OU) within a root or parent OU. An OU is a container for accounts that enables you to organize your accounts to apply policies according to your business requirements. The number of levels deep that you can nest OUs is dependent upon the policy types enabled for that root. For service control policies, the limit is five.&lt;/p&gt; &lt;p&gt;For more information about OUs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html\&quot;&gt;Managing Organizational Units&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateOrganizationalUnitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrganizationalUnitResponse> createOrganizationalUnitWithHttpInfo(String xAmzTarget, CreateOrganizationalUnitRequest createOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationalUnitValidateBeforeCall(xAmzTarget, createOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateOrganizationalUnitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an organizational unit (OU) within a root or parent OU. An OU is a container for accounts that enables you to organize your accounts to apply policies according to your business requirements. The number of levels deep that you can nest OUs is dependent upon the policy types enabled for that root. For service control policies, the limit is five.&lt;/p&gt; &lt;p&gt;For more information about OUs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html\&quot;&gt;Managing Organizational Units&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationalUnitAsync(String xAmzTarget, CreateOrganizationalUnitRequest createOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateOrganizationalUnitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationalUnitValidateBeforeCall(xAmzTarget, createOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateOrganizationalUnitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPolicy
     * @param xAmzTarget  (required)
     * @param createPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPolicyCall(String xAmzTarget, CreatePolicyRequest createPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.CreatePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(String xAmzTarget, CreatePolicyRequest createPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createPolicy(Async)");
        }

        // verify the required parameter 'createPolicyRequest' is set
        if (createPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'createPolicyRequest' when calling createPolicy(Async)");
        }

        return createPolicyCall(xAmzTarget, createPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a policy of a specified type that you can attach to a root, an organizational unit (OU), or an individual Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information about policies and their use, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html\&quot;&gt;Managing Organization Policies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyResponse createPolicy(String xAmzTarget, CreatePolicyRequest createPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePolicyResponse> localVarResp = createPolicyWithHttpInfo(xAmzTarget, createPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a policy of a specified type that you can attach to a root, an organizational unit (OU), or an individual Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information about policies and their use, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html\&quot;&gt;Managing Organization Policies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePolicyResponse> createPolicyWithHttpInfo(String xAmzTarget, CreatePolicyRequest createPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(xAmzTarget, createPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a policy of a specified type that you can attach to a root, an organizational unit (OU), or an individual Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information about policies and their use, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html\&quot;&gt;Managing Organization Policies&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPolicyAsync(String xAmzTarget, CreatePolicyRequest createPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(xAmzTarget, createPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for declineHandshake
     * @param xAmzTarget  (required)
     * @param declineHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call declineHandshakeCall(String xAmzTarget, DeclineHandshakeRequest declineHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = declineHandshakeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DeclineHandshake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call declineHandshakeValidateBeforeCall(String xAmzTarget, DeclineHandshakeRequest declineHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling declineHandshake(Async)");
        }

        // verify the required parameter 'declineHandshakeRequest' is set
        if (declineHandshakeRequest == null) {
            throw new ApiException("Missing the required parameter 'declineHandshakeRequest' when calling declineHandshake(Async)");
        }

        return declineHandshakeCall(xAmzTarget, declineHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Declines a handshake request. This sets the handshake state to &lt;code&gt;DECLINED&lt;/code&gt; and effectively deactivates the request.&lt;/p&gt; &lt;p&gt;This operation can be called only from the account that received the handshake. The originator of the handshake can use &lt;a&gt;CancelHandshake&lt;/a&gt; instead. The originator can&#39;t reactivate a declined request, but can reinitiate the process with a new handshake request.&lt;/p&gt; &lt;p&gt;After you decline a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param declineHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeclineHandshakeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public DeclineHandshakeResponse declineHandshake(String xAmzTarget, DeclineHandshakeRequest declineHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeclineHandshakeResponse> localVarResp = declineHandshakeWithHttpInfo(xAmzTarget, declineHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Declines a handshake request. This sets the handshake state to &lt;code&gt;DECLINED&lt;/code&gt; and effectively deactivates the request.&lt;/p&gt; &lt;p&gt;This operation can be called only from the account that received the handshake. The originator of the handshake can use &lt;a&gt;CancelHandshake&lt;/a&gt; instead. The originator can&#39;t reactivate a declined request, but can reinitiate the process with a new handshake request.&lt;/p&gt; &lt;p&gt;After you decline a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param declineHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeclineHandshakeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeclineHandshakeResponse> declineHandshakeWithHttpInfo(String xAmzTarget, DeclineHandshakeRequest declineHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = declineHandshakeValidateBeforeCall(xAmzTarget, declineHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeclineHandshakeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Declines a handshake request. This sets the handshake state to &lt;code&gt;DECLINED&lt;/code&gt; and effectively deactivates the request.&lt;/p&gt; &lt;p&gt;This operation can be called only from the account that received the handshake. The originator of the handshake can use &lt;a&gt;CancelHandshake&lt;/a&gt; instead. The originator can&#39;t reactivate a declined request, but can reinitiate the process with a new handshake request.&lt;/p&gt; &lt;p&gt;After you decline a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it&#39;s deleted.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param declineHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHandshakeTransitionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeAlreadyInStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call declineHandshakeAsync(String xAmzTarget, DeclineHandshakeRequest declineHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeclineHandshakeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = declineHandshakeValidateBeforeCall(xAmzTarget, declineHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeclineHandshakeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganization
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DeleteOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationValidateBeforeCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteOrganization(Async)");
        }

        return deleteOrganizationCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the organization. You can delete an organization only by using credentials from the management account. The organization must be empty of member accounts.
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganization(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteOrganizationWithHttpInfo(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the organization. You can delete an organization only by using credentials from the management account. The organization must be empty of member accounts.
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationWithHttpInfo(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the organization. You can delete an organization only by using credentials from the management account. The organization must be empty of member accounts.
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationAsync(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationalUnit
     * @param xAmzTarget  (required)
     * @param deleteOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationalUnitNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationalUnitCall(String xAmzTarget, DeleteOrganizationalUnitRequest deleteOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteOrganizationalUnitRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DeleteOrganizationalUnit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationalUnitValidateBeforeCall(String xAmzTarget, DeleteOrganizationalUnitRequest deleteOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteOrganizationalUnit(Async)");
        }

        // verify the required parameter 'deleteOrganizationalUnitRequest' is set
        if (deleteOrganizationalUnitRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteOrganizationalUnitRequest' when calling deleteOrganizationalUnit(Async)");
        }

        return deleteOrganizationalUnitCall(xAmzTarget, deleteOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an organizational unit (OU) from a root or another OU. You must first remove all accounts and child OUs from the OU that you want to delete.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationalUnitNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganizationalUnit(String xAmzTarget, DeleteOrganizationalUnitRequest deleteOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteOrganizationalUnitWithHttpInfo(xAmzTarget, deleteOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes an organizational unit (OU) from a root or another OU. You must first remove all accounts and child OUs from the OU that you want to delete.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationalUnitNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganizationalUnitWithHttpInfo(String xAmzTarget, DeleteOrganizationalUnitRequest deleteOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationalUnitValidateBeforeCall(xAmzTarget, deleteOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an organizational unit (OU) from a root or another OU. You must first remove all accounts and child OUs from the OU that you want to delete.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OrganizationalUnitNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganizationalUnitAsync(String xAmzTarget, DeleteOrganizationalUnitRequest deleteOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationalUnitValidateBeforeCall(xAmzTarget, deleteOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolicy
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PolicyInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyCall(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DeletePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deletePolicy(Async)");
        }

        // verify the required parameter 'deletePolicyRequest' is set
        if (deletePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'deletePolicyRequest' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified policy from your organization. Before you perform this operation, you must first detach the policy from all organizational units (OUs), roots, and accounts.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PolicyInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public void deletePolicy(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deletePolicyWithHttpInfo(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified policy from your organization. Before you perform this operation, you must first detach the policy from all organizational units (OUs), roots, and accounts.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PolicyInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePolicyWithHttpInfo(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified policy from your organization. Before you perform this operation, you must first detach the policy from all organizational units (OUs), roots, and accounts.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PolicyInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyAsync(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourcePolicy
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcePolicyCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DeleteResourcePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourcePolicyValidateBeforeCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteResourcePolicy(Async)");
        }

        return deleteResourcePolicyCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the resource policy from your organization.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteResourcePolicy(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteResourcePolicyWithHttpInfo(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the resource policy from your organization.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteResourcePolicyWithHttpInfo(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteResourcePolicyValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the resource policy from your organization.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcePolicyAsync(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourcePolicyValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deregisterDelegatedAdministrator
     * @param xAmzTarget  (required)
     * @param deregisterDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterDelegatedAdministratorCall(String xAmzTarget, DeregisterDelegatedAdministratorRequest deregisterDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterDelegatedAdministratorRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DeregisterDelegatedAdministrator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterDelegatedAdministratorValidateBeforeCall(String xAmzTarget, DeregisterDelegatedAdministratorRequest deregisterDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deregisterDelegatedAdministrator(Async)");
        }

        // verify the required parameter 'deregisterDelegatedAdministratorRequest' is set
        if (deregisterDelegatedAdministratorRequest == null) {
            throw new ApiException("Missing the required parameter 'deregisterDelegatedAdministratorRequest' when calling deregisterDelegatedAdministrator(Async)");
        }

        return deregisterDelegatedAdministratorCall(xAmzTarget, deregisterDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified member Amazon Web Services account as a delegated administrator for the specified Amazon Web Services service.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Deregistering a delegated administrator can have unintended impacts on the functionality of the enabled Amazon Web Services service. See the documentation for the enabled service before you deregister a delegated administrator so that you understand any potential impacts.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column &lt;i&gt;Supports Delegated Administrator&lt;/i&gt; in the table at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services Services that you can use with Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deregisterDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public void deregisterDelegatedAdministrator(String xAmzTarget, DeregisterDelegatedAdministratorRequest deregisterDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deregisterDelegatedAdministratorWithHttpInfo(xAmzTarget, deregisterDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes the specified member Amazon Web Services account as a delegated administrator for the specified Amazon Web Services service.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Deregistering a delegated administrator can have unintended impacts on the functionality of the enabled Amazon Web Services service. See the documentation for the enabled service before you deregister a delegated administrator so that you understand any potential impacts.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column &lt;i&gt;Supports Delegated Administrator&lt;/i&gt; in the table at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services Services that you can use with Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deregisterDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deregisterDelegatedAdministratorWithHttpInfo(String xAmzTarget, DeregisterDelegatedAdministratorRequest deregisterDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deregisterDelegatedAdministratorValidateBeforeCall(xAmzTarget, deregisterDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified member Amazon Web Services account as a delegated administrator for the specified Amazon Web Services service.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Deregistering a delegated administrator can have unintended impacts on the functionality of the enabled Amazon Web Services service. See the documentation for the enabled service before you deregister a delegated administrator so that you understand any potential impacts.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column &lt;i&gt;Supports Delegated Administrator&lt;/i&gt; in the table at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services Services that you can use with Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deregisterDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterDelegatedAdministratorAsync(String xAmzTarget, DeregisterDelegatedAdministratorRequest deregisterDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterDelegatedAdministratorValidateBeforeCall(xAmzTarget, deregisterDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAccount
     * @param xAmzTarget  (required)
     * @param describeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAccountCall(String xAmzTarget, DescribeAccountRequest describeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAccountValidateBeforeCall(String xAmzTarget, DescribeAccountRequest describeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeAccount(Async)");
        }

        // verify the required parameter 'describeAccountRequest' is set
        if (describeAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'describeAccountRequest' when calling describeAccount(Async)");
        }

        return describeAccountCall(xAmzTarget, describeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves Organizations-related information about the specified account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountResponse describeAccount(String xAmzTarget, DescribeAccountRequest describeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAccountResponse> localVarResp = describeAccountWithHttpInfo(xAmzTarget, describeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves Organizations-related information about the specified account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountResponse> describeAccountWithHttpInfo(String xAmzTarget, DescribeAccountRequest describeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAccountValidateBeforeCall(xAmzTarget, describeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves Organizations-related information about the specified account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAccountAsync(String xAmzTarget, DescribeAccountRequest describeAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAccountValidateBeforeCall(xAmzTarget, describeAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeCreateAccountStatus
     * @param xAmzTarget  (required)
     * @param describeCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CreateAccountStatusNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCreateAccountStatusCall(String xAmzTarget, DescribeCreateAccountStatusRequest describeCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCreateAccountStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeCreateAccountStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeCreateAccountStatusValidateBeforeCall(String xAmzTarget, DescribeCreateAccountStatusRequest describeCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeCreateAccountStatus(Async)");
        }

        // verify the required parameter 'describeCreateAccountStatusRequest' is set
        if (describeCreateAccountStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'describeCreateAccountStatusRequest' when calling describeCreateAccountStatus(Async)");
        }

        return describeCreateAccountStatusCall(xAmzTarget, describeCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the current status of an asynchronous request to create an account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeCreateAccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CreateAccountStatusNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeCreateAccountStatusResponse describeCreateAccountStatus(String xAmzTarget, DescribeCreateAccountStatusRequest describeCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeCreateAccountStatusResponse> localVarResp = describeCreateAccountStatusWithHttpInfo(xAmzTarget, describeCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the current status of an asynchronous request to create an account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeCreateAccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CreateAccountStatusNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeCreateAccountStatusResponse> describeCreateAccountStatusWithHttpInfo(String xAmzTarget, DescribeCreateAccountStatusRequest describeCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeCreateAccountStatusValidateBeforeCall(xAmzTarget, describeCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeCreateAccountStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the current status of an asynchronous request to create an account.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CreateAccountStatusNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCreateAccountStatusAsync(String xAmzTarget, DescribeCreateAccountStatusRequest describeCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeCreateAccountStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeCreateAccountStatusValidateBeforeCall(xAmzTarget, describeCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeCreateAccountStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEffectivePolicy
     * @param xAmzTarget  (required)
     * @param describeEffectivePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EffectivePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEffectivePolicyCall(String xAmzTarget, DescribeEffectivePolicyRequest describeEffectivePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEffectivePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeEffectivePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEffectivePolicyValidateBeforeCall(String xAmzTarget, DescribeEffectivePolicyRequest describeEffectivePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEffectivePolicy(Async)");
        }

        // verify the required parameter 'describeEffectivePolicyRequest' is set
        if (describeEffectivePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'describeEffectivePolicyRequest' when calling describeEffectivePolicy(Async)");
        }

        return describeEffectivePolicyCall(xAmzTarget, describeEffectivePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the contents of the effective policy for specified policy type and account. The effective policy is the aggregation of any policies of the specified type that the account inherits, plus any policy of that type that is directly attached to the account.&lt;/p&gt; &lt;p&gt;This operation applies only to policy types &lt;i&gt;other&lt;/i&gt; than service control policies (SCPs).&lt;/p&gt; &lt;p&gt;For more information about policy inheritance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html\&quot;&gt;How Policy Inheritance Works&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeEffectivePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeEffectivePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EffectivePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEffectivePolicyResponse describeEffectivePolicy(String xAmzTarget, DescribeEffectivePolicyRequest describeEffectivePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeEffectivePolicyResponse> localVarResp = describeEffectivePolicyWithHttpInfo(xAmzTarget, describeEffectivePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the contents of the effective policy for specified policy type and account. The effective policy is the aggregation of any policies of the specified type that the account inherits, plus any policy of that type that is directly attached to the account.&lt;/p&gt; &lt;p&gt;This operation applies only to policy types &lt;i&gt;other&lt;/i&gt; than service control policies (SCPs).&lt;/p&gt; &lt;p&gt;For more information about policy inheritance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html\&quot;&gt;How Policy Inheritance Works&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeEffectivePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeEffectivePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EffectivePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEffectivePolicyResponse> describeEffectivePolicyWithHttpInfo(String xAmzTarget, DescribeEffectivePolicyRequest describeEffectivePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeEffectivePolicyValidateBeforeCall(xAmzTarget, describeEffectivePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeEffectivePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the contents of the effective policy for specified policy type and account. The effective policy is the aggregation of any policies of the specified type that the account inherits, plus any policy of that type that is directly attached to the account.&lt;/p&gt; &lt;p&gt;This operation applies only to policy types &lt;i&gt;other&lt;/i&gt; than service control policies (SCPs).&lt;/p&gt; &lt;p&gt;For more information about policy inheritance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html\&quot;&gt;How Policy Inheritance Works&lt;/a&gt; in the &lt;i&gt;Organizations User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeEffectivePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EffectivePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEffectivePolicyAsync(String xAmzTarget, DescribeEffectivePolicyRequest describeEffectivePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeEffectivePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEffectivePolicyValidateBeforeCall(xAmzTarget, describeEffectivePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeEffectivePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeHandshake
     * @param xAmzTarget  (required)
     * @param describeHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeHandshakeCall(String xAmzTarget, DescribeHandshakeRequest describeHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeHandshakeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeHandshake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeHandshakeValidateBeforeCall(String xAmzTarget, DescribeHandshakeRequest describeHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeHandshake(Async)");
        }

        // verify the required parameter 'describeHandshakeRequest' is set
        if (describeHandshakeRequest == null) {
            throw new ApiException("Missing the required parameter 'describeHandshakeRequest' when calling describeHandshake(Async)");
        }

        return describeHandshakeCall(xAmzTarget, describeHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves information about a previously requested handshake. The handshake ID comes from the response to the original &lt;a&gt;InviteAccountToOrganization&lt;/a&gt; operation that generated the handshake.&lt;/p&gt; &lt;p&gt;You can access handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, or &lt;code&gt;CANCELED&lt;/code&gt; for only 30 days after they change to that state. They&#39;re then deleted and no longer accessible.&lt;/p&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeHandshakeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeHandshakeResponse describeHandshake(String xAmzTarget, DescribeHandshakeRequest describeHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeHandshakeResponse> localVarResp = describeHandshakeWithHttpInfo(xAmzTarget, describeHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves information about a previously requested handshake. The handshake ID comes from the response to the original &lt;a&gt;InviteAccountToOrganization&lt;/a&gt; operation that generated the handshake.&lt;/p&gt; &lt;p&gt;You can access handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, or &lt;code&gt;CANCELED&lt;/code&gt; for only 30 days after they change to that state. They&#39;re then deleted and no longer accessible.&lt;/p&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeHandshakeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeHandshakeResponse> describeHandshakeWithHttpInfo(String xAmzTarget, DescribeHandshakeRequest describeHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeHandshakeValidateBeforeCall(xAmzTarget, describeHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeHandshakeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves information about a previously requested handshake. The handshake ID comes from the response to the original &lt;a&gt;InviteAccountToOrganization&lt;/a&gt; operation that generated the handshake.&lt;/p&gt; &lt;p&gt;You can access handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, or &lt;code&gt;CANCELED&lt;/code&gt; for only 30 days after they change to that state. They&#39;re then deleted and no longer accessible.&lt;/p&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeHandshakeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HandshakeNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeHandshakeAsync(String xAmzTarget, DescribeHandshakeRequest describeHandshakeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeHandshakeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeHandshakeValidateBeforeCall(xAmzTarget, describeHandshakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeHandshakeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeOrganization
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeOrganizationCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeOrganizationValidateBeforeCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeOrganization(Async)");
        }

        return describeOrganizationCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves information about the organization that the user&#39;s account belongs to.&lt;/p&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Even if a policy type is shown as available in the organization, you can disable it separately at the root level with &lt;a&gt;DisablePolicyType&lt;/a&gt;. Use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeOrganizationResponse describeOrganization(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeOrganizationResponse> localVarResp = describeOrganizationWithHttpInfo(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves information about the organization that the user&#39;s account belongs to.&lt;/p&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Even if a policy type is shown as available in the organization, you can disable it separately at the root level with &lt;a&gt;DisablePolicyType&lt;/a&gt;. Use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeOrganizationResponse> describeOrganizationWithHttpInfo(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeOrganizationValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves information about the organization that the user&#39;s account belongs to.&lt;/p&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Even if a policy type is shown as available in the organization, you can disable it separately at the root level with &lt;a&gt;DisablePolicyType&lt;/a&gt;. Use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeOrganizationAsync(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeOrganizationValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeOrganizationalUnit
     * @param xAmzTarget  (required)
     * @param describeOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeOrganizationalUnitCall(String xAmzTarget, DescribeOrganizationalUnitRequest describeOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeOrganizationalUnitRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeOrganizationalUnit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeOrganizationalUnitValidateBeforeCall(String xAmzTarget, DescribeOrganizationalUnitRequest describeOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeOrganizationalUnit(Async)");
        }

        // verify the required parameter 'describeOrganizationalUnitRequest' is set
        if (describeOrganizationalUnitRequest == null) {
            throw new ApiException("Missing the required parameter 'describeOrganizationalUnitRequest' when calling describeOrganizationalUnit(Async)");
        }

        return describeOrganizationalUnitCall(xAmzTarget, describeOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves information about an organizational unit (OU).&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeOrganizationalUnitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeOrganizationalUnitResponse describeOrganizationalUnit(String xAmzTarget, DescribeOrganizationalUnitRequest describeOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeOrganizationalUnitResponse> localVarResp = describeOrganizationalUnitWithHttpInfo(xAmzTarget, describeOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves information about an organizational unit (OU).&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeOrganizationalUnitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeOrganizationalUnitResponse> describeOrganizationalUnitWithHttpInfo(String xAmzTarget, DescribeOrganizationalUnitRequest describeOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeOrganizationalUnitValidateBeforeCall(xAmzTarget, describeOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeOrganizationalUnitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves information about an organizational unit (OU).&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeOrganizationalUnitAsync(String xAmzTarget, DescribeOrganizationalUnitRequest describeOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeOrganizationalUnitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeOrganizationalUnitValidateBeforeCall(xAmzTarget, describeOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeOrganizationalUnitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describePolicy
     * @param xAmzTarget  (required)
     * @param describePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePolicyCall(String xAmzTarget, DescribePolicyRequest describePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describePolicyValidateBeforeCall(String xAmzTarget, DescribePolicyRequest describePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describePolicy(Async)");
        }

        // verify the required parameter 'describePolicyRequest' is set
        if (describePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'describePolicyRequest' when calling describePolicy(Async)");
        }

        return describePolicyCall(xAmzTarget, describePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves information about a policy.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public DescribePolicyResponse describePolicy(String xAmzTarget, DescribePolicyRequest describePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribePolicyResponse> localVarResp = describePolicyWithHttpInfo(xAmzTarget, describePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves information about a policy.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePolicyResponse> describePolicyWithHttpInfo(String xAmzTarget, DescribePolicyRequest describePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describePolicyValidateBeforeCall(xAmzTarget, describePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves information about a policy.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePolicyAsync(String xAmzTarget, DescribePolicyRequest describePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describePolicyValidateBeforeCall(xAmzTarget, describePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeResourcePolicy
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeResourcePolicyCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DescribeResourcePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeResourcePolicyValidateBeforeCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeResourcePolicy(Async)");
        }

        return describeResourcePolicyCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves information about a resource policy.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeResourcePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeResourcePolicyResponse describeResourcePolicy(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeResourcePolicyResponse> localVarResp = describeResourcePolicyWithHttpInfo(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves information about a resource policy.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeResourcePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeResourcePolicyResponse> describeResourcePolicyWithHttpInfo(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeResourcePolicyValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeResourcePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves information about a resource policy.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeResourcePolicyAsync(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeResourcePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeResourcePolicyValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeResourcePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachPolicy
     * @param xAmzTarget  (required)
     * @param detachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotAttachedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachPolicyCall(String xAmzTarget, DetachPolicyRequest detachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DetachPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachPolicyValidateBeforeCall(String xAmzTarget, DetachPolicyRequest detachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling detachPolicy(Async)");
        }

        // verify the required parameter 'detachPolicyRequest' is set
        if (detachPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'detachPolicyRequest' when calling detachPolicy(Async)");
        }

        return detachPolicyCall(xAmzTarget, detachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detaches a policy from a target root, organizational unit (OU), or account.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the policy being detached is a service control policy (SCP), the changes to permissions for Identity and Access Management (IAM) users and roles in affected accounts are immediate.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Every root, OU, and account must have at least one SCP attached. If you want to replace the default &lt;code&gt;FullAWSAccess&lt;/code&gt; policy with an SCP that limits the permissions that can be delegated, you must attach the replacement SCP before you can remove the default SCP. This is the authorization strategy of an \&quot;&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_allowlist\&quot;&gt;allow list&lt;/a&gt;\&quot;. If you instead attach a second SCP and leave the &lt;code&gt;FullAWSAccess&lt;/code&gt; SCP still attached, and specify &lt;code&gt;\&quot;Effect\&quot;: \&quot;Deny\&quot;&lt;/code&gt; in the second SCP to override the &lt;code&gt;\&quot;Effect\&quot;: \&quot;Allow\&quot;&lt;/code&gt; in the &lt;code&gt;FullAWSAccess&lt;/code&gt; policy (or any other attached SCP), you&#39;re using the authorization strategy of a \&quot;&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_denylist\&quot;&gt;deny list&lt;/a&gt;\&quot;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param detachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotAttachedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public void detachPolicy(String xAmzTarget, DetachPolicyRequest detachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        detachPolicyWithHttpInfo(xAmzTarget, detachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Detaches a policy from a target root, organizational unit (OU), or account.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the policy being detached is a service control policy (SCP), the changes to permissions for Identity and Access Management (IAM) users and roles in affected accounts are immediate.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Every root, OU, and account must have at least one SCP attached. If you want to replace the default &lt;code&gt;FullAWSAccess&lt;/code&gt; policy with an SCP that limits the permissions that can be delegated, you must attach the replacement SCP before you can remove the default SCP. This is the authorization strategy of an \&quot;&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_allowlist\&quot;&gt;allow list&lt;/a&gt;\&quot;. If you instead attach a second SCP and leave the &lt;code&gt;FullAWSAccess&lt;/code&gt; SCP still attached, and specify &lt;code&gt;\&quot;Effect\&quot;: \&quot;Deny\&quot;&lt;/code&gt; in the second SCP to override the &lt;code&gt;\&quot;Effect\&quot;: \&quot;Allow\&quot;&lt;/code&gt; in the &lt;code&gt;FullAWSAccess&lt;/code&gt; policy (or any other attached SCP), you&#39;re using the authorization strategy of a \&quot;&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_denylist\&quot;&gt;deny list&lt;/a&gt;\&quot;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param detachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotAttachedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> detachPolicyWithHttpInfo(String xAmzTarget, DetachPolicyRequest detachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detachPolicyValidateBeforeCall(xAmzTarget, detachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detaches a policy from a target root, organizational unit (OU), or account.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the policy being detached is a service control policy (SCP), the changes to permissions for Identity and Access Management (IAM) users and roles in affected accounts are immediate.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Every root, OU, and account must have at least one SCP attached. If you want to replace the default &lt;code&gt;FullAWSAccess&lt;/code&gt; policy with an SCP that limits the permissions that can be delegated, you must attach the replacement SCP before you can remove the default SCP. This is the authorization strategy of an \&quot;&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_allowlist\&quot;&gt;allow list&lt;/a&gt;\&quot;. If you instead attach a second SCP and leave the &lt;code&gt;FullAWSAccess&lt;/code&gt; SCP still attached, and specify &lt;code&gt;\&quot;Effect\&quot;: \&quot;Deny\&quot;&lt;/code&gt; in the second SCP to override the &lt;code&gt;\&quot;Effect\&quot;: \&quot;Allow\&quot;&lt;/code&gt; in the &lt;code&gt;FullAWSAccess&lt;/code&gt; policy (or any other attached SCP), you&#39;re using the authorization strategy of a \&quot;&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_denylist\&quot;&gt;deny list&lt;/a&gt;\&quot;.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param detachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyNotAttachedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachPolicyAsync(String xAmzTarget, DetachPolicyRequest detachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachPolicyValidateBeforeCall(xAmzTarget, detachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableAWSServiceAccess
     * @param xAmzTarget  (required)
     * @param disableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAWSServiceAccessCall(String xAmzTarget, DisableAWSServiceAccessRequest disableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableAWSServiceAccessRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DisableAWSServiceAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableAWSServiceAccessValidateBeforeCall(String xAmzTarget, DisableAWSServiceAccessRequest disableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disableAWSServiceAccess(Async)");
        }

        // verify the required parameter 'disableAWSServiceAccessRequest' is set
        if (disableAWSServiceAccessRequest == null) {
            throw new ApiException("Missing the required parameter 'disableAWSServiceAccessRequest' when calling disableAWSServiceAccess(Async)");
        }

        return disableAWSServiceAccessCall(xAmzTarget, disableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disables the integration of an Amazon Web Services service (the service that is specified by &lt;code&gt;ServicePrincipal&lt;/code&gt;) with Organizations. When you disable integration, the specified service no longer can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html\&quot;&gt;service-linked role&lt;/a&gt; in &lt;i&gt;new&lt;/i&gt; accounts in your organization. This means the service can&#39;t perform operations on your behalf on any new accounts in your organization. The service can still perform operations in older accounts until the service completes its clean-up from Organizations.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We &lt;b&gt; &lt;i&gt;strongly recommend&lt;/i&gt; &lt;/b&gt; that you don&#39;t use this command to disable integration between Organizations and the specified Amazon Web Services service. Instead, use the console or commands that are provided by the specified service. This lets the trusted service perform any required initialization when enabling trusted access, such as creating any required resources and any required clean up of resources when disabling trusted access. &lt;/p&gt; &lt;p&gt;For information about how to disable trusted service access to your organization using the trusted service, see the &lt;b&gt;Learn more&lt;/b&gt; link under the &lt;b&gt;Supports Trusted Access&lt;/b&gt; column at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services services that you can use with Organizations&lt;/a&gt;. on this page.&lt;/p&gt; &lt;p&gt;If you disable access by using this command, it causes the following actions to occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The service can no longer create a service-linked role in the accounts in your organization. This means that the service can&#39;t perform operations on your behalf on any new accounts in your organization. The service can still perform operations in older accounts until the service completes its clean-up from Organizations. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The service can no longer perform tasks in the member accounts in the organization, unless those operations are explicitly permitted by the IAM policies that are attached to your roles. This includes any data aggregation from the member accounts to the management account, or to a delegated administrator account, where relevant.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some services detect this and clean up any remaining data or resources related to the integration, while other services stop accessing the organization but leave any historical data and configuration in place to support a possible re-enabling of the integration.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using the other service&#39;s console or commands to disable the integration ensures that the other service is aware that it can clean up any resources that are required only for the integration. How the service cleans up its resources in the organization&#39;s accounts depends on that service. For more information, see the documentation for the other Amazon Web Services service. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;After you perform the &lt;code&gt;DisableAWSServiceAccess&lt;/code&gt; operation, the specified service can no longer perform operations in your organization&#39;s accounts &lt;/p&gt; &lt;p&gt;For more information about integrating other services with Organizations, including the list of services that work with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public void disableAWSServiceAccess(String xAmzTarget, DisableAWSServiceAccessRequest disableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        disableAWSServiceAccessWithHttpInfo(xAmzTarget, disableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Disables the integration of an Amazon Web Services service (the service that is specified by &lt;code&gt;ServicePrincipal&lt;/code&gt;) with Organizations. When you disable integration, the specified service no longer can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html\&quot;&gt;service-linked role&lt;/a&gt; in &lt;i&gt;new&lt;/i&gt; accounts in your organization. This means the service can&#39;t perform operations on your behalf on any new accounts in your organization. The service can still perform operations in older accounts until the service completes its clean-up from Organizations.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We &lt;b&gt; &lt;i&gt;strongly recommend&lt;/i&gt; &lt;/b&gt; that you don&#39;t use this command to disable integration between Organizations and the specified Amazon Web Services service. Instead, use the console or commands that are provided by the specified service. This lets the trusted service perform any required initialization when enabling trusted access, such as creating any required resources and any required clean up of resources when disabling trusted access. &lt;/p&gt; &lt;p&gt;For information about how to disable trusted service access to your organization using the trusted service, see the &lt;b&gt;Learn more&lt;/b&gt; link under the &lt;b&gt;Supports Trusted Access&lt;/b&gt; column at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services services that you can use with Organizations&lt;/a&gt;. on this page.&lt;/p&gt; &lt;p&gt;If you disable access by using this command, it causes the following actions to occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The service can no longer create a service-linked role in the accounts in your organization. This means that the service can&#39;t perform operations on your behalf on any new accounts in your organization. The service can still perform operations in older accounts until the service completes its clean-up from Organizations. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The service can no longer perform tasks in the member accounts in the organization, unless those operations are explicitly permitted by the IAM policies that are attached to your roles. This includes any data aggregation from the member accounts to the management account, or to a delegated administrator account, where relevant.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some services detect this and clean up any remaining data or resources related to the integration, while other services stop accessing the organization but leave any historical data and configuration in place to support a possible re-enabling of the integration.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using the other service&#39;s console or commands to disable the integration ensures that the other service is aware that it can clean up any resources that are required only for the integration. How the service cleans up its resources in the organization&#39;s accounts depends on that service. For more information, see the documentation for the other Amazon Web Services service. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;After you perform the &lt;code&gt;DisableAWSServiceAccess&lt;/code&gt; operation, the specified service can no longer perform operations in your organization&#39;s accounts &lt;/p&gt; &lt;p&gt;For more information about integrating other services with Organizations, including the list of services that work with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disableAWSServiceAccessWithHttpInfo(String xAmzTarget, DisableAWSServiceAccessRequest disableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableAWSServiceAccessValidateBeforeCall(xAmzTarget, disableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disables the integration of an Amazon Web Services service (the service that is specified by &lt;code&gt;ServicePrincipal&lt;/code&gt;) with Organizations. When you disable integration, the specified service no longer can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html\&quot;&gt;service-linked role&lt;/a&gt; in &lt;i&gt;new&lt;/i&gt; accounts in your organization. This means the service can&#39;t perform operations on your behalf on any new accounts in your organization. The service can still perform operations in older accounts until the service completes its clean-up from Organizations.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We &lt;b&gt; &lt;i&gt;strongly recommend&lt;/i&gt; &lt;/b&gt; that you don&#39;t use this command to disable integration between Organizations and the specified Amazon Web Services service. Instead, use the console or commands that are provided by the specified service. This lets the trusted service perform any required initialization when enabling trusted access, such as creating any required resources and any required clean up of resources when disabling trusted access. &lt;/p&gt; &lt;p&gt;For information about how to disable trusted service access to your organization using the trusted service, see the &lt;b&gt;Learn more&lt;/b&gt; link under the &lt;b&gt;Supports Trusted Access&lt;/b&gt; column at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services services that you can use with Organizations&lt;/a&gt;. on this page.&lt;/p&gt; &lt;p&gt;If you disable access by using this command, it causes the following actions to occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The service can no longer create a service-linked role in the accounts in your organization. This means that the service can&#39;t perform operations on your behalf on any new accounts in your organization. The service can still perform operations in older accounts until the service completes its clean-up from Organizations. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The service can no longer perform tasks in the member accounts in the organization, unless those operations are explicitly permitted by the IAM policies that are attached to your roles. This includes any data aggregation from the member accounts to the management account, or to a delegated administrator account, where relevant.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some services detect this and clean up any remaining data or resources related to the integration, while other services stop accessing the organization but leave any historical data and configuration in place to support a possible re-enabling of the integration.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using the other service&#39;s console or commands to disable the integration ensures that the other service is aware that it can clean up any resources that are required only for the integration. How the service cleans up its resources in the organization&#39;s accounts depends on that service. For more information, see the documentation for the other Amazon Web Services service. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;After you perform the &lt;code&gt;DisableAWSServiceAccess&lt;/code&gt; operation, the specified service can no longer perform operations in your organization&#39;s accounts &lt;/p&gt; &lt;p&gt;For more information about integrating other services with Organizations, including the list of services that work with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAWSServiceAccessAsync(String xAmzTarget, DisableAWSServiceAccessRequest disableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableAWSServiceAccessValidateBeforeCall(xAmzTarget, disableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disablePolicyType
     * @param xAmzTarget  (required)
     * @param disablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disablePolicyTypeCall(String xAmzTarget, DisablePolicyTypeRequest disablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disablePolicyTypeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.DisablePolicyType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disablePolicyTypeValidateBeforeCall(String xAmzTarget, DisablePolicyTypeRequest disablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disablePolicyType(Async)");
        }

        // verify the required parameter 'disablePolicyTypeRequest' is set
        if (disablePolicyTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'disablePolicyTypeRequest' when calling disablePolicyType(Async)");
        }

        return disablePolicyTypeCall(xAmzTarget, disablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disables an organizational policy type in a root. A policy of a certain type can be attached to entities in a root only if that type is enabled in the root. After you perform this operation, you no longer can attach policies of the specified type to that root or to any organizational unit (OU) or account in that root. You can undo this by using the &lt;a&gt;EnablePolicyType&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;This is an asynchronous request that Amazon Web Services performs in the background. If you disable a policy type for a root, it still appears enabled for the organization if &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features&lt;/a&gt; are enabled for the organization. Amazon Web Services recommends that you first use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root, and then use this operation.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt; To view the status of available policy types in the organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisablePolicyTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public DisablePolicyTypeResponse disablePolicyType(String xAmzTarget, DisablePolicyTypeRequest disablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisablePolicyTypeResponse> localVarResp = disablePolicyTypeWithHttpInfo(xAmzTarget, disablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Disables an organizational policy type in a root. A policy of a certain type can be attached to entities in a root only if that type is enabled in the root. After you perform this operation, you no longer can attach policies of the specified type to that root or to any organizational unit (OU) or account in that root. You can undo this by using the &lt;a&gt;EnablePolicyType&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;This is an asynchronous request that Amazon Web Services performs in the background. If you disable a policy type for a root, it still appears enabled for the organization if &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features&lt;/a&gt; are enabled for the organization. Amazon Web Services recommends that you first use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root, and then use this operation.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt; To view the status of available policy types in the organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisablePolicyTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisablePolicyTypeResponse> disablePolicyTypeWithHttpInfo(String xAmzTarget, DisablePolicyTypeRequest disablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disablePolicyTypeValidateBeforeCall(xAmzTarget, disablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisablePolicyTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disables an organizational policy type in a root. A policy of a certain type can be attached to entities in a root only if that type is enabled in the root. After you perform this operation, you no longer can attach policies of the specified type to that root or to any organizational unit (OU) or account in that root. You can undo this by using the &lt;a&gt;EnablePolicyType&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;This is an asynchronous request that Amazon Web Services performs in the background. If you disable a policy type for a root, it still appears enabled for the organization if &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features&lt;/a&gt; are enabled for the organization. Amazon Web Services recommends that you first use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root, and then use this operation.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt; To view the status of available policy types in the organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disablePolicyTypeAsync(String xAmzTarget, DisablePolicyTypeRequest disablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisablePolicyTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disablePolicyTypeValidateBeforeCall(xAmzTarget, disablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisablePolicyTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableAWSServiceAccess
     * @param xAmzTarget  (required)
     * @param enableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableAWSServiceAccessCall(String xAmzTarget, EnableAWSServiceAccessRequest enableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableAWSServiceAccessRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.EnableAWSServiceAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableAWSServiceAccessValidateBeforeCall(String xAmzTarget, EnableAWSServiceAccessRequest enableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableAWSServiceAccess(Async)");
        }

        // verify the required parameter 'enableAWSServiceAccessRequest' is set
        if (enableAWSServiceAccessRequest == null) {
            throw new ApiException("Missing the required parameter 'enableAWSServiceAccessRequest' when calling enableAWSServiceAccess(Async)");
        }

        return enableAWSServiceAccessCall(xAmzTarget, enableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables the integration of an Amazon Web Services service (the service that is specified by &lt;code&gt;ServicePrincipal&lt;/code&gt;) with Organizations. When you enable integration, you allow the specified service to create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html\&quot;&gt;service-linked role&lt;/a&gt; in all the accounts in your organization. This allows the service to perform operations on your behalf in your organization and its accounts.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We recommend that you enable integration between Organizations and the specified Amazon Web Services service by using the console or commands that are provided by the specified service. Doing so ensures that the service is aware that it can create the resources that are required for the integration. How the service creates those resources in the organization&#39;s accounts depends on that service. For more information, see the documentation for the other Amazon Web Services service.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about enabling services to integrate with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account and only if the organization has &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;enabled all features&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public void enableAWSServiceAccess(String xAmzTarget, EnableAWSServiceAccessRequest enableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        enableAWSServiceAccessWithHttpInfo(xAmzTarget, enableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Enables the integration of an Amazon Web Services service (the service that is specified by &lt;code&gt;ServicePrincipal&lt;/code&gt;) with Organizations. When you enable integration, you allow the specified service to create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html\&quot;&gt;service-linked role&lt;/a&gt; in all the accounts in your organization. This allows the service to perform operations on your behalf in your organization and its accounts.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We recommend that you enable integration between Organizations and the specified Amazon Web Services service by using the console or commands that are provided by the specified service. Doing so ensures that the service is aware that it can create the resources that are required for the integration. How the service creates those resources in the organization&#39;s accounts depends on that service. For more information, see the documentation for the other Amazon Web Services service.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about enabling services to integrate with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account and only if the organization has &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;enabled all features&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enableAWSServiceAccessWithHttpInfo(String xAmzTarget, EnableAWSServiceAccessRequest enableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableAWSServiceAccessValidateBeforeCall(xAmzTarget, enableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables the integration of an Amazon Web Services service (the service that is specified by &lt;code&gt;ServicePrincipal&lt;/code&gt;) with Organizations. When you enable integration, you allow the specified service to create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html\&quot;&gt;service-linked role&lt;/a&gt; in all the accounts in your organization. This allows the service to perform operations on your behalf in your organization and its accounts.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We recommend that you enable integration between Organizations and the specified Amazon Web Services service by using the console or commands that are provided by the specified service. Doing so ensures that the service is aware that it can create the resources that are required for the integration. How the service creates those resources in the organization&#39;s accounts depends on that service. For more information, see the documentation for the other Amazon Web Services service.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about enabling services to integrate with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account and only if the organization has &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;enabled all features&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableAWSServiceAccessRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableAWSServiceAccessAsync(String xAmzTarget, EnableAWSServiceAccessRequest enableAWSServiceAccessRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableAWSServiceAccessValidateBeforeCall(xAmzTarget, enableAWSServiceAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableAllFeatures
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableAllFeaturesCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.EnableAllFeatures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableAllFeaturesValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableAllFeatures(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling enableAllFeatures(Async)");
        }

        return enableAllFeaturesCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables all features in an organization. This enables the use of organization policies that can restrict the services and actions that can be called in each account. Until you enable all features, you have access only to consolidated billing, and you can&#39;t use any of the advanced account administration features that Organizations supports. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling All Features in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation is required only for organizations that were created explicitly with only the consolidated billing features enabled. Calling this operation sends a handshake to every invited account in the organization. The feature set change can be finalized and the additional features enabled only after all administrators in the invited accounts approve the change by accepting the handshake.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;After you enable all features, you can separately enable or disable individual policy types in a root using &lt;a&gt;EnablePolicyType&lt;/a&gt; and &lt;a&gt;DisablePolicyType&lt;/a&gt;. To see the status of policy types in a root, use &lt;a&gt;ListRoots&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After all invited member accounts accept the handshake, you finalize the feature set change by accepting the handshake that contains &lt;code&gt;\&quot;Action\&quot;: \&quot;ENABLE_ALL_FEATURES\&quot;&lt;/code&gt;. This completes the change.&lt;/p&gt; &lt;p&gt;After you enable all features in your organization, the management account in the organization can apply policies on all member accounts. These policies can restrict what users and even administrators in those accounts can do. The management account can apply policies that prevent accounts from leaving the organization. Ensure that your account administrators are aware of this.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EnableAllFeaturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public EnableAllFeaturesResponse enableAllFeatures(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EnableAllFeaturesResponse> localVarResp = enableAllFeaturesWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables all features in an organization. This enables the use of organization policies that can restrict the services and actions that can be called in each account. Until you enable all features, you have access only to consolidated billing, and you can&#39;t use any of the advanced account administration features that Organizations supports. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling All Features in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation is required only for organizations that were created explicitly with only the consolidated billing features enabled. Calling this operation sends a handshake to every invited account in the organization. The feature set change can be finalized and the additional features enabled only after all administrators in the invited accounts approve the change by accepting the handshake.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;After you enable all features, you can separately enable or disable individual policy types in a root using &lt;a&gt;EnablePolicyType&lt;/a&gt; and &lt;a&gt;DisablePolicyType&lt;/a&gt;. To see the status of policy types in a root, use &lt;a&gt;ListRoots&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After all invited member accounts accept the handshake, you finalize the feature set change by accepting the handshake that contains &lt;code&gt;\&quot;Action\&quot;: \&quot;ENABLE_ALL_FEATURES\&quot;&lt;/code&gt;. This completes the change.&lt;/p&gt; &lt;p&gt;After you enable all features in your organization, the management account in the organization can apply policies on all member accounts. These policies can restrict what users and even administrators in those accounts can do. The management account can apply policies that prevent accounts from leaving the organization. Ensure that your account administrators are aware of this.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EnableAllFeaturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableAllFeaturesResponse> enableAllFeaturesWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableAllFeaturesValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EnableAllFeaturesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables all features in an organization. This enables the use of organization policies that can restrict the services and actions that can be called in each account. Until you enable all features, you have access only to consolidated billing, and you can&#39;t use any of the advanced account administration features that Organizations supports. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;Enabling All Features in Your Organization&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation is required only for organizations that were created explicitly with only the consolidated billing features enabled. Calling this operation sends a handshake to every invited account in the organization. The feature set change can be finalized and the additional features enabled only after all administrators in the invited accounts approve the change by accepting the handshake.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;After you enable all features, you can separately enable or disable individual policy types in a root using &lt;a&gt;EnablePolicyType&lt;/a&gt; and &lt;a&gt;DisablePolicyType&lt;/a&gt;. To see the status of policy types in a root, use &lt;a&gt;ListRoots&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;After all invited member accounts accept the handshake, you finalize the feature set change by accepting the handshake that contains &lt;code&gt;\&quot;Action\&quot;: \&quot;ENABLE_ALL_FEATURES\&quot;&lt;/code&gt;. This completes the change.&lt;/p&gt; &lt;p&gt;After you enable all features in your organization, the management account in the organization can apply policies on all member accounts. These policies can restrict what users and even administrators in those accounts can do. The management account can apply policies that prevent accounts from leaving the organization. Ensure that your account administrators are aware of this.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableAllFeaturesAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EnableAllFeaturesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableAllFeaturesValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EnableAllFeaturesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enablePolicyType
     * @param xAmzTarget  (required)
     * @param enablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeAlreadyEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enablePolicyTypeCall(String xAmzTarget, EnablePolicyTypeRequest enablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enablePolicyTypeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.EnablePolicyType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enablePolicyTypeValidateBeforeCall(String xAmzTarget, EnablePolicyTypeRequest enablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enablePolicyType(Async)");
        }

        // verify the required parameter 'enablePolicyTypeRequest' is set
        if (enablePolicyTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'enablePolicyTypeRequest' when calling enablePolicyType(Async)");
        }

        return enablePolicyTypeCall(xAmzTarget, enablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables a policy type in a root. After you enable a policy type in a root, you can attach policies of that type to the root, any organizational unit (OU), or account in that root. You can undo this by using the &lt;a&gt;DisablePolicyType&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;This is an asynchronous request that Amazon Web Services performs in the background. Amazon Web Services recommends that you first use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root, and then use this operation.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;You can enable a policy type in a root only if that policy type is available in the organization. To view the status of available policy types in the organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EnablePolicyTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeAlreadyEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public EnablePolicyTypeResponse enablePolicyType(String xAmzTarget, EnablePolicyTypeRequest enablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EnablePolicyTypeResponse> localVarResp = enablePolicyTypeWithHttpInfo(xAmzTarget, enablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables a policy type in a root. After you enable a policy type in a root, you can attach policies of that type to the root, any organizational unit (OU), or account in that root. You can undo this by using the &lt;a&gt;DisablePolicyType&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;This is an asynchronous request that Amazon Web Services performs in the background. Amazon Web Services recommends that you first use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root, and then use this operation.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;You can enable a policy type in a root only if that policy type is available in the organization. To view the status of available policy types in the organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EnablePolicyTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeAlreadyEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnablePolicyTypeResponse> enablePolicyTypeWithHttpInfo(String xAmzTarget, EnablePolicyTypeRequest enablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enablePolicyTypeValidateBeforeCall(xAmzTarget, enablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EnablePolicyTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables a policy type in a root. After you enable a policy type in a root, you can attach policies of that type to the root, any organizational unit (OU), or account in that root. You can undo this by using the &lt;a&gt;DisablePolicyType&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;This is an asynchronous request that Amazon Web Services performs in the background. Amazon Web Services recommends that you first use &lt;a&gt;ListRoots&lt;/a&gt; to see the status of policy types for a specified root, and then use this operation.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt; &lt;p&gt;You can enable a policy type in a root only if that policy type is available in the organization. To view the status of available policy types in the organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enablePolicyTypeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PolicyTypeAlreadyEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RootNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PolicyTypeNotAvailableForOrganizationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enablePolicyTypeAsync(String xAmzTarget, EnablePolicyTypeRequest enablePolicyTypeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EnablePolicyTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enablePolicyTypeValidateBeforeCall(xAmzTarget, enablePolicyTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EnablePolicyTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteAccountToOrganization
     * @param xAmzTarget  (required)
     * @param inviteAccountToOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountOwnerNotVerifiedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DuplicateHandshakeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteAccountToOrganizationCall(String xAmzTarget, InviteAccountToOrganizationRequest inviteAccountToOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteAccountToOrganizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.InviteAccountToOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteAccountToOrganizationValidateBeforeCall(String xAmzTarget, InviteAccountToOrganizationRequest inviteAccountToOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling inviteAccountToOrganization(Async)");
        }

        // verify the required parameter 'inviteAccountToOrganizationRequest' is set
        if (inviteAccountToOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'inviteAccountToOrganizationRequest' when calling inviteAccountToOrganization(Async)");
        }

        return inviteAccountToOrganizationCall(xAmzTarget, inviteAccountToOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends an invitation to another account to join your organization as a member account. Organizations sends email on your behalf to the email address that is associated with the other account&#39;s owner. The invitation is implemented as a &lt;a&gt;Handshake&lt;/a&gt; whose details are in the response.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can invite Amazon Web Services accounts only from the same seller as the management account. For example, if your organization&#39;s management account was created by Amazon Internet Services Pvt. Ltd (AISPL), an Amazon Web Services seller in India, you can invite only other AISPL accounts to your organization. You can&#39;t combine accounts from AISPL and Amazon Web Services or from any other Amazon Web Services seller. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html\&quot;&gt;Consolidated Billing in India&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you receive an exception that indicates that you exceeded your account limits for the organization or that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists after an hour, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param inviteAccountToOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return InviteAccountToOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountOwnerNotVerifiedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DuplicateHandshakeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public InviteAccountToOrganizationResponse inviteAccountToOrganization(String xAmzTarget, InviteAccountToOrganizationRequest inviteAccountToOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<InviteAccountToOrganizationResponse> localVarResp = inviteAccountToOrganizationWithHttpInfo(xAmzTarget, inviteAccountToOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends an invitation to another account to join your organization as a member account. Organizations sends email on your behalf to the email address that is associated with the other account&#39;s owner. The invitation is implemented as a &lt;a&gt;Handshake&lt;/a&gt; whose details are in the response.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can invite Amazon Web Services accounts only from the same seller as the management account. For example, if your organization&#39;s management account was created by Amazon Internet Services Pvt. Ltd (AISPL), an Amazon Web Services seller in India, you can invite only other AISPL accounts to your organization. You can&#39;t combine accounts from AISPL and Amazon Web Services or from any other Amazon Web Services seller. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html\&quot;&gt;Consolidated Billing in India&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you receive an exception that indicates that you exceeded your account limits for the organization or that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists after an hour, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param inviteAccountToOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;InviteAccountToOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountOwnerNotVerifiedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DuplicateHandshakeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InviteAccountToOrganizationResponse> inviteAccountToOrganizationWithHttpInfo(String xAmzTarget, InviteAccountToOrganizationRequest inviteAccountToOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = inviteAccountToOrganizationValidateBeforeCall(xAmzTarget, inviteAccountToOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<InviteAccountToOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends an invitation to another account to join your organization as a member account. Organizations sends email on your behalf to the email address that is associated with the other account&#39;s owner. The invitation is implemented as a &lt;a&gt;Handshake&lt;/a&gt; whose details are in the response.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can invite Amazon Web Services accounts only from the same seller as the management account. For example, if your organization&#39;s management account was created by Amazon Internet Services Pvt. Ltd (AISPL), an Amazon Web Services seller in India, you can invite only other AISPL accounts to your organization. You can&#39;t combine accounts from AISPL and Amazon Web Services or from any other Amazon Web Services seller. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html\&quot;&gt;Consolidated Billing in India&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you receive an exception that indicates that you exceeded your account limits for the organization or that the operation failed because your organization is still initializing, wait one hour and then try again. If the error persists after an hour, contact &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/\&quot;&gt;Amazon Web Services Support&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;p&gt;If the request includes tags, then the requester must have the &lt;code&gt;organizations:TagResource&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param inviteAccountToOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountOwnerNotVerifiedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> HandshakeConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DuplicateHandshakeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FinalizingOrganizationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteAccountToOrganizationAsync(String xAmzTarget, InviteAccountToOrganizationRequest inviteAccountToOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<InviteAccountToOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteAccountToOrganizationValidateBeforeCall(xAmzTarget, inviteAccountToOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<InviteAccountToOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveOrganization
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveOrganizationCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.LeaveOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveOrganizationValidateBeforeCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling leaveOrganization(Async)");
        }

        return leaveOrganizationCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a member account from its parent organization. This version of the operation is performed by the account that wants to leave. To remove a member account as a user in the management account, use &lt;a&gt;RemoveAccountFromOrganization&lt;/a&gt; instead.&lt;/p&gt; &lt;p&gt;This operation can be called only from a member account in the organization.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The management account in an organization with all features enabled can set service control policies (SCPs) that can restrict what administrators of member accounts can do. This includes preventing them from successfully calling &lt;code&gt;LeaveOrganization&lt;/code&gt; and leaving the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can leave an organization as a member account only if the account is configured with the information required to operate as a standalone account. When you create an account in an organization using the Organizations console, API, or CLI commands, the information required of standalone accounts is &lt;i&gt;not&lt;/i&gt; automatically collected. For each account that you want to make standalone, you must perform the following steps. If any of the steps are already completed for this account, that step doesn&#39;t appear.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Choose a support plan&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide and verify the required contact information&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide a current payment method&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon Web Services uses the payment method to charge for any billable (not free tier) Amazon Web Services activity that occurs while the account isn&#39;t attached to an organization. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization when all required account information has not yet been provided&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account that you want to leave must not be a delegated administrator account for any Amazon Web Services service enabled for your organization. If the account is a delegated administrator, you must first change the delegated administrator account to another account that is remaining in the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can leave an organization only after you enable IAM user access to billing in your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate\&quot;&gt;Activating Access to the Billing and Cost Management Console&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing and Cost Management User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;After the account leaves the organization, all tags that were attached to the account object in the organization are deleted. Amazon Web Services accounts outside of an organization do not support tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A newly created account has a waiting period before it can be removed from its organization. If you get an error that indicates that a wait period is required, then try again in a few days.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void leaveOrganization(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        leaveOrganizationWithHttpInfo(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes a member account from its parent organization. This version of the operation is performed by the account that wants to leave. To remove a member account as a user in the management account, use &lt;a&gt;RemoveAccountFromOrganization&lt;/a&gt; instead.&lt;/p&gt; &lt;p&gt;This operation can be called only from a member account in the organization.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The management account in an organization with all features enabled can set service control policies (SCPs) that can restrict what administrators of member accounts can do. This includes preventing them from successfully calling &lt;code&gt;LeaveOrganization&lt;/code&gt; and leaving the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can leave an organization as a member account only if the account is configured with the information required to operate as a standalone account. When you create an account in an organization using the Organizations console, API, or CLI commands, the information required of standalone accounts is &lt;i&gt;not&lt;/i&gt; automatically collected. For each account that you want to make standalone, you must perform the following steps. If any of the steps are already completed for this account, that step doesn&#39;t appear.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Choose a support plan&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide and verify the required contact information&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide a current payment method&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon Web Services uses the payment method to charge for any billable (not free tier) Amazon Web Services activity that occurs while the account isn&#39;t attached to an organization. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization when all required account information has not yet been provided&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account that you want to leave must not be a delegated administrator account for any Amazon Web Services service enabled for your organization. If the account is a delegated administrator, you must first change the delegated administrator account to another account that is remaining in the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can leave an organization only after you enable IAM user access to billing in your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate\&quot;&gt;Activating Access to the Billing and Cost Management Console&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing and Cost Management User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;After the account leaves the organization, all tags that were attached to the account object in the organization are deleted. Amazon Web Services accounts outside of an organization do not support tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A newly created account has a waiting period before it can be removed from its organization. If you get an error that indicates that a wait period is required, then try again in a few days.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaveOrganizationWithHttpInfo(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = leaveOrganizationValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a member account from its parent organization. This version of the operation is performed by the account that wants to leave. To remove a member account as a user in the management account, use &lt;a&gt;RemoveAccountFromOrganization&lt;/a&gt; instead.&lt;/p&gt; &lt;p&gt;This operation can be called only from a member account in the organization.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The management account in an organization with all features enabled can set service control policies (SCPs) that can restrict what administrators of member accounts can do. This includes preventing them from successfully calling &lt;code&gt;LeaveOrganization&lt;/code&gt; and leaving the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can leave an organization as a member account only if the account is configured with the information required to operate as a standalone account. When you create an account in an organization using the Organizations console, API, or CLI commands, the information required of standalone accounts is &lt;i&gt;not&lt;/i&gt; automatically collected. For each account that you want to make standalone, you must perform the following steps. If any of the steps are already completed for this account, that step doesn&#39;t appear.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Choose a support plan&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide and verify the required contact information&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide a current payment method&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon Web Services uses the payment method to charge for any billable (not free tier) Amazon Web Services activity that occurs while the account isn&#39;t attached to an organization. Follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization when all required account information has not yet been provided&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account that you want to leave must not be a delegated administrator account for any Amazon Web Services service enabled for your organization. If the account is a delegated administrator, you must first change the delegated administrator account to another account that is remaining in the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can leave an organization only after you enable IAM user access to billing in your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate\&quot;&gt;Activating Access to the Billing and Cost Management Console&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing and Cost Management User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;After the account leaves the organization, all tags that were attached to the account object in the organization are deleted. Amazon Web Services accounts outside of an organization do not support tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A newly created account has a waiting period before it can be removed from its organization. If you get an error that indicates that a wait period is required, then try again in a few days.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveOrganizationAsync(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveOrganizationValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAWSServiceAccessForOrganization
     * @param xAmzTarget  (required)
     * @param listAWSServiceAccessForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAWSServiceAccessForOrganizationCall(String xAmzTarget, ListAWSServiceAccessForOrganizationRequest listAWSServiceAccessForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAWSServiceAccessForOrganizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListAWSServiceAccessForOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAWSServiceAccessForOrganizationValidateBeforeCall(String xAmzTarget, ListAWSServiceAccessForOrganizationRequest listAWSServiceAccessForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAWSServiceAccessForOrganization(Async)");
        }

        // verify the required parameter 'listAWSServiceAccessForOrganizationRequest' is set
        if (listAWSServiceAccessForOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'listAWSServiceAccessForOrganizationRequest' when calling listAWSServiceAccessForOrganization(Async)");
        }

        return listAWSServiceAccessForOrganizationCall(xAmzTarget, listAWSServiceAccessForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the Amazon Web Services services that you enabled to integrate with your organization. After a service on this list creates the resources that it requires for the integration, it can perform operations on your organization and its accounts.&lt;/p&gt; &lt;p&gt;For more information about integrating other services with Organizations, including the list of services that currently work with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAWSServiceAccessForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAWSServiceAccessForOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListAWSServiceAccessForOrganizationResponse listAWSServiceAccessForOrganization(String xAmzTarget, ListAWSServiceAccessForOrganizationRequest listAWSServiceAccessForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAWSServiceAccessForOrganizationResponse> localVarResp = listAWSServiceAccessForOrganizationWithHttpInfo(xAmzTarget, listAWSServiceAccessForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the Amazon Web Services services that you enabled to integrate with your organization. After a service on this list creates the resources that it requires for the integration, it can perform operations on your organization and its accounts.&lt;/p&gt; &lt;p&gt;For more information about integrating other services with Organizations, including the list of services that currently work with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAWSServiceAccessForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAWSServiceAccessForOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAWSServiceAccessForOrganizationResponse> listAWSServiceAccessForOrganizationWithHttpInfo(String xAmzTarget, ListAWSServiceAccessForOrganizationRequest listAWSServiceAccessForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAWSServiceAccessForOrganizationValidateBeforeCall(xAmzTarget, listAWSServiceAccessForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAWSServiceAccessForOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the Amazon Web Services services that you enabled to integrate with your organization. After a service on this list creates the resources that it requires for the integration, it can perform operations on your organization and its accounts.&lt;/p&gt; &lt;p&gt;For more information about integrating other services with Organizations, including the list of services that currently work with Organizations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html\&quot;&gt;Integrating Organizations with Other Amazon Web Services Services&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAWSServiceAccessForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAWSServiceAccessForOrganizationAsync(String xAmzTarget, ListAWSServiceAccessForOrganizationRequest listAWSServiceAccessForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAWSServiceAccessForOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAWSServiceAccessForOrganizationValidateBeforeCall(xAmzTarget, listAWSServiceAccessForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAWSServiceAccessForOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccounts
     * @param xAmzTarget  (required)
     * @param listAccountsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsCall(String xAmzTarget, ListAccountsRequest listAccountsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAccountsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsValidateBeforeCall(String xAmzTarget, ListAccountsRequest listAccountsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAccounts(Async)");
        }

        // verify the required parameter 'listAccountsRequest' is set
        if (listAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'listAccountsRequest' when calling listAccounts(Async)");
        }

        return listAccountsCall(xAmzTarget, listAccountsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the accounts in the organization. To request only the accounts in a specified root or organizational unit (OU), use the &lt;a&gt;ListAccountsForParent&lt;/a&gt; operation instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAccountsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountsResponse listAccounts(String xAmzTarget, ListAccountsRequest listAccountsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAccountsResponse> localVarResp = listAccountsWithHttpInfo(xAmzTarget, listAccountsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the accounts in the organization. To request only the accounts in a specified root or organizational unit (OU), use the &lt;a&gt;ListAccountsForParent&lt;/a&gt; operation instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAccountsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountsResponse> listAccountsWithHttpInfo(String xAmzTarget, ListAccountsRequest listAccountsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(xAmzTarget, listAccountsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the accounts in the organization. To request only the accounts in a specified root or organizational unit (OU), use the &lt;a&gt;ListAccountsForParent&lt;/a&gt; operation instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAccountsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsAsync(String xAmzTarget, ListAccountsRequest listAccountsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(xAmzTarget, listAccountsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountsForParent
     * @param xAmzTarget  (required)
     * @param listAccountsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsForParentCall(String xAmzTarget, ListAccountsForParentRequest listAccountsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAccountsForParentRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListAccountsForParent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsForParentValidateBeforeCall(String xAmzTarget, ListAccountsForParentRequest listAccountsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAccountsForParent(Async)");
        }

        // verify the required parameter 'listAccountsForParentRequest' is set
        if (listAccountsForParentRequest == null) {
            throw new ApiException("Missing the required parameter 'listAccountsForParentRequest' when calling listAccountsForParent(Async)");
        }

        return listAccountsForParentCall(xAmzTarget, listAccountsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the accounts in an organization that are contained by the specified target root or organizational unit (OU). If you specify the root, you get a list of all the accounts that aren&#39;t in any OU. If you specify an OU, you get a list of all the accounts in only that OU and not in any child OUs. To get a list of all accounts in the organization, use the &lt;a&gt;ListAccounts&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAccountsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAccountsForParentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountsForParentResponse listAccountsForParent(String xAmzTarget, ListAccountsForParentRequest listAccountsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAccountsForParentResponse> localVarResp = listAccountsForParentWithHttpInfo(xAmzTarget, listAccountsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the accounts in an organization that are contained by the specified target root or organizational unit (OU). If you specify the root, you get a list of all the accounts that aren&#39;t in any OU. If you specify an OU, you get a list of all the accounts in only that OU and not in any child OUs. To get a list of all accounts in the organization, use the &lt;a&gt;ListAccounts&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAccountsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAccountsForParentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountsForParentResponse> listAccountsForParentWithHttpInfo(String xAmzTarget, ListAccountsForParentRequest listAccountsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAccountsForParentValidateBeforeCall(xAmzTarget, listAccountsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAccountsForParentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the accounts in an organization that are contained by the specified target root or organizational unit (OU). If you specify the root, you get a list of all the accounts that aren&#39;t in any OU. If you specify an OU, you get a list of all the accounts in only that OU and not in any child OUs. To get a list of all accounts in the organization, use the &lt;a&gt;ListAccounts&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listAccountsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsForParentAsync(String xAmzTarget, ListAccountsForParentRequest listAccountsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAccountsForParentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsForParentValidateBeforeCall(xAmzTarget, listAccountsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAccountsForParentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChildren
     * @param xAmzTarget  (required)
     * @param listChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChildrenCall(String xAmzTarget, ListChildrenRequest listChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listChildrenRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListChildren";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChildrenValidateBeforeCall(String xAmzTarget, ListChildrenRequest listChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listChildren(Async)");
        }

        // verify the required parameter 'listChildrenRequest' is set
        if (listChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'listChildrenRequest' when calling listChildren(Async)");
        }

        return listChildrenCall(xAmzTarget, listChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all of the organizational units (OUs) or accounts that are contained in the specified parent OU or root. This operation, along with &lt;a&gt;ListParents&lt;/a&gt; enables you to traverse the tree structure that makes up this root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListChildrenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListChildrenResponse listChildren(String xAmzTarget, ListChildrenRequest listChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListChildrenResponse> localVarResp = listChildrenWithHttpInfo(xAmzTarget, listChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all of the organizational units (OUs) or accounts that are contained in the specified parent OU or root. This operation, along with &lt;a&gt;ListParents&lt;/a&gt; enables you to traverse the tree structure that makes up this root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListChildrenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChildrenResponse> listChildrenWithHttpInfo(String xAmzTarget, ListChildrenRequest listChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listChildrenValidateBeforeCall(xAmzTarget, listChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListChildrenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all of the organizational units (OUs) or accounts that are contained in the specified parent OU or root. This operation, along with &lt;a&gt;ListParents&lt;/a&gt; enables you to traverse the tree structure that makes up this root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChildrenAsync(String xAmzTarget, ListChildrenRequest listChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListChildrenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChildrenValidateBeforeCall(xAmzTarget, listChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListChildrenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCreateAccountStatus
     * @param xAmzTarget  (required)
     * @param listCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCreateAccountStatusCall(String xAmzTarget, ListCreateAccountStatusRequest listCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listCreateAccountStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListCreateAccountStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCreateAccountStatusValidateBeforeCall(String xAmzTarget, ListCreateAccountStatusRequest listCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listCreateAccountStatus(Async)");
        }

        // verify the required parameter 'listCreateAccountStatusRequest' is set
        if (listCreateAccountStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'listCreateAccountStatusRequest' when calling listCreateAccountStatus(Async)");
        }

        return listCreateAccountStatusCall(xAmzTarget, listCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the account creation requests that match the specified status that is currently being tracked for the organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListCreateAccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListCreateAccountStatusResponse listCreateAccountStatus(String xAmzTarget, ListCreateAccountStatusRequest listCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListCreateAccountStatusResponse> localVarResp = listCreateAccountStatusWithHttpInfo(xAmzTarget, listCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the account creation requests that match the specified status that is currently being tracked for the organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListCreateAccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCreateAccountStatusResponse> listCreateAccountStatusWithHttpInfo(String xAmzTarget, ListCreateAccountStatusRequest listCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listCreateAccountStatusValidateBeforeCall(xAmzTarget, listCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListCreateAccountStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the account creation requests that match the specified status that is currently being tracked for the organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listCreateAccountStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCreateAccountStatusAsync(String xAmzTarget, ListCreateAccountStatusRequest listCreateAccountStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListCreateAccountStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCreateAccountStatusValidateBeforeCall(xAmzTarget, listCreateAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListCreateAccountStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDelegatedAdministrators
     * @param xAmzTarget  (required)
     * @param listDelegatedAdministratorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDelegatedAdministratorsCall(String xAmzTarget, ListDelegatedAdministratorsRequest listDelegatedAdministratorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDelegatedAdministratorsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListDelegatedAdministrators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDelegatedAdministratorsValidateBeforeCall(String xAmzTarget, ListDelegatedAdministratorsRequest listDelegatedAdministratorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listDelegatedAdministrators(Async)");
        }

        // verify the required parameter 'listDelegatedAdministratorsRequest' is set
        if (listDelegatedAdministratorsRequest == null) {
            throw new ApiException("Missing the required parameter 'listDelegatedAdministratorsRequest' when calling listDelegatedAdministrators(Async)");
        }

        return listDelegatedAdministratorsCall(xAmzTarget, listDelegatedAdministratorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Web Services accounts that are designated as delegated administrators in this organization.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listDelegatedAdministratorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListDelegatedAdministratorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListDelegatedAdministratorsResponse listDelegatedAdministrators(String xAmzTarget, ListDelegatedAdministratorsRequest listDelegatedAdministratorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListDelegatedAdministratorsResponse> localVarResp = listDelegatedAdministratorsWithHttpInfo(xAmzTarget, listDelegatedAdministratorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Web Services accounts that are designated as delegated administrators in this organization.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listDelegatedAdministratorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListDelegatedAdministratorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDelegatedAdministratorsResponse> listDelegatedAdministratorsWithHttpInfo(String xAmzTarget, ListDelegatedAdministratorsRequest listDelegatedAdministratorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listDelegatedAdministratorsValidateBeforeCall(xAmzTarget, listDelegatedAdministratorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDelegatedAdministratorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the Amazon Web Services accounts that are designated as delegated administrators in this organization.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listDelegatedAdministratorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDelegatedAdministratorsAsync(String xAmzTarget, ListDelegatedAdministratorsRequest listDelegatedAdministratorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListDelegatedAdministratorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDelegatedAdministratorsValidateBeforeCall(xAmzTarget, listDelegatedAdministratorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDelegatedAdministratorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDelegatedServicesForAccount
     * @param xAmzTarget  (required)
     * @param listDelegatedServicesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDelegatedServicesForAccountCall(String xAmzTarget, ListDelegatedServicesForAccountRequest listDelegatedServicesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDelegatedServicesForAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListDelegatedServicesForAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDelegatedServicesForAccountValidateBeforeCall(String xAmzTarget, ListDelegatedServicesForAccountRequest listDelegatedServicesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listDelegatedServicesForAccount(Async)");
        }

        // verify the required parameter 'listDelegatedServicesForAccountRequest' is set
        if (listDelegatedServicesForAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'listDelegatedServicesForAccountRequest' when calling listDelegatedServicesForAccount(Async)");
        }

        return listDelegatedServicesForAccountCall(xAmzTarget, listDelegatedServicesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;List the Amazon Web Services services for which the specified account is a delegated administrator.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listDelegatedServicesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListDelegatedServicesForAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListDelegatedServicesForAccountResponse listDelegatedServicesForAccount(String xAmzTarget, ListDelegatedServicesForAccountRequest listDelegatedServicesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListDelegatedServicesForAccountResponse> localVarResp = listDelegatedServicesForAccountWithHttpInfo(xAmzTarget, listDelegatedServicesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List the Amazon Web Services services for which the specified account is a delegated administrator.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listDelegatedServicesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListDelegatedServicesForAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDelegatedServicesForAccountResponse> listDelegatedServicesForAccountWithHttpInfo(String xAmzTarget, ListDelegatedServicesForAccountRequest listDelegatedServicesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listDelegatedServicesForAccountValidateBeforeCall(xAmzTarget, listDelegatedServicesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDelegatedServicesForAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List the Amazon Web Services services for which the specified account is a delegated administrator.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listDelegatedServicesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDelegatedServicesForAccountAsync(String xAmzTarget, ListDelegatedServicesForAccountRequest listDelegatedServicesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListDelegatedServicesForAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDelegatedServicesForAccountValidateBeforeCall(xAmzTarget, listDelegatedServicesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDelegatedServicesForAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHandshakesForAccount
     * @param xAmzTarget  (required)
     * @param listHandshakesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHandshakesForAccountCall(String xAmzTarget, ListHandshakesForAccountRequest listHandshakesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listHandshakesForAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListHandshakesForAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHandshakesForAccountValidateBeforeCall(String xAmzTarget, ListHandshakesForAccountRequest listHandshakesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listHandshakesForAccount(Async)");
        }

        // verify the required parameter 'listHandshakesForAccountRequest' is set
        if (listHandshakesForAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'listHandshakesForAccountRequest' when calling listHandshakesForAccount(Async)");
        }

        return listHandshakesForAccountCall(xAmzTarget, listHandshakesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the current handshakes that are associated with the account of the requesting user.&lt;/p&gt; &lt;p&gt;Handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; appear in the results of this API for only 30 days after changing to that state. After that, they&#39;re deleted and no longer accessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listHandshakesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListHandshakesForAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListHandshakesForAccountResponse listHandshakesForAccount(String xAmzTarget, ListHandshakesForAccountRequest listHandshakesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListHandshakesForAccountResponse> localVarResp = listHandshakesForAccountWithHttpInfo(xAmzTarget, listHandshakesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the current handshakes that are associated with the account of the requesting user.&lt;/p&gt; &lt;p&gt;Handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; appear in the results of this API for only 30 days after changing to that state. After that, they&#39;re deleted and no longer accessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listHandshakesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListHandshakesForAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHandshakesForAccountResponse> listHandshakesForAccountWithHttpInfo(String xAmzTarget, ListHandshakesForAccountRequest listHandshakesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listHandshakesForAccountValidateBeforeCall(xAmzTarget, listHandshakesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListHandshakesForAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the current handshakes that are associated with the account of the requesting user.&lt;/p&gt; &lt;p&gt;Handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; appear in the results of this API for only 30 days after changing to that state. After that, they&#39;re deleted and no longer accessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called from any account in the organization.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listHandshakesForAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHandshakesForAccountAsync(String xAmzTarget, ListHandshakesForAccountRequest listHandshakesForAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListHandshakesForAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHandshakesForAccountValidateBeforeCall(xAmzTarget, listHandshakesForAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListHandshakesForAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHandshakesForOrganization
     * @param xAmzTarget  (required)
     * @param listHandshakesForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHandshakesForOrganizationCall(String xAmzTarget, ListHandshakesForOrganizationRequest listHandshakesForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listHandshakesForOrganizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListHandshakesForOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHandshakesForOrganizationValidateBeforeCall(String xAmzTarget, ListHandshakesForOrganizationRequest listHandshakesForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listHandshakesForOrganization(Async)");
        }

        // verify the required parameter 'listHandshakesForOrganizationRequest' is set
        if (listHandshakesForOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'listHandshakesForOrganizationRequest' when calling listHandshakesForOrganization(Async)");
        }

        return listHandshakesForOrganizationCall(xAmzTarget, listHandshakesForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the handshakes that are associated with the organization that the requesting user is part of. The &lt;code&gt;ListHandshakesForOrganization&lt;/code&gt; operation returns a list of handshake structures. Each structure contains details and status about a handshake.&lt;/p&gt; &lt;p&gt;Handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; appear in the results of this API for only 30 days after changing to that state. After that, they&#39;re deleted and no longer accessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listHandshakesForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListHandshakesForOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListHandshakesForOrganizationResponse listHandshakesForOrganization(String xAmzTarget, ListHandshakesForOrganizationRequest listHandshakesForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListHandshakesForOrganizationResponse> localVarResp = listHandshakesForOrganizationWithHttpInfo(xAmzTarget, listHandshakesForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the handshakes that are associated with the organization that the requesting user is part of. The &lt;code&gt;ListHandshakesForOrganization&lt;/code&gt; operation returns a list of handshake structures. Each structure contains details and status about a handshake.&lt;/p&gt; &lt;p&gt;Handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; appear in the results of this API for only 30 days after changing to that state. After that, they&#39;re deleted and no longer accessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listHandshakesForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListHandshakesForOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHandshakesForOrganizationResponse> listHandshakesForOrganizationWithHttpInfo(String xAmzTarget, ListHandshakesForOrganizationRequest listHandshakesForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listHandshakesForOrganizationValidateBeforeCall(xAmzTarget, listHandshakesForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListHandshakesForOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the handshakes that are associated with the organization that the requesting user is part of. The &lt;code&gt;ListHandshakesForOrganization&lt;/code&gt; operation returns a list of handshake structures. Each structure contains details and status about a handshake.&lt;/p&gt; &lt;p&gt;Handshakes that are &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; appear in the results of this API for only 30 days after changing to that state. After that, they&#39;re deleted and no longer accessible.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listHandshakesForOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHandshakesForOrganizationAsync(String xAmzTarget, ListHandshakesForOrganizationRequest listHandshakesForOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListHandshakesForOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHandshakesForOrganizationValidateBeforeCall(xAmzTarget, listHandshakesForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListHandshakesForOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizationalUnitsForParent
     * @param xAmzTarget  (required)
     * @param listOrganizationalUnitsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationalUnitsForParentCall(String xAmzTarget, ListOrganizationalUnitsForParentRequest listOrganizationalUnitsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listOrganizationalUnitsForParentRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListOrganizationalUnitsForParent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationalUnitsForParentValidateBeforeCall(String xAmzTarget, ListOrganizationalUnitsForParentRequest listOrganizationalUnitsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listOrganizationalUnitsForParent(Async)");
        }

        // verify the required parameter 'listOrganizationalUnitsForParentRequest' is set
        if (listOrganizationalUnitsForParentRequest == null) {
            throw new ApiException("Missing the required parameter 'listOrganizationalUnitsForParentRequest' when calling listOrganizationalUnitsForParent(Async)");
        }

        return listOrganizationalUnitsForParentCall(xAmzTarget, listOrganizationalUnitsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the organizational units (OUs) in a parent organizational unit or root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listOrganizationalUnitsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListOrganizationalUnitsForParentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListOrganizationalUnitsForParentResponse listOrganizationalUnitsForParent(String xAmzTarget, ListOrganizationalUnitsForParentRequest listOrganizationalUnitsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListOrganizationalUnitsForParentResponse> localVarResp = listOrganizationalUnitsForParentWithHttpInfo(xAmzTarget, listOrganizationalUnitsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the organizational units (OUs) in a parent organizational unit or root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listOrganizationalUnitsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListOrganizationalUnitsForParentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOrganizationalUnitsForParentResponse> listOrganizationalUnitsForParentWithHttpInfo(String xAmzTarget, ListOrganizationalUnitsForParentRequest listOrganizationalUnitsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationalUnitsForParentValidateBeforeCall(xAmzTarget, listOrganizationalUnitsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListOrganizationalUnitsForParentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the organizational units (OUs) in a parent organizational unit or root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listOrganizationalUnitsForParentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationalUnitsForParentAsync(String xAmzTarget, ListOrganizationalUnitsForParentRequest listOrganizationalUnitsForParentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListOrganizationalUnitsForParentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationalUnitsForParentValidateBeforeCall(xAmzTarget, listOrganizationalUnitsForParentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListOrganizationalUnitsForParentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listParents
     * @param xAmzTarget  (required)
     * @param listParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChildNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listParentsCall(String xAmzTarget, ListParentsRequest listParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listParentsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListParents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listParentsValidateBeforeCall(String xAmzTarget, ListParentsRequest listParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listParents(Async)");
        }

        // verify the required parameter 'listParentsRequest' is set
        if (listParentsRequest == null) {
            throw new ApiException("Missing the required parameter 'listParentsRequest' when calling listParents(Async)");
        }

        return listParentsCall(xAmzTarget, listParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the root or organizational units (OUs) that serve as the immediate parent of the specified child OU or account. This operation, along with &lt;a&gt;ListChildren&lt;/a&gt; enables you to traverse the tree structure that makes up this root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the current release, a child can have only a single parent.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListParentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChildNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListParentsResponse listParents(String xAmzTarget, ListParentsRequest listParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListParentsResponse> localVarResp = listParentsWithHttpInfo(xAmzTarget, listParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the root or organizational units (OUs) that serve as the immediate parent of the specified child OU or account. This operation, along with &lt;a&gt;ListChildren&lt;/a&gt; enables you to traverse the tree structure that makes up this root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the current release, a child can have only a single parent.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListParentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChildNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListParentsResponse> listParentsWithHttpInfo(String xAmzTarget, ListParentsRequest listParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listParentsValidateBeforeCall(xAmzTarget, listParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListParentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the root or organizational units (OUs) that serve as the immediate parent of the specified child OU or account. This operation, along with &lt;a&gt;ListChildren&lt;/a&gt; enables you to traverse the tree structure that makes up this root.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the current release, a child can have only a single parent.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChildNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listParentsAsync(String xAmzTarget, ListParentsRequest listParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListParentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listParentsValidateBeforeCall(xAmzTarget, listParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListParentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPolicies
     * @param xAmzTarget  (required)
     * @param listPoliciesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesCall(String xAmzTarget, ListPoliciesRequest listPoliciesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPoliciesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPoliciesValidateBeforeCall(String xAmzTarget, ListPoliciesRequest listPoliciesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listPolicies(Async)");
        }

        // verify the required parameter 'listPoliciesRequest' is set
        if (listPoliciesRequest == null) {
            throw new ApiException("Missing the required parameter 'listPoliciesRequest' when calling listPolicies(Async)");
        }

        return listPoliciesCall(xAmzTarget, listPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the list of all policies in an organization of a specified type.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listPoliciesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListPoliciesResponse listPolicies(String xAmzTarget, ListPoliciesRequest listPoliciesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListPoliciesResponse> localVarResp = listPoliciesWithHttpInfo(xAmzTarget, listPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the list of all policies in an organization of a specified type.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listPoliciesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPoliciesResponse> listPoliciesWithHttpInfo(String xAmzTarget, ListPoliciesRequest listPoliciesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(xAmzTarget, listPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the list of all policies in an organization of a specified type.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listPoliciesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesAsync(String xAmzTarget, ListPoliciesRequest listPoliciesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListPoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(xAmzTarget, listPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPoliciesForTarget
     * @param xAmzTarget  (required)
     * @param listPoliciesForTargetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesForTargetCall(String xAmzTarget, ListPoliciesForTargetRequest listPoliciesForTargetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPoliciesForTargetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListPoliciesForTarget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPoliciesForTargetValidateBeforeCall(String xAmzTarget, ListPoliciesForTargetRequest listPoliciesForTargetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listPoliciesForTarget(Async)");
        }

        // verify the required parameter 'listPoliciesForTargetRequest' is set
        if (listPoliciesForTargetRequest == null) {
            throw new ApiException("Missing the required parameter 'listPoliciesForTargetRequest' when calling listPoliciesForTarget(Async)");
        }

        return listPoliciesForTargetCall(xAmzTarget, listPoliciesForTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the policies that are directly attached to the specified target root, organizational unit (OU), or account. You must specify the policy type that you want included in the returned list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listPoliciesForTargetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPoliciesForTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListPoliciesForTargetResponse listPoliciesForTarget(String xAmzTarget, ListPoliciesForTargetRequest listPoliciesForTargetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListPoliciesForTargetResponse> localVarResp = listPoliciesForTargetWithHttpInfo(xAmzTarget, listPoliciesForTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the policies that are directly attached to the specified target root, organizational unit (OU), or account. You must specify the policy type that you want included in the returned list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listPoliciesForTargetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPoliciesForTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPoliciesForTargetResponse> listPoliciesForTargetWithHttpInfo(String xAmzTarget, ListPoliciesForTargetRequest listPoliciesForTargetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesForTargetValidateBeforeCall(xAmzTarget, listPoliciesForTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPoliciesForTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the policies that are directly attached to the specified target root, organizational unit (OU), or account. You must specify the policy type that you want included in the returned list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listPoliciesForTargetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesForTargetAsync(String xAmzTarget, ListPoliciesForTargetRequest listPoliciesForTargetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListPoliciesForTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPoliciesForTargetValidateBeforeCall(xAmzTarget, listPoliciesForTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPoliciesForTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoots
     * @param xAmzTarget  (required)
     * @param listRootsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRootsCall(String xAmzTarget, ListRootsRequest listRootsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRootsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListRoots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRootsValidateBeforeCall(String xAmzTarget, ListRootsRequest listRootsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRoots(Async)");
        }

        // verify the required parameter 'listRootsRequest' is set
        if (listRootsRequest == null) {
            throw new ApiException("Missing the required parameter 'listRootsRequest' when calling listRoots(Async)");
        }

        return listRootsCall(xAmzTarget, listRootsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the roots that are defined in the current organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Policy types can be enabled and disabled in roots. This is distinct from whether they&#39;re available in the organization. When you enable all features, you make policy types available for use in that organization. Individual policy types can then be enabled and disabled in a root. To see the availability of a policy type in an organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listRootsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListRootsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListRootsResponse listRoots(String xAmzTarget, ListRootsRequest listRootsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListRootsResponse> localVarResp = listRootsWithHttpInfo(xAmzTarget, listRootsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the roots that are defined in the current organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Policy types can be enabled and disabled in roots. This is distinct from whether they&#39;re available in the organization. When you enable all features, you make policy types available for use in that organization. Individual policy types can then be enabled and disabled in a root. To see the availability of a policy type in an organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listRootsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListRootsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRootsResponse> listRootsWithHttpInfo(String xAmzTarget, ListRootsRequest listRootsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listRootsValidateBeforeCall(xAmzTarget, listRootsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListRootsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the roots that are defined in the current organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Policy types can be enabled and disabled in roots. This is distinct from whether they&#39;re available in the organization. When you enable all features, you make policy types available for use in that organization. Individual policy types can then be enabled and disabled in a root. To see the availability of a policy type in an organization, use &lt;a&gt;DescribeOrganization&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listRootsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRootsAsync(String xAmzTarget, ListRootsRequest listRootsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListRootsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRootsValidateBeforeCall(xAmzTarget, listRootsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListRootsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists tags that are attached to the specified resource.&lt;/p&gt; &lt;p&gt;You can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists tags that are attached to the specified resource.&lt;/p&gt; &lt;p&gt;You can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists tags that are attached to the specified resource.&lt;/p&gt; &lt;p&gt;You can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTargetsForPolicy
     * @param xAmzTarget  (required)
     * @param listTargetsForPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTargetsForPolicyCall(String xAmzTarget, ListTargetsForPolicyRequest listTargetsForPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTargetsForPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.ListTargetsForPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTargetsForPolicyValidateBeforeCall(String xAmzTarget, ListTargetsForPolicyRequest listTargetsForPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTargetsForPolicy(Async)");
        }

        // verify the required parameter 'listTargetsForPolicyRequest' is set
        if (listTargetsForPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'listTargetsForPolicyRequest' when calling listTargetsForPolicy(Async)");
        }

        return listTargetsForPolicyCall(xAmzTarget, listTargetsForPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the roots, organizational units (OUs), and accounts that the specified policy is attached to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTargetsForPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTargetsForPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ListTargetsForPolicyResponse listTargetsForPolicy(String xAmzTarget, ListTargetsForPolicyRequest listTargetsForPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTargetsForPolicyResponse> localVarResp = listTargetsForPolicyWithHttpInfo(xAmzTarget, listTargetsForPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the roots, organizational units (OUs), and accounts that the specified policy is attached to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTargetsForPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTargetsForPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTargetsForPolicyResponse> listTargetsForPolicyWithHttpInfo(String xAmzTarget, ListTargetsForPolicyRequest listTargetsForPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTargetsForPolicyValidateBeforeCall(xAmzTarget, listTargetsForPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTargetsForPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the roots, organizational units (OUs), and accounts that the specified policy is attached to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Always check the &lt;code&gt;NextToken&lt;/code&gt; response parameter for a &lt;code&gt;null&lt;/code&gt; value when calling a &lt;code&gt;List*&lt;/code&gt; operation. These operations can occasionally return an empty set of results even when there are more results available. The &lt;code&gt;NextToken&lt;/code&gt; response parameter value is &lt;code&gt;null&lt;/code&gt; &lt;i&gt;only&lt;/i&gt; when there are no more results to display.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account or by a member account that is a delegated administrator for an Amazon Web Services service.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTargetsForPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTargetsForPolicyAsync(String xAmzTarget, ListTargetsForPolicyRequest listTargetsForPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTargetsForPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTargetsForPolicyValidateBeforeCall(xAmzTarget, listTargetsForPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTargetsForPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveAccount
     * @param xAmzTarget  (required)
     * @param moveAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SourceParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DestinationParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveAccountCall(String xAmzTarget, MoveAccountRequest moveAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.MoveAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveAccountValidateBeforeCall(String xAmzTarget, MoveAccountRequest moveAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling moveAccount(Async)");
        }

        // verify the required parameter 'moveAccountRequest' is set
        if (moveAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'moveAccountRequest' when calling moveAccount(Async)");
        }

        return moveAccountCall(xAmzTarget, moveAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Moves an account from its current source parent root or organizational unit (OU) to the specified destination parent root or OU.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param moveAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SourceParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DestinationParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
     </table>
     */
    public void moveAccount(String xAmzTarget, MoveAccountRequest moveAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        moveAccountWithHttpInfo(xAmzTarget, moveAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Moves an account from its current source parent root or organizational unit (OU) to the specified destination parent root or OU.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param moveAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SourceParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DestinationParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moveAccountWithHttpInfo(String xAmzTarget, MoveAccountRequest moveAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = moveAccountValidateBeforeCall(xAmzTarget, moveAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Moves an account from its current source parent root or organizational unit (OU) to the specified destination parent root or OU.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param moveAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SourceParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DestinationParentNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicateAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveAccountAsync(String xAmzTarget, MoveAccountRequest moveAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveAccountValidateBeforeCall(xAmzTarget, moveAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putResourcePolicy
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putResourcePolicyCall(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putResourcePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.PutResourcePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putResourcePolicyValidateBeforeCall(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putResourcePolicy(Async)");
        }

        // verify the required parameter 'putResourcePolicyRequest' is set
        if (putResourcePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy(Async)");
        }

        return putResourcePolicyCall(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a resource policy.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutResourcePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
     </table>
     */
    public PutResourcePolicyResponse putResourcePolicy(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutResourcePolicyResponse> localVarResp = putResourcePolicyWithHttpInfo(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a resource policy.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutResourcePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutResourcePolicyResponse> putResourcePolicyWithHttpInfo(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putResourcePolicyValidateBeforeCall(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutResourcePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a resource policy.&lt;/p&gt; &lt;p&gt;You can only call this operation from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putResourcePolicyAsync(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutResourcePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putResourcePolicyValidateBeforeCall(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutResourcePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerDelegatedAdministrator
     * @param xAmzTarget  (required)
     * @param registerDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDelegatedAdministratorCall(String xAmzTarget, RegisterDelegatedAdministratorRequest registerDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerDelegatedAdministratorRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.RegisterDelegatedAdministrator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDelegatedAdministratorValidateBeforeCall(String xAmzTarget, RegisterDelegatedAdministratorRequest registerDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling registerDelegatedAdministrator(Async)");
        }

        // verify the required parameter 'registerDelegatedAdministratorRequest' is set
        if (registerDelegatedAdministratorRequest == null) {
            throw new ApiException("Missing the required parameter 'registerDelegatedAdministratorRequest' when calling registerDelegatedAdministrator(Async)");
        }

        return registerDelegatedAdministratorCall(xAmzTarget, registerDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables the specified member account to administer the Organizations features of the specified Amazon Web Services service. It grants read-only access to Organizations service data. The account still requires IAM permissions to access and administer the Amazon Web Services service.&lt;/p&gt; &lt;p&gt;You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column &lt;i&gt;Supports Delegated Administrator&lt;/i&gt; in the table at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services Services that you can use with Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public void registerDelegatedAdministrator(String xAmzTarget, RegisterDelegatedAdministratorRequest registerDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        registerDelegatedAdministratorWithHttpInfo(xAmzTarget, registerDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Enables the specified member account to administer the Organizations features of the specified Amazon Web Services service. It grants read-only access to Organizations service data. The account still requires IAM permissions to access and administer the Amazon Web Services service.&lt;/p&gt; &lt;p&gt;You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column &lt;i&gt;Supports Delegated Administrator&lt;/i&gt; in the table at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services Services that you can use with Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerDelegatedAdministratorWithHttpInfo(String xAmzTarget, RegisterDelegatedAdministratorRequest registerDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = registerDelegatedAdministratorValidateBeforeCall(xAmzTarget, registerDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables the specified member account to administer the Organizations features of the specified Amazon Web Services service. It grants read-only access to Organizations service data. The account still requires IAM permissions to access and administer the Amazon Web Services service.&lt;/p&gt; &lt;p&gt;You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column &lt;i&gt;Supports Delegated Administrator&lt;/i&gt; in the table at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html\&quot;&gt;Amazon Web Services Services that you can use with Organizations&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param registerDelegatedAdministratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountAlreadyRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDelegatedAdministratorAsync(String xAmzTarget, RegisterDelegatedAdministratorRequest registerDelegatedAdministratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDelegatedAdministratorValidateBeforeCall(xAmzTarget, registerDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAccountFromOrganization
     * @param xAmzTarget  (required)
     * @param removeAccountFromOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccountFromOrganizationCall(String xAmzTarget, RemoveAccountFromOrganizationRequest removeAccountFromOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeAccountFromOrganizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.RemoveAccountFromOrganization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAccountFromOrganizationValidateBeforeCall(String xAmzTarget, RemoveAccountFromOrganizationRequest removeAccountFromOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling removeAccountFromOrganization(Async)");
        }

        // verify the required parameter 'removeAccountFromOrganizationRequest' is set
        if (removeAccountFromOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'removeAccountFromOrganizationRequest' when calling removeAccountFromOrganization(Async)");
        }

        return removeAccountFromOrganizationCall(xAmzTarget, removeAccountFromOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified account from the organization.&lt;/p&gt; &lt;p&gt;The removed account becomes a standalone account that isn&#39;t a member of any organization. It&#39;s no longer subject to any policies and is responsible for its own bill payments. The organization&#39;s management account is no longer charged for any expenses accrued by the member account after it&#39;s removed from the organization.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account. Member accounts can remove themselves with &lt;a&gt;LeaveOrganization&lt;/a&gt; instead.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can remove an account from your organization only if the account is configured with the information required to operate as a standalone account. When you create an account in an organization using the Organizations console, API, or CLI commands, the information required of standalone accounts is &lt;i&gt;not&lt;/i&gt; automatically collected. For an account that you want to make standalone, you must choose a support plan, provide and verify the required contact information, and provide a current payment method. Amazon Web Services uses the payment method to charge for any billable (not free tier) Amazon Web Services activity that occurs while the account isn&#39;t attached to an organization. To remove an account that doesn&#39;t yet have this information, you must sign in as the member account and follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization when all required account information has not yet been provided&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account that you want to leave must not be a delegated administrator account for any Amazon Web Services service enabled for your organization. If the account is a delegated administrator, you must first change the delegated administrator account to another account that is remaining in the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;After the account leaves the organization, all tags that were attached to the account object in the organization are deleted. Amazon Web Services accounts outside of an organization do not support tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param removeAccountFromOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void removeAccountFromOrganization(String xAmzTarget, RemoveAccountFromOrganizationRequest removeAccountFromOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        removeAccountFromOrganizationWithHttpInfo(xAmzTarget, removeAccountFromOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes the specified account from the organization.&lt;/p&gt; &lt;p&gt;The removed account becomes a standalone account that isn&#39;t a member of any organization. It&#39;s no longer subject to any policies and is responsible for its own bill payments. The organization&#39;s management account is no longer charged for any expenses accrued by the member account after it&#39;s removed from the organization.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account. Member accounts can remove themselves with &lt;a&gt;LeaveOrganization&lt;/a&gt; instead.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can remove an account from your organization only if the account is configured with the information required to operate as a standalone account. When you create an account in an organization using the Organizations console, API, or CLI commands, the information required of standalone accounts is &lt;i&gt;not&lt;/i&gt; automatically collected. For an account that you want to make standalone, you must choose a support plan, provide and verify the required contact information, and provide a current payment method. Amazon Web Services uses the payment method to charge for any billable (not free tier) Amazon Web Services activity that occurs while the account isn&#39;t attached to an organization. To remove an account that doesn&#39;t yet have this information, you must sign in as the member account and follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization when all required account information has not yet been provided&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account that you want to leave must not be a delegated administrator account for any Amazon Web Services service enabled for your organization. If the account is a delegated administrator, you must first change the delegated administrator account to another account that is remaining in the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;After the account leaves the organization, all tags that were attached to the account object in the organization are deleted. Amazon Web Services accounts outside of an organization do not support tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param removeAccountFromOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAccountFromOrganizationWithHttpInfo(String xAmzTarget, RemoveAccountFromOrganizationRequest removeAccountFromOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = removeAccountFromOrganizationValidateBeforeCall(xAmzTarget, removeAccountFromOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified account from the organization.&lt;/p&gt; &lt;p&gt;The removed account becomes a standalone account that isn&#39;t a member of any organization. It&#39;s no longer subject to any policies and is responsible for its own bill payments. The organization&#39;s management account is no longer charged for any expenses accrued by the member account after it&#39;s removed from the organization.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account. Member accounts can remove themselves with &lt;a&gt;LeaveOrganization&lt;/a&gt; instead.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can remove an account from your organization only if the account is configured with the information required to operate as a standalone account. When you create an account in an organization using the Organizations console, API, or CLI commands, the information required of standalone accounts is &lt;i&gt;not&lt;/i&gt; automatically collected. For an account that you want to make standalone, you must choose a support plan, provide and verify the required contact information, and provide a current payment method. Amazon Web Services uses the payment method to charge for any billable (not free tier) Amazon Web Services activity that occurs while the account isn&#39;t attached to an organization. To remove an account that doesn&#39;t yet have this information, you must sign in as the member account and follow the steps at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info\&quot;&gt; To leave an organization when all required account information has not yet been provided&lt;/a&gt; in the &lt;i&gt;Organizations User Guide.&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account that you want to leave must not be a delegated administrator account for any Amazon Web Services service enabled for your organization. If the account is a delegated administrator, you must first change the delegated administrator account to another account that is remaining in the organization.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;After the account leaves the organization, all tags that were attached to the account object in the organization are deleted. Amazon Web Services accounts outside of an organization do not support tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param removeAccountFromOrganizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MasterCannotLeaveOrganizationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccountFromOrganizationAsync(String xAmzTarget, RemoveAccountFromOrganizationRequest removeAccountFromOrganizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAccountFromOrganizationValidateBeforeCall(xAmzTarget, removeAccountFromOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds one or more tags to the specified resource.&lt;/p&gt; &lt;p&gt;Currently, you can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Adds one or more tags to the specified resource.&lt;/p&gt; &lt;p&gt;Currently, you can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds one or more tags to the specified resource.&lt;/p&gt; &lt;p&gt;Currently, you can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes any tags with the specified keys from the specified resource.&lt;/p&gt; &lt;p&gt;You can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes any tags with the specified keys from the specified resource.&lt;/p&gt; &lt;p&gt;You can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes any tags with the specified keys from the specified resource.&lt;/p&gt; &lt;p&gt;You can attach tags to the following resources in Organizations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organization root&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Organizational unit (OU)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy (any type)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationalUnit
     * @param xAmzTarget  (required)
     * @param updateOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationalUnitCall(String xAmzTarget, UpdateOrganizationalUnitRequest updateOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganizationalUnitRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.UpdateOrganizationalUnit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationalUnitValidateBeforeCall(String xAmzTarget, UpdateOrganizationalUnitRequest updateOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateOrganizationalUnit(Async)");
        }

        // verify the required parameter 'updateOrganizationalUnitRequest' is set
        if (updateOrganizationalUnitRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationalUnitRequest' when calling updateOrganizationalUnit(Async)");
        }

        return updateOrganizationalUnitCall(xAmzTarget, updateOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Renames the specified organizational unit (OU). The ID and ARN don&#39;t change. The child OUs and accounts remain in place, and any attached policies of the OU remain attached.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateOrganizationalUnitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrganizationalUnitResponse updateOrganizationalUnit(String xAmzTarget, UpdateOrganizationalUnitRequest updateOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateOrganizationalUnitResponse> localVarResp = updateOrganizationalUnitWithHttpInfo(xAmzTarget, updateOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Renames the specified organizational unit (OU). The ID and ARN don&#39;t change. The child OUs and accounts remain in place, and any attached policies of the OU remain attached.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateOrganizationalUnitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateOrganizationalUnitResponse> updateOrganizationalUnitWithHttpInfo(String xAmzTarget, UpdateOrganizationalUnitRequest updateOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationalUnitValidateBeforeCall(xAmzTarget, updateOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateOrganizationalUnitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Renames the specified organizational unit (OU). The ID and ARN don&#39;t change. The child OUs and accounts remain in place, and any attached policies of the OU remain attached.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateOrganizationalUnitRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DuplicateOrganizationalUnitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OrganizationalUnitNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationalUnitAsync(String xAmzTarget, UpdateOrganizationalUnitRequest updateOrganizationalUnitRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateOrganizationalUnitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationalUnitValidateBeforeCall(xAmzTarget, updateOrganizationalUnitRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateOrganizationalUnitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePolicy
     * @param xAmzTarget  (required)
     * @param updatePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePolicyCall(String xAmzTarget, UpdatePolicyRequest updatePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSOrganizationsV20161128.UpdatePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String xAmzTarget, UpdatePolicyRequest updatePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updatePolicy(Async)");
        }

        // verify the required parameter 'updatePolicyRequest' is set
        if (updatePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePolicyRequest' when calling updatePolicy(Async)");
        }

        return updatePolicyCall(xAmzTarget, updatePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates an existing policy with a new name, description, or content. If you don&#39;t supply any parameter, that value remains unchanged. You can&#39;t change a policy&#39;s type.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updatePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdatePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicyResponse updatePolicy(String xAmzTarget, UpdatePolicyRequest updatePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdatePolicyResponse> localVarResp = updatePolicyWithHttpInfo(xAmzTarget, updatePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates an existing policy with a new name, description, or content. If you don&#39;t supply any parameter, that value remains unchanged. You can&#39;t change a policy&#39;s type.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updatePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdatePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePolicyResponse> updatePolicyWithHttpInfo(String xAmzTarget, UpdatePolicyRequest updatePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(xAmzTarget, updatePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdatePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates an existing policy with a new name, description, or content. If you don&#39;t supply any parameter, that value remains unchanged. You can&#39;t change a policy&#39;s type.&lt;/p&gt; &lt;p&gt;This operation can be called only from the organization&#39;s management account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updatePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AWSOrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConstraintViolationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DuplicatePolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidInputException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MalformedPolicyDocumentException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedAPIEndpointException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> PolicyChangesInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePolicyAsync(String xAmzTarget, UpdatePolicyRequest updatePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdatePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(xAmzTarget, updatePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdatePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
