/**
 * AWS Organizations
 * <p>Organizations is a web service that enables you to consolidate your multiple Amazon Web Services accounts into an <i>organization</i> and centrally manage your accounts and their resources.</p> <p>This guide provides descriptions of the Organizations operations. For more information about using this service, see the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html\">Organizations User Guide</a>.</p> <p> <b>Support and feedback for Organizations</b> </p> <p>We welcome your feedback. Send your comments to <a href=\"mailto:feedback-awsorganizations@amazon.com\">feedback-awsorganizations@amazon.com</a> or post your feedback and questions in the <a href=\"http://forums.aws.amazon.com/forum.jspa?forumID=219\">Organizations support forum</a>. For more information about the Amazon Web Services support forums, see <a href=\"http://forums.aws.amazon.com/help.jspa\">Forums Help</a>.</p> <p> <b>Endpoint to call When using the CLI or the Amazon Web Services SDK</b> </p> <p>For the current release of Organizations, specify the <code>us-east-1</code> region for all Amazon Web Services API and CLI calls made from the commercial Amazon Web Services Regions outside of China. If calling from one of the Amazon Web Services Regions in China, then specify <code>cn-northwest-1</code>. You can do this in the CLI by using these parameters and commands:</p> <ul> <li> <p>Use the following parameter with each command to specify both the endpoint and its region:</p> <p> <code>--endpoint-url https://organizations.us-east-1.amazonaws.com</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>--endpoint-url https://organizations.cn-northwest-1.amazonaws.com.cn</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the default endpoint, but configure your default region with this command:</p> <p> <code>aws configure set default.region us-east-1</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>aws configure set default.region cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the following parameter with each command to specify the endpoint:</p> <p> <code>--region us-east-1</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>--region cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> </ul> <p> <b>Recording API Requests</b> </p> <p>Organizations supports CloudTrail, a service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. By using information collected by CloudTrail, you can determine which requests the Organizations service received, who made the request and when, and so on. For more about Organizations and its support for CloudTrail, see <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_incident-response.html#orgs_cloudtrail-integration\">Logging Organizations Events with CloudTrail</a> in the <i>Organizations User Guide</i>. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html\">CloudTrail User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelHandshakeResponse_Handshake.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelHandshakeResponse_Handshake::OAICancelHandshakeResponse_Handshake(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelHandshakeResponse_Handshake::OAICancelHandshakeResponse_Handshake() {
    this->initializeModel();
}

OAICancelHandshakeResponse_Handshake::~OAICancelHandshakeResponse_Handshake() {}

void OAICancelHandshakeResponse_Handshake::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_parties_isSet = false;
    m_parties_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_requested_timestamp_isSet = false;
    m_requested_timestamp_isValid = false;

    m_expiration_timestamp_isSet = false;
    m_expiration_timestamp_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAICancelHandshakeResponse_Handshake::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelHandshakeResponse_Handshake::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_parties_isValid = ::OpenAPI::fromJsonValue(m_parties, json[QString("Parties")]);
    m_parties_isSet = !json[QString("Parties")].isNull() && m_parties_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_requested_timestamp_isValid = ::OpenAPI::fromJsonValue(m_requested_timestamp, json[QString("RequestedTimestamp")]);
    m_requested_timestamp_isSet = !json[QString("RequestedTimestamp")].isNull() && m_requested_timestamp_isValid;

    m_expiration_timestamp_isValid = ::OpenAPI::fromJsonValue(m_expiration_timestamp, json[QString("ExpirationTimestamp")]);
    m_expiration_timestamp_isSet = !json[QString("ExpirationTimestamp")].isNull() && m_expiration_timestamp_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;
}

QString OAICancelHandshakeResponse_Handshake::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelHandshakeResponse_Handshake::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_parties.isSet()) {
        obj.insert(QString("Parties"), ::OpenAPI::toJsonValue(m_parties));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_requested_timestamp_isSet) {
        obj.insert(QString("RequestedTimestamp"), ::OpenAPI::toJsonValue(m_requested_timestamp));
    }
    if (m_expiration_timestamp_isSet) {
        obj.insert(QString("ExpirationTimestamp"), ::OpenAPI::toJsonValue(m_expiration_timestamp));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QString OAICancelHandshakeResponse_Handshake::getId() const {
    return m_id;
}
void OAICancelHandshakeResponse_Handshake::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_id_Set() const{
    return m_id_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICancelHandshakeResponse_Handshake::getArn() const {
    return m_arn;
}
void OAICancelHandshakeResponse_Handshake::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_arn_Valid() const{
    return m_arn_isValid;
}

QList OAICancelHandshakeResponse_Handshake::getParties() const {
    return m_parties;
}
void OAICancelHandshakeResponse_Handshake::setParties(const QList &parties) {
    m_parties = parties;
    m_parties_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_parties_Set() const{
    return m_parties_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_parties_Valid() const{
    return m_parties_isValid;
}

OAIHandshakeState OAICancelHandshakeResponse_Handshake::getState() const {
    return m_state;
}
void OAICancelHandshakeResponse_Handshake::setState(const OAIHandshakeState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_state_Set() const{
    return m_state_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICancelHandshakeResponse_Handshake::getRequestedTimestamp() const {
    return m_requested_timestamp;
}
void OAICancelHandshakeResponse_Handshake::setRequestedTimestamp(const QDateTime &requested_timestamp) {
    m_requested_timestamp = requested_timestamp;
    m_requested_timestamp_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_requested_timestamp_Set() const{
    return m_requested_timestamp_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_requested_timestamp_Valid() const{
    return m_requested_timestamp_isValid;
}

QDateTime OAICancelHandshakeResponse_Handshake::getExpirationTimestamp() const {
    return m_expiration_timestamp;
}
void OAICancelHandshakeResponse_Handshake::setExpirationTimestamp(const QDateTime &expiration_timestamp) {
    m_expiration_timestamp = expiration_timestamp;
    m_expiration_timestamp_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_expiration_timestamp_Set() const{
    return m_expiration_timestamp_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_expiration_timestamp_Valid() const{
    return m_expiration_timestamp_isValid;
}

OAIActionType OAICancelHandshakeResponse_Handshake::getAction() const {
    return m_action;
}
void OAICancelHandshakeResponse_Handshake::setAction(const OAIActionType &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_action_Set() const{
    return m_action_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_action_Valid() const{
    return m_action_isValid;
}

QList OAICancelHandshakeResponse_Handshake::getResources() const {
    return m_resources;
}
void OAICancelHandshakeResponse_Handshake::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICancelHandshakeResponse_Handshake::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICancelHandshakeResponse_Handshake::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAICancelHandshakeResponse_Handshake::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelHandshakeResponse_Handshake::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
