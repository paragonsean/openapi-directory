/**
 * AWS Organizations
 * <p>Organizations is a web service that enables you to consolidate your multiple Amazon Web Services accounts into an <i>organization</i> and centrally manage your accounts and their resources.</p> <p>This guide provides descriptions of the Organizations operations. For more information about using this service, see the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html\">Organizations User Guide</a>.</p> <p> <b>Support and feedback for Organizations</b> </p> <p>We welcome your feedback. Send your comments to <a href=\"mailto:feedback-awsorganizations@amazon.com\">feedback-awsorganizations@amazon.com</a> or post your feedback and questions in the <a href=\"http://forums.aws.amazon.com/forum.jspa?forumID=219\">Organizations support forum</a>. For more information about the Amazon Web Services support forums, see <a href=\"http://forums.aws.amazon.com/help.jspa\">Forums Help</a>.</p> <p> <b>Endpoint to call When using the CLI or the Amazon Web Services SDK</b> </p> <p>For the current release of Organizations, specify the <code>us-east-1</code> region for all Amazon Web Services API and CLI calls made from the commercial Amazon Web Services Regions outside of China. If calling from one of the Amazon Web Services Regions in China, then specify <code>cn-northwest-1</code>. You can do this in the CLI by using these parameters and commands:</p> <ul> <li> <p>Use the following parameter with each command to specify both the endpoint and its region:</p> <p> <code>--endpoint-url https://organizations.us-east-1.amazonaws.com</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>--endpoint-url https://organizations.cn-northwest-1.amazonaws.com.cn</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the default endpoint, but configure your default region with this command:</p> <p> <code>aws configure set default.region us-east-1</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>aws configure set default.region cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the following parameter with each command to specify the endpoint:</p> <p> <code>--region us-east-1</code> <i>(from commercial Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p> <code>--region cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i> </p> </li> </ul> <p> <b>Recording API Requests</b> </p> <p>Organizations supports CloudTrail, a service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. By using information collected by CloudTrail, you can determine which requests the Organizations service received, who made the request and when, and so on. For more about Organizations and its support for CloudTrail, see <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_incident-response.html#orgs_cloudtrail-integration\">Logging Organizations Events with CloudTrail</a> in the <i>Organizations User Guide</i>. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html\">CloudTrail User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsOrganizations);
  }
}(this, function(expect, AwsOrganizations) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsOrganizations.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acceptHandshake', function() {
      it('should call acceptHandshake successfully', function(done) {
        //uncomment below and update the code to test acceptHandshake
        //instance.acceptHandshake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachPolicy', function() {
      it('should call attachPolicy successfully', function(done) {
        //uncomment below and update the code to test attachPolicy
        //instance.attachPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelHandshake', function() {
      it('should call cancelHandshake successfully', function(done) {
        //uncomment below and update the code to test cancelHandshake
        //instance.cancelHandshake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('closeAccount', function() {
      it('should call closeAccount successfully', function(done) {
        //uncomment below and update the code to test closeAccount
        //instance.closeAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAccount', function() {
      it('should call createAccount successfully', function(done) {
        //uncomment below and update the code to test createAccount
        //instance.createAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGovCloudAccount', function() {
      it('should call createGovCloudAccount successfully', function(done) {
        //uncomment below and update the code to test createGovCloudAccount
        //instance.createGovCloudAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOrganization', function() {
      it('should call createOrganization successfully', function(done) {
        //uncomment below and update the code to test createOrganization
        //instance.createOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOrganizationalUnit', function() {
      it('should call createOrganizationalUnit successfully', function(done) {
        //uncomment below and update the code to test createOrganizationalUnit
        //instance.createOrganizationalUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPolicy', function() {
      it('should call createPolicy successfully', function(done) {
        //uncomment below and update the code to test createPolicy
        //instance.createPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('declineHandshake', function() {
      it('should call declineHandshake successfully', function(done) {
        //uncomment below and update the code to test declineHandshake
        //instance.declineHandshake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOrganization', function() {
      it('should call deleteOrganization successfully', function(done) {
        //uncomment below and update the code to test deleteOrganization
        //instance.deleteOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOrganizationalUnit', function() {
      it('should call deleteOrganizationalUnit successfully', function(done) {
        //uncomment below and update the code to test deleteOrganizationalUnit
        //instance.deleteOrganizationalUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePolicy', function() {
      it('should call deletePolicy successfully', function(done) {
        //uncomment below and update the code to test deletePolicy
        //instance.deletePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterDelegatedAdministrator', function() {
      it('should call deregisterDelegatedAdministrator successfully', function(done) {
        //uncomment below and update the code to test deregisterDelegatedAdministrator
        //instance.deregisterDelegatedAdministrator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccount', function() {
      it('should call describeAccount successfully', function(done) {
        //uncomment below and update the code to test describeAccount
        //instance.describeAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCreateAccountStatus', function() {
      it('should call describeCreateAccountStatus successfully', function(done) {
        //uncomment below and update the code to test describeCreateAccountStatus
        //instance.describeCreateAccountStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEffectivePolicy', function() {
      it('should call describeEffectivePolicy successfully', function(done) {
        //uncomment below and update the code to test describeEffectivePolicy
        //instance.describeEffectivePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeHandshake', function() {
      it('should call describeHandshake successfully', function(done) {
        //uncomment below and update the code to test describeHandshake
        //instance.describeHandshake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOrganization', function() {
      it('should call describeOrganization successfully', function(done) {
        //uncomment below and update the code to test describeOrganization
        //instance.describeOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOrganizationalUnit', function() {
      it('should call describeOrganizationalUnit successfully', function(done) {
        //uncomment below and update the code to test describeOrganizationalUnit
        //instance.describeOrganizationalUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePolicy', function() {
      it('should call describePolicy successfully', function(done) {
        //uncomment below and update the code to test describePolicy
        //instance.describePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeResourcePolicy', function() {
      it('should call describeResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test describeResourcePolicy
        //instance.describeResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachPolicy', function() {
      it('should call detachPolicy successfully', function(done) {
        //uncomment below and update the code to test detachPolicy
        //instance.detachPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableAWSServiceAccess', function() {
      it('should call disableAWSServiceAccess successfully', function(done) {
        //uncomment below and update the code to test disableAWSServiceAccess
        //instance.disableAWSServiceAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disablePolicyType', function() {
      it('should call disablePolicyType successfully', function(done) {
        //uncomment below and update the code to test disablePolicyType
        //instance.disablePolicyType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableAWSServiceAccess', function() {
      it('should call enableAWSServiceAccess successfully', function(done) {
        //uncomment below and update the code to test enableAWSServiceAccess
        //instance.enableAWSServiceAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableAllFeatures', function() {
      it('should call enableAllFeatures successfully', function(done) {
        //uncomment below and update the code to test enableAllFeatures
        //instance.enableAllFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enablePolicyType', function() {
      it('should call enablePolicyType successfully', function(done) {
        //uncomment below and update the code to test enablePolicyType
        //instance.enablePolicyType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inviteAccountToOrganization', function() {
      it('should call inviteAccountToOrganization successfully', function(done) {
        //uncomment below and update the code to test inviteAccountToOrganization
        //instance.inviteAccountToOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('leaveOrganization', function() {
      it('should call leaveOrganization successfully', function(done) {
        //uncomment below and update the code to test leaveOrganization
        //instance.leaveOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAWSServiceAccessForOrganization', function() {
      it('should call listAWSServiceAccessForOrganization successfully', function(done) {
        //uncomment below and update the code to test listAWSServiceAccessForOrganization
        //instance.listAWSServiceAccessForOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccounts', function() {
      it('should call listAccounts successfully', function(done) {
        //uncomment below and update the code to test listAccounts
        //instance.listAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountsForParent', function() {
      it('should call listAccountsForParent successfully', function(done) {
        //uncomment below and update the code to test listAccountsForParent
        //instance.listAccountsForParent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChildren', function() {
      it('should call listChildren successfully', function(done) {
        //uncomment below and update the code to test listChildren
        //instance.listChildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCreateAccountStatus', function() {
      it('should call listCreateAccountStatus successfully', function(done) {
        //uncomment below and update the code to test listCreateAccountStatus
        //instance.listCreateAccountStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDelegatedAdministrators', function() {
      it('should call listDelegatedAdministrators successfully', function(done) {
        //uncomment below and update the code to test listDelegatedAdministrators
        //instance.listDelegatedAdministrators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDelegatedServicesForAccount', function() {
      it('should call listDelegatedServicesForAccount successfully', function(done) {
        //uncomment below and update the code to test listDelegatedServicesForAccount
        //instance.listDelegatedServicesForAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHandshakesForAccount', function() {
      it('should call listHandshakesForAccount successfully', function(done) {
        //uncomment below and update the code to test listHandshakesForAccount
        //instance.listHandshakesForAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHandshakesForOrganization', function() {
      it('should call listHandshakesForOrganization successfully', function(done) {
        //uncomment below and update the code to test listHandshakesForOrganization
        //instance.listHandshakesForOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOrganizationalUnitsForParent', function() {
      it('should call listOrganizationalUnitsForParent successfully', function(done) {
        //uncomment below and update the code to test listOrganizationalUnitsForParent
        //instance.listOrganizationalUnitsForParent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listParents', function() {
      it('should call listParents successfully', function(done) {
        //uncomment below and update the code to test listParents
        //instance.listParents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPolicies', function() {
      it('should call listPolicies successfully', function(done) {
        //uncomment below and update the code to test listPolicies
        //instance.listPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPoliciesForTarget', function() {
      it('should call listPoliciesForTarget successfully', function(done) {
        //uncomment below and update the code to test listPoliciesForTarget
        //instance.listPoliciesForTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoots', function() {
      it('should call listRoots successfully', function(done) {
        //uncomment below and update the code to test listRoots
        //instance.listRoots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTargetsForPolicy', function() {
      it('should call listTargetsForPolicy successfully', function(done) {
        //uncomment below and update the code to test listTargetsForPolicy
        //instance.listTargetsForPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveAccount', function() {
      it('should call moveAccount successfully', function(done) {
        //uncomment below and update the code to test moveAccount
        //instance.moveAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerDelegatedAdministrator', function() {
      it('should call registerDelegatedAdministrator successfully', function(done) {
        //uncomment below and update the code to test registerDelegatedAdministrator
        //instance.registerDelegatedAdministrator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAccountFromOrganization', function() {
      it('should call removeAccountFromOrganization successfully', function(done) {
        //uncomment below and update the code to test removeAccountFromOrganization
        //instance.removeAccountFromOrganization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrganizationalUnit', function() {
      it('should call updateOrganizationalUnit successfully', function(done) {
        //uncomment below and update the code to test updateOrganizationalUnit
        //instance.updateOrganizationalUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePolicy', function() {
      it('should call updatePolicy successfully', function(done) {
        //uncomment below and update the code to test updatePolicy
        //instance.updatePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
