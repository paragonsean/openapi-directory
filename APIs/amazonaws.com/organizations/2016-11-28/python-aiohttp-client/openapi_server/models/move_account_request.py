# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoveAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, source_parent_id: str=None, destination_parent_id: str=None):
        """MoveAccountRequest - a model defined in OpenAPI

        :param account_id: The account_id of this MoveAccountRequest.
        :param source_parent_id: The source_parent_id of this MoveAccountRequest.
        :param destination_parent_id: The destination_parent_id of this MoveAccountRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'source_parent_id': str,
            'destination_parent_id': str
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'source_parent_id': 'SourceParentId',
            'destination_parent_id': 'DestinationParentId'
        }

        self._account_id = account_id
        self._source_parent_id = source_parent_id
        self._destination_parent_id = destination_parent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoveAccountRequest of this MoveAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MoveAccountRequest.


        :return: The account_id of this MoveAccountRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MoveAccountRequest.


        :param account_id: The account_id of this MoveAccountRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def source_parent_id(self):
        """Gets the source_parent_id of this MoveAccountRequest.


        :return: The source_parent_id of this MoveAccountRequest.
        :rtype: str
        """
        return self._source_parent_id

    @source_parent_id.setter
    def source_parent_id(self, source_parent_id):
        """Sets the source_parent_id of this MoveAccountRequest.


        :param source_parent_id: The source_parent_id of this MoveAccountRequest.
        :type source_parent_id: str
        """
        if source_parent_id is None:
            raise ValueError("Invalid value for `source_parent_id`, must not be `None`")

        self._source_parent_id = source_parent_id

    @property
    def destination_parent_id(self):
        """Gets the destination_parent_id of this MoveAccountRequest.


        :return: The destination_parent_id of this MoveAccountRequest.
        :rtype: str
        """
        return self._destination_parent_id

    @destination_parent_id.setter
    def destination_parent_id(self, destination_parent_id):
        """Sets the destination_parent_id of this MoveAccountRequest.


        :param destination_parent_id: The destination_parent_id of this MoveAccountRequest.
        :type destination_parent_id: str
        """
        if destination_parent_id is None:
            raise ValueError("Invalid value for `destination_parent_id`, must not be `None`")

        self._destination_parent_id = destination_parent_id
