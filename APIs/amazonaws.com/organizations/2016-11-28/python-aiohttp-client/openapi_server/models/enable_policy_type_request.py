# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_type import PolicyType
from openapi_server import util


class EnablePolicyTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, root_id: str=None, policy_type: PolicyType=None):
        """EnablePolicyTypeRequest - a model defined in OpenAPI

        :param root_id: The root_id of this EnablePolicyTypeRequest.
        :param policy_type: The policy_type of this EnablePolicyTypeRequest.
        """
        self.openapi_types = {
            'root_id': str,
            'policy_type': PolicyType
        }

        self.attribute_map = {
            'root_id': 'RootId',
            'policy_type': 'PolicyType'
        }

        self._root_id = root_id
        self._policy_type = policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnablePolicyTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnablePolicyTypeRequest of this EnablePolicyTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def root_id(self):
        """Gets the root_id of this EnablePolicyTypeRequest.


        :return: The root_id of this EnablePolicyTypeRequest.
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this EnablePolicyTypeRequest.


        :param root_id: The root_id of this EnablePolicyTypeRequest.
        :type root_id: str
        """
        if root_id is None:
            raise ValueError("Invalid value for `root_id`, must not be `None`")

        self._root_id = root_id

    @property
    def policy_type(self):
        """Gets the policy_type of this EnablePolicyTypeRequest.


        :return: The policy_type of this EnablePolicyTypeRequest.
        :rtype: PolicyType
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this EnablePolicyTypeRequest.


        :param policy_type: The policy_type of this EnablePolicyTypeRequest.
        :type policy_type: PolicyType
        """
        if policy_type is None:
            raise ValueError("Invalid value for `policy_type`, must not be `None`")

        self._policy_type = policy_type
