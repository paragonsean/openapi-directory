# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invite_account_to_organization_request_target import InviteAccountToOrganizationRequestTarget
from openapi_server import util


class InviteAccountToOrganizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target: InviteAccountToOrganizationRequestTarget=None, notes: str=None, tags: List=None):
        """InviteAccountToOrganizationRequest - a model defined in OpenAPI

        :param target: The target of this InviteAccountToOrganizationRequest.
        :param notes: The notes of this InviteAccountToOrganizationRequest.
        :param tags: The tags of this InviteAccountToOrganizationRequest.
        """
        self.openapi_types = {
            'target': InviteAccountToOrganizationRequestTarget,
            'notes': str,
            'tags': List
        }

        self.attribute_map = {
            'target': 'Target',
            'notes': 'Notes',
            'tags': 'Tags'
        }

        self._target = target
        self._notes = notes
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InviteAccountToOrganizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InviteAccountToOrganizationRequest of this InviteAccountToOrganizationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this InviteAccountToOrganizationRequest.


        :return: The target of this InviteAccountToOrganizationRequest.
        :rtype: InviteAccountToOrganizationRequestTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this InviteAccountToOrganizationRequest.


        :param target: The target of this InviteAccountToOrganizationRequest.
        :type target: InviteAccountToOrganizationRequestTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def notes(self):
        """Gets the notes of this InviteAccountToOrganizationRequest.


        :return: The notes of this InviteAccountToOrganizationRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InviteAccountToOrganizationRequest.


        :param notes: The notes of this InviteAccountToOrganizationRequest.
        :type notes: str
        """

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this InviteAccountToOrganizationRequest.


        :return: The tags of this InviteAccountToOrganizationRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InviteAccountToOrganizationRequest.


        :param tags: The tags of this InviteAccountToOrganizationRequest.
        :type tags: List
        """

        self._tags = tags
