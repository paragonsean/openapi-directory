# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeregisterDelegatedAdministratorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, service_principal: str=None):
        """DeregisterDelegatedAdministratorRequest - a model defined in OpenAPI

        :param account_id: The account_id of this DeregisterDelegatedAdministratorRequest.
        :param service_principal: The service_principal of this DeregisterDelegatedAdministratorRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'service_principal': str
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'service_principal': 'ServicePrincipal'
        }

        self._account_id = account_id
        self._service_principal = service_principal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterDelegatedAdministratorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterDelegatedAdministratorRequest of this DeregisterDelegatedAdministratorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DeregisterDelegatedAdministratorRequest.


        :return: The account_id of this DeregisterDelegatedAdministratorRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DeregisterDelegatedAdministratorRequest.


        :param account_id: The account_id of this DeregisterDelegatedAdministratorRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def service_principal(self):
        """Gets the service_principal of this DeregisterDelegatedAdministratorRequest.


        :return: The service_principal of this DeregisterDelegatedAdministratorRequest.
        :rtype: str
        """
        return self._service_principal

    @service_principal.setter
    def service_principal(self, service_principal):
        """Sets the service_principal of this DeregisterDelegatedAdministratorRequest.


        :param service_principal: The service_principal of this DeregisterDelegatedAdministratorRequest.
        :type service_principal: str
        """
        if service_principal is None:
            raise ValueError("Invalid value for `service_principal`, must not be `None`")

        self._service_principal = service_principal
