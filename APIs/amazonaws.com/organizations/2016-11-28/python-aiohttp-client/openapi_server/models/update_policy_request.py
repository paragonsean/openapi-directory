# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_id: str=None, name: str=None, description: str=None, content: str=None):
        """UpdatePolicyRequest - a model defined in OpenAPI

        :param policy_id: The policy_id of this UpdatePolicyRequest.
        :param name: The name of this UpdatePolicyRequest.
        :param description: The description of this UpdatePolicyRequest.
        :param content: The content of this UpdatePolicyRequest.
        """
        self.openapi_types = {
            'policy_id': str,
            'name': str,
            'description': str,
            'content': str
        }

        self.attribute_map = {
            'policy_id': 'PolicyId',
            'name': 'Name',
            'description': 'Description',
            'content': 'Content'
        }

        self._policy_id = policy_id
        self._name = name
        self._description = description
        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePolicyRequest of this UpdatePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_id(self):
        """Gets the policy_id of this UpdatePolicyRequest.


        :return: The policy_id of this UpdatePolicyRequest.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this UpdatePolicyRequest.


        :param policy_id: The policy_id of this UpdatePolicyRequest.
        :type policy_id: str
        """
        if policy_id is None:
            raise ValueError("Invalid value for `policy_id`, must not be `None`")

        self._policy_id = policy_id

    @property
    def name(self):
        """Gets the name of this UpdatePolicyRequest.


        :return: The name of this UpdatePolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatePolicyRequest.


        :param name: The name of this UpdatePolicyRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdatePolicyRequest.


        :return: The description of this UpdatePolicyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePolicyRequest.


        :param description: The description of this UpdatePolicyRequest.
        :type description: str
        """

        self._description = description

    @property
    def content(self):
        """Gets the content of this UpdatePolicyRequest.


        :return: The content of this UpdatePolicyRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this UpdatePolicyRequest.


        :param content: The content of this UpdatePolicyRequest.
        :type content: str
        """

        self._content = content
