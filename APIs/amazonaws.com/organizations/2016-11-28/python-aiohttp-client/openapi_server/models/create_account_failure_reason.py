# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAccountFailureReason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ACCOUNT_LIMIT_EXCEEDED = 'ACCOUNT_LIMIT_EXCEEDED'
    EMAIL_ALREADY_EXISTS = 'EMAIL_ALREADY_EXISTS'
    INVALID_ADDRESS = 'INVALID_ADDRESS'
    INVALID_EMAIL = 'INVALID_EMAIL'
    CONCURRENT_ACCOUNT_MODIFICATION = 'CONCURRENT_ACCOUNT_MODIFICATION'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    GOVCLOUD_ACCOUNT_ALREADY_EXISTS = 'GOVCLOUD_ACCOUNT_ALREADY_EXISTS'
    MISSING_BUSINESS_VALIDATION = 'MISSING_BUSINESS_VALIDATION'
    FAILED_BUSINESS_VALIDATION = 'FAILED_BUSINESS_VALIDATION'
    PENDING_BUSINESS_VALIDATION = 'PENDING_BUSINESS_VALIDATION'
    INVALID_IDENTITY_FOR_BUSINESS_VALIDATION = 'INVALID_IDENTITY_FOR_BUSINESS_VALIDATION'
    UNKNOWN_BUSINESS_VALIDATION = 'UNKNOWN_BUSINESS_VALIDATION'
    MISSING_PAYMENT_INSTRUMENT = 'MISSING_PAYMENT_INSTRUMENT'
    INVALID_PAYMENT_INSTRUMENT = 'INVALID_PAYMENT_INSTRUMENT'
    UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED = 'UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED'

    def __init__(self):
        """CreateAccountFailureReason - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccountFailureReason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccountFailureReason of this CreateAccountFailureReason.
        """
        return util.deserialize_model(dikt, cls)
