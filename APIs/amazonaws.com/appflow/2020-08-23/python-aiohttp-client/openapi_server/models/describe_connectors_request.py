# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_type import ConnectorType
import re
from openapi_server import util


class DescribeConnectorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_types: List[ConnectorType]=None, max_results: int=None, next_token: str=None):
        """DescribeConnectorsRequest - a model defined in OpenAPI

        :param connector_types: The connector_types of this DescribeConnectorsRequest.
        :param max_results: The max_results of this DescribeConnectorsRequest.
        :param next_token: The next_token of this DescribeConnectorsRequest.
        """
        self.openapi_types = {
            'connector_types': List[ConnectorType],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'connector_types': 'connectorTypes',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._connector_types = connector_types
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnectors_request of this DescribeConnectorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_types(self):
        """Gets the connector_types of this DescribeConnectorsRequest.

         The type of connector, such as Salesforce, Amplitude, and so on. 

        :return: The connector_types of this DescribeConnectorsRequest.
        :rtype: List[ConnectorType]
        """
        return self._connector_types

    @connector_types.setter
    def connector_types(self, connector_types):
        """Sets the connector_types of this DescribeConnectorsRequest.

         The type of connector, such as Salesforce, Amplitude, and so on. 

        :param connector_types: The connector_types of this DescribeConnectorsRequest.
        :type connector_types: List[ConnectorType]
        """
        if connector_types is not None and len(connector_types) > 100:
            raise ValueError("Invalid value for `connector_types`, number of items must be less than or equal to `100`")
        if connector_types is not None and len(connector_types) < 0:
            raise ValueError("Invalid value for `connector_types`, number of items must be greater than or equal to `0`")

        self._connector_types = connector_types

    @property
    def max_results(self):
        """Gets the max_results of this DescribeConnectorsRequest.

        The maximum number of items that should be returned in the result set. The default is 20.

        :return: The max_results of this DescribeConnectorsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeConnectorsRequest.

        The maximum number of items that should be returned in the result set. The default is 20.

        :param max_results: The max_results of this DescribeConnectorsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeConnectorsRequest.

         The pagination token for the next page of data. 

        :return: The next_token of this DescribeConnectorsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeConnectorsRequest.

         The pagination token for the next page of data. 

        :param next_token: The next_token of this DescribeConnectorsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and not re.search(r'\S+', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/\S+/`")

        self._next_token = next_token
