# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UnregisterConnectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_label: str=None, force_delete: bool=None):
        """UnregisterConnectorRequest - a model defined in OpenAPI

        :param connector_label: The connector_label of this UnregisterConnectorRequest.
        :param force_delete: The force_delete of this UnregisterConnectorRequest.
        """
        self.openapi_types = {
            'connector_label': str,
            'force_delete': bool
        }

        self.attribute_map = {
            'connector_label': 'connectorLabel',
            'force_delete': 'forceDelete'
        }

        self._connector_label = connector_label
        self._force_delete = force_delete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnregisterConnectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnregisterConnector_request of this UnregisterConnectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_label(self):
        """Gets the connector_label of this UnregisterConnectorRequest.

        The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.

        :return: The connector_label of this UnregisterConnectorRequest.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this UnregisterConnectorRequest.

        The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.

        :param connector_label: The connector_label of this UnregisterConnectorRequest.
        :type connector_label: str
        """
        if connector_label is None:
            raise ValueError("Invalid value for `connector_label`, must not be `None`")
        if connector_label is not None and len(connector_label) > 256:
            raise ValueError("Invalid value for `connector_label`, length must be less than or equal to `256`")
        if connector_label is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', connector_label):
            raise ValueError("Invalid value for `connector_label`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._connector_label = connector_label

    @property
    def force_delete(self):
        """Gets the force_delete of this UnregisterConnectorRequest.

        Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.

        :return: The force_delete of this UnregisterConnectorRequest.
        :rtype: bool
        """
        return self._force_delete

    @force_delete.setter
    def force_delete(self, force_delete):
        """Sets the force_delete of this UnregisterConnectorRequest.

        Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.

        :param force_delete: The force_delete of this UnregisterConnectorRequest.
        :type force_delete: bool
        """

        self._force_delete = force_delete
