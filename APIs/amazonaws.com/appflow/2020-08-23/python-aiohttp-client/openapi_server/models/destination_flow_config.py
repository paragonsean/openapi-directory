# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_type import ConnectorType
from openapi_server.models.destination_flow_config_destination_connector_properties import DestinationFlowConfigDestinationConnectorProperties
from openapi_server import util


class DestinationFlowConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_type: ConnectorType=None, api_version: str=None, connector_profile_name: str=None, destination_connector_properties: DestinationFlowConfigDestinationConnectorProperties=None):
        """DestinationFlowConfig - a model defined in OpenAPI

        :param connector_type: The connector_type of this DestinationFlowConfig.
        :param api_version: The api_version of this DestinationFlowConfig.
        :param connector_profile_name: The connector_profile_name of this DestinationFlowConfig.
        :param destination_connector_properties: The destination_connector_properties of this DestinationFlowConfig.
        """
        self.openapi_types = {
            'connector_type': ConnectorType,
            'api_version': str,
            'connector_profile_name': str,
            'destination_connector_properties': DestinationFlowConfigDestinationConnectorProperties
        }

        self.attribute_map = {
            'connector_type': 'connectorType',
            'api_version': 'apiVersion',
            'connector_profile_name': 'connectorProfileName',
            'destination_connector_properties': 'destinationConnectorProperties'
        }

        self._connector_type = connector_type
        self._api_version = api_version
        self._connector_profile_name = connector_profile_name
        self._destination_connector_properties = destination_connector_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationFlowConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationFlowConfig of this DestinationFlowConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_type(self):
        """Gets the connector_type of this DestinationFlowConfig.


        :return: The connector_type of this DestinationFlowConfig.
        :rtype: ConnectorType
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this DestinationFlowConfig.


        :param connector_type: The connector_type of this DestinationFlowConfig.
        :type connector_type: ConnectorType
        """
        if connector_type is None:
            raise ValueError("Invalid value for `connector_type`, must not be `None`")

        self._connector_type = connector_type

    @property
    def api_version(self):
        """Gets the api_version of this DestinationFlowConfig.


        :return: The api_version of this DestinationFlowConfig.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this DestinationFlowConfig.


        :param api_version: The api_version of this DestinationFlowConfig.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this DestinationFlowConfig.


        :return: The connector_profile_name of this DestinationFlowConfig.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this DestinationFlowConfig.


        :param connector_profile_name: The connector_profile_name of this DestinationFlowConfig.
        :type connector_profile_name: str
        """

        self._connector_profile_name = connector_profile_name

    @property
    def destination_connector_properties(self):
        """Gets the destination_connector_properties of this DestinationFlowConfig.


        :return: The destination_connector_properties of this DestinationFlowConfig.
        :rtype: DestinationFlowConfigDestinationConnectorProperties
        """
        return self._destination_connector_properties

    @destination_connector_properties.setter
    def destination_connector_properties(self, destination_connector_properties):
        """Sets the destination_connector_properties of this DestinationFlowConfig.


        :param destination_connector_properties: The destination_connector_properties of this DestinationFlowConfig.
        :type destination_connector_properties: DestinationFlowConfigDestinationConnectorProperties
        """
        if destination_connector_properties is None:
            raise ValueError("Invalid value for `destination_connector_properties`, must not be `None`")

        self._destination_connector_properties = destination_connector_properties
