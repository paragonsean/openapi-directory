# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_connector_properties_custom_connector import DestinationConnectorPropertiesCustomConnector
from openapi_server.models.destination_connector_properties_customer_profiles import DestinationConnectorPropertiesCustomerProfiles
from openapi_server.models.destination_connector_properties_event_bridge import DestinationConnectorPropertiesEventBridge
from openapi_server.models.destination_connector_properties_honeycode import DestinationConnectorPropertiesHoneycode
from openapi_server.models.destination_connector_properties_marketo import DestinationConnectorPropertiesMarketo
from openapi_server.models.destination_connector_properties_redshift import DestinationConnectorPropertiesRedshift
from openapi_server.models.destination_connector_properties_s3 import DestinationConnectorPropertiesS3
from openapi_server.models.destination_connector_properties_sapo_data import DestinationConnectorPropertiesSAPOData
from openapi_server.models.destination_connector_properties_salesforce import DestinationConnectorPropertiesSalesforce
from openapi_server.models.destination_connector_properties_snowflake import DestinationConnectorPropertiesSnowflake
from openapi_server.models.destination_connector_properties_upsolver import DestinationConnectorPropertiesUpsolver
from openapi_server.models.destination_connector_properties_zendesk import DestinationConnectorPropertiesZendesk
from openapi_server import util


class DestinationConnectorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, redshift: DestinationConnectorPropertiesRedshift=None, s3: DestinationConnectorPropertiesS3=None, salesforce: DestinationConnectorPropertiesSalesforce=None, snowflake: DestinationConnectorPropertiesSnowflake=None, event_bridge: DestinationConnectorPropertiesEventBridge=None, lookout_metrics: object=None, upsolver: DestinationConnectorPropertiesUpsolver=None, honeycode: DestinationConnectorPropertiesHoneycode=None, customer_profiles: DestinationConnectorPropertiesCustomerProfiles=None, zendesk: DestinationConnectorPropertiesZendesk=None, marketo: DestinationConnectorPropertiesMarketo=None, custom_connector: DestinationConnectorPropertiesCustomConnector=None, sapo_data: DestinationConnectorPropertiesSAPOData=None):
        """DestinationConnectorProperties - a model defined in OpenAPI

        :param redshift: The redshift of this DestinationConnectorProperties.
        :param s3: The s3 of this DestinationConnectorProperties.
        :param salesforce: The salesforce of this DestinationConnectorProperties.
        :param snowflake: The snowflake of this DestinationConnectorProperties.
        :param event_bridge: The event_bridge of this DestinationConnectorProperties.
        :param lookout_metrics: The lookout_metrics of this DestinationConnectorProperties.
        :param upsolver: The upsolver of this DestinationConnectorProperties.
        :param honeycode: The honeycode of this DestinationConnectorProperties.
        :param customer_profiles: The customer_profiles of this DestinationConnectorProperties.
        :param zendesk: The zendesk of this DestinationConnectorProperties.
        :param marketo: The marketo of this DestinationConnectorProperties.
        :param custom_connector: The custom_connector of this DestinationConnectorProperties.
        :param sapo_data: The sapo_data of this DestinationConnectorProperties.
        """
        self.openapi_types = {
            'redshift': DestinationConnectorPropertiesRedshift,
            's3': DestinationConnectorPropertiesS3,
            'salesforce': DestinationConnectorPropertiesSalesforce,
            'snowflake': DestinationConnectorPropertiesSnowflake,
            'event_bridge': DestinationConnectorPropertiesEventBridge,
            'lookout_metrics': object,
            'upsolver': DestinationConnectorPropertiesUpsolver,
            'honeycode': DestinationConnectorPropertiesHoneycode,
            'customer_profiles': DestinationConnectorPropertiesCustomerProfiles,
            'zendesk': DestinationConnectorPropertiesZendesk,
            'marketo': DestinationConnectorPropertiesMarketo,
            'custom_connector': DestinationConnectorPropertiesCustomConnector,
            'sapo_data': DestinationConnectorPropertiesSAPOData
        }

        self.attribute_map = {
            'redshift': 'Redshift',
            's3': 'S3',
            'salesforce': 'Salesforce',
            'snowflake': 'Snowflake',
            'event_bridge': 'EventBridge',
            'lookout_metrics': 'LookoutMetrics',
            'upsolver': 'Upsolver',
            'honeycode': 'Honeycode',
            'customer_profiles': 'CustomerProfiles',
            'zendesk': 'Zendesk',
            'marketo': 'Marketo',
            'custom_connector': 'CustomConnector',
            'sapo_data': 'SAPOData'
        }

        self._redshift = redshift
        self._s3 = s3
        self._salesforce = salesforce
        self._snowflake = snowflake
        self._event_bridge = event_bridge
        self._lookout_metrics = lookout_metrics
        self._upsolver = upsolver
        self._honeycode = honeycode
        self._customer_profiles = customer_profiles
        self._zendesk = zendesk
        self._marketo = marketo
        self._custom_connector = custom_connector
        self._sapo_data = sapo_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationConnectorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationConnectorProperties of this DestinationConnectorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def redshift(self):
        """Gets the redshift of this DestinationConnectorProperties.


        :return: The redshift of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesRedshift
        """
        return self._redshift

    @redshift.setter
    def redshift(self, redshift):
        """Sets the redshift of this DestinationConnectorProperties.


        :param redshift: The redshift of this DestinationConnectorProperties.
        :type redshift: DestinationConnectorPropertiesRedshift
        """

        self._redshift = redshift

    @property
    def s3(self):
        """Gets the s3 of this DestinationConnectorProperties.


        :return: The s3 of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesS3
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this DestinationConnectorProperties.


        :param s3: The s3 of this DestinationConnectorProperties.
        :type s3: DestinationConnectorPropertiesS3
        """

        self._s3 = s3

    @property
    def salesforce(self):
        """Gets the salesforce of this DestinationConnectorProperties.


        :return: The salesforce of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesSalesforce
        """
        return self._salesforce

    @salesforce.setter
    def salesforce(self, salesforce):
        """Sets the salesforce of this DestinationConnectorProperties.


        :param salesforce: The salesforce of this DestinationConnectorProperties.
        :type salesforce: DestinationConnectorPropertiesSalesforce
        """

        self._salesforce = salesforce

    @property
    def snowflake(self):
        """Gets the snowflake of this DestinationConnectorProperties.


        :return: The snowflake of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesSnowflake
        """
        return self._snowflake

    @snowflake.setter
    def snowflake(self, snowflake):
        """Sets the snowflake of this DestinationConnectorProperties.


        :param snowflake: The snowflake of this DestinationConnectorProperties.
        :type snowflake: DestinationConnectorPropertiesSnowflake
        """

        self._snowflake = snowflake

    @property
    def event_bridge(self):
        """Gets the event_bridge of this DestinationConnectorProperties.


        :return: The event_bridge of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesEventBridge
        """
        return self._event_bridge

    @event_bridge.setter
    def event_bridge(self, event_bridge):
        """Sets the event_bridge of this DestinationConnectorProperties.


        :param event_bridge: The event_bridge of this DestinationConnectorProperties.
        :type event_bridge: DestinationConnectorPropertiesEventBridge
        """

        self._event_bridge = event_bridge

    @property
    def lookout_metrics(self):
        """Gets the lookout_metrics of this DestinationConnectorProperties.


        :return: The lookout_metrics of this DestinationConnectorProperties.
        :rtype: object
        """
        return self._lookout_metrics

    @lookout_metrics.setter
    def lookout_metrics(self, lookout_metrics):
        """Sets the lookout_metrics of this DestinationConnectorProperties.


        :param lookout_metrics: The lookout_metrics of this DestinationConnectorProperties.
        :type lookout_metrics: object
        """

        self._lookout_metrics = lookout_metrics

    @property
    def upsolver(self):
        """Gets the upsolver of this DestinationConnectorProperties.


        :return: The upsolver of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesUpsolver
        """
        return self._upsolver

    @upsolver.setter
    def upsolver(self, upsolver):
        """Sets the upsolver of this DestinationConnectorProperties.


        :param upsolver: The upsolver of this DestinationConnectorProperties.
        :type upsolver: DestinationConnectorPropertiesUpsolver
        """

        self._upsolver = upsolver

    @property
    def honeycode(self):
        """Gets the honeycode of this DestinationConnectorProperties.


        :return: The honeycode of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesHoneycode
        """
        return self._honeycode

    @honeycode.setter
    def honeycode(self, honeycode):
        """Sets the honeycode of this DestinationConnectorProperties.


        :param honeycode: The honeycode of this DestinationConnectorProperties.
        :type honeycode: DestinationConnectorPropertiesHoneycode
        """

        self._honeycode = honeycode

    @property
    def customer_profiles(self):
        """Gets the customer_profiles of this DestinationConnectorProperties.


        :return: The customer_profiles of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesCustomerProfiles
        """
        return self._customer_profiles

    @customer_profiles.setter
    def customer_profiles(self, customer_profiles):
        """Sets the customer_profiles of this DestinationConnectorProperties.


        :param customer_profiles: The customer_profiles of this DestinationConnectorProperties.
        :type customer_profiles: DestinationConnectorPropertiesCustomerProfiles
        """

        self._customer_profiles = customer_profiles

    @property
    def zendesk(self):
        """Gets the zendesk of this DestinationConnectorProperties.


        :return: The zendesk of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesZendesk
        """
        return self._zendesk

    @zendesk.setter
    def zendesk(self, zendesk):
        """Sets the zendesk of this DestinationConnectorProperties.


        :param zendesk: The zendesk of this DestinationConnectorProperties.
        :type zendesk: DestinationConnectorPropertiesZendesk
        """

        self._zendesk = zendesk

    @property
    def marketo(self):
        """Gets the marketo of this DestinationConnectorProperties.


        :return: The marketo of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesMarketo
        """
        return self._marketo

    @marketo.setter
    def marketo(self, marketo):
        """Sets the marketo of this DestinationConnectorProperties.


        :param marketo: The marketo of this DestinationConnectorProperties.
        :type marketo: DestinationConnectorPropertiesMarketo
        """

        self._marketo = marketo

    @property
    def custom_connector(self):
        """Gets the custom_connector of this DestinationConnectorProperties.


        :return: The custom_connector of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesCustomConnector
        """
        return self._custom_connector

    @custom_connector.setter
    def custom_connector(self, custom_connector):
        """Sets the custom_connector of this DestinationConnectorProperties.


        :param custom_connector: The custom_connector of this DestinationConnectorProperties.
        :type custom_connector: DestinationConnectorPropertiesCustomConnector
        """

        self._custom_connector = custom_connector

    @property
    def sapo_data(self):
        """Gets the sapo_data of this DestinationConnectorProperties.


        :return: The sapo_data of this DestinationConnectorProperties.
        :rtype: DestinationConnectorPropertiesSAPOData
        """
        return self._sapo_data

    @sapo_data.setter
    def sapo_data(self, sapo_data):
        """Sets the sapo_data of this DestinationConnectorProperties.


        :param sapo_data: The sapo_data of this DestinationConnectorProperties.
        :type sapo_data: DestinationConnectorPropertiesSAPOData
        """

        self._sapo_data = sapo_data
