# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeConnectorProfilesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_profile_names: List[str]=None, connector_type: str=None, connector_label: str=None, max_results: int=None, next_token: str=None):
        """DescribeConnectorProfilesRequest - a model defined in OpenAPI

        :param connector_profile_names: The connector_profile_names of this DescribeConnectorProfilesRequest.
        :param connector_type: The connector_type of this DescribeConnectorProfilesRequest.
        :param connector_label: The connector_label of this DescribeConnectorProfilesRequest.
        :param max_results: The max_results of this DescribeConnectorProfilesRequest.
        :param next_token: The next_token of this DescribeConnectorProfilesRequest.
        """
        self.openapi_types = {
            'connector_profile_names': List[str],
            'connector_type': str,
            'connector_label': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'connector_profile_names': 'connectorProfileNames',
            'connector_type': 'connectorType',
            'connector_label': 'connectorLabel',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._connector_profile_names = connector_profile_names
        self._connector_type = connector_type
        self._connector_label = connector_label
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectorProfilesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnectorProfiles_request of this DescribeConnectorProfilesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_profile_names(self):
        """Gets the connector_profile_names of this DescribeConnectorProfilesRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 

        :return: The connector_profile_names of this DescribeConnectorProfilesRequest.
        :rtype: List[str]
        """
        return self._connector_profile_names

    @connector_profile_names.setter
    def connector_profile_names(self, connector_profile_names):
        """Sets the connector_profile_names of this DescribeConnectorProfilesRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 

        :param connector_profile_names: The connector_profile_names of this DescribeConnectorProfilesRequest.
        :type connector_profile_names: List[str]
        """
        if connector_profile_names is not None and len(connector_profile_names) > 100:
            raise ValueError("Invalid value for `connector_profile_names`, number of items must be less than or equal to `100`")
        if connector_profile_names is not None and len(connector_profile_names) < 0:
            raise ValueError("Invalid value for `connector_profile_names`, number of items must be greater than or equal to `0`")

        self._connector_profile_names = connector_profile_names

    @property
    def connector_type(self):
        """Gets the connector_type of this DescribeConnectorProfilesRequest.

         The type of connector, such as Salesforce, Amplitude, and so on. 

        :return: The connector_type of this DescribeConnectorProfilesRequest.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this DescribeConnectorProfilesRequest.

         The type of connector, such as Salesforce, Amplitude, and so on. 

        :param connector_type: The connector_type of this DescribeConnectorProfilesRequest.
        :type connector_type: str
        """
        allowed_values = ["Salesforce", "Singular", "Slack", "Redshift", "S3", "Marketo", "Googleanalytics", "Zendesk", "Servicenow", "Datadog", "Trendmicro", "Snowflake", "Dynatrace", "Infornexus", "Amplitude", "Veeva", "EventBridge", "LookoutMetrics", "Upsolver", "Honeycode", "CustomerProfiles", "SAPOData", "CustomConnector", "Pardot"]  # noqa: E501
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_label(self):
        """Gets the connector_label of this DescribeConnectorProfilesRequest.

        The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.

        :return: The connector_label of this DescribeConnectorProfilesRequest.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this DescribeConnectorProfilesRequest.

        The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.

        :param connector_label: The connector_label of this DescribeConnectorProfilesRequest.
        :type connector_label: str
        """
        if connector_label is not None and len(connector_label) > 256:
            raise ValueError("Invalid value for `connector_label`, length must be less than or equal to `256`")
        if connector_label is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', connector_label):
            raise ValueError("Invalid value for `connector_label`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._connector_label = connector_label

    @property
    def max_results(self):
        """Gets the max_results of this DescribeConnectorProfilesRequest.

         Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). 

        :return: The max_results of this DescribeConnectorProfilesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeConnectorProfilesRequest.

         Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). 

        :param max_results: The max_results of this DescribeConnectorProfilesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeConnectorProfilesRequest.

         The pagination token for the next page of data. 

        :return: The next_token of this DescribeConnectorProfilesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeConnectorProfilesRequest.

         The pagination token for the next page of data. 

        :param next_token: The next_token of this DescribeConnectorProfilesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and not re.search(r'\S+', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/\S+/`")

        self._next_token = next_token
