# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeConnectorsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_configurations: Dict=None, connectors: List=None, next_token: str=None):
        """DescribeConnectorsResponse - a model defined in OpenAPI

        :param connector_configurations: The connector_configurations of this DescribeConnectorsResponse.
        :param connectors: The connectors of this DescribeConnectorsResponse.
        :param next_token: The next_token of this DescribeConnectorsResponse.
        """
        self.openapi_types = {
            'connector_configurations': Dict,
            'connectors': List,
            'next_token': str
        }

        self.attribute_map = {
            'connector_configurations': 'connectorConfigurations',
            'connectors': 'connectors',
            'next_token': 'nextToken'
        }

        self._connector_configurations = connector_configurations
        self._connectors = connectors
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectorsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnectorsResponse of this DescribeConnectorsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_configurations(self):
        """Gets the connector_configurations of this DescribeConnectorsResponse.


        :return: The connector_configurations of this DescribeConnectorsResponse.
        :rtype: Dict
        """
        return self._connector_configurations

    @connector_configurations.setter
    def connector_configurations(self, connector_configurations):
        """Sets the connector_configurations of this DescribeConnectorsResponse.


        :param connector_configurations: The connector_configurations of this DescribeConnectorsResponse.
        :type connector_configurations: Dict
        """

        self._connector_configurations = connector_configurations

    @property
    def connectors(self):
        """Gets the connectors of this DescribeConnectorsResponse.


        :return: The connectors of this DescribeConnectorsResponse.
        :rtype: List
        """
        return self._connectors

    @connectors.setter
    def connectors(self, connectors):
        """Sets the connectors of this DescribeConnectorsResponse.


        :param connectors: The connectors of this DescribeConnectorsResponse.
        :type connectors: List
        """

        self._connectors = connectors

    @property
    def next_token(self):
        """Gets the next_token of this DescribeConnectorsResponse.


        :return: The next_token of this DescribeConnectorsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeConnectorsResponse.


        :param next_token: The next_token of this DescribeConnectorsResponse.
        :type next_token: str
        """

        self._next_token = next_token
