# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upsolver_destination_properties_s3_output_format_config import UpsolverDestinationPropertiesS3OutputFormatConfig
from openapi_server import util


class DestinationConnectorPropertiesUpsolver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, bucket_prefix: str=None, s3_output_format_config: UpsolverDestinationPropertiesS3OutputFormatConfig=None):
        """DestinationConnectorPropertiesUpsolver - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this DestinationConnectorPropertiesUpsolver.
        :param bucket_prefix: The bucket_prefix of this DestinationConnectorPropertiesUpsolver.
        :param s3_output_format_config: The s3_output_format_config of this DestinationConnectorPropertiesUpsolver.
        """
        self.openapi_types = {
            'bucket_name': str,
            'bucket_prefix': str,
            's3_output_format_config': UpsolverDestinationPropertiesS3OutputFormatConfig
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'bucket_prefix': 'bucketPrefix',
            's3_output_format_config': 's3OutputFormatConfig'
        }

        self._bucket_name = bucket_name
        self._bucket_prefix = bucket_prefix
        self._s3_output_format_config = s3_output_format_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationConnectorPropertiesUpsolver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationConnectorProperties_Upsolver of this DestinationConnectorPropertiesUpsolver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this DestinationConnectorPropertiesUpsolver.


        :return: The bucket_name of this DestinationConnectorPropertiesUpsolver.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this DestinationConnectorPropertiesUpsolver.


        :param bucket_name: The bucket_name of this DestinationConnectorPropertiesUpsolver.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def bucket_prefix(self):
        """Gets the bucket_prefix of this DestinationConnectorPropertiesUpsolver.


        :return: The bucket_prefix of this DestinationConnectorPropertiesUpsolver.
        :rtype: str
        """
        return self._bucket_prefix

    @bucket_prefix.setter
    def bucket_prefix(self, bucket_prefix):
        """Sets the bucket_prefix of this DestinationConnectorPropertiesUpsolver.


        :param bucket_prefix: The bucket_prefix of this DestinationConnectorPropertiesUpsolver.
        :type bucket_prefix: str
        """

        self._bucket_prefix = bucket_prefix

    @property
    def s3_output_format_config(self):
        """Gets the s3_output_format_config of this DestinationConnectorPropertiesUpsolver.


        :return: The s3_output_format_config of this DestinationConnectorPropertiesUpsolver.
        :rtype: UpsolverDestinationPropertiesS3OutputFormatConfig
        """
        return self._s3_output_format_config

    @s3_output_format_config.setter
    def s3_output_format_config(self, s3_output_format_config):
        """Sets the s3_output_format_config of this DestinationConnectorPropertiesUpsolver.


        :param s3_output_format_config: The s3_output_format_config of this DestinationConnectorPropertiesUpsolver.
        :type s3_output_format_config: UpsolverDestinationPropertiesS3OutputFormatConfig
        """
        if s3_output_format_config is None:
            raise ValueError("Invalid value for `s3_output_format_config`, must not be `None`")

        self._s3_output_format_config = s3_output_format_config
