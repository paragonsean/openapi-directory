# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_type_details_field_length_range import FieldTypeDetailsFieldLengthRange
from openapi_server.models.field_type_details_field_value_range import FieldTypeDetailsFieldValueRange
from openapi_server import util


class SupportedFieldTypeDetailsV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_type: str=None, filter_operators: List=None, supported_values: List=None, value_regex_pattern: str=None, supported_date_format: str=None, field_value_range: FieldTypeDetailsFieldValueRange=None, field_length_range: FieldTypeDetailsFieldLengthRange=None):
        """SupportedFieldTypeDetailsV1 - a model defined in OpenAPI

        :param field_type: The field_type of this SupportedFieldTypeDetailsV1.
        :param filter_operators: The filter_operators of this SupportedFieldTypeDetailsV1.
        :param supported_values: The supported_values of this SupportedFieldTypeDetailsV1.
        :param value_regex_pattern: The value_regex_pattern of this SupportedFieldTypeDetailsV1.
        :param supported_date_format: The supported_date_format of this SupportedFieldTypeDetailsV1.
        :param field_value_range: The field_value_range of this SupportedFieldTypeDetailsV1.
        :param field_length_range: The field_length_range of this SupportedFieldTypeDetailsV1.
        """
        self.openapi_types = {
            'field_type': str,
            'filter_operators': List,
            'supported_values': List,
            'value_regex_pattern': str,
            'supported_date_format': str,
            'field_value_range': FieldTypeDetailsFieldValueRange,
            'field_length_range': FieldTypeDetailsFieldLengthRange
        }

        self.attribute_map = {
            'field_type': 'fieldType',
            'filter_operators': 'filterOperators',
            'supported_values': 'supportedValues',
            'value_regex_pattern': 'valueRegexPattern',
            'supported_date_format': 'supportedDateFormat',
            'field_value_range': 'fieldValueRange',
            'field_length_range': 'fieldLengthRange'
        }

        self._field_type = field_type
        self._filter_operators = filter_operators
        self._supported_values = supported_values
        self._value_regex_pattern = value_regex_pattern
        self._supported_date_format = supported_date_format
        self._field_value_range = field_value_range
        self._field_length_range = field_length_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportedFieldTypeDetailsV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportedFieldTypeDetails_v1 of this SupportedFieldTypeDetailsV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_type(self):
        """Gets the field_type of this SupportedFieldTypeDetailsV1.


        :return: The field_type of this SupportedFieldTypeDetailsV1.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this SupportedFieldTypeDetailsV1.


        :param field_type: The field_type of this SupportedFieldTypeDetailsV1.
        :type field_type: str
        """
        if field_type is None:
            raise ValueError("Invalid value for `field_type`, must not be `None`")

        self._field_type = field_type

    @property
    def filter_operators(self):
        """Gets the filter_operators of this SupportedFieldTypeDetailsV1.


        :return: The filter_operators of this SupportedFieldTypeDetailsV1.
        :rtype: List
        """
        return self._filter_operators

    @filter_operators.setter
    def filter_operators(self, filter_operators):
        """Sets the filter_operators of this SupportedFieldTypeDetailsV1.


        :param filter_operators: The filter_operators of this SupportedFieldTypeDetailsV1.
        :type filter_operators: List
        """
        if filter_operators is None:
            raise ValueError("Invalid value for `filter_operators`, must not be `None`")

        self._filter_operators = filter_operators

    @property
    def supported_values(self):
        """Gets the supported_values of this SupportedFieldTypeDetailsV1.


        :return: The supported_values of this SupportedFieldTypeDetailsV1.
        :rtype: List
        """
        return self._supported_values

    @supported_values.setter
    def supported_values(self, supported_values):
        """Sets the supported_values of this SupportedFieldTypeDetailsV1.


        :param supported_values: The supported_values of this SupportedFieldTypeDetailsV1.
        :type supported_values: List
        """

        self._supported_values = supported_values

    @property
    def value_regex_pattern(self):
        """Gets the value_regex_pattern of this SupportedFieldTypeDetailsV1.


        :return: The value_regex_pattern of this SupportedFieldTypeDetailsV1.
        :rtype: str
        """
        return self._value_regex_pattern

    @value_regex_pattern.setter
    def value_regex_pattern(self, value_regex_pattern):
        """Sets the value_regex_pattern of this SupportedFieldTypeDetailsV1.


        :param value_regex_pattern: The value_regex_pattern of this SupportedFieldTypeDetailsV1.
        :type value_regex_pattern: str
        """

        self._value_regex_pattern = value_regex_pattern

    @property
    def supported_date_format(self):
        """Gets the supported_date_format of this SupportedFieldTypeDetailsV1.


        :return: The supported_date_format of this SupportedFieldTypeDetailsV1.
        :rtype: str
        """
        return self._supported_date_format

    @supported_date_format.setter
    def supported_date_format(self, supported_date_format):
        """Sets the supported_date_format of this SupportedFieldTypeDetailsV1.


        :param supported_date_format: The supported_date_format of this SupportedFieldTypeDetailsV1.
        :type supported_date_format: str
        """

        self._supported_date_format = supported_date_format

    @property
    def field_value_range(self):
        """Gets the field_value_range of this SupportedFieldTypeDetailsV1.


        :return: The field_value_range of this SupportedFieldTypeDetailsV1.
        :rtype: FieldTypeDetailsFieldValueRange
        """
        return self._field_value_range

    @field_value_range.setter
    def field_value_range(self, field_value_range):
        """Sets the field_value_range of this SupportedFieldTypeDetailsV1.


        :param field_value_range: The field_value_range of this SupportedFieldTypeDetailsV1.
        :type field_value_range: FieldTypeDetailsFieldValueRange
        """

        self._field_value_range = field_value_range

    @property
    def field_length_range(self):
        """Gets the field_length_range of this SupportedFieldTypeDetailsV1.


        :return: The field_length_range of this SupportedFieldTypeDetailsV1.
        :rtype: FieldTypeDetailsFieldLengthRange
        """
        return self._field_length_range

    @field_length_range.setter
    def field_length_range(self, field_length_range):
        """Sets the field_length_range of this SupportedFieldTypeDetailsV1.


        :param field_length_range: The field_length_range of this SupportedFieldTypeDetailsV1.
        :type field_length_range: FieldTypeDetailsFieldLengthRange
        """

        self._field_length_range = field_length_range
