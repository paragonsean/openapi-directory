# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_connector_profile_request_connector_profile_config import CreateConnectorProfileRequestConnectorProfileConfig
import re
from openapi_server import util


class UpdateConnectorProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_profile_name: str=None, connection_mode: str=None, connector_profile_config: CreateConnectorProfileRequestConnectorProfileConfig=None, client_token: str=None):
        """UpdateConnectorProfileRequest - a model defined in OpenAPI

        :param connector_profile_name: The connector_profile_name of this UpdateConnectorProfileRequest.
        :param connection_mode: The connection_mode of this UpdateConnectorProfileRequest.
        :param connector_profile_config: The connector_profile_config of this UpdateConnectorProfileRequest.
        :param client_token: The client_token of this UpdateConnectorProfileRequest.
        """
        self.openapi_types = {
            'connector_profile_name': str,
            'connection_mode': str,
            'connector_profile_config': CreateConnectorProfileRequestConnectorProfileConfig,
            'client_token': str
        }

        self.attribute_map = {
            'connector_profile_name': 'connectorProfileName',
            'connection_mode': 'connectionMode',
            'connector_profile_config': 'connectorProfileConfig',
            'client_token': 'clientToken'
        }

        self._connector_profile_name = connector_profile_name
        self._connection_mode = connection_mode
        self._connector_profile_config = connector_profile_config
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateConnectorProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateConnectorProfile_request of this UpdateConnectorProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this UpdateConnectorProfileRequest.

         The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 

        :return: The connector_profile_name of this UpdateConnectorProfileRequest.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this UpdateConnectorProfileRequest.

         The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 

        :param connector_profile_name: The connector_profile_name of this UpdateConnectorProfileRequest.
        :type connector_profile_name: str
        """
        if connector_profile_name is None:
            raise ValueError("Invalid value for `connector_profile_name`, must not be `None`")
        if connector_profile_name is not None and len(connector_profile_name) > 256:
            raise ValueError("Invalid value for `connector_profile_name`, length must be less than or equal to `256`")
        if connector_profile_name is not None and not re.search(r'[\w\/!@#+=.-]+', connector_profile_name):
            raise ValueError("Invalid value for `connector_profile_name`, must be a follow pattern or equal to `/[\w\/!@#+=.-]+/`")

        self._connector_profile_name = connector_profile_name

    @property
    def connection_mode(self):
        """Gets the connection_mode of this UpdateConnectorProfileRequest.

         Indicates the connection mode and if it is public or private. 

        :return: The connection_mode of this UpdateConnectorProfileRequest.
        :rtype: str
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this UpdateConnectorProfileRequest.

         Indicates the connection mode and if it is public or private. 

        :param connection_mode: The connection_mode of this UpdateConnectorProfileRequest.
        :type connection_mode: str
        """
        allowed_values = ["Public", "Private"]  # noqa: E501
        if connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_mode` ({0}), must be one of {1}"
                .format(connection_mode, allowed_values)
            )

        self._connection_mode = connection_mode

    @property
    def connector_profile_config(self):
        """Gets the connector_profile_config of this UpdateConnectorProfileRequest.


        :return: The connector_profile_config of this UpdateConnectorProfileRequest.
        :rtype: CreateConnectorProfileRequestConnectorProfileConfig
        """
        return self._connector_profile_config

    @connector_profile_config.setter
    def connector_profile_config(self, connector_profile_config):
        """Sets the connector_profile_config of this UpdateConnectorProfileRequest.


        :param connector_profile_config: The connector_profile_config of this UpdateConnectorProfileRequest.
        :type connector_profile_config: CreateConnectorProfileRequestConnectorProfileConfig
        """
        if connector_profile_config is None:
            raise ValueError("Invalid value for `connector_profile_config`, must not be `None`")

        self._connector_profile_config = connector_profile_config

    @property
    def client_token(self):
        """Gets the client_token of this UpdateConnectorProfileRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorProfile</code>. The token is active for 8 hours.</p>

        :return: The client_token of this UpdateConnectorProfileRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateConnectorProfileRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorProfile</code>. The token is active for 8 hours.</p>

        :param client_token: The client_token of this UpdateConnectorProfileRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 256:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `256`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[ -~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[ -~]+/`")

        self._client_token = client_token
