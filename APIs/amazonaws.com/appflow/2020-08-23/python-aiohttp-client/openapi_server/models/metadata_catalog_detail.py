# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_type import CatalogType
from openapi_server.models.metadata_catalog_detail_partition_registration_output import MetadataCatalogDetailPartitionRegistrationOutput
from openapi_server.models.metadata_catalog_detail_table_registration_output import MetadataCatalogDetailTableRegistrationOutput
from openapi_server import util


class MetadataCatalogDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_type: CatalogType=None, table_name: str=None, table_registration_output: MetadataCatalogDetailTableRegistrationOutput=None, partition_registration_output: MetadataCatalogDetailPartitionRegistrationOutput=None):
        """MetadataCatalogDetail - a model defined in OpenAPI

        :param catalog_type: The catalog_type of this MetadataCatalogDetail.
        :param table_name: The table_name of this MetadataCatalogDetail.
        :param table_registration_output: The table_registration_output of this MetadataCatalogDetail.
        :param partition_registration_output: The partition_registration_output of this MetadataCatalogDetail.
        """
        self.openapi_types = {
            'catalog_type': CatalogType,
            'table_name': str,
            'table_registration_output': MetadataCatalogDetailTableRegistrationOutput,
            'partition_registration_output': MetadataCatalogDetailPartitionRegistrationOutput
        }

        self.attribute_map = {
            'catalog_type': 'catalogType',
            'table_name': 'tableName',
            'table_registration_output': 'tableRegistrationOutput',
            'partition_registration_output': 'partitionRegistrationOutput'
        }

        self._catalog_type = catalog_type
        self._table_name = table_name
        self._table_registration_output = table_registration_output
        self._partition_registration_output = partition_registration_output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataCatalogDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataCatalogDetail of this MetadataCatalogDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_type(self):
        """Gets the catalog_type of this MetadataCatalogDetail.


        :return: The catalog_type of this MetadataCatalogDetail.
        :rtype: CatalogType
        """
        return self._catalog_type

    @catalog_type.setter
    def catalog_type(self, catalog_type):
        """Sets the catalog_type of this MetadataCatalogDetail.


        :param catalog_type: The catalog_type of this MetadataCatalogDetail.
        :type catalog_type: CatalogType
        """

        self._catalog_type = catalog_type

    @property
    def table_name(self):
        """Gets the table_name of this MetadataCatalogDetail.


        :return: The table_name of this MetadataCatalogDetail.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this MetadataCatalogDetail.


        :param table_name: The table_name of this MetadataCatalogDetail.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def table_registration_output(self):
        """Gets the table_registration_output of this MetadataCatalogDetail.


        :return: The table_registration_output of this MetadataCatalogDetail.
        :rtype: MetadataCatalogDetailTableRegistrationOutput
        """
        return self._table_registration_output

    @table_registration_output.setter
    def table_registration_output(self, table_registration_output):
        """Sets the table_registration_output of this MetadataCatalogDetail.


        :param table_registration_output: The table_registration_output of this MetadataCatalogDetail.
        :type table_registration_output: MetadataCatalogDetailTableRegistrationOutput
        """

        self._table_registration_output = table_registration_output

    @property
    def partition_registration_output(self):
        """Gets the partition_registration_output of this MetadataCatalogDetail.


        :return: The partition_registration_output of this MetadataCatalogDetail.
        :rtype: MetadataCatalogDetailPartitionRegistrationOutput
        """
        return self._partition_registration_output

    @partition_registration_output.setter
    def partition_registration_output(self, partition_registration_output):
        """Sets the partition_registration_output of this MetadataCatalogDetail.


        :param partition_registration_output: The partition_registration_output of this MetadataCatalogDetail.
        :type partition_registration_output: MetadataCatalogDetailPartitionRegistrationOutput
        """

        self._partition_registration_output = partition_registration_output
