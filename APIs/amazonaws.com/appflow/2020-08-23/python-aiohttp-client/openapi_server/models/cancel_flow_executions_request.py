# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CancelFlowExecutionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, execution_ids: List[str]=None):
        """CancelFlowExecutionsRequest - a model defined in OpenAPI

        :param flow_name: The flow_name of this CancelFlowExecutionsRequest.
        :param execution_ids: The execution_ids of this CancelFlowExecutionsRequest.
        """
        self.openapi_types = {
            'flow_name': str,
            'execution_ids': List[str]
        }

        self.attribute_map = {
            'flow_name': 'flowName',
            'execution_ids': 'executionIds'
        }

        self._flow_name = flow_name
        self._execution_ids = execution_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelFlowExecutionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelFlowExecutions_request of this CancelFlowExecutionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this CancelFlowExecutionsRequest.

        The name of a flow with active runs that you want to cancel.

        :return: The flow_name of this CancelFlowExecutionsRequest.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this CancelFlowExecutionsRequest.

        The name of a flow with active runs that you want to cancel.

        :param flow_name: The flow_name of this CancelFlowExecutionsRequest.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")
        if flow_name is not None and len(flow_name) > 256:
            raise ValueError("Invalid value for `flow_name`, length must be less than or equal to `256`")
        if flow_name is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', flow_name):
            raise ValueError("Invalid value for `flow_name`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._flow_name = flow_name

    @property
    def execution_ids(self):
        """Gets the execution_ids of this CancelFlowExecutionsRequest.

        <p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p> <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>

        :return: The execution_ids of this CancelFlowExecutionsRequest.
        :rtype: List[str]
        """
        return self._execution_ids

    @execution_ids.setter
    def execution_ids(self, execution_ids):
        """Sets the execution_ids of this CancelFlowExecutionsRequest.

        <p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p> <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>

        :param execution_ids: The execution_ids of this CancelFlowExecutionsRequest.
        :type execution_ids: List[str]
        """
        if execution_ids is not None and len(execution_ids) > 100:
            raise ValueError("Invalid value for `execution_ids`, number of items must be less than or equal to `100`")
        if execution_ids is not None and len(execution_ids) < 0:
            raise ValueError("Invalid value for `execution_ids`, number of items must be greater than or equal to `0`")

        self._execution_ids = execution_ids
