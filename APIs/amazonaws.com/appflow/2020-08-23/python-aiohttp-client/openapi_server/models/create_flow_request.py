# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_flow_request_metadata_catalog_config import CreateFlowRequestMetadataCatalogConfig
from openapi_server.models.create_flow_request_source_flow_config import CreateFlowRequestSourceFlowConfig
from openapi_server.models.create_flow_request_trigger_config import CreateFlowRequestTriggerConfig
from openapi_server.models.destination_flow_config import DestinationFlowConfig
from openapi_server.models.task import Task
import re
from openapi_server import util


class CreateFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, description: str=None, kms_arn: str=None, trigger_config: CreateFlowRequestTriggerConfig=None, source_flow_config: CreateFlowRequestSourceFlowConfig=None, destination_flow_config_list: List[DestinationFlowConfig]=None, tasks: List[Task]=None, tags: Dict[str, str]=None, metadata_catalog_config: CreateFlowRequestMetadataCatalogConfig=None, client_token: str=None):
        """CreateFlowRequest - a model defined in OpenAPI

        :param flow_name: The flow_name of this CreateFlowRequest.
        :param description: The description of this CreateFlowRequest.
        :param kms_arn: The kms_arn of this CreateFlowRequest.
        :param trigger_config: The trigger_config of this CreateFlowRequest.
        :param source_flow_config: The source_flow_config of this CreateFlowRequest.
        :param destination_flow_config_list: The destination_flow_config_list of this CreateFlowRequest.
        :param tasks: The tasks of this CreateFlowRequest.
        :param tags: The tags of this CreateFlowRequest.
        :param metadata_catalog_config: The metadata_catalog_config of this CreateFlowRequest.
        :param client_token: The client_token of this CreateFlowRequest.
        """
        self.openapi_types = {
            'flow_name': str,
            'description': str,
            'kms_arn': str,
            'trigger_config': CreateFlowRequestTriggerConfig,
            'source_flow_config': CreateFlowRequestSourceFlowConfig,
            'destination_flow_config_list': List[DestinationFlowConfig],
            'tasks': List[Task],
            'tags': Dict[str, str],
            'metadata_catalog_config': CreateFlowRequestMetadataCatalogConfig,
            'client_token': str
        }

        self.attribute_map = {
            'flow_name': 'flowName',
            'description': 'description',
            'kms_arn': 'kmsArn',
            'trigger_config': 'triggerConfig',
            'source_flow_config': 'sourceFlowConfig',
            'destination_flow_config_list': 'destinationFlowConfigList',
            'tasks': 'tasks',
            'tags': 'tags',
            'metadata_catalog_config': 'metadataCatalogConfig',
            'client_token': 'clientToken'
        }

        self._flow_name = flow_name
        self._description = description
        self._kms_arn = kms_arn
        self._trigger_config = trigger_config
        self._source_flow_config = source_flow_config
        self._destination_flow_config_list = destination_flow_config_list
        self._tasks = tasks
        self._tags = tags
        self._metadata_catalog_config = metadata_catalog_config
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFlow_request of this CreateFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this CreateFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :return: The flow_name of this CreateFlowRequest.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this CreateFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :param flow_name: The flow_name of this CreateFlowRequest.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")
        if flow_name is not None and len(flow_name) > 256:
            raise ValueError("Invalid value for `flow_name`, length must be less than or equal to `256`")
        if flow_name is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', flow_name):
            raise ValueError("Invalid value for `flow_name`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._flow_name = flow_name

    @property
    def description(self):
        """Gets the description of this CreateFlowRequest.

         A description of the flow you want to create. 

        :return: The description of this CreateFlowRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFlowRequest.

         A description of the flow you want to create. 

        :param description: The description of this CreateFlowRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")
        if description is not None and not re.search(r'[\w!@#\-.?,\s]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\w!@#\-.?,\s]*/`")

        self._description = description

    @property
    def kms_arn(self):
        """Gets the kms_arn of this CreateFlowRequest.

         The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 

        :return: The kms_arn of this CreateFlowRequest.
        :rtype: str
        """
        return self._kms_arn

    @kms_arn.setter
    def kms_arn(self, kms_arn):
        """Sets the kms_arn of this CreateFlowRequest.

         The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 

        :param kms_arn: The kms_arn of this CreateFlowRequest.
        :type kms_arn: str
        """
        if kms_arn is not None and len(kms_arn) > 2048:
            raise ValueError("Invalid value for `kms_arn`, length must be less than or equal to `2048`")
        if kms_arn is not None and len(kms_arn) < 20:
            raise ValueError("Invalid value for `kms_arn`, length must be greater than or equal to `20`")
        if kms_arn is not None and not re.search(r'arn:aws:kms:.*:[0-9]+:.*', kms_arn):
            raise ValueError("Invalid value for `kms_arn`, must be a follow pattern or equal to `/arn:aws:kms:.*:[0-9]+:.*/`")

        self._kms_arn = kms_arn

    @property
    def trigger_config(self):
        """Gets the trigger_config of this CreateFlowRequest.


        :return: The trigger_config of this CreateFlowRequest.
        :rtype: CreateFlowRequestTriggerConfig
        """
        return self._trigger_config

    @trigger_config.setter
    def trigger_config(self, trigger_config):
        """Sets the trigger_config of this CreateFlowRequest.


        :param trigger_config: The trigger_config of this CreateFlowRequest.
        :type trigger_config: CreateFlowRequestTriggerConfig
        """
        if trigger_config is None:
            raise ValueError("Invalid value for `trigger_config`, must not be `None`")

        self._trigger_config = trigger_config

    @property
    def source_flow_config(self):
        """Gets the source_flow_config of this CreateFlowRequest.


        :return: The source_flow_config of this CreateFlowRequest.
        :rtype: CreateFlowRequestSourceFlowConfig
        """
        return self._source_flow_config

    @source_flow_config.setter
    def source_flow_config(self, source_flow_config):
        """Sets the source_flow_config of this CreateFlowRequest.


        :param source_flow_config: The source_flow_config of this CreateFlowRequest.
        :type source_flow_config: CreateFlowRequestSourceFlowConfig
        """
        if source_flow_config is None:
            raise ValueError("Invalid value for `source_flow_config`, must not be `None`")

        self._source_flow_config = source_flow_config

    @property
    def destination_flow_config_list(self):
        """Gets the destination_flow_config_list of this CreateFlowRequest.

         The configuration that controls how Amazon AppFlow places data in the destination connector. 

        :return: The destination_flow_config_list of this CreateFlowRequest.
        :rtype: List[DestinationFlowConfig]
        """
        return self._destination_flow_config_list

    @destination_flow_config_list.setter
    def destination_flow_config_list(self, destination_flow_config_list):
        """Sets the destination_flow_config_list of this CreateFlowRequest.

         The configuration that controls how Amazon AppFlow places data in the destination connector. 

        :param destination_flow_config_list: The destination_flow_config_list of this CreateFlowRequest.
        :type destination_flow_config_list: List[DestinationFlowConfig]
        """
        if destination_flow_config_list is None:
            raise ValueError("Invalid value for `destination_flow_config_list`, must not be `None`")

        self._destination_flow_config_list = destination_flow_config_list

    @property
    def tasks(self):
        """Gets the tasks of this CreateFlowRequest.

         A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. 

        :return: The tasks of this CreateFlowRequest.
        :rtype: List[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this CreateFlowRequest.

         A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. 

        :param tasks: The tasks of this CreateFlowRequest.
        :type tasks: List[Task]
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")

        self._tasks = tasks

    @property
    def tags(self):
        """Gets the tags of this CreateFlowRequest.

         The tags used to organize, track, or control access for your flow. 

        :return: The tags of this CreateFlowRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFlowRequest.

         The tags used to organize, track, or control access for your flow. 

        :param tags: The tags of this CreateFlowRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def metadata_catalog_config(self):
        """Gets the metadata_catalog_config of this CreateFlowRequest.


        :return: The metadata_catalog_config of this CreateFlowRequest.
        :rtype: CreateFlowRequestMetadataCatalogConfig
        """
        return self._metadata_catalog_config

    @metadata_catalog_config.setter
    def metadata_catalog_config(self, metadata_catalog_config):
        """Sets the metadata_catalog_config of this CreateFlowRequest.


        :param metadata_catalog_config: The metadata_catalog_config of this CreateFlowRequest.
        :type metadata_catalog_config: CreateFlowRequestMetadataCatalogConfig
        """

        self._metadata_catalog_config = metadata_catalog_config

    @property
    def client_token(self):
        """Gets the client_token of this CreateFlowRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateFlow</code>. The token is active for 8 hours.</p>

        :return: The client_token of this CreateFlowRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateFlowRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateFlow</code>. The token is active for 8 hours.</p>

        :param client_token: The client_token of this CreateFlowRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 256:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `256`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[ -~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[ -~]+/`")

        self._client_token = client_token
