# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_flow_request_metadata_catalog_config import CreateFlowRequestMetadataCatalogConfig
from openapi_server.models.create_flow_request_source_flow_config import CreateFlowRequestSourceFlowConfig
from openapi_server.models.create_flow_request_trigger_config import CreateFlowRequestTriggerConfig
from openapi_server.models.destination_flow_config import DestinationFlowConfig
from openapi_server.models.task import Task
import re
from openapi_server import util


class UpdateFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, description: str=None, trigger_config: CreateFlowRequestTriggerConfig=None, source_flow_config: CreateFlowRequestSourceFlowConfig=None, destination_flow_config_list: List[DestinationFlowConfig]=None, tasks: List[Task]=None, metadata_catalog_config: CreateFlowRequestMetadataCatalogConfig=None, client_token: str=None):
        """UpdateFlowRequest - a model defined in OpenAPI

        :param flow_name: The flow_name of this UpdateFlowRequest.
        :param description: The description of this UpdateFlowRequest.
        :param trigger_config: The trigger_config of this UpdateFlowRequest.
        :param source_flow_config: The source_flow_config of this UpdateFlowRequest.
        :param destination_flow_config_list: The destination_flow_config_list of this UpdateFlowRequest.
        :param tasks: The tasks of this UpdateFlowRequest.
        :param metadata_catalog_config: The metadata_catalog_config of this UpdateFlowRequest.
        :param client_token: The client_token of this UpdateFlowRequest.
        """
        self.openapi_types = {
            'flow_name': str,
            'description': str,
            'trigger_config': CreateFlowRequestTriggerConfig,
            'source_flow_config': CreateFlowRequestSourceFlowConfig,
            'destination_flow_config_list': List[DestinationFlowConfig],
            'tasks': List[Task],
            'metadata_catalog_config': CreateFlowRequestMetadataCatalogConfig,
            'client_token': str
        }

        self.attribute_map = {
            'flow_name': 'flowName',
            'description': 'description',
            'trigger_config': 'triggerConfig',
            'source_flow_config': 'sourceFlowConfig',
            'destination_flow_config_list': 'destinationFlowConfigList',
            'tasks': 'tasks',
            'metadata_catalog_config': 'metadataCatalogConfig',
            'client_token': 'clientToken'
        }

        self._flow_name = flow_name
        self._description = description
        self._trigger_config = trigger_config
        self._source_flow_config = source_flow_config
        self._destination_flow_config_list = destination_flow_config_list
        self._tasks = tasks
        self._metadata_catalog_config = metadata_catalog_config
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFlow_request of this UpdateFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this UpdateFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :return: The flow_name of this UpdateFlowRequest.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this UpdateFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :param flow_name: The flow_name of this UpdateFlowRequest.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")
        if flow_name is not None and len(flow_name) > 256:
            raise ValueError("Invalid value for `flow_name`, length must be less than or equal to `256`")
        if flow_name is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', flow_name):
            raise ValueError("Invalid value for `flow_name`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._flow_name = flow_name

    @property
    def description(self):
        """Gets the description of this UpdateFlowRequest.

         A description of the flow. 

        :return: The description of this UpdateFlowRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateFlowRequest.

         A description of the flow. 

        :param description: The description of this UpdateFlowRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")
        if description is not None and not re.search(r'[\w!@#\-.?,\s]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\w!@#\-.?,\s]*/`")

        self._description = description

    @property
    def trigger_config(self):
        """Gets the trigger_config of this UpdateFlowRequest.


        :return: The trigger_config of this UpdateFlowRequest.
        :rtype: CreateFlowRequestTriggerConfig
        """
        return self._trigger_config

    @trigger_config.setter
    def trigger_config(self, trigger_config):
        """Sets the trigger_config of this UpdateFlowRequest.


        :param trigger_config: The trigger_config of this UpdateFlowRequest.
        :type trigger_config: CreateFlowRequestTriggerConfig
        """
        if trigger_config is None:
            raise ValueError("Invalid value for `trigger_config`, must not be `None`")

        self._trigger_config = trigger_config

    @property
    def source_flow_config(self):
        """Gets the source_flow_config of this UpdateFlowRequest.


        :return: The source_flow_config of this UpdateFlowRequest.
        :rtype: CreateFlowRequestSourceFlowConfig
        """
        return self._source_flow_config

    @source_flow_config.setter
    def source_flow_config(self, source_flow_config):
        """Sets the source_flow_config of this UpdateFlowRequest.


        :param source_flow_config: The source_flow_config of this UpdateFlowRequest.
        :type source_flow_config: CreateFlowRequestSourceFlowConfig
        """
        if source_flow_config is None:
            raise ValueError("Invalid value for `source_flow_config`, must not be `None`")

        self._source_flow_config = source_flow_config

    @property
    def destination_flow_config_list(self):
        """Gets the destination_flow_config_list of this UpdateFlowRequest.

         The configuration that controls how Amazon AppFlow transfers data to the destination connector. 

        :return: The destination_flow_config_list of this UpdateFlowRequest.
        :rtype: List[DestinationFlowConfig]
        """
        return self._destination_flow_config_list

    @destination_flow_config_list.setter
    def destination_flow_config_list(self, destination_flow_config_list):
        """Sets the destination_flow_config_list of this UpdateFlowRequest.

         The configuration that controls how Amazon AppFlow transfers data to the destination connector. 

        :param destination_flow_config_list: The destination_flow_config_list of this UpdateFlowRequest.
        :type destination_flow_config_list: List[DestinationFlowConfig]
        """
        if destination_flow_config_list is None:
            raise ValueError("Invalid value for `destination_flow_config_list`, must not be `None`")

        self._destination_flow_config_list = destination_flow_config_list

    @property
    def tasks(self):
        """Gets the tasks of this UpdateFlowRequest.

         A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. 

        :return: The tasks of this UpdateFlowRequest.
        :rtype: List[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this UpdateFlowRequest.

         A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. 

        :param tasks: The tasks of this UpdateFlowRequest.
        :type tasks: List[Task]
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")

        self._tasks = tasks

    @property
    def metadata_catalog_config(self):
        """Gets the metadata_catalog_config of this UpdateFlowRequest.


        :return: The metadata_catalog_config of this UpdateFlowRequest.
        :rtype: CreateFlowRequestMetadataCatalogConfig
        """
        return self._metadata_catalog_config

    @metadata_catalog_config.setter
    def metadata_catalog_config(self, metadata_catalog_config):
        """Sets the metadata_catalog_config of this UpdateFlowRequest.


        :param metadata_catalog_config: The metadata_catalog_config of this UpdateFlowRequest.
        :type metadata_catalog_config: CreateFlowRequestMetadataCatalogConfig
        """

        self._metadata_catalog_config = metadata_catalog_config

    @property
    def client_token(self):
        """Gets the client_token of this UpdateFlowRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateFlow</code>. The token is active for 8 hours.</p>

        :return: The client_token of this UpdateFlowRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateFlowRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateFlow</code>. The token is active for 8 hours.</p>

        :param client_token: The client_token of this UpdateFlowRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 256:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `256`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[ -~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[ -~]+/`")

        self._client_token = client_token
