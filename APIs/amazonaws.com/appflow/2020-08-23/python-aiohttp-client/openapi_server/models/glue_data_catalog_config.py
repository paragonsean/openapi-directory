# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GlueDataCatalogConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, database_name: str=None, table_prefix: str=None):
        """GlueDataCatalogConfig - a model defined in OpenAPI

        :param role_arn: The role_arn of this GlueDataCatalogConfig.
        :param database_name: The database_name of this GlueDataCatalogConfig.
        :param table_prefix: The table_prefix of this GlueDataCatalogConfig.
        """
        self.openapi_types = {
            'role_arn': str,
            'database_name': str,
            'table_prefix': str
        }

        self.attribute_map = {
            'role_arn': 'roleArn',
            'database_name': 'databaseName',
            'table_prefix': 'tablePrefix'
        }

        self._role_arn = role_arn
        self._database_name = database_name
        self._table_prefix = table_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlueDataCatalogConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlueDataCatalogConfig of this GlueDataCatalogConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this GlueDataCatalogConfig.


        :return: The role_arn of this GlueDataCatalogConfig.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this GlueDataCatalogConfig.


        :param role_arn: The role_arn of this GlueDataCatalogConfig.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def database_name(self):
        """Gets the database_name of this GlueDataCatalogConfig.


        :return: The database_name of this GlueDataCatalogConfig.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this GlueDataCatalogConfig.


        :param database_name: The database_name of this GlueDataCatalogConfig.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def table_prefix(self):
        """Gets the table_prefix of this GlueDataCatalogConfig.


        :return: The table_prefix of this GlueDataCatalogConfig.
        :rtype: str
        """
        return self._table_prefix

    @table_prefix.setter
    def table_prefix(self, table_prefix):
        """Sets the table_prefix of this GlueDataCatalogConfig.


        :param table_prefix: The table_prefix of this GlueDataCatalogConfig.
        :type table_prefix: str
        """
        if table_prefix is None:
            raise ValueError("Invalid value for `table_prefix`, must not be `None`")

        self._table_prefix = table_prefix
