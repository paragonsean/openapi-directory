# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteConnectorProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_profile_name: str=None, force_delete: bool=None):
        """DeleteConnectorProfileRequest - a model defined in OpenAPI

        :param connector_profile_name: The connector_profile_name of this DeleteConnectorProfileRequest.
        :param force_delete: The force_delete of this DeleteConnectorProfileRequest.
        """
        self.openapi_types = {
            'connector_profile_name': str,
            'force_delete': bool
        }

        self.attribute_map = {
            'connector_profile_name': 'connectorProfileName',
            'force_delete': 'forceDelete'
        }

        self._connector_profile_name = connector_profile_name
        self._force_delete = force_delete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteConnectorProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteConnectorProfile_request of this DeleteConnectorProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this DeleteConnectorProfileRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. 

        :return: The connector_profile_name of this DeleteConnectorProfileRequest.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this DeleteConnectorProfileRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. 

        :param connector_profile_name: The connector_profile_name of this DeleteConnectorProfileRequest.
        :type connector_profile_name: str
        """
        if connector_profile_name is None:
            raise ValueError("Invalid value for `connector_profile_name`, must not be `None`")
        if connector_profile_name is not None and len(connector_profile_name) > 256:
            raise ValueError("Invalid value for `connector_profile_name`, length must be less than or equal to `256`")
        if connector_profile_name is not None and not re.search(r'[\w\/!@#+=.-]+', connector_profile_name):
            raise ValueError("Invalid value for `connector_profile_name`, must be a follow pattern or equal to `/[\w\/!@#+=.-]+/`")

        self._connector_profile_name = connector_profile_name

    @property
    def force_delete(self):
        """Gets the force_delete of this DeleteConnectorProfileRequest.

         Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. 

        :return: The force_delete of this DeleteConnectorProfileRequest.
        :rtype: bool
        """
        return self._force_delete

    @force_delete.setter
    def force_delete(self, force_delete):
        """Sets the force_delete of this DeleteConnectorProfileRequest.

         Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. 

        :param force_delete: The force_delete of this DeleteConnectorProfileRequest.
        :type force_delete: bool
        """

        self._force_delete = force_delete
