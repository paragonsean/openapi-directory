# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, force_delete: bool=None):
        """DeleteFlowRequest - a model defined in OpenAPI

        :param flow_name: The flow_name of this DeleteFlowRequest.
        :param force_delete: The force_delete of this DeleteFlowRequest.
        """
        self.openapi_types = {
            'flow_name': str,
            'force_delete': bool
        }

        self.attribute_map = {
            'flow_name': 'flowName',
            'force_delete': 'forceDelete'
        }

        self._flow_name = flow_name
        self._force_delete = force_delete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteFlow_request of this DeleteFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this DeleteFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :return: The flow_name of this DeleteFlowRequest.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this DeleteFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :param flow_name: The flow_name of this DeleteFlowRequest.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")
        if flow_name is not None and len(flow_name) > 256:
            raise ValueError("Invalid value for `flow_name`, length must be less than or equal to `256`")
        if flow_name is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', flow_name):
            raise ValueError("Invalid value for `flow_name`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._flow_name = flow_name

    @property
    def force_delete(self):
        """Gets the force_delete of this DeleteFlowRequest.

         Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. 

        :return: The force_delete of this DeleteFlowRequest.
        :rtype: bool
        """
        return self._force_delete

    @force_delete.setter
    def force_delete(self, force_delete):
        """Sets the force_delete of this DeleteFlowRequest.

         Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. 

        :param force_delete: The force_delete of this DeleteFlowRequest.
        :type force_delete: bool
        """

        self._force_delete = force_delete
