# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DynatraceConnectorProfileCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_token: str=None):
        """DynatraceConnectorProfileCredentials - a model defined in OpenAPI

        :param api_token: The api_token of this DynatraceConnectorProfileCredentials.
        """
        self.openapi_types = {
            'api_token': str
        }

        self.attribute_map = {
            'api_token': 'apiToken'
        }

        self._api_token = api_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynatraceConnectorProfileCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynatraceConnectorProfileCredentials of this DynatraceConnectorProfileCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_token(self):
        """Gets the api_token of this DynatraceConnectorProfileCredentials.


        :return: The api_token of this DynatraceConnectorProfileCredentials.
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this DynatraceConnectorProfileCredentials.


        :param api_token: The api_token of this DynatraceConnectorProfileCredentials.
        :type api_token: str
        """
        if api_token is None:
            raise ValueError("Invalid value for `api_token`, must not be `None`")

        self._api_token = api_token
