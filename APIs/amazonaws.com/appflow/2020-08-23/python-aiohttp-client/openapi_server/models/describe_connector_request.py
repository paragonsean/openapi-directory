# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeConnectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_type: str=None, connector_label: str=None):
        """DescribeConnectorRequest - a model defined in OpenAPI

        :param connector_type: The connector_type of this DescribeConnectorRequest.
        :param connector_label: The connector_label of this DescribeConnectorRequest.
        """
        self.openapi_types = {
            'connector_type': str,
            'connector_label': str
        }

        self.attribute_map = {
            'connector_type': 'connectorType',
            'connector_label': 'connectorLabel'
        }

        self._connector_type = connector_type
        self._connector_label = connector_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnector_request of this DescribeConnectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_type(self):
        """Gets the connector_type of this DescribeConnectorRequest.

        The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.

        :return: The connector_type of this DescribeConnectorRequest.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this DescribeConnectorRequest.

        The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.

        :param connector_type: The connector_type of this DescribeConnectorRequest.
        :type connector_type: str
        """
        allowed_values = ["Salesforce", "Singular", "Slack", "Redshift", "S3", "Marketo", "Googleanalytics", "Zendesk", "Servicenow", "Datadog", "Trendmicro", "Snowflake", "Dynatrace", "Infornexus", "Amplitude", "Veeva", "EventBridge", "LookoutMetrics", "Upsolver", "Honeycode", "CustomerProfiles", "SAPOData", "CustomConnector", "Pardot"]  # noqa: E501
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_label(self):
        """Gets the connector_label of this DescribeConnectorRequest.

        The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.

        :return: The connector_label of this DescribeConnectorRequest.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this DescribeConnectorRequest.

        The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.

        :param connector_label: The connector_label of this DescribeConnectorRequest.
        :type connector_label: str
        """
        if connector_label is not None and len(connector_label) > 256:
            raise ValueError("Invalid value for `connector_label`, length must be less than or equal to `256`")
        if connector_label is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', connector_label):
            raise ValueError("Invalid value for `connector_label`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._connector_label = connector_label
