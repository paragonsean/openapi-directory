# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_mode import ConnectionMode
from openapi_server.models.connector_profile_private_connection_provisioning_state import ConnectorProfilePrivateConnectionProvisioningState
from openapi_server.models.connector_type import ConnectorType
from openapi_server.models.create_connector_profile_request_connector_profile_config_connector_profile_properties import CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties
from openapi_server import util


class ConnectorProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_profile_arn: str=None, connector_profile_name: str=None, connector_type: ConnectorType=None, connector_label: str=None, connection_mode: ConnectionMode=None, credentials_arn: str=None, connector_profile_properties: CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties=None, created_at: datetime=None, last_updated_at: datetime=None, private_connection_provisioning_state: ConnectorProfilePrivateConnectionProvisioningState=None):
        """ConnectorProfile - a model defined in OpenAPI

        :param connector_profile_arn: The connector_profile_arn of this ConnectorProfile.
        :param connector_profile_name: The connector_profile_name of this ConnectorProfile.
        :param connector_type: The connector_type of this ConnectorProfile.
        :param connector_label: The connector_label of this ConnectorProfile.
        :param connection_mode: The connection_mode of this ConnectorProfile.
        :param credentials_arn: The credentials_arn of this ConnectorProfile.
        :param connector_profile_properties: The connector_profile_properties of this ConnectorProfile.
        :param created_at: The created_at of this ConnectorProfile.
        :param last_updated_at: The last_updated_at of this ConnectorProfile.
        :param private_connection_provisioning_state: The private_connection_provisioning_state of this ConnectorProfile.
        """
        self.openapi_types = {
            'connector_profile_arn': str,
            'connector_profile_name': str,
            'connector_type': ConnectorType,
            'connector_label': str,
            'connection_mode': ConnectionMode,
            'credentials_arn': str,
            'connector_profile_properties': CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties,
            'created_at': datetime,
            'last_updated_at': datetime,
            'private_connection_provisioning_state': ConnectorProfilePrivateConnectionProvisioningState
        }

        self.attribute_map = {
            'connector_profile_arn': 'connectorProfileArn',
            'connector_profile_name': 'connectorProfileName',
            'connector_type': 'connectorType',
            'connector_label': 'connectorLabel',
            'connection_mode': 'connectionMode',
            'credentials_arn': 'credentialsArn',
            'connector_profile_properties': 'connectorProfileProperties',
            'created_at': 'createdAt',
            'last_updated_at': 'lastUpdatedAt',
            'private_connection_provisioning_state': 'privateConnectionProvisioningState'
        }

        self._connector_profile_arn = connector_profile_arn
        self._connector_profile_name = connector_profile_name
        self._connector_type = connector_type
        self._connector_label = connector_label
        self._connection_mode = connection_mode
        self._credentials_arn = credentials_arn
        self._connector_profile_properties = connector_profile_properties
        self._created_at = created_at
        self._last_updated_at = last_updated_at
        self._private_connection_provisioning_state = private_connection_provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorProfile of this ConnectorProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_profile_arn(self):
        """Gets the connector_profile_arn of this ConnectorProfile.


        :return: The connector_profile_arn of this ConnectorProfile.
        :rtype: str
        """
        return self._connector_profile_arn

    @connector_profile_arn.setter
    def connector_profile_arn(self, connector_profile_arn):
        """Sets the connector_profile_arn of this ConnectorProfile.


        :param connector_profile_arn: The connector_profile_arn of this ConnectorProfile.
        :type connector_profile_arn: str
        """

        self._connector_profile_arn = connector_profile_arn

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this ConnectorProfile.


        :return: The connector_profile_name of this ConnectorProfile.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this ConnectorProfile.


        :param connector_profile_name: The connector_profile_name of this ConnectorProfile.
        :type connector_profile_name: str
        """

        self._connector_profile_name = connector_profile_name

    @property
    def connector_type(self):
        """Gets the connector_type of this ConnectorProfile.


        :return: The connector_type of this ConnectorProfile.
        :rtype: ConnectorType
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ConnectorProfile.


        :param connector_type: The connector_type of this ConnectorProfile.
        :type connector_type: ConnectorType
        """

        self._connector_type = connector_type

    @property
    def connector_label(self):
        """Gets the connector_label of this ConnectorProfile.


        :return: The connector_label of this ConnectorProfile.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this ConnectorProfile.


        :param connector_label: The connector_label of this ConnectorProfile.
        :type connector_label: str
        """

        self._connector_label = connector_label

    @property
    def connection_mode(self):
        """Gets the connection_mode of this ConnectorProfile.


        :return: The connection_mode of this ConnectorProfile.
        :rtype: ConnectionMode
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this ConnectorProfile.


        :param connection_mode: The connection_mode of this ConnectorProfile.
        :type connection_mode: ConnectionMode
        """

        self._connection_mode = connection_mode

    @property
    def credentials_arn(self):
        """Gets the credentials_arn of this ConnectorProfile.


        :return: The credentials_arn of this ConnectorProfile.
        :rtype: str
        """
        return self._credentials_arn

    @credentials_arn.setter
    def credentials_arn(self, credentials_arn):
        """Sets the credentials_arn of this ConnectorProfile.


        :param credentials_arn: The credentials_arn of this ConnectorProfile.
        :type credentials_arn: str
        """

        self._credentials_arn = credentials_arn

    @property
    def connector_profile_properties(self):
        """Gets the connector_profile_properties of this ConnectorProfile.


        :return: The connector_profile_properties of this ConnectorProfile.
        :rtype: CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties
        """
        return self._connector_profile_properties

    @connector_profile_properties.setter
    def connector_profile_properties(self, connector_profile_properties):
        """Sets the connector_profile_properties of this ConnectorProfile.


        :param connector_profile_properties: The connector_profile_properties of this ConnectorProfile.
        :type connector_profile_properties: CreateConnectorProfileRequestConnectorProfileConfigConnectorProfileProperties
        """

        self._connector_profile_properties = connector_profile_properties

    @property
    def created_at(self):
        """Gets the created_at of this ConnectorProfile.


        :return: The created_at of this ConnectorProfile.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectorProfile.


        :param created_at: The created_at of this ConnectorProfile.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ConnectorProfile.


        :return: The last_updated_at of this ConnectorProfile.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ConnectorProfile.


        :param last_updated_at: The last_updated_at of this ConnectorProfile.
        :type last_updated_at: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def private_connection_provisioning_state(self):
        """Gets the private_connection_provisioning_state of this ConnectorProfile.


        :return: The private_connection_provisioning_state of this ConnectorProfile.
        :rtype: ConnectorProfilePrivateConnectionProvisioningState
        """
        return self._private_connection_provisioning_state

    @private_connection_provisioning_state.setter
    def private_connection_provisioning_state(self, private_connection_provisioning_state):
        """Sets the private_connection_provisioning_state of this ConnectorProfile.


        :param private_connection_provisioning_state: The private_connection_provisioning_state of this ConnectorProfile.
        :type private_connection_provisioning_state: ConnectorProfilePrivateConnectionProvisioningState
        """

        self._private_connection_provisioning_state = private_connection_provisioning_state
