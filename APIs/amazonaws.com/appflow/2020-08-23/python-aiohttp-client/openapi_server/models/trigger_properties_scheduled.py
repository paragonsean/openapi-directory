# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_pull_mode import DataPullMode
from openapi_server import util


class TriggerPropertiesScheduled(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schedule_expression: str=None, data_pull_mode: DataPullMode=None, schedule_start_time: datetime=None, schedule_end_time: datetime=None, timezone: str=None, schedule_offset: int=None, first_execution_from: datetime=None, flow_error_deactivation_threshold: int=None):
        """TriggerPropertiesScheduled - a model defined in OpenAPI

        :param schedule_expression: The schedule_expression of this TriggerPropertiesScheduled.
        :param data_pull_mode: The data_pull_mode of this TriggerPropertiesScheduled.
        :param schedule_start_time: The schedule_start_time of this TriggerPropertiesScheduled.
        :param schedule_end_time: The schedule_end_time of this TriggerPropertiesScheduled.
        :param timezone: The timezone of this TriggerPropertiesScheduled.
        :param schedule_offset: The schedule_offset of this TriggerPropertiesScheduled.
        :param first_execution_from: The first_execution_from of this TriggerPropertiesScheduled.
        :param flow_error_deactivation_threshold: The flow_error_deactivation_threshold of this TriggerPropertiesScheduled.
        """
        self.openapi_types = {
            'schedule_expression': str,
            'data_pull_mode': DataPullMode,
            'schedule_start_time': datetime,
            'schedule_end_time': datetime,
            'timezone': str,
            'schedule_offset': int,
            'first_execution_from': datetime,
            'flow_error_deactivation_threshold': int
        }

        self.attribute_map = {
            'schedule_expression': 'scheduleExpression',
            'data_pull_mode': 'dataPullMode',
            'schedule_start_time': 'scheduleStartTime',
            'schedule_end_time': 'scheduleEndTime',
            'timezone': 'timezone',
            'schedule_offset': 'scheduleOffset',
            'first_execution_from': 'firstExecutionFrom',
            'flow_error_deactivation_threshold': 'flowErrorDeactivationThreshold'
        }

        self._schedule_expression = schedule_expression
        self._data_pull_mode = data_pull_mode
        self._schedule_start_time = schedule_start_time
        self._schedule_end_time = schedule_end_time
        self._timezone = timezone
        self._schedule_offset = schedule_offset
        self._first_execution_from = first_execution_from
        self._flow_error_deactivation_threshold = flow_error_deactivation_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerPropertiesScheduled':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerProperties_Scheduled of this TriggerPropertiesScheduled.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this TriggerPropertiesScheduled.


        :return: The schedule_expression of this TriggerPropertiesScheduled.
        :rtype: str
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this TriggerPropertiesScheduled.


        :param schedule_expression: The schedule_expression of this TriggerPropertiesScheduled.
        :type schedule_expression: str
        """
        if schedule_expression is None:
            raise ValueError("Invalid value for `schedule_expression`, must not be `None`")

        self._schedule_expression = schedule_expression

    @property
    def data_pull_mode(self):
        """Gets the data_pull_mode of this TriggerPropertiesScheduled.


        :return: The data_pull_mode of this TriggerPropertiesScheduled.
        :rtype: DataPullMode
        """
        return self._data_pull_mode

    @data_pull_mode.setter
    def data_pull_mode(self, data_pull_mode):
        """Sets the data_pull_mode of this TriggerPropertiesScheduled.


        :param data_pull_mode: The data_pull_mode of this TriggerPropertiesScheduled.
        :type data_pull_mode: DataPullMode
        """

        self._data_pull_mode = data_pull_mode

    @property
    def schedule_start_time(self):
        """Gets the schedule_start_time of this TriggerPropertiesScheduled.


        :return: The schedule_start_time of this TriggerPropertiesScheduled.
        :rtype: datetime
        """
        return self._schedule_start_time

    @schedule_start_time.setter
    def schedule_start_time(self, schedule_start_time):
        """Sets the schedule_start_time of this TriggerPropertiesScheduled.


        :param schedule_start_time: The schedule_start_time of this TriggerPropertiesScheduled.
        :type schedule_start_time: datetime
        """

        self._schedule_start_time = schedule_start_time

    @property
    def schedule_end_time(self):
        """Gets the schedule_end_time of this TriggerPropertiesScheduled.


        :return: The schedule_end_time of this TriggerPropertiesScheduled.
        :rtype: datetime
        """
        return self._schedule_end_time

    @schedule_end_time.setter
    def schedule_end_time(self, schedule_end_time):
        """Sets the schedule_end_time of this TriggerPropertiesScheduled.


        :param schedule_end_time: The schedule_end_time of this TriggerPropertiesScheduled.
        :type schedule_end_time: datetime
        """

        self._schedule_end_time = schedule_end_time

    @property
    def timezone(self):
        """Gets the timezone of this TriggerPropertiesScheduled.


        :return: The timezone of this TriggerPropertiesScheduled.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this TriggerPropertiesScheduled.


        :param timezone: The timezone of this TriggerPropertiesScheduled.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def schedule_offset(self):
        """Gets the schedule_offset of this TriggerPropertiesScheduled.


        :return: The schedule_offset of this TriggerPropertiesScheduled.
        :rtype: int
        """
        return self._schedule_offset

    @schedule_offset.setter
    def schedule_offset(self, schedule_offset):
        """Sets the schedule_offset of this TriggerPropertiesScheduled.


        :param schedule_offset: The schedule_offset of this TriggerPropertiesScheduled.
        :type schedule_offset: int
        """

        self._schedule_offset = schedule_offset

    @property
    def first_execution_from(self):
        """Gets the first_execution_from of this TriggerPropertiesScheduled.


        :return: The first_execution_from of this TriggerPropertiesScheduled.
        :rtype: datetime
        """
        return self._first_execution_from

    @first_execution_from.setter
    def first_execution_from(self, first_execution_from):
        """Sets the first_execution_from of this TriggerPropertiesScheduled.


        :param first_execution_from: The first_execution_from of this TriggerPropertiesScheduled.
        :type first_execution_from: datetime
        """

        self._first_execution_from = first_execution_from

    @property
    def flow_error_deactivation_threshold(self):
        """Gets the flow_error_deactivation_threshold of this TriggerPropertiesScheduled.


        :return: The flow_error_deactivation_threshold of this TriggerPropertiesScheduled.
        :rtype: int
        """
        return self._flow_error_deactivation_threshold

    @flow_error_deactivation_threshold.setter
    def flow_error_deactivation_threshold(self, flow_error_deactivation_threshold):
        """Sets the flow_error_deactivation_threshold of this TriggerPropertiesScheduled.


        :param flow_error_deactivation_threshold: The flow_error_deactivation_threshold of this TriggerPropertiesScheduled.
        :type flow_error_deactivation_threshold: int
        """

        self._flow_error_deactivation_threshold = flow_error_deactivation_threshold
