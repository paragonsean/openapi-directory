# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorProfileCredentialsSingular(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None):
        """ConnectorProfileCredentialsSingular - a model defined in OpenAPI

        :param api_key: The api_key of this ConnectorProfileCredentialsSingular.
        """
        self.openapi_types = {
            'api_key': str
        }

        self.attribute_map = {
            'api_key': 'apiKey'
        }

        self._api_key = api_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorProfileCredentialsSingular':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorProfileCredentials_Singular of this ConnectorProfileCredentialsSingular.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this ConnectorProfileCredentialsSingular.


        :return: The api_key of this ConnectorProfileCredentialsSingular.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ConnectorProfileCredentialsSingular.


        :param api_key: The api_key of this ConnectorProfileCredentialsSingular.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key
