# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_handling_config import ErrorHandlingConfig
from openapi_server.models.write_operation_type import WriteOperationType
from openapi_server import util


class ZendeskDestinationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object: str=None, id_field_names: List[str]=None, error_handling_config: ErrorHandlingConfig=None, write_operation_type: WriteOperationType=None):
        """ZendeskDestinationProperties - a model defined in OpenAPI

        :param object: The object of this ZendeskDestinationProperties.
        :param id_field_names: The id_field_names of this ZendeskDestinationProperties.
        :param error_handling_config: The error_handling_config of this ZendeskDestinationProperties.
        :param write_operation_type: The write_operation_type of this ZendeskDestinationProperties.
        """
        self.openapi_types = {
            'object': str,
            'id_field_names': List[str],
            'error_handling_config': ErrorHandlingConfig,
            'write_operation_type': WriteOperationType
        }

        self.attribute_map = {
            'object': 'object',
            'id_field_names': 'idFieldNames',
            'error_handling_config': 'errorHandlingConfig',
            'write_operation_type': 'writeOperationType'
        }

        self._object = object
        self._id_field_names = id_field_names
        self._error_handling_config = error_handling_config
        self._write_operation_type = write_operation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZendeskDestinationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZendeskDestinationProperties of this ZendeskDestinationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object(self):
        """Gets the object of this ZendeskDestinationProperties.


        :return: The object of this ZendeskDestinationProperties.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ZendeskDestinationProperties.


        :param object: The object of this ZendeskDestinationProperties.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")

        self._object = object

    @property
    def id_field_names(self):
        """Gets the id_field_names of this ZendeskDestinationProperties.

         A list of field names that can be used as an ID field when performing a write operation. 

        :return: The id_field_names of this ZendeskDestinationProperties.
        :rtype: List[str]
        """
        return self._id_field_names

    @id_field_names.setter
    def id_field_names(self, id_field_names):
        """Sets the id_field_names of this ZendeskDestinationProperties.

         A list of field names that can be used as an ID field when performing a write operation. 

        :param id_field_names: The id_field_names of this ZendeskDestinationProperties.
        :type id_field_names: List[str]
        """
        if id_field_names is not None and len(id_field_names) < 0:
            raise ValueError("Invalid value for `id_field_names`, number of items must be greater than or equal to `0`")

        self._id_field_names = id_field_names

    @property
    def error_handling_config(self):
        """Gets the error_handling_config of this ZendeskDestinationProperties.


        :return: The error_handling_config of this ZendeskDestinationProperties.
        :rtype: ErrorHandlingConfig
        """
        return self._error_handling_config

    @error_handling_config.setter
    def error_handling_config(self, error_handling_config):
        """Sets the error_handling_config of this ZendeskDestinationProperties.


        :param error_handling_config: The error_handling_config of this ZendeskDestinationProperties.
        :type error_handling_config: ErrorHandlingConfig
        """

        self._error_handling_config = error_handling_config

    @property
    def write_operation_type(self):
        """Gets the write_operation_type of this ZendeskDestinationProperties.


        :return: The write_operation_type of this ZendeskDestinationProperties.
        :rtype: WriteOperationType
        """
        return self._write_operation_type

    @write_operation_type.setter
    def write_operation_type(self, write_operation_type):
        """Sets the write_operation_type of this ZendeskDestinationProperties.


        :param write_operation_type: The write_operation_type of this ZendeskDestinationProperties.
        :type write_operation_type: WriteOperationType
        """

        self._write_operation_type = write_operation_type
