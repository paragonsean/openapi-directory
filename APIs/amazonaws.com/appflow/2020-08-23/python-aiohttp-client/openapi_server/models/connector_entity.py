# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, label: str=None, has_nested_entities: bool=None):
        """ConnectorEntity - a model defined in OpenAPI

        :param name: The name of this ConnectorEntity.
        :param label: The label of this ConnectorEntity.
        :param has_nested_entities: The has_nested_entities of this ConnectorEntity.
        """
        self.openapi_types = {
            'name': str,
            'label': str,
            'has_nested_entities': bool
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'has_nested_entities': 'hasNestedEntities'
        }

        self._name = name
        self._label = label
        self._has_nested_entities = has_nested_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorEntity of this ConnectorEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ConnectorEntity.


        :return: The name of this ConnectorEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorEntity.


        :param name: The name of this ConnectorEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def label(self):
        """Gets the label of this ConnectorEntity.


        :return: The label of this ConnectorEntity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ConnectorEntity.


        :param label: The label of this ConnectorEntity.
        :type label: str
        """

        self._label = label

    @property
    def has_nested_entities(self):
        """Gets the has_nested_entities of this ConnectorEntity.


        :return: The has_nested_entities of this ConnectorEntity.
        :rtype: bool
        """
        return self._has_nested_entities

    @has_nested_entities.setter
    def has_nested_entities(self, has_nested_entities):
        """Sets the has_nested_entities of this ConnectorEntity.


        :param has_nested_entities: The has_nested_entities of this ConnectorEntity.
        :type has_nested_entities: bool
        """

        self._has_nested_entities = has_nested_entities
