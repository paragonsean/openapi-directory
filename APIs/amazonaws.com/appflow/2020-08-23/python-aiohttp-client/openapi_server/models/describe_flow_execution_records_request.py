# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeFlowExecutionRecordsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, max_results: int=None, next_token: str=None):
        """DescribeFlowExecutionRecordsRequest - a model defined in OpenAPI

        :param flow_name: The flow_name of this DescribeFlowExecutionRecordsRequest.
        :param max_results: The max_results of this DescribeFlowExecutionRecordsRequest.
        :param next_token: The next_token of this DescribeFlowExecutionRecordsRequest.
        """
        self.openapi_types = {
            'flow_name': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'flow_name': 'flowName',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._flow_name = flow_name
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFlowExecutionRecordsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFlowExecutionRecords_request of this DescribeFlowExecutionRecordsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this DescribeFlowExecutionRecordsRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :return: The flow_name of this DescribeFlowExecutionRecordsRequest.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this DescribeFlowExecutionRecordsRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :param flow_name: The flow_name of this DescribeFlowExecutionRecordsRequest.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")
        if flow_name is not None and len(flow_name) > 256:
            raise ValueError("Invalid value for `flow_name`, length must be less than or equal to `256`")
        if flow_name is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', flow_name):
            raise ValueError("Invalid value for `flow_name`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._flow_name = flow_name

    @property
    def max_results(self):
        """Gets the max_results of this DescribeFlowExecutionRecordsRequest.

         Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). 

        :return: The max_results of this DescribeFlowExecutionRecordsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeFlowExecutionRecordsRequest.

         Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). 

        :param max_results: The max_results of this DescribeFlowExecutionRecordsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeFlowExecutionRecordsRequest.

         The pagination token for the next page of data. 

        :return: The next_token of this DescribeFlowExecutionRecordsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeFlowExecutionRecordsRequest.

         The pagination token for the next page of data. 

        :param next_token: The next_token of this DescribeFlowExecutionRecordsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and not re.search(r'\S+', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/\S+/`")

        self._next_token = next_token
