# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    SALESFORCE = 'Salesforce'
    SINGULAR = 'Singular'
    SLACK = 'Slack'
    REDSHIFT = 'Redshift'
    S3 = 'S3'
    MARKETO = 'Marketo'
    GOOGLEANALYTICS = 'Googleanalytics'
    ZENDESK = 'Zendesk'
    SERVICENOW = 'Servicenow'
    DATADOG = 'Datadog'
    TRENDMICRO = 'Trendmicro'
    SNOWFLAKE = 'Snowflake'
    DYNATRACE = 'Dynatrace'
    INFORNEXUS = 'Infornexus'
    AMPLITUDE = 'Amplitude'
    VEEVA = 'Veeva'
    EVENTBRIDGE = 'EventBridge'
    LOOKOUTMETRICS = 'LookoutMetrics'
    UPSOLVER = 'Upsolver'
    HONEYCODE = 'Honeycode'
    CUSTOMERPROFILES = 'CustomerProfiles'
    SAPODATA = 'SAPOData'
    CUSTOMCONNECTOR = 'CustomConnector'
    PARDOT = 'Pardot'

    def __init__(self):
        """ConnectorType - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorType of this ConnectorType.
        """
        return util.deserialize_model(dikt, cls)
