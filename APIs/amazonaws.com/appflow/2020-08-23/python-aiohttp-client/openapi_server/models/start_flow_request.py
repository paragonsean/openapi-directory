# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, client_token: str=None):
        """StartFlowRequest - a model defined in OpenAPI

        :param flow_name: The flow_name of this StartFlowRequest.
        :param client_token: The client_token of this StartFlowRequest.
        """
        self.openapi_types = {
            'flow_name': str,
            'client_token': str
        }

        self.attribute_map = {
            'flow_name': 'flowName',
            'client_token': 'clientToken'
        }

        self._flow_name = flow_name
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartFlow_request of this StartFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this StartFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :return: The flow_name of this StartFlowRequest.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this StartFlowRequest.

         The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 

        :param flow_name: The flow_name of this StartFlowRequest.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")
        if flow_name is not None and len(flow_name) > 256:
            raise ValueError("Invalid value for `flow_name`, length must be less than or equal to `256`")
        if flow_name is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', flow_name):
            raise ValueError("Invalid value for `flow_name`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._flow_name = flow_name

    @property
    def client_token(self):
        """Gets the client_token of this StartFlowRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>StartFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs for flows that run on a schedule or based on an event. However, the error doesn't occur for flows that run on demand. You set the conditions that initiate your flow for the <code>triggerConfig</code> parameter.</p> <p>If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>StartFlow</code>. The token is active for 8 hours.</p>

        :return: The client_token of this StartFlowRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartFlowRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>StartFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs for flows that run on a schedule or based on an event. However, the error doesn't occur for flows that run on demand. You set the conditions that initiate your flow for the <code>triggerConfig</code> parameter.</p> <p>If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>StartFlow</code>. The token is active for 8 hours.</p>

        :param client_token: The client_token of this StartFlowRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 256:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `256`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[ -~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[ -~]+/`")

        self._client_token = client_token
