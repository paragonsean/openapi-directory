# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_connection_provisioning_failure_cause import PrivateConnectionProvisioningFailureCause
from openapi_server.models.private_connection_provisioning_status import PrivateConnectionProvisioningStatus
from openapi_server import util


class PrivateConnectionProvisioningState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: PrivateConnectionProvisioningStatus=None, failure_message: str=None, failure_cause: PrivateConnectionProvisioningFailureCause=None):
        """PrivateConnectionProvisioningState - a model defined in OpenAPI

        :param status: The status of this PrivateConnectionProvisioningState.
        :param failure_message: The failure_message of this PrivateConnectionProvisioningState.
        :param failure_cause: The failure_cause of this PrivateConnectionProvisioningState.
        """
        self.openapi_types = {
            'status': PrivateConnectionProvisioningStatus,
            'failure_message': str,
            'failure_cause': PrivateConnectionProvisioningFailureCause
        }

        self.attribute_map = {
            'status': 'status',
            'failure_message': 'failureMessage',
            'failure_cause': 'failureCause'
        }

        self._status = status
        self._failure_message = failure_message
        self._failure_cause = failure_cause

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateConnectionProvisioningState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateConnectionProvisioningState of this PrivateConnectionProvisioningState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this PrivateConnectionProvisioningState.


        :return: The status of this PrivateConnectionProvisioningState.
        :rtype: PrivateConnectionProvisioningStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrivateConnectionProvisioningState.


        :param status: The status of this PrivateConnectionProvisioningState.
        :type status: PrivateConnectionProvisioningStatus
        """

        self._status = status

    @property
    def failure_message(self):
        """Gets the failure_message of this PrivateConnectionProvisioningState.


        :return: The failure_message of this PrivateConnectionProvisioningState.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this PrivateConnectionProvisioningState.


        :param failure_message: The failure_message of this PrivateConnectionProvisioningState.
        :type failure_message: str
        """

        self._failure_message = failure_message

    @property
    def failure_cause(self):
        """Gets the failure_cause of this PrivateConnectionProvisioningState.


        :return: The failure_cause of this PrivateConnectionProvisioningState.
        :rtype: PrivateConnectionProvisioningFailureCause
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause):
        """Sets the failure_cause of this PrivateConnectionProvisioningState.


        :param failure_cause: The failure_cause of this PrivateConnectionProvisioningState.
        :type failure_cause: PrivateConnectionProvisioningFailureCause
        """

        self._failure_cause = failure_cause
