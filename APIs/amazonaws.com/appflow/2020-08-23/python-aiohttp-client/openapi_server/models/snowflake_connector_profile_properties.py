# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnowflakeConnectorProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, warehouse: str=None, stage: str=None, bucket_name: str=None, bucket_prefix: str=None, private_link_service_name: str=None, account_name: str=None, region: str=None):
        """SnowflakeConnectorProfileProperties - a model defined in OpenAPI

        :param warehouse: The warehouse of this SnowflakeConnectorProfileProperties.
        :param stage: The stage of this SnowflakeConnectorProfileProperties.
        :param bucket_name: The bucket_name of this SnowflakeConnectorProfileProperties.
        :param bucket_prefix: The bucket_prefix of this SnowflakeConnectorProfileProperties.
        :param private_link_service_name: The private_link_service_name of this SnowflakeConnectorProfileProperties.
        :param account_name: The account_name of this SnowflakeConnectorProfileProperties.
        :param region: The region of this SnowflakeConnectorProfileProperties.
        """
        self.openapi_types = {
            'warehouse': str,
            'stage': str,
            'bucket_name': str,
            'bucket_prefix': str,
            'private_link_service_name': str,
            'account_name': str,
            'region': str
        }

        self.attribute_map = {
            'warehouse': 'warehouse',
            'stage': 'stage',
            'bucket_name': 'bucketName',
            'bucket_prefix': 'bucketPrefix',
            'private_link_service_name': 'privateLinkServiceName',
            'account_name': 'accountName',
            'region': 'region'
        }

        self._warehouse = warehouse
        self._stage = stage
        self._bucket_name = bucket_name
        self._bucket_prefix = bucket_prefix
        self._private_link_service_name = private_link_service_name
        self._account_name = account_name
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnowflakeConnectorProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnowflakeConnectorProfileProperties of this SnowflakeConnectorProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def warehouse(self):
        """Gets the warehouse of this SnowflakeConnectorProfileProperties.


        :return: The warehouse of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse):
        """Sets the warehouse of this SnowflakeConnectorProfileProperties.


        :param warehouse: The warehouse of this SnowflakeConnectorProfileProperties.
        :type warehouse: str
        """
        if warehouse is None:
            raise ValueError("Invalid value for `warehouse`, must not be `None`")

        self._warehouse = warehouse

    @property
    def stage(self):
        """Gets the stage of this SnowflakeConnectorProfileProperties.


        :return: The stage of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this SnowflakeConnectorProfileProperties.


        :param stage: The stage of this SnowflakeConnectorProfileProperties.
        :type stage: str
        """
        if stage is None:
            raise ValueError("Invalid value for `stage`, must not be `None`")

        self._stage = stage

    @property
    def bucket_name(self):
        """Gets the bucket_name of this SnowflakeConnectorProfileProperties.


        :return: The bucket_name of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this SnowflakeConnectorProfileProperties.


        :param bucket_name: The bucket_name of this SnowflakeConnectorProfileProperties.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def bucket_prefix(self):
        """Gets the bucket_prefix of this SnowflakeConnectorProfileProperties.


        :return: The bucket_prefix of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._bucket_prefix

    @bucket_prefix.setter
    def bucket_prefix(self, bucket_prefix):
        """Sets the bucket_prefix of this SnowflakeConnectorProfileProperties.


        :param bucket_prefix: The bucket_prefix of this SnowflakeConnectorProfileProperties.
        :type bucket_prefix: str
        """

        self._bucket_prefix = bucket_prefix

    @property
    def private_link_service_name(self):
        """Gets the private_link_service_name of this SnowflakeConnectorProfileProperties.


        :return: The private_link_service_name of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._private_link_service_name

    @private_link_service_name.setter
    def private_link_service_name(self, private_link_service_name):
        """Sets the private_link_service_name of this SnowflakeConnectorProfileProperties.


        :param private_link_service_name: The private_link_service_name of this SnowflakeConnectorProfileProperties.
        :type private_link_service_name: str
        """

        self._private_link_service_name = private_link_service_name

    @property
    def account_name(self):
        """Gets the account_name of this SnowflakeConnectorProfileProperties.


        :return: The account_name of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this SnowflakeConnectorProfileProperties.


        :param account_name: The account_name of this SnowflakeConnectorProfileProperties.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def region(self):
        """Gets the region of this SnowflakeConnectorProfileProperties.


        :return: The region of this SnowflakeConnectorProfileProperties.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SnowflakeConnectorProfileProperties.


        :param region: The region of this SnowflakeConnectorProfileProperties.
        :type region: str
        """

        self._region = region
