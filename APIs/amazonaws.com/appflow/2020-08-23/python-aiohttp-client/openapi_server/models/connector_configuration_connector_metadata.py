# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_metadata_google_analytics import ConnectorMetadataGoogleAnalytics
from openapi_server.models.connector_metadata_honeycode import ConnectorMetadataHoneycode
from openapi_server.models.connector_metadata_salesforce import ConnectorMetadataSalesforce
from openapi_server.models.connector_metadata_slack import ConnectorMetadataSlack
from openapi_server.models.connector_metadata_snowflake import ConnectorMetadataSnowflake
from openapi_server.models.connector_metadata_zendesk import ConnectorMetadataZendesk
from openapi_server import util


class ConnectorConfigurationConnectorMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amplitude: object=None, datadog: object=None, dynatrace: object=None, google_analytics: ConnectorMetadataGoogleAnalytics=None, infor_nexus: object=None, marketo: object=None, redshift: object=None, s3: object=None, salesforce: ConnectorMetadataSalesforce=None, service_now: object=None, singular: object=None, slack: ConnectorMetadataSlack=None, snowflake: ConnectorMetadataSnowflake=None, trendmicro: object=None, veeva: object=None, zendesk: ConnectorMetadataZendesk=None, event_bridge: object=None, upsolver: object=None, customer_profiles: object=None, honeycode: ConnectorMetadataHoneycode=None, sapo_data: object=None, pardot: object=None):
        """ConnectorConfigurationConnectorMetadata - a model defined in OpenAPI

        :param amplitude: The amplitude of this ConnectorConfigurationConnectorMetadata.
        :param datadog: The datadog of this ConnectorConfigurationConnectorMetadata.
        :param dynatrace: The dynatrace of this ConnectorConfigurationConnectorMetadata.
        :param google_analytics: The google_analytics of this ConnectorConfigurationConnectorMetadata.
        :param infor_nexus: The infor_nexus of this ConnectorConfigurationConnectorMetadata.
        :param marketo: The marketo of this ConnectorConfigurationConnectorMetadata.
        :param redshift: The redshift of this ConnectorConfigurationConnectorMetadata.
        :param s3: The s3 of this ConnectorConfigurationConnectorMetadata.
        :param salesforce: The salesforce of this ConnectorConfigurationConnectorMetadata.
        :param service_now: The service_now of this ConnectorConfigurationConnectorMetadata.
        :param singular: The singular of this ConnectorConfigurationConnectorMetadata.
        :param slack: The slack of this ConnectorConfigurationConnectorMetadata.
        :param snowflake: The snowflake of this ConnectorConfigurationConnectorMetadata.
        :param trendmicro: The trendmicro of this ConnectorConfigurationConnectorMetadata.
        :param veeva: The veeva of this ConnectorConfigurationConnectorMetadata.
        :param zendesk: The zendesk of this ConnectorConfigurationConnectorMetadata.
        :param event_bridge: The event_bridge of this ConnectorConfigurationConnectorMetadata.
        :param upsolver: The upsolver of this ConnectorConfigurationConnectorMetadata.
        :param customer_profiles: The customer_profiles of this ConnectorConfigurationConnectorMetadata.
        :param honeycode: The honeycode of this ConnectorConfigurationConnectorMetadata.
        :param sapo_data: The sapo_data of this ConnectorConfigurationConnectorMetadata.
        :param pardot: The pardot of this ConnectorConfigurationConnectorMetadata.
        """
        self.openapi_types = {
            'amplitude': object,
            'datadog': object,
            'dynatrace': object,
            'google_analytics': ConnectorMetadataGoogleAnalytics,
            'infor_nexus': object,
            'marketo': object,
            'redshift': object,
            's3': object,
            'salesforce': ConnectorMetadataSalesforce,
            'service_now': object,
            'singular': object,
            'slack': ConnectorMetadataSlack,
            'snowflake': ConnectorMetadataSnowflake,
            'trendmicro': object,
            'veeva': object,
            'zendesk': ConnectorMetadataZendesk,
            'event_bridge': object,
            'upsolver': object,
            'customer_profiles': object,
            'honeycode': ConnectorMetadataHoneycode,
            'sapo_data': object,
            'pardot': object
        }

        self.attribute_map = {
            'amplitude': 'Amplitude',
            'datadog': 'Datadog',
            'dynatrace': 'Dynatrace',
            'google_analytics': 'GoogleAnalytics',
            'infor_nexus': 'InforNexus',
            'marketo': 'Marketo',
            'redshift': 'Redshift',
            's3': 'S3',
            'salesforce': 'Salesforce',
            'service_now': 'ServiceNow',
            'singular': 'Singular',
            'slack': 'Slack',
            'snowflake': 'Snowflake',
            'trendmicro': 'Trendmicro',
            'veeva': 'Veeva',
            'zendesk': 'Zendesk',
            'event_bridge': 'EventBridge',
            'upsolver': 'Upsolver',
            'customer_profiles': 'CustomerProfiles',
            'honeycode': 'Honeycode',
            'sapo_data': 'SAPOData',
            'pardot': 'Pardot'
        }

        self._amplitude = amplitude
        self._datadog = datadog
        self._dynatrace = dynatrace
        self._google_analytics = google_analytics
        self._infor_nexus = infor_nexus
        self._marketo = marketo
        self._redshift = redshift
        self._s3 = s3
        self._salesforce = salesforce
        self._service_now = service_now
        self._singular = singular
        self._slack = slack
        self._snowflake = snowflake
        self._trendmicro = trendmicro
        self._veeva = veeva
        self._zendesk = zendesk
        self._event_bridge = event_bridge
        self._upsolver = upsolver
        self._customer_profiles = customer_profiles
        self._honeycode = honeycode
        self._sapo_data = sapo_data
        self._pardot = pardot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorConfigurationConnectorMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorConfiguration_connectorMetadata of this ConnectorConfigurationConnectorMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amplitude(self):
        """Gets the amplitude of this ConnectorConfigurationConnectorMetadata.


        :return: The amplitude of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._amplitude

    @amplitude.setter
    def amplitude(self, amplitude):
        """Sets the amplitude of this ConnectorConfigurationConnectorMetadata.


        :param amplitude: The amplitude of this ConnectorConfigurationConnectorMetadata.
        :type amplitude: object
        """

        self._amplitude = amplitude

    @property
    def datadog(self):
        """Gets the datadog of this ConnectorConfigurationConnectorMetadata.


        :return: The datadog of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._datadog

    @datadog.setter
    def datadog(self, datadog):
        """Sets the datadog of this ConnectorConfigurationConnectorMetadata.


        :param datadog: The datadog of this ConnectorConfigurationConnectorMetadata.
        :type datadog: object
        """

        self._datadog = datadog

    @property
    def dynatrace(self):
        """Gets the dynatrace of this ConnectorConfigurationConnectorMetadata.


        :return: The dynatrace of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._dynatrace

    @dynatrace.setter
    def dynatrace(self, dynatrace):
        """Sets the dynatrace of this ConnectorConfigurationConnectorMetadata.


        :param dynatrace: The dynatrace of this ConnectorConfigurationConnectorMetadata.
        :type dynatrace: object
        """

        self._dynatrace = dynatrace

    @property
    def google_analytics(self):
        """Gets the google_analytics of this ConnectorConfigurationConnectorMetadata.


        :return: The google_analytics of this ConnectorConfigurationConnectorMetadata.
        :rtype: ConnectorMetadataGoogleAnalytics
        """
        return self._google_analytics

    @google_analytics.setter
    def google_analytics(self, google_analytics):
        """Sets the google_analytics of this ConnectorConfigurationConnectorMetadata.


        :param google_analytics: The google_analytics of this ConnectorConfigurationConnectorMetadata.
        :type google_analytics: ConnectorMetadataGoogleAnalytics
        """

        self._google_analytics = google_analytics

    @property
    def infor_nexus(self):
        """Gets the infor_nexus of this ConnectorConfigurationConnectorMetadata.


        :return: The infor_nexus of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._infor_nexus

    @infor_nexus.setter
    def infor_nexus(self, infor_nexus):
        """Sets the infor_nexus of this ConnectorConfigurationConnectorMetadata.


        :param infor_nexus: The infor_nexus of this ConnectorConfigurationConnectorMetadata.
        :type infor_nexus: object
        """

        self._infor_nexus = infor_nexus

    @property
    def marketo(self):
        """Gets the marketo of this ConnectorConfigurationConnectorMetadata.


        :return: The marketo of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._marketo

    @marketo.setter
    def marketo(self, marketo):
        """Sets the marketo of this ConnectorConfigurationConnectorMetadata.


        :param marketo: The marketo of this ConnectorConfigurationConnectorMetadata.
        :type marketo: object
        """

        self._marketo = marketo

    @property
    def redshift(self):
        """Gets the redshift of this ConnectorConfigurationConnectorMetadata.


        :return: The redshift of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._redshift

    @redshift.setter
    def redshift(self, redshift):
        """Sets the redshift of this ConnectorConfigurationConnectorMetadata.


        :param redshift: The redshift of this ConnectorConfigurationConnectorMetadata.
        :type redshift: object
        """

        self._redshift = redshift

    @property
    def s3(self):
        """Gets the s3 of this ConnectorConfigurationConnectorMetadata.


        :return: The s3 of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this ConnectorConfigurationConnectorMetadata.


        :param s3: The s3 of this ConnectorConfigurationConnectorMetadata.
        :type s3: object
        """

        self._s3 = s3

    @property
    def salesforce(self):
        """Gets the salesforce of this ConnectorConfigurationConnectorMetadata.


        :return: The salesforce of this ConnectorConfigurationConnectorMetadata.
        :rtype: ConnectorMetadataSalesforce
        """
        return self._salesforce

    @salesforce.setter
    def salesforce(self, salesforce):
        """Sets the salesforce of this ConnectorConfigurationConnectorMetadata.


        :param salesforce: The salesforce of this ConnectorConfigurationConnectorMetadata.
        :type salesforce: ConnectorMetadataSalesforce
        """

        self._salesforce = salesforce

    @property
    def service_now(self):
        """Gets the service_now of this ConnectorConfigurationConnectorMetadata.


        :return: The service_now of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._service_now

    @service_now.setter
    def service_now(self, service_now):
        """Sets the service_now of this ConnectorConfigurationConnectorMetadata.


        :param service_now: The service_now of this ConnectorConfigurationConnectorMetadata.
        :type service_now: object
        """

        self._service_now = service_now

    @property
    def singular(self):
        """Gets the singular of this ConnectorConfigurationConnectorMetadata.


        :return: The singular of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._singular

    @singular.setter
    def singular(self, singular):
        """Sets the singular of this ConnectorConfigurationConnectorMetadata.


        :param singular: The singular of this ConnectorConfigurationConnectorMetadata.
        :type singular: object
        """

        self._singular = singular

    @property
    def slack(self):
        """Gets the slack of this ConnectorConfigurationConnectorMetadata.


        :return: The slack of this ConnectorConfigurationConnectorMetadata.
        :rtype: ConnectorMetadataSlack
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this ConnectorConfigurationConnectorMetadata.


        :param slack: The slack of this ConnectorConfigurationConnectorMetadata.
        :type slack: ConnectorMetadataSlack
        """

        self._slack = slack

    @property
    def snowflake(self):
        """Gets the snowflake of this ConnectorConfigurationConnectorMetadata.


        :return: The snowflake of this ConnectorConfigurationConnectorMetadata.
        :rtype: ConnectorMetadataSnowflake
        """
        return self._snowflake

    @snowflake.setter
    def snowflake(self, snowflake):
        """Sets the snowflake of this ConnectorConfigurationConnectorMetadata.


        :param snowflake: The snowflake of this ConnectorConfigurationConnectorMetadata.
        :type snowflake: ConnectorMetadataSnowflake
        """

        self._snowflake = snowflake

    @property
    def trendmicro(self):
        """Gets the trendmicro of this ConnectorConfigurationConnectorMetadata.


        :return: The trendmicro of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._trendmicro

    @trendmicro.setter
    def trendmicro(self, trendmicro):
        """Sets the trendmicro of this ConnectorConfigurationConnectorMetadata.


        :param trendmicro: The trendmicro of this ConnectorConfigurationConnectorMetadata.
        :type trendmicro: object
        """

        self._trendmicro = trendmicro

    @property
    def veeva(self):
        """Gets the veeva of this ConnectorConfigurationConnectorMetadata.


        :return: The veeva of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._veeva

    @veeva.setter
    def veeva(self, veeva):
        """Sets the veeva of this ConnectorConfigurationConnectorMetadata.


        :param veeva: The veeva of this ConnectorConfigurationConnectorMetadata.
        :type veeva: object
        """

        self._veeva = veeva

    @property
    def zendesk(self):
        """Gets the zendesk of this ConnectorConfigurationConnectorMetadata.


        :return: The zendesk of this ConnectorConfigurationConnectorMetadata.
        :rtype: ConnectorMetadataZendesk
        """
        return self._zendesk

    @zendesk.setter
    def zendesk(self, zendesk):
        """Sets the zendesk of this ConnectorConfigurationConnectorMetadata.


        :param zendesk: The zendesk of this ConnectorConfigurationConnectorMetadata.
        :type zendesk: ConnectorMetadataZendesk
        """

        self._zendesk = zendesk

    @property
    def event_bridge(self):
        """Gets the event_bridge of this ConnectorConfigurationConnectorMetadata.


        :return: The event_bridge of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._event_bridge

    @event_bridge.setter
    def event_bridge(self, event_bridge):
        """Sets the event_bridge of this ConnectorConfigurationConnectorMetadata.


        :param event_bridge: The event_bridge of this ConnectorConfigurationConnectorMetadata.
        :type event_bridge: object
        """

        self._event_bridge = event_bridge

    @property
    def upsolver(self):
        """Gets the upsolver of this ConnectorConfigurationConnectorMetadata.


        :return: The upsolver of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._upsolver

    @upsolver.setter
    def upsolver(self, upsolver):
        """Sets the upsolver of this ConnectorConfigurationConnectorMetadata.


        :param upsolver: The upsolver of this ConnectorConfigurationConnectorMetadata.
        :type upsolver: object
        """

        self._upsolver = upsolver

    @property
    def customer_profiles(self):
        """Gets the customer_profiles of this ConnectorConfigurationConnectorMetadata.


        :return: The customer_profiles of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._customer_profiles

    @customer_profiles.setter
    def customer_profiles(self, customer_profiles):
        """Sets the customer_profiles of this ConnectorConfigurationConnectorMetadata.


        :param customer_profiles: The customer_profiles of this ConnectorConfigurationConnectorMetadata.
        :type customer_profiles: object
        """

        self._customer_profiles = customer_profiles

    @property
    def honeycode(self):
        """Gets the honeycode of this ConnectorConfigurationConnectorMetadata.


        :return: The honeycode of this ConnectorConfigurationConnectorMetadata.
        :rtype: ConnectorMetadataHoneycode
        """
        return self._honeycode

    @honeycode.setter
    def honeycode(self, honeycode):
        """Sets the honeycode of this ConnectorConfigurationConnectorMetadata.


        :param honeycode: The honeycode of this ConnectorConfigurationConnectorMetadata.
        :type honeycode: ConnectorMetadataHoneycode
        """

        self._honeycode = honeycode

    @property
    def sapo_data(self):
        """Gets the sapo_data of this ConnectorConfigurationConnectorMetadata.

         The connector metadata specific to SAPOData. 

        :return: The sapo_data of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._sapo_data

    @sapo_data.setter
    def sapo_data(self, sapo_data):
        """Sets the sapo_data of this ConnectorConfigurationConnectorMetadata.

         The connector metadata specific to SAPOData. 

        :param sapo_data: The sapo_data of this ConnectorConfigurationConnectorMetadata.
        :type sapo_data: object
        """

        self._sapo_data = sapo_data

    @property
    def pardot(self):
        """Gets the pardot of this ConnectorConfigurationConnectorMetadata.


        :return: The pardot of this ConnectorConfigurationConnectorMetadata.
        :rtype: object
        """
        return self._pardot

    @pardot.setter
    def pardot(self, pardot):
        """Sets the pardot of this ConnectorConfigurationConnectorMetadata.


        :param pardot: The pardot of this ConnectorConfigurationConnectorMetadata.
        :type pardot: object
        """

        self._pardot = pardot
