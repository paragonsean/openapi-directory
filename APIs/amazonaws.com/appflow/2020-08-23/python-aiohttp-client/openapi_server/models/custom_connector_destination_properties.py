# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_connector_destination_properties_error_handling_config import CustomConnectorDestinationPropertiesErrorHandlingConfig
from openapi_server.models.write_operation_type import WriteOperationType
from openapi_server import util


class CustomConnectorDestinationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_name: str=None, error_handling_config: CustomConnectorDestinationPropertiesErrorHandlingConfig=None, write_operation_type: WriteOperationType=None, id_field_names: List=None, custom_properties: Dict=None):
        """CustomConnectorDestinationProperties - a model defined in OpenAPI

        :param entity_name: The entity_name of this CustomConnectorDestinationProperties.
        :param error_handling_config: The error_handling_config of this CustomConnectorDestinationProperties.
        :param write_operation_type: The write_operation_type of this CustomConnectorDestinationProperties.
        :param id_field_names: The id_field_names of this CustomConnectorDestinationProperties.
        :param custom_properties: The custom_properties of this CustomConnectorDestinationProperties.
        """
        self.openapi_types = {
            'entity_name': str,
            'error_handling_config': CustomConnectorDestinationPropertiesErrorHandlingConfig,
            'write_operation_type': WriteOperationType,
            'id_field_names': List,
            'custom_properties': Dict
        }

        self.attribute_map = {
            'entity_name': 'entityName',
            'error_handling_config': 'errorHandlingConfig',
            'write_operation_type': 'writeOperationType',
            'id_field_names': 'idFieldNames',
            'custom_properties': 'customProperties'
        }

        self._entity_name = entity_name
        self._error_handling_config = error_handling_config
        self._write_operation_type = write_operation_type
        self._id_field_names = id_field_names
        self._custom_properties = custom_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomConnectorDestinationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomConnectorDestinationProperties of this CustomConnectorDestinationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_name(self):
        """Gets the entity_name of this CustomConnectorDestinationProperties.


        :return: The entity_name of this CustomConnectorDestinationProperties.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this CustomConnectorDestinationProperties.


        :param entity_name: The entity_name of this CustomConnectorDestinationProperties.
        :type entity_name: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")

        self._entity_name = entity_name

    @property
    def error_handling_config(self):
        """Gets the error_handling_config of this CustomConnectorDestinationProperties.


        :return: The error_handling_config of this CustomConnectorDestinationProperties.
        :rtype: CustomConnectorDestinationPropertiesErrorHandlingConfig
        """
        return self._error_handling_config

    @error_handling_config.setter
    def error_handling_config(self, error_handling_config):
        """Sets the error_handling_config of this CustomConnectorDestinationProperties.


        :param error_handling_config: The error_handling_config of this CustomConnectorDestinationProperties.
        :type error_handling_config: CustomConnectorDestinationPropertiesErrorHandlingConfig
        """

        self._error_handling_config = error_handling_config

    @property
    def write_operation_type(self):
        """Gets the write_operation_type of this CustomConnectorDestinationProperties.


        :return: The write_operation_type of this CustomConnectorDestinationProperties.
        :rtype: WriteOperationType
        """
        return self._write_operation_type

    @write_operation_type.setter
    def write_operation_type(self, write_operation_type):
        """Sets the write_operation_type of this CustomConnectorDestinationProperties.


        :param write_operation_type: The write_operation_type of this CustomConnectorDestinationProperties.
        :type write_operation_type: WriteOperationType
        """

        self._write_operation_type = write_operation_type

    @property
    def id_field_names(self):
        """Gets the id_field_names of this CustomConnectorDestinationProperties.


        :return: The id_field_names of this CustomConnectorDestinationProperties.
        :rtype: List
        """
        return self._id_field_names

    @id_field_names.setter
    def id_field_names(self, id_field_names):
        """Sets the id_field_names of this CustomConnectorDestinationProperties.


        :param id_field_names: The id_field_names of this CustomConnectorDestinationProperties.
        :type id_field_names: List
        """

        self._id_field_names = id_field_names

    @property
    def custom_properties(self):
        """Gets the custom_properties of this CustomConnectorDestinationProperties.


        :return: The custom_properties of this CustomConnectorDestinationProperties.
        :rtype: Dict
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this CustomConnectorDestinationProperties.


        :param custom_properties: The custom_properties of this CustomConnectorDestinationProperties.
        :type custom_properties: Dict
        """

        self._custom_properties = custom_properties
