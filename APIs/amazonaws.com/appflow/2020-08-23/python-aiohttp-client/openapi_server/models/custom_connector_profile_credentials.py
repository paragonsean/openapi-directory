# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server.models.custom_connector_profile_credentials_api_key import CustomConnectorProfileCredentialsApiKey
from openapi_server.models.custom_connector_profile_credentials_basic import CustomConnectorProfileCredentialsBasic
from openapi_server.models.custom_connector_profile_credentials_custom import CustomConnectorProfileCredentialsCustom
from openapi_server.models.custom_connector_profile_credentials_oauth2 import CustomConnectorProfileCredentialsOauth2
from openapi_server import util


class CustomConnectorProfileCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_type: AuthenticationType=None, basic: CustomConnectorProfileCredentialsBasic=None, oauth2: CustomConnectorProfileCredentialsOauth2=None, api_key: CustomConnectorProfileCredentialsApiKey=None, custom: CustomConnectorProfileCredentialsCustom=None):
        """CustomConnectorProfileCredentials - a model defined in OpenAPI

        :param authentication_type: The authentication_type of this CustomConnectorProfileCredentials.
        :param basic: The basic of this CustomConnectorProfileCredentials.
        :param oauth2: The oauth2 of this CustomConnectorProfileCredentials.
        :param api_key: The api_key of this CustomConnectorProfileCredentials.
        :param custom: The custom of this CustomConnectorProfileCredentials.
        """
        self.openapi_types = {
            'authentication_type': AuthenticationType,
            'basic': CustomConnectorProfileCredentialsBasic,
            'oauth2': CustomConnectorProfileCredentialsOauth2,
            'api_key': CustomConnectorProfileCredentialsApiKey,
            'custom': CustomConnectorProfileCredentialsCustom
        }

        self.attribute_map = {
            'authentication_type': 'authenticationType',
            'basic': 'basic',
            'oauth2': 'oauth2',
            'api_key': 'apiKey',
            'custom': 'custom'
        }

        self._authentication_type = authentication_type
        self._basic = basic
        self._oauth2 = oauth2
        self._api_key = api_key
        self._custom = custom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomConnectorProfileCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomConnectorProfileCredentials of this CustomConnectorProfileCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_type(self):
        """Gets the authentication_type of this CustomConnectorProfileCredentials.


        :return: The authentication_type of this CustomConnectorProfileCredentials.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this CustomConnectorProfileCredentials.


        :param authentication_type: The authentication_type of this CustomConnectorProfileCredentials.
        :type authentication_type: AuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")

        self._authentication_type = authentication_type

    @property
    def basic(self):
        """Gets the basic of this CustomConnectorProfileCredentials.


        :return: The basic of this CustomConnectorProfileCredentials.
        :rtype: CustomConnectorProfileCredentialsBasic
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this CustomConnectorProfileCredentials.


        :param basic: The basic of this CustomConnectorProfileCredentials.
        :type basic: CustomConnectorProfileCredentialsBasic
        """

        self._basic = basic

    @property
    def oauth2(self):
        """Gets the oauth2 of this CustomConnectorProfileCredentials.


        :return: The oauth2 of this CustomConnectorProfileCredentials.
        :rtype: CustomConnectorProfileCredentialsOauth2
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this CustomConnectorProfileCredentials.


        :param oauth2: The oauth2 of this CustomConnectorProfileCredentials.
        :type oauth2: CustomConnectorProfileCredentialsOauth2
        """

        self._oauth2 = oauth2

    @property
    def api_key(self):
        """Gets the api_key of this CustomConnectorProfileCredentials.


        :return: The api_key of this CustomConnectorProfileCredentials.
        :rtype: CustomConnectorProfileCredentialsApiKey
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this CustomConnectorProfileCredentials.


        :param api_key: The api_key of this CustomConnectorProfileCredentials.
        :type api_key: CustomConnectorProfileCredentialsApiKey
        """

        self._api_key = api_key

    @property
    def custom(self):
        """Gets the custom of this CustomConnectorProfileCredentials.


        :return: The custom of this CustomConnectorProfileCredentials.
        :rtype: CustomConnectorProfileCredentialsCustom
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this CustomConnectorProfileCredentials.


        :param custom: The custom of this CustomConnectorProfileCredentials.
        :type custom: CustomConnectorProfileCredentialsCustom
        """

        self._custom = custom
