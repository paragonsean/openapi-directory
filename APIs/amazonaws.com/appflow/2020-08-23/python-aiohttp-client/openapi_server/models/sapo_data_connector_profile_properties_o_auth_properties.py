# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SAPODataConnectorProfilePropertiesOAuthProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_url: str=None, auth_code_url: str=None, o_auth_scopes: List=None):
        """SAPODataConnectorProfilePropertiesOAuthProperties - a model defined in OpenAPI

        :param token_url: The token_url of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :param auth_code_url: The auth_code_url of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :param o_auth_scopes: The o_auth_scopes of this SAPODataConnectorProfilePropertiesOAuthProperties.
        """
        self.openapi_types = {
            'token_url': str,
            'auth_code_url': str,
            'o_auth_scopes': List
        }

        self.attribute_map = {
            'token_url': 'tokenUrl',
            'auth_code_url': 'authCodeUrl',
            'o_auth_scopes': 'oAuthScopes'
        }

        self._token_url = token_url
        self._auth_code_url = auth_code_url
        self._o_auth_scopes = o_auth_scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SAPODataConnectorProfilePropertiesOAuthProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SAPODataConnectorProfileProperties_oAuthProperties of this SAPODataConnectorProfilePropertiesOAuthProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_url(self):
        """Gets the token_url of this SAPODataConnectorProfilePropertiesOAuthProperties.


        :return: The token_url of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :rtype: str
        """
        return self._token_url

    @token_url.setter
    def token_url(self, token_url):
        """Sets the token_url of this SAPODataConnectorProfilePropertiesOAuthProperties.


        :param token_url: The token_url of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :type token_url: str
        """
        if token_url is None:
            raise ValueError("Invalid value for `token_url`, must not be `None`")

        self._token_url = token_url

    @property
    def auth_code_url(self):
        """Gets the auth_code_url of this SAPODataConnectorProfilePropertiesOAuthProperties.


        :return: The auth_code_url of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :rtype: str
        """
        return self._auth_code_url

    @auth_code_url.setter
    def auth_code_url(self, auth_code_url):
        """Sets the auth_code_url of this SAPODataConnectorProfilePropertiesOAuthProperties.


        :param auth_code_url: The auth_code_url of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :type auth_code_url: str
        """
        if auth_code_url is None:
            raise ValueError("Invalid value for `auth_code_url`, must not be `None`")

        self._auth_code_url = auth_code_url

    @property
    def o_auth_scopes(self):
        """Gets the o_auth_scopes of this SAPODataConnectorProfilePropertiesOAuthProperties.


        :return: The o_auth_scopes of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :rtype: List
        """
        return self._o_auth_scopes

    @o_auth_scopes.setter
    def o_auth_scopes(self, o_auth_scopes):
        """Sets the o_auth_scopes of this SAPODataConnectorProfilePropertiesOAuthProperties.


        :param o_auth_scopes: The o_auth_scopes of this SAPODataConnectorProfilePropertiesOAuthProperties.
        :type o_auth_scopes: List
        """
        if o_auth_scopes is None:
            raise ValueError("Invalid value for `o_auth_scopes`, must not be `None`")

        self._o_auth_scopes = o_auth_scopes
