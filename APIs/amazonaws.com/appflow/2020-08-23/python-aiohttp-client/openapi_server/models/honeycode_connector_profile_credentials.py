# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_o_auth_request import ConnectorOAuthRequest
from openapi_server import util


class HoneycodeConnectorProfileCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, refresh_token: str=None, o_auth_request: ConnectorOAuthRequest=None):
        """HoneycodeConnectorProfileCredentials - a model defined in OpenAPI

        :param access_token: The access_token of this HoneycodeConnectorProfileCredentials.
        :param refresh_token: The refresh_token of this HoneycodeConnectorProfileCredentials.
        :param o_auth_request: The o_auth_request of this HoneycodeConnectorProfileCredentials.
        """
        self.openapi_types = {
            'access_token': str,
            'refresh_token': str,
            'o_auth_request': ConnectorOAuthRequest
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'refresh_token': 'refreshToken',
            'o_auth_request': 'oAuthRequest'
        }

        self._access_token = access_token
        self._refresh_token = refresh_token
        self._o_auth_request = o_auth_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HoneycodeConnectorProfileCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HoneycodeConnectorProfileCredentials of this HoneycodeConnectorProfileCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this HoneycodeConnectorProfileCredentials.


        :return: The access_token of this HoneycodeConnectorProfileCredentials.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this HoneycodeConnectorProfileCredentials.


        :param access_token: The access_token of this HoneycodeConnectorProfileCredentials.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this HoneycodeConnectorProfileCredentials.


        :return: The refresh_token of this HoneycodeConnectorProfileCredentials.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this HoneycodeConnectorProfileCredentials.


        :param refresh_token: The refresh_token of this HoneycodeConnectorProfileCredentials.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def o_auth_request(self):
        """Gets the o_auth_request of this HoneycodeConnectorProfileCredentials.


        :return: The o_auth_request of this HoneycodeConnectorProfileCredentials.
        :rtype: ConnectorOAuthRequest
        """
        return self._o_auth_request

    @o_auth_request.setter
    def o_auth_request(self, o_auth_request):
        """Sets the o_auth_request of this HoneycodeConnectorProfileCredentials.


        :param o_auth_request: The o_auth_request of this HoneycodeConnectorProfileCredentials.
        :type o_auth_request: ConnectorOAuthRequest
        """

        self._o_auth_request = o_auth_request
