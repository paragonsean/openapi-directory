# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_config_o_auth2_defaults import AuthenticationConfigOAuth2Defaults
from openapi_server import util


class ConnectorConfigurationAuthenticationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_basic_auth_supported: bool=None, is_api_key_auth_supported: bool=None, is_o_auth2_supported: bool=None, is_custom_auth_supported: bool=None, o_auth2_defaults: AuthenticationConfigOAuth2Defaults=None, custom_auth_configs: List=None):
        """ConnectorConfigurationAuthenticationConfig - a model defined in OpenAPI

        :param is_basic_auth_supported: The is_basic_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :param is_api_key_auth_supported: The is_api_key_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :param is_o_auth2_supported: The is_o_auth2_supported of this ConnectorConfigurationAuthenticationConfig.
        :param is_custom_auth_supported: The is_custom_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :param o_auth2_defaults: The o_auth2_defaults of this ConnectorConfigurationAuthenticationConfig.
        :param custom_auth_configs: The custom_auth_configs of this ConnectorConfigurationAuthenticationConfig.
        """
        self.openapi_types = {
            'is_basic_auth_supported': bool,
            'is_api_key_auth_supported': bool,
            'is_o_auth2_supported': bool,
            'is_custom_auth_supported': bool,
            'o_auth2_defaults': AuthenticationConfigOAuth2Defaults,
            'custom_auth_configs': List
        }

        self.attribute_map = {
            'is_basic_auth_supported': 'isBasicAuthSupported',
            'is_api_key_auth_supported': 'isApiKeyAuthSupported',
            'is_o_auth2_supported': 'isOAuth2Supported',
            'is_custom_auth_supported': 'isCustomAuthSupported',
            'o_auth2_defaults': 'oAuth2Defaults',
            'custom_auth_configs': 'customAuthConfigs'
        }

        self._is_basic_auth_supported = is_basic_auth_supported
        self._is_api_key_auth_supported = is_api_key_auth_supported
        self._is_o_auth2_supported = is_o_auth2_supported
        self._is_custom_auth_supported = is_custom_auth_supported
        self._o_auth2_defaults = o_auth2_defaults
        self._custom_auth_configs = custom_auth_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorConfigurationAuthenticationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorConfiguration_authenticationConfig of this ConnectorConfigurationAuthenticationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_basic_auth_supported(self):
        """Gets the is_basic_auth_supported of this ConnectorConfigurationAuthenticationConfig.


        :return: The is_basic_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :rtype: bool
        """
        return self._is_basic_auth_supported

    @is_basic_auth_supported.setter
    def is_basic_auth_supported(self, is_basic_auth_supported):
        """Sets the is_basic_auth_supported of this ConnectorConfigurationAuthenticationConfig.


        :param is_basic_auth_supported: The is_basic_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :type is_basic_auth_supported: bool
        """

        self._is_basic_auth_supported = is_basic_auth_supported

    @property
    def is_api_key_auth_supported(self):
        """Gets the is_api_key_auth_supported of this ConnectorConfigurationAuthenticationConfig.


        :return: The is_api_key_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :rtype: bool
        """
        return self._is_api_key_auth_supported

    @is_api_key_auth_supported.setter
    def is_api_key_auth_supported(self, is_api_key_auth_supported):
        """Sets the is_api_key_auth_supported of this ConnectorConfigurationAuthenticationConfig.


        :param is_api_key_auth_supported: The is_api_key_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :type is_api_key_auth_supported: bool
        """

        self._is_api_key_auth_supported = is_api_key_auth_supported

    @property
    def is_o_auth2_supported(self):
        """Gets the is_o_auth2_supported of this ConnectorConfigurationAuthenticationConfig.


        :return: The is_o_auth2_supported of this ConnectorConfigurationAuthenticationConfig.
        :rtype: bool
        """
        return self._is_o_auth2_supported

    @is_o_auth2_supported.setter
    def is_o_auth2_supported(self, is_o_auth2_supported):
        """Sets the is_o_auth2_supported of this ConnectorConfigurationAuthenticationConfig.


        :param is_o_auth2_supported: The is_o_auth2_supported of this ConnectorConfigurationAuthenticationConfig.
        :type is_o_auth2_supported: bool
        """

        self._is_o_auth2_supported = is_o_auth2_supported

    @property
    def is_custom_auth_supported(self):
        """Gets the is_custom_auth_supported of this ConnectorConfigurationAuthenticationConfig.


        :return: The is_custom_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :rtype: bool
        """
        return self._is_custom_auth_supported

    @is_custom_auth_supported.setter
    def is_custom_auth_supported(self, is_custom_auth_supported):
        """Sets the is_custom_auth_supported of this ConnectorConfigurationAuthenticationConfig.


        :param is_custom_auth_supported: The is_custom_auth_supported of this ConnectorConfigurationAuthenticationConfig.
        :type is_custom_auth_supported: bool
        """

        self._is_custom_auth_supported = is_custom_auth_supported

    @property
    def o_auth2_defaults(self):
        """Gets the o_auth2_defaults of this ConnectorConfigurationAuthenticationConfig.


        :return: The o_auth2_defaults of this ConnectorConfigurationAuthenticationConfig.
        :rtype: AuthenticationConfigOAuth2Defaults
        """
        return self._o_auth2_defaults

    @o_auth2_defaults.setter
    def o_auth2_defaults(self, o_auth2_defaults):
        """Sets the o_auth2_defaults of this ConnectorConfigurationAuthenticationConfig.


        :param o_auth2_defaults: The o_auth2_defaults of this ConnectorConfigurationAuthenticationConfig.
        :type o_auth2_defaults: AuthenticationConfigOAuth2Defaults
        """

        self._o_auth2_defaults = o_auth2_defaults

    @property
    def custom_auth_configs(self):
        """Gets the custom_auth_configs of this ConnectorConfigurationAuthenticationConfig.


        :return: The custom_auth_configs of this ConnectorConfigurationAuthenticationConfig.
        :rtype: List
        """
        return self._custom_auth_configs

    @custom_auth_configs.setter
    def custom_auth_configs(self, custom_auth_configs):
        """Sets the custom_auth_configs of this ConnectorConfigurationAuthenticationConfig.


        :param custom_auth_configs: The custom_auth_configs of this ConnectorConfigurationAuthenticationConfig.
        :type custom_auth_configs: List
        """

        self._custom_auth_configs = custom_auth_configs
