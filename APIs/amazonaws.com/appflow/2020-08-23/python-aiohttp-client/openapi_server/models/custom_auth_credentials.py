# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomAuthCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_authentication_type: str=None, credentials_map: Dict=None):
        """CustomAuthCredentials - a model defined in OpenAPI

        :param custom_authentication_type: The custom_authentication_type of this CustomAuthCredentials.
        :param credentials_map: The credentials_map of this CustomAuthCredentials.
        """
        self.openapi_types = {
            'custom_authentication_type': str,
            'credentials_map': Dict
        }

        self.attribute_map = {
            'custom_authentication_type': 'customAuthenticationType',
            'credentials_map': 'credentialsMap'
        }

        self._custom_authentication_type = custom_authentication_type
        self._credentials_map = credentials_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomAuthCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAuthCredentials of this CustomAuthCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_authentication_type(self):
        """Gets the custom_authentication_type of this CustomAuthCredentials.


        :return: The custom_authentication_type of this CustomAuthCredentials.
        :rtype: str
        """
        return self._custom_authentication_type

    @custom_authentication_type.setter
    def custom_authentication_type(self, custom_authentication_type):
        """Sets the custom_authentication_type of this CustomAuthCredentials.


        :param custom_authentication_type: The custom_authentication_type of this CustomAuthCredentials.
        :type custom_authentication_type: str
        """
        if custom_authentication_type is None:
            raise ValueError("Invalid value for `custom_authentication_type`, must not be `None`")

        self._custom_authentication_type = custom_authentication_type

    @property
    def credentials_map(self):
        """Gets the credentials_map of this CustomAuthCredentials.


        :return: The credentials_map of this CustomAuthCredentials.
        :rtype: Dict
        """
        return self._credentials_map

    @credentials_map.setter
    def credentials_map(self, credentials_map):
        """Sets the credentials_map of this CustomAuthCredentials.


        :param credentials_map: The credentials_map of this CustomAuthCredentials.
        :type credentials_map: Dict
        """

        self._credentials_map = credentials_map
