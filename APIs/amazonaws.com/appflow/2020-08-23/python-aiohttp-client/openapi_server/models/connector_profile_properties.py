# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_profile_properties_custom_connector import ConnectorProfilePropertiesCustomConnector
from openapi_server.models.connector_profile_properties_datadog import ConnectorProfilePropertiesDatadog
from openapi_server.models.connector_profile_properties_dynatrace import ConnectorProfilePropertiesDynatrace
from openapi_server.models.connector_profile_properties_infor_nexus import ConnectorProfilePropertiesInforNexus
from openapi_server.models.connector_profile_properties_marketo import ConnectorProfilePropertiesMarketo
from openapi_server.models.connector_profile_properties_pardot import ConnectorProfilePropertiesPardot
from openapi_server.models.connector_profile_properties_redshift import ConnectorProfilePropertiesRedshift
from openapi_server.models.connector_profile_properties_salesforce import ConnectorProfilePropertiesSalesforce
from openapi_server.models.connector_profile_properties_service_now import ConnectorProfilePropertiesServiceNow
from openapi_server.models.connector_profile_properties_slack import ConnectorProfilePropertiesSlack
from openapi_server.models.connector_profile_properties_snowflake import ConnectorProfilePropertiesSnowflake
from openapi_server.models.connector_profile_properties_veeva import ConnectorProfilePropertiesVeeva
from openapi_server.models.connector_profile_properties_zendesk import ConnectorProfilePropertiesZendesk
from openapi_server.models.sapo_data_connector_profile_properties import SAPODataConnectorProfileProperties
from openapi_server import util


class ConnectorProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amplitude: object=None, datadog: ConnectorProfilePropertiesDatadog=None, dynatrace: ConnectorProfilePropertiesDynatrace=None, google_analytics: object=None, honeycode: object=None, infor_nexus: ConnectorProfilePropertiesInforNexus=None, marketo: ConnectorProfilePropertiesMarketo=None, redshift: ConnectorProfilePropertiesRedshift=None, salesforce: ConnectorProfilePropertiesSalesforce=None, service_now: ConnectorProfilePropertiesServiceNow=None, singular: object=None, slack: ConnectorProfilePropertiesSlack=None, snowflake: ConnectorProfilePropertiesSnowflake=None, trendmicro: object=None, veeva: ConnectorProfilePropertiesVeeva=None, zendesk: ConnectorProfilePropertiesZendesk=None, sapo_data: SAPODataConnectorProfileProperties=None, custom_connector: ConnectorProfilePropertiesCustomConnector=None, pardot: ConnectorProfilePropertiesPardot=None):
        """ConnectorProfileProperties - a model defined in OpenAPI

        :param amplitude: The amplitude of this ConnectorProfileProperties.
        :param datadog: The datadog of this ConnectorProfileProperties.
        :param dynatrace: The dynatrace of this ConnectorProfileProperties.
        :param google_analytics: The google_analytics of this ConnectorProfileProperties.
        :param honeycode: The honeycode of this ConnectorProfileProperties.
        :param infor_nexus: The infor_nexus of this ConnectorProfileProperties.
        :param marketo: The marketo of this ConnectorProfileProperties.
        :param redshift: The redshift of this ConnectorProfileProperties.
        :param salesforce: The salesforce of this ConnectorProfileProperties.
        :param service_now: The service_now of this ConnectorProfileProperties.
        :param singular: The singular of this ConnectorProfileProperties.
        :param slack: The slack of this ConnectorProfileProperties.
        :param snowflake: The snowflake of this ConnectorProfileProperties.
        :param trendmicro: The trendmicro of this ConnectorProfileProperties.
        :param veeva: The veeva of this ConnectorProfileProperties.
        :param zendesk: The zendesk of this ConnectorProfileProperties.
        :param sapo_data: The sapo_data of this ConnectorProfileProperties.
        :param custom_connector: The custom_connector of this ConnectorProfileProperties.
        :param pardot: The pardot of this ConnectorProfileProperties.
        """
        self.openapi_types = {
            'amplitude': object,
            'datadog': ConnectorProfilePropertiesDatadog,
            'dynatrace': ConnectorProfilePropertiesDynatrace,
            'google_analytics': object,
            'honeycode': object,
            'infor_nexus': ConnectorProfilePropertiesInforNexus,
            'marketo': ConnectorProfilePropertiesMarketo,
            'redshift': ConnectorProfilePropertiesRedshift,
            'salesforce': ConnectorProfilePropertiesSalesforce,
            'service_now': ConnectorProfilePropertiesServiceNow,
            'singular': object,
            'slack': ConnectorProfilePropertiesSlack,
            'snowflake': ConnectorProfilePropertiesSnowflake,
            'trendmicro': object,
            'veeva': ConnectorProfilePropertiesVeeva,
            'zendesk': ConnectorProfilePropertiesZendesk,
            'sapo_data': SAPODataConnectorProfileProperties,
            'custom_connector': ConnectorProfilePropertiesCustomConnector,
            'pardot': ConnectorProfilePropertiesPardot
        }

        self.attribute_map = {
            'amplitude': 'Amplitude',
            'datadog': 'Datadog',
            'dynatrace': 'Dynatrace',
            'google_analytics': 'GoogleAnalytics',
            'honeycode': 'Honeycode',
            'infor_nexus': 'InforNexus',
            'marketo': 'Marketo',
            'redshift': 'Redshift',
            'salesforce': 'Salesforce',
            'service_now': 'ServiceNow',
            'singular': 'Singular',
            'slack': 'Slack',
            'snowflake': 'Snowflake',
            'trendmicro': 'Trendmicro',
            'veeva': 'Veeva',
            'zendesk': 'Zendesk',
            'sapo_data': 'SAPOData',
            'custom_connector': 'CustomConnector',
            'pardot': 'Pardot'
        }

        self._amplitude = amplitude
        self._datadog = datadog
        self._dynatrace = dynatrace
        self._google_analytics = google_analytics
        self._honeycode = honeycode
        self._infor_nexus = infor_nexus
        self._marketo = marketo
        self._redshift = redshift
        self._salesforce = salesforce
        self._service_now = service_now
        self._singular = singular
        self._slack = slack
        self._snowflake = snowflake
        self._trendmicro = trendmicro
        self._veeva = veeva
        self._zendesk = zendesk
        self._sapo_data = sapo_data
        self._custom_connector = custom_connector
        self._pardot = pardot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorProfileProperties of this ConnectorProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amplitude(self):
        """Gets the amplitude of this ConnectorProfileProperties.


        :return: The amplitude of this ConnectorProfileProperties.
        :rtype: object
        """
        return self._amplitude

    @amplitude.setter
    def amplitude(self, amplitude):
        """Sets the amplitude of this ConnectorProfileProperties.


        :param amplitude: The amplitude of this ConnectorProfileProperties.
        :type amplitude: object
        """

        self._amplitude = amplitude

    @property
    def datadog(self):
        """Gets the datadog of this ConnectorProfileProperties.


        :return: The datadog of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesDatadog
        """
        return self._datadog

    @datadog.setter
    def datadog(self, datadog):
        """Sets the datadog of this ConnectorProfileProperties.


        :param datadog: The datadog of this ConnectorProfileProperties.
        :type datadog: ConnectorProfilePropertiesDatadog
        """

        self._datadog = datadog

    @property
    def dynatrace(self):
        """Gets the dynatrace of this ConnectorProfileProperties.


        :return: The dynatrace of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesDynatrace
        """
        return self._dynatrace

    @dynatrace.setter
    def dynatrace(self, dynatrace):
        """Sets the dynatrace of this ConnectorProfileProperties.


        :param dynatrace: The dynatrace of this ConnectorProfileProperties.
        :type dynatrace: ConnectorProfilePropertiesDynatrace
        """

        self._dynatrace = dynatrace

    @property
    def google_analytics(self):
        """Gets the google_analytics of this ConnectorProfileProperties.


        :return: The google_analytics of this ConnectorProfileProperties.
        :rtype: object
        """
        return self._google_analytics

    @google_analytics.setter
    def google_analytics(self, google_analytics):
        """Sets the google_analytics of this ConnectorProfileProperties.


        :param google_analytics: The google_analytics of this ConnectorProfileProperties.
        :type google_analytics: object
        """

        self._google_analytics = google_analytics

    @property
    def honeycode(self):
        """Gets the honeycode of this ConnectorProfileProperties.


        :return: The honeycode of this ConnectorProfileProperties.
        :rtype: object
        """
        return self._honeycode

    @honeycode.setter
    def honeycode(self, honeycode):
        """Sets the honeycode of this ConnectorProfileProperties.


        :param honeycode: The honeycode of this ConnectorProfileProperties.
        :type honeycode: object
        """

        self._honeycode = honeycode

    @property
    def infor_nexus(self):
        """Gets the infor_nexus of this ConnectorProfileProperties.


        :return: The infor_nexus of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesInforNexus
        """
        return self._infor_nexus

    @infor_nexus.setter
    def infor_nexus(self, infor_nexus):
        """Sets the infor_nexus of this ConnectorProfileProperties.


        :param infor_nexus: The infor_nexus of this ConnectorProfileProperties.
        :type infor_nexus: ConnectorProfilePropertiesInforNexus
        """

        self._infor_nexus = infor_nexus

    @property
    def marketo(self):
        """Gets the marketo of this ConnectorProfileProperties.


        :return: The marketo of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesMarketo
        """
        return self._marketo

    @marketo.setter
    def marketo(self, marketo):
        """Sets the marketo of this ConnectorProfileProperties.


        :param marketo: The marketo of this ConnectorProfileProperties.
        :type marketo: ConnectorProfilePropertiesMarketo
        """

        self._marketo = marketo

    @property
    def redshift(self):
        """Gets the redshift of this ConnectorProfileProperties.


        :return: The redshift of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesRedshift
        """
        return self._redshift

    @redshift.setter
    def redshift(self, redshift):
        """Sets the redshift of this ConnectorProfileProperties.


        :param redshift: The redshift of this ConnectorProfileProperties.
        :type redshift: ConnectorProfilePropertiesRedshift
        """

        self._redshift = redshift

    @property
    def salesforce(self):
        """Gets the salesforce of this ConnectorProfileProperties.


        :return: The salesforce of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesSalesforce
        """
        return self._salesforce

    @salesforce.setter
    def salesforce(self, salesforce):
        """Sets the salesforce of this ConnectorProfileProperties.


        :param salesforce: The salesforce of this ConnectorProfileProperties.
        :type salesforce: ConnectorProfilePropertiesSalesforce
        """

        self._salesforce = salesforce

    @property
    def service_now(self):
        """Gets the service_now of this ConnectorProfileProperties.


        :return: The service_now of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesServiceNow
        """
        return self._service_now

    @service_now.setter
    def service_now(self, service_now):
        """Sets the service_now of this ConnectorProfileProperties.


        :param service_now: The service_now of this ConnectorProfileProperties.
        :type service_now: ConnectorProfilePropertiesServiceNow
        """

        self._service_now = service_now

    @property
    def singular(self):
        """Gets the singular of this ConnectorProfileProperties.


        :return: The singular of this ConnectorProfileProperties.
        :rtype: object
        """
        return self._singular

    @singular.setter
    def singular(self, singular):
        """Sets the singular of this ConnectorProfileProperties.


        :param singular: The singular of this ConnectorProfileProperties.
        :type singular: object
        """

        self._singular = singular

    @property
    def slack(self):
        """Gets the slack of this ConnectorProfileProperties.


        :return: The slack of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesSlack
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this ConnectorProfileProperties.


        :param slack: The slack of this ConnectorProfileProperties.
        :type slack: ConnectorProfilePropertiesSlack
        """

        self._slack = slack

    @property
    def snowflake(self):
        """Gets the snowflake of this ConnectorProfileProperties.


        :return: The snowflake of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesSnowflake
        """
        return self._snowflake

    @snowflake.setter
    def snowflake(self, snowflake):
        """Sets the snowflake of this ConnectorProfileProperties.


        :param snowflake: The snowflake of this ConnectorProfileProperties.
        :type snowflake: ConnectorProfilePropertiesSnowflake
        """

        self._snowflake = snowflake

    @property
    def trendmicro(self):
        """Gets the trendmicro of this ConnectorProfileProperties.


        :return: The trendmicro of this ConnectorProfileProperties.
        :rtype: object
        """
        return self._trendmicro

    @trendmicro.setter
    def trendmicro(self, trendmicro):
        """Sets the trendmicro of this ConnectorProfileProperties.


        :param trendmicro: The trendmicro of this ConnectorProfileProperties.
        :type trendmicro: object
        """

        self._trendmicro = trendmicro

    @property
    def veeva(self):
        """Gets the veeva of this ConnectorProfileProperties.


        :return: The veeva of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesVeeva
        """
        return self._veeva

    @veeva.setter
    def veeva(self, veeva):
        """Sets the veeva of this ConnectorProfileProperties.


        :param veeva: The veeva of this ConnectorProfileProperties.
        :type veeva: ConnectorProfilePropertiesVeeva
        """

        self._veeva = veeva

    @property
    def zendesk(self):
        """Gets the zendesk of this ConnectorProfileProperties.


        :return: The zendesk of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesZendesk
        """
        return self._zendesk

    @zendesk.setter
    def zendesk(self, zendesk):
        """Sets the zendesk of this ConnectorProfileProperties.


        :param zendesk: The zendesk of this ConnectorProfileProperties.
        :type zendesk: ConnectorProfilePropertiesZendesk
        """

        self._zendesk = zendesk

    @property
    def sapo_data(self):
        """Gets the sapo_data of this ConnectorProfileProperties.


        :return: The sapo_data of this ConnectorProfileProperties.
        :rtype: SAPODataConnectorProfileProperties
        """
        return self._sapo_data

    @sapo_data.setter
    def sapo_data(self, sapo_data):
        """Sets the sapo_data of this ConnectorProfileProperties.


        :param sapo_data: The sapo_data of this ConnectorProfileProperties.
        :type sapo_data: SAPODataConnectorProfileProperties
        """

        self._sapo_data = sapo_data

    @property
    def custom_connector(self):
        """Gets the custom_connector of this ConnectorProfileProperties.


        :return: The custom_connector of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesCustomConnector
        """
        return self._custom_connector

    @custom_connector.setter
    def custom_connector(self, custom_connector):
        """Sets the custom_connector of this ConnectorProfileProperties.


        :param custom_connector: The custom_connector of this ConnectorProfileProperties.
        :type custom_connector: ConnectorProfilePropertiesCustomConnector
        """

        self._custom_connector = custom_connector

    @property
    def pardot(self):
        """Gets the pardot of this ConnectorProfileProperties.


        :return: The pardot of this ConnectorProfileProperties.
        :rtype: ConnectorProfilePropertiesPardot
        """
        return self._pardot

    @pardot.setter
    def pardot(self, pardot):
        """Sets the pardot of this ConnectorProfileProperties.


        :param pardot: The pardot of this ConnectorProfileProperties.
        :type pardot: ConnectorProfilePropertiesPardot
        """

        self._pardot = pardot
