# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_result_error_info import ExecutionResultErrorInfo
from openapi_server import util


class ExecutionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_info: ExecutionResultErrorInfo=None, bytes_processed: int=None, bytes_written: int=None, records_processed: int=None):
        """ExecutionResult - a model defined in OpenAPI

        :param error_info: The error_info of this ExecutionResult.
        :param bytes_processed: The bytes_processed of this ExecutionResult.
        :param bytes_written: The bytes_written of this ExecutionResult.
        :param records_processed: The records_processed of this ExecutionResult.
        """
        self.openapi_types = {
            'error_info': ExecutionResultErrorInfo,
            'bytes_processed': int,
            'bytes_written': int,
            'records_processed': int
        }

        self.attribute_map = {
            'error_info': 'errorInfo',
            'bytes_processed': 'bytesProcessed',
            'bytes_written': 'bytesWritten',
            'records_processed': 'recordsProcessed'
        }

        self._error_info = error_info
        self._bytes_processed = bytes_processed
        self._bytes_written = bytes_written
        self._records_processed = records_processed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionResult of this ExecutionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_info(self):
        """Gets the error_info of this ExecutionResult.


        :return: The error_info of this ExecutionResult.
        :rtype: ExecutionResultErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this ExecutionResult.


        :param error_info: The error_info of this ExecutionResult.
        :type error_info: ExecutionResultErrorInfo
        """

        self._error_info = error_info

    @property
    def bytes_processed(self):
        """Gets the bytes_processed of this ExecutionResult.


        :return: The bytes_processed of this ExecutionResult.
        :rtype: int
        """
        return self._bytes_processed

    @bytes_processed.setter
    def bytes_processed(self, bytes_processed):
        """Sets the bytes_processed of this ExecutionResult.


        :param bytes_processed: The bytes_processed of this ExecutionResult.
        :type bytes_processed: int
        """

        self._bytes_processed = bytes_processed

    @property
    def bytes_written(self):
        """Gets the bytes_written of this ExecutionResult.


        :return: The bytes_written of this ExecutionResult.
        :rtype: int
        """
        return self._bytes_written

    @bytes_written.setter
    def bytes_written(self, bytes_written):
        """Sets the bytes_written of this ExecutionResult.


        :param bytes_written: The bytes_written of this ExecutionResult.
        :type bytes_written: int
        """

        self._bytes_written = bytes_written

    @property
    def records_processed(self):
        """Gets the records_processed of this ExecutionResult.


        :return: The records_processed of this ExecutionResult.
        :rtype: int
        """
        return self._records_processed

    @records_processed.setter
    def records_processed(self, records_processed):
        """Sets the records_processed of this ExecutionResult.


        :param records_processed: The records_processed of this ExecutionResult.
        :type records_processed: int
        """

        self._records_processed = records_processed
