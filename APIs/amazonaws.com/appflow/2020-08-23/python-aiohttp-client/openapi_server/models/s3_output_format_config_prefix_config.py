# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prefix_format import PrefixFormat
from openapi_server.models.prefix_type import PrefixType
from openapi_server import util


class S3OutputFormatConfigPrefixConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prefix_type: PrefixType=None, prefix_format: PrefixFormat=None, path_prefix_hierarchy: List=None):
        """S3OutputFormatConfigPrefixConfig - a model defined in OpenAPI

        :param prefix_type: The prefix_type of this S3OutputFormatConfigPrefixConfig.
        :param prefix_format: The prefix_format of this S3OutputFormatConfigPrefixConfig.
        :param path_prefix_hierarchy: The path_prefix_hierarchy of this S3OutputFormatConfigPrefixConfig.
        """
        self.openapi_types = {
            'prefix_type': PrefixType,
            'prefix_format': PrefixFormat,
            'path_prefix_hierarchy': List
        }

        self.attribute_map = {
            'prefix_type': 'prefixType',
            'prefix_format': 'prefixFormat',
            'path_prefix_hierarchy': 'pathPrefixHierarchy'
        }

        self._prefix_type = prefix_type
        self._prefix_format = prefix_format
        self._path_prefix_hierarchy = path_prefix_hierarchy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3OutputFormatConfigPrefixConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3OutputFormatConfig_prefixConfig of this S3OutputFormatConfigPrefixConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prefix_type(self):
        """Gets the prefix_type of this S3OutputFormatConfigPrefixConfig.


        :return: The prefix_type of this S3OutputFormatConfigPrefixConfig.
        :rtype: PrefixType
        """
        return self._prefix_type

    @prefix_type.setter
    def prefix_type(self, prefix_type):
        """Sets the prefix_type of this S3OutputFormatConfigPrefixConfig.


        :param prefix_type: The prefix_type of this S3OutputFormatConfigPrefixConfig.
        :type prefix_type: PrefixType
        """

        self._prefix_type = prefix_type

    @property
    def prefix_format(self):
        """Gets the prefix_format of this S3OutputFormatConfigPrefixConfig.


        :return: The prefix_format of this S3OutputFormatConfigPrefixConfig.
        :rtype: PrefixFormat
        """
        return self._prefix_format

    @prefix_format.setter
    def prefix_format(self, prefix_format):
        """Sets the prefix_format of this S3OutputFormatConfigPrefixConfig.


        :param prefix_format: The prefix_format of this S3OutputFormatConfigPrefixConfig.
        :type prefix_format: PrefixFormat
        """

        self._prefix_format = prefix_format

    @property
    def path_prefix_hierarchy(self):
        """Gets the path_prefix_hierarchy of this S3OutputFormatConfigPrefixConfig.


        :return: The path_prefix_hierarchy of this S3OutputFormatConfigPrefixConfig.
        :rtype: List
        """
        return self._path_prefix_hierarchy

    @path_prefix_hierarchy.setter
    def path_prefix_hierarchy(self, path_prefix_hierarchy):
        """Sets the path_prefix_hierarchy of this S3OutputFormatConfigPrefixConfig.


        :param path_prefix_hierarchy: The path_prefix_hierarchy of this S3OutputFormatConfigPrefixConfig.
        :type path_prefix_hierarchy: List
        """

        self._path_prefix_hierarchy = path_prefix_hierarchy
