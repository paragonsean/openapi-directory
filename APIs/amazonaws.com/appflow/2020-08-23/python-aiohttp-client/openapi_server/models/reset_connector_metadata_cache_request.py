# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ResetConnectorMetadataCacheRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_profile_name: str=None, connector_type: str=None, connector_entity_name: str=None, entities_path: str=None, api_version: str=None):
        """ResetConnectorMetadataCacheRequest - a model defined in OpenAPI

        :param connector_profile_name: The connector_profile_name of this ResetConnectorMetadataCacheRequest.
        :param connector_type: The connector_type of this ResetConnectorMetadataCacheRequest.
        :param connector_entity_name: The connector_entity_name of this ResetConnectorMetadataCacheRequest.
        :param entities_path: The entities_path of this ResetConnectorMetadataCacheRequest.
        :param api_version: The api_version of this ResetConnectorMetadataCacheRequest.
        """
        self.openapi_types = {
            'connector_profile_name': str,
            'connector_type': str,
            'connector_entity_name': str,
            'entities_path': str,
            'api_version': str
        }

        self.attribute_map = {
            'connector_profile_name': 'connectorProfileName',
            'connector_type': 'connectorType',
            'connector_entity_name': 'connectorEntityName',
            'entities_path': 'entitiesPath',
            'api_version': 'apiVersion'
        }

        self._connector_profile_name = connector_profile_name
        self._connector_type = connector_type
        self._connector_entity_name = connector_entity_name
        self._entities_path = entities_path
        self._api_version = api_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResetConnectorMetadataCacheRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResetConnectorMetadataCache_request of this ResetConnectorMetadataCacheRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this ResetConnectorMetadataCacheRequest.

        <p>The name of the connector profile that you want to reset cached metadata for.</p> <p>You can omit this parameter if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you must include this parameter in your request.</p>

        :return: The connector_profile_name of this ResetConnectorMetadataCacheRequest.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this ResetConnectorMetadataCacheRequest.

        <p>The name of the connector profile that you want to reset cached metadata for.</p> <p>You can omit this parameter if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you must include this parameter in your request.</p>

        :param connector_profile_name: The connector_profile_name of this ResetConnectorMetadataCacheRequest.
        :type connector_profile_name: str
        """
        if connector_profile_name is not None and len(connector_profile_name) > 256:
            raise ValueError("Invalid value for `connector_profile_name`, length must be less than or equal to `256`")
        if connector_profile_name is not None and not re.search(r'[\w\/!@#+=.-]+', connector_profile_name):
            raise ValueError("Invalid value for `connector_profile_name`, must be a follow pattern or equal to `/[\w\/!@#+=.-]+/`")

        self._connector_profile_name = connector_profile_name

    @property
    def connector_type(self):
        """Gets the connector_type of this ResetConnectorMetadataCacheRequest.

        <p>The type of connector to reset cached metadata for.</p> <p>You must include this parameter in your request if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you can omit this parameter from your request. </p>

        :return: The connector_type of this ResetConnectorMetadataCacheRequest.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ResetConnectorMetadataCacheRequest.

        <p>The type of connector to reset cached metadata for.</p> <p>You must include this parameter in your request if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you can omit this parameter from your request. </p>

        :param connector_type: The connector_type of this ResetConnectorMetadataCacheRequest.
        :type connector_type: str
        """
        allowed_values = ["Salesforce", "Singular", "Slack", "Redshift", "S3", "Marketo", "Googleanalytics", "Zendesk", "Servicenow", "Datadog", "Trendmicro", "Snowflake", "Dynatrace", "Infornexus", "Amplitude", "Veeva", "EventBridge", "LookoutMetrics", "Upsolver", "Honeycode", "CustomerProfiles", "SAPOData", "CustomConnector", "Pardot"]  # noqa: E501
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_entity_name(self):
        """Gets the connector_entity_name of this ResetConnectorMetadataCacheRequest.

        <p>Use this parameter if you want to reset cached metadata about the details for an individual entity.</p> <p>If you don't include this parameter in your request, Amazon AppFlow only resets cached metadata about entity names, not entity details.</p>

        :return: The connector_entity_name of this ResetConnectorMetadataCacheRequest.
        :rtype: str
        """
        return self._connector_entity_name

    @connector_entity_name.setter
    def connector_entity_name(self, connector_entity_name):
        """Sets the connector_entity_name of this ResetConnectorMetadataCacheRequest.

        <p>Use this parameter if you want to reset cached metadata about the details for an individual entity.</p> <p>If you don't include this parameter in your request, Amazon AppFlow only resets cached metadata about entity names, not entity details.</p>

        :param connector_entity_name: The connector_entity_name of this ResetConnectorMetadataCacheRequest.
        :type connector_entity_name: str
        """
        if connector_entity_name is not None and len(connector_entity_name) > 1024:
            raise ValueError("Invalid value for `connector_entity_name`, length must be less than or equal to `1024`")
        if connector_entity_name is not None and not re.search(r'\S+', connector_entity_name):
            raise ValueError("Invalid value for `connector_entity_name`, must be a follow pattern or equal to `/\S+/`")

        self._connector_entity_name = connector_entity_name

    @property
    def entities_path(self):
        """Gets the entities_path of this ResetConnectorMetadataCacheRequest.

        <p>Use this parameter only if you’re resetting the cached metadata about a nested entity. Only some connectors support nested entities. A nested entity is one that has another entity as a parent. To use this parameter, specify the name of the parent entity.</p> <p>To look up the parent-child relationship of entities, you can send a ListConnectorEntities request that omits the entitiesPath parameter. Amazon AppFlow will return a list of top-level entities. For each one, it indicates whether the entity has nested entities. Then, in a subsequent ListConnectorEntities request, you can specify a parent entity name for the entitiesPath parameter. Amazon AppFlow will return a list of the child entities for that parent.</p>

        :return: The entities_path of this ResetConnectorMetadataCacheRequest.
        :rtype: str
        """
        return self._entities_path

    @entities_path.setter
    def entities_path(self, entities_path):
        """Sets the entities_path of this ResetConnectorMetadataCacheRequest.

        <p>Use this parameter only if you’re resetting the cached metadata about a nested entity. Only some connectors support nested entities. A nested entity is one that has another entity as a parent. To use this parameter, specify the name of the parent entity.</p> <p>To look up the parent-child relationship of entities, you can send a ListConnectorEntities request that omits the entitiesPath parameter. Amazon AppFlow will return a list of top-level entities. For each one, it indicates whether the entity has nested entities. Then, in a subsequent ListConnectorEntities request, you can specify a parent entity name for the entitiesPath parameter. Amazon AppFlow will return a list of the child entities for that parent.</p>

        :param entities_path: The entities_path of this ResetConnectorMetadataCacheRequest.
        :type entities_path: str
        """
        if entities_path is not None and len(entities_path) > 256:
            raise ValueError("Invalid value for `entities_path`, length must be less than or equal to `256`")
        if entities_path is not None and not re.search(r'[\s\w\/!@#+=,.-]*', entities_path):
            raise ValueError("Invalid value for `entities_path`, must be a follow pattern or equal to `/[\s\w\/!@#+=,.-]*/`")

        self._entities_path = entities_path

    @property
    def api_version(self):
        """Gets the api_version of this ResetConnectorMetadataCacheRequest.

        <p>The API version that you specified in the connector profile that you’re resetting cached metadata for. You must use this parameter only if the connector supports multiple API versions or if the connector type is CustomConnector.</p> <p>To look up how many versions a connector supports, use the DescribeConnectors action. In the response, find the value that Amazon AppFlow returns for the connectorVersion parameter.</p> <p>To look up the connector type, use the DescribeConnectorProfiles action. In the response, find the value that Amazon AppFlow returns for the connectorType parameter.</p> <p>To look up the API version that you specified in a connector profile, use the DescribeConnectorProfiles action.</p>

        :return: The api_version of this ResetConnectorMetadataCacheRequest.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ResetConnectorMetadataCacheRequest.

        <p>The API version that you specified in the connector profile that you’re resetting cached metadata for. You must use this parameter only if the connector supports multiple API versions or if the connector type is CustomConnector.</p> <p>To look up how many versions a connector supports, use the DescribeConnectors action. In the response, find the value that Amazon AppFlow returns for the connectorVersion parameter.</p> <p>To look up the connector type, use the DescribeConnectorProfiles action. In the response, find the value that Amazon AppFlow returns for the connectorType parameter.</p> <p>To look up the API version that you specified in a connector profile, use the DescribeConnectorProfiles action.</p>

        :param api_version: The api_version of this ResetConnectorMetadataCacheRequest.
        :type api_version: str
        """
        if api_version is not None and len(api_version) > 256:
            raise ValueError("Invalid value for `api_version`, length must be less than or equal to `256`")
        if api_version is not None and not re.search(r'\S+', api_version):
            raise ValueError("Invalid value for `api_version`, must be a follow pattern or equal to `/\S+/`")

        self._api_version = api_version
