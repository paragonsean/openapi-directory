# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeConnectorEntityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_entity_name: str=None, connector_type: str=None, connector_profile_name: str=None, api_version: str=None):
        """DescribeConnectorEntityRequest - a model defined in OpenAPI

        :param connector_entity_name: The connector_entity_name of this DescribeConnectorEntityRequest.
        :param connector_type: The connector_type of this DescribeConnectorEntityRequest.
        :param connector_profile_name: The connector_profile_name of this DescribeConnectorEntityRequest.
        :param api_version: The api_version of this DescribeConnectorEntityRequest.
        """
        self.openapi_types = {
            'connector_entity_name': str,
            'connector_type': str,
            'connector_profile_name': str,
            'api_version': str
        }

        self.attribute_map = {
            'connector_entity_name': 'connectorEntityName',
            'connector_type': 'connectorType',
            'connector_profile_name': 'connectorProfileName',
            'api_version': 'apiVersion'
        }

        self._connector_entity_name = connector_entity_name
        self._connector_type = connector_type
        self._connector_profile_name = connector_profile_name
        self._api_version = api_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectorEntityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnectorEntity_request of this DescribeConnectorEntityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_entity_name(self):
        """Gets the connector_entity_name of this DescribeConnectorEntityRequest.

         The entity name for that connector. 

        :return: The connector_entity_name of this DescribeConnectorEntityRequest.
        :rtype: str
        """
        return self._connector_entity_name

    @connector_entity_name.setter
    def connector_entity_name(self, connector_entity_name):
        """Sets the connector_entity_name of this DescribeConnectorEntityRequest.

         The entity name for that connector. 

        :param connector_entity_name: The connector_entity_name of this DescribeConnectorEntityRequest.
        :type connector_entity_name: str
        """
        if connector_entity_name is None:
            raise ValueError("Invalid value for `connector_entity_name`, must not be `None`")
        if connector_entity_name is not None and len(connector_entity_name) > 1024:
            raise ValueError("Invalid value for `connector_entity_name`, length must be less than or equal to `1024`")
        if connector_entity_name is not None and not re.search(r'\S+', connector_entity_name):
            raise ValueError("Invalid value for `connector_entity_name`, must be a follow pattern or equal to `/\S+/`")

        self._connector_entity_name = connector_entity_name

    @property
    def connector_type(self):
        """Gets the connector_type of this DescribeConnectorEntityRequest.

         The type of connector application, such as Salesforce, Amplitude, and so on. 

        :return: The connector_type of this DescribeConnectorEntityRequest.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this DescribeConnectorEntityRequest.

         The type of connector application, such as Salesforce, Amplitude, and so on. 

        :param connector_type: The connector_type of this DescribeConnectorEntityRequest.
        :type connector_type: str
        """
        allowed_values = ["Salesforce", "Singular", "Slack", "Redshift", "S3", "Marketo", "Googleanalytics", "Zendesk", "Servicenow", "Datadog", "Trendmicro", "Snowflake", "Dynatrace", "Infornexus", "Amplitude", "Veeva", "EventBridge", "LookoutMetrics", "Upsolver", "Honeycode", "CustomerProfiles", "SAPOData", "CustomConnector", "Pardot"]  # noqa: E501
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this DescribeConnectorEntityRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 

        :return: The connector_profile_name of this DescribeConnectorEntityRequest.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this DescribeConnectorEntityRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 

        :param connector_profile_name: The connector_profile_name of this DescribeConnectorEntityRequest.
        :type connector_profile_name: str
        """
        if connector_profile_name is not None and len(connector_profile_name) > 256:
            raise ValueError("Invalid value for `connector_profile_name`, length must be less than or equal to `256`")
        if connector_profile_name is not None and not re.search(r'[\w\/!@#+=.-]+', connector_profile_name):
            raise ValueError("Invalid value for `connector_profile_name`, must be a follow pattern or equal to `/[\w\/!@#+=.-]+/`")

        self._connector_profile_name = connector_profile_name

    @property
    def api_version(self):
        """Gets the api_version of this DescribeConnectorEntityRequest.

        The version of the API that's used by the connector.

        :return: The api_version of this DescribeConnectorEntityRequest.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this DescribeConnectorEntityRequest.

        The version of the API that's used by the connector.

        :param api_version: The api_version of this DescribeConnectorEntityRequest.
        :type api_version: str
        """
        if api_version is not None and len(api_version) > 256:
            raise ValueError("Invalid value for `api_version`, length must be less than or equal to `256`")
        if api_version is not None and not re.search(r'\S+', api_version):
            raise ValueError("Invalid value for `api_version`, must be a follow pattern or equal to `/\S+/`")

        self._api_version = api_version
