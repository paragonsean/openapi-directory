# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.register_connector_request_connector_provisioning_config import RegisterConnectorRequestConnectorProvisioningConfig
import re
from openapi_server import util


class RegisterConnectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_label: str=None, description: str=None, connector_provisioning_type: str=None, connector_provisioning_config: RegisterConnectorRequestConnectorProvisioningConfig=None, client_token: str=None):
        """RegisterConnectorRequest - a model defined in OpenAPI

        :param connector_label: The connector_label of this RegisterConnectorRequest.
        :param description: The description of this RegisterConnectorRequest.
        :param connector_provisioning_type: The connector_provisioning_type of this RegisterConnectorRequest.
        :param connector_provisioning_config: The connector_provisioning_config of this RegisterConnectorRequest.
        :param client_token: The client_token of this RegisterConnectorRequest.
        """
        self.openapi_types = {
            'connector_label': str,
            'description': str,
            'connector_provisioning_type': str,
            'connector_provisioning_config': RegisterConnectorRequestConnectorProvisioningConfig,
            'client_token': str
        }

        self.attribute_map = {
            'connector_label': 'connectorLabel',
            'description': 'description',
            'connector_provisioning_type': 'connectorProvisioningType',
            'connector_provisioning_config': 'connectorProvisioningConfig',
            'client_token': 'clientToken'
        }

        self._connector_label = connector_label
        self._description = description
        self._connector_provisioning_type = connector_provisioning_type
        self._connector_provisioning_config = connector_provisioning_config
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterConnectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterConnector_request of this RegisterConnectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_label(self):
        """Gets the connector_label of this RegisterConnectorRequest.

         The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.

        :return: The connector_label of this RegisterConnectorRequest.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this RegisterConnectorRequest.

         The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.

        :param connector_label: The connector_label of this RegisterConnectorRequest.
        :type connector_label: str
        """
        if connector_label is not None and len(connector_label) > 256:
            raise ValueError("Invalid value for `connector_label`, length must be less than or equal to `256`")
        if connector_label is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', connector_label):
            raise ValueError("Invalid value for `connector_label`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._connector_label = connector_label

    @property
    def description(self):
        """Gets the description of this RegisterConnectorRequest.

        A description about the connector that's being registered.

        :return: The description of this RegisterConnectorRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegisterConnectorRequest.

        A description about the connector that's being registered.

        :param description: The description of this RegisterConnectorRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and not re.search(r'[\s\w\/!@#+=.-]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\s\w\/!@#+=.-]*/`")

        self._description = description

    @property
    def connector_provisioning_type(self):
        """Gets the connector_provisioning_type of this RegisterConnectorRequest.

        The type of provisioning that the connector supports, such as Lambda.

        :return: The connector_provisioning_type of this RegisterConnectorRequest.
        :rtype: str
        """
        return self._connector_provisioning_type

    @connector_provisioning_type.setter
    def connector_provisioning_type(self, connector_provisioning_type):
        """Sets the connector_provisioning_type of this RegisterConnectorRequest.

        The type of provisioning that the connector supports, such as Lambda.

        :param connector_provisioning_type: The connector_provisioning_type of this RegisterConnectorRequest.
        :type connector_provisioning_type: str
        """
        allowed_values = ["LAMBDA"]  # noqa: E501
        if connector_provisioning_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_provisioning_type` ({0}), must be one of {1}"
                .format(connector_provisioning_type, allowed_values)
            )

        self._connector_provisioning_type = connector_provisioning_type

    @property
    def connector_provisioning_config(self):
        """Gets the connector_provisioning_config of this RegisterConnectorRequest.


        :return: The connector_provisioning_config of this RegisterConnectorRequest.
        :rtype: RegisterConnectorRequestConnectorProvisioningConfig
        """
        return self._connector_provisioning_config

    @connector_provisioning_config.setter
    def connector_provisioning_config(self, connector_provisioning_config):
        """Sets the connector_provisioning_config of this RegisterConnectorRequest.


        :param connector_provisioning_config: The connector_provisioning_config of this RegisterConnectorRequest.
        :type connector_provisioning_config: RegisterConnectorRequestConnectorProvisioningConfig
        """

        self._connector_provisioning_config = connector_provisioning_config

    @property
    def client_token(self):
        """Gets the client_token of this RegisterConnectorRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>RegisterConnector</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>RegisterConnector</code>. The token is active for 8 hours.</p>

        :return: The client_token of this RegisterConnectorRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this RegisterConnectorRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>RegisterConnector</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>RegisterConnector</code>. The token is active for 8 hours.</p>

        :param client_token: The client_token of this RegisterConnectorRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 256:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `256`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[ -~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[ -~]+/`")

        self._client_token = client_token
