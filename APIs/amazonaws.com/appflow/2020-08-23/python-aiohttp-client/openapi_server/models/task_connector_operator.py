# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amplitude_connector_operator import AmplitudeConnectorOperator
from openapi_server.models.datadog_connector_operator import DatadogConnectorOperator
from openapi_server.models.dynatrace_connector_operator import DynatraceConnectorOperator
from openapi_server.models.google_analytics_connector_operator import GoogleAnalyticsConnectorOperator
from openapi_server.models.infor_nexus_connector_operator import InforNexusConnectorOperator
from openapi_server.models.marketo_connector_operator import MarketoConnectorOperator
from openapi_server.models.operator import Operator
from openapi_server.models.pardot_connector_operator import PardotConnectorOperator
from openapi_server.models.s3_connector_operator import S3ConnectorOperator
from openapi_server.models.sapo_data_connector_operator import SAPODataConnectorOperator
from openapi_server.models.salesforce_connector_operator import SalesforceConnectorOperator
from openapi_server.models.service_now_connector_operator import ServiceNowConnectorOperator
from openapi_server.models.singular_connector_operator import SingularConnectorOperator
from openapi_server.models.slack_connector_operator import SlackConnectorOperator
from openapi_server.models.trendmicro_connector_operator import TrendmicroConnectorOperator
from openapi_server.models.veeva_connector_operator import VeevaConnectorOperator
from openapi_server.models.zendesk_connector_operator import ZendeskConnectorOperator
from openapi_server import util


class TaskConnectorOperator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amplitude: AmplitudeConnectorOperator=None, datadog: DatadogConnectorOperator=None, dynatrace: DynatraceConnectorOperator=None, google_analytics: GoogleAnalyticsConnectorOperator=None, infor_nexus: InforNexusConnectorOperator=None, marketo: MarketoConnectorOperator=None, s3: S3ConnectorOperator=None, salesforce: SalesforceConnectorOperator=None, service_now: ServiceNowConnectorOperator=None, singular: SingularConnectorOperator=None, slack: SlackConnectorOperator=None, trendmicro: TrendmicroConnectorOperator=None, veeva: VeevaConnectorOperator=None, zendesk: ZendeskConnectorOperator=None, sapo_data: SAPODataConnectorOperator=None, custom_connector: Operator=None, pardot: PardotConnectorOperator=None):
        """TaskConnectorOperator - a model defined in OpenAPI

        :param amplitude: The amplitude of this TaskConnectorOperator.
        :param datadog: The datadog of this TaskConnectorOperator.
        :param dynatrace: The dynatrace of this TaskConnectorOperator.
        :param google_analytics: The google_analytics of this TaskConnectorOperator.
        :param infor_nexus: The infor_nexus of this TaskConnectorOperator.
        :param marketo: The marketo of this TaskConnectorOperator.
        :param s3: The s3 of this TaskConnectorOperator.
        :param salesforce: The salesforce of this TaskConnectorOperator.
        :param service_now: The service_now of this TaskConnectorOperator.
        :param singular: The singular of this TaskConnectorOperator.
        :param slack: The slack of this TaskConnectorOperator.
        :param trendmicro: The trendmicro of this TaskConnectorOperator.
        :param veeva: The veeva of this TaskConnectorOperator.
        :param zendesk: The zendesk of this TaskConnectorOperator.
        :param sapo_data: The sapo_data of this TaskConnectorOperator.
        :param custom_connector: The custom_connector of this TaskConnectorOperator.
        :param pardot: The pardot of this TaskConnectorOperator.
        """
        self.openapi_types = {
            'amplitude': AmplitudeConnectorOperator,
            'datadog': DatadogConnectorOperator,
            'dynatrace': DynatraceConnectorOperator,
            'google_analytics': GoogleAnalyticsConnectorOperator,
            'infor_nexus': InforNexusConnectorOperator,
            'marketo': MarketoConnectorOperator,
            's3': S3ConnectorOperator,
            'salesforce': SalesforceConnectorOperator,
            'service_now': ServiceNowConnectorOperator,
            'singular': SingularConnectorOperator,
            'slack': SlackConnectorOperator,
            'trendmicro': TrendmicroConnectorOperator,
            'veeva': VeevaConnectorOperator,
            'zendesk': ZendeskConnectorOperator,
            'sapo_data': SAPODataConnectorOperator,
            'custom_connector': Operator,
            'pardot': PardotConnectorOperator
        }

        self.attribute_map = {
            'amplitude': 'Amplitude',
            'datadog': 'Datadog',
            'dynatrace': 'Dynatrace',
            'google_analytics': 'GoogleAnalytics',
            'infor_nexus': 'InforNexus',
            'marketo': 'Marketo',
            's3': 'S3',
            'salesforce': 'Salesforce',
            'service_now': 'ServiceNow',
            'singular': 'Singular',
            'slack': 'Slack',
            'trendmicro': 'Trendmicro',
            'veeva': 'Veeva',
            'zendesk': 'Zendesk',
            'sapo_data': 'SAPOData',
            'custom_connector': 'CustomConnector',
            'pardot': 'Pardot'
        }

        self._amplitude = amplitude
        self._datadog = datadog
        self._dynatrace = dynatrace
        self._google_analytics = google_analytics
        self._infor_nexus = infor_nexus
        self._marketo = marketo
        self._s3 = s3
        self._salesforce = salesforce
        self._service_now = service_now
        self._singular = singular
        self._slack = slack
        self._trendmicro = trendmicro
        self._veeva = veeva
        self._zendesk = zendesk
        self._sapo_data = sapo_data
        self._custom_connector = custom_connector
        self._pardot = pardot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskConnectorOperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task_connectorOperator of this TaskConnectorOperator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amplitude(self):
        """Gets the amplitude of this TaskConnectorOperator.


        :return: The amplitude of this TaskConnectorOperator.
        :rtype: AmplitudeConnectorOperator
        """
        return self._amplitude

    @amplitude.setter
    def amplitude(self, amplitude):
        """Sets the amplitude of this TaskConnectorOperator.


        :param amplitude: The amplitude of this TaskConnectorOperator.
        :type amplitude: AmplitudeConnectorOperator
        """

        self._amplitude = amplitude

    @property
    def datadog(self):
        """Gets the datadog of this TaskConnectorOperator.


        :return: The datadog of this TaskConnectorOperator.
        :rtype: DatadogConnectorOperator
        """
        return self._datadog

    @datadog.setter
    def datadog(self, datadog):
        """Sets the datadog of this TaskConnectorOperator.


        :param datadog: The datadog of this TaskConnectorOperator.
        :type datadog: DatadogConnectorOperator
        """

        self._datadog = datadog

    @property
    def dynatrace(self):
        """Gets the dynatrace of this TaskConnectorOperator.


        :return: The dynatrace of this TaskConnectorOperator.
        :rtype: DynatraceConnectorOperator
        """
        return self._dynatrace

    @dynatrace.setter
    def dynatrace(self, dynatrace):
        """Sets the dynatrace of this TaskConnectorOperator.


        :param dynatrace: The dynatrace of this TaskConnectorOperator.
        :type dynatrace: DynatraceConnectorOperator
        """

        self._dynatrace = dynatrace

    @property
    def google_analytics(self):
        """Gets the google_analytics of this TaskConnectorOperator.


        :return: The google_analytics of this TaskConnectorOperator.
        :rtype: GoogleAnalyticsConnectorOperator
        """
        return self._google_analytics

    @google_analytics.setter
    def google_analytics(self, google_analytics):
        """Sets the google_analytics of this TaskConnectorOperator.


        :param google_analytics: The google_analytics of this TaskConnectorOperator.
        :type google_analytics: GoogleAnalyticsConnectorOperator
        """

        self._google_analytics = google_analytics

    @property
    def infor_nexus(self):
        """Gets the infor_nexus of this TaskConnectorOperator.


        :return: The infor_nexus of this TaskConnectorOperator.
        :rtype: InforNexusConnectorOperator
        """
        return self._infor_nexus

    @infor_nexus.setter
    def infor_nexus(self, infor_nexus):
        """Sets the infor_nexus of this TaskConnectorOperator.


        :param infor_nexus: The infor_nexus of this TaskConnectorOperator.
        :type infor_nexus: InforNexusConnectorOperator
        """

        self._infor_nexus = infor_nexus

    @property
    def marketo(self):
        """Gets the marketo of this TaskConnectorOperator.


        :return: The marketo of this TaskConnectorOperator.
        :rtype: MarketoConnectorOperator
        """
        return self._marketo

    @marketo.setter
    def marketo(self, marketo):
        """Sets the marketo of this TaskConnectorOperator.


        :param marketo: The marketo of this TaskConnectorOperator.
        :type marketo: MarketoConnectorOperator
        """

        self._marketo = marketo

    @property
    def s3(self):
        """Gets the s3 of this TaskConnectorOperator.


        :return: The s3 of this TaskConnectorOperator.
        :rtype: S3ConnectorOperator
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this TaskConnectorOperator.


        :param s3: The s3 of this TaskConnectorOperator.
        :type s3: S3ConnectorOperator
        """

        self._s3 = s3

    @property
    def salesforce(self):
        """Gets the salesforce of this TaskConnectorOperator.


        :return: The salesforce of this TaskConnectorOperator.
        :rtype: SalesforceConnectorOperator
        """
        return self._salesforce

    @salesforce.setter
    def salesforce(self, salesforce):
        """Sets the salesforce of this TaskConnectorOperator.


        :param salesforce: The salesforce of this TaskConnectorOperator.
        :type salesforce: SalesforceConnectorOperator
        """

        self._salesforce = salesforce

    @property
    def service_now(self):
        """Gets the service_now of this TaskConnectorOperator.


        :return: The service_now of this TaskConnectorOperator.
        :rtype: ServiceNowConnectorOperator
        """
        return self._service_now

    @service_now.setter
    def service_now(self, service_now):
        """Sets the service_now of this TaskConnectorOperator.


        :param service_now: The service_now of this TaskConnectorOperator.
        :type service_now: ServiceNowConnectorOperator
        """

        self._service_now = service_now

    @property
    def singular(self):
        """Gets the singular of this TaskConnectorOperator.


        :return: The singular of this TaskConnectorOperator.
        :rtype: SingularConnectorOperator
        """
        return self._singular

    @singular.setter
    def singular(self, singular):
        """Sets the singular of this TaskConnectorOperator.


        :param singular: The singular of this TaskConnectorOperator.
        :type singular: SingularConnectorOperator
        """

        self._singular = singular

    @property
    def slack(self):
        """Gets the slack of this TaskConnectorOperator.


        :return: The slack of this TaskConnectorOperator.
        :rtype: SlackConnectorOperator
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this TaskConnectorOperator.


        :param slack: The slack of this TaskConnectorOperator.
        :type slack: SlackConnectorOperator
        """

        self._slack = slack

    @property
    def trendmicro(self):
        """Gets the trendmicro of this TaskConnectorOperator.


        :return: The trendmicro of this TaskConnectorOperator.
        :rtype: TrendmicroConnectorOperator
        """
        return self._trendmicro

    @trendmicro.setter
    def trendmicro(self, trendmicro):
        """Sets the trendmicro of this TaskConnectorOperator.


        :param trendmicro: The trendmicro of this TaskConnectorOperator.
        :type trendmicro: TrendmicroConnectorOperator
        """

        self._trendmicro = trendmicro

    @property
    def veeva(self):
        """Gets the veeva of this TaskConnectorOperator.


        :return: The veeva of this TaskConnectorOperator.
        :rtype: VeevaConnectorOperator
        """
        return self._veeva

    @veeva.setter
    def veeva(self, veeva):
        """Sets the veeva of this TaskConnectorOperator.


        :param veeva: The veeva of this TaskConnectorOperator.
        :type veeva: VeevaConnectorOperator
        """

        self._veeva = veeva

    @property
    def zendesk(self):
        """Gets the zendesk of this TaskConnectorOperator.


        :return: The zendesk of this TaskConnectorOperator.
        :rtype: ZendeskConnectorOperator
        """
        return self._zendesk

    @zendesk.setter
    def zendesk(self, zendesk):
        """Sets the zendesk of this TaskConnectorOperator.


        :param zendesk: The zendesk of this TaskConnectorOperator.
        :type zendesk: ZendeskConnectorOperator
        """

        self._zendesk = zendesk

    @property
    def sapo_data(self):
        """Gets the sapo_data of this TaskConnectorOperator.


        :return: The sapo_data of this TaskConnectorOperator.
        :rtype: SAPODataConnectorOperator
        """
        return self._sapo_data

    @sapo_data.setter
    def sapo_data(self, sapo_data):
        """Sets the sapo_data of this TaskConnectorOperator.


        :param sapo_data: The sapo_data of this TaskConnectorOperator.
        :type sapo_data: SAPODataConnectorOperator
        """

        self._sapo_data = sapo_data

    @property
    def custom_connector(self):
        """Gets the custom_connector of this TaskConnectorOperator.


        :return: The custom_connector of this TaskConnectorOperator.
        :rtype: Operator
        """
        return self._custom_connector

    @custom_connector.setter
    def custom_connector(self, custom_connector):
        """Sets the custom_connector of this TaskConnectorOperator.


        :param custom_connector: The custom_connector of this TaskConnectorOperator.
        :type custom_connector: Operator
        """

        self._custom_connector = custom_connector

    @property
    def pardot(self):
        """Gets the pardot of this TaskConnectorOperator.


        :return: The pardot of this TaskConnectorOperator.
        :rtype: PardotConnectorOperator
        """
        return self._pardot

    @pardot.setter
    def pardot(self, pardot):
        """Sets the pardot of this TaskConnectorOperator.


        :param pardot: The pardot of this TaskConnectorOperator.
        :type pardot: PardotConnectorOperator
        """

        self._pardot = pardot
