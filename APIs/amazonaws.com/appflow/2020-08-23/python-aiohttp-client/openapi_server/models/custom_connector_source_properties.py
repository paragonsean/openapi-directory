# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_connector_source_properties_data_transfer_api import CustomConnectorSourcePropertiesDataTransferApi
from openapi_server import util


class CustomConnectorSourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_name: str=None, custom_properties: Dict=None, data_transfer_api: CustomConnectorSourcePropertiesDataTransferApi=None):
        """CustomConnectorSourceProperties - a model defined in OpenAPI

        :param entity_name: The entity_name of this CustomConnectorSourceProperties.
        :param custom_properties: The custom_properties of this CustomConnectorSourceProperties.
        :param data_transfer_api: The data_transfer_api of this CustomConnectorSourceProperties.
        """
        self.openapi_types = {
            'entity_name': str,
            'custom_properties': Dict,
            'data_transfer_api': CustomConnectorSourcePropertiesDataTransferApi
        }

        self.attribute_map = {
            'entity_name': 'entityName',
            'custom_properties': 'customProperties',
            'data_transfer_api': 'dataTransferApi'
        }

        self._entity_name = entity_name
        self._custom_properties = custom_properties
        self._data_transfer_api = data_transfer_api

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomConnectorSourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomConnectorSourceProperties of this CustomConnectorSourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_name(self):
        """Gets the entity_name of this CustomConnectorSourceProperties.


        :return: The entity_name of this CustomConnectorSourceProperties.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this CustomConnectorSourceProperties.


        :param entity_name: The entity_name of this CustomConnectorSourceProperties.
        :type entity_name: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")

        self._entity_name = entity_name

    @property
    def custom_properties(self):
        """Gets the custom_properties of this CustomConnectorSourceProperties.


        :return: The custom_properties of this CustomConnectorSourceProperties.
        :rtype: Dict
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this CustomConnectorSourceProperties.


        :param custom_properties: The custom_properties of this CustomConnectorSourceProperties.
        :type custom_properties: Dict
        """

        self._custom_properties = custom_properties

    @property
    def data_transfer_api(self):
        """Gets the data_transfer_api of this CustomConnectorSourceProperties.


        :return: The data_transfer_api of this CustomConnectorSourceProperties.
        :rtype: CustomConnectorSourcePropertiesDataTransferApi
        """
        return self._data_transfer_api

    @data_transfer_api.setter
    def data_transfer_api(self, data_transfer_api):
        """Sets the data_transfer_api of this CustomConnectorSourceProperties.


        :param data_transfer_api: The data_transfer_api of this CustomConnectorSourceProperties.
        :type data_transfer_api: CustomConnectorSourcePropertiesDataTransferApi
        """

        self._data_transfer_api = data_transfer_api
