# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListConnectorEntitiesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_entity_map: Dict=None, next_token: str=None):
        """ListConnectorEntitiesResponse - a model defined in OpenAPI

        :param connector_entity_map: The connector_entity_map of this ListConnectorEntitiesResponse.
        :param next_token: The next_token of this ListConnectorEntitiesResponse.
        """
        self.openapi_types = {
            'connector_entity_map': Dict,
            'next_token': str
        }

        self.attribute_map = {
            'connector_entity_map': 'connectorEntityMap',
            'next_token': 'nextToken'
        }

        self._connector_entity_map = connector_entity_map
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListConnectorEntitiesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListConnectorEntitiesResponse of this ListConnectorEntitiesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_entity_map(self):
        """Gets the connector_entity_map of this ListConnectorEntitiesResponse.


        :return: The connector_entity_map of this ListConnectorEntitiesResponse.
        :rtype: Dict
        """
        return self._connector_entity_map

    @connector_entity_map.setter
    def connector_entity_map(self, connector_entity_map):
        """Sets the connector_entity_map of this ListConnectorEntitiesResponse.


        :param connector_entity_map: The connector_entity_map of this ListConnectorEntitiesResponse.
        :type connector_entity_map: Dict
        """
        if connector_entity_map is None:
            raise ValueError("Invalid value for `connector_entity_map`, must not be `None`")

        self._connector_entity_map = connector_entity_map

    @property
    def next_token(self):
        """Gets the next_token of this ListConnectorEntitiesResponse.


        :return: The next_token of this ListConnectorEntitiesResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListConnectorEntitiesResponse.


        :param next_token: The next_token of this ListConnectorEntitiesResponse.
        :type next_token: str
        """

        self._next_token = next_token
