# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedshiftConnectorProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_url: str=None, bucket_name: str=None, bucket_prefix: str=None, role_arn: str=None, data_api_role_arn: str=None, is_redshift_serverless: bool=None, cluster_identifier: str=None, workgroup_name: str=None, database_name: str=None):
        """RedshiftConnectorProfileProperties - a model defined in OpenAPI

        :param database_url: The database_url of this RedshiftConnectorProfileProperties.
        :param bucket_name: The bucket_name of this RedshiftConnectorProfileProperties.
        :param bucket_prefix: The bucket_prefix of this RedshiftConnectorProfileProperties.
        :param role_arn: The role_arn of this RedshiftConnectorProfileProperties.
        :param data_api_role_arn: The data_api_role_arn of this RedshiftConnectorProfileProperties.
        :param is_redshift_serverless: The is_redshift_serverless of this RedshiftConnectorProfileProperties.
        :param cluster_identifier: The cluster_identifier of this RedshiftConnectorProfileProperties.
        :param workgroup_name: The workgroup_name of this RedshiftConnectorProfileProperties.
        :param database_name: The database_name of this RedshiftConnectorProfileProperties.
        """
        self.openapi_types = {
            'database_url': str,
            'bucket_name': str,
            'bucket_prefix': str,
            'role_arn': str,
            'data_api_role_arn': str,
            'is_redshift_serverless': bool,
            'cluster_identifier': str,
            'workgroup_name': str,
            'database_name': str
        }

        self.attribute_map = {
            'database_url': 'databaseUrl',
            'bucket_name': 'bucketName',
            'bucket_prefix': 'bucketPrefix',
            'role_arn': 'roleArn',
            'data_api_role_arn': 'dataApiRoleArn',
            'is_redshift_serverless': 'isRedshiftServerless',
            'cluster_identifier': 'clusterIdentifier',
            'workgroup_name': 'workgroupName',
            'database_name': 'databaseName'
        }

        self._database_url = database_url
        self._bucket_name = bucket_name
        self._bucket_prefix = bucket_prefix
        self._role_arn = role_arn
        self._data_api_role_arn = data_api_role_arn
        self._is_redshift_serverless = is_redshift_serverless
        self._cluster_identifier = cluster_identifier
        self._workgroup_name = workgroup_name
        self._database_name = database_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftConnectorProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftConnectorProfileProperties of this RedshiftConnectorProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_url(self):
        """Gets the database_url of this RedshiftConnectorProfileProperties.


        :return: The database_url of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._database_url

    @database_url.setter
    def database_url(self, database_url):
        """Sets the database_url of this RedshiftConnectorProfileProperties.


        :param database_url: The database_url of this RedshiftConnectorProfileProperties.
        :type database_url: str
        """

        self._database_url = database_url

    @property
    def bucket_name(self):
        """Gets the bucket_name of this RedshiftConnectorProfileProperties.


        :return: The bucket_name of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this RedshiftConnectorProfileProperties.


        :param bucket_name: The bucket_name of this RedshiftConnectorProfileProperties.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def bucket_prefix(self):
        """Gets the bucket_prefix of this RedshiftConnectorProfileProperties.


        :return: The bucket_prefix of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._bucket_prefix

    @bucket_prefix.setter
    def bucket_prefix(self, bucket_prefix):
        """Sets the bucket_prefix of this RedshiftConnectorProfileProperties.


        :param bucket_prefix: The bucket_prefix of this RedshiftConnectorProfileProperties.
        :type bucket_prefix: str
        """

        self._bucket_prefix = bucket_prefix

    @property
    def role_arn(self):
        """Gets the role_arn of this RedshiftConnectorProfileProperties.


        :return: The role_arn of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this RedshiftConnectorProfileProperties.


        :param role_arn: The role_arn of this RedshiftConnectorProfileProperties.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def data_api_role_arn(self):
        """Gets the data_api_role_arn of this RedshiftConnectorProfileProperties.


        :return: The data_api_role_arn of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._data_api_role_arn

    @data_api_role_arn.setter
    def data_api_role_arn(self, data_api_role_arn):
        """Sets the data_api_role_arn of this RedshiftConnectorProfileProperties.


        :param data_api_role_arn: The data_api_role_arn of this RedshiftConnectorProfileProperties.
        :type data_api_role_arn: str
        """

        self._data_api_role_arn = data_api_role_arn

    @property
    def is_redshift_serverless(self):
        """Gets the is_redshift_serverless of this RedshiftConnectorProfileProperties.


        :return: The is_redshift_serverless of this RedshiftConnectorProfileProperties.
        :rtype: bool
        """
        return self._is_redshift_serverless

    @is_redshift_serverless.setter
    def is_redshift_serverless(self, is_redshift_serverless):
        """Sets the is_redshift_serverless of this RedshiftConnectorProfileProperties.


        :param is_redshift_serverless: The is_redshift_serverless of this RedshiftConnectorProfileProperties.
        :type is_redshift_serverless: bool
        """

        self._is_redshift_serverless = is_redshift_serverless

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this RedshiftConnectorProfileProperties.


        :return: The cluster_identifier of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this RedshiftConnectorProfileProperties.


        :param cluster_identifier: The cluster_identifier of this RedshiftConnectorProfileProperties.
        :type cluster_identifier: str
        """

        self._cluster_identifier = cluster_identifier

    @property
    def workgroup_name(self):
        """Gets the workgroup_name of this RedshiftConnectorProfileProperties.


        :return: The workgroup_name of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._workgroup_name

    @workgroup_name.setter
    def workgroup_name(self, workgroup_name):
        """Sets the workgroup_name of this RedshiftConnectorProfileProperties.


        :param workgroup_name: The workgroup_name of this RedshiftConnectorProfileProperties.
        :type workgroup_name: str
        """

        self._workgroup_name = workgroup_name

    @property
    def database_name(self):
        """Gets the database_name of this RedshiftConnectorProfileProperties.


        :return: The database_name of this RedshiftConnectorProfileProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this RedshiftConnectorProfileProperties.


        :param database_name: The database_name of this RedshiftConnectorProfileProperties.
        :type database_name: str
        """

        self._database_name = database_name
