# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_config import AggregationConfig
from openapi_server.models.file_type import FileType
from openapi_server.models.prefix_config import PrefixConfig
from openapi_server import util


class UpsolverS3OutputFormatConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_type: FileType=None, prefix_config: PrefixConfig=None, aggregation_config: AggregationConfig=None):
        """UpsolverS3OutputFormatConfig - a model defined in OpenAPI

        :param file_type: The file_type of this UpsolverS3OutputFormatConfig.
        :param prefix_config: The prefix_config of this UpsolverS3OutputFormatConfig.
        :param aggregation_config: The aggregation_config of this UpsolverS3OutputFormatConfig.
        """
        self.openapi_types = {
            'file_type': FileType,
            'prefix_config': PrefixConfig,
            'aggregation_config': AggregationConfig
        }

        self.attribute_map = {
            'file_type': 'fileType',
            'prefix_config': 'prefixConfig',
            'aggregation_config': 'aggregationConfig'
        }

        self._file_type = file_type
        self._prefix_config = prefix_config
        self._aggregation_config = aggregation_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsolverS3OutputFormatConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsolverS3OutputFormatConfig of this UpsolverS3OutputFormatConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_type(self):
        """Gets the file_type of this UpsolverS3OutputFormatConfig.


        :return: The file_type of this UpsolverS3OutputFormatConfig.
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this UpsolverS3OutputFormatConfig.


        :param file_type: The file_type of this UpsolverS3OutputFormatConfig.
        :type file_type: FileType
        """

        self._file_type = file_type

    @property
    def prefix_config(self):
        """Gets the prefix_config of this UpsolverS3OutputFormatConfig.


        :return: The prefix_config of this UpsolverS3OutputFormatConfig.
        :rtype: PrefixConfig
        """
        return self._prefix_config

    @prefix_config.setter
    def prefix_config(self, prefix_config):
        """Sets the prefix_config of this UpsolverS3OutputFormatConfig.


        :param prefix_config: The prefix_config of this UpsolverS3OutputFormatConfig.
        :type prefix_config: PrefixConfig
        """
        if prefix_config is None:
            raise ValueError("Invalid value for `prefix_config`, must not be `None`")

        self._prefix_config = prefix_config

    @property
    def aggregation_config(self):
        """Gets the aggregation_config of this UpsolverS3OutputFormatConfig.


        :return: The aggregation_config of this UpsolverS3OutputFormatConfig.
        :rtype: AggregationConfig
        """
        return self._aggregation_config

    @aggregation_config.setter
    def aggregation_config(self, aggregation_config):
        """Sets the aggregation_config of this UpsolverS3OutputFormatConfig.


        :param aggregation_config: The aggregation_config of this UpsolverS3OutputFormatConfig.
        :type aggregation_config: AggregationConfig
        """

        self._aggregation_config = aggregation_config
