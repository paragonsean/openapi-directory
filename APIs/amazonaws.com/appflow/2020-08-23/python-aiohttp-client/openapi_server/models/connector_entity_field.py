# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_entity_field_destination_properties import ConnectorEntityFieldDestinationProperties
from openapi_server.models.connector_entity_field_source_properties import ConnectorEntityFieldSourceProperties
from openapi_server.models.connector_entity_field_supported_field_type_details import ConnectorEntityFieldSupportedFieldTypeDetails
from openapi_server import util


class ConnectorEntityField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, parent_identifier: str=None, label: str=None, is_primary_key: bool=None, default_value: str=None, is_deprecated: bool=None, supported_field_type_details: ConnectorEntityFieldSupportedFieldTypeDetails=None, description: str=None, source_properties: ConnectorEntityFieldSourceProperties=None, destination_properties: ConnectorEntityFieldDestinationProperties=None, custom_properties: Dict=None):
        """ConnectorEntityField - a model defined in OpenAPI

        :param identifier: The identifier of this ConnectorEntityField.
        :param parent_identifier: The parent_identifier of this ConnectorEntityField.
        :param label: The label of this ConnectorEntityField.
        :param is_primary_key: The is_primary_key of this ConnectorEntityField.
        :param default_value: The default_value of this ConnectorEntityField.
        :param is_deprecated: The is_deprecated of this ConnectorEntityField.
        :param supported_field_type_details: The supported_field_type_details of this ConnectorEntityField.
        :param description: The description of this ConnectorEntityField.
        :param source_properties: The source_properties of this ConnectorEntityField.
        :param destination_properties: The destination_properties of this ConnectorEntityField.
        :param custom_properties: The custom_properties of this ConnectorEntityField.
        """
        self.openapi_types = {
            'identifier': str,
            'parent_identifier': str,
            'label': str,
            'is_primary_key': bool,
            'default_value': str,
            'is_deprecated': bool,
            'supported_field_type_details': ConnectorEntityFieldSupportedFieldTypeDetails,
            'description': str,
            'source_properties': ConnectorEntityFieldSourceProperties,
            'destination_properties': ConnectorEntityFieldDestinationProperties,
            'custom_properties': Dict
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'parent_identifier': 'parentIdentifier',
            'label': 'label',
            'is_primary_key': 'isPrimaryKey',
            'default_value': 'defaultValue',
            'is_deprecated': 'isDeprecated',
            'supported_field_type_details': 'supportedFieldTypeDetails',
            'description': 'description',
            'source_properties': 'sourceProperties',
            'destination_properties': 'destinationProperties',
            'custom_properties': 'customProperties'
        }

        self._identifier = identifier
        self._parent_identifier = parent_identifier
        self._label = label
        self._is_primary_key = is_primary_key
        self._default_value = default_value
        self._is_deprecated = is_deprecated
        self._supported_field_type_details = supported_field_type_details
        self._description = description
        self._source_properties = source_properties
        self._destination_properties = destination_properties
        self._custom_properties = custom_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorEntityField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorEntityField of this ConnectorEntityField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this ConnectorEntityField.


        :return: The identifier of this ConnectorEntityField.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ConnectorEntityField.


        :param identifier: The identifier of this ConnectorEntityField.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def parent_identifier(self):
        """Gets the parent_identifier of this ConnectorEntityField.


        :return: The parent_identifier of this ConnectorEntityField.
        :rtype: str
        """
        return self._parent_identifier

    @parent_identifier.setter
    def parent_identifier(self, parent_identifier):
        """Sets the parent_identifier of this ConnectorEntityField.


        :param parent_identifier: The parent_identifier of this ConnectorEntityField.
        :type parent_identifier: str
        """

        self._parent_identifier = parent_identifier

    @property
    def label(self):
        """Gets the label of this ConnectorEntityField.


        :return: The label of this ConnectorEntityField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ConnectorEntityField.


        :param label: The label of this ConnectorEntityField.
        :type label: str
        """

        self._label = label

    @property
    def is_primary_key(self):
        """Gets the is_primary_key of this ConnectorEntityField.


        :return: The is_primary_key of this ConnectorEntityField.
        :rtype: bool
        """
        return self._is_primary_key

    @is_primary_key.setter
    def is_primary_key(self, is_primary_key):
        """Sets the is_primary_key of this ConnectorEntityField.


        :param is_primary_key: The is_primary_key of this ConnectorEntityField.
        :type is_primary_key: bool
        """

        self._is_primary_key = is_primary_key

    @property
    def default_value(self):
        """Gets the default_value of this ConnectorEntityField.


        :return: The default_value of this ConnectorEntityField.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ConnectorEntityField.


        :param default_value: The default_value of this ConnectorEntityField.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this ConnectorEntityField.


        :return: The is_deprecated of this ConnectorEntityField.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this ConnectorEntityField.


        :param is_deprecated: The is_deprecated of this ConnectorEntityField.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def supported_field_type_details(self):
        """Gets the supported_field_type_details of this ConnectorEntityField.


        :return: The supported_field_type_details of this ConnectorEntityField.
        :rtype: ConnectorEntityFieldSupportedFieldTypeDetails
        """
        return self._supported_field_type_details

    @supported_field_type_details.setter
    def supported_field_type_details(self, supported_field_type_details):
        """Sets the supported_field_type_details of this ConnectorEntityField.


        :param supported_field_type_details: The supported_field_type_details of this ConnectorEntityField.
        :type supported_field_type_details: ConnectorEntityFieldSupportedFieldTypeDetails
        """

        self._supported_field_type_details = supported_field_type_details

    @property
    def description(self):
        """Gets the description of this ConnectorEntityField.


        :return: The description of this ConnectorEntityField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectorEntityField.


        :param description: The description of this ConnectorEntityField.
        :type description: str
        """

        self._description = description

    @property
    def source_properties(self):
        """Gets the source_properties of this ConnectorEntityField.


        :return: The source_properties of this ConnectorEntityField.
        :rtype: ConnectorEntityFieldSourceProperties
        """
        return self._source_properties

    @source_properties.setter
    def source_properties(self, source_properties):
        """Sets the source_properties of this ConnectorEntityField.


        :param source_properties: The source_properties of this ConnectorEntityField.
        :type source_properties: ConnectorEntityFieldSourceProperties
        """

        self._source_properties = source_properties

    @property
    def destination_properties(self):
        """Gets the destination_properties of this ConnectorEntityField.


        :return: The destination_properties of this ConnectorEntityField.
        :rtype: ConnectorEntityFieldDestinationProperties
        """
        return self._destination_properties

    @destination_properties.setter
    def destination_properties(self, destination_properties):
        """Sets the destination_properties of this ConnectorEntityField.


        :param destination_properties: The destination_properties of this ConnectorEntityField.
        :type destination_properties: ConnectorEntityFieldDestinationProperties
        """

        self._destination_properties = destination_properties

    @property
    def custom_properties(self):
        """Gets the custom_properties of this ConnectorEntityField.


        :return: The custom_properties of this ConnectorEntityField.
        :rtype: Dict
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this ConnectorEntityField.


        :param custom_properties: The custom_properties of this ConnectorEntityField.
        :type custom_properties: Dict
        """

        self._custom_properties = custom_properties
