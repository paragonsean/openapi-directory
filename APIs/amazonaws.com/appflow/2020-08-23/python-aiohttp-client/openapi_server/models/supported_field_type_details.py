# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.supported_field_type_details_v1 import SupportedFieldTypeDetailsV1
from openapi_server import util


class SupportedFieldTypeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, v1: SupportedFieldTypeDetailsV1=None):
        """SupportedFieldTypeDetails - a model defined in OpenAPI

        :param v1: The v1 of this SupportedFieldTypeDetails.
        """
        self.openapi_types = {
            'v1': SupportedFieldTypeDetailsV1
        }

        self.attribute_map = {
            'v1': 'v1'
        }

        self._v1 = v1

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportedFieldTypeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportedFieldTypeDetails of this SupportedFieldTypeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def v1(self):
        """Gets the v1 of this SupportedFieldTypeDetails.


        :return: The v1 of this SupportedFieldTypeDetails.
        :rtype: SupportedFieldTypeDetailsV1
        """
        return self._v1

    @v1.setter
    def v1(self, v1):
        """Sets the v1 of this SupportedFieldTypeDetails.


        :param v1: The v1 of this SupportedFieldTypeDetails.
        :type v1: SupportedFieldTypeDetailsV1
        """
        if v1 is None:
            raise ValueError("Invalid value for `v1`, must not be `None`")

        self._v1 = v1
