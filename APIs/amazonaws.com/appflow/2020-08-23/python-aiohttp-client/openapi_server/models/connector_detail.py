# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_provisioning_type import ConnectorProvisioningType
from openapi_server.models.connector_type import ConnectorType
from openapi_server import util


class ConnectorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_description: str=None, connector_name: str=None, connector_owner: str=None, connector_version: str=None, application_type: str=None, connector_type: ConnectorType=None, connector_label: str=None, registered_at: datetime=None, registered_by: str=None, connector_provisioning_type: ConnectorProvisioningType=None, connector_modes: List=None, supported_data_transfer_types: List=None):
        """ConnectorDetail - a model defined in OpenAPI

        :param connector_description: The connector_description of this ConnectorDetail.
        :param connector_name: The connector_name of this ConnectorDetail.
        :param connector_owner: The connector_owner of this ConnectorDetail.
        :param connector_version: The connector_version of this ConnectorDetail.
        :param application_type: The application_type of this ConnectorDetail.
        :param connector_type: The connector_type of this ConnectorDetail.
        :param connector_label: The connector_label of this ConnectorDetail.
        :param registered_at: The registered_at of this ConnectorDetail.
        :param registered_by: The registered_by of this ConnectorDetail.
        :param connector_provisioning_type: The connector_provisioning_type of this ConnectorDetail.
        :param connector_modes: The connector_modes of this ConnectorDetail.
        :param supported_data_transfer_types: The supported_data_transfer_types of this ConnectorDetail.
        """
        self.openapi_types = {
            'connector_description': str,
            'connector_name': str,
            'connector_owner': str,
            'connector_version': str,
            'application_type': str,
            'connector_type': ConnectorType,
            'connector_label': str,
            'registered_at': datetime,
            'registered_by': str,
            'connector_provisioning_type': ConnectorProvisioningType,
            'connector_modes': List,
            'supported_data_transfer_types': List
        }

        self.attribute_map = {
            'connector_description': 'connectorDescription',
            'connector_name': 'connectorName',
            'connector_owner': 'connectorOwner',
            'connector_version': 'connectorVersion',
            'application_type': 'applicationType',
            'connector_type': 'connectorType',
            'connector_label': 'connectorLabel',
            'registered_at': 'registeredAt',
            'registered_by': 'registeredBy',
            'connector_provisioning_type': 'connectorProvisioningType',
            'connector_modes': 'connectorModes',
            'supported_data_transfer_types': 'supportedDataTransferTypes'
        }

        self._connector_description = connector_description
        self._connector_name = connector_name
        self._connector_owner = connector_owner
        self._connector_version = connector_version
        self._application_type = application_type
        self._connector_type = connector_type
        self._connector_label = connector_label
        self._registered_at = registered_at
        self._registered_by = registered_by
        self._connector_provisioning_type = connector_provisioning_type
        self._connector_modes = connector_modes
        self._supported_data_transfer_types = supported_data_transfer_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorDetail of this ConnectorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_description(self):
        """Gets the connector_description of this ConnectorDetail.


        :return: The connector_description of this ConnectorDetail.
        :rtype: str
        """
        return self._connector_description

    @connector_description.setter
    def connector_description(self, connector_description):
        """Sets the connector_description of this ConnectorDetail.


        :param connector_description: The connector_description of this ConnectorDetail.
        :type connector_description: str
        """

        self._connector_description = connector_description

    @property
    def connector_name(self):
        """Gets the connector_name of this ConnectorDetail.


        :return: The connector_name of this ConnectorDetail.
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this ConnectorDetail.


        :param connector_name: The connector_name of this ConnectorDetail.
        :type connector_name: str
        """

        self._connector_name = connector_name

    @property
    def connector_owner(self):
        """Gets the connector_owner of this ConnectorDetail.


        :return: The connector_owner of this ConnectorDetail.
        :rtype: str
        """
        return self._connector_owner

    @connector_owner.setter
    def connector_owner(self, connector_owner):
        """Sets the connector_owner of this ConnectorDetail.


        :param connector_owner: The connector_owner of this ConnectorDetail.
        :type connector_owner: str
        """

        self._connector_owner = connector_owner

    @property
    def connector_version(self):
        """Gets the connector_version of this ConnectorDetail.


        :return: The connector_version of this ConnectorDetail.
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this ConnectorDetail.


        :param connector_version: The connector_version of this ConnectorDetail.
        :type connector_version: str
        """

        self._connector_version = connector_version

    @property
    def application_type(self):
        """Gets the application_type of this ConnectorDetail.


        :return: The application_type of this ConnectorDetail.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this ConnectorDetail.


        :param application_type: The application_type of this ConnectorDetail.
        :type application_type: str
        """

        self._application_type = application_type

    @property
    def connector_type(self):
        """Gets the connector_type of this ConnectorDetail.


        :return: The connector_type of this ConnectorDetail.
        :rtype: ConnectorType
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ConnectorDetail.


        :param connector_type: The connector_type of this ConnectorDetail.
        :type connector_type: ConnectorType
        """

        self._connector_type = connector_type

    @property
    def connector_label(self):
        """Gets the connector_label of this ConnectorDetail.


        :return: The connector_label of this ConnectorDetail.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this ConnectorDetail.


        :param connector_label: The connector_label of this ConnectorDetail.
        :type connector_label: str
        """

        self._connector_label = connector_label

    @property
    def registered_at(self):
        """Gets the registered_at of this ConnectorDetail.


        :return: The registered_at of this ConnectorDetail.
        :rtype: datetime
        """
        return self._registered_at

    @registered_at.setter
    def registered_at(self, registered_at):
        """Sets the registered_at of this ConnectorDetail.


        :param registered_at: The registered_at of this ConnectorDetail.
        :type registered_at: datetime
        """

        self._registered_at = registered_at

    @property
    def registered_by(self):
        """Gets the registered_by of this ConnectorDetail.


        :return: The registered_by of this ConnectorDetail.
        :rtype: str
        """
        return self._registered_by

    @registered_by.setter
    def registered_by(self, registered_by):
        """Sets the registered_by of this ConnectorDetail.


        :param registered_by: The registered_by of this ConnectorDetail.
        :type registered_by: str
        """

        self._registered_by = registered_by

    @property
    def connector_provisioning_type(self):
        """Gets the connector_provisioning_type of this ConnectorDetail.


        :return: The connector_provisioning_type of this ConnectorDetail.
        :rtype: ConnectorProvisioningType
        """
        return self._connector_provisioning_type

    @connector_provisioning_type.setter
    def connector_provisioning_type(self, connector_provisioning_type):
        """Sets the connector_provisioning_type of this ConnectorDetail.


        :param connector_provisioning_type: The connector_provisioning_type of this ConnectorDetail.
        :type connector_provisioning_type: ConnectorProvisioningType
        """

        self._connector_provisioning_type = connector_provisioning_type

    @property
    def connector_modes(self):
        """Gets the connector_modes of this ConnectorDetail.


        :return: The connector_modes of this ConnectorDetail.
        :rtype: List
        """
        return self._connector_modes

    @connector_modes.setter
    def connector_modes(self, connector_modes):
        """Sets the connector_modes of this ConnectorDetail.


        :param connector_modes: The connector_modes of this ConnectorDetail.
        :type connector_modes: List
        """

        self._connector_modes = connector_modes

    @property
    def supported_data_transfer_types(self):
        """Gets the supported_data_transfer_types of this ConnectorDetail.


        :return: The supported_data_transfer_types of this ConnectorDetail.
        :rtype: List
        """
        return self._supported_data_transfer_types

    @supported_data_transfer_types.setter
    def supported_data_transfer_types(self, supported_data_transfer_types):
        """Sets the supported_data_transfer_types of this ConnectorDetail.


        :param supported_data_transfer_types: The supported_data_transfer_types of this ConnectorDetail.
        :type supported_data_transfer_types: List
        """

        self._supported_data_transfer_types = supported_data_transfer_types
