# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_connector_profile_request_connector_profile_config import CreateConnectorProfileRequestConnectorProfileConfig
import re
from openapi_server import util


class CreateConnectorProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_profile_name: str=None, kms_arn: str=None, connector_type: str=None, connector_label: str=None, connection_mode: str=None, connector_profile_config: CreateConnectorProfileRequestConnectorProfileConfig=None, client_token: str=None):
        """CreateConnectorProfileRequest - a model defined in OpenAPI

        :param connector_profile_name: The connector_profile_name of this CreateConnectorProfileRequest.
        :param kms_arn: The kms_arn of this CreateConnectorProfileRequest.
        :param connector_type: The connector_type of this CreateConnectorProfileRequest.
        :param connector_label: The connector_label of this CreateConnectorProfileRequest.
        :param connection_mode: The connection_mode of this CreateConnectorProfileRequest.
        :param connector_profile_config: The connector_profile_config of this CreateConnectorProfileRequest.
        :param client_token: The client_token of this CreateConnectorProfileRequest.
        """
        self.openapi_types = {
            'connector_profile_name': str,
            'kms_arn': str,
            'connector_type': str,
            'connector_label': str,
            'connection_mode': str,
            'connector_profile_config': CreateConnectorProfileRequestConnectorProfileConfig,
            'client_token': str
        }

        self.attribute_map = {
            'connector_profile_name': 'connectorProfileName',
            'kms_arn': 'kmsArn',
            'connector_type': 'connectorType',
            'connector_label': 'connectorLabel',
            'connection_mode': 'connectionMode',
            'connector_profile_config': 'connectorProfileConfig',
            'client_token': 'clientToken'
        }

        self._connector_profile_name = connector_profile_name
        self._kms_arn = kms_arn
        self._connector_type = connector_type
        self._connector_label = connector_label
        self._connection_mode = connection_mode
        self._connector_profile_config = connector_profile_config
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConnectorProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConnectorProfile_request of this CreateConnectorProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this CreateConnectorProfileRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. 

        :return: The connector_profile_name of this CreateConnectorProfileRequest.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this CreateConnectorProfileRequest.

         The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. 

        :param connector_profile_name: The connector_profile_name of this CreateConnectorProfileRequest.
        :type connector_profile_name: str
        """
        if connector_profile_name is None:
            raise ValueError("Invalid value for `connector_profile_name`, must not be `None`")
        if connector_profile_name is not None and len(connector_profile_name) > 256:
            raise ValueError("Invalid value for `connector_profile_name`, length must be less than or equal to `256`")
        if connector_profile_name is not None and not re.search(r'[\w\/!@#+=.-]+', connector_profile_name):
            raise ValueError("Invalid value for `connector_profile_name`, must be a follow pattern or equal to `/[\w\/!@#+=.-]+/`")

        self._connector_profile_name = connector_profile_name

    @property
    def kms_arn(self):
        """Gets the kms_arn of this CreateConnectorProfileRequest.

         The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 

        :return: The kms_arn of this CreateConnectorProfileRequest.
        :rtype: str
        """
        return self._kms_arn

    @kms_arn.setter
    def kms_arn(self, kms_arn):
        """Sets the kms_arn of this CreateConnectorProfileRequest.

         The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 

        :param kms_arn: The kms_arn of this CreateConnectorProfileRequest.
        :type kms_arn: str
        """
        if kms_arn is not None and len(kms_arn) > 2048:
            raise ValueError("Invalid value for `kms_arn`, length must be less than or equal to `2048`")
        if kms_arn is not None and len(kms_arn) < 20:
            raise ValueError("Invalid value for `kms_arn`, length must be greater than or equal to `20`")
        if kms_arn is not None and not re.search(r'arn:aws:kms:.*:[0-9]+:.*', kms_arn):
            raise ValueError("Invalid value for `kms_arn`, must be a follow pattern or equal to `/arn:aws:kms:.*:[0-9]+:.*/`")

        self._kms_arn = kms_arn

    @property
    def connector_type(self):
        """Gets the connector_type of this CreateConnectorProfileRequest.

         The type of connector, such as Salesforce, Amplitude, and so on. 

        :return: The connector_type of this CreateConnectorProfileRequest.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this CreateConnectorProfileRequest.

         The type of connector, such as Salesforce, Amplitude, and so on. 

        :param connector_type: The connector_type of this CreateConnectorProfileRequest.
        :type connector_type: str
        """
        allowed_values = ["Salesforce", "Singular", "Slack", "Redshift", "S3", "Marketo", "Googleanalytics", "Zendesk", "Servicenow", "Datadog", "Trendmicro", "Snowflake", "Dynatrace", "Infornexus", "Amplitude", "Veeva", "EventBridge", "LookoutMetrics", "Upsolver", "Honeycode", "CustomerProfiles", "SAPOData", "CustomConnector", "Pardot"]  # noqa: E501
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_label(self):
        """Gets the connector_label of this CreateConnectorProfileRequest.

        The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.

        :return: The connector_label of this CreateConnectorProfileRequest.
        :rtype: str
        """
        return self._connector_label

    @connector_label.setter
    def connector_label(self, connector_label):
        """Sets the connector_label of this CreateConnectorProfileRequest.

        The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.

        :param connector_label: The connector_label of this CreateConnectorProfileRequest.
        :type connector_label: str
        """
        if connector_label is not None and len(connector_label) > 256:
            raise ValueError("Invalid value for `connector_label`, length must be less than or equal to `256`")
        if connector_label is not None and not re.search(r'[a-zA-Z0-9][\w!@#.-]+', connector_label):
            raise ValueError("Invalid value for `connector_label`, must be a follow pattern or equal to `/[a-zA-Z0-9][\w!@#.-]+/`")

        self._connector_label = connector_label

    @property
    def connection_mode(self):
        """Gets the connection_mode of this CreateConnectorProfileRequest.

         Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 

        :return: The connection_mode of this CreateConnectorProfileRequest.
        :rtype: str
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this CreateConnectorProfileRequest.

         Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 

        :param connection_mode: The connection_mode of this CreateConnectorProfileRequest.
        :type connection_mode: str
        """
        allowed_values = ["Public", "Private"]  # noqa: E501
        if connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_mode` ({0}), must be one of {1}"
                .format(connection_mode, allowed_values)
            )

        self._connection_mode = connection_mode

    @property
    def connector_profile_config(self):
        """Gets the connector_profile_config of this CreateConnectorProfileRequest.


        :return: The connector_profile_config of this CreateConnectorProfileRequest.
        :rtype: CreateConnectorProfileRequestConnectorProfileConfig
        """
        return self._connector_profile_config

    @connector_profile_config.setter
    def connector_profile_config(self, connector_profile_config):
        """Sets the connector_profile_config of this CreateConnectorProfileRequest.


        :param connector_profile_config: The connector_profile_config of this CreateConnectorProfileRequest.
        :type connector_profile_config: CreateConnectorProfileRequestConnectorProfileConfig
        """
        if connector_profile_config is None:
            raise ValueError("Invalid value for `connector_profile_config`, must not be `None`")

        self._connector_profile_config = connector_profile_config

    @property
    def client_token(self):
        """Gets the client_token of this CreateConnectorProfileRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateConnectorProfile</code>. The token is active for 8 hours.</p>

        :return: The client_token of this CreateConnectorProfileRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateConnectorProfileRequest.

        <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateConnectorProfile</code>. The token is active for 8 hours.</p>

        :param client_token: The client_token of this CreateConnectorProfileRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 256:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `256`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[ -~]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[ -~]+/`")

        self._client_token = client_token
