/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMetadata::OAIConnectorMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMetadata::OAIConnectorMetadata() {
    this->initializeModel();
}

OAIConnectorMetadata::~OAIConnectorMetadata() {}

void OAIConnectorMetadata::initializeModel() {

    m_amplitude_isSet = false;
    m_amplitude_isValid = false;

    m_datadog_isSet = false;
    m_datadog_isValid = false;

    m_dynatrace_isSet = false;
    m_dynatrace_isValid = false;

    m_google_analytics_isSet = false;
    m_google_analytics_isValid = false;

    m_infor_nexus_isSet = false;
    m_infor_nexus_isValid = false;

    m_marketo_isSet = false;
    m_marketo_isValid = false;

    m_redshift_isSet = false;
    m_redshift_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;

    m_salesforce_isSet = false;
    m_salesforce_isValid = false;

    m_service_now_isSet = false;
    m_service_now_isValid = false;

    m_singular_isSet = false;
    m_singular_isValid = false;

    m_slack_isSet = false;
    m_slack_isValid = false;

    m_snowflake_isSet = false;
    m_snowflake_isValid = false;

    m_trendmicro_isSet = false;
    m_trendmicro_isValid = false;

    m_veeva_isSet = false;
    m_veeva_isValid = false;

    m_zendesk_isSet = false;
    m_zendesk_isValid = false;

    m_event_bridge_isSet = false;
    m_event_bridge_isValid = false;

    m_upsolver_isSet = false;
    m_upsolver_isValid = false;

    m_customer_profiles_isSet = false;
    m_customer_profiles_isValid = false;

    m_honeycode_isSet = false;
    m_honeycode_isValid = false;

    m_sapo_data_isSet = false;
    m_sapo_data_isValid = false;

    m_pardot_isSet = false;
    m_pardot_isValid = false;
}

void OAIConnectorMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMetadata::fromJsonObject(QJsonObject json) {

    m_amplitude_isValid = ::OpenAPI::fromJsonValue(m_amplitude, json[QString("Amplitude")]);
    m_amplitude_isSet = !json[QString("Amplitude")].isNull() && m_amplitude_isValid;

    m_datadog_isValid = ::OpenAPI::fromJsonValue(m_datadog, json[QString("Datadog")]);
    m_datadog_isSet = !json[QString("Datadog")].isNull() && m_datadog_isValid;

    m_dynatrace_isValid = ::OpenAPI::fromJsonValue(m_dynatrace, json[QString("Dynatrace")]);
    m_dynatrace_isSet = !json[QString("Dynatrace")].isNull() && m_dynatrace_isValid;

    m_google_analytics_isValid = ::OpenAPI::fromJsonValue(m_google_analytics, json[QString("GoogleAnalytics")]);
    m_google_analytics_isSet = !json[QString("GoogleAnalytics")].isNull() && m_google_analytics_isValid;

    m_infor_nexus_isValid = ::OpenAPI::fromJsonValue(m_infor_nexus, json[QString("InforNexus")]);
    m_infor_nexus_isSet = !json[QString("InforNexus")].isNull() && m_infor_nexus_isValid;

    m_marketo_isValid = ::OpenAPI::fromJsonValue(m_marketo, json[QString("Marketo")]);
    m_marketo_isSet = !json[QString("Marketo")].isNull() && m_marketo_isValid;

    m_redshift_isValid = ::OpenAPI::fromJsonValue(m_redshift, json[QString("Redshift")]);
    m_redshift_isSet = !json[QString("Redshift")].isNull() && m_redshift_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;

    m_salesforce_isValid = ::OpenAPI::fromJsonValue(m_salesforce, json[QString("Salesforce")]);
    m_salesforce_isSet = !json[QString("Salesforce")].isNull() && m_salesforce_isValid;

    m_service_now_isValid = ::OpenAPI::fromJsonValue(m_service_now, json[QString("ServiceNow")]);
    m_service_now_isSet = !json[QString("ServiceNow")].isNull() && m_service_now_isValid;

    m_singular_isValid = ::OpenAPI::fromJsonValue(m_singular, json[QString("Singular")]);
    m_singular_isSet = !json[QString("Singular")].isNull() && m_singular_isValid;

    m_slack_isValid = ::OpenAPI::fromJsonValue(m_slack, json[QString("Slack")]);
    m_slack_isSet = !json[QString("Slack")].isNull() && m_slack_isValid;

    m_snowflake_isValid = ::OpenAPI::fromJsonValue(m_snowflake, json[QString("Snowflake")]);
    m_snowflake_isSet = !json[QString("Snowflake")].isNull() && m_snowflake_isValid;

    m_trendmicro_isValid = ::OpenAPI::fromJsonValue(m_trendmicro, json[QString("Trendmicro")]);
    m_trendmicro_isSet = !json[QString("Trendmicro")].isNull() && m_trendmicro_isValid;

    m_veeva_isValid = ::OpenAPI::fromJsonValue(m_veeva, json[QString("Veeva")]);
    m_veeva_isSet = !json[QString("Veeva")].isNull() && m_veeva_isValid;

    m_zendesk_isValid = ::OpenAPI::fromJsonValue(m_zendesk, json[QString("Zendesk")]);
    m_zendesk_isSet = !json[QString("Zendesk")].isNull() && m_zendesk_isValid;

    m_event_bridge_isValid = ::OpenAPI::fromJsonValue(m_event_bridge, json[QString("EventBridge")]);
    m_event_bridge_isSet = !json[QString("EventBridge")].isNull() && m_event_bridge_isValid;

    m_upsolver_isValid = ::OpenAPI::fromJsonValue(m_upsolver, json[QString("Upsolver")]);
    m_upsolver_isSet = !json[QString("Upsolver")].isNull() && m_upsolver_isValid;

    m_customer_profiles_isValid = ::OpenAPI::fromJsonValue(m_customer_profiles, json[QString("CustomerProfiles")]);
    m_customer_profiles_isSet = !json[QString("CustomerProfiles")].isNull() && m_customer_profiles_isValid;

    m_honeycode_isValid = ::OpenAPI::fromJsonValue(m_honeycode, json[QString("Honeycode")]);
    m_honeycode_isSet = !json[QString("Honeycode")].isNull() && m_honeycode_isValid;

    m_sapo_data_isValid = ::OpenAPI::fromJsonValue(m_sapo_data, json[QString("SAPOData")]);
    m_sapo_data_isSet = !json[QString("SAPOData")].isNull() && m_sapo_data_isValid;

    m_pardot_isValid = ::OpenAPI::fromJsonValue(m_pardot, json[QString("Pardot")]);
    m_pardot_isSet = !json[QString("Pardot")].isNull() && m_pardot_isValid;
}

QString OAIConnectorMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_amplitude.isSet()) {
        obj.insert(QString("Amplitude"), ::OpenAPI::toJsonValue(m_amplitude));
    }
    if (m_datadog.isSet()) {
        obj.insert(QString("Datadog"), ::OpenAPI::toJsonValue(m_datadog));
    }
    if (m_dynatrace.isSet()) {
        obj.insert(QString("Dynatrace"), ::OpenAPI::toJsonValue(m_dynatrace));
    }
    if (m_google_analytics.isSet()) {
        obj.insert(QString("GoogleAnalytics"), ::OpenAPI::toJsonValue(m_google_analytics));
    }
    if (m_infor_nexus.isSet()) {
        obj.insert(QString("InforNexus"), ::OpenAPI::toJsonValue(m_infor_nexus));
    }
    if (m_marketo.isSet()) {
        obj.insert(QString("Marketo"), ::OpenAPI::toJsonValue(m_marketo));
    }
    if (m_redshift.isSet()) {
        obj.insert(QString("Redshift"), ::OpenAPI::toJsonValue(m_redshift));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    if (m_salesforce.isSet()) {
        obj.insert(QString("Salesforce"), ::OpenAPI::toJsonValue(m_salesforce));
    }
    if (m_service_now.isSet()) {
        obj.insert(QString("ServiceNow"), ::OpenAPI::toJsonValue(m_service_now));
    }
    if (m_singular.isSet()) {
        obj.insert(QString("Singular"), ::OpenAPI::toJsonValue(m_singular));
    }
    if (m_slack.isSet()) {
        obj.insert(QString("Slack"), ::OpenAPI::toJsonValue(m_slack));
    }
    if (m_snowflake.isSet()) {
        obj.insert(QString("Snowflake"), ::OpenAPI::toJsonValue(m_snowflake));
    }
    if (m_trendmicro.isSet()) {
        obj.insert(QString("Trendmicro"), ::OpenAPI::toJsonValue(m_trendmicro));
    }
    if (m_veeva.isSet()) {
        obj.insert(QString("Veeva"), ::OpenAPI::toJsonValue(m_veeva));
    }
    if (m_zendesk.isSet()) {
        obj.insert(QString("Zendesk"), ::OpenAPI::toJsonValue(m_zendesk));
    }
    if (m_event_bridge.isSet()) {
        obj.insert(QString("EventBridge"), ::OpenAPI::toJsonValue(m_event_bridge));
    }
    if (m_upsolver.isSet()) {
        obj.insert(QString("Upsolver"), ::OpenAPI::toJsonValue(m_upsolver));
    }
    if (m_customer_profiles.isSet()) {
        obj.insert(QString("CustomerProfiles"), ::OpenAPI::toJsonValue(m_customer_profiles));
    }
    if (m_honeycode.isSet()) {
        obj.insert(QString("Honeycode"), ::OpenAPI::toJsonValue(m_honeycode));
    }
    if (m_sapo_data_isSet) {
        obj.insert(QString("SAPOData"), ::OpenAPI::toJsonValue(m_sapo_data));
    }
    if (m_pardot.isSet()) {
        obj.insert(QString("Pardot"), ::OpenAPI::toJsonValue(m_pardot));
    }
    return obj;
}

OAIObject OAIConnectorMetadata::getAmplitude() const {
    return m_amplitude;
}
void OAIConnectorMetadata::setAmplitude(const OAIObject &amplitude) {
    m_amplitude = amplitude;
    m_amplitude_isSet = true;
}

bool OAIConnectorMetadata::is_amplitude_Set() const{
    return m_amplitude_isSet;
}

bool OAIConnectorMetadata::is_amplitude_Valid() const{
    return m_amplitude_isValid;
}

OAIObject OAIConnectorMetadata::getDatadog() const {
    return m_datadog;
}
void OAIConnectorMetadata::setDatadog(const OAIObject &datadog) {
    m_datadog = datadog;
    m_datadog_isSet = true;
}

bool OAIConnectorMetadata::is_datadog_Set() const{
    return m_datadog_isSet;
}

bool OAIConnectorMetadata::is_datadog_Valid() const{
    return m_datadog_isValid;
}

OAIObject OAIConnectorMetadata::getDynatrace() const {
    return m_dynatrace;
}
void OAIConnectorMetadata::setDynatrace(const OAIObject &dynatrace) {
    m_dynatrace = dynatrace;
    m_dynatrace_isSet = true;
}

bool OAIConnectorMetadata::is_dynatrace_Set() const{
    return m_dynatrace_isSet;
}

bool OAIConnectorMetadata::is_dynatrace_Valid() const{
    return m_dynatrace_isValid;
}

OAIConnectorMetadata_GoogleAnalytics OAIConnectorMetadata::getGoogleAnalytics() const {
    return m_google_analytics;
}
void OAIConnectorMetadata::setGoogleAnalytics(const OAIConnectorMetadata_GoogleAnalytics &google_analytics) {
    m_google_analytics = google_analytics;
    m_google_analytics_isSet = true;
}

bool OAIConnectorMetadata::is_google_analytics_Set() const{
    return m_google_analytics_isSet;
}

bool OAIConnectorMetadata::is_google_analytics_Valid() const{
    return m_google_analytics_isValid;
}

OAIObject OAIConnectorMetadata::getInforNexus() const {
    return m_infor_nexus;
}
void OAIConnectorMetadata::setInforNexus(const OAIObject &infor_nexus) {
    m_infor_nexus = infor_nexus;
    m_infor_nexus_isSet = true;
}

bool OAIConnectorMetadata::is_infor_nexus_Set() const{
    return m_infor_nexus_isSet;
}

bool OAIConnectorMetadata::is_infor_nexus_Valid() const{
    return m_infor_nexus_isValid;
}

OAIObject OAIConnectorMetadata::getMarketo() const {
    return m_marketo;
}
void OAIConnectorMetadata::setMarketo(const OAIObject &marketo) {
    m_marketo = marketo;
    m_marketo_isSet = true;
}

bool OAIConnectorMetadata::is_marketo_Set() const{
    return m_marketo_isSet;
}

bool OAIConnectorMetadata::is_marketo_Valid() const{
    return m_marketo_isValid;
}

OAIObject OAIConnectorMetadata::getRedshift() const {
    return m_redshift;
}
void OAIConnectorMetadata::setRedshift(const OAIObject &redshift) {
    m_redshift = redshift;
    m_redshift_isSet = true;
}

bool OAIConnectorMetadata::is_redshift_Set() const{
    return m_redshift_isSet;
}

bool OAIConnectorMetadata::is_redshift_Valid() const{
    return m_redshift_isValid;
}

OAIObject OAIConnectorMetadata::getS3() const {
    return m_s3;
}
void OAIConnectorMetadata::setS3(const OAIObject &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAIConnectorMetadata::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAIConnectorMetadata::is_s3_Valid() const{
    return m_s3_isValid;
}

OAIConnectorMetadata_Salesforce OAIConnectorMetadata::getSalesforce() const {
    return m_salesforce;
}
void OAIConnectorMetadata::setSalesforce(const OAIConnectorMetadata_Salesforce &salesforce) {
    m_salesforce = salesforce;
    m_salesforce_isSet = true;
}

bool OAIConnectorMetadata::is_salesforce_Set() const{
    return m_salesforce_isSet;
}

bool OAIConnectorMetadata::is_salesforce_Valid() const{
    return m_salesforce_isValid;
}

OAIObject OAIConnectorMetadata::getServiceNow() const {
    return m_service_now;
}
void OAIConnectorMetadata::setServiceNow(const OAIObject &service_now) {
    m_service_now = service_now;
    m_service_now_isSet = true;
}

bool OAIConnectorMetadata::is_service_now_Set() const{
    return m_service_now_isSet;
}

bool OAIConnectorMetadata::is_service_now_Valid() const{
    return m_service_now_isValid;
}

OAIObject OAIConnectorMetadata::getSingular() const {
    return m_singular;
}
void OAIConnectorMetadata::setSingular(const OAIObject &singular) {
    m_singular = singular;
    m_singular_isSet = true;
}

bool OAIConnectorMetadata::is_singular_Set() const{
    return m_singular_isSet;
}

bool OAIConnectorMetadata::is_singular_Valid() const{
    return m_singular_isValid;
}

OAIConnectorMetadata_Slack OAIConnectorMetadata::getSlack() const {
    return m_slack;
}
void OAIConnectorMetadata::setSlack(const OAIConnectorMetadata_Slack &slack) {
    m_slack = slack;
    m_slack_isSet = true;
}

bool OAIConnectorMetadata::is_slack_Set() const{
    return m_slack_isSet;
}

bool OAIConnectorMetadata::is_slack_Valid() const{
    return m_slack_isValid;
}

OAIConnectorMetadata_Snowflake OAIConnectorMetadata::getSnowflake() const {
    return m_snowflake;
}
void OAIConnectorMetadata::setSnowflake(const OAIConnectorMetadata_Snowflake &snowflake) {
    m_snowflake = snowflake;
    m_snowflake_isSet = true;
}

bool OAIConnectorMetadata::is_snowflake_Set() const{
    return m_snowflake_isSet;
}

bool OAIConnectorMetadata::is_snowflake_Valid() const{
    return m_snowflake_isValid;
}

OAIObject OAIConnectorMetadata::getTrendmicro() const {
    return m_trendmicro;
}
void OAIConnectorMetadata::setTrendmicro(const OAIObject &trendmicro) {
    m_trendmicro = trendmicro;
    m_trendmicro_isSet = true;
}

bool OAIConnectorMetadata::is_trendmicro_Set() const{
    return m_trendmicro_isSet;
}

bool OAIConnectorMetadata::is_trendmicro_Valid() const{
    return m_trendmicro_isValid;
}

OAIObject OAIConnectorMetadata::getVeeva() const {
    return m_veeva;
}
void OAIConnectorMetadata::setVeeva(const OAIObject &veeva) {
    m_veeva = veeva;
    m_veeva_isSet = true;
}

bool OAIConnectorMetadata::is_veeva_Set() const{
    return m_veeva_isSet;
}

bool OAIConnectorMetadata::is_veeva_Valid() const{
    return m_veeva_isValid;
}

OAIConnectorMetadata_Zendesk OAIConnectorMetadata::getZendesk() const {
    return m_zendesk;
}
void OAIConnectorMetadata::setZendesk(const OAIConnectorMetadata_Zendesk &zendesk) {
    m_zendesk = zendesk;
    m_zendesk_isSet = true;
}

bool OAIConnectorMetadata::is_zendesk_Set() const{
    return m_zendesk_isSet;
}

bool OAIConnectorMetadata::is_zendesk_Valid() const{
    return m_zendesk_isValid;
}

OAIObject OAIConnectorMetadata::getEventBridge() const {
    return m_event_bridge;
}
void OAIConnectorMetadata::setEventBridge(const OAIObject &event_bridge) {
    m_event_bridge = event_bridge;
    m_event_bridge_isSet = true;
}

bool OAIConnectorMetadata::is_event_bridge_Set() const{
    return m_event_bridge_isSet;
}

bool OAIConnectorMetadata::is_event_bridge_Valid() const{
    return m_event_bridge_isValid;
}

OAIObject OAIConnectorMetadata::getUpsolver() const {
    return m_upsolver;
}
void OAIConnectorMetadata::setUpsolver(const OAIObject &upsolver) {
    m_upsolver = upsolver;
    m_upsolver_isSet = true;
}

bool OAIConnectorMetadata::is_upsolver_Set() const{
    return m_upsolver_isSet;
}

bool OAIConnectorMetadata::is_upsolver_Valid() const{
    return m_upsolver_isValid;
}

OAIObject OAIConnectorMetadata::getCustomerProfiles() const {
    return m_customer_profiles;
}
void OAIConnectorMetadata::setCustomerProfiles(const OAIObject &customer_profiles) {
    m_customer_profiles = customer_profiles;
    m_customer_profiles_isSet = true;
}

bool OAIConnectorMetadata::is_customer_profiles_Set() const{
    return m_customer_profiles_isSet;
}

bool OAIConnectorMetadata::is_customer_profiles_Valid() const{
    return m_customer_profiles_isValid;
}

OAIConnectorMetadata_Honeycode OAIConnectorMetadata::getHoneycode() const {
    return m_honeycode;
}
void OAIConnectorMetadata::setHoneycode(const OAIConnectorMetadata_Honeycode &honeycode) {
    m_honeycode = honeycode;
    m_honeycode_isSet = true;
}

bool OAIConnectorMetadata::is_honeycode_Set() const{
    return m_honeycode_isSet;
}

bool OAIConnectorMetadata::is_honeycode_Valid() const{
    return m_honeycode_isValid;
}

OAIObject OAIConnectorMetadata::getSapoData() const {
    return m_sapo_data;
}
void OAIConnectorMetadata::setSapoData(const OAIObject &sapo_data) {
    m_sapo_data = sapo_data;
    m_sapo_data_isSet = true;
}

bool OAIConnectorMetadata::is_sapo_data_Set() const{
    return m_sapo_data_isSet;
}

bool OAIConnectorMetadata::is_sapo_data_Valid() const{
    return m_sapo_data_isValid;
}

OAIObject OAIConnectorMetadata::getPardot() const {
    return m_pardot;
}
void OAIConnectorMetadata::setPardot(const OAIObject &pardot) {
    m_pardot = pardot;
    m_pardot_isSet = true;
}

bool OAIConnectorMetadata::is_pardot_Set() const{
    return m_pardot_isSet;
}

bool OAIConnectorMetadata::is_pardot_Valid() const{
    return m_pardot_isValid;
}

bool OAIConnectorMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amplitude.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datadog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynatrace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_infor_nexus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesforce.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_now.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_singular.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowflake.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trendmicro.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_veeva.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zendesk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upsolver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_honeycode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sapo_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pardot.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
