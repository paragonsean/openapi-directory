/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectorProfile.h
 *
 *  Describes an instance of a connector. This includes the provided name, credentials ARN, connection-mode, and so on. To keep the API intuitive and extensible, the fields that are common to all types of connector profiles are explicitly specified at the top level. The rest of the connector-specific properties are available via the &lt;code&gt;connectorProfileProperties&lt;/code&gt; field. 
 */

#ifndef OAIConnectorProfile_H
#define OAIConnectorProfile_H

#include <QJsonObject>

#include "OAIConnectionMode.h"
#include "OAIConnectorProfile_privateConnectionProvisioningState.h"
#include "OAIConnectorType.h"
#include "OAICreateConnectorProfile_request_connectorProfileConfig_connectorProfileProperties.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateConnectorProfile_request_connectorProfileConfig_connectorProfileProperties;
class OAIConnectorProfile_privateConnectionProvisioningState;

class OAIConnectorProfile : public OAIObject {
public:
    OAIConnectorProfile();
    OAIConnectorProfile(QString json);
    ~OAIConnectorProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectorProfileArn() const;
    void setConnectorProfileArn(const QString &connector_profile_arn);
    bool is_connector_profile_arn_Set() const;
    bool is_connector_profile_arn_Valid() const;

    QString getConnectorProfileName() const;
    void setConnectorProfileName(const QString &connector_profile_name);
    bool is_connector_profile_name_Set() const;
    bool is_connector_profile_name_Valid() const;

    OAIConnectorType getConnectorType() const;
    void setConnectorType(const OAIConnectorType &connector_type);
    bool is_connector_type_Set() const;
    bool is_connector_type_Valid() const;

    QString getConnectorLabel() const;
    void setConnectorLabel(const QString &connector_label);
    bool is_connector_label_Set() const;
    bool is_connector_label_Valid() const;

    OAIConnectionMode getConnectionMode() const;
    void setConnectionMode(const OAIConnectionMode &connection_mode);
    bool is_connection_mode_Set() const;
    bool is_connection_mode_Valid() const;

    QString getCredentialsArn() const;
    void setCredentialsArn(const QString &credentials_arn);
    bool is_credentials_arn_Set() const;
    bool is_credentials_arn_Valid() const;

    OAICreateConnectorProfile_request_connectorProfileConfig_connectorProfileProperties getConnectorProfileProperties() const;
    void setConnectorProfileProperties(const OAICreateConnectorProfile_request_connectorProfileConfig_connectorProfileProperties &connector_profile_properties);
    bool is_connector_profile_properties_Set() const;
    bool is_connector_profile_properties_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    OAIConnectorProfile_privateConnectionProvisioningState getPrivateConnectionProvisioningState() const;
    void setPrivateConnectionProvisioningState(const OAIConnectorProfile_privateConnectionProvisioningState &private_connection_provisioning_state);
    bool is_private_connection_provisioning_state_Set() const;
    bool is_private_connection_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connector_profile_arn;
    bool m_connector_profile_arn_isSet;
    bool m_connector_profile_arn_isValid;

    QString m_connector_profile_name;
    bool m_connector_profile_name_isSet;
    bool m_connector_profile_name_isValid;

    OAIConnectorType m_connector_type;
    bool m_connector_type_isSet;
    bool m_connector_type_isValid;

    QString m_connector_label;
    bool m_connector_label_isSet;
    bool m_connector_label_isValid;

    OAIConnectionMode m_connection_mode;
    bool m_connection_mode_isSet;
    bool m_connection_mode_isValid;

    QString m_credentials_arn;
    bool m_credentials_arn_isSet;
    bool m_credentials_arn_isValid;

    OAICreateConnectorProfile_request_connectorProfileConfig_connectorProfileProperties m_connector_profile_properties;
    bool m_connector_profile_properties_isSet;
    bool m_connector_profile_properties_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    OAIConnectorProfile_privateConnectionProvisioningState m_private_connection_provisioning_state;
    bool m_private_connection_provisioning_state_isSet;
    bool m_private_connection_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectorProfile)

#endif // OAIConnectorProfile_H
