/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftDestinationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftDestinationProperties::OAIRedshiftDestinationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftDestinationProperties::OAIRedshiftDestinationProperties() {
    this->initializeModel();
}

OAIRedshiftDestinationProperties::~OAIRedshiftDestinationProperties() {}

void OAIRedshiftDestinationProperties::initializeModel() {

    m_object_isSet = false;
    m_object_isValid = false;

    m_intermediate_bucket_name_isSet = false;
    m_intermediate_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;

    m_error_handling_config_isSet = false;
    m_error_handling_config_isValid = false;
}

void OAIRedshiftDestinationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftDestinationProperties::fromJsonObject(QJsonObject json) {

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_intermediate_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_intermediate_bucket_name, json[QString("intermediateBucketName")]);
    m_intermediate_bucket_name_isSet = !json[QString("intermediateBucketName")].isNull() && m_intermediate_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("bucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("bucketPrefix")].isNull() && m_bucket_prefix_isValid;

    m_error_handling_config_isValid = ::OpenAPI::fromJsonValue(m_error_handling_config, json[QString("errorHandlingConfig")]);
    m_error_handling_config_isSet = !json[QString("errorHandlingConfig")].isNull() && m_error_handling_config_isValid;
}

QString OAIRedshiftDestinationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftDestinationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_intermediate_bucket_name_isSet) {
        obj.insert(QString("intermediateBucketName"), ::OpenAPI::toJsonValue(m_intermediate_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("bucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    if (m_error_handling_config.isSet()) {
        obj.insert(QString("errorHandlingConfig"), ::OpenAPI::toJsonValue(m_error_handling_config));
    }
    return obj;
}

QString OAIRedshiftDestinationProperties::getObject() const {
    return m_object;
}
void OAIRedshiftDestinationProperties::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIRedshiftDestinationProperties::is_object_Set() const{
    return m_object_isSet;
}

bool OAIRedshiftDestinationProperties::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIRedshiftDestinationProperties::getIntermediateBucketName() const {
    return m_intermediate_bucket_name;
}
void OAIRedshiftDestinationProperties::setIntermediateBucketName(const QString &intermediate_bucket_name) {
    m_intermediate_bucket_name = intermediate_bucket_name;
    m_intermediate_bucket_name_isSet = true;
}

bool OAIRedshiftDestinationProperties::is_intermediate_bucket_name_Set() const{
    return m_intermediate_bucket_name_isSet;
}

bool OAIRedshiftDestinationProperties::is_intermediate_bucket_name_Valid() const{
    return m_intermediate_bucket_name_isValid;
}

QString OAIRedshiftDestinationProperties::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAIRedshiftDestinationProperties::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAIRedshiftDestinationProperties::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAIRedshiftDestinationProperties::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

OAIRedshiftDestinationProperties_errorHandlingConfig OAIRedshiftDestinationProperties::getErrorHandlingConfig() const {
    return m_error_handling_config;
}
void OAIRedshiftDestinationProperties::setErrorHandlingConfig(const OAIRedshiftDestinationProperties_errorHandlingConfig &error_handling_config) {
    m_error_handling_config = error_handling_config;
    m_error_handling_config_isSet = true;
}

bool OAIRedshiftDestinationProperties::is_error_handling_config_Set() const{
    return m_error_handling_config_isSet;
}

bool OAIRedshiftDestinationProperties::is_error_handling_config_Valid() const{
    return m_error_handling_config_isValid;
}

bool OAIRedshiftDestinationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intermediate_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_handling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftDestinationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_isValid && m_intermediate_bucket_name_isValid && true;
}

} // namespace OpenAPI
