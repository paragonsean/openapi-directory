/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationConnectorProperties_SAPOData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationConnectorProperties_SAPOData::OAIDestinationConnectorProperties_SAPOData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationConnectorProperties_SAPOData::OAIDestinationConnectorProperties_SAPOData() {
    this->initializeModel();
}

OAIDestinationConnectorProperties_SAPOData::~OAIDestinationConnectorProperties_SAPOData() {}

void OAIDestinationConnectorProperties_SAPOData::initializeModel() {

    m_object_path_isSet = false;
    m_object_path_isValid = false;

    m_success_response_handling_config_isSet = false;
    m_success_response_handling_config_isValid = false;

    m_id_field_names_isSet = false;
    m_id_field_names_isValid = false;

    m_error_handling_config_isSet = false;
    m_error_handling_config_isValid = false;

    m_write_operation_type_isSet = false;
    m_write_operation_type_isValid = false;
}

void OAIDestinationConnectorProperties_SAPOData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationConnectorProperties_SAPOData::fromJsonObject(QJsonObject json) {

    m_object_path_isValid = ::OpenAPI::fromJsonValue(m_object_path, json[QString("objectPath")]);
    m_object_path_isSet = !json[QString("objectPath")].isNull() && m_object_path_isValid;

    m_success_response_handling_config_isValid = ::OpenAPI::fromJsonValue(m_success_response_handling_config, json[QString("successResponseHandlingConfig")]);
    m_success_response_handling_config_isSet = !json[QString("successResponseHandlingConfig")].isNull() && m_success_response_handling_config_isValid;

    m_id_field_names_isValid = ::OpenAPI::fromJsonValue(m_id_field_names, json[QString("idFieldNames")]);
    m_id_field_names_isSet = !json[QString("idFieldNames")].isNull() && m_id_field_names_isValid;

    m_error_handling_config_isValid = ::OpenAPI::fromJsonValue(m_error_handling_config, json[QString("errorHandlingConfig")]);
    m_error_handling_config_isSet = !json[QString("errorHandlingConfig")].isNull() && m_error_handling_config_isValid;

    m_write_operation_type_isValid = ::OpenAPI::fromJsonValue(m_write_operation_type, json[QString("writeOperationType")]);
    m_write_operation_type_isSet = !json[QString("writeOperationType")].isNull() && m_write_operation_type_isValid;
}

QString OAIDestinationConnectorProperties_SAPOData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationConnectorProperties_SAPOData::asJsonObject() const {
    QJsonObject obj;
    if (m_object_path_isSet) {
        obj.insert(QString("objectPath"), ::OpenAPI::toJsonValue(m_object_path));
    }
    if (m_success_response_handling_config.isSet()) {
        obj.insert(QString("successResponseHandlingConfig"), ::OpenAPI::toJsonValue(m_success_response_handling_config));
    }
    if (m_id_field_names.size() > 0) {
        obj.insert(QString("idFieldNames"), ::OpenAPI::toJsonValue(m_id_field_names));
    }
    if (m_error_handling_config.isSet()) {
        obj.insert(QString("errorHandlingConfig"), ::OpenAPI::toJsonValue(m_error_handling_config));
    }
    if (m_write_operation_type.isSet()) {
        obj.insert(QString("writeOperationType"), ::OpenAPI::toJsonValue(m_write_operation_type));
    }
    return obj;
}

QString OAIDestinationConnectorProperties_SAPOData::getObjectPath() const {
    return m_object_path;
}
void OAIDestinationConnectorProperties_SAPOData::setObjectPath(const QString &object_path) {
    m_object_path = object_path;
    m_object_path_isSet = true;
}

bool OAIDestinationConnectorProperties_SAPOData::is_object_path_Set() const{
    return m_object_path_isSet;
}

bool OAIDestinationConnectorProperties_SAPOData::is_object_path_Valid() const{
    return m_object_path_isValid;
}

OAISAPODataDestinationProperties_successResponseHandlingConfig OAIDestinationConnectorProperties_SAPOData::getSuccessResponseHandlingConfig() const {
    return m_success_response_handling_config;
}
void OAIDestinationConnectorProperties_SAPOData::setSuccessResponseHandlingConfig(const OAISAPODataDestinationProperties_successResponseHandlingConfig &success_response_handling_config) {
    m_success_response_handling_config = success_response_handling_config;
    m_success_response_handling_config_isSet = true;
}

bool OAIDestinationConnectorProperties_SAPOData::is_success_response_handling_config_Set() const{
    return m_success_response_handling_config_isSet;
}

bool OAIDestinationConnectorProperties_SAPOData::is_success_response_handling_config_Valid() const{
    return m_success_response_handling_config_isValid;
}

QList<QString> OAIDestinationConnectorProperties_SAPOData::getIdFieldNames() const {
    return m_id_field_names;
}
void OAIDestinationConnectorProperties_SAPOData::setIdFieldNames(const QList<QString> &id_field_names) {
    m_id_field_names = id_field_names;
    m_id_field_names_isSet = true;
}

bool OAIDestinationConnectorProperties_SAPOData::is_id_field_names_Set() const{
    return m_id_field_names_isSet;
}

bool OAIDestinationConnectorProperties_SAPOData::is_id_field_names_Valid() const{
    return m_id_field_names_isValid;
}

OAIErrorHandlingConfig OAIDestinationConnectorProperties_SAPOData::getErrorHandlingConfig() const {
    return m_error_handling_config;
}
void OAIDestinationConnectorProperties_SAPOData::setErrorHandlingConfig(const OAIErrorHandlingConfig &error_handling_config) {
    m_error_handling_config = error_handling_config;
    m_error_handling_config_isSet = true;
}

bool OAIDestinationConnectorProperties_SAPOData::is_error_handling_config_Set() const{
    return m_error_handling_config_isSet;
}

bool OAIDestinationConnectorProperties_SAPOData::is_error_handling_config_Valid() const{
    return m_error_handling_config_isValid;
}

OAIWriteOperationType OAIDestinationConnectorProperties_SAPOData::getWriteOperationType() const {
    return m_write_operation_type;
}
void OAIDestinationConnectorProperties_SAPOData::setWriteOperationType(const OAIWriteOperationType &write_operation_type) {
    m_write_operation_type = write_operation_type;
    m_write_operation_type_isSet = true;
}

bool OAIDestinationConnectorProperties_SAPOData::is_write_operation_type_Set() const{
    return m_write_operation_type_isSet;
}

bool OAIDestinationConnectorProperties_SAPOData::is_write_operation_type_Valid() const{
    return m_write_operation_type_isValid;
}

bool OAIDestinationConnectorProperties_SAPOData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_response_handling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_field_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_handling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_operation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationConnectorProperties_SAPOData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_path_isValid && true;
}

} // namespace OpenAPI
