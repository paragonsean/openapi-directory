/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnowflakeMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnowflakeMetadata::OAISnowflakeMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnowflakeMetadata::OAISnowflakeMetadata() {
    this->initializeModel();
}

OAISnowflakeMetadata::~OAISnowflakeMetadata() {}

void OAISnowflakeMetadata::initializeModel() {

    m_supported_regions_isSet = false;
    m_supported_regions_isValid = false;
}

void OAISnowflakeMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnowflakeMetadata::fromJsonObject(QJsonObject json) {

    m_supported_regions_isValid = ::OpenAPI::fromJsonValue(m_supported_regions, json[QString("supportedRegions")]);
    m_supported_regions_isSet = !json[QString("supportedRegions")].isNull() && m_supported_regions_isValid;
}

QString OAISnowflakeMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnowflakeMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_supported_regions.isSet()) {
        obj.insert(QString("supportedRegions"), ::OpenAPI::toJsonValue(m_supported_regions));
    }
    return obj;
}

QList OAISnowflakeMetadata::getSupportedRegions() const {
    return m_supported_regions;
}
void OAISnowflakeMetadata::setSupportedRegions(const QList &supported_regions) {
    m_supported_regions = supported_regions;
    m_supported_regions_isSet = true;
}

bool OAISnowflakeMetadata::is_supported_regions_Set() const{
    return m_supported_regions_isSet;
}

bool OAISnowflakeMetadata::is_supported_regions_Valid() const{
    return m_supported_regions_isValid;
}

bool OAISnowflakeMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_supported_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnowflakeMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
