/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftConnectorProfileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftConnectorProfileProperties::OAIRedshiftConnectorProfileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftConnectorProfileProperties::OAIRedshiftConnectorProfileProperties() {
    this->initializeModel();
}

OAIRedshiftConnectorProfileProperties::~OAIRedshiftConnectorProfileProperties() {}

void OAIRedshiftConnectorProfileProperties::initializeModel() {

    m_database_url_isSet = false;
    m_database_url_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_data_api_role_arn_isSet = false;
    m_data_api_role_arn_isValid = false;

    m_is_redshift_serverless_isSet = false;
    m_is_redshift_serverless_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_workgroup_name_isSet = false;
    m_workgroup_name_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;
}

void OAIRedshiftConnectorProfileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftConnectorProfileProperties::fromJsonObject(QJsonObject json) {

    m_database_url_isValid = ::OpenAPI::fromJsonValue(m_database_url, json[QString("databaseUrl")]);
    m_database_url_isSet = !json[QString("databaseUrl")].isNull() && m_database_url_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("bucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("bucketPrefix")].isNull() && m_bucket_prefix_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_data_api_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_api_role_arn, json[QString("dataApiRoleArn")]);
    m_data_api_role_arn_isSet = !json[QString("dataApiRoleArn")].isNull() && m_data_api_role_arn_isValid;

    m_is_redshift_serverless_isValid = ::OpenAPI::fromJsonValue(m_is_redshift_serverless, json[QString("isRedshiftServerless")]);
    m_is_redshift_serverless_isSet = !json[QString("isRedshiftServerless")].isNull() && m_is_redshift_serverless_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("clusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("clusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_workgroup_name_isValid = ::OpenAPI::fromJsonValue(m_workgroup_name, json[QString("workgroupName")]);
    m_workgroup_name_isSet = !json[QString("workgroupName")].isNull() && m_workgroup_name_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;
}

QString OAIRedshiftConnectorProfileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftConnectorProfileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_url_isSet) {
        obj.insert(QString("databaseUrl"), ::OpenAPI::toJsonValue(m_database_url));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("bucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_data_api_role_arn_isSet) {
        obj.insert(QString("dataApiRoleArn"), ::OpenAPI::toJsonValue(m_data_api_role_arn));
    }
    if (m_is_redshift_serverless_isSet) {
        obj.insert(QString("isRedshiftServerless"), ::OpenAPI::toJsonValue(m_is_redshift_serverless));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("clusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_workgroup_name_isSet) {
        obj.insert(QString("workgroupName"), ::OpenAPI::toJsonValue(m_workgroup_name));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    return obj;
}

QString OAIRedshiftConnectorProfileProperties::getDatabaseUrl() const {
    return m_database_url;
}
void OAIRedshiftConnectorProfileProperties::setDatabaseUrl(const QString &database_url) {
    m_database_url = database_url;
    m_database_url_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_database_url_Set() const{
    return m_database_url_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_database_url_Valid() const{
    return m_database_url_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getBucketName() const {
    return m_bucket_name;
}
void OAIRedshiftConnectorProfileProperties::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAIRedshiftConnectorProfileProperties::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getRoleArn() const {
    return m_role_arn;
}
void OAIRedshiftConnectorProfileProperties::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getDataApiRoleArn() const {
    return m_data_api_role_arn;
}
void OAIRedshiftConnectorProfileProperties::setDataApiRoleArn(const QString &data_api_role_arn) {
    m_data_api_role_arn = data_api_role_arn;
    m_data_api_role_arn_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_data_api_role_arn_Set() const{
    return m_data_api_role_arn_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_data_api_role_arn_Valid() const{
    return m_data_api_role_arn_isValid;
}

bool OAIRedshiftConnectorProfileProperties::getIsRedshiftServerless() const {
    return m_is_redshift_serverless;
}
void OAIRedshiftConnectorProfileProperties::setIsRedshiftServerless(const bool &is_redshift_serverless) {
    m_is_redshift_serverless = is_redshift_serverless;
    m_is_redshift_serverless_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_is_redshift_serverless_Set() const{
    return m_is_redshift_serverless_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_is_redshift_serverless_Valid() const{
    return m_is_redshift_serverless_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIRedshiftConnectorProfileProperties::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getWorkgroupName() const {
    return m_workgroup_name;
}
void OAIRedshiftConnectorProfileProperties::setWorkgroupName(const QString &workgroup_name) {
    m_workgroup_name = workgroup_name;
    m_workgroup_name_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_workgroup_name_Set() const{
    return m_workgroup_name_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_workgroup_name_Valid() const{
    return m_workgroup_name_isValid;
}

QString OAIRedshiftConnectorProfileProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIRedshiftConnectorProfileProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIRedshiftConnectorProfileProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIRedshiftConnectorProfileProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

bool OAIRedshiftConnectorProfileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_api_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_redshift_serverless_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workgroup_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftConnectorProfileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
