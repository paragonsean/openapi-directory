/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesforceConnectorOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesforceConnectorOperator::OAISalesforceConnectorOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesforceConnectorOperator::OAISalesforceConnectorOperator() {
    this->initializeModel();
}

OAISalesforceConnectorOperator::~OAISalesforceConnectorOperator() {}

void OAISalesforceConnectorOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISalesforceConnectorOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISalesforceConnectorOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROJECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::PROJECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LESS_THAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::LESS_THAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTAINS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::CONTAINS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GREATER_THAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::GREATER_THAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETWEEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::BETWEEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LESS_THAN_OR_EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::LESS_THAN_OR_EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GREATER_THAN_OR_EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::GREATER_THAN_OR_EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::NOT_EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDITION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::ADDITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MULTIPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::MULTIPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIVISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::DIVISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBTRACTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::SUBTRACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::MASK_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_FIRST_N", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::MASK_FIRST_N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_LAST_N", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::MASK_LAST_N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_NULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::VALIDATE_NON_NULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_ZERO", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::VALIDATE_NON_ZERO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_NEGATIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::VALIDATE_NON_NEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NUMERIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::VALIDATE_NUMERIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_OP", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceConnectorOperator::NO_OP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISalesforceConnectorOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISalesforceConnectorOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISalesforceConnectorOperator::PROJECTION:
            val = "PROJECTION";
            break;
        case eOAISalesforceConnectorOperator::LESS_THAN:
            val = "LESS_THAN";
            break;
        case eOAISalesforceConnectorOperator::CONTAINS:
            val = "CONTAINS";
            break;
        case eOAISalesforceConnectorOperator::GREATER_THAN:
            val = "GREATER_THAN";
            break;
        case eOAISalesforceConnectorOperator::BETWEEN:
            val = "BETWEEN";
            break;
        case eOAISalesforceConnectorOperator::LESS_THAN_OR_EQUAL_TO:
            val = "LESS_THAN_OR_EQUAL_TO";
            break;
        case eOAISalesforceConnectorOperator::GREATER_THAN_OR_EQUAL_TO:
            val = "GREATER_THAN_OR_EQUAL_TO";
            break;
        case eOAISalesforceConnectorOperator::EQUAL_TO:
            val = "EQUAL_TO";
            break;
        case eOAISalesforceConnectorOperator::NOT_EQUAL_TO:
            val = "NOT_EQUAL_TO";
            break;
        case eOAISalesforceConnectorOperator::ADDITION:
            val = "ADDITION";
            break;
        case eOAISalesforceConnectorOperator::MULTIPLICATION:
            val = "MULTIPLICATION";
            break;
        case eOAISalesforceConnectorOperator::DIVISION:
            val = "DIVISION";
            break;
        case eOAISalesforceConnectorOperator::SUBTRACTION:
            val = "SUBTRACTION";
            break;
        case eOAISalesforceConnectorOperator::MASK_ALL:
            val = "MASK_ALL";
            break;
        case eOAISalesforceConnectorOperator::MASK_FIRST_N:
            val = "MASK_FIRST_N";
            break;
        case eOAISalesforceConnectorOperator::MASK_LAST_N:
            val = "MASK_LAST_N";
            break;
        case eOAISalesforceConnectorOperator::VALIDATE_NON_NULL:
            val = "VALIDATE_NON_NULL";
            break;
        case eOAISalesforceConnectorOperator::VALIDATE_NON_ZERO:
            val = "VALIDATE_NON_ZERO";
            break;
        case eOAISalesforceConnectorOperator::VALIDATE_NON_NEGATIVE:
            val = "VALIDATE_NON_NEGATIVE";
            break;
        case eOAISalesforceConnectorOperator::VALIDATE_NUMERIC:
            val = "VALIDATE_NUMERIC";
            break;
        case eOAISalesforceConnectorOperator::NO_OP:
            val = "NO_OP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISalesforceConnectorOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISalesforceConnectorOperator::eOAISalesforceConnectorOperator OAISalesforceConnectorOperator::getValue() const {
    return m_value;
}

void OAISalesforceConnectorOperator::setValue(const OAISalesforceConnectorOperator::eOAISalesforceConnectorOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISalesforceConnectorOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAISalesforceConnectorOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
