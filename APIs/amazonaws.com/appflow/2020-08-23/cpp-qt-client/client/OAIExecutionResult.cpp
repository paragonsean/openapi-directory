/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionResult::OAIExecutionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionResult::OAIExecutionResult() {
    this->initializeModel();
}

OAIExecutionResult::~OAIExecutionResult() {}

void OAIExecutionResult::initializeModel() {

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_bytes_processed_isSet = false;
    m_bytes_processed_isValid = false;

    m_bytes_written_isSet = false;
    m_bytes_written_isValid = false;

    m_records_processed_isSet = false;
    m_records_processed_isValid = false;
}

void OAIExecutionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionResult::fromJsonObject(QJsonObject json) {

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_bytes_processed, json[QString("bytesProcessed")]);
    m_bytes_processed_isSet = !json[QString("bytesProcessed")].isNull() && m_bytes_processed_isValid;

    m_bytes_written_isValid = ::OpenAPI::fromJsonValue(m_bytes_written, json[QString("bytesWritten")]);
    m_bytes_written_isSet = !json[QString("bytesWritten")].isNull() && m_bytes_written_isValid;

    m_records_processed_isValid = ::OpenAPI::fromJsonValue(m_records_processed, json[QString("recordsProcessed")]);
    m_records_processed_isSet = !json[QString("recordsProcessed")].isNull() && m_records_processed_isValid;
}

QString OAIExecutionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_error_info.isSet()) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_bytes_processed_isSet) {
        obj.insert(QString("bytesProcessed"), ::OpenAPI::toJsonValue(m_bytes_processed));
    }
    if (m_bytes_written_isSet) {
        obj.insert(QString("bytesWritten"), ::OpenAPI::toJsonValue(m_bytes_written));
    }
    if (m_records_processed_isSet) {
        obj.insert(QString("recordsProcessed"), ::OpenAPI::toJsonValue(m_records_processed));
    }
    return obj;
}

OAIExecutionResult_errorInfo OAIExecutionResult::getErrorInfo() const {
    return m_error_info;
}
void OAIExecutionResult::setErrorInfo(const OAIExecutionResult_errorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIExecutionResult::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIExecutionResult::is_error_info_Valid() const{
    return m_error_info_isValid;
}

qint32 OAIExecutionResult::getBytesProcessed() const {
    return m_bytes_processed;
}
void OAIExecutionResult::setBytesProcessed(const qint32 &bytes_processed) {
    m_bytes_processed = bytes_processed;
    m_bytes_processed_isSet = true;
}

bool OAIExecutionResult::is_bytes_processed_Set() const{
    return m_bytes_processed_isSet;
}

bool OAIExecutionResult::is_bytes_processed_Valid() const{
    return m_bytes_processed_isValid;
}

qint32 OAIExecutionResult::getBytesWritten() const {
    return m_bytes_written;
}
void OAIExecutionResult::setBytesWritten(const qint32 &bytes_written) {
    m_bytes_written = bytes_written;
    m_bytes_written_isSet = true;
}

bool OAIExecutionResult::is_bytes_written_Set() const{
    return m_bytes_written_isSet;
}

bool OAIExecutionResult::is_bytes_written_Valid() const{
    return m_bytes_written_isValid;
}

qint32 OAIExecutionResult::getRecordsProcessed() const {
    return m_records_processed;
}
void OAIExecutionResult::setRecordsProcessed(const qint32 &records_processed) {
    m_records_processed = records_processed;
    m_records_processed_isSet = true;
}

bool OAIExecutionResult::is_records_processed_Set() const{
    return m_records_processed_isSet;
}

bool OAIExecutionResult::is_records_processed_Valid() const{
    return m_records_processed_isValid;
}

bool OAIExecutionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_written_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_processed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
