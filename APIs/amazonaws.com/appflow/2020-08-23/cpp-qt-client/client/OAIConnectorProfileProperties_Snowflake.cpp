/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorProfileProperties_Snowflake.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorProfileProperties_Snowflake::OAIConnectorProfileProperties_Snowflake(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorProfileProperties_Snowflake::OAIConnectorProfileProperties_Snowflake() {
    this->initializeModel();
}

OAIConnectorProfileProperties_Snowflake::~OAIConnectorProfileProperties_Snowflake() {}

void OAIConnectorProfileProperties_Snowflake::initializeModel() {

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;

    m_private_link_service_name_isSet = false;
    m_private_link_service_name_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIConnectorProfileProperties_Snowflake::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorProfileProperties_Snowflake::fromJsonObject(QJsonObject json) {

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("bucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("bucketPrefix")].isNull() && m_bucket_prefix_isValid;

    m_private_link_service_name_isValid = ::OpenAPI::fromJsonValue(m_private_link_service_name, json[QString("privateLinkServiceName")]);
    m_private_link_service_name_isSet = !json[QString("privateLinkServiceName")].isNull() && m_private_link_service_name_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorProfileProperties_Snowflake::asJsonObject() const {
    QJsonObject obj;
    if (m_warehouse_isSet) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("bucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    if (m_private_link_service_name_isSet) {
        obj.insert(QString("privateLinkServiceName"), ::OpenAPI::toJsonValue(m_private_link_service_name));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIConnectorProfileProperties_Snowflake::getWarehouse() const {
    return m_warehouse;
}
void OAIConnectorProfileProperties_Snowflake::setWarehouse(const QString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::getStage() const {
    return m_stage;
}
void OAIConnectorProfileProperties_Snowflake::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_stage_Valid() const{
    return m_stage_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::getBucketName() const {
    return m_bucket_name;
}
void OAIConnectorProfileProperties_Snowflake::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAIConnectorProfileProperties_Snowflake::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::getPrivateLinkServiceName() const {
    return m_private_link_service_name;
}
void OAIConnectorProfileProperties_Snowflake::setPrivateLinkServiceName(const QString &private_link_service_name) {
    m_private_link_service_name = private_link_service_name;
    m_private_link_service_name_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_private_link_service_name_Set() const{
    return m_private_link_service_name_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_private_link_service_name_Valid() const{
    return m_private_link_service_name_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::getAccountName() const {
    return m_account_name;
}
void OAIConnectorProfileProperties_Snowflake::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIConnectorProfileProperties_Snowflake::getRegion() const {
    return m_region;
}
void OAIConnectorProfileProperties_Snowflake::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIConnectorProfileProperties_Snowflake::is_region_Set() const{
    return m_region_isSet;
}

bool OAIConnectorProfileProperties_Snowflake::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIConnectorProfileProperties_Snowflake::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_warehouse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_link_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorProfileProperties_Snowflake::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_warehouse_isValid && m_stage_isValid && m_bucket_name_isValid && true;
}

} // namespace OpenAPI
