/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuth2Defaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuth2Defaults::OAIOAuth2Defaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuth2Defaults::OAIOAuth2Defaults() {
    this->initializeModel();
}

OAIOAuth2Defaults::~OAIOAuth2Defaults() {}

void OAIOAuth2Defaults::initializeModel() {

    m_oauth_scopes_isSet = false;
    m_oauth_scopes_isValid = false;

    m_token_urls_isSet = false;
    m_token_urls_isValid = false;

    m_auth_code_urls_isSet = false;
    m_auth_code_urls_isValid = false;

    m_oauth2_grant_types_supported_isSet = false;
    m_oauth2_grant_types_supported_isValid = false;

    m_oauth2_custom_properties_isSet = false;
    m_oauth2_custom_properties_isValid = false;
}

void OAIOAuth2Defaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuth2Defaults::fromJsonObject(QJsonObject json) {

    m_oauth_scopes_isValid = ::OpenAPI::fromJsonValue(m_oauth_scopes, json[QString("oauthScopes")]);
    m_oauth_scopes_isSet = !json[QString("oauthScopes")].isNull() && m_oauth_scopes_isValid;

    m_token_urls_isValid = ::OpenAPI::fromJsonValue(m_token_urls, json[QString("tokenUrls")]);
    m_token_urls_isSet = !json[QString("tokenUrls")].isNull() && m_token_urls_isValid;

    m_auth_code_urls_isValid = ::OpenAPI::fromJsonValue(m_auth_code_urls, json[QString("authCodeUrls")]);
    m_auth_code_urls_isSet = !json[QString("authCodeUrls")].isNull() && m_auth_code_urls_isValid;

    m_oauth2_grant_types_supported_isValid = ::OpenAPI::fromJsonValue(m_oauth2_grant_types_supported, json[QString("oauth2GrantTypesSupported")]);
    m_oauth2_grant_types_supported_isSet = !json[QString("oauth2GrantTypesSupported")].isNull() && m_oauth2_grant_types_supported_isValid;

    m_oauth2_custom_properties_isValid = ::OpenAPI::fromJsonValue(m_oauth2_custom_properties, json[QString("oauth2CustomProperties")]);
    m_oauth2_custom_properties_isSet = !json[QString("oauth2CustomProperties")].isNull() && m_oauth2_custom_properties_isValid;
}

QString OAIOAuth2Defaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuth2Defaults::asJsonObject() const {
    QJsonObject obj;
    if (m_oauth_scopes.isSet()) {
        obj.insert(QString("oauthScopes"), ::OpenAPI::toJsonValue(m_oauth_scopes));
    }
    if (m_token_urls.isSet()) {
        obj.insert(QString("tokenUrls"), ::OpenAPI::toJsonValue(m_token_urls));
    }
    if (m_auth_code_urls.isSet()) {
        obj.insert(QString("authCodeUrls"), ::OpenAPI::toJsonValue(m_auth_code_urls));
    }
    if (m_oauth2_grant_types_supported.isSet()) {
        obj.insert(QString("oauth2GrantTypesSupported"), ::OpenAPI::toJsonValue(m_oauth2_grant_types_supported));
    }
    if (m_oauth2_custom_properties.isSet()) {
        obj.insert(QString("oauth2CustomProperties"), ::OpenAPI::toJsonValue(m_oauth2_custom_properties));
    }
    return obj;
}

QList OAIOAuth2Defaults::getOauthScopes() const {
    return m_oauth_scopes;
}
void OAIOAuth2Defaults::setOauthScopes(const QList &oauth_scopes) {
    m_oauth_scopes = oauth_scopes;
    m_oauth_scopes_isSet = true;
}

bool OAIOAuth2Defaults::is_oauth_scopes_Set() const{
    return m_oauth_scopes_isSet;
}

bool OAIOAuth2Defaults::is_oauth_scopes_Valid() const{
    return m_oauth_scopes_isValid;
}

QList OAIOAuth2Defaults::getTokenUrls() const {
    return m_token_urls;
}
void OAIOAuth2Defaults::setTokenUrls(const QList &token_urls) {
    m_token_urls = token_urls;
    m_token_urls_isSet = true;
}

bool OAIOAuth2Defaults::is_token_urls_Set() const{
    return m_token_urls_isSet;
}

bool OAIOAuth2Defaults::is_token_urls_Valid() const{
    return m_token_urls_isValid;
}

QList OAIOAuth2Defaults::getAuthCodeUrls() const {
    return m_auth_code_urls;
}
void OAIOAuth2Defaults::setAuthCodeUrls(const QList &auth_code_urls) {
    m_auth_code_urls = auth_code_urls;
    m_auth_code_urls_isSet = true;
}

bool OAIOAuth2Defaults::is_auth_code_urls_Set() const{
    return m_auth_code_urls_isSet;
}

bool OAIOAuth2Defaults::is_auth_code_urls_Valid() const{
    return m_auth_code_urls_isValid;
}

QList OAIOAuth2Defaults::getOauth2GrantTypesSupported() const {
    return m_oauth2_grant_types_supported;
}
void OAIOAuth2Defaults::setOauth2GrantTypesSupported(const QList &oauth2_grant_types_supported) {
    m_oauth2_grant_types_supported = oauth2_grant_types_supported;
    m_oauth2_grant_types_supported_isSet = true;
}

bool OAIOAuth2Defaults::is_oauth2_grant_types_supported_Set() const{
    return m_oauth2_grant_types_supported_isSet;
}

bool OAIOAuth2Defaults::is_oauth2_grant_types_supported_Valid() const{
    return m_oauth2_grant_types_supported_isValid;
}

QList OAIOAuth2Defaults::getOauth2CustomProperties() const {
    return m_oauth2_custom_properties;
}
void OAIOAuth2Defaults::setOauth2CustomProperties(const QList &oauth2_custom_properties) {
    m_oauth2_custom_properties = oauth2_custom_properties;
    m_oauth2_custom_properties_isSet = true;
}

bool OAIOAuth2Defaults::is_oauth2_custom_properties_Set() const{
    return m_oauth2_custom_properties_isSet;
}

bool OAIOAuth2Defaults::is_oauth2_custom_properties_Valid() const{
    return m_oauth2_custom_properties_isValid;
}

bool OAIOAuth2Defaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oauth_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_grant_types_supported.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_custom_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuth2Defaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
