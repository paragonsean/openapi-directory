/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionRecord::OAIExecutionRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionRecord::OAIExecutionRecord() {
    this->initializeModel();
}

OAIExecutionRecord::~OAIExecutionRecord() {}

void OAIExecutionRecord::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_execution_status_isSet = false;
    m_execution_status_isValid = false;

    m_execution_result_isSet = false;
    m_execution_result_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_data_pull_start_time_isSet = false;
    m_data_pull_start_time_isValid = false;

    m_data_pull_end_time_isSet = false;
    m_data_pull_end_time_isValid = false;

    m_metadata_catalog_details_isSet = false;
    m_metadata_catalog_details_isValid = false;
}

void OAIExecutionRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionRecord::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_execution_status_isValid = ::OpenAPI::fromJsonValue(m_execution_status, json[QString("executionStatus")]);
    m_execution_status_isSet = !json[QString("executionStatus")].isNull() && m_execution_status_isValid;

    m_execution_result_isValid = ::OpenAPI::fromJsonValue(m_execution_result, json[QString("executionResult")]);
    m_execution_result_isSet = !json[QString("executionResult")].isNull() && m_execution_result_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_data_pull_start_time_isValid = ::OpenAPI::fromJsonValue(m_data_pull_start_time, json[QString("dataPullStartTime")]);
    m_data_pull_start_time_isSet = !json[QString("dataPullStartTime")].isNull() && m_data_pull_start_time_isValid;

    m_data_pull_end_time_isValid = ::OpenAPI::fromJsonValue(m_data_pull_end_time, json[QString("dataPullEndTime")]);
    m_data_pull_end_time_isSet = !json[QString("dataPullEndTime")].isNull() && m_data_pull_end_time_isValid;

    m_metadata_catalog_details_isValid = ::OpenAPI::fromJsonValue(m_metadata_catalog_details, json[QString("metadataCatalogDetails")]);
    m_metadata_catalog_details_isSet = !json[QString("metadataCatalogDetails")].isNull() && m_metadata_catalog_details_isValid;
}

QString OAIExecutionRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_execution_status.isSet()) {
        obj.insert(QString("executionStatus"), ::OpenAPI::toJsonValue(m_execution_status));
    }
    if (m_execution_result.isSet()) {
        obj.insert(QString("executionResult"), ::OpenAPI::toJsonValue(m_execution_result));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_data_pull_start_time_isSet) {
        obj.insert(QString("dataPullStartTime"), ::OpenAPI::toJsonValue(m_data_pull_start_time));
    }
    if (m_data_pull_end_time_isSet) {
        obj.insert(QString("dataPullEndTime"), ::OpenAPI::toJsonValue(m_data_pull_end_time));
    }
    if (m_metadata_catalog_details.isSet()) {
        obj.insert(QString("metadataCatalogDetails"), ::OpenAPI::toJsonValue(m_metadata_catalog_details));
    }
    return obj;
}

QString OAIExecutionRecord::getExecutionId() const {
    return m_execution_id;
}
void OAIExecutionRecord::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIExecutionRecord::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIExecutionRecord::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

OAIExecutionStatus OAIExecutionRecord::getExecutionStatus() const {
    return m_execution_status;
}
void OAIExecutionRecord::setExecutionStatus(const OAIExecutionStatus &execution_status) {
    m_execution_status = execution_status;
    m_execution_status_isSet = true;
}

bool OAIExecutionRecord::is_execution_status_Set() const{
    return m_execution_status_isSet;
}

bool OAIExecutionRecord::is_execution_status_Valid() const{
    return m_execution_status_isValid;
}

OAIExecutionRecord_executionResult OAIExecutionRecord::getExecutionResult() const {
    return m_execution_result;
}
void OAIExecutionRecord::setExecutionResult(const OAIExecutionRecord_executionResult &execution_result) {
    m_execution_result = execution_result;
    m_execution_result_isSet = true;
}

bool OAIExecutionRecord::is_execution_result_Set() const{
    return m_execution_result_isSet;
}

bool OAIExecutionRecord::is_execution_result_Valid() const{
    return m_execution_result_isValid;
}

QDateTime OAIExecutionRecord::getStartedAt() const {
    return m_started_at;
}
void OAIExecutionRecord::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIExecutionRecord::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIExecutionRecord::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QDateTime OAIExecutionRecord::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIExecutionRecord::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIExecutionRecord::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIExecutionRecord::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QDateTime OAIExecutionRecord::getDataPullStartTime() const {
    return m_data_pull_start_time;
}
void OAIExecutionRecord::setDataPullStartTime(const QDateTime &data_pull_start_time) {
    m_data_pull_start_time = data_pull_start_time;
    m_data_pull_start_time_isSet = true;
}

bool OAIExecutionRecord::is_data_pull_start_time_Set() const{
    return m_data_pull_start_time_isSet;
}

bool OAIExecutionRecord::is_data_pull_start_time_Valid() const{
    return m_data_pull_start_time_isValid;
}

QDateTime OAIExecutionRecord::getDataPullEndTime() const {
    return m_data_pull_end_time;
}
void OAIExecutionRecord::setDataPullEndTime(const QDateTime &data_pull_end_time) {
    m_data_pull_end_time = data_pull_end_time;
    m_data_pull_end_time_isSet = true;
}

bool OAIExecutionRecord::is_data_pull_end_time_Set() const{
    return m_data_pull_end_time_isSet;
}

bool OAIExecutionRecord::is_data_pull_end_time_Valid() const{
    return m_data_pull_end_time_isValid;
}

QList OAIExecutionRecord::getMetadataCatalogDetails() const {
    return m_metadata_catalog_details;
}
void OAIExecutionRecord::setMetadataCatalogDetails(const QList &metadata_catalog_details) {
    m_metadata_catalog_details = metadata_catalog_details;
    m_metadata_catalog_details_isSet = true;
}

bool OAIExecutionRecord::is_metadata_catalog_details_Set() const{
    return m_metadata_catalog_details_isSet;
}

bool OAIExecutionRecord::is_metadata_catalog_details_Valid() const{
    return m_metadata_catalog_details_isValid;
}

bool OAIExecutionRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pull_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pull_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_catalog_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
