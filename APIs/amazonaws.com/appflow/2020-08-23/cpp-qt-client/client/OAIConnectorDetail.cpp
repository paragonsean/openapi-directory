/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorDetail::OAIConnectorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorDetail::OAIConnectorDetail() {
    this->initializeModel();
}

OAIConnectorDetail::~OAIConnectorDetail() {}

void OAIConnectorDetail::initializeModel() {

    m_connector_description_isSet = false;
    m_connector_description_isValid = false;

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_connector_owner_isSet = false;
    m_connector_owner_isValid = false;

    m_connector_version_isSet = false;
    m_connector_version_isValid = false;

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_connector_label_isSet = false;
    m_connector_label_isValid = false;

    m_registered_at_isSet = false;
    m_registered_at_isValid = false;

    m_registered_by_isSet = false;
    m_registered_by_isValid = false;

    m_connector_provisioning_type_isSet = false;
    m_connector_provisioning_type_isValid = false;

    m_connector_modes_isSet = false;
    m_connector_modes_isValid = false;

    m_supported_data_transfer_types_isSet = false;
    m_supported_data_transfer_types_isValid = false;
}

void OAIConnectorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorDetail::fromJsonObject(QJsonObject json) {

    m_connector_description_isValid = ::OpenAPI::fromJsonValue(m_connector_description, json[QString("connectorDescription")]);
    m_connector_description_isSet = !json[QString("connectorDescription")].isNull() && m_connector_description_isValid;

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("connectorName")]);
    m_connector_name_isSet = !json[QString("connectorName")].isNull() && m_connector_name_isValid;

    m_connector_owner_isValid = ::OpenAPI::fromJsonValue(m_connector_owner, json[QString("connectorOwner")]);
    m_connector_owner_isSet = !json[QString("connectorOwner")].isNull() && m_connector_owner_isValid;

    m_connector_version_isValid = ::OpenAPI::fromJsonValue(m_connector_version, json[QString("connectorVersion")]);
    m_connector_version_isSet = !json[QString("connectorVersion")].isNull() && m_connector_version_isValid;

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("applicationType")]);
    m_application_type_isSet = !json[QString("applicationType")].isNull() && m_application_type_isValid;

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("connectorType")]);
    m_connector_type_isSet = !json[QString("connectorType")].isNull() && m_connector_type_isValid;

    m_connector_label_isValid = ::OpenAPI::fromJsonValue(m_connector_label, json[QString("connectorLabel")]);
    m_connector_label_isSet = !json[QString("connectorLabel")].isNull() && m_connector_label_isValid;

    m_registered_at_isValid = ::OpenAPI::fromJsonValue(m_registered_at, json[QString("registeredAt")]);
    m_registered_at_isSet = !json[QString("registeredAt")].isNull() && m_registered_at_isValid;

    m_registered_by_isValid = ::OpenAPI::fromJsonValue(m_registered_by, json[QString("registeredBy")]);
    m_registered_by_isSet = !json[QString("registeredBy")].isNull() && m_registered_by_isValid;

    m_connector_provisioning_type_isValid = ::OpenAPI::fromJsonValue(m_connector_provisioning_type, json[QString("connectorProvisioningType")]);
    m_connector_provisioning_type_isSet = !json[QString("connectorProvisioningType")].isNull() && m_connector_provisioning_type_isValid;

    m_connector_modes_isValid = ::OpenAPI::fromJsonValue(m_connector_modes, json[QString("connectorModes")]);
    m_connector_modes_isSet = !json[QString("connectorModes")].isNull() && m_connector_modes_isValid;

    m_supported_data_transfer_types_isValid = ::OpenAPI::fromJsonValue(m_supported_data_transfer_types, json[QString("supportedDataTransferTypes")]);
    m_supported_data_transfer_types_isSet = !json[QString("supportedDataTransferTypes")].isNull() && m_supported_data_transfer_types_isValid;
}

QString OAIConnectorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_description_isSet) {
        obj.insert(QString("connectorDescription"), ::OpenAPI::toJsonValue(m_connector_description));
    }
    if (m_connector_name_isSet) {
        obj.insert(QString("connectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_connector_owner_isSet) {
        obj.insert(QString("connectorOwner"), ::OpenAPI::toJsonValue(m_connector_owner));
    }
    if (m_connector_version_isSet) {
        obj.insert(QString("connectorVersion"), ::OpenAPI::toJsonValue(m_connector_version));
    }
    if (m_application_type_isSet) {
        obj.insert(QString("applicationType"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_connector_type.isSet()) {
        obj.insert(QString("connectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_connector_label_isSet) {
        obj.insert(QString("connectorLabel"), ::OpenAPI::toJsonValue(m_connector_label));
    }
    if (m_registered_at_isSet) {
        obj.insert(QString("registeredAt"), ::OpenAPI::toJsonValue(m_registered_at));
    }
    if (m_registered_by_isSet) {
        obj.insert(QString("registeredBy"), ::OpenAPI::toJsonValue(m_registered_by));
    }
    if (m_connector_provisioning_type.isSet()) {
        obj.insert(QString("connectorProvisioningType"), ::OpenAPI::toJsonValue(m_connector_provisioning_type));
    }
    if (m_connector_modes.isSet()) {
        obj.insert(QString("connectorModes"), ::OpenAPI::toJsonValue(m_connector_modes));
    }
    if (m_supported_data_transfer_types.isSet()) {
        obj.insert(QString("supportedDataTransferTypes"), ::OpenAPI::toJsonValue(m_supported_data_transfer_types));
    }
    return obj;
}

QString OAIConnectorDetail::getConnectorDescription() const {
    return m_connector_description;
}
void OAIConnectorDetail::setConnectorDescription(const QString &connector_description) {
    m_connector_description = connector_description;
    m_connector_description_isSet = true;
}

bool OAIConnectorDetail::is_connector_description_Set() const{
    return m_connector_description_isSet;
}

bool OAIConnectorDetail::is_connector_description_Valid() const{
    return m_connector_description_isValid;
}

QString OAIConnectorDetail::getConnectorName() const {
    return m_connector_name;
}
void OAIConnectorDetail::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIConnectorDetail::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIConnectorDetail::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

QString OAIConnectorDetail::getConnectorOwner() const {
    return m_connector_owner;
}
void OAIConnectorDetail::setConnectorOwner(const QString &connector_owner) {
    m_connector_owner = connector_owner;
    m_connector_owner_isSet = true;
}

bool OAIConnectorDetail::is_connector_owner_Set() const{
    return m_connector_owner_isSet;
}

bool OAIConnectorDetail::is_connector_owner_Valid() const{
    return m_connector_owner_isValid;
}

QString OAIConnectorDetail::getConnectorVersion() const {
    return m_connector_version;
}
void OAIConnectorDetail::setConnectorVersion(const QString &connector_version) {
    m_connector_version = connector_version;
    m_connector_version_isSet = true;
}

bool OAIConnectorDetail::is_connector_version_Set() const{
    return m_connector_version_isSet;
}

bool OAIConnectorDetail::is_connector_version_Valid() const{
    return m_connector_version_isValid;
}

QString OAIConnectorDetail::getApplicationType() const {
    return m_application_type;
}
void OAIConnectorDetail::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAIConnectorDetail::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAIConnectorDetail::is_application_type_Valid() const{
    return m_application_type_isValid;
}

OAIConnectorType OAIConnectorDetail::getConnectorType() const {
    return m_connector_type;
}
void OAIConnectorDetail::setConnectorType(const OAIConnectorType &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAIConnectorDetail::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAIConnectorDetail::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

QString OAIConnectorDetail::getConnectorLabel() const {
    return m_connector_label;
}
void OAIConnectorDetail::setConnectorLabel(const QString &connector_label) {
    m_connector_label = connector_label;
    m_connector_label_isSet = true;
}

bool OAIConnectorDetail::is_connector_label_Set() const{
    return m_connector_label_isSet;
}

bool OAIConnectorDetail::is_connector_label_Valid() const{
    return m_connector_label_isValid;
}

QDateTime OAIConnectorDetail::getRegisteredAt() const {
    return m_registered_at;
}
void OAIConnectorDetail::setRegisteredAt(const QDateTime &registered_at) {
    m_registered_at = registered_at;
    m_registered_at_isSet = true;
}

bool OAIConnectorDetail::is_registered_at_Set() const{
    return m_registered_at_isSet;
}

bool OAIConnectorDetail::is_registered_at_Valid() const{
    return m_registered_at_isValid;
}

QString OAIConnectorDetail::getRegisteredBy() const {
    return m_registered_by;
}
void OAIConnectorDetail::setRegisteredBy(const QString &registered_by) {
    m_registered_by = registered_by;
    m_registered_by_isSet = true;
}

bool OAIConnectorDetail::is_registered_by_Set() const{
    return m_registered_by_isSet;
}

bool OAIConnectorDetail::is_registered_by_Valid() const{
    return m_registered_by_isValid;
}

OAIConnectorProvisioningType OAIConnectorDetail::getConnectorProvisioningType() const {
    return m_connector_provisioning_type;
}
void OAIConnectorDetail::setConnectorProvisioningType(const OAIConnectorProvisioningType &connector_provisioning_type) {
    m_connector_provisioning_type = connector_provisioning_type;
    m_connector_provisioning_type_isSet = true;
}

bool OAIConnectorDetail::is_connector_provisioning_type_Set() const{
    return m_connector_provisioning_type_isSet;
}

bool OAIConnectorDetail::is_connector_provisioning_type_Valid() const{
    return m_connector_provisioning_type_isValid;
}

QList OAIConnectorDetail::getConnectorModes() const {
    return m_connector_modes;
}
void OAIConnectorDetail::setConnectorModes(const QList &connector_modes) {
    m_connector_modes = connector_modes;
    m_connector_modes_isSet = true;
}

bool OAIConnectorDetail::is_connector_modes_Set() const{
    return m_connector_modes_isSet;
}

bool OAIConnectorDetail::is_connector_modes_Valid() const{
    return m_connector_modes_isValid;
}

QList OAIConnectorDetail::getSupportedDataTransferTypes() const {
    return m_supported_data_transfer_types;
}
void OAIConnectorDetail::setSupportedDataTransferTypes(const QList &supported_data_transfer_types) {
    m_supported_data_transfer_types = supported_data_transfer_types;
    m_supported_data_transfer_types_isSet = true;
}

bool OAIConnectorDetail::is_supported_data_transfer_types_Set() const{
    return m_supported_data_transfer_types_isSet;
}

bool OAIConnectorDetail::is_supported_data_transfer_types_Valid() const{
    return m_supported_data_transfer_types_isValid;
}

bool OAIConnectorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_provisioning_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_transfer_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
