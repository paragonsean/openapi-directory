/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorRuntimeSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorRuntimeSetting::OAIConnectorRuntimeSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorRuntimeSetting::OAIConnectorRuntimeSetting() {
    this->initializeModel();
}

OAIConnectorRuntimeSetting::~OAIConnectorRuntimeSetting() {}

void OAIConnectorRuntimeSetting::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_connector_supplied_value_options_isSet = false;
    m_connector_supplied_value_options_isValid = false;
}

void OAIConnectorRuntimeSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorRuntimeSetting::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_connector_supplied_value_options_isValid = ::OpenAPI::fromJsonValue(m_connector_supplied_value_options, json[QString("connectorSuppliedValueOptions")]);
    m_connector_supplied_value_options_isSet = !json[QString("connectorSuppliedValueOptions")].isNull() && m_connector_supplied_value_options_isValid;
}

QString OAIConnectorRuntimeSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorRuntimeSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_connector_supplied_value_options.isSet()) {
        obj.insert(QString("connectorSuppliedValueOptions"), ::OpenAPI::toJsonValue(m_connector_supplied_value_options));
    }
    return obj;
}

QString OAIConnectorRuntimeSetting::getKey() const {
    return m_key;
}
void OAIConnectorRuntimeSetting::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_key_Set() const{
    return m_key_isSet;
}

bool OAIConnectorRuntimeSetting::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIConnectorRuntimeSetting::getDataType() const {
    return m_data_type;
}
void OAIConnectorRuntimeSetting::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIConnectorRuntimeSetting::is_data_type_Valid() const{
    return m_data_type_isValid;
}

bool OAIConnectorRuntimeSetting::getIsRequired() const {
    return m_is_required;
}
void OAIConnectorRuntimeSetting::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIConnectorRuntimeSetting::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QString OAIConnectorRuntimeSetting::getLabel() const {
    return m_label;
}
void OAIConnectorRuntimeSetting::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_label_Set() const{
    return m_label_isSet;
}

bool OAIConnectorRuntimeSetting::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIConnectorRuntimeSetting::getDescription() const {
    return m_description;
}
void OAIConnectorRuntimeSetting::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnectorRuntimeSetting::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConnectorRuntimeSetting::getScope() const {
    return m_scope;
}
void OAIConnectorRuntimeSetting::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIConnectorRuntimeSetting::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAIConnectorRuntimeSetting::getConnectorSuppliedValueOptions() const {
    return m_connector_supplied_value_options;
}
void OAIConnectorRuntimeSetting::setConnectorSuppliedValueOptions(const QList &connector_supplied_value_options) {
    m_connector_supplied_value_options = connector_supplied_value_options;
    m_connector_supplied_value_options_isSet = true;
}

bool OAIConnectorRuntimeSetting::is_connector_supplied_value_options_Set() const{
    return m_connector_supplied_value_options_isSet;
}

bool OAIConnectorRuntimeSetting::is_connector_supplied_value_options_Valid() const{
    return m_connector_supplied_value_options_isValid;
}

bool OAIConnectorRuntimeSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_supplied_value_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorRuntimeSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
