/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperatorPropertiesKeys.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperatorPropertiesKeys::OAIOperatorPropertiesKeys(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperatorPropertiesKeys::OAIOperatorPropertiesKeys() {
    this->initializeModel();
}

OAIOperatorPropertiesKeys::~OAIOperatorPropertiesKeys() {}

void OAIOperatorPropertiesKeys::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperatorPropertiesKeys::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperatorPropertiesKeys::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::VALUES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::DATA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPPER_BOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::UPPER_BOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOWER_BOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::LOWER_BOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOURCE_DATA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::SOURCE_DATA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DESTINATION_DATA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::DESTINATION_DATA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_ACTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::VALIDATION_ACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::MASK_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::MASK_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRUNCATE_LENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::TRUNCATE_LENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MATH_OPERATION_FIELDS_ORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::MATH_OPERATION_FIELDS_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONCAT_FORMAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::CONCAT_FORMAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBFIELD_CATEGORY_MAP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::SUBFIELD_CATEGORY_MAP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXCLUDE_SOURCE_FIELDS_LIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::EXCLUDE_SOURCE_FIELDS_LIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCLUDE_NEW_FIELDS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::INCLUDE_NEW_FIELDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORDERED_PARTITION_KEYS_LIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperatorPropertiesKeys::ORDERED_PARTITION_KEYS_LIST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperatorPropertiesKeys::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperatorPropertiesKeys::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperatorPropertiesKeys::VALUE:
            val = "VALUE";
            break;
        case eOAIOperatorPropertiesKeys::VALUES:
            val = "VALUES";
            break;
        case eOAIOperatorPropertiesKeys::DATA_TYPE:
            val = "DATA_TYPE";
            break;
        case eOAIOperatorPropertiesKeys::UPPER_BOUND:
            val = "UPPER_BOUND";
            break;
        case eOAIOperatorPropertiesKeys::LOWER_BOUND:
            val = "LOWER_BOUND";
            break;
        case eOAIOperatorPropertiesKeys::SOURCE_DATA_TYPE:
            val = "SOURCE_DATA_TYPE";
            break;
        case eOAIOperatorPropertiesKeys::DESTINATION_DATA_TYPE:
            val = "DESTINATION_DATA_TYPE";
            break;
        case eOAIOperatorPropertiesKeys::VALIDATION_ACTION:
            val = "VALIDATION_ACTION";
            break;
        case eOAIOperatorPropertiesKeys::MASK_VALUE:
            val = "MASK_VALUE";
            break;
        case eOAIOperatorPropertiesKeys::MASK_LENGTH:
            val = "MASK_LENGTH";
            break;
        case eOAIOperatorPropertiesKeys::TRUNCATE_LENGTH:
            val = "TRUNCATE_LENGTH";
            break;
        case eOAIOperatorPropertiesKeys::MATH_OPERATION_FIELDS_ORDER:
            val = "MATH_OPERATION_FIELDS_ORDER";
            break;
        case eOAIOperatorPropertiesKeys::CONCAT_FORMAT:
            val = "CONCAT_FORMAT";
            break;
        case eOAIOperatorPropertiesKeys::SUBFIELD_CATEGORY_MAP:
            val = "SUBFIELD_CATEGORY_MAP";
            break;
        case eOAIOperatorPropertiesKeys::EXCLUDE_SOURCE_FIELDS_LIST:
            val = "EXCLUDE_SOURCE_FIELDS_LIST";
            break;
        case eOAIOperatorPropertiesKeys::INCLUDE_NEW_FIELDS:
            val = "INCLUDE_NEW_FIELDS";
            break;
        case eOAIOperatorPropertiesKeys::ORDERED_PARTITION_KEYS_LIST:
            val = "ORDERED_PARTITION_KEYS_LIST";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperatorPropertiesKeys::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperatorPropertiesKeys::eOAIOperatorPropertiesKeys OAIOperatorPropertiesKeys::getValue() const {
    return m_value;
}

void OAIOperatorPropertiesKeys::setValue(const OAIOperatorPropertiesKeys::eOAIOperatorPropertiesKeys& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperatorPropertiesKeys::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperatorPropertiesKeys::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
