/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorConfiguration::OAIConnectorConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorConfiguration::OAIConnectorConfiguration() {
    this->initializeModel();
}

OAIConnectorConfiguration::~OAIConnectorConfiguration() {}

void OAIConnectorConfiguration::initializeModel() {

    m_can_use_as_source_isSet = false;
    m_can_use_as_source_isValid = false;

    m_can_use_as_destination_isSet = false;
    m_can_use_as_destination_isValid = false;

    m_supported_destination_connectors_isSet = false;
    m_supported_destination_connectors_isValid = false;

    m_supported_scheduling_frequencies_isSet = false;
    m_supported_scheduling_frequencies_isValid = false;

    m_is_private_link_enabled_isSet = false;
    m_is_private_link_enabled_isValid = false;

    m_is_private_link_endpoint_url_required_isSet = false;
    m_is_private_link_endpoint_url_required_isValid = false;

    m_supported_trigger_types_isSet = false;
    m_supported_trigger_types_isValid = false;

    m_connector_metadata_isSet = false;
    m_connector_metadata_isValid = false;

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_connector_label_isSet = false;
    m_connector_label_isValid = false;

    m_connector_description_isSet = false;
    m_connector_description_isValid = false;

    m_connector_owner_isSet = false;
    m_connector_owner_isValid = false;

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_connector_version_isSet = false;
    m_connector_version_isValid = false;

    m_connector_arn_isSet = false;
    m_connector_arn_isValid = false;

    m_connector_modes_isSet = false;
    m_connector_modes_isValid = false;

    m_authentication_config_isSet = false;
    m_authentication_config_isValid = false;

    m_connector_runtime_settings_isSet = false;
    m_connector_runtime_settings_isValid = false;

    m_supported_api_versions_isSet = false;
    m_supported_api_versions_isValid = false;

    m_supported_operators_isSet = false;
    m_supported_operators_isValid = false;

    m_supported_write_operations_isSet = false;
    m_supported_write_operations_isValid = false;

    m_connector_provisioning_type_isSet = false;
    m_connector_provisioning_type_isValid = false;

    m_connector_provisioning_config_isSet = false;
    m_connector_provisioning_config_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_registered_at_isSet = false;
    m_registered_at_isValid = false;

    m_registered_by_isSet = false;
    m_registered_by_isValid = false;

    m_supported_data_transfer_types_isSet = false;
    m_supported_data_transfer_types_isValid = false;

    m_supported_data_transfer_apis_isSet = false;
    m_supported_data_transfer_apis_isValid = false;
}

void OAIConnectorConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorConfiguration::fromJsonObject(QJsonObject json) {

    m_can_use_as_source_isValid = ::OpenAPI::fromJsonValue(m_can_use_as_source, json[QString("canUseAsSource")]);
    m_can_use_as_source_isSet = !json[QString("canUseAsSource")].isNull() && m_can_use_as_source_isValid;

    m_can_use_as_destination_isValid = ::OpenAPI::fromJsonValue(m_can_use_as_destination, json[QString("canUseAsDestination")]);
    m_can_use_as_destination_isSet = !json[QString("canUseAsDestination")].isNull() && m_can_use_as_destination_isValid;

    m_supported_destination_connectors_isValid = ::OpenAPI::fromJsonValue(m_supported_destination_connectors, json[QString("supportedDestinationConnectors")]);
    m_supported_destination_connectors_isSet = !json[QString("supportedDestinationConnectors")].isNull() && m_supported_destination_connectors_isValid;

    m_supported_scheduling_frequencies_isValid = ::OpenAPI::fromJsonValue(m_supported_scheduling_frequencies, json[QString("supportedSchedulingFrequencies")]);
    m_supported_scheduling_frequencies_isSet = !json[QString("supportedSchedulingFrequencies")].isNull() && m_supported_scheduling_frequencies_isValid;

    m_is_private_link_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_private_link_enabled, json[QString("isPrivateLinkEnabled")]);
    m_is_private_link_enabled_isSet = !json[QString("isPrivateLinkEnabled")].isNull() && m_is_private_link_enabled_isValid;

    m_is_private_link_endpoint_url_required_isValid = ::OpenAPI::fromJsonValue(m_is_private_link_endpoint_url_required, json[QString("isPrivateLinkEndpointUrlRequired")]);
    m_is_private_link_endpoint_url_required_isSet = !json[QString("isPrivateLinkEndpointUrlRequired")].isNull() && m_is_private_link_endpoint_url_required_isValid;

    m_supported_trigger_types_isValid = ::OpenAPI::fromJsonValue(m_supported_trigger_types, json[QString("supportedTriggerTypes")]);
    m_supported_trigger_types_isSet = !json[QString("supportedTriggerTypes")].isNull() && m_supported_trigger_types_isValid;

    m_connector_metadata_isValid = ::OpenAPI::fromJsonValue(m_connector_metadata, json[QString("connectorMetadata")]);
    m_connector_metadata_isSet = !json[QString("connectorMetadata")].isNull() && m_connector_metadata_isValid;

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("connectorType")]);
    m_connector_type_isSet = !json[QString("connectorType")].isNull() && m_connector_type_isValid;

    m_connector_label_isValid = ::OpenAPI::fromJsonValue(m_connector_label, json[QString("connectorLabel")]);
    m_connector_label_isSet = !json[QString("connectorLabel")].isNull() && m_connector_label_isValid;

    m_connector_description_isValid = ::OpenAPI::fromJsonValue(m_connector_description, json[QString("connectorDescription")]);
    m_connector_description_isSet = !json[QString("connectorDescription")].isNull() && m_connector_description_isValid;

    m_connector_owner_isValid = ::OpenAPI::fromJsonValue(m_connector_owner, json[QString("connectorOwner")]);
    m_connector_owner_isSet = !json[QString("connectorOwner")].isNull() && m_connector_owner_isValid;

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("connectorName")]);
    m_connector_name_isSet = !json[QString("connectorName")].isNull() && m_connector_name_isValid;

    m_connector_version_isValid = ::OpenAPI::fromJsonValue(m_connector_version, json[QString("connectorVersion")]);
    m_connector_version_isSet = !json[QString("connectorVersion")].isNull() && m_connector_version_isValid;

    m_connector_arn_isValid = ::OpenAPI::fromJsonValue(m_connector_arn, json[QString("connectorArn")]);
    m_connector_arn_isSet = !json[QString("connectorArn")].isNull() && m_connector_arn_isValid;

    m_connector_modes_isValid = ::OpenAPI::fromJsonValue(m_connector_modes, json[QString("connectorModes")]);
    m_connector_modes_isSet = !json[QString("connectorModes")].isNull() && m_connector_modes_isValid;

    m_authentication_config_isValid = ::OpenAPI::fromJsonValue(m_authentication_config, json[QString("authenticationConfig")]);
    m_authentication_config_isSet = !json[QString("authenticationConfig")].isNull() && m_authentication_config_isValid;

    m_connector_runtime_settings_isValid = ::OpenAPI::fromJsonValue(m_connector_runtime_settings, json[QString("connectorRuntimeSettings")]);
    m_connector_runtime_settings_isSet = !json[QString("connectorRuntimeSettings")].isNull() && m_connector_runtime_settings_isValid;

    m_supported_api_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_api_versions, json[QString("supportedApiVersions")]);
    m_supported_api_versions_isSet = !json[QString("supportedApiVersions")].isNull() && m_supported_api_versions_isValid;

    m_supported_operators_isValid = ::OpenAPI::fromJsonValue(m_supported_operators, json[QString("supportedOperators")]);
    m_supported_operators_isSet = !json[QString("supportedOperators")].isNull() && m_supported_operators_isValid;

    m_supported_write_operations_isValid = ::OpenAPI::fromJsonValue(m_supported_write_operations, json[QString("supportedWriteOperations")]);
    m_supported_write_operations_isSet = !json[QString("supportedWriteOperations")].isNull() && m_supported_write_operations_isValid;

    m_connector_provisioning_type_isValid = ::OpenAPI::fromJsonValue(m_connector_provisioning_type, json[QString("connectorProvisioningType")]);
    m_connector_provisioning_type_isSet = !json[QString("connectorProvisioningType")].isNull() && m_connector_provisioning_type_isValid;

    m_connector_provisioning_config_isValid = ::OpenAPI::fromJsonValue(m_connector_provisioning_config, json[QString("connectorProvisioningConfig")]);
    m_connector_provisioning_config_isSet = !json[QString("connectorProvisioningConfig")].isNull() && m_connector_provisioning_config_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoURL")]);
    m_logo_url_isSet = !json[QString("logoURL")].isNull() && m_logo_url_isValid;

    m_registered_at_isValid = ::OpenAPI::fromJsonValue(m_registered_at, json[QString("registeredAt")]);
    m_registered_at_isSet = !json[QString("registeredAt")].isNull() && m_registered_at_isValid;

    m_registered_by_isValid = ::OpenAPI::fromJsonValue(m_registered_by, json[QString("registeredBy")]);
    m_registered_by_isSet = !json[QString("registeredBy")].isNull() && m_registered_by_isValid;

    m_supported_data_transfer_types_isValid = ::OpenAPI::fromJsonValue(m_supported_data_transfer_types, json[QString("supportedDataTransferTypes")]);
    m_supported_data_transfer_types_isSet = !json[QString("supportedDataTransferTypes")].isNull() && m_supported_data_transfer_types_isValid;

    m_supported_data_transfer_apis_isValid = ::OpenAPI::fromJsonValue(m_supported_data_transfer_apis, json[QString("supportedDataTransferApis")]);
    m_supported_data_transfer_apis_isSet = !json[QString("supportedDataTransferApis")].isNull() && m_supported_data_transfer_apis_isValid;
}

QString OAIConnectorConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_can_use_as_source_isSet) {
        obj.insert(QString("canUseAsSource"), ::OpenAPI::toJsonValue(m_can_use_as_source));
    }
    if (m_can_use_as_destination_isSet) {
        obj.insert(QString("canUseAsDestination"), ::OpenAPI::toJsonValue(m_can_use_as_destination));
    }
    if (m_supported_destination_connectors.isSet()) {
        obj.insert(QString("supportedDestinationConnectors"), ::OpenAPI::toJsonValue(m_supported_destination_connectors));
    }
    if (m_supported_scheduling_frequencies.isSet()) {
        obj.insert(QString("supportedSchedulingFrequencies"), ::OpenAPI::toJsonValue(m_supported_scheduling_frequencies));
    }
    if (m_is_private_link_enabled_isSet) {
        obj.insert(QString("isPrivateLinkEnabled"), ::OpenAPI::toJsonValue(m_is_private_link_enabled));
    }
    if (m_is_private_link_endpoint_url_required_isSet) {
        obj.insert(QString("isPrivateLinkEndpointUrlRequired"), ::OpenAPI::toJsonValue(m_is_private_link_endpoint_url_required));
    }
    if (m_supported_trigger_types.isSet()) {
        obj.insert(QString("supportedTriggerTypes"), ::OpenAPI::toJsonValue(m_supported_trigger_types));
    }
    if (m_connector_metadata.isSet()) {
        obj.insert(QString("connectorMetadata"), ::OpenAPI::toJsonValue(m_connector_metadata));
    }
    if (m_connector_type.isSet()) {
        obj.insert(QString("connectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_connector_label_isSet) {
        obj.insert(QString("connectorLabel"), ::OpenAPI::toJsonValue(m_connector_label));
    }
    if (m_connector_description_isSet) {
        obj.insert(QString("connectorDescription"), ::OpenAPI::toJsonValue(m_connector_description));
    }
    if (m_connector_owner_isSet) {
        obj.insert(QString("connectorOwner"), ::OpenAPI::toJsonValue(m_connector_owner));
    }
    if (m_connector_name_isSet) {
        obj.insert(QString("connectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_connector_version_isSet) {
        obj.insert(QString("connectorVersion"), ::OpenAPI::toJsonValue(m_connector_version));
    }
    if (m_connector_arn_isSet) {
        obj.insert(QString("connectorArn"), ::OpenAPI::toJsonValue(m_connector_arn));
    }
    if (m_connector_modes.isSet()) {
        obj.insert(QString("connectorModes"), ::OpenAPI::toJsonValue(m_connector_modes));
    }
    if (m_authentication_config.isSet()) {
        obj.insert(QString("authenticationConfig"), ::OpenAPI::toJsonValue(m_authentication_config));
    }
    if (m_connector_runtime_settings.isSet()) {
        obj.insert(QString("connectorRuntimeSettings"), ::OpenAPI::toJsonValue(m_connector_runtime_settings));
    }
    if (m_supported_api_versions.isSet()) {
        obj.insert(QString("supportedApiVersions"), ::OpenAPI::toJsonValue(m_supported_api_versions));
    }
    if (m_supported_operators.isSet()) {
        obj.insert(QString("supportedOperators"), ::OpenAPI::toJsonValue(m_supported_operators));
    }
    if (m_supported_write_operations.isSet()) {
        obj.insert(QString("supportedWriteOperations"), ::OpenAPI::toJsonValue(m_supported_write_operations));
    }
    if (m_connector_provisioning_type.isSet()) {
        obj.insert(QString("connectorProvisioningType"), ::OpenAPI::toJsonValue(m_connector_provisioning_type));
    }
    if (m_connector_provisioning_config.isSet()) {
        obj.insert(QString("connectorProvisioningConfig"), ::OpenAPI::toJsonValue(m_connector_provisioning_config));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logoURL"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_registered_at_isSet) {
        obj.insert(QString("registeredAt"), ::OpenAPI::toJsonValue(m_registered_at));
    }
    if (m_registered_by_isSet) {
        obj.insert(QString("registeredBy"), ::OpenAPI::toJsonValue(m_registered_by));
    }
    if (m_supported_data_transfer_types.isSet()) {
        obj.insert(QString("supportedDataTransferTypes"), ::OpenAPI::toJsonValue(m_supported_data_transfer_types));
    }
    if (m_supported_data_transfer_apis.isSet()) {
        obj.insert(QString("supportedDataTransferApis"), ::OpenAPI::toJsonValue(m_supported_data_transfer_apis));
    }
    return obj;
}

bool OAIConnectorConfiguration::getCanUseAsSource() const {
    return m_can_use_as_source;
}
void OAIConnectorConfiguration::setCanUseAsSource(const bool &can_use_as_source) {
    m_can_use_as_source = can_use_as_source;
    m_can_use_as_source_isSet = true;
}

bool OAIConnectorConfiguration::is_can_use_as_source_Set() const{
    return m_can_use_as_source_isSet;
}

bool OAIConnectorConfiguration::is_can_use_as_source_Valid() const{
    return m_can_use_as_source_isValid;
}

bool OAIConnectorConfiguration::getCanUseAsDestination() const {
    return m_can_use_as_destination;
}
void OAIConnectorConfiguration::setCanUseAsDestination(const bool &can_use_as_destination) {
    m_can_use_as_destination = can_use_as_destination;
    m_can_use_as_destination_isSet = true;
}

bool OAIConnectorConfiguration::is_can_use_as_destination_Set() const{
    return m_can_use_as_destination_isSet;
}

bool OAIConnectorConfiguration::is_can_use_as_destination_Valid() const{
    return m_can_use_as_destination_isValid;
}

QList OAIConnectorConfiguration::getSupportedDestinationConnectors() const {
    return m_supported_destination_connectors;
}
void OAIConnectorConfiguration::setSupportedDestinationConnectors(const QList &supported_destination_connectors) {
    m_supported_destination_connectors = supported_destination_connectors;
    m_supported_destination_connectors_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_destination_connectors_Set() const{
    return m_supported_destination_connectors_isSet;
}

bool OAIConnectorConfiguration::is_supported_destination_connectors_Valid() const{
    return m_supported_destination_connectors_isValid;
}

QList OAIConnectorConfiguration::getSupportedSchedulingFrequencies() const {
    return m_supported_scheduling_frequencies;
}
void OAIConnectorConfiguration::setSupportedSchedulingFrequencies(const QList &supported_scheduling_frequencies) {
    m_supported_scheduling_frequencies = supported_scheduling_frequencies;
    m_supported_scheduling_frequencies_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_scheduling_frequencies_Set() const{
    return m_supported_scheduling_frequencies_isSet;
}

bool OAIConnectorConfiguration::is_supported_scheduling_frequencies_Valid() const{
    return m_supported_scheduling_frequencies_isValid;
}

bool OAIConnectorConfiguration::getIsPrivateLinkEnabled() const {
    return m_is_private_link_enabled;
}
void OAIConnectorConfiguration::setIsPrivateLinkEnabled(const bool &is_private_link_enabled) {
    m_is_private_link_enabled = is_private_link_enabled;
    m_is_private_link_enabled_isSet = true;
}

bool OAIConnectorConfiguration::is_is_private_link_enabled_Set() const{
    return m_is_private_link_enabled_isSet;
}

bool OAIConnectorConfiguration::is_is_private_link_enabled_Valid() const{
    return m_is_private_link_enabled_isValid;
}

bool OAIConnectorConfiguration::getIsPrivateLinkEndpointUrlRequired() const {
    return m_is_private_link_endpoint_url_required;
}
void OAIConnectorConfiguration::setIsPrivateLinkEndpointUrlRequired(const bool &is_private_link_endpoint_url_required) {
    m_is_private_link_endpoint_url_required = is_private_link_endpoint_url_required;
    m_is_private_link_endpoint_url_required_isSet = true;
}

bool OAIConnectorConfiguration::is_is_private_link_endpoint_url_required_Set() const{
    return m_is_private_link_endpoint_url_required_isSet;
}

bool OAIConnectorConfiguration::is_is_private_link_endpoint_url_required_Valid() const{
    return m_is_private_link_endpoint_url_required_isValid;
}

QList OAIConnectorConfiguration::getSupportedTriggerTypes() const {
    return m_supported_trigger_types;
}
void OAIConnectorConfiguration::setSupportedTriggerTypes(const QList &supported_trigger_types) {
    m_supported_trigger_types = supported_trigger_types;
    m_supported_trigger_types_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_trigger_types_Set() const{
    return m_supported_trigger_types_isSet;
}

bool OAIConnectorConfiguration::is_supported_trigger_types_Valid() const{
    return m_supported_trigger_types_isValid;
}

OAIConnectorConfiguration_connectorMetadata OAIConnectorConfiguration::getConnectorMetadata() const {
    return m_connector_metadata;
}
void OAIConnectorConfiguration::setConnectorMetadata(const OAIConnectorConfiguration_connectorMetadata &connector_metadata) {
    m_connector_metadata = connector_metadata;
    m_connector_metadata_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_metadata_Set() const{
    return m_connector_metadata_isSet;
}

bool OAIConnectorConfiguration::is_connector_metadata_Valid() const{
    return m_connector_metadata_isValid;
}

OAIConnectorType OAIConnectorConfiguration::getConnectorType() const {
    return m_connector_type;
}
void OAIConnectorConfiguration::setConnectorType(const OAIConnectorType &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAIConnectorConfiguration::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

QString OAIConnectorConfiguration::getConnectorLabel() const {
    return m_connector_label;
}
void OAIConnectorConfiguration::setConnectorLabel(const QString &connector_label) {
    m_connector_label = connector_label;
    m_connector_label_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_label_Set() const{
    return m_connector_label_isSet;
}

bool OAIConnectorConfiguration::is_connector_label_Valid() const{
    return m_connector_label_isValid;
}

QString OAIConnectorConfiguration::getConnectorDescription() const {
    return m_connector_description;
}
void OAIConnectorConfiguration::setConnectorDescription(const QString &connector_description) {
    m_connector_description = connector_description;
    m_connector_description_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_description_Set() const{
    return m_connector_description_isSet;
}

bool OAIConnectorConfiguration::is_connector_description_Valid() const{
    return m_connector_description_isValid;
}

QString OAIConnectorConfiguration::getConnectorOwner() const {
    return m_connector_owner;
}
void OAIConnectorConfiguration::setConnectorOwner(const QString &connector_owner) {
    m_connector_owner = connector_owner;
    m_connector_owner_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_owner_Set() const{
    return m_connector_owner_isSet;
}

bool OAIConnectorConfiguration::is_connector_owner_Valid() const{
    return m_connector_owner_isValid;
}

QString OAIConnectorConfiguration::getConnectorName() const {
    return m_connector_name;
}
void OAIConnectorConfiguration::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIConnectorConfiguration::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

QString OAIConnectorConfiguration::getConnectorVersion() const {
    return m_connector_version;
}
void OAIConnectorConfiguration::setConnectorVersion(const QString &connector_version) {
    m_connector_version = connector_version;
    m_connector_version_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_version_Set() const{
    return m_connector_version_isSet;
}

bool OAIConnectorConfiguration::is_connector_version_Valid() const{
    return m_connector_version_isValid;
}

QString OAIConnectorConfiguration::getConnectorArn() const {
    return m_connector_arn;
}
void OAIConnectorConfiguration::setConnectorArn(const QString &connector_arn) {
    m_connector_arn = connector_arn;
    m_connector_arn_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_arn_Set() const{
    return m_connector_arn_isSet;
}

bool OAIConnectorConfiguration::is_connector_arn_Valid() const{
    return m_connector_arn_isValid;
}

QList OAIConnectorConfiguration::getConnectorModes() const {
    return m_connector_modes;
}
void OAIConnectorConfiguration::setConnectorModes(const QList &connector_modes) {
    m_connector_modes = connector_modes;
    m_connector_modes_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_modes_Set() const{
    return m_connector_modes_isSet;
}

bool OAIConnectorConfiguration::is_connector_modes_Valid() const{
    return m_connector_modes_isValid;
}

OAIConnectorConfiguration_authenticationConfig OAIConnectorConfiguration::getAuthenticationConfig() const {
    return m_authentication_config;
}
void OAIConnectorConfiguration::setAuthenticationConfig(const OAIConnectorConfiguration_authenticationConfig &authentication_config) {
    m_authentication_config = authentication_config;
    m_authentication_config_isSet = true;
}

bool OAIConnectorConfiguration::is_authentication_config_Set() const{
    return m_authentication_config_isSet;
}

bool OAIConnectorConfiguration::is_authentication_config_Valid() const{
    return m_authentication_config_isValid;
}

QList OAIConnectorConfiguration::getConnectorRuntimeSettings() const {
    return m_connector_runtime_settings;
}
void OAIConnectorConfiguration::setConnectorRuntimeSettings(const QList &connector_runtime_settings) {
    m_connector_runtime_settings = connector_runtime_settings;
    m_connector_runtime_settings_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_runtime_settings_Set() const{
    return m_connector_runtime_settings_isSet;
}

bool OAIConnectorConfiguration::is_connector_runtime_settings_Valid() const{
    return m_connector_runtime_settings_isValid;
}

QList OAIConnectorConfiguration::getSupportedApiVersions() const {
    return m_supported_api_versions;
}
void OAIConnectorConfiguration::setSupportedApiVersions(const QList &supported_api_versions) {
    m_supported_api_versions = supported_api_versions;
    m_supported_api_versions_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_api_versions_Set() const{
    return m_supported_api_versions_isSet;
}

bool OAIConnectorConfiguration::is_supported_api_versions_Valid() const{
    return m_supported_api_versions_isValid;
}

QList OAIConnectorConfiguration::getSupportedOperators() const {
    return m_supported_operators;
}
void OAIConnectorConfiguration::setSupportedOperators(const QList &supported_operators) {
    m_supported_operators = supported_operators;
    m_supported_operators_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_operators_Set() const{
    return m_supported_operators_isSet;
}

bool OAIConnectorConfiguration::is_supported_operators_Valid() const{
    return m_supported_operators_isValid;
}

QList OAIConnectorConfiguration::getSupportedWriteOperations() const {
    return m_supported_write_operations;
}
void OAIConnectorConfiguration::setSupportedWriteOperations(const QList &supported_write_operations) {
    m_supported_write_operations = supported_write_operations;
    m_supported_write_operations_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_write_operations_Set() const{
    return m_supported_write_operations_isSet;
}

bool OAIConnectorConfiguration::is_supported_write_operations_Valid() const{
    return m_supported_write_operations_isValid;
}

OAIConnectorProvisioningType OAIConnectorConfiguration::getConnectorProvisioningType() const {
    return m_connector_provisioning_type;
}
void OAIConnectorConfiguration::setConnectorProvisioningType(const OAIConnectorProvisioningType &connector_provisioning_type) {
    m_connector_provisioning_type = connector_provisioning_type;
    m_connector_provisioning_type_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_provisioning_type_Set() const{
    return m_connector_provisioning_type_isSet;
}

bool OAIConnectorConfiguration::is_connector_provisioning_type_Valid() const{
    return m_connector_provisioning_type_isValid;
}

OAIConnectorConfiguration_connectorProvisioningConfig OAIConnectorConfiguration::getConnectorProvisioningConfig() const {
    return m_connector_provisioning_config;
}
void OAIConnectorConfiguration::setConnectorProvisioningConfig(const OAIConnectorConfiguration_connectorProvisioningConfig &connector_provisioning_config) {
    m_connector_provisioning_config = connector_provisioning_config;
    m_connector_provisioning_config_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_provisioning_config_Set() const{
    return m_connector_provisioning_config_isSet;
}

bool OAIConnectorConfiguration::is_connector_provisioning_config_Valid() const{
    return m_connector_provisioning_config_isValid;
}

QString OAIConnectorConfiguration::getLogoUrl() const {
    return m_logo_url;
}
void OAIConnectorConfiguration::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIConnectorConfiguration::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIConnectorConfiguration::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QDateTime OAIConnectorConfiguration::getRegisteredAt() const {
    return m_registered_at;
}
void OAIConnectorConfiguration::setRegisteredAt(const QDateTime &registered_at) {
    m_registered_at = registered_at;
    m_registered_at_isSet = true;
}

bool OAIConnectorConfiguration::is_registered_at_Set() const{
    return m_registered_at_isSet;
}

bool OAIConnectorConfiguration::is_registered_at_Valid() const{
    return m_registered_at_isValid;
}

QString OAIConnectorConfiguration::getRegisteredBy() const {
    return m_registered_by;
}
void OAIConnectorConfiguration::setRegisteredBy(const QString &registered_by) {
    m_registered_by = registered_by;
    m_registered_by_isSet = true;
}

bool OAIConnectorConfiguration::is_registered_by_Set() const{
    return m_registered_by_isSet;
}

bool OAIConnectorConfiguration::is_registered_by_Valid() const{
    return m_registered_by_isValid;
}

QList OAIConnectorConfiguration::getSupportedDataTransferTypes() const {
    return m_supported_data_transfer_types;
}
void OAIConnectorConfiguration::setSupportedDataTransferTypes(const QList &supported_data_transfer_types) {
    m_supported_data_transfer_types = supported_data_transfer_types;
    m_supported_data_transfer_types_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_data_transfer_types_Set() const{
    return m_supported_data_transfer_types_isSet;
}

bool OAIConnectorConfiguration::is_supported_data_transfer_types_Valid() const{
    return m_supported_data_transfer_types_isValid;
}

QList OAIConnectorConfiguration::getSupportedDataTransferApis() const {
    return m_supported_data_transfer_apis;
}
void OAIConnectorConfiguration::setSupportedDataTransferApis(const QList &supported_data_transfer_apis) {
    m_supported_data_transfer_apis = supported_data_transfer_apis;
    m_supported_data_transfer_apis_isSet = true;
}

bool OAIConnectorConfiguration::is_supported_data_transfer_apis_Set() const{
    return m_supported_data_transfer_apis_isSet;
}

bool OAIConnectorConfiguration::is_supported_data_transfer_apis_Valid() const{
    return m_supported_data_transfer_apis_isValid;
}

bool OAIConnectorConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_use_as_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_use_as_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_destination_connectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_scheduling_frequencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_link_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_link_endpoint_url_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_trigger_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_runtime_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_api_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_operators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_write_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_provisioning_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_provisioning_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_transfer_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_transfer_apis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
