/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorType::OAIConnectorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorType::OAIConnectorType() {
    this->initializeModel();
}

OAIConnectorType::~OAIConnectorType() {}

void OAIConnectorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConnectorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConnectorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Salesforce", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::SALESFORCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Singular", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::SINGULAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Slack", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::SLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Redshift", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::REDSHIFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::S3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Marketo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::MARKETO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Googleanalytics", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::GOOGLEANALYTICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Zendesk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::ZENDESK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Servicenow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::SERVICENOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Datadog", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::DATADOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Trendmicro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::TRENDMICRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Snowflake", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::SNOWFLAKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dynatrace", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::DYNATRACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Infornexus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::INFORNEXUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Amplitude", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::AMPLITUDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Veeva", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::VEEVA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EventBridge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::EVENTBRIDGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LookoutMetrics", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::LOOKOUTMETRICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Upsolver", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::UPSOLVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Honeycode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::HONEYCODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomerProfiles", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::CUSTOMERPROFILES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SAPOData", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::SAPODATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomConnector", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::CUSTOMCONNECTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pardot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectorType::PARDOT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConnectorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConnectorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConnectorType::SALESFORCE:
            val = "Salesforce";
            break;
        case eOAIConnectorType::SINGULAR:
            val = "Singular";
            break;
        case eOAIConnectorType::SLACK:
            val = "Slack";
            break;
        case eOAIConnectorType::REDSHIFT:
            val = "Redshift";
            break;
        case eOAIConnectorType::S3:
            val = "S3";
            break;
        case eOAIConnectorType::MARKETO:
            val = "Marketo";
            break;
        case eOAIConnectorType::GOOGLEANALYTICS:
            val = "Googleanalytics";
            break;
        case eOAIConnectorType::ZENDESK:
            val = "Zendesk";
            break;
        case eOAIConnectorType::SERVICENOW:
            val = "Servicenow";
            break;
        case eOAIConnectorType::DATADOG:
            val = "Datadog";
            break;
        case eOAIConnectorType::TRENDMICRO:
            val = "Trendmicro";
            break;
        case eOAIConnectorType::SNOWFLAKE:
            val = "Snowflake";
            break;
        case eOAIConnectorType::DYNATRACE:
            val = "Dynatrace";
            break;
        case eOAIConnectorType::INFORNEXUS:
            val = "Infornexus";
            break;
        case eOAIConnectorType::AMPLITUDE:
            val = "Amplitude";
            break;
        case eOAIConnectorType::VEEVA:
            val = "Veeva";
            break;
        case eOAIConnectorType::EVENTBRIDGE:
            val = "EventBridge";
            break;
        case eOAIConnectorType::LOOKOUTMETRICS:
            val = "LookoutMetrics";
            break;
        case eOAIConnectorType::UPSOLVER:
            val = "Upsolver";
            break;
        case eOAIConnectorType::HONEYCODE:
            val = "Honeycode";
            break;
        case eOAIConnectorType::CUSTOMERPROFILES:
            val = "CustomerProfiles";
            break;
        case eOAIConnectorType::SAPODATA:
            val = "SAPOData";
            break;
        case eOAIConnectorType::CUSTOMCONNECTOR:
            val = "CustomConnector";
            break;
        case eOAIConnectorType::PARDOT:
            val = "Pardot";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConnectorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConnectorType::eOAIConnectorType OAIConnectorType::getValue() const {
    return m_value;
}

void OAIConnectorType::setValue(const OAIConnectorType::eOAIConnectorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConnectorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIConnectorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
