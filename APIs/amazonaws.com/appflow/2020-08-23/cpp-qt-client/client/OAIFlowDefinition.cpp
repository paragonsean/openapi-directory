/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowDefinition::OAIFlowDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowDefinition::OAIFlowDefinition() {
    this->initializeModel();
}

OAIFlowDefinition::~OAIFlowDefinition() {}

void OAIFlowDefinition::initializeModel() {

    m_flow_arn_isSet = false;
    m_flow_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_flow_name_isSet = false;
    m_flow_name_isValid = false;

    m_flow_status_isSet = false;
    m_flow_status_isValid = false;

    m_source_connector_type_isSet = false;
    m_source_connector_type_isValid = false;

    m_source_connector_label_isSet = false;
    m_source_connector_label_isValid = false;

    m_destination_connector_type_isSet = false;
    m_destination_connector_type_isValid = false;

    m_destination_connector_label_isSet = false;
    m_destination_connector_label_isValid = false;

    m_trigger_type_isSet = false;
    m_trigger_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_last_run_execution_details_isSet = false;
    m_last_run_execution_details_isValid = false;
}

void OAIFlowDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowDefinition::fromJsonObject(QJsonObject json) {

    m_flow_arn_isValid = ::OpenAPI::fromJsonValue(m_flow_arn, json[QString("flowArn")]);
    m_flow_arn_isSet = !json[QString("flowArn")].isNull() && m_flow_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_flow_name_isValid = ::OpenAPI::fromJsonValue(m_flow_name, json[QString("flowName")]);
    m_flow_name_isSet = !json[QString("flowName")].isNull() && m_flow_name_isValid;

    m_flow_status_isValid = ::OpenAPI::fromJsonValue(m_flow_status, json[QString("flowStatus")]);
    m_flow_status_isSet = !json[QString("flowStatus")].isNull() && m_flow_status_isValid;

    m_source_connector_type_isValid = ::OpenAPI::fromJsonValue(m_source_connector_type, json[QString("sourceConnectorType")]);
    m_source_connector_type_isSet = !json[QString("sourceConnectorType")].isNull() && m_source_connector_type_isValid;

    m_source_connector_label_isValid = ::OpenAPI::fromJsonValue(m_source_connector_label, json[QString("sourceConnectorLabel")]);
    m_source_connector_label_isSet = !json[QString("sourceConnectorLabel")].isNull() && m_source_connector_label_isValid;

    m_destination_connector_type_isValid = ::OpenAPI::fromJsonValue(m_destination_connector_type, json[QString("destinationConnectorType")]);
    m_destination_connector_type_isSet = !json[QString("destinationConnectorType")].isNull() && m_destination_connector_type_isValid;

    m_destination_connector_label_isValid = ::OpenAPI::fromJsonValue(m_destination_connector_label, json[QString("destinationConnectorLabel")]);
    m_destination_connector_label_isSet = !json[QString("destinationConnectorLabel")].isNull() && m_destination_connector_label_isValid;

    m_trigger_type_isValid = ::OpenAPI::fromJsonValue(m_trigger_type, json[QString("triggerType")]);
    m_trigger_type_isSet = !json[QString("triggerType")].isNull() && m_trigger_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_last_run_execution_details_isValid = ::OpenAPI::fromJsonValue(m_last_run_execution_details, json[QString("lastRunExecutionDetails")]);
    m_last_run_execution_details_isSet = !json[QString("lastRunExecutionDetails")].isNull() && m_last_run_execution_details_isValid;
}

QString OAIFlowDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_flow_arn_isSet) {
        obj.insert(QString("flowArn"), ::OpenAPI::toJsonValue(m_flow_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_flow_name_isSet) {
        obj.insert(QString("flowName"), ::OpenAPI::toJsonValue(m_flow_name));
    }
    if (m_flow_status.isSet()) {
        obj.insert(QString("flowStatus"), ::OpenAPI::toJsonValue(m_flow_status));
    }
    if (m_source_connector_type.isSet()) {
        obj.insert(QString("sourceConnectorType"), ::OpenAPI::toJsonValue(m_source_connector_type));
    }
    if (m_source_connector_label_isSet) {
        obj.insert(QString("sourceConnectorLabel"), ::OpenAPI::toJsonValue(m_source_connector_label));
    }
    if (m_destination_connector_type.isSet()) {
        obj.insert(QString("destinationConnectorType"), ::OpenAPI::toJsonValue(m_destination_connector_type));
    }
    if (m_destination_connector_label_isSet) {
        obj.insert(QString("destinationConnectorLabel"), ::OpenAPI::toJsonValue(m_destination_connector_label));
    }
    if (m_trigger_type.isSet()) {
        obj.insert(QString("triggerType"), ::OpenAPI::toJsonValue(m_trigger_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_last_run_execution_details.isSet()) {
        obj.insert(QString("lastRunExecutionDetails"), ::OpenAPI::toJsonValue(m_last_run_execution_details));
    }
    return obj;
}

QString OAIFlowDefinition::getFlowArn() const {
    return m_flow_arn;
}
void OAIFlowDefinition::setFlowArn(const QString &flow_arn) {
    m_flow_arn = flow_arn;
    m_flow_arn_isSet = true;
}

bool OAIFlowDefinition::is_flow_arn_Set() const{
    return m_flow_arn_isSet;
}

bool OAIFlowDefinition::is_flow_arn_Valid() const{
    return m_flow_arn_isValid;
}

QString OAIFlowDefinition::getDescription() const {
    return m_description;
}
void OAIFlowDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFlowDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFlowDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFlowDefinition::getFlowName() const {
    return m_flow_name;
}
void OAIFlowDefinition::setFlowName(const QString &flow_name) {
    m_flow_name = flow_name;
    m_flow_name_isSet = true;
}

bool OAIFlowDefinition::is_flow_name_Set() const{
    return m_flow_name_isSet;
}

bool OAIFlowDefinition::is_flow_name_Valid() const{
    return m_flow_name_isValid;
}

OAIFlowStatus OAIFlowDefinition::getFlowStatus() const {
    return m_flow_status;
}
void OAIFlowDefinition::setFlowStatus(const OAIFlowStatus &flow_status) {
    m_flow_status = flow_status;
    m_flow_status_isSet = true;
}

bool OAIFlowDefinition::is_flow_status_Set() const{
    return m_flow_status_isSet;
}

bool OAIFlowDefinition::is_flow_status_Valid() const{
    return m_flow_status_isValid;
}

OAIConnectorType OAIFlowDefinition::getSourceConnectorType() const {
    return m_source_connector_type;
}
void OAIFlowDefinition::setSourceConnectorType(const OAIConnectorType &source_connector_type) {
    m_source_connector_type = source_connector_type;
    m_source_connector_type_isSet = true;
}

bool OAIFlowDefinition::is_source_connector_type_Set() const{
    return m_source_connector_type_isSet;
}

bool OAIFlowDefinition::is_source_connector_type_Valid() const{
    return m_source_connector_type_isValid;
}

QString OAIFlowDefinition::getSourceConnectorLabel() const {
    return m_source_connector_label;
}
void OAIFlowDefinition::setSourceConnectorLabel(const QString &source_connector_label) {
    m_source_connector_label = source_connector_label;
    m_source_connector_label_isSet = true;
}

bool OAIFlowDefinition::is_source_connector_label_Set() const{
    return m_source_connector_label_isSet;
}

bool OAIFlowDefinition::is_source_connector_label_Valid() const{
    return m_source_connector_label_isValid;
}

OAIConnectorType OAIFlowDefinition::getDestinationConnectorType() const {
    return m_destination_connector_type;
}
void OAIFlowDefinition::setDestinationConnectorType(const OAIConnectorType &destination_connector_type) {
    m_destination_connector_type = destination_connector_type;
    m_destination_connector_type_isSet = true;
}

bool OAIFlowDefinition::is_destination_connector_type_Set() const{
    return m_destination_connector_type_isSet;
}

bool OAIFlowDefinition::is_destination_connector_type_Valid() const{
    return m_destination_connector_type_isValid;
}

QString OAIFlowDefinition::getDestinationConnectorLabel() const {
    return m_destination_connector_label;
}
void OAIFlowDefinition::setDestinationConnectorLabel(const QString &destination_connector_label) {
    m_destination_connector_label = destination_connector_label;
    m_destination_connector_label_isSet = true;
}

bool OAIFlowDefinition::is_destination_connector_label_Set() const{
    return m_destination_connector_label_isSet;
}

bool OAIFlowDefinition::is_destination_connector_label_Valid() const{
    return m_destination_connector_label_isValid;
}

OAITriggerType OAIFlowDefinition::getTriggerType() const {
    return m_trigger_type;
}
void OAIFlowDefinition::setTriggerType(const OAITriggerType &trigger_type) {
    m_trigger_type = trigger_type;
    m_trigger_type_isSet = true;
}

bool OAIFlowDefinition::is_trigger_type_Set() const{
    return m_trigger_type_isSet;
}

bool OAIFlowDefinition::is_trigger_type_Valid() const{
    return m_trigger_type_isValid;
}

QDateTime OAIFlowDefinition::getCreatedAt() const {
    return m_created_at;
}
void OAIFlowDefinition::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFlowDefinition::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFlowDefinition::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIFlowDefinition::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIFlowDefinition::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIFlowDefinition::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIFlowDefinition::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIFlowDefinition::getCreatedBy() const {
    return m_created_by;
}
void OAIFlowDefinition::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIFlowDefinition::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIFlowDefinition::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIFlowDefinition::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIFlowDefinition::setLastUpdatedBy(const QString &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIFlowDefinition::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIFlowDefinition::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QMap OAIFlowDefinition::getTags() const {
    return m_tags;
}
void OAIFlowDefinition::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFlowDefinition::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFlowDefinition::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDescribeFlowResponse_lastRunExecutionDetails OAIFlowDefinition::getLastRunExecutionDetails() const {
    return m_last_run_execution_details;
}
void OAIFlowDefinition::setLastRunExecutionDetails(const OAIDescribeFlowResponse_lastRunExecutionDetails &last_run_execution_details) {
    m_last_run_execution_details = last_run_execution_details;
    m_last_run_execution_details_isSet = true;
}

bool OAIFlowDefinition::is_last_run_execution_details_Set() const{
    return m_last_run_execution_details_isSet;
}

bool OAIFlowDefinition::is_last_run_execution_details_Valid() const{
    return m_last_run_execution_details_isValid;
}

bool OAIFlowDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flow_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connector_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_connector_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_execution_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
