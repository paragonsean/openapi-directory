/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectorDetail.h
 *
 * Information about the registered connector.
 */

#ifndef OAIConnectorDetail_H
#define OAIConnectorDetail_H

#include <QJsonObject>

#include "OAIConnectorProvisioningType.h"
#include "OAIConnectorType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConnectorDetail : public OAIObject {
public:
    OAIConnectorDetail();
    OAIConnectorDetail(QString json);
    ~OAIConnectorDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectorDescription() const;
    void setConnectorDescription(const QString &connector_description);
    bool is_connector_description_Set() const;
    bool is_connector_description_Valid() const;

    QString getConnectorName() const;
    void setConnectorName(const QString &connector_name);
    bool is_connector_name_Set() const;
    bool is_connector_name_Valid() const;

    QString getConnectorOwner() const;
    void setConnectorOwner(const QString &connector_owner);
    bool is_connector_owner_Set() const;
    bool is_connector_owner_Valid() const;

    QString getConnectorVersion() const;
    void setConnectorVersion(const QString &connector_version);
    bool is_connector_version_Set() const;
    bool is_connector_version_Valid() const;

    QString getApplicationType() const;
    void setApplicationType(const QString &application_type);
    bool is_application_type_Set() const;
    bool is_application_type_Valid() const;

    OAIConnectorType getConnectorType() const;
    void setConnectorType(const OAIConnectorType &connector_type);
    bool is_connector_type_Set() const;
    bool is_connector_type_Valid() const;

    QString getConnectorLabel() const;
    void setConnectorLabel(const QString &connector_label);
    bool is_connector_label_Set() const;
    bool is_connector_label_Valid() const;

    QDateTime getRegisteredAt() const;
    void setRegisteredAt(const QDateTime &registered_at);
    bool is_registered_at_Set() const;
    bool is_registered_at_Valid() const;

    QString getRegisteredBy() const;
    void setRegisteredBy(const QString &registered_by);
    bool is_registered_by_Set() const;
    bool is_registered_by_Valid() const;

    OAIConnectorProvisioningType getConnectorProvisioningType() const;
    void setConnectorProvisioningType(const OAIConnectorProvisioningType &connector_provisioning_type);
    bool is_connector_provisioning_type_Set() const;
    bool is_connector_provisioning_type_Valid() const;

    QList getConnectorModes() const;
    void setConnectorModes(const QList &connector_modes);
    bool is_connector_modes_Set() const;
    bool is_connector_modes_Valid() const;

    QList getSupportedDataTransferTypes() const;
    void setSupportedDataTransferTypes(const QList &supported_data_transfer_types);
    bool is_supported_data_transfer_types_Set() const;
    bool is_supported_data_transfer_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connector_description;
    bool m_connector_description_isSet;
    bool m_connector_description_isValid;

    QString m_connector_name;
    bool m_connector_name_isSet;
    bool m_connector_name_isValid;

    QString m_connector_owner;
    bool m_connector_owner_isSet;
    bool m_connector_owner_isValid;

    QString m_connector_version;
    bool m_connector_version_isSet;
    bool m_connector_version_isValid;

    QString m_application_type;
    bool m_application_type_isSet;
    bool m_application_type_isValid;

    OAIConnectorType m_connector_type;
    bool m_connector_type_isSet;
    bool m_connector_type_isValid;

    QString m_connector_label;
    bool m_connector_label_isSet;
    bool m_connector_label_isValid;

    QDateTime m_registered_at;
    bool m_registered_at_isSet;
    bool m_registered_at_isValid;

    QString m_registered_by;
    bool m_registered_by_isSet;
    bool m_registered_by_isValid;

    OAIConnectorProvisioningType m_connector_provisioning_type;
    bool m_connector_provisioning_type_isSet;
    bool m_connector_provisioning_type_isValid;

    QList m_connector_modes;
    bool m_connector_modes_isSet;
    bool m_connector_modes_isValid;

    QList m_supported_data_transfer_types;
    bool m_supported_data_transfer_types_isSet;
    bool m_supported_data_transfer_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectorDetail)

#endif // OAIConnectorDetail_H
