/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationConfig::OAIAuthenticationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationConfig::OAIAuthenticationConfig() {
    this->initializeModel();
}

OAIAuthenticationConfig::~OAIAuthenticationConfig() {}

void OAIAuthenticationConfig::initializeModel() {

    m_is_basic_auth_supported_isSet = false;
    m_is_basic_auth_supported_isValid = false;

    m_is_api_key_auth_supported_isSet = false;
    m_is_api_key_auth_supported_isValid = false;

    m_is_o_auth2_supported_isSet = false;
    m_is_o_auth2_supported_isValid = false;

    m_is_custom_auth_supported_isSet = false;
    m_is_custom_auth_supported_isValid = false;

    m_o_auth2_defaults_isSet = false;
    m_o_auth2_defaults_isValid = false;

    m_custom_auth_configs_isSet = false;
    m_custom_auth_configs_isValid = false;
}

void OAIAuthenticationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationConfig::fromJsonObject(QJsonObject json) {

    m_is_basic_auth_supported_isValid = ::OpenAPI::fromJsonValue(m_is_basic_auth_supported, json[QString("isBasicAuthSupported")]);
    m_is_basic_auth_supported_isSet = !json[QString("isBasicAuthSupported")].isNull() && m_is_basic_auth_supported_isValid;

    m_is_api_key_auth_supported_isValid = ::OpenAPI::fromJsonValue(m_is_api_key_auth_supported, json[QString("isApiKeyAuthSupported")]);
    m_is_api_key_auth_supported_isSet = !json[QString("isApiKeyAuthSupported")].isNull() && m_is_api_key_auth_supported_isValid;

    m_is_o_auth2_supported_isValid = ::OpenAPI::fromJsonValue(m_is_o_auth2_supported, json[QString("isOAuth2Supported")]);
    m_is_o_auth2_supported_isSet = !json[QString("isOAuth2Supported")].isNull() && m_is_o_auth2_supported_isValid;

    m_is_custom_auth_supported_isValid = ::OpenAPI::fromJsonValue(m_is_custom_auth_supported, json[QString("isCustomAuthSupported")]);
    m_is_custom_auth_supported_isSet = !json[QString("isCustomAuthSupported")].isNull() && m_is_custom_auth_supported_isValid;

    m_o_auth2_defaults_isValid = ::OpenAPI::fromJsonValue(m_o_auth2_defaults, json[QString("oAuth2Defaults")]);
    m_o_auth2_defaults_isSet = !json[QString("oAuth2Defaults")].isNull() && m_o_auth2_defaults_isValid;

    m_custom_auth_configs_isValid = ::OpenAPI::fromJsonValue(m_custom_auth_configs, json[QString("customAuthConfigs")]);
    m_custom_auth_configs_isSet = !json[QString("customAuthConfigs")].isNull() && m_custom_auth_configs_isValid;
}

QString OAIAuthenticationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_is_basic_auth_supported_isSet) {
        obj.insert(QString("isBasicAuthSupported"), ::OpenAPI::toJsonValue(m_is_basic_auth_supported));
    }
    if (m_is_api_key_auth_supported_isSet) {
        obj.insert(QString("isApiKeyAuthSupported"), ::OpenAPI::toJsonValue(m_is_api_key_auth_supported));
    }
    if (m_is_o_auth2_supported_isSet) {
        obj.insert(QString("isOAuth2Supported"), ::OpenAPI::toJsonValue(m_is_o_auth2_supported));
    }
    if (m_is_custom_auth_supported_isSet) {
        obj.insert(QString("isCustomAuthSupported"), ::OpenAPI::toJsonValue(m_is_custom_auth_supported));
    }
    if (m_o_auth2_defaults.isSet()) {
        obj.insert(QString("oAuth2Defaults"), ::OpenAPI::toJsonValue(m_o_auth2_defaults));
    }
    if (m_custom_auth_configs.isSet()) {
        obj.insert(QString("customAuthConfigs"), ::OpenAPI::toJsonValue(m_custom_auth_configs));
    }
    return obj;
}

bool OAIAuthenticationConfig::getIsBasicAuthSupported() const {
    return m_is_basic_auth_supported;
}
void OAIAuthenticationConfig::setIsBasicAuthSupported(const bool &is_basic_auth_supported) {
    m_is_basic_auth_supported = is_basic_auth_supported;
    m_is_basic_auth_supported_isSet = true;
}

bool OAIAuthenticationConfig::is_is_basic_auth_supported_Set() const{
    return m_is_basic_auth_supported_isSet;
}

bool OAIAuthenticationConfig::is_is_basic_auth_supported_Valid() const{
    return m_is_basic_auth_supported_isValid;
}

bool OAIAuthenticationConfig::getIsApiKeyAuthSupported() const {
    return m_is_api_key_auth_supported;
}
void OAIAuthenticationConfig::setIsApiKeyAuthSupported(const bool &is_api_key_auth_supported) {
    m_is_api_key_auth_supported = is_api_key_auth_supported;
    m_is_api_key_auth_supported_isSet = true;
}

bool OAIAuthenticationConfig::is_is_api_key_auth_supported_Set() const{
    return m_is_api_key_auth_supported_isSet;
}

bool OAIAuthenticationConfig::is_is_api_key_auth_supported_Valid() const{
    return m_is_api_key_auth_supported_isValid;
}

bool OAIAuthenticationConfig::getIsOAuth2Supported() const {
    return m_is_o_auth2_supported;
}
void OAIAuthenticationConfig::setIsOAuth2Supported(const bool &is_o_auth2_supported) {
    m_is_o_auth2_supported = is_o_auth2_supported;
    m_is_o_auth2_supported_isSet = true;
}

bool OAIAuthenticationConfig::is_is_o_auth2_supported_Set() const{
    return m_is_o_auth2_supported_isSet;
}

bool OAIAuthenticationConfig::is_is_o_auth2_supported_Valid() const{
    return m_is_o_auth2_supported_isValid;
}

bool OAIAuthenticationConfig::getIsCustomAuthSupported() const {
    return m_is_custom_auth_supported;
}
void OAIAuthenticationConfig::setIsCustomAuthSupported(const bool &is_custom_auth_supported) {
    m_is_custom_auth_supported = is_custom_auth_supported;
    m_is_custom_auth_supported_isSet = true;
}

bool OAIAuthenticationConfig::is_is_custom_auth_supported_Set() const{
    return m_is_custom_auth_supported_isSet;
}

bool OAIAuthenticationConfig::is_is_custom_auth_supported_Valid() const{
    return m_is_custom_auth_supported_isValid;
}

OAIAuthenticationConfig_oAuth2Defaults OAIAuthenticationConfig::getOAuth2Defaults() const {
    return m_o_auth2_defaults;
}
void OAIAuthenticationConfig::setOAuth2Defaults(const OAIAuthenticationConfig_oAuth2Defaults &o_auth2_defaults) {
    m_o_auth2_defaults = o_auth2_defaults;
    m_o_auth2_defaults_isSet = true;
}

bool OAIAuthenticationConfig::is_o_auth2_defaults_Set() const{
    return m_o_auth2_defaults_isSet;
}

bool OAIAuthenticationConfig::is_o_auth2_defaults_Valid() const{
    return m_o_auth2_defaults_isValid;
}

QList OAIAuthenticationConfig::getCustomAuthConfigs() const {
    return m_custom_auth_configs;
}
void OAIAuthenticationConfig::setCustomAuthConfigs(const QList &custom_auth_configs) {
    m_custom_auth_configs = custom_auth_configs;
    m_custom_auth_configs_isSet = true;
}

bool OAIAuthenticationConfig::is_custom_auth_configs_Set() const{
    return m_custom_auth_configs_isSet;
}

bool OAIAuthenticationConfig::is_custom_auth_configs_Valid() const{
    return m_custom_auth_configs_isValid;
}

bool OAIAuthenticationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_basic_auth_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_api_key_auth_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_o_auth2_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_custom_auth_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth2_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_auth_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
