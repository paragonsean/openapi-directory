/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationConnectorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationConnectorProperties::OAIDestinationConnectorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationConnectorProperties::OAIDestinationConnectorProperties() {
    this->initializeModel();
}

OAIDestinationConnectorProperties::~OAIDestinationConnectorProperties() {}

void OAIDestinationConnectorProperties::initializeModel() {

    m_redshift_isSet = false;
    m_redshift_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;

    m_salesforce_isSet = false;
    m_salesforce_isValid = false;

    m_snowflake_isSet = false;
    m_snowflake_isValid = false;

    m_event_bridge_isSet = false;
    m_event_bridge_isValid = false;

    m_lookout_metrics_isSet = false;
    m_lookout_metrics_isValid = false;

    m_upsolver_isSet = false;
    m_upsolver_isValid = false;

    m_honeycode_isSet = false;
    m_honeycode_isValid = false;

    m_customer_profiles_isSet = false;
    m_customer_profiles_isValid = false;

    m_zendesk_isSet = false;
    m_zendesk_isValid = false;

    m_marketo_isSet = false;
    m_marketo_isValid = false;

    m_custom_connector_isSet = false;
    m_custom_connector_isValid = false;

    m_sapo_data_isSet = false;
    m_sapo_data_isValid = false;
}

void OAIDestinationConnectorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationConnectorProperties::fromJsonObject(QJsonObject json) {

    m_redshift_isValid = ::OpenAPI::fromJsonValue(m_redshift, json[QString("Redshift")]);
    m_redshift_isSet = !json[QString("Redshift")].isNull() && m_redshift_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;

    m_salesforce_isValid = ::OpenAPI::fromJsonValue(m_salesforce, json[QString("Salesforce")]);
    m_salesforce_isSet = !json[QString("Salesforce")].isNull() && m_salesforce_isValid;

    m_snowflake_isValid = ::OpenAPI::fromJsonValue(m_snowflake, json[QString("Snowflake")]);
    m_snowflake_isSet = !json[QString("Snowflake")].isNull() && m_snowflake_isValid;

    m_event_bridge_isValid = ::OpenAPI::fromJsonValue(m_event_bridge, json[QString("EventBridge")]);
    m_event_bridge_isSet = !json[QString("EventBridge")].isNull() && m_event_bridge_isValid;

    m_lookout_metrics_isValid = ::OpenAPI::fromJsonValue(m_lookout_metrics, json[QString("LookoutMetrics")]);
    m_lookout_metrics_isSet = !json[QString("LookoutMetrics")].isNull() && m_lookout_metrics_isValid;

    m_upsolver_isValid = ::OpenAPI::fromJsonValue(m_upsolver, json[QString("Upsolver")]);
    m_upsolver_isSet = !json[QString("Upsolver")].isNull() && m_upsolver_isValid;

    m_honeycode_isValid = ::OpenAPI::fromJsonValue(m_honeycode, json[QString("Honeycode")]);
    m_honeycode_isSet = !json[QString("Honeycode")].isNull() && m_honeycode_isValid;

    m_customer_profiles_isValid = ::OpenAPI::fromJsonValue(m_customer_profiles, json[QString("CustomerProfiles")]);
    m_customer_profiles_isSet = !json[QString("CustomerProfiles")].isNull() && m_customer_profiles_isValid;

    m_zendesk_isValid = ::OpenAPI::fromJsonValue(m_zendesk, json[QString("Zendesk")]);
    m_zendesk_isSet = !json[QString("Zendesk")].isNull() && m_zendesk_isValid;

    m_marketo_isValid = ::OpenAPI::fromJsonValue(m_marketo, json[QString("Marketo")]);
    m_marketo_isSet = !json[QString("Marketo")].isNull() && m_marketo_isValid;

    m_custom_connector_isValid = ::OpenAPI::fromJsonValue(m_custom_connector, json[QString("CustomConnector")]);
    m_custom_connector_isSet = !json[QString("CustomConnector")].isNull() && m_custom_connector_isValid;

    m_sapo_data_isValid = ::OpenAPI::fromJsonValue(m_sapo_data, json[QString("SAPOData")]);
    m_sapo_data_isSet = !json[QString("SAPOData")].isNull() && m_sapo_data_isValid;
}

QString OAIDestinationConnectorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationConnectorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_redshift.isSet()) {
        obj.insert(QString("Redshift"), ::OpenAPI::toJsonValue(m_redshift));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    if (m_salesforce.isSet()) {
        obj.insert(QString("Salesforce"), ::OpenAPI::toJsonValue(m_salesforce));
    }
    if (m_snowflake.isSet()) {
        obj.insert(QString("Snowflake"), ::OpenAPI::toJsonValue(m_snowflake));
    }
    if (m_event_bridge.isSet()) {
        obj.insert(QString("EventBridge"), ::OpenAPI::toJsonValue(m_event_bridge));
    }
    if (m_lookout_metrics.isSet()) {
        obj.insert(QString("LookoutMetrics"), ::OpenAPI::toJsonValue(m_lookout_metrics));
    }
    if (m_upsolver.isSet()) {
        obj.insert(QString("Upsolver"), ::OpenAPI::toJsonValue(m_upsolver));
    }
    if (m_honeycode.isSet()) {
        obj.insert(QString("Honeycode"), ::OpenAPI::toJsonValue(m_honeycode));
    }
    if (m_customer_profiles.isSet()) {
        obj.insert(QString("CustomerProfiles"), ::OpenAPI::toJsonValue(m_customer_profiles));
    }
    if (m_zendesk.isSet()) {
        obj.insert(QString("Zendesk"), ::OpenAPI::toJsonValue(m_zendesk));
    }
    if (m_marketo.isSet()) {
        obj.insert(QString("Marketo"), ::OpenAPI::toJsonValue(m_marketo));
    }
    if (m_custom_connector.isSet()) {
        obj.insert(QString("CustomConnector"), ::OpenAPI::toJsonValue(m_custom_connector));
    }
    if (m_sapo_data.isSet()) {
        obj.insert(QString("SAPOData"), ::OpenAPI::toJsonValue(m_sapo_data));
    }
    return obj;
}

OAIDestinationConnectorProperties_Redshift OAIDestinationConnectorProperties::getRedshift() const {
    return m_redshift;
}
void OAIDestinationConnectorProperties::setRedshift(const OAIDestinationConnectorProperties_Redshift &redshift) {
    m_redshift = redshift;
    m_redshift_isSet = true;
}

bool OAIDestinationConnectorProperties::is_redshift_Set() const{
    return m_redshift_isSet;
}

bool OAIDestinationConnectorProperties::is_redshift_Valid() const{
    return m_redshift_isValid;
}

OAIDestinationConnectorProperties_S3 OAIDestinationConnectorProperties::getS3() const {
    return m_s3;
}
void OAIDestinationConnectorProperties::setS3(const OAIDestinationConnectorProperties_S3 &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAIDestinationConnectorProperties::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAIDestinationConnectorProperties::is_s3_Valid() const{
    return m_s3_isValid;
}

OAIDestinationConnectorProperties_Salesforce OAIDestinationConnectorProperties::getSalesforce() const {
    return m_salesforce;
}
void OAIDestinationConnectorProperties::setSalesforce(const OAIDestinationConnectorProperties_Salesforce &salesforce) {
    m_salesforce = salesforce;
    m_salesforce_isSet = true;
}

bool OAIDestinationConnectorProperties::is_salesforce_Set() const{
    return m_salesforce_isSet;
}

bool OAIDestinationConnectorProperties::is_salesforce_Valid() const{
    return m_salesforce_isValid;
}

OAIDestinationConnectorProperties_Snowflake OAIDestinationConnectorProperties::getSnowflake() const {
    return m_snowflake;
}
void OAIDestinationConnectorProperties::setSnowflake(const OAIDestinationConnectorProperties_Snowflake &snowflake) {
    m_snowflake = snowflake;
    m_snowflake_isSet = true;
}

bool OAIDestinationConnectorProperties::is_snowflake_Set() const{
    return m_snowflake_isSet;
}

bool OAIDestinationConnectorProperties::is_snowflake_Valid() const{
    return m_snowflake_isValid;
}

OAIDestinationConnectorProperties_EventBridge OAIDestinationConnectorProperties::getEventBridge() const {
    return m_event_bridge;
}
void OAIDestinationConnectorProperties::setEventBridge(const OAIDestinationConnectorProperties_EventBridge &event_bridge) {
    m_event_bridge = event_bridge;
    m_event_bridge_isSet = true;
}

bool OAIDestinationConnectorProperties::is_event_bridge_Set() const{
    return m_event_bridge_isSet;
}

bool OAIDestinationConnectorProperties::is_event_bridge_Valid() const{
    return m_event_bridge_isValid;
}

OAIObject OAIDestinationConnectorProperties::getLookoutMetrics() const {
    return m_lookout_metrics;
}
void OAIDestinationConnectorProperties::setLookoutMetrics(const OAIObject &lookout_metrics) {
    m_lookout_metrics = lookout_metrics;
    m_lookout_metrics_isSet = true;
}

bool OAIDestinationConnectorProperties::is_lookout_metrics_Set() const{
    return m_lookout_metrics_isSet;
}

bool OAIDestinationConnectorProperties::is_lookout_metrics_Valid() const{
    return m_lookout_metrics_isValid;
}

OAIDestinationConnectorProperties_Upsolver OAIDestinationConnectorProperties::getUpsolver() const {
    return m_upsolver;
}
void OAIDestinationConnectorProperties::setUpsolver(const OAIDestinationConnectorProperties_Upsolver &upsolver) {
    m_upsolver = upsolver;
    m_upsolver_isSet = true;
}

bool OAIDestinationConnectorProperties::is_upsolver_Set() const{
    return m_upsolver_isSet;
}

bool OAIDestinationConnectorProperties::is_upsolver_Valid() const{
    return m_upsolver_isValid;
}

OAIDestinationConnectorProperties_Honeycode OAIDestinationConnectorProperties::getHoneycode() const {
    return m_honeycode;
}
void OAIDestinationConnectorProperties::setHoneycode(const OAIDestinationConnectorProperties_Honeycode &honeycode) {
    m_honeycode = honeycode;
    m_honeycode_isSet = true;
}

bool OAIDestinationConnectorProperties::is_honeycode_Set() const{
    return m_honeycode_isSet;
}

bool OAIDestinationConnectorProperties::is_honeycode_Valid() const{
    return m_honeycode_isValid;
}

OAIDestinationConnectorProperties_CustomerProfiles OAIDestinationConnectorProperties::getCustomerProfiles() const {
    return m_customer_profiles;
}
void OAIDestinationConnectorProperties::setCustomerProfiles(const OAIDestinationConnectorProperties_CustomerProfiles &customer_profiles) {
    m_customer_profiles = customer_profiles;
    m_customer_profiles_isSet = true;
}

bool OAIDestinationConnectorProperties::is_customer_profiles_Set() const{
    return m_customer_profiles_isSet;
}

bool OAIDestinationConnectorProperties::is_customer_profiles_Valid() const{
    return m_customer_profiles_isValid;
}

OAIDestinationConnectorProperties_Zendesk OAIDestinationConnectorProperties::getZendesk() const {
    return m_zendesk;
}
void OAIDestinationConnectorProperties::setZendesk(const OAIDestinationConnectorProperties_Zendesk &zendesk) {
    m_zendesk = zendesk;
    m_zendesk_isSet = true;
}

bool OAIDestinationConnectorProperties::is_zendesk_Set() const{
    return m_zendesk_isSet;
}

bool OAIDestinationConnectorProperties::is_zendesk_Valid() const{
    return m_zendesk_isValid;
}

OAIDestinationConnectorProperties_Marketo OAIDestinationConnectorProperties::getMarketo() const {
    return m_marketo;
}
void OAIDestinationConnectorProperties::setMarketo(const OAIDestinationConnectorProperties_Marketo &marketo) {
    m_marketo = marketo;
    m_marketo_isSet = true;
}

bool OAIDestinationConnectorProperties::is_marketo_Set() const{
    return m_marketo_isSet;
}

bool OAIDestinationConnectorProperties::is_marketo_Valid() const{
    return m_marketo_isValid;
}

OAIDestinationConnectorProperties_CustomConnector OAIDestinationConnectorProperties::getCustomConnector() const {
    return m_custom_connector;
}
void OAIDestinationConnectorProperties::setCustomConnector(const OAIDestinationConnectorProperties_CustomConnector &custom_connector) {
    m_custom_connector = custom_connector;
    m_custom_connector_isSet = true;
}

bool OAIDestinationConnectorProperties::is_custom_connector_Set() const{
    return m_custom_connector_isSet;
}

bool OAIDestinationConnectorProperties::is_custom_connector_Valid() const{
    return m_custom_connector_isValid;
}

OAIDestinationConnectorProperties_SAPOData OAIDestinationConnectorProperties::getSapoData() const {
    return m_sapo_data;
}
void OAIDestinationConnectorProperties::setSapoData(const OAIDestinationConnectorProperties_SAPOData &sapo_data) {
    m_sapo_data = sapo_data;
    m_sapo_data_isSet = true;
}

bool OAIDestinationConnectorProperties::is_sapo_data_Set() const{
    return m_sapo_data_isSet;
}

bool OAIDestinationConnectorProperties::is_sapo_data_Valid() const{
    return m_sapo_data_isValid;
}

bool OAIDestinationConnectorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_redshift.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesforce.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowflake.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookout_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upsolver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_honeycode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zendesk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sapo_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationConnectorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
