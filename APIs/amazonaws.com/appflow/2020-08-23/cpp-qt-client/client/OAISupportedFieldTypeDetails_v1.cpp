/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedFieldTypeDetails_v1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedFieldTypeDetails_v1::OAISupportedFieldTypeDetails_v1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedFieldTypeDetails_v1::OAISupportedFieldTypeDetails_v1() {
    this->initializeModel();
}

OAISupportedFieldTypeDetails_v1::~OAISupportedFieldTypeDetails_v1() {}

void OAISupportedFieldTypeDetails_v1::initializeModel() {

    m_field_type_isSet = false;
    m_field_type_isValid = false;

    m_filter_operators_isSet = false;
    m_filter_operators_isValid = false;

    m_supported_values_isSet = false;
    m_supported_values_isValid = false;

    m_value_regex_pattern_isSet = false;
    m_value_regex_pattern_isValid = false;

    m_supported_date_format_isSet = false;
    m_supported_date_format_isValid = false;

    m_field_value_range_isSet = false;
    m_field_value_range_isValid = false;

    m_field_length_range_isSet = false;
    m_field_length_range_isValid = false;
}

void OAISupportedFieldTypeDetails_v1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedFieldTypeDetails_v1::fromJsonObject(QJsonObject json) {

    m_field_type_isValid = ::OpenAPI::fromJsonValue(m_field_type, json[QString("fieldType")]);
    m_field_type_isSet = !json[QString("fieldType")].isNull() && m_field_type_isValid;

    m_filter_operators_isValid = ::OpenAPI::fromJsonValue(m_filter_operators, json[QString("filterOperators")]);
    m_filter_operators_isSet = !json[QString("filterOperators")].isNull() && m_filter_operators_isValid;

    m_supported_values_isValid = ::OpenAPI::fromJsonValue(m_supported_values, json[QString("supportedValues")]);
    m_supported_values_isSet = !json[QString("supportedValues")].isNull() && m_supported_values_isValid;

    m_value_regex_pattern_isValid = ::OpenAPI::fromJsonValue(m_value_regex_pattern, json[QString("valueRegexPattern")]);
    m_value_regex_pattern_isSet = !json[QString("valueRegexPattern")].isNull() && m_value_regex_pattern_isValid;

    m_supported_date_format_isValid = ::OpenAPI::fromJsonValue(m_supported_date_format, json[QString("supportedDateFormat")]);
    m_supported_date_format_isSet = !json[QString("supportedDateFormat")].isNull() && m_supported_date_format_isValid;

    m_field_value_range_isValid = ::OpenAPI::fromJsonValue(m_field_value_range, json[QString("fieldValueRange")]);
    m_field_value_range_isSet = !json[QString("fieldValueRange")].isNull() && m_field_value_range_isValid;

    m_field_length_range_isValid = ::OpenAPI::fromJsonValue(m_field_length_range, json[QString("fieldLengthRange")]);
    m_field_length_range_isSet = !json[QString("fieldLengthRange")].isNull() && m_field_length_range_isValid;
}

QString OAISupportedFieldTypeDetails_v1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedFieldTypeDetails_v1::asJsonObject() const {
    QJsonObject obj;
    if (m_field_type_isSet) {
        obj.insert(QString("fieldType"), ::OpenAPI::toJsonValue(m_field_type));
    }
    if (m_filter_operators.isSet()) {
        obj.insert(QString("filterOperators"), ::OpenAPI::toJsonValue(m_filter_operators));
    }
    if (m_supported_values.isSet()) {
        obj.insert(QString("supportedValues"), ::OpenAPI::toJsonValue(m_supported_values));
    }
    if (m_value_regex_pattern_isSet) {
        obj.insert(QString("valueRegexPattern"), ::OpenAPI::toJsonValue(m_value_regex_pattern));
    }
    if (m_supported_date_format_isSet) {
        obj.insert(QString("supportedDateFormat"), ::OpenAPI::toJsonValue(m_supported_date_format));
    }
    if (m_field_value_range.isSet()) {
        obj.insert(QString("fieldValueRange"), ::OpenAPI::toJsonValue(m_field_value_range));
    }
    if (m_field_length_range.isSet()) {
        obj.insert(QString("fieldLengthRange"), ::OpenAPI::toJsonValue(m_field_length_range));
    }
    return obj;
}

QString OAISupportedFieldTypeDetails_v1::getFieldType() const {
    return m_field_type;
}
void OAISupportedFieldTypeDetails_v1::setFieldType(const QString &field_type) {
    m_field_type = field_type;
    m_field_type_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_field_type_Set() const{
    return m_field_type_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_field_type_Valid() const{
    return m_field_type_isValid;
}

QList OAISupportedFieldTypeDetails_v1::getFilterOperators() const {
    return m_filter_operators;
}
void OAISupportedFieldTypeDetails_v1::setFilterOperators(const QList &filter_operators) {
    m_filter_operators = filter_operators;
    m_filter_operators_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_filter_operators_Set() const{
    return m_filter_operators_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_filter_operators_Valid() const{
    return m_filter_operators_isValid;
}

QList OAISupportedFieldTypeDetails_v1::getSupportedValues() const {
    return m_supported_values;
}
void OAISupportedFieldTypeDetails_v1::setSupportedValues(const QList &supported_values) {
    m_supported_values = supported_values;
    m_supported_values_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_supported_values_Set() const{
    return m_supported_values_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_supported_values_Valid() const{
    return m_supported_values_isValid;
}

QString OAISupportedFieldTypeDetails_v1::getValueRegexPattern() const {
    return m_value_regex_pattern;
}
void OAISupportedFieldTypeDetails_v1::setValueRegexPattern(const QString &value_regex_pattern) {
    m_value_regex_pattern = value_regex_pattern;
    m_value_regex_pattern_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_value_regex_pattern_Set() const{
    return m_value_regex_pattern_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_value_regex_pattern_Valid() const{
    return m_value_regex_pattern_isValid;
}

QString OAISupportedFieldTypeDetails_v1::getSupportedDateFormat() const {
    return m_supported_date_format;
}
void OAISupportedFieldTypeDetails_v1::setSupportedDateFormat(const QString &supported_date_format) {
    m_supported_date_format = supported_date_format;
    m_supported_date_format_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_supported_date_format_Set() const{
    return m_supported_date_format_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_supported_date_format_Valid() const{
    return m_supported_date_format_isValid;
}

OAIFieldTypeDetails_fieldValueRange OAISupportedFieldTypeDetails_v1::getFieldValueRange() const {
    return m_field_value_range;
}
void OAISupportedFieldTypeDetails_v1::setFieldValueRange(const OAIFieldTypeDetails_fieldValueRange &field_value_range) {
    m_field_value_range = field_value_range;
    m_field_value_range_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_field_value_range_Set() const{
    return m_field_value_range_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_field_value_range_Valid() const{
    return m_field_value_range_isValid;
}

OAIFieldTypeDetails_fieldLengthRange OAISupportedFieldTypeDetails_v1::getFieldLengthRange() const {
    return m_field_length_range;
}
void OAISupportedFieldTypeDetails_v1::setFieldLengthRange(const OAIFieldTypeDetails_fieldLengthRange &field_length_range) {
    m_field_length_range = field_length_range;
    m_field_length_range_isSet = true;
}

bool OAISupportedFieldTypeDetails_v1::is_field_length_range_Set() const{
    return m_field_length_range_isSet;
}

bool OAISupportedFieldTypeDetails_v1::is_field_length_range_Valid() const{
    return m_field_length_range_isValid;
}

bool OAISupportedFieldTypeDetails_v1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_operators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_regex_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_value_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_length_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedFieldTypeDetails_v1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_type_isValid && m_filter_operators_isValid && true;
}

} // namespace OpenAPI
