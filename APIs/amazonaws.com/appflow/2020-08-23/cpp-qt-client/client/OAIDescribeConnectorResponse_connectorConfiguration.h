/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeConnectorResponse_connectorConfiguration.h
 *
 * 
 */

#ifndef OAIDescribeConnectorResponse_connectorConfiguration_H
#define OAIDescribeConnectorResponse_connectorConfiguration_H

#include <QJsonObject>

#include "OAIConnectorConfiguration_authenticationConfig.h"
#include "OAIConnectorConfiguration_connectorMetadata.h"
#include "OAIConnectorConfiguration_connectorProvisioningConfig.h"
#include "OAIConnectorProvisioningType.h"
#include "OAIConnectorType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConnectorConfiguration_connectorMetadata;
class OAIConnectorConfiguration_authenticationConfig;
class OAIConnectorConfiguration_connectorProvisioningConfig;

class OAIDescribeConnectorResponse_connectorConfiguration : public OAIObject {
public:
    OAIDescribeConnectorResponse_connectorConfiguration();
    OAIDescribeConnectorResponse_connectorConfiguration(QString json);
    ~OAIDescribeConnectorResponse_connectorConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getCanUseAsSource() const;
    void setCanUseAsSource(const bool &can_use_as_source);
    bool is_can_use_as_source_Set() const;
    bool is_can_use_as_source_Valid() const;

    bool getCanUseAsDestination() const;
    void setCanUseAsDestination(const bool &can_use_as_destination);
    bool is_can_use_as_destination_Set() const;
    bool is_can_use_as_destination_Valid() const;

    QList getSupportedDestinationConnectors() const;
    void setSupportedDestinationConnectors(const QList &supported_destination_connectors);
    bool is_supported_destination_connectors_Set() const;
    bool is_supported_destination_connectors_Valid() const;

    QList getSupportedSchedulingFrequencies() const;
    void setSupportedSchedulingFrequencies(const QList &supported_scheduling_frequencies);
    bool is_supported_scheduling_frequencies_Set() const;
    bool is_supported_scheduling_frequencies_Valid() const;

    bool getIsPrivateLinkEnabled() const;
    void setIsPrivateLinkEnabled(const bool &is_private_link_enabled);
    bool is_is_private_link_enabled_Set() const;
    bool is_is_private_link_enabled_Valid() const;

    bool getIsPrivateLinkEndpointUrlRequired() const;
    void setIsPrivateLinkEndpointUrlRequired(const bool &is_private_link_endpoint_url_required);
    bool is_is_private_link_endpoint_url_required_Set() const;
    bool is_is_private_link_endpoint_url_required_Valid() const;

    QList getSupportedTriggerTypes() const;
    void setSupportedTriggerTypes(const QList &supported_trigger_types);
    bool is_supported_trigger_types_Set() const;
    bool is_supported_trigger_types_Valid() const;

    OAIConnectorConfiguration_connectorMetadata getConnectorMetadata() const;
    void setConnectorMetadata(const OAIConnectorConfiguration_connectorMetadata &connector_metadata);
    bool is_connector_metadata_Set() const;
    bool is_connector_metadata_Valid() const;

    OAIConnectorType getConnectorType() const;
    void setConnectorType(const OAIConnectorType &connector_type);
    bool is_connector_type_Set() const;
    bool is_connector_type_Valid() const;

    QString getConnectorLabel() const;
    void setConnectorLabel(const QString &connector_label);
    bool is_connector_label_Set() const;
    bool is_connector_label_Valid() const;

    QString getConnectorDescription() const;
    void setConnectorDescription(const QString &connector_description);
    bool is_connector_description_Set() const;
    bool is_connector_description_Valid() const;

    QString getConnectorOwner() const;
    void setConnectorOwner(const QString &connector_owner);
    bool is_connector_owner_Set() const;
    bool is_connector_owner_Valid() const;

    QString getConnectorName() const;
    void setConnectorName(const QString &connector_name);
    bool is_connector_name_Set() const;
    bool is_connector_name_Valid() const;

    QString getConnectorVersion() const;
    void setConnectorVersion(const QString &connector_version);
    bool is_connector_version_Set() const;
    bool is_connector_version_Valid() const;

    QString getConnectorArn() const;
    void setConnectorArn(const QString &connector_arn);
    bool is_connector_arn_Set() const;
    bool is_connector_arn_Valid() const;

    QList getConnectorModes() const;
    void setConnectorModes(const QList &connector_modes);
    bool is_connector_modes_Set() const;
    bool is_connector_modes_Valid() const;

    OAIConnectorConfiguration_authenticationConfig getAuthenticationConfig() const;
    void setAuthenticationConfig(const OAIConnectorConfiguration_authenticationConfig &authentication_config);
    bool is_authentication_config_Set() const;
    bool is_authentication_config_Valid() const;

    QList getConnectorRuntimeSettings() const;
    void setConnectorRuntimeSettings(const QList &connector_runtime_settings);
    bool is_connector_runtime_settings_Set() const;
    bool is_connector_runtime_settings_Valid() const;

    QList getSupportedApiVersions() const;
    void setSupportedApiVersions(const QList &supported_api_versions);
    bool is_supported_api_versions_Set() const;
    bool is_supported_api_versions_Valid() const;

    QList getSupportedOperators() const;
    void setSupportedOperators(const QList &supported_operators);
    bool is_supported_operators_Set() const;
    bool is_supported_operators_Valid() const;

    QList getSupportedWriteOperations() const;
    void setSupportedWriteOperations(const QList &supported_write_operations);
    bool is_supported_write_operations_Set() const;
    bool is_supported_write_operations_Valid() const;

    OAIConnectorProvisioningType getConnectorProvisioningType() const;
    void setConnectorProvisioningType(const OAIConnectorProvisioningType &connector_provisioning_type);
    bool is_connector_provisioning_type_Set() const;
    bool is_connector_provisioning_type_Valid() const;

    OAIConnectorConfiguration_connectorProvisioningConfig getConnectorProvisioningConfig() const;
    void setConnectorProvisioningConfig(const OAIConnectorConfiguration_connectorProvisioningConfig &connector_provisioning_config);
    bool is_connector_provisioning_config_Set() const;
    bool is_connector_provisioning_config_Valid() const;

    QString getLogoUrl() const;
    void setLogoUrl(const QString &logo_url);
    bool is_logo_url_Set() const;
    bool is_logo_url_Valid() const;

    QDateTime getRegisteredAt() const;
    void setRegisteredAt(const QDateTime &registered_at);
    bool is_registered_at_Set() const;
    bool is_registered_at_Valid() const;

    QString getRegisteredBy() const;
    void setRegisteredBy(const QString &registered_by);
    bool is_registered_by_Set() const;
    bool is_registered_by_Valid() const;

    QList getSupportedDataTransferTypes() const;
    void setSupportedDataTransferTypes(const QList &supported_data_transfer_types);
    bool is_supported_data_transfer_types_Set() const;
    bool is_supported_data_transfer_types_Valid() const;

    QList getSupportedDataTransferApis() const;
    void setSupportedDataTransferApis(const QList &supported_data_transfer_apis);
    bool is_supported_data_transfer_apis_Set() const;
    bool is_supported_data_transfer_apis_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_use_as_source;
    bool m_can_use_as_source_isSet;
    bool m_can_use_as_source_isValid;

    bool m_can_use_as_destination;
    bool m_can_use_as_destination_isSet;
    bool m_can_use_as_destination_isValid;

    QList m_supported_destination_connectors;
    bool m_supported_destination_connectors_isSet;
    bool m_supported_destination_connectors_isValid;

    QList m_supported_scheduling_frequencies;
    bool m_supported_scheduling_frequencies_isSet;
    bool m_supported_scheduling_frequencies_isValid;

    bool m_is_private_link_enabled;
    bool m_is_private_link_enabled_isSet;
    bool m_is_private_link_enabled_isValid;

    bool m_is_private_link_endpoint_url_required;
    bool m_is_private_link_endpoint_url_required_isSet;
    bool m_is_private_link_endpoint_url_required_isValid;

    QList m_supported_trigger_types;
    bool m_supported_trigger_types_isSet;
    bool m_supported_trigger_types_isValid;

    OAIConnectorConfiguration_connectorMetadata m_connector_metadata;
    bool m_connector_metadata_isSet;
    bool m_connector_metadata_isValid;

    OAIConnectorType m_connector_type;
    bool m_connector_type_isSet;
    bool m_connector_type_isValid;

    QString m_connector_label;
    bool m_connector_label_isSet;
    bool m_connector_label_isValid;

    QString m_connector_description;
    bool m_connector_description_isSet;
    bool m_connector_description_isValid;

    QString m_connector_owner;
    bool m_connector_owner_isSet;
    bool m_connector_owner_isValid;

    QString m_connector_name;
    bool m_connector_name_isSet;
    bool m_connector_name_isValid;

    QString m_connector_version;
    bool m_connector_version_isSet;
    bool m_connector_version_isValid;

    QString m_connector_arn;
    bool m_connector_arn_isSet;
    bool m_connector_arn_isValid;

    QList m_connector_modes;
    bool m_connector_modes_isSet;
    bool m_connector_modes_isValid;

    OAIConnectorConfiguration_authenticationConfig m_authentication_config;
    bool m_authentication_config_isSet;
    bool m_authentication_config_isValid;

    QList m_connector_runtime_settings;
    bool m_connector_runtime_settings_isSet;
    bool m_connector_runtime_settings_isValid;

    QList m_supported_api_versions;
    bool m_supported_api_versions_isSet;
    bool m_supported_api_versions_isValid;

    QList m_supported_operators;
    bool m_supported_operators_isSet;
    bool m_supported_operators_isValid;

    QList m_supported_write_operations;
    bool m_supported_write_operations_isSet;
    bool m_supported_write_operations_isValid;

    OAIConnectorProvisioningType m_connector_provisioning_type;
    bool m_connector_provisioning_type_isSet;
    bool m_connector_provisioning_type_isValid;

    OAIConnectorConfiguration_connectorProvisioningConfig m_connector_provisioning_config;
    bool m_connector_provisioning_config_isSet;
    bool m_connector_provisioning_config_isValid;

    QString m_logo_url;
    bool m_logo_url_isSet;
    bool m_logo_url_isValid;

    QDateTime m_registered_at;
    bool m_registered_at_isSet;
    bool m_registered_at_isValid;

    QString m_registered_by;
    bool m_registered_by_isSet;
    bool m_registered_by_isValid;

    QList m_supported_data_transfer_types;
    bool m_supported_data_transfer_types_isSet;
    bool m_supported_data_transfer_types_isValid;

    QList m_supported_data_transfer_apis;
    bool m_supported_data_transfer_apis_isSet;
    bool m_supported_data_transfer_apis_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeConnectorResponse_connectorConfiguration)

#endif // OAIDescribeConnectorResponse_connectorConfiguration_H
