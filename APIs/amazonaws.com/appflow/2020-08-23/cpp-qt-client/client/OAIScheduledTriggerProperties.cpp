/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledTriggerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledTriggerProperties::OAIScheduledTriggerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledTriggerProperties::OAIScheduledTriggerProperties() {
    this->initializeModel();
}

OAIScheduledTriggerProperties::~OAIScheduledTriggerProperties() {}

void OAIScheduledTriggerProperties::initializeModel() {

    m_schedule_expression_isSet = false;
    m_schedule_expression_isValid = false;

    m_data_pull_mode_isSet = false;
    m_data_pull_mode_isValid = false;

    m_schedule_start_time_isSet = false;
    m_schedule_start_time_isValid = false;

    m_schedule_end_time_isSet = false;
    m_schedule_end_time_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_schedule_offset_isSet = false;
    m_schedule_offset_isValid = false;

    m_first_execution_from_isSet = false;
    m_first_execution_from_isValid = false;

    m_flow_error_deactivation_threshold_isSet = false;
    m_flow_error_deactivation_threshold_isValid = false;
}

void OAIScheduledTriggerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledTriggerProperties::fromJsonObject(QJsonObject json) {

    m_schedule_expression_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression, json[QString("scheduleExpression")]);
    m_schedule_expression_isSet = !json[QString("scheduleExpression")].isNull() && m_schedule_expression_isValid;

    m_data_pull_mode_isValid = ::OpenAPI::fromJsonValue(m_data_pull_mode, json[QString("dataPullMode")]);
    m_data_pull_mode_isSet = !json[QString("dataPullMode")].isNull() && m_data_pull_mode_isValid;

    m_schedule_start_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_start_time, json[QString("scheduleStartTime")]);
    m_schedule_start_time_isSet = !json[QString("scheduleStartTime")].isNull() && m_schedule_start_time_isValid;

    m_schedule_end_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_end_time, json[QString("scheduleEndTime")]);
    m_schedule_end_time_isSet = !json[QString("scheduleEndTime")].isNull() && m_schedule_end_time_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_schedule_offset_isValid = ::OpenAPI::fromJsonValue(m_schedule_offset, json[QString("scheduleOffset")]);
    m_schedule_offset_isSet = !json[QString("scheduleOffset")].isNull() && m_schedule_offset_isValid;

    m_first_execution_from_isValid = ::OpenAPI::fromJsonValue(m_first_execution_from, json[QString("firstExecutionFrom")]);
    m_first_execution_from_isSet = !json[QString("firstExecutionFrom")].isNull() && m_first_execution_from_isValid;

    m_flow_error_deactivation_threshold_isValid = ::OpenAPI::fromJsonValue(m_flow_error_deactivation_threshold, json[QString("flowErrorDeactivationThreshold")]);
    m_flow_error_deactivation_threshold_isSet = !json[QString("flowErrorDeactivationThreshold")].isNull() && m_flow_error_deactivation_threshold_isValid;
}

QString OAIScheduledTriggerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledTriggerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule_expression_isSet) {
        obj.insert(QString("scheduleExpression"), ::OpenAPI::toJsonValue(m_schedule_expression));
    }
    if (m_data_pull_mode.isSet()) {
        obj.insert(QString("dataPullMode"), ::OpenAPI::toJsonValue(m_data_pull_mode));
    }
    if (m_schedule_start_time_isSet) {
        obj.insert(QString("scheduleStartTime"), ::OpenAPI::toJsonValue(m_schedule_start_time));
    }
    if (m_schedule_end_time_isSet) {
        obj.insert(QString("scheduleEndTime"), ::OpenAPI::toJsonValue(m_schedule_end_time));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_schedule_offset_isSet) {
        obj.insert(QString("scheduleOffset"), ::OpenAPI::toJsonValue(m_schedule_offset));
    }
    if (m_first_execution_from_isSet) {
        obj.insert(QString("firstExecutionFrom"), ::OpenAPI::toJsonValue(m_first_execution_from));
    }
    if (m_flow_error_deactivation_threshold_isSet) {
        obj.insert(QString("flowErrorDeactivationThreshold"), ::OpenAPI::toJsonValue(m_flow_error_deactivation_threshold));
    }
    return obj;
}

QString OAIScheduledTriggerProperties::getScheduleExpression() const {
    return m_schedule_expression;
}
void OAIScheduledTriggerProperties::setScheduleExpression(const QString &schedule_expression) {
    m_schedule_expression = schedule_expression;
    m_schedule_expression_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_expression_Set() const{
    return m_schedule_expression_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_expression_Valid() const{
    return m_schedule_expression_isValid;
}

OAIDataPullMode OAIScheduledTriggerProperties::getDataPullMode() const {
    return m_data_pull_mode;
}
void OAIScheduledTriggerProperties::setDataPullMode(const OAIDataPullMode &data_pull_mode) {
    m_data_pull_mode = data_pull_mode;
    m_data_pull_mode_isSet = true;
}

bool OAIScheduledTriggerProperties::is_data_pull_mode_Set() const{
    return m_data_pull_mode_isSet;
}

bool OAIScheduledTriggerProperties::is_data_pull_mode_Valid() const{
    return m_data_pull_mode_isValid;
}

QDateTime OAIScheduledTriggerProperties::getScheduleStartTime() const {
    return m_schedule_start_time;
}
void OAIScheduledTriggerProperties::setScheduleStartTime(const QDateTime &schedule_start_time) {
    m_schedule_start_time = schedule_start_time;
    m_schedule_start_time_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_start_time_Set() const{
    return m_schedule_start_time_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_start_time_Valid() const{
    return m_schedule_start_time_isValid;
}

QDateTime OAIScheduledTriggerProperties::getScheduleEndTime() const {
    return m_schedule_end_time;
}
void OAIScheduledTriggerProperties::setScheduleEndTime(const QDateTime &schedule_end_time) {
    m_schedule_end_time = schedule_end_time;
    m_schedule_end_time_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_end_time_Set() const{
    return m_schedule_end_time_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_end_time_Valid() const{
    return m_schedule_end_time_isValid;
}

QString OAIScheduledTriggerProperties::getTimezone() const {
    return m_timezone;
}
void OAIScheduledTriggerProperties::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIScheduledTriggerProperties::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIScheduledTriggerProperties::is_timezone_Valid() const{
    return m_timezone_isValid;
}

qint32 OAIScheduledTriggerProperties::getScheduleOffset() const {
    return m_schedule_offset;
}
void OAIScheduledTriggerProperties::setScheduleOffset(const qint32 &schedule_offset) {
    m_schedule_offset = schedule_offset;
    m_schedule_offset_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_offset_Set() const{
    return m_schedule_offset_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_offset_Valid() const{
    return m_schedule_offset_isValid;
}

QDateTime OAIScheduledTriggerProperties::getFirstExecutionFrom() const {
    return m_first_execution_from;
}
void OAIScheduledTriggerProperties::setFirstExecutionFrom(const QDateTime &first_execution_from) {
    m_first_execution_from = first_execution_from;
    m_first_execution_from_isSet = true;
}

bool OAIScheduledTriggerProperties::is_first_execution_from_Set() const{
    return m_first_execution_from_isSet;
}

bool OAIScheduledTriggerProperties::is_first_execution_from_Valid() const{
    return m_first_execution_from_isValid;
}

qint32 OAIScheduledTriggerProperties::getFlowErrorDeactivationThreshold() const {
    return m_flow_error_deactivation_threshold;
}
void OAIScheduledTriggerProperties::setFlowErrorDeactivationThreshold(const qint32 &flow_error_deactivation_threshold) {
    m_flow_error_deactivation_threshold = flow_error_deactivation_threshold;
    m_flow_error_deactivation_threshold_isSet = true;
}

bool OAIScheduledTriggerProperties::is_flow_error_deactivation_threshold_Set() const{
    return m_flow_error_deactivation_threshold_isSet;
}

bool OAIScheduledTriggerProperties::is_flow_error_deactivation_threshold_Valid() const{
    return m_flow_error_deactivation_threshold_isValid;
}

bool OAIScheduledTriggerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pull_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_execution_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_error_deactivation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledTriggerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_expression_isValid && true;
}

} // namespace OpenAPI
