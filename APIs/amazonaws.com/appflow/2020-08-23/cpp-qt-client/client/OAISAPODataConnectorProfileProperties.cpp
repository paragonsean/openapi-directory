/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISAPODataConnectorProfileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISAPODataConnectorProfileProperties::OAISAPODataConnectorProfileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISAPODataConnectorProfileProperties::OAISAPODataConnectorProfileProperties() {
    this->initializeModel();
}

OAISAPODataConnectorProfileProperties::~OAISAPODataConnectorProfileProperties() {}

void OAISAPODataConnectorProfileProperties::initializeModel() {

    m_application_host_url_isSet = false;
    m_application_host_url_isValid = false;

    m_application_service_path_isSet = false;
    m_application_service_path_isValid = false;

    m_port_number_isSet = false;
    m_port_number_isValid = false;

    m_client_number_isSet = false;
    m_client_number_isValid = false;

    m_logon_language_isSet = false;
    m_logon_language_isValid = false;

    m_private_link_service_name_isSet = false;
    m_private_link_service_name_isValid = false;

    m_o_auth_properties_isSet = false;
    m_o_auth_properties_isValid = false;

    m_disable_sso_isSet = false;
    m_disable_sso_isValid = false;
}

void OAISAPODataConnectorProfileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISAPODataConnectorProfileProperties::fromJsonObject(QJsonObject json) {

    m_application_host_url_isValid = ::OpenAPI::fromJsonValue(m_application_host_url, json[QString("applicationHostUrl")]);
    m_application_host_url_isSet = !json[QString("applicationHostUrl")].isNull() && m_application_host_url_isValid;

    m_application_service_path_isValid = ::OpenAPI::fromJsonValue(m_application_service_path, json[QString("applicationServicePath")]);
    m_application_service_path_isSet = !json[QString("applicationServicePath")].isNull() && m_application_service_path_isValid;

    m_port_number_isValid = ::OpenAPI::fromJsonValue(m_port_number, json[QString("portNumber")]);
    m_port_number_isSet = !json[QString("portNumber")].isNull() && m_port_number_isValid;

    m_client_number_isValid = ::OpenAPI::fromJsonValue(m_client_number, json[QString("clientNumber")]);
    m_client_number_isSet = !json[QString("clientNumber")].isNull() && m_client_number_isValid;

    m_logon_language_isValid = ::OpenAPI::fromJsonValue(m_logon_language, json[QString("logonLanguage")]);
    m_logon_language_isSet = !json[QString("logonLanguage")].isNull() && m_logon_language_isValid;

    m_private_link_service_name_isValid = ::OpenAPI::fromJsonValue(m_private_link_service_name, json[QString("privateLinkServiceName")]);
    m_private_link_service_name_isSet = !json[QString("privateLinkServiceName")].isNull() && m_private_link_service_name_isValid;

    m_o_auth_properties_isValid = ::OpenAPI::fromJsonValue(m_o_auth_properties, json[QString("oAuthProperties")]);
    m_o_auth_properties_isSet = !json[QString("oAuthProperties")].isNull() && m_o_auth_properties_isValid;

    m_disable_sso_isValid = ::OpenAPI::fromJsonValue(m_disable_sso, json[QString("disableSSO")]);
    m_disable_sso_isSet = !json[QString("disableSSO")].isNull() && m_disable_sso_isValid;
}

QString OAISAPODataConnectorProfileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISAPODataConnectorProfileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_host_url_isSet) {
        obj.insert(QString("applicationHostUrl"), ::OpenAPI::toJsonValue(m_application_host_url));
    }
    if (m_application_service_path_isSet) {
        obj.insert(QString("applicationServicePath"), ::OpenAPI::toJsonValue(m_application_service_path));
    }
    if (m_port_number_isSet) {
        obj.insert(QString("portNumber"), ::OpenAPI::toJsonValue(m_port_number));
    }
    if (m_client_number_isSet) {
        obj.insert(QString("clientNumber"), ::OpenAPI::toJsonValue(m_client_number));
    }
    if (m_logon_language_isSet) {
        obj.insert(QString("logonLanguage"), ::OpenAPI::toJsonValue(m_logon_language));
    }
    if (m_private_link_service_name_isSet) {
        obj.insert(QString("privateLinkServiceName"), ::OpenAPI::toJsonValue(m_private_link_service_name));
    }
    if (m_o_auth_properties.isSet()) {
        obj.insert(QString("oAuthProperties"), ::OpenAPI::toJsonValue(m_o_auth_properties));
    }
    if (m_disable_sso_isSet) {
        obj.insert(QString("disableSSO"), ::OpenAPI::toJsonValue(m_disable_sso));
    }
    return obj;
}

QString OAISAPODataConnectorProfileProperties::getApplicationHostUrl() const {
    return m_application_host_url;
}
void OAISAPODataConnectorProfileProperties::setApplicationHostUrl(const QString &application_host_url) {
    m_application_host_url = application_host_url;
    m_application_host_url_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_application_host_url_Set() const{
    return m_application_host_url_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_application_host_url_Valid() const{
    return m_application_host_url_isValid;
}

QString OAISAPODataConnectorProfileProperties::getApplicationServicePath() const {
    return m_application_service_path;
}
void OAISAPODataConnectorProfileProperties::setApplicationServicePath(const QString &application_service_path) {
    m_application_service_path = application_service_path;
    m_application_service_path_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_application_service_path_Set() const{
    return m_application_service_path_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_application_service_path_Valid() const{
    return m_application_service_path_isValid;
}

qint32 OAISAPODataConnectorProfileProperties::getPortNumber() const {
    return m_port_number;
}
void OAISAPODataConnectorProfileProperties::setPortNumber(const qint32 &port_number) {
    m_port_number = port_number;
    m_port_number_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_port_number_Set() const{
    return m_port_number_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_port_number_Valid() const{
    return m_port_number_isValid;
}

QString OAISAPODataConnectorProfileProperties::getClientNumber() const {
    return m_client_number;
}
void OAISAPODataConnectorProfileProperties::setClientNumber(const QString &client_number) {
    m_client_number = client_number;
    m_client_number_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_client_number_Set() const{
    return m_client_number_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_client_number_Valid() const{
    return m_client_number_isValid;
}

QString OAISAPODataConnectorProfileProperties::getLogonLanguage() const {
    return m_logon_language;
}
void OAISAPODataConnectorProfileProperties::setLogonLanguage(const QString &logon_language) {
    m_logon_language = logon_language;
    m_logon_language_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_logon_language_Set() const{
    return m_logon_language_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_logon_language_Valid() const{
    return m_logon_language_isValid;
}

QString OAISAPODataConnectorProfileProperties::getPrivateLinkServiceName() const {
    return m_private_link_service_name;
}
void OAISAPODataConnectorProfileProperties::setPrivateLinkServiceName(const QString &private_link_service_name) {
    m_private_link_service_name = private_link_service_name;
    m_private_link_service_name_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_private_link_service_name_Set() const{
    return m_private_link_service_name_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_private_link_service_name_Valid() const{
    return m_private_link_service_name_isValid;
}

OAISAPODataConnectorProfileProperties_oAuthProperties OAISAPODataConnectorProfileProperties::getOAuthProperties() const {
    return m_o_auth_properties;
}
void OAISAPODataConnectorProfileProperties::setOAuthProperties(const OAISAPODataConnectorProfileProperties_oAuthProperties &o_auth_properties) {
    m_o_auth_properties = o_auth_properties;
    m_o_auth_properties_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_o_auth_properties_Set() const{
    return m_o_auth_properties_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_o_auth_properties_Valid() const{
    return m_o_auth_properties_isValid;
}

bool OAISAPODataConnectorProfileProperties::getDisableSso() const {
    return m_disable_sso;
}
void OAISAPODataConnectorProfileProperties::setDisableSso(const bool &disable_sso) {
    m_disable_sso = disable_sso;
    m_disable_sso_isSet = true;
}

bool OAISAPODataConnectorProfileProperties::is_disable_sso_Set() const{
    return m_disable_sso_isSet;
}

bool OAISAPODataConnectorProfileProperties::is_disable_sso_Valid() const{
    return m_disable_sso_isValid;
}

bool OAISAPODataConnectorProfileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_host_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_service_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logon_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_link_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_sso_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISAPODataConnectorProfileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_host_url_isValid && m_application_service_path_isValid && m_port_number_isValid && m_client_number_isValid && true;
}

} // namespace OpenAPI
