/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITriggerProperties_Scheduled.h
 *
 * 
 */

#ifndef OAITriggerProperties_Scheduled_H
#define OAITriggerProperties_Scheduled_H

#include <QJsonObject>

#include "OAIDataPullMode.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITriggerProperties_Scheduled : public OAIObject {
public:
    OAITriggerProperties_Scheduled();
    OAITriggerProperties_Scheduled(QString json);
    ~OAITriggerProperties_Scheduled() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getScheduleExpression() const;
    void setScheduleExpression(const QString &schedule_expression);
    bool is_schedule_expression_Set() const;
    bool is_schedule_expression_Valid() const;

    OAIDataPullMode getDataPullMode() const;
    void setDataPullMode(const OAIDataPullMode &data_pull_mode);
    bool is_data_pull_mode_Set() const;
    bool is_data_pull_mode_Valid() const;

    QDateTime getScheduleStartTime() const;
    void setScheduleStartTime(const QDateTime &schedule_start_time);
    bool is_schedule_start_time_Set() const;
    bool is_schedule_start_time_Valid() const;

    QDateTime getScheduleEndTime() const;
    void setScheduleEndTime(const QDateTime &schedule_end_time);
    bool is_schedule_end_time_Set() const;
    bool is_schedule_end_time_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    qint32 getScheduleOffset() const;
    void setScheduleOffset(const qint32 &schedule_offset);
    bool is_schedule_offset_Set() const;
    bool is_schedule_offset_Valid() const;

    QDateTime getFirstExecutionFrom() const;
    void setFirstExecutionFrom(const QDateTime &first_execution_from);
    bool is_first_execution_from_Set() const;
    bool is_first_execution_from_Valid() const;

    qint32 getFlowErrorDeactivationThreshold() const;
    void setFlowErrorDeactivationThreshold(const qint32 &flow_error_deactivation_threshold);
    bool is_flow_error_deactivation_threshold_Set() const;
    bool is_flow_error_deactivation_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_schedule_expression;
    bool m_schedule_expression_isSet;
    bool m_schedule_expression_isValid;

    OAIDataPullMode m_data_pull_mode;
    bool m_data_pull_mode_isSet;
    bool m_data_pull_mode_isValid;

    QDateTime m_schedule_start_time;
    bool m_schedule_start_time_isSet;
    bool m_schedule_start_time_isValid;

    QDateTime m_schedule_end_time;
    bool m_schedule_end_time_isSet;
    bool m_schedule_end_time_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    qint32 m_schedule_offset;
    bool m_schedule_offset_isSet;
    bool m_schedule_offset_isValid;

    QDateTime m_first_execution_from;
    bool m_first_execution_from_isSet;
    bool m_first_execution_from_isValid;

    qint32 m_flow_error_deactivation_threshold;
    bool m_flow_error_deactivation_threshold_isSet;
    bool m_flow_error_deactivation_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITriggerProperties_Scheduled)

#endif // OAITriggerProperties_Scheduled_H
