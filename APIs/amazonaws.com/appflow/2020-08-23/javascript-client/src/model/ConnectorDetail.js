/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorProvisioningType from './ConnectorProvisioningType';
import ConnectorType from './ConnectorType';

/**
 * The ConnectorDetail model module.
 * @module model/ConnectorDetail
 * @version 2020-08-23
 */
class ConnectorDetail {
    /**
     * Constructs a new <code>ConnectorDetail</code>.
     * Information about the registered connector.
     * @alias module:model/ConnectorDetail
     */
    constructor() { 
        
        ConnectorDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorDetail} obj Optional instance to populate.
     * @return {module:model/ConnectorDetail} The populated <code>ConnectorDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorDetail();

            if (data.hasOwnProperty('connectorDescription')) {
                obj['connectorDescription'] = ApiClient.convertToType(data['connectorDescription'], 'String');
            }
            if (data.hasOwnProperty('connectorName')) {
                obj['connectorName'] = ApiClient.convertToType(data['connectorName'], 'String');
            }
            if (data.hasOwnProperty('connectorOwner')) {
                obj['connectorOwner'] = ApiClient.convertToType(data['connectorOwner'], 'String');
            }
            if (data.hasOwnProperty('connectorVersion')) {
                obj['connectorVersion'] = ApiClient.convertToType(data['connectorVersion'], 'String');
            }
            if (data.hasOwnProperty('applicationType')) {
                obj['applicationType'] = ApiClient.convertToType(data['applicationType'], 'String');
            }
            if (data.hasOwnProperty('connectorType')) {
                obj['connectorType'] = ApiClient.convertToType(data['connectorType'], ConnectorType);
            }
            if (data.hasOwnProperty('connectorLabel')) {
                obj['connectorLabel'] = ApiClient.convertToType(data['connectorLabel'], 'String');
            }
            if (data.hasOwnProperty('registeredAt')) {
                obj['registeredAt'] = ApiClient.convertToType(data['registeredAt'], 'Date');
            }
            if (data.hasOwnProperty('registeredBy')) {
                obj['registeredBy'] = ApiClient.convertToType(data['registeredBy'], 'String');
            }
            if (data.hasOwnProperty('connectorProvisioningType')) {
                obj['connectorProvisioningType'] = ApiClient.convertToType(data['connectorProvisioningType'], ConnectorProvisioningType);
            }
            if (data.hasOwnProperty('connectorModes')) {
                obj['connectorModes'] = ApiClient.convertToType(data['connectorModes'], Array);
            }
            if (data.hasOwnProperty('supportedDataTransferTypes')) {
                obj['supportedDataTransferTypes'] = ApiClient.convertToType(data['supportedDataTransferTypes'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `connectorDescription`
        if (data['connectorDescription']) { // data not null
          String.validateJSON(data['connectorDescription']);
        }
        // validate the optional field `connectorName`
        if (data['connectorName']) { // data not null
          String.validateJSON(data['connectorName']);
        }
        // validate the optional field `connectorOwner`
        if (data['connectorOwner']) { // data not null
          String.validateJSON(data['connectorOwner']);
        }
        // validate the optional field `connectorVersion`
        if (data['connectorVersion']) { // data not null
          String.validateJSON(data['connectorVersion']);
        }
        // validate the optional field `applicationType`
        if (data['applicationType']) { // data not null
          String.validateJSON(data['applicationType']);
        }
        // validate the optional field `connectorType`
        if (data['connectorType']) { // data not null
          ConnectorType.validateJSON(data['connectorType']);
        }
        // validate the optional field `connectorLabel`
        if (data['connectorLabel']) { // data not null
          String.validateJSON(data['connectorLabel']);
        }
        // validate the optional field `registeredAt`
        if (data['registeredAt']) { // data not null
          Date.validateJSON(data['registeredAt']);
        }
        // validate the optional field `registeredBy`
        if (data['registeredBy']) { // data not null
          String.validateJSON(data['registeredBy']);
        }
        // validate the optional field `connectorProvisioningType`
        if (data['connectorProvisioningType']) { // data not null
          ConnectorProvisioningType.validateJSON(data['connectorProvisioningType']);
        }
        // validate the optional field `connectorModes`
        if (data['connectorModes']) { // data not null
          Array.validateJSON(data['connectorModes']);
        }
        // validate the optional field `supportedDataTransferTypes`
        if (data['supportedDataTransferTypes']) { // data not null
          Array.validateJSON(data['supportedDataTransferTypes']);
        }

        return true;
    }


}



/**
 * @member {String} connectorDescription
 */
ConnectorDetail.prototype['connectorDescription'] = undefined;

/**
 * @member {String} connectorName
 */
ConnectorDetail.prototype['connectorName'] = undefined;

/**
 * @member {String} connectorOwner
 */
ConnectorDetail.prototype['connectorOwner'] = undefined;

/**
 * @member {String} connectorVersion
 */
ConnectorDetail.prototype['connectorVersion'] = undefined;

/**
 * @member {String} applicationType
 */
ConnectorDetail.prototype['applicationType'] = undefined;

/**
 * @member {module:model/ConnectorType} connectorType
 */
ConnectorDetail.prototype['connectorType'] = undefined;

/**
 * @member {String} connectorLabel
 */
ConnectorDetail.prototype['connectorLabel'] = undefined;

/**
 * @member {Date} registeredAt
 */
ConnectorDetail.prototype['registeredAt'] = undefined;

/**
 * @member {String} registeredBy
 */
ConnectorDetail.prototype['registeredBy'] = undefined;

/**
 * @member {module:model/ConnectorProvisioningType} connectorProvisioningType
 */
ConnectorDetail.prototype['connectorProvisioningType'] = undefined;

/**
 * @member {Array} connectorModes
 */
ConnectorDetail.prototype['connectorModes'] = undefined;

/**
 * @member {Array} supportedDataTransferTypes
 */
ConnectorDetail.prototype['supportedDataTransferTypes'] = undefined;






export default ConnectorDetail;

