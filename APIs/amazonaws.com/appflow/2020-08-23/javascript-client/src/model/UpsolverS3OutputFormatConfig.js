/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationConfig from './AggregationConfig';
import FileType from './FileType';
import PrefixConfig from './PrefixConfig';

/**
 * The UpsolverS3OutputFormatConfig model module.
 * @module model/UpsolverS3OutputFormatConfig
 * @version 2020-08-23
 */
class UpsolverS3OutputFormatConfig {
    /**
     * Constructs a new <code>UpsolverS3OutputFormatConfig</code>.
     *  The configuration that determines how Amazon AppFlow formats the flow output data when Upsolver is used as the destination. 
     * @alias module:model/UpsolverS3OutputFormatConfig
     * @param prefixConfig {module:model/PrefixConfig} 
     */
    constructor(prefixConfig) { 
        
        UpsolverS3OutputFormatConfig.initialize(this, prefixConfig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, prefixConfig) { 
        obj['prefixConfig'] = prefixConfig;
    }

    /**
     * Constructs a <code>UpsolverS3OutputFormatConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpsolverS3OutputFormatConfig} obj Optional instance to populate.
     * @return {module:model/UpsolverS3OutputFormatConfig} The populated <code>UpsolverS3OutputFormatConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpsolverS3OutputFormatConfig();

            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], FileType);
            }
            if (data.hasOwnProperty('prefixConfig')) {
                obj['prefixConfig'] = PrefixConfig.constructFromObject(data['prefixConfig']);
            }
            if (data.hasOwnProperty('aggregationConfig')) {
                obj['aggregationConfig'] = AggregationConfig.constructFromObject(data['aggregationConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpsolverS3OutputFormatConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpsolverS3OutputFormatConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpsolverS3OutputFormatConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `fileType`
        if (data['fileType']) { // data not null
          FileType.validateJSON(data['fileType']);
        }
        // validate the optional field `prefixConfig`
        if (data['prefixConfig']) { // data not null
          PrefixConfig.validateJSON(data['prefixConfig']);
        }
        // validate the optional field `aggregationConfig`
        if (data['aggregationConfig']) { // data not null
          AggregationConfig.validateJSON(data['aggregationConfig']);
        }

        return true;
    }


}

UpsolverS3OutputFormatConfig.RequiredProperties = ["prefixConfig"];

/**
 * @member {module:model/FileType} fileType
 */
UpsolverS3OutputFormatConfig.prototype['fileType'] = undefined;

/**
 * @member {module:model/PrefixConfig} prefixConfig
 */
UpsolverS3OutputFormatConfig.prototype['prefixConfig'] = undefined;

/**
 * @member {module:model/AggregationConfig} aggregationConfig
 */
UpsolverS3OutputFormatConfig.prototype['aggregationConfig'] = undefined;






export default UpsolverS3OutputFormatConfig;

