/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorConfiguration from './ConnectorConfiguration';
import ConnectorConfigurationAuthenticationConfig from './ConnectorConfigurationAuthenticationConfig';
import ConnectorConfigurationConnectorMetadata from './ConnectorConfigurationConnectorMetadata';
import ConnectorConfigurationConnectorProvisioningConfig from './ConnectorConfigurationConnectorProvisioningConfig';
import ConnectorProvisioningType from './ConnectorProvisioningType';
import ConnectorType from './ConnectorType';

/**
 * The DescribeConnectorResponseConnectorConfiguration model module.
 * @module model/DescribeConnectorResponseConnectorConfiguration
 * @version 2020-08-23
 */
class DescribeConnectorResponseConnectorConfiguration {
    /**
     * Constructs a new <code>DescribeConnectorResponseConnectorConfiguration</code>.
     * @alias module:model/DescribeConnectorResponseConnectorConfiguration
     * @implements module:model/ConnectorConfiguration
     */
    constructor() { 
        ConnectorConfiguration.initialize(this);
        DescribeConnectorResponseConnectorConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeConnectorResponseConnectorConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeConnectorResponseConnectorConfiguration} obj Optional instance to populate.
     * @return {module:model/DescribeConnectorResponseConnectorConfiguration} The populated <code>DescribeConnectorResponseConnectorConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeConnectorResponseConnectorConfiguration();
            ConnectorConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('canUseAsSource')) {
                obj['canUseAsSource'] = ApiClient.convertToType(data['canUseAsSource'], 'Boolean');
            }
            if (data.hasOwnProperty('canUseAsDestination')) {
                obj['canUseAsDestination'] = ApiClient.convertToType(data['canUseAsDestination'], 'Boolean');
            }
            if (data.hasOwnProperty('supportedDestinationConnectors')) {
                obj['supportedDestinationConnectors'] = ApiClient.convertToType(data['supportedDestinationConnectors'], Array);
            }
            if (data.hasOwnProperty('supportedSchedulingFrequencies')) {
                obj['supportedSchedulingFrequencies'] = ApiClient.convertToType(data['supportedSchedulingFrequencies'], Array);
            }
            if (data.hasOwnProperty('isPrivateLinkEnabled')) {
                obj['isPrivateLinkEnabled'] = ApiClient.convertToType(data['isPrivateLinkEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isPrivateLinkEndpointUrlRequired')) {
                obj['isPrivateLinkEndpointUrlRequired'] = ApiClient.convertToType(data['isPrivateLinkEndpointUrlRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('supportedTriggerTypes')) {
                obj['supportedTriggerTypes'] = ApiClient.convertToType(data['supportedTriggerTypes'], Array);
            }
            if (data.hasOwnProperty('connectorMetadata')) {
                obj['connectorMetadata'] = ConnectorConfigurationConnectorMetadata.constructFromObject(data['connectorMetadata']);
            }
            if (data.hasOwnProperty('connectorType')) {
                obj['connectorType'] = ApiClient.convertToType(data['connectorType'], ConnectorType);
            }
            if (data.hasOwnProperty('connectorLabel')) {
                obj['connectorLabel'] = ApiClient.convertToType(data['connectorLabel'], 'String');
            }
            if (data.hasOwnProperty('connectorDescription')) {
                obj['connectorDescription'] = ApiClient.convertToType(data['connectorDescription'], 'String');
            }
            if (data.hasOwnProperty('connectorOwner')) {
                obj['connectorOwner'] = ApiClient.convertToType(data['connectorOwner'], 'String');
            }
            if (data.hasOwnProperty('connectorName')) {
                obj['connectorName'] = ApiClient.convertToType(data['connectorName'], 'String');
            }
            if (data.hasOwnProperty('connectorVersion')) {
                obj['connectorVersion'] = ApiClient.convertToType(data['connectorVersion'], 'String');
            }
            if (data.hasOwnProperty('connectorArn')) {
                obj['connectorArn'] = ApiClient.convertToType(data['connectorArn'], 'String');
            }
            if (data.hasOwnProperty('connectorModes')) {
                obj['connectorModes'] = ApiClient.convertToType(data['connectorModes'], Array);
            }
            if (data.hasOwnProperty('authenticationConfig')) {
                obj['authenticationConfig'] = ConnectorConfigurationAuthenticationConfig.constructFromObject(data['authenticationConfig']);
            }
            if (data.hasOwnProperty('connectorRuntimeSettings')) {
                obj['connectorRuntimeSettings'] = ApiClient.convertToType(data['connectorRuntimeSettings'], Array);
            }
            if (data.hasOwnProperty('supportedApiVersions')) {
                obj['supportedApiVersions'] = ApiClient.convertToType(data['supportedApiVersions'], Array);
            }
            if (data.hasOwnProperty('supportedOperators')) {
                obj['supportedOperators'] = ApiClient.convertToType(data['supportedOperators'], Array);
            }
            if (data.hasOwnProperty('supportedWriteOperations')) {
                obj['supportedWriteOperations'] = ApiClient.convertToType(data['supportedWriteOperations'], Array);
            }
            if (data.hasOwnProperty('connectorProvisioningType')) {
                obj['connectorProvisioningType'] = ApiClient.convertToType(data['connectorProvisioningType'], ConnectorProvisioningType);
            }
            if (data.hasOwnProperty('connectorProvisioningConfig')) {
                obj['connectorProvisioningConfig'] = ConnectorConfigurationConnectorProvisioningConfig.constructFromObject(data['connectorProvisioningConfig']);
            }
            if (data.hasOwnProperty('logoURL')) {
                obj['logoURL'] = ApiClient.convertToType(data['logoURL'], 'String');
            }
            if (data.hasOwnProperty('registeredAt')) {
                obj['registeredAt'] = ApiClient.convertToType(data['registeredAt'], 'Date');
            }
            if (data.hasOwnProperty('registeredBy')) {
                obj['registeredBy'] = ApiClient.convertToType(data['registeredBy'], 'String');
            }
            if (data.hasOwnProperty('supportedDataTransferTypes')) {
                obj['supportedDataTransferTypes'] = ApiClient.convertToType(data['supportedDataTransferTypes'], Array);
            }
            if (data.hasOwnProperty('supportedDataTransferApis')) {
                obj['supportedDataTransferApis'] = ApiClient.convertToType(data['supportedDataTransferApis'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeConnectorResponseConnectorConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeConnectorResponseConnectorConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `canUseAsSource`
        if (data['canUseAsSource']) { // data not null
          Boolean.validateJSON(data['canUseAsSource']);
        }
        // validate the optional field `canUseAsDestination`
        if (data['canUseAsDestination']) { // data not null
          Boolean.validateJSON(data['canUseAsDestination']);
        }
        // validate the optional field `supportedDestinationConnectors`
        if (data['supportedDestinationConnectors']) { // data not null
          Array.validateJSON(data['supportedDestinationConnectors']);
        }
        // validate the optional field `supportedSchedulingFrequencies`
        if (data['supportedSchedulingFrequencies']) { // data not null
          Array.validateJSON(data['supportedSchedulingFrequencies']);
        }
        // validate the optional field `isPrivateLinkEnabled`
        if (data['isPrivateLinkEnabled']) { // data not null
          Boolean.validateJSON(data['isPrivateLinkEnabled']);
        }
        // validate the optional field `isPrivateLinkEndpointUrlRequired`
        if (data['isPrivateLinkEndpointUrlRequired']) { // data not null
          Boolean.validateJSON(data['isPrivateLinkEndpointUrlRequired']);
        }
        // validate the optional field `supportedTriggerTypes`
        if (data['supportedTriggerTypes']) { // data not null
          Array.validateJSON(data['supportedTriggerTypes']);
        }
        // validate the optional field `connectorMetadata`
        if (data['connectorMetadata']) { // data not null
          ConnectorConfigurationConnectorMetadata.validateJSON(data['connectorMetadata']);
        }
        // validate the optional field `connectorType`
        if (data['connectorType']) { // data not null
          ConnectorType.validateJSON(data['connectorType']);
        }
        // validate the optional field `connectorLabel`
        if (data['connectorLabel']) { // data not null
          String.validateJSON(data['connectorLabel']);
        }
        // validate the optional field `connectorDescription`
        if (data['connectorDescription']) { // data not null
          String.validateJSON(data['connectorDescription']);
        }
        // validate the optional field `connectorOwner`
        if (data['connectorOwner']) { // data not null
          String.validateJSON(data['connectorOwner']);
        }
        // validate the optional field `connectorName`
        if (data['connectorName']) { // data not null
          String.validateJSON(data['connectorName']);
        }
        // validate the optional field `connectorVersion`
        if (data['connectorVersion']) { // data not null
          String.validateJSON(data['connectorVersion']);
        }
        // validate the optional field `connectorArn`
        if (data['connectorArn']) { // data not null
          String.validateJSON(data['connectorArn']);
        }
        // validate the optional field `connectorModes`
        if (data['connectorModes']) { // data not null
          Array.validateJSON(data['connectorModes']);
        }
        // validate the optional field `authenticationConfig`
        if (data['authenticationConfig']) { // data not null
          ConnectorConfigurationAuthenticationConfig.validateJSON(data['authenticationConfig']);
        }
        // validate the optional field `connectorRuntimeSettings`
        if (data['connectorRuntimeSettings']) { // data not null
          Array.validateJSON(data['connectorRuntimeSettings']);
        }
        // validate the optional field `supportedApiVersions`
        if (data['supportedApiVersions']) { // data not null
          Array.validateJSON(data['supportedApiVersions']);
        }
        // validate the optional field `supportedOperators`
        if (data['supportedOperators']) { // data not null
          Array.validateJSON(data['supportedOperators']);
        }
        // validate the optional field `supportedWriteOperations`
        if (data['supportedWriteOperations']) { // data not null
          Array.validateJSON(data['supportedWriteOperations']);
        }
        // validate the optional field `connectorProvisioningType`
        if (data['connectorProvisioningType']) { // data not null
          ConnectorProvisioningType.validateJSON(data['connectorProvisioningType']);
        }
        // validate the optional field `connectorProvisioningConfig`
        if (data['connectorProvisioningConfig']) { // data not null
          ConnectorConfigurationConnectorProvisioningConfig.validateJSON(data['connectorProvisioningConfig']);
        }
        // validate the optional field `logoURL`
        if (data['logoURL']) { // data not null
          String.validateJSON(data['logoURL']);
        }
        // validate the optional field `registeredAt`
        if (data['registeredAt']) { // data not null
          Date.validateJSON(data['registeredAt']);
        }
        // validate the optional field `registeredBy`
        if (data['registeredBy']) { // data not null
          String.validateJSON(data['registeredBy']);
        }
        // validate the optional field `supportedDataTransferTypes`
        if (data['supportedDataTransferTypes']) { // data not null
          Array.validateJSON(data['supportedDataTransferTypes']);
        }
        // validate the optional field `supportedDataTransferApis`
        if (data['supportedDataTransferApis']) { // data not null
          Array.validateJSON(data['supportedDataTransferApis']);
        }

        return true;
    }


}



/**
 * @member {Boolean} canUseAsSource
 */
DescribeConnectorResponseConnectorConfiguration.prototype['canUseAsSource'] = undefined;

/**
 * @member {Boolean} canUseAsDestination
 */
DescribeConnectorResponseConnectorConfiguration.prototype['canUseAsDestination'] = undefined;

/**
 * @member {Array} supportedDestinationConnectors
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedDestinationConnectors'] = undefined;

/**
 * @member {Array} supportedSchedulingFrequencies
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedSchedulingFrequencies'] = undefined;

/**
 * @member {Boolean} isPrivateLinkEnabled
 */
DescribeConnectorResponseConnectorConfiguration.prototype['isPrivateLinkEnabled'] = undefined;

/**
 * @member {Boolean} isPrivateLinkEndpointUrlRequired
 */
DescribeConnectorResponseConnectorConfiguration.prototype['isPrivateLinkEndpointUrlRequired'] = undefined;

/**
 * @member {Array} supportedTriggerTypes
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedTriggerTypes'] = undefined;

/**
 * @member {module:model/ConnectorConfigurationConnectorMetadata} connectorMetadata
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorMetadata'] = undefined;

/**
 * @member {module:model/ConnectorType} connectorType
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorType'] = undefined;

/**
 * @member {String} connectorLabel
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorLabel'] = undefined;

/**
 * @member {String} connectorDescription
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorDescription'] = undefined;

/**
 * @member {String} connectorOwner
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorOwner'] = undefined;

/**
 * @member {String} connectorName
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorName'] = undefined;

/**
 * @member {String} connectorVersion
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorVersion'] = undefined;

/**
 * @member {String} connectorArn
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorArn'] = undefined;

/**
 * @member {Array} connectorModes
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorModes'] = undefined;

/**
 * @member {module:model/ConnectorConfigurationAuthenticationConfig} authenticationConfig
 */
DescribeConnectorResponseConnectorConfiguration.prototype['authenticationConfig'] = undefined;

/**
 * @member {Array} connectorRuntimeSettings
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorRuntimeSettings'] = undefined;

/**
 * @member {Array} supportedApiVersions
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedApiVersions'] = undefined;

/**
 * @member {Array} supportedOperators
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedOperators'] = undefined;

/**
 * @member {Array} supportedWriteOperations
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedWriteOperations'] = undefined;

/**
 * @member {module:model/ConnectorProvisioningType} connectorProvisioningType
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorProvisioningType'] = undefined;

/**
 * @member {module:model/ConnectorConfigurationConnectorProvisioningConfig} connectorProvisioningConfig
 */
DescribeConnectorResponseConnectorConfiguration.prototype['connectorProvisioningConfig'] = undefined;

/**
 * @member {String} logoURL
 */
DescribeConnectorResponseConnectorConfiguration.prototype['logoURL'] = undefined;

/**
 * @member {Date} registeredAt
 */
DescribeConnectorResponseConnectorConfiguration.prototype['registeredAt'] = undefined;

/**
 * @member {String} registeredBy
 */
DescribeConnectorResponseConnectorConfiguration.prototype['registeredBy'] = undefined;

/**
 * @member {Array} supportedDataTransferTypes
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedDataTransferTypes'] = undefined;

/**
 * @member {Array} supportedDataTransferApis
 */
DescribeConnectorResponseConnectorConfiguration.prototype['supportedDataTransferApis'] = undefined;


// Implement ConnectorConfiguration interface:
/**
 * @member {Boolean} canUseAsSource
 */
ConnectorConfiguration.prototype['canUseAsSource'] = undefined;
/**
 * @member {Boolean} canUseAsDestination
 */
ConnectorConfiguration.prototype['canUseAsDestination'] = undefined;
/**
 * @member {Array} supportedDestinationConnectors
 */
ConnectorConfiguration.prototype['supportedDestinationConnectors'] = undefined;
/**
 * @member {Array} supportedSchedulingFrequencies
 */
ConnectorConfiguration.prototype['supportedSchedulingFrequencies'] = undefined;
/**
 * @member {Boolean} isPrivateLinkEnabled
 */
ConnectorConfiguration.prototype['isPrivateLinkEnabled'] = undefined;
/**
 * @member {Boolean} isPrivateLinkEndpointUrlRequired
 */
ConnectorConfiguration.prototype['isPrivateLinkEndpointUrlRequired'] = undefined;
/**
 * @member {Array} supportedTriggerTypes
 */
ConnectorConfiguration.prototype['supportedTriggerTypes'] = undefined;
/**
 * @member {module:model/ConnectorConfigurationConnectorMetadata} connectorMetadata
 */
ConnectorConfiguration.prototype['connectorMetadata'] = undefined;
/**
 * @member {module:model/ConnectorType} connectorType
 */
ConnectorConfiguration.prototype['connectorType'] = undefined;
/**
 * @member {String} connectorLabel
 */
ConnectorConfiguration.prototype['connectorLabel'] = undefined;
/**
 * @member {String} connectorDescription
 */
ConnectorConfiguration.prototype['connectorDescription'] = undefined;
/**
 * @member {String} connectorOwner
 */
ConnectorConfiguration.prototype['connectorOwner'] = undefined;
/**
 * @member {String} connectorName
 */
ConnectorConfiguration.prototype['connectorName'] = undefined;
/**
 * @member {String} connectorVersion
 */
ConnectorConfiguration.prototype['connectorVersion'] = undefined;
/**
 * @member {String} connectorArn
 */
ConnectorConfiguration.prototype['connectorArn'] = undefined;
/**
 * @member {Array} connectorModes
 */
ConnectorConfiguration.prototype['connectorModes'] = undefined;
/**
 * @member {module:model/ConnectorConfigurationAuthenticationConfig} authenticationConfig
 */
ConnectorConfiguration.prototype['authenticationConfig'] = undefined;
/**
 * @member {Array} connectorRuntimeSettings
 */
ConnectorConfiguration.prototype['connectorRuntimeSettings'] = undefined;
/**
 * @member {Array} supportedApiVersions
 */
ConnectorConfiguration.prototype['supportedApiVersions'] = undefined;
/**
 * @member {Array} supportedOperators
 */
ConnectorConfiguration.prototype['supportedOperators'] = undefined;
/**
 * @member {Array} supportedWriteOperations
 */
ConnectorConfiguration.prototype['supportedWriteOperations'] = undefined;
/**
 * @member {module:model/ConnectorProvisioningType} connectorProvisioningType
 */
ConnectorConfiguration.prototype['connectorProvisioningType'] = undefined;
/**
 * @member {module:model/ConnectorConfigurationConnectorProvisioningConfig} connectorProvisioningConfig
 */
ConnectorConfiguration.prototype['connectorProvisioningConfig'] = undefined;
/**
 * @member {String} logoURL
 */
ConnectorConfiguration.prototype['logoURL'] = undefined;
/**
 * @member {Date} registeredAt
 */
ConnectorConfiguration.prototype['registeredAt'] = undefined;
/**
 * @member {String} registeredBy
 */
ConnectorConfiguration.prototype['registeredBy'] = undefined;
/**
 * @member {Array} supportedDataTransferTypes
 */
ConnectorConfiguration.prototype['supportedDataTransferTypes'] = undefined;
/**
 * @member {Array} supportedDataTransferApis
 */
ConnectorConfiguration.prototype['supportedDataTransferApis'] = undefined;




export default DescribeConnectorResponseConnectorConfiguration;

