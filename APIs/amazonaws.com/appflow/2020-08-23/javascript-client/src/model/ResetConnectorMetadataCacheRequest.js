/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResetConnectorMetadataCacheRequest model module.
 * @module model/ResetConnectorMetadataCacheRequest
 * @version 2020-08-23
 */
class ResetConnectorMetadataCacheRequest {
    /**
     * Constructs a new <code>ResetConnectorMetadataCacheRequest</code>.
     * @alias module:model/ResetConnectorMetadataCacheRequest
     */
    constructor() { 
        
        ResetConnectorMetadataCacheRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResetConnectorMetadataCacheRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResetConnectorMetadataCacheRequest} obj Optional instance to populate.
     * @return {module:model/ResetConnectorMetadataCacheRequest} The populated <code>ResetConnectorMetadataCacheRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResetConnectorMetadataCacheRequest();

            if (data.hasOwnProperty('connectorProfileName')) {
                obj['connectorProfileName'] = ApiClient.convertToType(data['connectorProfileName'], 'String');
            }
            if (data.hasOwnProperty('connectorType')) {
                obj['connectorType'] = ApiClient.convertToType(data['connectorType'], 'String');
            }
            if (data.hasOwnProperty('connectorEntityName')) {
                obj['connectorEntityName'] = ApiClient.convertToType(data['connectorEntityName'], 'String');
            }
            if (data.hasOwnProperty('entitiesPath')) {
                obj['entitiesPath'] = ApiClient.convertToType(data['entitiesPath'], 'String');
            }
            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResetConnectorMetadataCacheRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResetConnectorMetadataCacheRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectorProfileName'] && !(typeof data['connectorProfileName'] === 'string' || data['connectorProfileName'] instanceof String)) {
            throw new Error("Expected the field `connectorProfileName` to be a primitive type in the JSON string but got " + data['connectorProfileName']);
        }
        // ensure the json data is a string
        if (data['connectorType'] && !(typeof data['connectorType'] === 'string' || data['connectorType'] instanceof String)) {
            throw new Error("Expected the field `connectorType` to be a primitive type in the JSON string but got " + data['connectorType']);
        }
        // ensure the json data is a string
        if (data['connectorEntityName'] && !(typeof data['connectorEntityName'] === 'string' || data['connectorEntityName'] instanceof String)) {
            throw new Error("Expected the field `connectorEntityName` to be a primitive type in the JSON string but got " + data['connectorEntityName']);
        }
        // ensure the json data is a string
        if (data['entitiesPath'] && !(typeof data['entitiesPath'] === 'string' || data['entitiesPath'] instanceof String)) {
            throw new Error("Expected the field `entitiesPath` to be a primitive type in the JSON string but got " + data['entitiesPath']);
        }
        // ensure the json data is a string
        if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
            throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
        }

        return true;
    }


}



/**
 * <p>The name of the connector profile that you want to reset cached metadata for.</p> <p>You can omit this parameter if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you must include this parameter in your request.</p>
 * @member {String} connectorProfileName
 */
ResetConnectorMetadataCacheRequest.prototype['connectorProfileName'] = undefined;

/**
 * <p>The type of connector to reset cached metadata for.</p> <p>You must include this parameter in your request if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you can omit this parameter from your request. </p>
 * @member {module:model/ResetConnectorMetadataCacheRequest.ConnectorTypeEnum} connectorType
 */
ResetConnectorMetadataCacheRequest.prototype['connectorType'] = undefined;

/**
 * <p>Use this parameter if you want to reset cached metadata about the details for an individual entity.</p> <p>If you don't include this parameter in your request, Amazon AppFlow only resets cached metadata about entity names, not entity details.</p>
 * @member {String} connectorEntityName
 */
ResetConnectorMetadataCacheRequest.prototype['connectorEntityName'] = undefined;

/**
 * <p>Use this parameter only if you’re resetting the cached metadata about a nested entity. Only some connectors support nested entities. A nested entity is one that has another entity as a parent. To use this parameter, specify the name of the parent entity.</p> <p>To look up the parent-child relationship of entities, you can send a ListConnectorEntities request that omits the entitiesPath parameter. Amazon AppFlow will return a list of top-level entities. For each one, it indicates whether the entity has nested entities. Then, in a subsequent ListConnectorEntities request, you can specify a parent entity name for the entitiesPath parameter. Amazon AppFlow will return a list of the child entities for that parent.</p>
 * @member {String} entitiesPath
 */
ResetConnectorMetadataCacheRequest.prototype['entitiesPath'] = undefined;

/**
 * <p>The API version that you specified in the connector profile that you’re resetting cached metadata for. You must use this parameter only if the connector supports multiple API versions or if the connector type is CustomConnector.</p> <p>To look up how many versions a connector supports, use the DescribeConnectors action. In the response, find the value that Amazon AppFlow returns for the connectorVersion parameter.</p> <p>To look up the connector type, use the DescribeConnectorProfiles action. In the response, find the value that Amazon AppFlow returns for the connectorType parameter.</p> <p>To look up the API version that you specified in a connector profile, use the DescribeConnectorProfiles action.</p>
 * @member {String} apiVersion
 */
ResetConnectorMetadataCacheRequest.prototype['apiVersion'] = undefined;





/**
 * Allowed values for the <code>connectorType</code> property.
 * @enum {String}
 * @readonly
 */
ResetConnectorMetadataCacheRequest['ConnectorTypeEnum'] = {

    /**
     * value: "Salesforce"
     * @const
     */
    "Salesforce": "Salesforce",

    /**
     * value: "Singular"
     * @const
     */
    "Singular": "Singular",

    /**
     * value: "Slack"
     * @const
     */
    "Slack": "Slack",

    /**
     * value: "Redshift"
     * @const
     */
    "Redshift": "Redshift",

    /**
     * value: "S3"
     * @const
     */
    "S3": "S3",

    /**
     * value: "Marketo"
     * @const
     */
    "Marketo": "Marketo",

    /**
     * value: "Googleanalytics"
     * @const
     */
    "Googleanalytics": "Googleanalytics",

    /**
     * value: "Zendesk"
     * @const
     */
    "Zendesk": "Zendesk",

    /**
     * value: "Servicenow"
     * @const
     */
    "Servicenow": "Servicenow",

    /**
     * value: "Datadog"
     * @const
     */
    "Datadog": "Datadog",

    /**
     * value: "Trendmicro"
     * @const
     */
    "Trendmicro": "Trendmicro",

    /**
     * value: "Snowflake"
     * @const
     */
    "Snowflake": "Snowflake",

    /**
     * value: "Dynatrace"
     * @const
     */
    "Dynatrace": "Dynatrace",

    /**
     * value: "Infornexus"
     * @const
     */
    "Infornexus": "Infornexus",

    /**
     * value: "Amplitude"
     * @const
     */
    "Amplitude": "Amplitude",

    /**
     * value: "Veeva"
     * @const
     */
    "Veeva": "Veeva",

    /**
     * value: "EventBridge"
     * @const
     */
    "EventBridge": "EventBridge",

    /**
     * value: "LookoutMetrics"
     * @const
     */
    "LookoutMetrics": "LookoutMetrics",

    /**
     * value: "Upsolver"
     * @const
     */
    "Upsolver": "Upsolver",

    /**
     * value: "Honeycode"
     * @const
     */
    "Honeycode": "Honeycode",

    /**
     * value: "CustomerProfiles"
     * @const
     */
    "CustomerProfiles": "CustomerProfiles",

    /**
     * value: "SAPOData"
     * @const
     */
    "SAPOData": "SAPOData",

    /**
     * value: "CustomConnector"
     * @const
     */
    "CustomConnector": "CustomConnector",

    /**
     * value: "Pardot"
     * @const
     */
    "Pardot": "Pardot"
};



export default ResetConnectorMetadataCacheRequest;

