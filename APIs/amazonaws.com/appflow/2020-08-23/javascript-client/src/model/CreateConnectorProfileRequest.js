/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateConnectorProfileRequestConnectorProfileConfig from './CreateConnectorProfileRequestConnectorProfileConfig';

/**
 * The CreateConnectorProfileRequest model module.
 * @module model/CreateConnectorProfileRequest
 * @version 2020-08-23
 */
class CreateConnectorProfileRequest {
    /**
     * Constructs a new <code>CreateConnectorProfileRequest</code>.
     * @alias module:model/CreateConnectorProfileRequest
     * @param connectorProfileName {String}  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. 
     * @param connectorType {module:model/CreateConnectorProfileRequest.ConnectorTypeEnum}  The type of connector, such as Salesforce, Amplitude, and so on. 
     * @param connectionMode {module:model/CreateConnectorProfileRequest.ConnectionModeEnum}  Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 
     * @param connectorProfileConfig {module:model/CreateConnectorProfileRequestConnectorProfileConfig} 
     */
    constructor(connectorProfileName, connectorType, connectionMode, connectorProfileConfig) { 
        
        CreateConnectorProfileRequest.initialize(this, connectorProfileName, connectorType, connectionMode, connectorProfileConfig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectorProfileName, connectorType, connectionMode, connectorProfileConfig) { 
        obj['connectorProfileName'] = connectorProfileName;
        obj['connectorType'] = connectorType;
        obj['connectionMode'] = connectionMode;
        obj['connectorProfileConfig'] = connectorProfileConfig;
    }

    /**
     * Constructs a <code>CreateConnectorProfileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConnectorProfileRequest} obj Optional instance to populate.
     * @return {module:model/CreateConnectorProfileRequest} The populated <code>CreateConnectorProfileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConnectorProfileRequest();

            if (data.hasOwnProperty('connectorProfileName')) {
                obj['connectorProfileName'] = ApiClient.convertToType(data['connectorProfileName'], 'String');
            }
            if (data.hasOwnProperty('kmsArn')) {
                obj['kmsArn'] = ApiClient.convertToType(data['kmsArn'], 'String');
            }
            if (data.hasOwnProperty('connectorType')) {
                obj['connectorType'] = ApiClient.convertToType(data['connectorType'], 'String');
            }
            if (data.hasOwnProperty('connectorLabel')) {
                obj['connectorLabel'] = ApiClient.convertToType(data['connectorLabel'], 'String');
            }
            if (data.hasOwnProperty('connectionMode')) {
                obj['connectionMode'] = ApiClient.convertToType(data['connectionMode'], 'String');
            }
            if (data.hasOwnProperty('connectorProfileConfig')) {
                obj['connectorProfileConfig'] = CreateConnectorProfileRequestConnectorProfileConfig.constructFromObject(data['connectorProfileConfig']);
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateConnectorProfileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateConnectorProfileRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateConnectorProfileRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectorProfileName'] && !(typeof data['connectorProfileName'] === 'string' || data['connectorProfileName'] instanceof String)) {
            throw new Error("Expected the field `connectorProfileName` to be a primitive type in the JSON string but got " + data['connectorProfileName']);
        }
        // ensure the json data is a string
        if (data['kmsArn'] && !(typeof data['kmsArn'] === 'string' || data['kmsArn'] instanceof String)) {
            throw new Error("Expected the field `kmsArn` to be a primitive type in the JSON string but got " + data['kmsArn']);
        }
        // ensure the json data is a string
        if (data['connectorType'] && !(typeof data['connectorType'] === 'string' || data['connectorType'] instanceof String)) {
            throw new Error("Expected the field `connectorType` to be a primitive type in the JSON string but got " + data['connectorType']);
        }
        // ensure the json data is a string
        if (data['connectorLabel'] && !(typeof data['connectorLabel'] === 'string' || data['connectorLabel'] instanceof String)) {
            throw new Error("Expected the field `connectorLabel` to be a primitive type in the JSON string but got " + data['connectorLabel']);
        }
        // ensure the json data is a string
        if (data['connectionMode'] && !(typeof data['connectionMode'] === 'string' || data['connectionMode'] instanceof String)) {
            throw new Error("Expected the field `connectionMode` to be a primitive type in the JSON string but got " + data['connectionMode']);
        }
        // validate the optional field `connectorProfileConfig`
        if (data['connectorProfileConfig']) { // data not null
          CreateConnectorProfileRequestConnectorProfileConfig.validateJSON(data['connectorProfileConfig']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }

        return true;
    }


}

CreateConnectorProfileRequest.RequiredProperties = ["connectorProfileName", "connectorType", "connectionMode", "connectorProfileConfig"];

/**
 *  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. 
 * @member {String} connectorProfileName
 */
CreateConnectorProfileRequest.prototype['connectorProfileName'] = undefined;

/**
 *  The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 
 * @member {String} kmsArn
 */
CreateConnectorProfileRequest.prototype['kmsArn'] = undefined;

/**
 *  The type of connector, such as Salesforce, Amplitude, and so on. 
 * @member {module:model/CreateConnectorProfileRequest.ConnectorTypeEnum} connectorType
 */
CreateConnectorProfileRequest.prototype['connectorType'] = undefined;

/**
 * The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.
 * @member {String} connectorLabel
 */
CreateConnectorProfileRequest.prototype['connectorLabel'] = undefined;

/**
 *  Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 
 * @member {module:model/CreateConnectorProfileRequest.ConnectionModeEnum} connectionMode
 */
CreateConnectorProfileRequest.prototype['connectionMode'] = undefined;

/**
 * @member {module:model/CreateConnectorProfileRequestConnectorProfileConfig} connectorProfileConfig
 */
CreateConnectorProfileRequest.prototype['connectorProfileConfig'] = undefined;

/**
 * <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateConnectorProfile</code>. The token is active for 8 hours.</p>
 * @member {String} clientToken
 */
CreateConnectorProfileRequest.prototype['clientToken'] = undefined;





/**
 * Allowed values for the <code>connectorType</code> property.
 * @enum {String}
 * @readonly
 */
CreateConnectorProfileRequest['ConnectorTypeEnum'] = {

    /**
     * value: "Salesforce"
     * @const
     */
    "Salesforce": "Salesforce",

    /**
     * value: "Singular"
     * @const
     */
    "Singular": "Singular",

    /**
     * value: "Slack"
     * @const
     */
    "Slack": "Slack",

    /**
     * value: "Redshift"
     * @const
     */
    "Redshift": "Redshift",

    /**
     * value: "S3"
     * @const
     */
    "S3": "S3",

    /**
     * value: "Marketo"
     * @const
     */
    "Marketo": "Marketo",

    /**
     * value: "Googleanalytics"
     * @const
     */
    "Googleanalytics": "Googleanalytics",

    /**
     * value: "Zendesk"
     * @const
     */
    "Zendesk": "Zendesk",

    /**
     * value: "Servicenow"
     * @const
     */
    "Servicenow": "Servicenow",

    /**
     * value: "Datadog"
     * @const
     */
    "Datadog": "Datadog",

    /**
     * value: "Trendmicro"
     * @const
     */
    "Trendmicro": "Trendmicro",

    /**
     * value: "Snowflake"
     * @const
     */
    "Snowflake": "Snowflake",

    /**
     * value: "Dynatrace"
     * @const
     */
    "Dynatrace": "Dynatrace",

    /**
     * value: "Infornexus"
     * @const
     */
    "Infornexus": "Infornexus",

    /**
     * value: "Amplitude"
     * @const
     */
    "Amplitude": "Amplitude",

    /**
     * value: "Veeva"
     * @const
     */
    "Veeva": "Veeva",

    /**
     * value: "EventBridge"
     * @const
     */
    "EventBridge": "EventBridge",

    /**
     * value: "LookoutMetrics"
     * @const
     */
    "LookoutMetrics": "LookoutMetrics",

    /**
     * value: "Upsolver"
     * @const
     */
    "Upsolver": "Upsolver",

    /**
     * value: "Honeycode"
     * @const
     */
    "Honeycode": "Honeycode",

    /**
     * value: "CustomerProfiles"
     * @const
     */
    "CustomerProfiles": "CustomerProfiles",

    /**
     * value: "SAPOData"
     * @const
     */
    "SAPOData": "SAPOData",

    /**
     * value: "CustomConnector"
     * @const
     */
    "CustomConnector": "CustomConnector",

    /**
     * value: "Pardot"
     * @const
     */
    "Pardot": "Pardot"
};


/**
 * Allowed values for the <code>connectionMode</code> property.
 * @enum {String}
 * @readonly
 */
CreateConnectorProfileRequest['ConnectionModeEnum'] = {

    /**
     * value: "Public"
     * @const
     */
    "Public": "Public",

    /**
     * value: "Private"
     * @const
     */
    "Private": "Private"
};



export default CreateConnectorProfileRequest;

