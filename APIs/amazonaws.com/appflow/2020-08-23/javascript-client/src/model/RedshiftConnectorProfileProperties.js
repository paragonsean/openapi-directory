/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedshiftConnectorProfileProperties model module.
 * @module model/RedshiftConnectorProfileProperties
 * @version 2020-08-23
 */
class RedshiftConnectorProfileProperties {
    /**
     * Constructs a new <code>RedshiftConnectorProfileProperties</code>.
     *  The connector-specific profile properties when using Amazon Redshift. 
     * @alias module:model/RedshiftConnectorProfileProperties
     * @param bucketName {String} 
     * @param roleArn {String} 
     */
    constructor(bucketName, roleArn) { 
        
        RedshiftConnectorProfileProperties.initialize(this, bucketName, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bucketName, roleArn) { 
        obj['bucketName'] = bucketName;
        obj['roleArn'] = roleArn;
    }

    /**
     * Constructs a <code>RedshiftConnectorProfileProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedshiftConnectorProfileProperties} obj Optional instance to populate.
     * @return {module:model/RedshiftConnectorProfileProperties} The populated <code>RedshiftConnectorProfileProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedshiftConnectorProfileProperties();

            if (data.hasOwnProperty('databaseUrl')) {
                obj['databaseUrl'] = ApiClient.convertToType(data['databaseUrl'], 'String');
            }
            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('bucketPrefix')) {
                obj['bucketPrefix'] = ApiClient.convertToType(data['bucketPrefix'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('dataApiRoleArn')) {
                obj['dataApiRoleArn'] = ApiClient.convertToType(data['dataApiRoleArn'], 'String');
            }
            if (data.hasOwnProperty('isRedshiftServerless')) {
                obj['isRedshiftServerless'] = ApiClient.convertToType(data['isRedshiftServerless'], 'Boolean');
            }
            if (data.hasOwnProperty('clusterIdentifier')) {
                obj['clusterIdentifier'] = ApiClient.convertToType(data['clusterIdentifier'], 'String');
            }
            if (data.hasOwnProperty('workgroupName')) {
                obj['workgroupName'] = ApiClient.convertToType(data['workgroupName'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedshiftConnectorProfileProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedshiftConnectorProfileProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedshiftConnectorProfileProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `databaseUrl`
        if (data['databaseUrl']) { // data not null
          String.validateJSON(data['databaseUrl']);
        }
        // validate the optional field `bucketName`
        if (data['bucketName']) { // data not null
          String.validateJSON(data['bucketName']);
        }
        // validate the optional field `bucketPrefix`
        if (data['bucketPrefix']) { // data not null
          String.validateJSON(data['bucketPrefix']);
        }
        // validate the optional field `roleArn`
        if (data['roleArn']) { // data not null
          String.validateJSON(data['roleArn']);
        }
        // validate the optional field `dataApiRoleArn`
        if (data['dataApiRoleArn']) { // data not null
          String.validateJSON(data['dataApiRoleArn']);
        }
        // validate the optional field `isRedshiftServerless`
        if (data['isRedshiftServerless']) { // data not null
          Boolean.validateJSON(data['isRedshiftServerless']);
        }
        // validate the optional field `clusterIdentifier`
        if (data['clusterIdentifier']) { // data not null
          String.validateJSON(data['clusterIdentifier']);
        }
        // validate the optional field `workgroupName`
        if (data['workgroupName']) { // data not null
          String.validateJSON(data['workgroupName']);
        }
        // validate the optional field `databaseName`
        if (data['databaseName']) { // data not null
          String.validateJSON(data['databaseName']);
        }

        return true;
    }


}

RedshiftConnectorProfileProperties.RequiredProperties = ["bucketName", "roleArn"];

/**
 * @member {String} databaseUrl
 */
RedshiftConnectorProfileProperties.prototype['databaseUrl'] = undefined;

/**
 * @member {String} bucketName
 */
RedshiftConnectorProfileProperties.prototype['bucketName'] = undefined;

/**
 * @member {String} bucketPrefix
 */
RedshiftConnectorProfileProperties.prototype['bucketPrefix'] = undefined;

/**
 * @member {String} roleArn
 */
RedshiftConnectorProfileProperties.prototype['roleArn'] = undefined;

/**
 * @member {String} dataApiRoleArn
 */
RedshiftConnectorProfileProperties.prototype['dataApiRoleArn'] = undefined;

/**
 * @member {Boolean} isRedshiftServerless
 */
RedshiftConnectorProfileProperties.prototype['isRedshiftServerless'] = undefined;

/**
 * @member {String} clusterIdentifier
 */
RedshiftConnectorProfileProperties.prototype['clusterIdentifier'] = undefined;

/**
 * @member {String} workgroupName
 */
RedshiftConnectorProfileProperties.prototype['workgroupName'] = undefined;

/**
 * @member {String} databaseName
 */
RedshiftConnectorProfileProperties.prototype['databaseName'] = undefined;






export default RedshiftConnectorProfileProperties;

