/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelFlowExecutionsRequest from '../model/CancelFlowExecutionsRequest';
import CancelFlowExecutionsResponse from '../model/CancelFlowExecutionsResponse';
import CreateConnectorProfileRequest from '../model/CreateConnectorProfileRequest';
import CreateConnectorProfileResponse from '../model/CreateConnectorProfileResponse';
import CreateFlowRequest from '../model/CreateFlowRequest';
import CreateFlowResponse from '../model/CreateFlowResponse';
import DeleteConnectorProfileRequest from '../model/DeleteConnectorProfileRequest';
import DeleteFlowRequest from '../model/DeleteFlowRequest';
import DescribeConnectorEntityRequest from '../model/DescribeConnectorEntityRequest';
import DescribeConnectorEntityResponse from '../model/DescribeConnectorEntityResponse';
import DescribeConnectorProfilesRequest from '../model/DescribeConnectorProfilesRequest';
import DescribeConnectorProfilesResponse from '../model/DescribeConnectorProfilesResponse';
import DescribeConnectorRequest from '../model/DescribeConnectorRequest';
import DescribeConnectorResponse from '../model/DescribeConnectorResponse';
import DescribeConnectorsRequest from '../model/DescribeConnectorsRequest';
import DescribeConnectorsResponse from '../model/DescribeConnectorsResponse';
import DescribeFlowExecutionRecordsRequest from '../model/DescribeFlowExecutionRecordsRequest';
import DescribeFlowExecutionRecordsResponse from '../model/DescribeFlowExecutionRecordsResponse';
import DescribeFlowRequest from '../model/DescribeFlowRequest';
import DescribeFlowResponse from '../model/DescribeFlowResponse';
import ListConnectorEntitiesRequest from '../model/ListConnectorEntitiesRequest';
import ListConnectorEntitiesResponse from '../model/ListConnectorEntitiesResponse';
import ListConnectorsRequest from '../model/ListConnectorsRequest';
import ListConnectorsResponse from '../model/ListConnectorsResponse';
import ListFlowsRequest from '../model/ListFlowsRequest';
import ListFlowsResponse from '../model/ListFlowsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import RegisterConnectorRequest from '../model/RegisterConnectorRequest';
import RegisterConnectorResponse from '../model/RegisterConnectorResponse';
import ResetConnectorMetadataCacheRequest from '../model/ResetConnectorMetadataCacheRequest';
import StartFlowRequest from '../model/StartFlowRequest';
import StartFlowResponse from '../model/StartFlowResponse';
import StopFlowResponse from '../model/StopFlowResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UnregisterConnectorRequest from '../model/UnregisterConnectorRequest';
import UpdateConnectorProfileRequest from '../model/UpdateConnectorProfileRequest';
import UpdateConnectorProfileResponse from '../model/UpdateConnectorProfileResponse';
import UpdateConnectorRegistrationRequest from '../model/UpdateConnectorRegistrationRequest';
import UpdateConnectorRegistrationResponse from '../model/UpdateConnectorRegistrationResponse';
import UpdateFlowRequest from '../model/UpdateFlowRequest';
import UpdateFlowResponse from '../model/UpdateFlowResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-08-23
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelFlowExecutions operation.
     * @callback module:api/DefaultApi~cancelFlowExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelFlowExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Cancels active runs for a flow.</p> <p>You can cancel all of the active runs for a flow, or you can cancel specific runs by providing their IDs.</p> <p>You can cancel a flow run only when the run is in progress. You can't cancel a run that has already completed or failed. You also can't cancel a run that's scheduled to occur but hasn't started yet. To prevent a scheduled run, you can deactivate the flow with the <code>StopFlow</code> action.</p> <p>You cannot resume a run after you cancel it.</p> <p>When you send your request, the status for each run becomes <code>CancelStarted</code>. When the cancellation completes, the status becomes <code>Canceled</code>.</p> <note> <p>When you cancel a run, you still incur charges for any data that the run already processed before the cancellation. If the run had already written some data to the flow destination, then that data remains in the destination. If you configured the flow to use a batch API (such as the Salesforce Bulk API 2.0), then the run will finish reading or writing its entire batch of data after the cancellation. For these operations, the data processing charges for Amazon AppFlow apply. For the pricing information, see <a href=\"http://aws.amazon.com/appflow/pricing/\">Amazon AppFlow pricing</a>.</p> </note>
     * @param {module:model/CancelFlowExecutionsRequest} cancelFlowExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelFlowExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelFlowExecutionsResponse}
     */
    cancelFlowExecutions(cancelFlowExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelFlowExecutionsRequest;
      // verify the required parameter 'cancelFlowExecutionsRequest' is set
      if (cancelFlowExecutionsRequest === undefined || cancelFlowExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'cancelFlowExecutionsRequest' when calling cancelFlowExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelFlowExecutionsResponse;
      return this.apiClient.callApi(
        '/cancel-flow-executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConnectorProfile operation.
     * @callback module:api/DefaultApi~createConnectorProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConnectorProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.
     * @param {module:model/CreateConnectorProfileRequest} createConnectorProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConnectorProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConnectorProfileResponse}
     */
    createConnectorProfile(createConnectorProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConnectorProfileRequest;
      // verify the required parameter 'createConnectorProfileRequest' is set
      if (createConnectorProfileRequest === undefined || createConnectorProfileRequest === null) {
        throw new Error("Missing the required parameter 'createConnectorProfileRequest' when calling createConnectorProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConnectorProfileResponse;
      return this.apiClient.callApi(
        '/create-connector-profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFlow operation.
     * @callback module:api/DefaultApi~createFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once. 
     * @param {module:model/CreateFlowRequest} createFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFlowResponse}
     */
    createFlow(createFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFlowRequest;
      // verify the required parameter 'createFlowRequest' is set
      if (createFlowRequest === undefined || createFlowRequest === null) {
        throw new Error("Missing the required parameter 'createFlowRequest' when calling createFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFlowResponse;
      return this.apiClient.callApi(
        '/create-flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnectorProfile operation.
     * @callback module:api/DefaultApi~deleteConnectorProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Enables you to delete an existing connector profile. 
     * @param {module:model/DeleteConnectorProfileRequest} deleteConnectorProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConnectorProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConnectorProfile(deleteConnectorProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteConnectorProfileRequest;
      // verify the required parameter 'deleteConnectorProfileRequest' is set
      if (deleteConnectorProfileRequest === undefined || deleteConnectorProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteConnectorProfileRequest' when calling deleteConnectorProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-connector-profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlow operation.
     * @callback module:api/DefaultApi~deleteFlowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time. 
     * @param {module:model/DeleteFlowRequest} deleteFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFlow(deleteFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFlowRequest;
      // verify the required parameter 'deleteFlowRequest' is set
      if (deleteFlowRequest === undefined || deleteFlowRequest === null) {
        throw new Error("Missing the required parameter 'deleteFlowRequest' when calling deleteFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnector operation.
     * @callback module:api/DefaultApi~describeConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.
     * @param {module:model/DescribeConnectorRequest} describeConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectorResponse}
     */
    describeConnector(describeConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectorRequest;
      // verify the required parameter 'describeConnectorRequest' is set
      if (describeConnectorRequest === undefined || describeConnectorRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectorRequest' when calling describeConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectorResponse;
      return this.apiClient.callApi(
        '/describe-connector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnectorEntity operation.
     * @callback module:api/DefaultApi~describeConnectorEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectorEntityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity. 
     * @param {module:model/DescribeConnectorEntityRequest} describeConnectorEntityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConnectorEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectorEntityResponse}
     */
    describeConnectorEntity(describeConnectorEntityRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectorEntityRequest;
      // verify the required parameter 'describeConnectorEntityRequest' is set
      if (describeConnectorEntityRequest === undefined || describeConnectorEntityRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectorEntityRequest' when calling describeConnectorEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectorEntityResponse;
      return this.apiClient.callApi(
        '/describe-connector-entity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnectorProfiles operation.
     * @callback module:api/DefaultApi~describeConnectorProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectorProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Returns a list of <code>connector-profile</code> details matching the provided <code>connector-profile</code> names and <code>connector-types</code>. Both input lists are optional, and you can use them to filter the result. </p> <p>If no names or <code>connector-types</code> are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.</p>
     * @param {module:model/DescribeConnectorProfilesRequest} describeConnectorProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeConnectorProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectorProfilesResponse}
     */
    describeConnectorProfiles(describeConnectorProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectorProfilesRequest;
      // verify the required parameter 'describeConnectorProfilesRequest' is set
      if (describeConnectorProfilesRequest === undefined || describeConnectorProfilesRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectorProfilesRequest' when calling describeConnectorProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectorProfilesResponse;
      return this.apiClient.callApi(
        '/describe-connector-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnectors operation.
     * @callback module:api/DefaultApi~describeConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a <code>nextToken</code> object, which can be be passed in to the next call to the <code>DescribeConnectors</code> API operation to retrieve the next page. 
     * @param {module:model/DescribeConnectorsRequest} describeConnectorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectorsResponse}
     */
    describeConnectors(describeConnectorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectorsRequest;
      // verify the required parameter 'describeConnectorsRequest' is set
      if (describeConnectorsRequest === undefined || describeConnectorsRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectorsRequest' when calling describeConnectors");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectorsResponse;
      return this.apiClient.callApi(
        '/describe-connectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFlow operation.
     * @callback module:api/DefaultApi~describeFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Provides a description of the specified flow. 
     * @param {module:model/DescribeFlowRequest} describeFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFlowResponse}
     */
    describeFlow(describeFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFlowRequest;
      // verify the required parameter 'describeFlowRequest' is set
      if (describeFlowRequest === undefined || describeFlowRequest === null) {
        throw new Error("Missing the required parameter 'describeFlowRequest' when calling describeFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFlowResponse;
      return this.apiClient.callApi(
        '/describe-flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFlowExecutionRecords operation.
     * @callback module:api/DefaultApi~describeFlowExecutionRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFlowExecutionRecordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Fetches the execution history of the flow. 
     * @param {module:model/DescribeFlowExecutionRecordsRequest} describeFlowExecutionRecordsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeFlowExecutionRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFlowExecutionRecordsResponse}
     */
    describeFlowExecutionRecords(describeFlowExecutionRecordsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFlowExecutionRecordsRequest;
      // verify the required parameter 'describeFlowExecutionRecordsRequest' is set
      if (describeFlowExecutionRecordsRequest === undefined || describeFlowExecutionRecordsRequest === null) {
        throw new Error("Missing the required parameter 'describeFlowExecutionRecordsRequest' when calling describeFlowExecutionRecords");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFlowExecutionRecordsResponse;
      return this.apiClient.callApi(
        '/describe-flow-execution-records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectorEntities operation.
     * @callback module:api/DefaultApi~listConnectorEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConnectorEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for <i>Account</i> and <i>Opportunity</i> entities, or query ServiceNow for the <i>Incident</i> entity. 
     * @param {module:model/ListConnectorEntitiesRequest} listConnectorEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listConnectorEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConnectorEntitiesResponse}
     */
    listConnectorEntities(listConnectorEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listConnectorEntitiesRequest;
      // verify the required parameter 'listConnectorEntitiesRequest' is set
      if (listConnectorEntitiesRequest === undefined || listConnectorEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'listConnectorEntitiesRequest' when calling listConnectorEntities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListConnectorEntitiesResponse;
      return this.apiClient.callApi(
        '/list-connector-entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectors operation.
     * @callback module:api/DefaultApi~listConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConnectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors. 
     * @param {module:model/ListConnectorsRequest} listConnectorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConnectorsResponse}
     */
    listConnectors(listConnectorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listConnectorsRequest;
      // verify the required parameter 'listConnectorsRequest' is set
      if (listConnectorsRequest === undefined || listConnectorsRequest === null) {
        throw new Error("Missing the required parameter 'listConnectorsRequest' when calling listConnectors");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListConnectorsResponse;
      return this.apiClient.callApi(
        '/list-connectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlows operation.
     * @callback module:api/DefaultApi~listFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists all of the flows associated with your account. 
     * @param {module:model/ListFlowsRequest} listFlowsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFlowsResponse}
     */
    listFlows(listFlowsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFlowsRequest;
      // verify the required parameter 'listFlowsRequest' is set
      if (listFlowsRequest === undefined || listFlowsRequest === null) {
        throw new Error("Missing the required parameter 'listFlowsRequest' when calling listFlows");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFlowsResponse;
      return this.apiClient.callApi(
        '/list-flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Retrieves the tags that are associated with a specified flow. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the specified flow. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerConnector operation.
     * @callback module:api/DefaultApi~registerConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterConnectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new custom connector with your Amazon Web Services account. Before you can register the connector, you must deploy the associated AWS lambda function in your account.
     * @param {module:model/RegisterConnectorRequest} registerConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterConnectorResponse}
     */
    registerConnector(registerConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerConnectorRequest;
      // verify the required parameter 'registerConnectorRequest' is set
      if (registerConnectorRequest === undefined || registerConnectorRequest === null) {
        throw new Error("Missing the required parameter 'registerConnectorRequest' when calling registerConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterConnectorResponse;
      return this.apiClient.callApi(
        '/register-connector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetConnectorMetadataCache operation.
     * @callback module:api/DefaultApi~resetConnectorMetadataCacheCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Resets metadata about your connector entities that Amazon AppFlow stored in its cache. Use this action when you want Amazon AppFlow to return the latest information about the data that you have in a source application.</p> <p>Amazon AppFlow returns metadata about your entities when you use the ListConnectorEntities or DescribeConnectorEntities actions. Following these actions, Amazon AppFlow caches the metadata to reduce the number of API requests that it must send to the source application. Amazon AppFlow automatically resets the cache once every hour, but you can use this action when you want to get the latest metadata right away.</p>
     * @param {module:model/ResetConnectorMetadataCacheRequest} resetConnectorMetadataCacheRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetConnectorMetadataCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetConnectorMetadataCache(resetConnectorMetadataCacheRequest, opts, callback) {
      opts = opts || {};
      let postBody = resetConnectorMetadataCacheRequest;
      // verify the required parameter 'resetConnectorMetadataCacheRequest' is set
      if (resetConnectorMetadataCacheRequest === undefined || resetConnectorMetadataCacheRequest === null) {
        throw new Error("Missing the required parameter 'resetConnectorMetadataCacheRequest' when calling resetConnectorMetadataCache");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/reset-connector-metadata-cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFlow operation.
     * @callback module:api/DefaultApi~startFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow. 
     * @param {module:model/StartFlowRequest} startFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartFlowResponse}
     */
    startFlow(startFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFlowRequest;
      // verify the required parameter 'startFlowRequest' is set
      if (startFlowRequest === undefined || startFlowRequest === null) {
        throw new Error("Missing the required parameter 'startFlowRequest' when calling startFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartFlowResponse;
      return this.apiClient.callApi(
        '/start-flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopFlow operation.
     * @callback module:api/DefaultApi~stopFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deactivates the existing flow. For on-demand flows, this operation returns an <code>unsupportedOperationException</code> error message. For schedule and event-triggered flows, this operation deactivates the flow. 
     * @param {module:model/DescribeFlowRequest} describeFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopFlowResponse}
     */
    stopFlow(describeFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFlowRequest;
      // verify the required parameter 'describeFlowRequest' is set
      if (describeFlowRequest === undefined || describeFlowRequest === null) {
        throw new Error("Missing the required parameter 'describeFlowRequest' when calling stopFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopFlowResponse;
      return this.apiClient.callApi(
        '/stop-flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Applies a tag to the specified flow. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the flow that you want to tag. 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unregisterConnector operation.
     * @callback module:api/DefaultApi~unregisterConnectorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregisters the custom connector registered in your account that matches the connector label provided in the request.
     * @param {module:model/UnregisterConnectorRequest} unregisterConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unregisterConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unregisterConnector(unregisterConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = unregisterConnectorRequest;
      // verify the required parameter 'unregisterConnectorRequest' is set
      if (unregisterConnectorRequest === undefined || unregisterConnectorRequest === null) {
        throw new Error("Missing the required parameter 'unregisterConnectorRequest' when calling unregisterConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/unregister-connector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Removes a tag from the specified flow. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the flow that you want to untag. 
     * @param {Array.<String>} tagKeys  The tag keys associated with the tag that you want to remove from your flow. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectorProfile operation.
     * @callback module:api/DefaultApi~updateConnectorProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConnectorProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates a given connector profile associated with your account. 
     * @param {module:model/UpdateConnectorProfileRequest} updateConnectorProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConnectorProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConnectorProfileResponse}
     */
    updateConnectorProfile(updateConnectorProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConnectorProfileRequest;
      // verify the required parameter 'updateConnectorProfileRequest' is set
      if (updateConnectorProfileRequest === undefined || updateConnectorProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateConnectorProfileRequest' when calling updateConnectorProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConnectorProfileResponse;
      return this.apiClient.callApi(
        '/update-connector-profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectorRegistration operation.
     * @callback module:api/DefaultApi~updateConnectorRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConnectorRegistrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a custom connector that you've previously registered. This operation updates the connector with one of the following:</p> <ul> <li> <p>The latest version of the AWS Lambda function that's assigned to the connector</p> </li> <li> <p>A new AWS Lambda function that you specify</p> </li> </ul>
     * @param {module:model/UpdateConnectorRegistrationRequest} updateConnectorRegistrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConnectorRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConnectorRegistrationResponse}
     */
    updateConnectorRegistration(updateConnectorRegistrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConnectorRegistrationRequest;
      // verify the required parameter 'updateConnectorRegistrationRequest' is set
      if (updateConnectorRegistrationRequest === undefined || updateConnectorRegistrationRequest === null) {
        throw new Error("Missing the required parameter 'updateConnectorRegistrationRequest' when calling updateConnectorRegistration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConnectorRegistrationResponse;
      return this.apiClient.callApi(
        '/update-connector-registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlow operation.
     * @callback module:api/DefaultApi~updateFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates an existing flow. 
     * @param {module:model/UpdateFlowRequest} updateFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowResponse}
     */
    updateFlow(updateFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowRequest;
      // verify the required parameter 'updateFlowRequest' is set
      if (updateFlowRequest === undefined || updateFlowRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowRequest' when calling updateFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowResponse;
      return this.apiClient.callApi(
        '/update-flow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
