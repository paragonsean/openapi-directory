/**
 * Amazon Appflow
 * <p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>
 *
 * The version of the OpenAPI document: 2020-08-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonAppflow);
  }
}(this, function(expect, AmazonAppflow) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonAppflow.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('cancelFlowExecutions', function() {
      it('should call cancelFlowExecutions successfully', function(done) {
        //uncomment below and update the code to test cancelFlowExecutions
        //instance.cancelFlowExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConnectorProfile', function() {
      it('should call createConnectorProfile successfully', function(done) {
        //uncomment below and update the code to test createConnectorProfile
        //instance.createConnectorProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFlow', function() {
      it('should call createFlow successfully', function(done) {
        //uncomment below and update the code to test createFlow
        //instance.createFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnectorProfile', function() {
      it('should call deleteConnectorProfile successfully', function(done) {
        //uncomment below and update the code to test deleteConnectorProfile
        //instance.deleteConnectorProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlow', function() {
      it('should call deleteFlow successfully', function(done) {
        //uncomment below and update the code to test deleteFlow
        //instance.deleteFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnector', function() {
      it('should call describeConnector successfully', function(done) {
        //uncomment below and update the code to test describeConnector
        //instance.describeConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnectorEntity', function() {
      it('should call describeConnectorEntity successfully', function(done) {
        //uncomment below and update the code to test describeConnectorEntity
        //instance.describeConnectorEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnectorProfiles', function() {
      it('should call describeConnectorProfiles successfully', function(done) {
        //uncomment below and update the code to test describeConnectorProfiles
        //instance.describeConnectorProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnectors', function() {
      it('should call describeConnectors successfully', function(done) {
        //uncomment below and update the code to test describeConnectors
        //instance.describeConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFlow', function() {
      it('should call describeFlow successfully', function(done) {
        //uncomment below and update the code to test describeFlow
        //instance.describeFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFlowExecutionRecords', function() {
      it('should call describeFlowExecutionRecords successfully', function(done) {
        //uncomment below and update the code to test describeFlowExecutionRecords
        //instance.describeFlowExecutionRecords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConnectorEntities', function() {
      it('should call listConnectorEntities successfully', function(done) {
        //uncomment below and update the code to test listConnectorEntities
        //instance.listConnectorEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConnectors', function() {
      it('should call listConnectors successfully', function(done) {
        //uncomment below and update the code to test listConnectors
        //instance.listConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlows', function() {
      it('should call listFlows successfully', function(done) {
        //uncomment below and update the code to test listFlows
        //instance.listFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerConnector', function() {
      it('should call registerConnector successfully', function(done) {
        //uncomment below and update the code to test registerConnector
        //instance.registerConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetConnectorMetadataCache', function() {
      it('should call resetConnectorMetadataCache successfully', function(done) {
        //uncomment below and update the code to test resetConnectorMetadataCache
        //instance.resetConnectorMetadataCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFlow', function() {
      it('should call startFlow successfully', function(done) {
        //uncomment below and update the code to test startFlow
        //instance.startFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopFlow', function() {
      it('should call stopFlow successfully', function(done) {
        //uncomment below and update the code to test stopFlow
        //instance.stopFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unregisterConnector', function() {
      it('should call unregisterConnector successfully', function(done) {
        //uncomment below and update the code to test unregisterConnector
        //instance.unregisterConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectorProfile', function() {
      it('should call updateConnectorProfile successfully', function(done) {
        //uncomment below and update the code to test updateConnectorProfile
        //instance.updateConnectorProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectorRegistration', function() {
      it('should call updateConnectorRegistration successfully', function(done) {
        //uncomment below and update the code to test updateConnectorRegistration
        //instance.updateConnectorRegistration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlow', function() {
      it('should call updateFlow successfully', function(done) {
        //uncomment below and update the code to test updateFlow
        //instance.updateFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
