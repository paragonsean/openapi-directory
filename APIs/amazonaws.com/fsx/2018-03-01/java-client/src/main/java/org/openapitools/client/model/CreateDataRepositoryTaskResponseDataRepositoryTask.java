/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompletionReport;
import org.openapitools.client.model.DataRepositoryTaskFailureDetails;
import org.openapitools.client.model.DataRepositoryTaskLifecycle;
import org.openapitools.client.model.DataRepositoryTaskStatus;
import org.openapitools.client.model.DataRepositoryTaskType;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDataRepositoryTaskResponseDataRepositoryTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDataRepositoryTaskResponseDataRepositoryTask {
  public static final String SERIALIZED_NAME_TASK_ID = "TaskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private DataRepositoryTaskLifecycle lifecycle;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DataRepositoryTaskType type;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_PATHS = "Paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List paths;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private DataRepositoryTaskFailureDetails failureDetails;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DataRepositoryTaskStatus status;

  public static final String SERIALIZED_NAME_REPORT = "Report";
  @SerializedName(SERIALIZED_NAME_REPORT)
  private CompletionReport report;

  public static final String SERIALIZED_NAME_CAPACITY_TO_RELEASE = "CapacityToRelease";
  @SerializedName(SERIALIZED_NAME_CAPACITY_TO_RELEASE)
  private Integer capacityToRelease;

  public static final String SERIALIZED_NAME_FILE_CACHE_ID = "FileCacheId";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_ID)
  private String fileCacheId;

  public CreateDataRepositoryTaskResponseDataRepositoryTask() {
  }

  public CreateDataRepositoryTaskResponseDataRepositoryTask taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * Get taskId
   * @return taskId
   */
  @javax.annotation.Nonnull
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask lifecycle(DataRepositoryTaskLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nonnull
  public DataRepositoryTaskLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(DataRepositoryTaskLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask type(DataRepositoryTaskType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public DataRepositoryTaskType getType() {
    return type;
  }

  public void setType(DataRepositoryTaskType type) {
    this.type = type;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDataRepositoryTaskResponseDataRepositoryTask addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * Get fileSystemId
   * @return fileSystemId
   */
  @javax.annotation.Nullable
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask paths(List paths) {
    this.paths = paths;
    return this;
  }

  /**
   * Get paths
   * @return paths
   */
  @javax.annotation.Nullable
  public List getPaths() {
    return paths;
  }

  public void setPaths(List paths) {
    this.paths = paths;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask failureDetails(DataRepositoryTaskFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public DataRepositoryTaskFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(DataRepositoryTaskFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask status(DataRepositoryTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DataRepositoryTaskStatus getStatus() {
    return status;
  }

  public void setStatus(DataRepositoryTaskStatus status) {
    this.status = status;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask report(CompletionReport report) {
    this.report = report;
    return this;
  }

  /**
   * Get report
   * @return report
   */
  @javax.annotation.Nullable
  public CompletionReport getReport() {
    return report;
  }

  public void setReport(CompletionReport report) {
    this.report = report;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask capacityToRelease(Integer capacityToRelease) {
    this.capacityToRelease = capacityToRelease;
    return this;
  }

  /**
   * Get capacityToRelease
   * @return capacityToRelease
   */
  @javax.annotation.Nullable
  public Integer getCapacityToRelease() {
    return capacityToRelease;
  }

  public void setCapacityToRelease(Integer capacityToRelease) {
    this.capacityToRelease = capacityToRelease;
  }


  public CreateDataRepositoryTaskResponseDataRepositoryTask fileCacheId(String fileCacheId) {
    this.fileCacheId = fileCacheId;
    return this;
  }

  /**
   * Get fileCacheId
   * @return fileCacheId
   */
  @javax.annotation.Nullable
  public String getFileCacheId() {
    return fileCacheId;
  }

  public void setFileCacheId(String fileCacheId) {
    this.fileCacheId = fileCacheId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDataRepositoryTaskResponseDataRepositoryTask createDataRepositoryTaskResponseDataRepositoryTask = (CreateDataRepositoryTaskResponseDataRepositoryTask) o;
    return Objects.equals(this.taskId, createDataRepositoryTaskResponseDataRepositoryTask.taskId) &&
        Objects.equals(this.lifecycle, createDataRepositoryTaskResponseDataRepositoryTask.lifecycle) &&
        Objects.equals(this.type, createDataRepositoryTaskResponseDataRepositoryTask.type) &&
        Objects.equals(this.creationTime, createDataRepositoryTaskResponseDataRepositoryTask.creationTime) &&
        Objects.equals(this.startTime, createDataRepositoryTaskResponseDataRepositoryTask.startTime) &&
        Objects.equals(this.endTime, createDataRepositoryTaskResponseDataRepositoryTask.endTime) &&
        Objects.equals(this.resourceARN, createDataRepositoryTaskResponseDataRepositoryTask.resourceARN) &&
        Objects.equals(this.tags, createDataRepositoryTaskResponseDataRepositoryTask.tags) &&
        Objects.equals(this.fileSystemId, createDataRepositoryTaskResponseDataRepositoryTask.fileSystemId) &&
        Objects.equals(this.paths, createDataRepositoryTaskResponseDataRepositoryTask.paths) &&
        Objects.equals(this.failureDetails, createDataRepositoryTaskResponseDataRepositoryTask.failureDetails) &&
        Objects.equals(this.status, createDataRepositoryTaskResponseDataRepositoryTask.status) &&
        Objects.equals(this.report, createDataRepositoryTaskResponseDataRepositoryTask.report) &&
        Objects.equals(this.capacityToRelease, createDataRepositoryTaskResponseDataRepositoryTask.capacityToRelease) &&
        Objects.equals(this.fileCacheId, createDataRepositoryTaskResponseDataRepositoryTask.fileCacheId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskId, lifecycle, type, creationTime, startTime, endTime, resourceARN, tags, fileSystemId, paths, failureDetails, status, report, capacityToRelease, fileCacheId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataRepositoryTaskResponseDataRepositoryTask {\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    capacityToRelease: ").append(toIndentedString(capacityToRelease)).append("\n");
    sb.append("    fileCacheId: ").append(toIndentedString(fileCacheId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TaskId");
    openapiFields.add("Lifecycle");
    openapiFields.add("Type");
    openapiFields.add("CreationTime");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("ResourceARN");
    openapiFields.add("Tags");
    openapiFields.add("FileSystemId");
    openapiFields.add("Paths");
    openapiFields.add("FailureDetails");
    openapiFields.add("Status");
    openapiFields.add("Report");
    openapiFields.add("CapacityToRelease");
    openapiFields.add("FileCacheId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TaskId");
    openapiRequiredFields.add("Lifecycle");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("CreationTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDataRepositoryTaskResponseDataRepositoryTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDataRepositoryTaskResponseDataRepositoryTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDataRepositoryTaskResponseDataRepositoryTask is not found in the empty JSON string", CreateDataRepositoryTaskResponseDataRepositoryTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDataRepositoryTaskResponseDataRepositoryTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDataRepositoryTaskResponseDataRepositoryTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDataRepositoryTaskResponseDataRepositoryTask.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TaskId`
      String.validateJsonElement(jsonObj.get("TaskId"));
      // validate the required field `Lifecycle`
      DataRepositoryTaskLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      // validate the required field `Type`
      DataRepositoryTaskType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      if ((jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) && !jsonObj.get("ResourceARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceARN").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `FileSystemId`
      if (jsonObj.get("FileSystemId") != null && !jsonObj.get("FileSystemId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileSystemId"));
      }
      // validate the optional field `Paths`
      if (jsonObj.get("Paths") != null && !jsonObj.get("Paths").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Paths"));
      }
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        DataRepositoryTaskFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        DataRepositoryTaskStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Report`
      if (jsonObj.get("Report") != null && !jsonObj.get("Report").isJsonNull()) {
        CompletionReport.validateJsonElement(jsonObj.get("Report"));
      }
      // validate the optional field `CapacityToRelease`
      if (jsonObj.get("CapacityToRelease") != null && !jsonObj.get("CapacityToRelease").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CapacityToRelease"));
      }
      // validate the optional field `FileCacheId`
      if (jsonObj.get("FileCacheId") != null && !jsonObj.get("FileCacheId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileCacheId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDataRepositoryTaskResponseDataRepositoryTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDataRepositoryTaskResponseDataRepositoryTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDataRepositoryTaskResponseDataRepositoryTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDataRepositoryTaskResponseDataRepositoryTask.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDataRepositoryTaskResponseDataRepositoryTask>() {
           @Override
           public void write(JsonWriter out, CreateDataRepositoryTaskResponseDataRepositoryTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDataRepositoryTaskResponseDataRepositoryTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDataRepositoryTaskResponseDataRepositoryTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDataRepositoryTaskResponseDataRepositoryTask
   * @throws IOException if the JSON string is invalid with respect to CreateDataRepositoryTaskResponseDataRepositoryTask
   */
  public static CreateDataRepositoryTaskResponseDataRepositoryTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDataRepositoryTaskResponseDataRepositoryTask.class);
  }

  /**
   * Convert an instance of CreateDataRepositoryTaskResponseDataRepositoryTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

