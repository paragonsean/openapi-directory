/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateFileSystemLustreConfiguration;
import org.openapitools.client.model.UpdateFileSystemOntapConfiguration;
import org.openapitools.client.model.UpdateFileSystemRequestOpenZFSConfiguration;
import org.openapitools.client.model.UpdateFileSystemRequestWindowsConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request object for the &lt;code&gt;UpdateFileSystem&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFileSystemRequest {
  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY = "StorageCapacity";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY)
  private Integer storageCapacity;

  public static final String SERIALIZED_NAME_WINDOWS_CONFIGURATION = "WindowsConfiguration";
  @SerializedName(SERIALIZED_NAME_WINDOWS_CONFIGURATION)
  private UpdateFileSystemRequestWindowsConfiguration windowsConfiguration;

  public static final String SERIALIZED_NAME_LUSTRE_CONFIGURATION = "LustreConfiguration";
  @SerializedName(SERIALIZED_NAME_LUSTRE_CONFIGURATION)
  private UpdateFileSystemLustreConfiguration lustreConfiguration;

  public static final String SERIALIZED_NAME_ONTAP_CONFIGURATION = "OntapConfiguration";
  @SerializedName(SERIALIZED_NAME_ONTAP_CONFIGURATION)
  private UpdateFileSystemOntapConfiguration ontapConfiguration;

  public static final String SERIALIZED_NAME_OPEN_Z_F_S_CONFIGURATION = "OpenZFSConfiguration";
  @SerializedName(SERIALIZED_NAME_OPEN_Z_F_S_CONFIGURATION)
  private UpdateFileSystemRequestOpenZFSConfiguration openZFSConfiguration;

  public UpdateFileSystemRequest() {
  }

  public UpdateFileSystemRequest fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * Get fileSystemId
   * @return fileSystemId
   */
  @javax.annotation.Nonnull
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public UpdateFileSystemRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public UpdateFileSystemRequest storageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
    return this;
  }

  /**
   * Get storageCapacity
   * @return storageCapacity
   */
  @javax.annotation.Nullable
  public Integer getStorageCapacity() {
    return storageCapacity;
  }

  public void setStorageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
  }


  public UpdateFileSystemRequest windowsConfiguration(UpdateFileSystemRequestWindowsConfiguration windowsConfiguration) {
    this.windowsConfiguration = windowsConfiguration;
    return this;
  }

  /**
   * Get windowsConfiguration
   * @return windowsConfiguration
   */
  @javax.annotation.Nullable
  public UpdateFileSystemRequestWindowsConfiguration getWindowsConfiguration() {
    return windowsConfiguration;
  }

  public void setWindowsConfiguration(UpdateFileSystemRequestWindowsConfiguration windowsConfiguration) {
    this.windowsConfiguration = windowsConfiguration;
  }


  public UpdateFileSystemRequest lustreConfiguration(UpdateFileSystemLustreConfiguration lustreConfiguration) {
    this.lustreConfiguration = lustreConfiguration;
    return this;
  }

  /**
   * Get lustreConfiguration
   * @return lustreConfiguration
   */
  @javax.annotation.Nullable
  public UpdateFileSystemLustreConfiguration getLustreConfiguration() {
    return lustreConfiguration;
  }

  public void setLustreConfiguration(UpdateFileSystemLustreConfiguration lustreConfiguration) {
    this.lustreConfiguration = lustreConfiguration;
  }


  public UpdateFileSystemRequest ontapConfiguration(UpdateFileSystemOntapConfiguration ontapConfiguration) {
    this.ontapConfiguration = ontapConfiguration;
    return this;
  }

  /**
   * Get ontapConfiguration
   * @return ontapConfiguration
   */
  @javax.annotation.Nullable
  public UpdateFileSystemOntapConfiguration getOntapConfiguration() {
    return ontapConfiguration;
  }

  public void setOntapConfiguration(UpdateFileSystemOntapConfiguration ontapConfiguration) {
    this.ontapConfiguration = ontapConfiguration;
  }


  public UpdateFileSystemRequest openZFSConfiguration(UpdateFileSystemRequestOpenZFSConfiguration openZFSConfiguration) {
    this.openZFSConfiguration = openZFSConfiguration;
    return this;
  }

  /**
   * Get openZFSConfiguration
   * @return openZFSConfiguration
   */
  @javax.annotation.Nullable
  public UpdateFileSystemRequestOpenZFSConfiguration getOpenZFSConfiguration() {
    return openZFSConfiguration;
  }

  public void setOpenZFSConfiguration(UpdateFileSystemRequestOpenZFSConfiguration openZFSConfiguration) {
    this.openZFSConfiguration = openZFSConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFileSystemRequest updateFileSystemRequest = (UpdateFileSystemRequest) o;
    return Objects.equals(this.fileSystemId, updateFileSystemRequest.fileSystemId) &&
        Objects.equals(this.clientRequestToken, updateFileSystemRequest.clientRequestToken) &&
        Objects.equals(this.storageCapacity, updateFileSystemRequest.storageCapacity) &&
        Objects.equals(this.windowsConfiguration, updateFileSystemRequest.windowsConfiguration) &&
        Objects.equals(this.lustreConfiguration, updateFileSystemRequest.lustreConfiguration) &&
        Objects.equals(this.ontapConfiguration, updateFileSystemRequest.ontapConfiguration) &&
        Objects.equals(this.openZFSConfiguration, updateFileSystemRequest.openZFSConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSystemId, clientRequestToken, storageCapacity, windowsConfiguration, lustreConfiguration, ontapConfiguration, openZFSConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFileSystemRequest {\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    storageCapacity: ").append(toIndentedString(storageCapacity)).append("\n");
    sb.append("    windowsConfiguration: ").append(toIndentedString(windowsConfiguration)).append("\n");
    sb.append("    lustreConfiguration: ").append(toIndentedString(lustreConfiguration)).append("\n");
    sb.append("    ontapConfiguration: ").append(toIndentedString(ontapConfiguration)).append("\n");
    sb.append("    openZFSConfiguration: ").append(toIndentedString(openZFSConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FileSystemId");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("StorageCapacity");
    openapiFields.add("WindowsConfiguration");
    openapiFields.add("LustreConfiguration");
    openapiFields.add("OntapConfiguration");
    openapiFields.add("OpenZFSConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FileSystemId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFileSystemRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFileSystemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFileSystemRequest is not found in the empty JSON string", UpdateFileSystemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFileSystemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFileSystemRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateFileSystemRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `FileSystemId`
      String.validateJsonElement(jsonObj.get("FileSystemId"));
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
      // validate the optional field `StorageCapacity`
      if (jsonObj.get("StorageCapacity") != null && !jsonObj.get("StorageCapacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StorageCapacity"));
      }
      // validate the optional field `WindowsConfiguration`
      if (jsonObj.get("WindowsConfiguration") != null && !jsonObj.get("WindowsConfiguration").isJsonNull()) {
        UpdateFileSystemRequestWindowsConfiguration.validateJsonElement(jsonObj.get("WindowsConfiguration"));
      }
      // validate the optional field `LustreConfiguration`
      if (jsonObj.get("LustreConfiguration") != null && !jsonObj.get("LustreConfiguration").isJsonNull()) {
        UpdateFileSystemLustreConfiguration.validateJsonElement(jsonObj.get("LustreConfiguration"));
      }
      // validate the optional field `OntapConfiguration`
      if (jsonObj.get("OntapConfiguration") != null && !jsonObj.get("OntapConfiguration").isJsonNull()) {
        UpdateFileSystemOntapConfiguration.validateJsonElement(jsonObj.get("OntapConfiguration"));
      }
      // validate the optional field `OpenZFSConfiguration`
      if (jsonObj.get("OpenZFSConfiguration") != null && !jsonObj.get("OpenZFSConfiguration").isJsonNull()) {
        UpdateFileSystemRequestOpenZFSConfiguration.validateJsonElement(jsonObj.get("OpenZFSConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFileSystemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFileSystemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFileSystemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFileSystemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFileSystemRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFileSystemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFileSystemRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFileSystemRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFileSystemRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFileSystemRequest
   */
  public static UpdateFileSystemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFileSystemRequest.class);
  }

  /**
   * Convert an instance of UpdateFileSystemRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

