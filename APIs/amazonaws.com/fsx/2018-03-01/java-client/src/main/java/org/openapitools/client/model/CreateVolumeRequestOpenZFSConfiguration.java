/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateOpenZFSVolumeConfigurationOriginSnapshot;
import org.openapitools.client.model.OpenZFSDataCompressionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateVolumeRequestOpenZFSConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateVolumeRequestOpenZFSConfiguration {
  public static final String SERIALIZED_NAME_PARENT_VOLUME_ID = "ParentVolumeId";
  @SerializedName(SERIALIZED_NAME_PARENT_VOLUME_ID)
  private String parentVolumeId;

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY_RESERVATION_GI_B = "StorageCapacityReservationGiB";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY_RESERVATION_GI_B)
  private Integer storageCapacityReservationGiB;

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY_QUOTA_GI_B = "StorageCapacityQuotaGiB";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY_QUOTA_GI_B)
  private Integer storageCapacityQuotaGiB;

  public static final String SERIALIZED_NAME_RECORD_SIZE_KI_B = "RecordSizeKiB";
  @SerializedName(SERIALIZED_NAME_RECORD_SIZE_KI_B)
  private Integer recordSizeKiB;

  public static final String SERIALIZED_NAME_DATA_COMPRESSION_TYPE = "DataCompressionType";
  @SerializedName(SERIALIZED_NAME_DATA_COMPRESSION_TYPE)
  private OpenZFSDataCompressionType dataCompressionType;

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOTS = "CopyTagsToSnapshots";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOTS)
  private Boolean copyTagsToSnapshots;

  public static final String SERIALIZED_NAME_ORIGIN_SNAPSHOT = "OriginSnapshot";
  @SerializedName(SERIALIZED_NAME_ORIGIN_SNAPSHOT)
  private CreateOpenZFSVolumeConfigurationOriginSnapshot originSnapshot;

  public static final String SERIALIZED_NAME_READ_ONLY = "ReadOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_NFS_EXPORTS = "NfsExports";
  @SerializedName(SERIALIZED_NAME_NFS_EXPORTS)
  private List nfsExports;

  public static final String SERIALIZED_NAME_USER_AND_GROUP_QUOTAS = "UserAndGroupQuotas";
  @SerializedName(SERIALIZED_NAME_USER_AND_GROUP_QUOTAS)
  private List userAndGroupQuotas;

  public CreateVolumeRequestOpenZFSConfiguration() {
  }

  public CreateVolumeRequestOpenZFSConfiguration parentVolumeId(String parentVolumeId) {
    this.parentVolumeId = parentVolumeId;
    return this;
  }

  /**
   * Get parentVolumeId
   * @return parentVolumeId
   */
  @javax.annotation.Nonnull
  public String getParentVolumeId() {
    return parentVolumeId;
  }

  public void setParentVolumeId(String parentVolumeId) {
    this.parentVolumeId = parentVolumeId;
  }


  public CreateVolumeRequestOpenZFSConfiguration storageCapacityReservationGiB(Integer storageCapacityReservationGiB) {
    this.storageCapacityReservationGiB = storageCapacityReservationGiB;
    return this;
  }

  /**
   * Get storageCapacityReservationGiB
   * @return storageCapacityReservationGiB
   */
  @javax.annotation.Nullable
  public Integer getStorageCapacityReservationGiB() {
    return storageCapacityReservationGiB;
  }

  public void setStorageCapacityReservationGiB(Integer storageCapacityReservationGiB) {
    this.storageCapacityReservationGiB = storageCapacityReservationGiB;
  }


  public CreateVolumeRequestOpenZFSConfiguration storageCapacityQuotaGiB(Integer storageCapacityQuotaGiB) {
    this.storageCapacityQuotaGiB = storageCapacityQuotaGiB;
    return this;
  }

  /**
   * Get storageCapacityQuotaGiB
   * @return storageCapacityQuotaGiB
   */
  @javax.annotation.Nullable
  public Integer getStorageCapacityQuotaGiB() {
    return storageCapacityQuotaGiB;
  }

  public void setStorageCapacityQuotaGiB(Integer storageCapacityQuotaGiB) {
    this.storageCapacityQuotaGiB = storageCapacityQuotaGiB;
  }


  public CreateVolumeRequestOpenZFSConfiguration recordSizeKiB(Integer recordSizeKiB) {
    this.recordSizeKiB = recordSizeKiB;
    return this;
  }

  /**
   * Get recordSizeKiB
   * @return recordSizeKiB
   */
  @javax.annotation.Nullable
  public Integer getRecordSizeKiB() {
    return recordSizeKiB;
  }

  public void setRecordSizeKiB(Integer recordSizeKiB) {
    this.recordSizeKiB = recordSizeKiB;
  }


  public CreateVolumeRequestOpenZFSConfiguration dataCompressionType(OpenZFSDataCompressionType dataCompressionType) {
    this.dataCompressionType = dataCompressionType;
    return this;
  }

  /**
   * Get dataCompressionType
   * @return dataCompressionType
   */
  @javax.annotation.Nullable
  public OpenZFSDataCompressionType getDataCompressionType() {
    return dataCompressionType;
  }

  public void setDataCompressionType(OpenZFSDataCompressionType dataCompressionType) {
    this.dataCompressionType = dataCompressionType;
  }


  public CreateVolumeRequestOpenZFSConfiguration copyTagsToSnapshots(Boolean copyTagsToSnapshots) {
    this.copyTagsToSnapshots = copyTagsToSnapshots;
    return this;
  }

  /**
   * Get copyTagsToSnapshots
   * @return copyTagsToSnapshots
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToSnapshots() {
    return copyTagsToSnapshots;
  }

  public void setCopyTagsToSnapshots(Boolean copyTagsToSnapshots) {
    this.copyTagsToSnapshots = copyTagsToSnapshots;
  }


  public CreateVolumeRequestOpenZFSConfiguration originSnapshot(CreateOpenZFSVolumeConfigurationOriginSnapshot originSnapshot) {
    this.originSnapshot = originSnapshot;
    return this;
  }

  /**
   * Get originSnapshot
   * @return originSnapshot
   */
  @javax.annotation.Nullable
  public CreateOpenZFSVolumeConfigurationOriginSnapshot getOriginSnapshot() {
    return originSnapshot;
  }

  public void setOriginSnapshot(CreateOpenZFSVolumeConfigurationOriginSnapshot originSnapshot) {
    this.originSnapshot = originSnapshot;
  }


  public CreateVolumeRequestOpenZFSConfiguration readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public CreateVolumeRequestOpenZFSConfiguration nfsExports(List nfsExports) {
    this.nfsExports = nfsExports;
    return this;
  }

  /**
   * Get nfsExports
   * @return nfsExports
   */
  @javax.annotation.Nullable
  public List getNfsExports() {
    return nfsExports;
  }

  public void setNfsExports(List nfsExports) {
    this.nfsExports = nfsExports;
  }


  public CreateVolumeRequestOpenZFSConfiguration userAndGroupQuotas(List userAndGroupQuotas) {
    this.userAndGroupQuotas = userAndGroupQuotas;
    return this;
  }

  /**
   * Get userAndGroupQuotas
   * @return userAndGroupQuotas
   */
  @javax.annotation.Nullable
  public List getUserAndGroupQuotas() {
    return userAndGroupQuotas;
  }

  public void setUserAndGroupQuotas(List userAndGroupQuotas) {
    this.userAndGroupQuotas = userAndGroupQuotas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVolumeRequestOpenZFSConfiguration createVolumeRequestOpenZFSConfiguration = (CreateVolumeRequestOpenZFSConfiguration) o;
    return Objects.equals(this.parentVolumeId, createVolumeRequestOpenZFSConfiguration.parentVolumeId) &&
        Objects.equals(this.storageCapacityReservationGiB, createVolumeRequestOpenZFSConfiguration.storageCapacityReservationGiB) &&
        Objects.equals(this.storageCapacityQuotaGiB, createVolumeRequestOpenZFSConfiguration.storageCapacityQuotaGiB) &&
        Objects.equals(this.recordSizeKiB, createVolumeRequestOpenZFSConfiguration.recordSizeKiB) &&
        Objects.equals(this.dataCompressionType, createVolumeRequestOpenZFSConfiguration.dataCompressionType) &&
        Objects.equals(this.copyTagsToSnapshots, createVolumeRequestOpenZFSConfiguration.copyTagsToSnapshots) &&
        Objects.equals(this.originSnapshot, createVolumeRequestOpenZFSConfiguration.originSnapshot) &&
        Objects.equals(this.readOnly, createVolumeRequestOpenZFSConfiguration.readOnly) &&
        Objects.equals(this.nfsExports, createVolumeRequestOpenZFSConfiguration.nfsExports) &&
        Objects.equals(this.userAndGroupQuotas, createVolumeRequestOpenZFSConfiguration.userAndGroupQuotas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentVolumeId, storageCapacityReservationGiB, storageCapacityQuotaGiB, recordSizeKiB, dataCompressionType, copyTagsToSnapshots, originSnapshot, readOnly, nfsExports, userAndGroupQuotas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVolumeRequestOpenZFSConfiguration {\n");
    sb.append("    parentVolumeId: ").append(toIndentedString(parentVolumeId)).append("\n");
    sb.append("    storageCapacityReservationGiB: ").append(toIndentedString(storageCapacityReservationGiB)).append("\n");
    sb.append("    storageCapacityQuotaGiB: ").append(toIndentedString(storageCapacityQuotaGiB)).append("\n");
    sb.append("    recordSizeKiB: ").append(toIndentedString(recordSizeKiB)).append("\n");
    sb.append("    dataCompressionType: ").append(toIndentedString(dataCompressionType)).append("\n");
    sb.append("    copyTagsToSnapshots: ").append(toIndentedString(copyTagsToSnapshots)).append("\n");
    sb.append("    originSnapshot: ").append(toIndentedString(originSnapshot)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    nfsExports: ").append(toIndentedString(nfsExports)).append("\n");
    sb.append("    userAndGroupQuotas: ").append(toIndentedString(userAndGroupQuotas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParentVolumeId");
    openapiFields.add("StorageCapacityReservationGiB");
    openapiFields.add("StorageCapacityQuotaGiB");
    openapiFields.add("RecordSizeKiB");
    openapiFields.add("DataCompressionType");
    openapiFields.add("CopyTagsToSnapshots");
    openapiFields.add("OriginSnapshot");
    openapiFields.add("ReadOnly");
    openapiFields.add("NfsExports");
    openapiFields.add("UserAndGroupQuotas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ParentVolumeId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateVolumeRequestOpenZFSConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateVolumeRequestOpenZFSConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVolumeRequestOpenZFSConfiguration is not found in the empty JSON string", CreateVolumeRequestOpenZFSConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateVolumeRequestOpenZFSConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateVolumeRequestOpenZFSConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateVolumeRequestOpenZFSConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ParentVolumeId`
      String.validateJsonElement(jsonObj.get("ParentVolumeId"));
      // validate the optional field `StorageCapacityReservationGiB`
      if (jsonObj.get("StorageCapacityReservationGiB") != null && !jsonObj.get("StorageCapacityReservationGiB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StorageCapacityReservationGiB"));
      }
      // validate the optional field `StorageCapacityQuotaGiB`
      if (jsonObj.get("StorageCapacityQuotaGiB") != null && !jsonObj.get("StorageCapacityQuotaGiB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StorageCapacityQuotaGiB"));
      }
      // validate the optional field `RecordSizeKiB`
      if (jsonObj.get("RecordSizeKiB") != null && !jsonObj.get("RecordSizeKiB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RecordSizeKiB"));
      }
      // validate the optional field `DataCompressionType`
      if (jsonObj.get("DataCompressionType") != null && !jsonObj.get("DataCompressionType").isJsonNull()) {
        OpenZFSDataCompressionType.validateJsonElement(jsonObj.get("DataCompressionType"));
      }
      // validate the optional field `CopyTagsToSnapshots`
      if (jsonObj.get("CopyTagsToSnapshots") != null && !jsonObj.get("CopyTagsToSnapshots").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToSnapshots"));
      }
      // validate the optional field `OriginSnapshot`
      if (jsonObj.get("OriginSnapshot") != null && !jsonObj.get("OriginSnapshot").isJsonNull()) {
        CreateOpenZFSVolumeConfigurationOriginSnapshot.validateJsonElement(jsonObj.get("OriginSnapshot"));
      }
      // validate the optional field `ReadOnly`
      if (jsonObj.get("ReadOnly") != null && !jsonObj.get("ReadOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReadOnly"));
      }
      // validate the optional field `NfsExports`
      if (jsonObj.get("NfsExports") != null && !jsonObj.get("NfsExports").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NfsExports"));
      }
      // validate the optional field `UserAndGroupQuotas`
      if (jsonObj.get("UserAndGroupQuotas") != null && !jsonObj.get("UserAndGroupQuotas").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserAndGroupQuotas"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVolumeRequestOpenZFSConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVolumeRequestOpenZFSConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVolumeRequestOpenZFSConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVolumeRequestOpenZFSConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVolumeRequestOpenZFSConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateVolumeRequestOpenZFSConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVolumeRequestOpenZFSConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateVolumeRequestOpenZFSConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateVolumeRequestOpenZFSConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateVolumeRequestOpenZFSConfiguration
   */
  public static CreateVolumeRequestOpenZFSConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVolumeRequestOpenZFSConfiguration.class);
  }

  /**
   * Convert an instance of CreateVolumeRequestOpenZFSConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

