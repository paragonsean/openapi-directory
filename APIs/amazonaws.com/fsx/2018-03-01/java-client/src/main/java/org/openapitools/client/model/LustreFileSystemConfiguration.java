/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataCompressionType;
import org.openapitools.client.model.DataRepositoryConfiguration;
import org.openapitools.client.model.DriveCacheType;
import org.openapitools.client.model.LustreDeploymentType;
import org.openapitools.client.model.LustreFileSystemConfigurationLogConfiguration;
import org.openapitools.client.model.LustreFileSystemConfigurationRootSquashConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the Amazon FSx for Lustre file system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LustreFileSystemConfiguration {
  public static final String SERIALIZED_NAME_WEEKLY_MAINTENANCE_START_TIME = "WeeklyMaintenanceStartTime";
  @SerializedName(SERIALIZED_NAME_WEEKLY_MAINTENANCE_START_TIME)
  private String weeklyMaintenanceStartTime;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_CONFIGURATION = "DataRepositoryConfiguration";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_CONFIGURATION)
  private DataRepositoryConfiguration dataRepositoryConfiguration;

  public static final String SERIALIZED_NAME_DEPLOYMENT_TYPE = "DeploymentType";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TYPE)
  private LustreDeploymentType deploymentType;

  public static final String SERIALIZED_NAME_PER_UNIT_STORAGE_THROUGHPUT = "PerUnitStorageThroughput";
  @SerializedName(SERIALIZED_NAME_PER_UNIT_STORAGE_THROUGHPUT)
  private Integer perUnitStorageThroughput;

  public static final String SERIALIZED_NAME_MOUNT_NAME = "MountName";
  @SerializedName(SERIALIZED_NAME_MOUNT_NAME)
  private String mountName;

  public static final String SERIALIZED_NAME_DAILY_AUTOMATIC_BACKUP_START_TIME = "DailyAutomaticBackupStartTime";
  @SerializedName(SERIALIZED_NAME_DAILY_AUTOMATIC_BACKUP_START_TIME)
  private String dailyAutomaticBackupStartTime;

  public static final String SERIALIZED_NAME_AUTOMATIC_BACKUP_RETENTION_DAYS = "AutomaticBackupRetentionDays";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_BACKUP_RETENTION_DAYS)
  private Integer automaticBackupRetentionDays;

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_BACKUPS = "CopyTagsToBackups";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_BACKUPS)
  private Boolean copyTagsToBackups;

  public static final String SERIALIZED_NAME_DRIVE_CACHE_TYPE = "DriveCacheType";
  @SerializedName(SERIALIZED_NAME_DRIVE_CACHE_TYPE)
  private DriveCacheType driveCacheType;

  public static final String SERIALIZED_NAME_DATA_COMPRESSION_TYPE = "DataCompressionType";
  @SerializedName(SERIALIZED_NAME_DATA_COMPRESSION_TYPE)
  private DataCompressionType dataCompressionType;

  public static final String SERIALIZED_NAME_LOG_CONFIGURATION = "LogConfiguration";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGURATION)
  private LustreFileSystemConfigurationLogConfiguration logConfiguration;

  public static final String SERIALIZED_NAME_ROOT_SQUASH_CONFIGURATION = "RootSquashConfiguration";
  @SerializedName(SERIALIZED_NAME_ROOT_SQUASH_CONFIGURATION)
  private LustreFileSystemConfigurationRootSquashConfiguration rootSquashConfiguration;

  public LustreFileSystemConfiguration() {
  }

  public LustreFileSystemConfiguration weeklyMaintenanceStartTime(String weeklyMaintenanceStartTime) {
    this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    return this;
  }

  /**
   * Get weeklyMaintenanceStartTime
   * @return weeklyMaintenanceStartTime
   */
  @javax.annotation.Nullable
  public String getWeeklyMaintenanceStartTime() {
    return weeklyMaintenanceStartTime;
  }

  public void setWeeklyMaintenanceStartTime(String weeklyMaintenanceStartTime) {
    this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
  }


  public LustreFileSystemConfiguration dataRepositoryConfiguration(DataRepositoryConfiguration dataRepositoryConfiguration) {
    this.dataRepositoryConfiguration = dataRepositoryConfiguration;
    return this;
  }

  /**
   * Get dataRepositoryConfiguration
   * @return dataRepositoryConfiguration
   */
  @javax.annotation.Nullable
  public DataRepositoryConfiguration getDataRepositoryConfiguration() {
    return dataRepositoryConfiguration;
  }

  public void setDataRepositoryConfiguration(DataRepositoryConfiguration dataRepositoryConfiguration) {
    this.dataRepositoryConfiguration = dataRepositoryConfiguration;
  }


  public LustreFileSystemConfiguration deploymentType(LustreDeploymentType deploymentType) {
    this.deploymentType = deploymentType;
    return this;
  }

  /**
   * Get deploymentType
   * @return deploymentType
   */
  @javax.annotation.Nullable
  public LustreDeploymentType getDeploymentType() {
    return deploymentType;
  }

  public void setDeploymentType(LustreDeploymentType deploymentType) {
    this.deploymentType = deploymentType;
  }


  public LustreFileSystemConfiguration perUnitStorageThroughput(Integer perUnitStorageThroughput) {
    this.perUnitStorageThroughput = perUnitStorageThroughput;
    return this;
  }

  /**
   * Get perUnitStorageThroughput
   * @return perUnitStorageThroughput
   */
  @javax.annotation.Nullable
  public Integer getPerUnitStorageThroughput() {
    return perUnitStorageThroughput;
  }

  public void setPerUnitStorageThroughput(Integer perUnitStorageThroughput) {
    this.perUnitStorageThroughput = perUnitStorageThroughput;
  }


  public LustreFileSystemConfiguration mountName(String mountName) {
    this.mountName = mountName;
    return this;
  }

  /**
   * Get mountName
   * @return mountName
   */
  @javax.annotation.Nullable
  public String getMountName() {
    return mountName;
  }

  public void setMountName(String mountName) {
    this.mountName = mountName;
  }


  public LustreFileSystemConfiguration dailyAutomaticBackupStartTime(String dailyAutomaticBackupStartTime) {
    this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
    return this;
  }

  /**
   * A recurring daily time, in the format &lt;code&gt;HH:MM&lt;/code&gt;. &lt;code&gt;HH&lt;/code&gt; is the zero-padded hour of the day (0-23), and &lt;code&gt;MM&lt;/code&gt; is the zero-padded minute of the hour. For example, &lt;code&gt;05:00&lt;/code&gt; specifies 5 AM daily. 
   * @return dailyAutomaticBackupStartTime
   */
  @javax.annotation.Nullable
  public String getDailyAutomaticBackupStartTime() {
    return dailyAutomaticBackupStartTime;
  }

  public void setDailyAutomaticBackupStartTime(String dailyAutomaticBackupStartTime) {
    this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
  }


  public LustreFileSystemConfiguration automaticBackupRetentionDays(Integer automaticBackupRetentionDays) {
    this.automaticBackupRetentionDays = automaticBackupRetentionDays;
    return this;
  }

  /**
   * The number of days to retain automatic backups. Setting this property to &lt;code&gt;0&lt;/code&gt; disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is &lt;code&gt;30&lt;/code&gt;.
   * minimum: 0
   * maximum: 90
   * @return automaticBackupRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getAutomaticBackupRetentionDays() {
    return automaticBackupRetentionDays;
  }

  public void setAutomaticBackupRetentionDays(Integer automaticBackupRetentionDays) {
    this.automaticBackupRetentionDays = automaticBackupRetentionDays;
  }


  public LustreFileSystemConfiguration copyTagsToBackups(Boolean copyTagsToBackups) {
    this.copyTagsToBackups = copyTagsToBackups;
    return this;
  }

  /**
   * Get copyTagsToBackups
   * @return copyTagsToBackups
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToBackups() {
    return copyTagsToBackups;
  }

  public void setCopyTagsToBackups(Boolean copyTagsToBackups) {
    this.copyTagsToBackups = copyTagsToBackups;
  }


  public LustreFileSystemConfiguration driveCacheType(DriveCacheType driveCacheType) {
    this.driveCacheType = driveCacheType;
    return this;
  }

  /**
   * Get driveCacheType
   * @return driveCacheType
   */
  @javax.annotation.Nullable
  public DriveCacheType getDriveCacheType() {
    return driveCacheType;
  }

  public void setDriveCacheType(DriveCacheType driveCacheType) {
    this.driveCacheType = driveCacheType;
  }


  public LustreFileSystemConfiguration dataCompressionType(DataCompressionType dataCompressionType) {
    this.dataCompressionType = dataCompressionType;
    return this;
  }

  /**
   * Get dataCompressionType
   * @return dataCompressionType
   */
  @javax.annotation.Nullable
  public DataCompressionType getDataCompressionType() {
    return dataCompressionType;
  }

  public void setDataCompressionType(DataCompressionType dataCompressionType) {
    this.dataCompressionType = dataCompressionType;
  }


  public LustreFileSystemConfiguration logConfiguration(LustreFileSystemConfigurationLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
    return this;
  }

  /**
   * Get logConfiguration
   * @return logConfiguration
   */
  @javax.annotation.Nullable
  public LustreFileSystemConfigurationLogConfiguration getLogConfiguration() {
    return logConfiguration;
  }

  public void setLogConfiguration(LustreFileSystemConfigurationLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
  }


  public LustreFileSystemConfiguration rootSquashConfiguration(LustreFileSystemConfigurationRootSquashConfiguration rootSquashConfiguration) {
    this.rootSquashConfiguration = rootSquashConfiguration;
    return this;
  }

  /**
   * Get rootSquashConfiguration
   * @return rootSquashConfiguration
   */
  @javax.annotation.Nullable
  public LustreFileSystemConfigurationRootSquashConfiguration getRootSquashConfiguration() {
    return rootSquashConfiguration;
  }

  public void setRootSquashConfiguration(LustreFileSystemConfigurationRootSquashConfiguration rootSquashConfiguration) {
    this.rootSquashConfiguration = rootSquashConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LustreFileSystemConfiguration lustreFileSystemConfiguration = (LustreFileSystemConfiguration) o;
    return Objects.equals(this.weeklyMaintenanceStartTime, lustreFileSystemConfiguration.weeklyMaintenanceStartTime) &&
        Objects.equals(this.dataRepositoryConfiguration, lustreFileSystemConfiguration.dataRepositoryConfiguration) &&
        Objects.equals(this.deploymentType, lustreFileSystemConfiguration.deploymentType) &&
        Objects.equals(this.perUnitStorageThroughput, lustreFileSystemConfiguration.perUnitStorageThroughput) &&
        Objects.equals(this.mountName, lustreFileSystemConfiguration.mountName) &&
        Objects.equals(this.dailyAutomaticBackupStartTime, lustreFileSystemConfiguration.dailyAutomaticBackupStartTime) &&
        Objects.equals(this.automaticBackupRetentionDays, lustreFileSystemConfiguration.automaticBackupRetentionDays) &&
        Objects.equals(this.copyTagsToBackups, lustreFileSystemConfiguration.copyTagsToBackups) &&
        Objects.equals(this.driveCacheType, lustreFileSystemConfiguration.driveCacheType) &&
        Objects.equals(this.dataCompressionType, lustreFileSystemConfiguration.dataCompressionType) &&
        Objects.equals(this.logConfiguration, lustreFileSystemConfiguration.logConfiguration) &&
        Objects.equals(this.rootSquashConfiguration, lustreFileSystemConfiguration.rootSquashConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(weeklyMaintenanceStartTime, dataRepositoryConfiguration, deploymentType, perUnitStorageThroughput, mountName, dailyAutomaticBackupStartTime, automaticBackupRetentionDays, copyTagsToBackups, driveCacheType, dataCompressionType, logConfiguration, rootSquashConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LustreFileSystemConfiguration {\n");
    sb.append("    weeklyMaintenanceStartTime: ").append(toIndentedString(weeklyMaintenanceStartTime)).append("\n");
    sb.append("    dataRepositoryConfiguration: ").append(toIndentedString(dataRepositoryConfiguration)).append("\n");
    sb.append("    deploymentType: ").append(toIndentedString(deploymentType)).append("\n");
    sb.append("    perUnitStorageThroughput: ").append(toIndentedString(perUnitStorageThroughput)).append("\n");
    sb.append("    mountName: ").append(toIndentedString(mountName)).append("\n");
    sb.append("    dailyAutomaticBackupStartTime: ").append(toIndentedString(dailyAutomaticBackupStartTime)).append("\n");
    sb.append("    automaticBackupRetentionDays: ").append(toIndentedString(automaticBackupRetentionDays)).append("\n");
    sb.append("    copyTagsToBackups: ").append(toIndentedString(copyTagsToBackups)).append("\n");
    sb.append("    driveCacheType: ").append(toIndentedString(driveCacheType)).append("\n");
    sb.append("    dataCompressionType: ").append(toIndentedString(dataCompressionType)).append("\n");
    sb.append("    logConfiguration: ").append(toIndentedString(logConfiguration)).append("\n");
    sb.append("    rootSquashConfiguration: ").append(toIndentedString(rootSquashConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WeeklyMaintenanceStartTime");
    openapiFields.add("DataRepositoryConfiguration");
    openapiFields.add("DeploymentType");
    openapiFields.add("PerUnitStorageThroughput");
    openapiFields.add("MountName");
    openapiFields.add("DailyAutomaticBackupStartTime");
    openapiFields.add("AutomaticBackupRetentionDays");
    openapiFields.add("CopyTagsToBackups");
    openapiFields.add("DriveCacheType");
    openapiFields.add("DataCompressionType");
    openapiFields.add("LogConfiguration");
    openapiFields.add("RootSquashConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LustreFileSystemConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LustreFileSystemConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LustreFileSystemConfiguration is not found in the empty JSON string", LustreFileSystemConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LustreFileSystemConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LustreFileSystemConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `WeeklyMaintenanceStartTime`
      if (jsonObj.get("WeeklyMaintenanceStartTime") != null && !jsonObj.get("WeeklyMaintenanceStartTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WeeklyMaintenanceStartTime"));
      }
      // validate the optional field `DataRepositoryConfiguration`
      if (jsonObj.get("DataRepositoryConfiguration") != null && !jsonObj.get("DataRepositoryConfiguration").isJsonNull()) {
        DataRepositoryConfiguration.validateJsonElement(jsonObj.get("DataRepositoryConfiguration"));
      }
      // validate the optional field `DeploymentType`
      if (jsonObj.get("DeploymentType") != null && !jsonObj.get("DeploymentType").isJsonNull()) {
        LustreDeploymentType.validateJsonElement(jsonObj.get("DeploymentType"));
      }
      // validate the optional field `PerUnitStorageThroughput`
      if (jsonObj.get("PerUnitStorageThroughput") != null && !jsonObj.get("PerUnitStorageThroughput").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PerUnitStorageThroughput"));
      }
      // validate the optional field `MountName`
      if (jsonObj.get("MountName") != null && !jsonObj.get("MountName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MountName"));
      }
      if ((jsonObj.get("DailyAutomaticBackupStartTime") != null && !jsonObj.get("DailyAutomaticBackupStartTime").isJsonNull()) && !jsonObj.get("DailyAutomaticBackupStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DailyAutomaticBackupStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DailyAutomaticBackupStartTime").toString()));
      }
      // validate the optional field `CopyTagsToBackups`
      if (jsonObj.get("CopyTagsToBackups") != null && !jsonObj.get("CopyTagsToBackups").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToBackups"));
      }
      // validate the optional field `DriveCacheType`
      if (jsonObj.get("DriveCacheType") != null && !jsonObj.get("DriveCacheType").isJsonNull()) {
        DriveCacheType.validateJsonElement(jsonObj.get("DriveCacheType"));
      }
      // validate the optional field `DataCompressionType`
      if (jsonObj.get("DataCompressionType") != null && !jsonObj.get("DataCompressionType").isJsonNull()) {
        DataCompressionType.validateJsonElement(jsonObj.get("DataCompressionType"));
      }
      // validate the optional field `LogConfiguration`
      if (jsonObj.get("LogConfiguration") != null && !jsonObj.get("LogConfiguration").isJsonNull()) {
        LustreFileSystemConfigurationLogConfiguration.validateJsonElement(jsonObj.get("LogConfiguration"));
      }
      // validate the optional field `RootSquashConfiguration`
      if (jsonObj.get("RootSquashConfiguration") != null && !jsonObj.get("RootSquashConfiguration").isJsonNull()) {
        LustreFileSystemConfigurationRootSquashConfiguration.validateJsonElement(jsonObj.get("RootSquashConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LustreFileSystemConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LustreFileSystemConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LustreFileSystemConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LustreFileSystemConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LustreFileSystemConfiguration>() {
           @Override
           public void write(JsonWriter out, LustreFileSystemConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LustreFileSystemConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LustreFileSystemConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LustreFileSystemConfiguration
   * @throws IOException if the JSON string is invalid with respect to LustreFileSystemConfiguration
   */
  public static LustreFileSystemConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LustreFileSystemConfiguration.class);
  }

  /**
   * Convert an instance of LustreFileSystemConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

