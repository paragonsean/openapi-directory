/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration of the self-managed Microsoft Active Directory (AD) directory to which the Windows File Server or ONTAP storage virtual machine (SVM) instance is joined.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SelfManagedActiveDirectoryAttributes {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT_DISTINGUISHED_NAME = "OrganizationalUnitDistinguishedName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT_DISTINGUISHED_NAME)
  private String organizationalUnitDistinguishedName;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ADMINISTRATORS_GROUP = "FileSystemAdministratorsGroup";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ADMINISTRATORS_GROUP)
  private String fileSystemAdministratorsGroup;

  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_DNS_IPS = "DnsIps";
  @SerializedName(SERIALIZED_NAME_DNS_IPS)
  private List dnsIps;

  public SelfManagedActiveDirectoryAttributes() {
  }

  public SelfManagedActiveDirectoryAttributes domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public SelfManagedActiveDirectoryAttributes organizationalUnitDistinguishedName(String organizationalUnitDistinguishedName) {
    this.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName;
    return this;
  }

  /**
   * Get organizationalUnitDistinguishedName
   * @return organizationalUnitDistinguishedName
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnitDistinguishedName() {
    return organizationalUnitDistinguishedName;
  }

  public void setOrganizationalUnitDistinguishedName(String organizationalUnitDistinguishedName) {
    this.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName;
  }


  public SelfManagedActiveDirectoryAttributes fileSystemAdministratorsGroup(String fileSystemAdministratorsGroup) {
    this.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup;
    return this;
  }

  /**
   * Get fileSystemAdministratorsGroup
   * @return fileSystemAdministratorsGroup
   */
  @javax.annotation.Nullable
  public String getFileSystemAdministratorsGroup() {
    return fileSystemAdministratorsGroup;
  }

  public void setFileSystemAdministratorsGroup(String fileSystemAdministratorsGroup) {
    this.fileSystemAdministratorsGroup = fileSystemAdministratorsGroup;
  }


  public SelfManagedActiveDirectoryAttributes userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public SelfManagedActiveDirectoryAttributes dnsIps(List dnsIps) {
    this.dnsIps = dnsIps;
    return this;
  }

  /**
   * Get dnsIps
   * @return dnsIps
   */
  @javax.annotation.Nullable
  public List getDnsIps() {
    return dnsIps;
  }

  public void setDnsIps(List dnsIps) {
    this.dnsIps = dnsIps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelfManagedActiveDirectoryAttributes selfManagedActiveDirectoryAttributes = (SelfManagedActiveDirectoryAttributes) o;
    return Objects.equals(this.domainName, selfManagedActiveDirectoryAttributes.domainName) &&
        Objects.equals(this.organizationalUnitDistinguishedName, selfManagedActiveDirectoryAttributes.organizationalUnitDistinguishedName) &&
        Objects.equals(this.fileSystemAdministratorsGroup, selfManagedActiveDirectoryAttributes.fileSystemAdministratorsGroup) &&
        Objects.equals(this.userName, selfManagedActiveDirectoryAttributes.userName) &&
        Objects.equals(this.dnsIps, selfManagedActiveDirectoryAttributes.dnsIps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, organizationalUnitDistinguishedName, fileSystemAdministratorsGroup, userName, dnsIps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelfManagedActiveDirectoryAttributes {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    organizationalUnitDistinguishedName: ").append(toIndentedString(organizationalUnitDistinguishedName)).append("\n");
    sb.append("    fileSystemAdministratorsGroup: ").append(toIndentedString(fileSystemAdministratorsGroup)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    dnsIps: ").append(toIndentedString(dnsIps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("OrganizationalUnitDistinguishedName");
    openapiFields.add("FileSystemAdministratorsGroup");
    openapiFields.add("UserName");
    openapiFields.add("DnsIps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SelfManagedActiveDirectoryAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelfManagedActiveDirectoryAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelfManagedActiveDirectoryAttributes is not found in the empty JSON string", SelfManagedActiveDirectoryAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelfManagedActiveDirectoryAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelfManagedActiveDirectoryAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `OrganizationalUnitDistinguishedName`
      if (jsonObj.get("OrganizationalUnitDistinguishedName") != null && !jsonObj.get("OrganizationalUnitDistinguishedName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OrganizationalUnitDistinguishedName"));
      }
      // validate the optional field `FileSystemAdministratorsGroup`
      if (jsonObj.get("FileSystemAdministratorsGroup") != null && !jsonObj.get("FileSystemAdministratorsGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileSystemAdministratorsGroup"));
      }
      // validate the optional field `UserName`
      if (jsonObj.get("UserName") != null && !jsonObj.get("UserName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserName"));
      }
      // validate the optional field `DnsIps`
      if (jsonObj.get("DnsIps") != null && !jsonObj.get("DnsIps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DnsIps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelfManagedActiveDirectoryAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelfManagedActiveDirectoryAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelfManagedActiveDirectoryAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelfManagedActiveDirectoryAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<SelfManagedActiveDirectoryAttributes>() {
           @Override
           public void write(JsonWriter out, SelfManagedActiveDirectoryAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelfManagedActiveDirectoryAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SelfManagedActiveDirectoryAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SelfManagedActiveDirectoryAttributes
   * @throws IOException if the JSON string is invalid with respect to SelfManagedActiveDirectoryAttributes
   */
  public static SelfManagedActiveDirectoryAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelfManagedActiveDirectoryAttributes.class);
  }

  /**
   * Convert an instance of SelfManagedActiveDirectoryAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

