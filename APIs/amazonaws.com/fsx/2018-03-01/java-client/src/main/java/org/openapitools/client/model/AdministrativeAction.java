/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AdministrativeActionFailureDetails;
import org.openapitools.client.model.AdministrativeActionTargetFileSystemValues;
import org.openapitools.client.model.AdministrativeActionType;
import org.openapitools.client.model.Snapshot;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a specific Amazon FSx administrative action for the current Windows, Lustre, or OpenZFS file system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdministrativeAction {
  public static final String SERIALIZED_NAME_ADMINISTRATIVE_ACTION_TYPE = "AdministrativeActionType";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_ACTION_TYPE)
  private AdministrativeActionType administrativeActionType;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENT = "ProgressPercent";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENT)
  private Integer progressPercent;

  public static final String SERIALIZED_NAME_REQUEST_TIME = "RequestTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIME)
  private OffsetDateTime requestTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TARGET_FILE_SYSTEM_VALUES = "TargetFileSystemValues";
  @SerializedName(SERIALIZED_NAME_TARGET_FILE_SYSTEM_VALUES)
  private AdministrativeActionTargetFileSystemValues targetFileSystemValues;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private AdministrativeActionFailureDetails failureDetails;

  public static final String SERIALIZED_NAME_TARGET_VOLUME_VALUES = "TargetVolumeValues";
  @SerializedName(SERIALIZED_NAME_TARGET_VOLUME_VALUES)
  private Volume targetVolumeValues;

  public static final String SERIALIZED_NAME_TARGET_SNAPSHOT_VALUES = "TargetSnapshotValues";
  @SerializedName(SERIALIZED_NAME_TARGET_SNAPSHOT_VALUES)
  private Snapshot targetSnapshotValues;

  public AdministrativeAction() {
  }

  public AdministrativeAction administrativeActionType(AdministrativeActionType administrativeActionType) {
    this.administrativeActionType = administrativeActionType;
    return this;
  }

  /**
   * Get administrativeActionType
   * @return administrativeActionType
   */
  @javax.annotation.Nullable
  public AdministrativeActionType getAdministrativeActionType() {
    return administrativeActionType;
  }

  public void setAdministrativeActionType(AdministrativeActionType administrativeActionType) {
    this.administrativeActionType = administrativeActionType;
  }


  public AdministrativeAction progressPercent(Integer progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

  /**
   * Get progressPercent
   * @return progressPercent
   */
  @javax.annotation.Nullable
  public Integer getProgressPercent() {
    return progressPercent;
  }

  public void setProgressPercent(Integer progressPercent) {
    this.progressPercent = progressPercent;
  }


  public AdministrativeAction requestTime(OffsetDateTime requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  /**
   * Get requestTime
   * @return requestTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestTime() {
    return requestTime;
  }

  public void setRequestTime(OffsetDateTime requestTime) {
    this.requestTime = requestTime;
  }


  public AdministrativeAction status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public AdministrativeAction targetFileSystemValues(AdministrativeActionTargetFileSystemValues targetFileSystemValues) {
    this.targetFileSystemValues = targetFileSystemValues;
    return this;
  }

  /**
   * Get targetFileSystemValues
   * @return targetFileSystemValues
   */
  @javax.annotation.Nullable
  public AdministrativeActionTargetFileSystemValues getTargetFileSystemValues() {
    return targetFileSystemValues;
  }

  public void setTargetFileSystemValues(AdministrativeActionTargetFileSystemValues targetFileSystemValues) {
    this.targetFileSystemValues = targetFileSystemValues;
  }


  public AdministrativeAction failureDetails(AdministrativeActionFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public AdministrativeActionFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(AdministrativeActionFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }


  public AdministrativeAction targetVolumeValues(Volume targetVolumeValues) {
    this.targetVolumeValues = targetVolumeValues;
    return this;
  }

  /**
   * Get targetVolumeValues
   * @return targetVolumeValues
   */
  @javax.annotation.Nullable
  public Volume getTargetVolumeValues() {
    return targetVolumeValues;
  }

  public void setTargetVolumeValues(Volume targetVolumeValues) {
    this.targetVolumeValues = targetVolumeValues;
  }


  public AdministrativeAction targetSnapshotValues(Snapshot targetSnapshotValues) {
    this.targetSnapshotValues = targetSnapshotValues;
    return this;
  }

  /**
   * Get targetSnapshotValues
   * @return targetSnapshotValues
   */
  @javax.annotation.Nullable
  public Snapshot getTargetSnapshotValues() {
    return targetSnapshotValues;
  }

  public void setTargetSnapshotValues(Snapshot targetSnapshotValues) {
    this.targetSnapshotValues = targetSnapshotValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdministrativeAction administrativeAction = (AdministrativeAction) o;
    return Objects.equals(this.administrativeActionType, administrativeAction.administrativeActionType) &&
        Objects.equals(this.progressPercent, administrativeAction.progressPercent) &&
        Objects.equals(this.requestTime, administrativeAction.requestTime) &&
        Objects.equals(this.status, administrativeAction.status) &&
        Objects.equals(this.targetFileSystemValues, administrativeAction.targetFileSystemValues) &&
        Objects.equals(this.failureDetails, administrativeAction.failureDetails) &&
        Objects.equals(this.targetVolumeValues, administrativeAction.targetVolumeValues) &&
        Objects.equals(this.targetSnapshotValues, administrativeAction.targetSnapshotValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administrativeActionType, progressPercent, requestTime, status, targetFileSystemValues, failureDetails, targetVolumeValues, targetSnapshotValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdministrativeAction {\n");
    sb.append("    administrativeActionType: ").append(toIndentedString(administrativeActionType)).append("\n");
    sb.append("    progressPercent: ").append(toIndentedString(progressPercent)).append("\n");
    sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetFileSystemValues: ").append(toIndentedString(targetFileSystemValues)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    targetVolumeValues: ").append(toIndentedString(targetVolumeValues)).append("\n");
    sb.append("    targetSnapshotValues: ").append(toIndentedString(targetSnapshotValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdministrativeActionType");
    openapiFields.add("ProgressPercent");
    openapiFields.add("RequestTime");
    openapiFields.add("Status");
    openapiFields.add("TargetFileSystemValues");
    openapiFields.add("FailureDetails");
    openapiFields.add("TargetVolumeValues");
    openapiFields.add("TargetSnapshotValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdministrativeAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdministrativeAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdministrativeAction is not found in the empty JSON string", AdministrativeAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdministrativeAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdministrativeAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdministrativeActionType`
      if (jsonObj.get("AdministrativeActionType") != null && !jsonObj.get("AdministrativeActionType").isJsonNull()) {
        AdministrativeActionType.validateJsonElement(jsonObj.get("AdministrativeActionType"));
      }
      // validate the optional field `ProgressPercent`
      if (jsonObj.get("ProgressPercent") != null && !jsonObj.get("ProgressPercent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgressPercent"));
      }
      // validate the optional field `RequestTime`
      if (jsonObj.get("RequestTime") != null && !jsonObj.get("RequestTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RequestTime"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `TargetFileSystemValues`
      if (jsonObj.get("TargetFileSystemValues") != null && !jsonObj.get("TargetFileSystemValues").isJsonNull()) {
        AdministrativeActionTargetFileSystemValues.validateJsonElement(jsonObj.get("TargetFileSystemValues"));
      }
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        AdministrativeActionFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
      // validate the optional field `TargetVolumeValues`
      if (jsonObj.get("TargetVolumeValues") != null && !jsonObj.get("TargetVolumeValues").isJsonNull()) {
        Volume.validateJsonElement(jsonObj.get("TargetVolumeValues"));
      }
      // validate the optional field `TargetSnapshotValues`
      if (jsonObj.get("TargetSnapshotValues") != null && !jsonObj.get("TargetSnapshotValues").isJsonNull()) {
        Snapshot.validateJsonElement(jsonObj.get("TargetSnapshotValues"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdministrativeAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdministrativeAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdministrativeAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdministrativeAction.class));

       return (TypeAdapter<T>) new TypeAdapter<AdministrativeAction>() {
           @Override
           public void write(JsonWriter out, AdministrativeAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdministrativeAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdministrativeAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdministrativeAction
   * @throws IOException if the JSON string is invalid with respect to AdministrativeAction
   */
  public static AdministrativeAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdministrativeAction.class);
  }

  /**
   * Convert an instance of AdministrativeAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

