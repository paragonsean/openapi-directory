/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataRepositoryTaskStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataRepositoryTaskStatus {
  public static final String SERIALIZED_NAME_TOTAL_COUNT = "TotalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public static final String SERIALIZED_NAME_SUCCEEDED_COUNT = "SucceededCount";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_COUNT)
  private Integer succeededCount;

  public static final String SERIALIZED_NAME_FAILED_COUNT = "FailedCount";
  @SerializedName(SERIALIZED_NAME_FAILED_COUNT)
  private Integer failedCount;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_RELEASED_CAPACITY = "ReleasedCapacity";
  @SerializedName(SERIALIZED_NAME_RELEASED_CAPACITY)
  private Integer releasedCapacity;

  public DataRepositoryTaskStatus() {
  }

  public DataRepositoryTaskStatus totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Get totalCount
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public DataRepositoryTaskStatus succeededCount(Integer succeededCount) {
    this.succeededCount = succeededCount;
    return this;
  }

  /**
   * Get succeededCount
   * @return succeededCount
   */
  @javax.annotation.Nullable
  public Integer getSucceededCount() {
    return succeededCount;
  }

  public void setSucceededCount(Integer succeededCount) {
    this.succeededCount = succeededCount;
  }


  public DataRepositoryTaskStatus failedCount(Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

  /**
   * Get failedCount
   * @return failedCount
   */
  @javax.annotation.Nullable
  public Integer getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(Integer failedCount) {
    this.failedCount = failedCount;
  }


  public DataRepositoryTaskStatus lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DataRepositoryTaskStatus releasedCapacity(Integer releasedCapacity) {
    this.releasedCapacity = releasedCapacity;
    return this;
  }

  /**
   * Get releasedCapacity
   * @return releasedCapacity
   */
  @javax.annotation.Nullable
  public Integer getReleasedCapacity() {
    return releasedCapacity;
  }

  public void setReleasedCapacity(Integer releasedCapacity) {
    this.releasedCapacity = releasedCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRepositoryTaskStatus dataRepositoryTaskStatus = (DataRepositoryTaskStatus) o;
    return Objects.equals(this.totalCount, dataRepositoryTaskStatus.totalCount) &&
        Objects.equals(this.succeededCount, dataRepositoryTaskStatus.succeededCount) &&
        Objects.equals(this.failedCount, dataRepositoryTaskStatus.failedCount) &&
        Objects.equals(this.lastUpdatedTime, dataRepositoryTaskStatus.lastUpdatedTime) &&
        Objects.equals(this.releasedCapacity, dataRepositoryTaskStatus.releasedCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCount, succeededCount, failedCount, lastUpdatedTime, releasedCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRepositoryTaskStatus {\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    succeededCount: ").append(toIndentedString(succeededCount)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    releasedCapacity: ").append(toIndentedString(releasedCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalCount");
    openapiFields.add("SucceededCount");
    openapiFields.add("FailedCount");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("ReleasedCapacity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataRepositoryTaskStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataRepositoryTaskStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataRepositoryTaskStatus is not found in the empty JSON string", DataRepositoryTaskStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataRepositoryTaskStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataRepositoryTaskStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TotalCount`
      if (jsonObj.get("TotalCount") != null && !jsonObj.get("TotalCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalCount"));
      }
      // validate the optional field `SucceededCount`
      if (jsonObj.get("SucceededCount") != null && !jsonObj.get("SucceededCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SucceededCount"));
      }
      // validate the optional field `FailedCount`
      if (jsonObj.get("FailedCount") != null && !jsonObj.get("FailedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedCount"));
      }
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `ReleasedCapacity`
      if (jsonObj.get("ReleasedCapacity") != null && !jsonObj.get("ReleasedCapacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ReleasedCapacity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataRepositoryTaskStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataRepositoryTaskStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataRepositoryTaskStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataRepositoryTaskStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DataRepositoryTaskStatus>() {
           @Override
           public void write(JsonWriter out, DataRepositoryTaskStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataRepositoryTaskStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataRepositoryTaskStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataRepositoryTaskStatus
   * @throws IOException if the JSON string is invalid with respect to DataRepositoryTaskStatus
   */
  public static DataRepositoryTaskStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataRepositoryTaskStatus.class);
  }

  /**
   * Convert an instance of DataRepositoryTaskStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

