/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackupDirectoryInformation;
import org.openapitools.client.model.BackupFailureDetails;
import org.openapitools.client.model.BackupFileSystem;
import org.openapitools.client.model.BackupLifecycle;
import org.openapitools.client.model.BackupType;
import org.openapitools.client.model.ResourceType;
import org.openapitools.client.model.Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Backup {
  public static final String SERIALIZED_NAME_BACKUP_ID = "BackupId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private String backupId;

  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private BackupLifecycle lifecycle;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private BackupFailureDetails failureDetails;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private BackupType type;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENT = "ProgressPercent";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENT)
  private Integer progressPercent;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_FILE_SYSTEM = "FileSystem";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM)
  private BackupFileSystem fileSystem;

  public static final String SERIALIZED_NAME_DIRECTORY_INFORMATION = "DirectoryInformation";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_INFORMATION)
  private BackupDirectoryInformation directoryInformation;

  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_SOURCE_BACKUP_ID = "SourceBackupId";
  @SerializedName(SERIALIZED_NAME_SOURCE_BACKUP_ID)
  private String sourceBackupId;

  public static final String SERIALIZED_NAME_SOURCE_BACKUP_REGION = "SourceBackupRegion";
  @SerializedName(SERIALIZED_NAME_SOURCE_BACKUP_REGION)
  private String sourceBackupRegion;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_VOLUME = "Volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Volume volume;

  public Backup() {
  }

  public Backup backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * Get backupId
   * @return backupId
   */
  @javax.annotation.Nonnull
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }


  public Backup lifecycle(BackupLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nonnull
  public BackupLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(BackupLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public Backup failureDetails(BackupFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public BackupFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(BackupFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }


  public Backup type(BackupType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public BackupType getType() {
    return type;
  }

  public void setType(BackupType type) {
    this.type = type;
  }


  public Backup progressPercent(Integer progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

  /**
   * Displays the current percent of progress of an asynchronous task.
   * minimum: 0
   * maximum: 100
   * @return progressPercent
   */
  @javax.annotation.Nullable
  public Integer getProgressPercent() {
    return progressPercent;
  }

  public void setProgressPercent(Integer progressPercent) {
    this.progressPercent = progressPercent;
  }


  public Backup creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Backup kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public Backup resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * Get resourceARN
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public Backup tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public Backup fileSystem(BackupFileSystem fileSystem) {
    this.fileSystem = fileSystem;
    return this;
  }

  /**
   * Get fileSystem
   * @return fileSystem
   */
  @javax.annotation.Nonnull
  public BackupFileSystem getFileSystem() {
    return fileSystem;
  }

  public void setFileSystem(BackupFileSystem fileSystem) {
    this.fileSystem = fileSystem;
  }


  public Backup directoryInformation(BackupDirectoryInformation directoryInformation) {
    this.directoryInformation = directoryInformation;
    return this;
  }

  /**
   * Get directoryInformation
   * @return directoryInformation
   */
  @javax.annotation.Nullable
  public BackupDirectoryInformation getDirectoryInformation() {
    return directoryInformation;
  }

  public void setDirectoryInformation(BackupDirectoryInformation directoryInformation) {
    this.directoryInformation = directoryInformation;
  }


  public Backup ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public Backup sourceBackupId(String sourceBackupId) {
    this.sourceBackupId = sourceBackupId;
    return this;
  }

  /**
   * The ID of the source backup. Specifies the backup that you are copying.
   * @return sourceBackupId
   */
  @javax.annotation.Nullable
  public String getSourceBackupId() {
    return sourceBackupId;
  }

  public void setSourceBackupId(String sourceBackupId) {
    this.sourceBackupId = sourceBackupId;
  }


  public Backup sourceBackupRegion(String sourceBackupRegion) {
    this.sourceBackupRegion = sourceBackupRegion;
    return this;
  }

  /**
   * Get sourceBackupRegion
   * @return sourceBackupRegion
   */
  @javax.annotation.Nullable
  public String getSourceBackupRegion() {
    return sourceBackupRegion;
  }

  public void setSourceBackupRegion(String sourceBackupRegion) {
    this.sourceBackupRegion = sourceBackupRegion;
  }


  public Backup resourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public Backup volume(Volume volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Get volume
   * @return volume
   */
  @javax.annotation.Nullable
  public Volume getVolume() {
    return volume;
  }

  public void setVolume(Volume volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Backup backup = (Backup) o;
    return Objects.equals(this.backupId, backup.backupId) &&
        Objects.equals(this.lifecycle, backup.lifecycle) &&
        Objects.equals(this.failureDetails, backup.failureDetails) &&
        Objects.equals(this.type, backup.type) &&
        Objects.equals(this.progressPercent, backup.progressPercent) &&
        Objects.equals(this.creationTime, backup.creationTime) &&
        Objects.equals(this.kmsKeyId, backup.kmsKeyId) &&
        Objects.equals(this.resourceARN, backup.resourceARN) &&
        Objects.equals(this.tags, backup.tags) &&
        Objects.equals(this.fileSystem, backup.fileSystem) &&
        Objects.equals(this.directoryInformation, backup.directoryInformation) &&
        Objects.equals(this.ownerId, backup.ownerId) &&
        Objects.equals(this.sourceBackupId, backup.sourceBackupId) &&
        Objects.equals(this.sourceBackupRegion, backup.sourceBackupRegion) &&
        Objects.equals(this.resourceType, backup.resourceType) &&
        Objects.equals(this.volume, backup.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupId, lifecycle, failureDetails, type, progressPercent, creationTime, kmsKeyId, resourceARN, tags, fileSystem, directoryInformation, ownerId, sourceBackupId, sourceBackupRegion, resourceType, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Backup {\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    progressPercent: ").append(toIndentedString(progressPercent)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fileSystem: ").append(toIndentedString(fileSystem)).append("\n");
    sb.append("    directoryInformation: ").append(toIndentedString(directoryInformation)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    sourceBackupId: ").append(toIndentedString(sourceBackupId)).append("\n");
    sb.append("    sourceBackupRegion: ").append(toIndentedString(sourceBackupRegion)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackupId");
    openapiFields.add("Lifecycle");
    openapiFields.add("FailureDetails");
    openapiFields.add("Type");
    openapiFields.add("ProgressPercent");
    openapiFields.add("CreationTime");
    openapiFields.add("KmsKeyId");
    openapiFields.add("ResourceARN");
    openapiFields.add("Tags");
    openapiFields.add("FileSystem");
    openapiFields.add("DirectoryInformation");
    openapiFields.add("OwnerId");
    openapiFields.add("SourceBackupId");
    openapiFields.add("SourceBackupRegion");
    openapiFields.add("ResourceType");
    openapiFields.add("Volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BackupId");
    openapiRequiredFields.add("Lifecycle");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("FileSystem");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Backup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Backup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Backup is not found in the empty JSON string", Backup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Backup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Backup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Backup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BackupId`
      String.validateJsonElement(jsonObj.get("BackupId"));
      // validate the required field `Lifecycle`
      BackupLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        BackupFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
      // validate the required field `Type`
      BackupType.validateJsonElement(jsonObj.get("Type"));
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `ResourceARN`
      if (jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceARN"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the required field `FileSystem`
      BackupFileSystem.validateJsonElement(jsonObj.get("FileSystem"));
      // validate the optional field `DirectoryInformation`
      if (jsonObj.get("DirectoryInformation") != null && !jsonObj.get("DirectoryInformation").isJsonNull()) {
        BackupDirectoryInformation.validateJsonElement(jsonObj.get("DirectoryInformation"));
      }
      if ((jsonObj.get("OwnerId") != null && !jsonObj.get("OwnerId").isJsonNull()) && !jsonObj.get("OwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerId").toString()));
      }
      if ((jsonObj.get("SourceBackupId") != null && !jsonObj.get("SourceBackupId").isJsonNull()) && !jsonObj.get("SourceBackupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceBackupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceBackupId").toString()));
      }
      // validate the optional field `SourceBackupRegion`
      if (jsonObj.get("SourceBackupRegion") != null && !jsonObj.get("SourceBackupRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceBackupRegion"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `Volume`
      if (jsonObj.get("Volume") != null && !jsonObj.get("Volume").isJsonNull()) {
        Volume.validateJsonElement(jsonObj.get("Volume"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Backup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Backup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Backup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Backup.class));

       return (TypeAdapter<T>) new TypeAdapter<Backup>() {
           @Override
           public void write(JsonWriter out, Backup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Backup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Backup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Backup
   * @throws IOException if the JSON string is invalid with respect to Backup
   */
  public static Backup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Backup.class);
  }

  /**
   * Convert an instance of Backup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

