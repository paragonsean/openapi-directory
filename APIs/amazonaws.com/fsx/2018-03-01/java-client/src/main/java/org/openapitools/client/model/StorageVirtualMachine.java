/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StorageVirtualMachineActiveDirectoryConfiguration;
import org.openapitools.client.model.StorageVirtualMachineEndpoints;
import org.openapitools.client.model.StorageVirtualMachineLifecycle;
import org.openapitools.client.model.StorageVirtualMachineLifecycleTransitionReason;
import org.openapitools.client.model.StorageVirtualMachineRootVolumeSecurityStyle;
import org.openapitools.client.model.StorageVirtualMachineSubtype;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the Amazon FSx for NetApp ONTAP storage virtual machine (SVM) configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageVirtualMachine {
  public static final String SERIALIZED_NAME_ACTIVE_DIRECTORY_CONFIGURATION = "ActiveDirectoryConfiguration";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DIRECTORY_CONFIGURATION)
  private StorageVirtualMachineActiveDirectoryConfiguration activeDirectoryConfiguration;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_ENDPOINTS = "Endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private StorageVirtualMachineEndpoints endpoints;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private StorageVirtualMachineLifecycle lifecycle;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_STORAGE_VIRTUAL_MACHINE_ID = "StorageVirtualMachineId";
  @SerializedName(SERIALIZED_NAME_STORAGE_VIRTUAL_MACHINE_ID)
  private String storageVirtualMachineId;

  public static final String SERIALIZED_NAME_SUBTYPE = "Subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private StorageVirtualMachineSubtype subtype;

  public static final String SERIALIZED_NAME_U_U_I_D = "UUID";
  @SerializedName(SERIALIZED_NAME_U_U_I_D)
  private String UUID;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFECYCLE_TRANSITION_REASON = "LifecycleTransitionReason";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_TRANSITION_REASON)
  private StorageVirtualMachineLifecycleTransitionReason lifecycleTransitionReason;

  public static final String SERIALIZED_NAME_ROOT_VOLUME_SECURITY_STYLE = "RootVolumeSecurityStyle";
  @SerializedName(SERIALIZED_NAME_ROOT_VOLUME_SECURITY_STYLE)
  private StorageVirtualMachineRootVolumeSecurityStyle rootVolumeSecurityStyle;

  public StorageVirtualMachine() {
  }

  public StorageVirtualMachine activeDirectoryConfiguration(StorageVirtualMachineActiveDirectoryConfiguration activeDirectoryConfiguration) {
    this.activeDirectoryConfiguration = activeDirectoryConfiguration;
    return this;
  }

  /**
   * Get activeDirectoryConfiguration
   * @return activeDirectoryConfiguration
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineActiveDirectoryConfiguration getActiveDirectoryConfiguration() {
    return activeDirectoryConfiguration;
  }

  public void setActiveDirectoryConfiguration(StorageVirtualMachineActiveDirectoryConfiguration activeDirectoryConfiguration) {
    this.activeDirectoryConfiguration = activeDirectoryConfiguration;
  }


  public StorageVirtualMachine creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public StorageVirtualMachine endpoints(StorageVirtualMachineEndpoints endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * Get endpoints
   * @return endpoints
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineEndpoints getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(StorageVirtualMachineEndpoints endpoints) {
    this.endpoints = endpoints;
  }


  public StorageVirtualMachine fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * The globally unique ID of the file system, assigned by Amazon FSx.
   * @return fileSystemId
   */
  @javax.annotation.Nullable
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public StorageVirtualMachine lifecycle(StorageVirtualMachineLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(StorageVirtualMachineLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public StorageVirtualMachine name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StorageVirtualMachine resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public StorageVirtualMachine storageVirtualMachineId(String storageVirtualMachineId) {
    this.storageVirtualMachineId = storageVirtualMachineId;
    return this;
  }

  /**
   * Get storageVirtualMachineId
   * @return storageVirtualMachineId
   */
  @javax.annotation.Nullable
  public String getStorageVirtualMachineId() {
    return storageVirtualMachineId;
  }

  public void setStorageVirtualMachineId(String storageVirtualMachineId) {
    this.storageVirtualMachineId = storageVirtualMachineId;
  }


  public StorageVirtualMachine subtype(StorageVirtualMachineSubtype subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * Get subtype
   * @return subtype
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineSubtype getSubtype() {
    return subtype;
  }

  public void setSubtype(StorageVirtualMachineSubtype subtype) {
    this.subtype = subtype;
  }


  public StorageVirtualMachine UUID(String UUID) {
    this.UUID = UUID;
    return this;
  }

  /**
   * Get UUID
   * @return UUID
   */
  @javax.annotation.Nullable
  public String getUUID() {
    return UUID;
  }

  public void setUUID(String UUID) {
    this.UUID = UUID;
  }


  public StorageVirtualMachine tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StorageVirtualMachine addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public StorageVirtualMachine lifecycleTransitionReason(StorageVirtualMachineLifecycleTransitionReason lifecycleTransitionReason) {
    this.lifecycleTransitionReason = lifecycleTransitionReason;
    return this;
  }

  /**
   * Get lifecycleTransitionReason
   * @return lifecycleTransitionReason
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineLifecycleTransitionReason getLifecycleTransitionReason() {
    return lifecycleTransitionReason;
  }

  public void setLifecycleTransitionReason(StorageVirtualMachineLifecycleTransitionReason lifecycleTransitionReason) {
    this.lifecycleTransitionReason = lifecycleTransitionReason;
  }


  public StorageVirtualMachine rootVolumeSecurityStyle(StorageVirtualMachineRootVolumeSecurityStyle rootVolumeSecurityStyle) {
    this.rootVolumeSecurityStyle = rootVolumeSecurityStyle;
    return this;
  }

  /**
   * Get rootVolumeSecurityStyle
   * @return rootVolumeSecurityStyle
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineRootVolumeSecurityStyle getRootVolumeSecurityStyle() {
    return rootVolumeSecurityStyle;
  }

  public void setRootVolumeSecurityStyle(StorageVirtualMachineRootVolumeSecurityStyle rootVolumeSecurityStyle) {
    this.rootVolumeSecurityStyle = rootVolumeSecurityStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageVirtualMachine storageVirtualMachine = (StorageVirtualMachine) o;
    return Objects.equals(this.activeDirectoryConfiguration, storageVirtualMachine.activeDirectoryConfiguration) &&
        Objects.equals(this.creationTime, storageVirtualMachine.creationTime) &&
        Objects.equals(this.endpoints, storageVirtualMachine.endpoints) &&
        Objects.equals(this.fileSystemId, storageVirtualMachine.fileSystemId) &&
        Objects.equals(this.lifecycle, storageVirtualMachine.lifecycle) &&
        Objects.equals(this.name, storageVirtualMachine.name) &&
        Objects.equals(this.resourceARN, storageVirtualMachine.resourceARN) &&
        Objects.equals(this.storageVirtualMachineId, storageVirtualMachine.storageVirtualMachineId) &&
        Objects.equals(this.subtype, storageVirtualMachine.subtype) &&
        Objects.equals(this.UUID, storageVirtualMachine.UUID) &&
        Objects.equals(this.tags, storageVirtualMachine.tags) &&
        Objects.equals(this.lifecycleTransitionReason, storageVirtualMachine.lifecycleTransitionReason) &&
        Objects.equals(this.rootVolumeSecurityStyle, storageVirtualMachine.rootVolumeSecurityStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeDirectoryConfiguration, creationTime, endpoints, fileSystemId, lifecycle, name, resourceARN, storageVirtualMachineId, subtype, UUID, tags, lifecycleTransitionReason, rootVolumeSecurityStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageVirtualMachine {\n");
    sb.append("    activeDirectoryConfiguration: ").append(toIndentedString(activeDirectoryConfiguration)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    storageVirtualMachineId: ").append(toIndentedString(storageVirtualMachineId)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    UUID: ").append(toIndentedString(UUID)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    lifecycleTransitionReason: ").append(toIndentedString(lifecycleTransitionReason)).append("\n");
    sb.append("    rootVolumeSecurityStyle: ").append(toIndentedString(rootVolumeSecurityStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveDirectoryConfiguration");
    openapiFields.add("CreationTime");
    openapiFields.add("Endpoints");
    openapiFields.add("FileSystemId");
    openapiFields.add("Lifecycle");
    openapiFields.add("Name");
    openapiFields.add("ResourceARN");
    openapiFields.add("StorageVirtualMachineId");
    openapiFields.add("Subtype");
    openapiFields.add("UUID");
    openapiFields.add("Tags");
    openapiFields.add("LifecycleTransitionReason");
    openapiFields.add("RootVolumeSecurityStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageVirtualMachine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageVirtualMachine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageVirtualMachine is not found in the empty JSON string", StorageVirtualMachine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageVirtualMachine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageVirtualMachine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActiveDirectoryConfiguration`
      if (jsonObj.get("ActiveDirectoryConfiguration") != null && !jsonObj.get("ActiveDirectoryConfiguration").isJsonNull()) {
        StorageVirtualMachineActiveDirectoryConfiguration.validateJsonElement(jsonObj.get("ActiveDirectoryConfiguration"));
      }
      // validate the optional field `Endpoints`
      if (jsonObj.get("Endpoints") != null && !jsonObj.get("Endpoints").isJsonNull()) {
        StorageVirtualMachineEndpoints.validateJsonElement(jsonObj.get("Endpoints"));
      }
      if ((jsonObj.get("FileSystemId") != null && !jsonObj.get("FileSystemId").isJsonNull()) && !jsonObj.get("FileSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileSystemId").toString()));
      }
      // validate the optional field `Lifecycle`
      if (jsonObj.get("Lifecycle") != null && !jsonObj.get("Lifecycle").isJsonNull()) {
        StorageVirtualMachineLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      if ((jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) && !jsonObj.get("ResourceARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceARN").toString()));
      }
      // validate the optional field `StorageVirtualMachineId`
      if (jsonObj.get("StorageVirtualMachineId") != null && !jsonObj.get("StorageVirtualMachineId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StorageVirtualMachineId"));
      }
      // validate the optional field `Subtype`
      if (jsonObj.get("Subtype") != null && !jsonObj.get("Subtype").isJsonNull()) {
        StorageVirtualMachineSubtype.validateJsonElement(jsonObj.get("Subtype"));
      }
      // validate the optional field `UUID`
      if (jsonObj.get("UUID") != null && !jsonObj.get("UUID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UUID"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `LifecycleTransitionReason`
      if (jsonObj.get("LifecycleTransitionReason") != null && !jsonObj.get("LifecycleTransitionReason").isJsonNull()) {
        StorageVirtualMachineLifecycleTransitionReason.validateJsonElement(jsonObj.get("LifecycleTransitionReason"));
      }
      // validate the optional field `RootVolumeSecurityStyle`
      if (jsonObj.get("RootVolumeSecurityStyle") != null && !jsonObj.get("RootVolumeSecurityStyle").isJsonNull()) {
        StorageVirtualMachineRootVolumeSecurityStyle.validateJsonElement(jsonObj.get("RootVolumeSecurityStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageVirtualMachine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageVirtualMachine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageVirtualMachine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageVirtualMachine.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageVirtualMachine>() {
           @Override
           public void write(JsonWriter out, StorageVirtualMachine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageVirtualMachine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageVirtualMachine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageVirtualMachine
   * @throws IOException if the JSON string is invalid with respect to StorageVirtualMachine
   */
  public static StorageVirtualMachine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageVirtualMachine.class);
  }

  /**
   * Convert an instance of StorageVirtualMachine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

