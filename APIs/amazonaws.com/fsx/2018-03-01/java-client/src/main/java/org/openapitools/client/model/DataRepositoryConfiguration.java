/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoImportPolicyType;
import org.openapitools.client.model.DataRepositoryFailureDetails;
import org.openapitools.client.model.DataRepositoryLifecycle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The data repository configuration object for Lustre file systems returned in the response of the &lt;code&gt;CreateFileSystem&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;This data type is not supported on file systems with a data repository association. For file systems with a data repository association, see .&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataRepositoryConfiguration {
  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private DataRepositoryLifecycle lifecycle;

  public static final String SERIALIZED_NAME_IMPORT_PATH = "ImportPath";
  @SerializedName(SERIALIZED_NAME_IMPORT_PATH)
  private String importPath;

  public static final String SERIALIZED_NAME_EXPORT_PATH = "ExportPath";
  @SerializedName(SERIALIZED_NAME_EXPORT_PATH)
  private String exportPath;

  public static final String SERIALIZED_NAME_IMPORTED_FILE_CHUNK_SIZE = "ImportedFileChunkSize";
  @SerializedName(SERIALIZED_NAME_IMPORTED_FILE_CHUNK_SIZE)
  private Integer importedFileChunkSize;

  public static final String SERIALIZED_NAME_AUTO_IMPORT_POLICY = "AutoImportPolicy";
  @SerializedName(SERIALIZED_NAME_AUTO_IMPORT_POLICY)
  private AutoImportPolicyType autoImportPolicy;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private DataRepositoryFailureDetails failureDetails;

  public DataRepositoryConfiguration() {
  }

  public DataRepositoryConfiguration lifecycle(DataRepositoryLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public DataRepositoryLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(DataRepositoryLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public DataRepositoryConfiguration importPath(String importPath) {
    this.importPath = importPath;
    return this;
  }

  /**
   * Get importPath
   * @return importPath
   */
  @javax.annotation.Nullable
  public String getImportPath() {
    return importPath;
  }

  public void setImportPath(String importPath) {
    this.importPath = importPath;
  }


  public DataRepositoryConfiguration exportPath(String exportPath) {
    this.exportPath = exportPath;
    return this;
  }

  /**
   * Get exportPath
   * @return exportPath
   */
  @javax.annotation.Nullable
  public String getExportPath() {
    return exportPath;
  }

  public void setExportPath(String exportPath) {
    this.exportPath = exportPath;
  }


  public DataRepositoryConfiguration importedFileChunkSize(Integer importedFileChunkSize) {
    this.importedFileChunkSize = importedFileChunkSize;
    return this;
  }

  /**
   * Get importedFileChunkSize
   * @return importedFileChunkSize
   */
  @javax.annotation.Nullable
  public Integer getImportedFileChunkSize() {
    return importedFileChunkSize;
  }

  public void setImportedFileChunkSize(Integer importedFileChunkSize) {
    this.importedFileChunkSize = importedFileChunkSize;
  }


  public DataRepositoryConfiguration autoImportPolicy(AutoImportPolicyType autoImportPolicy) {
    this.autoImportPolicy = autoImportPolicy;
    return this;
  }

  /**
   * Get autoImportPolicy
   * @return autoImportPolicy
   */
  @javax.annotation.Nullable
  public AutoImportPolicyType getAutoImportPolicy() {
    return autoImportPolicy;
  }

  public void setAutoImportPolicy(AutoImportPolicyType autoImportPolicy) {
    this.autoImportPolicy = autoImportPolicy;
  }


  public DataRepositoryConfiguration failureDetails(DataRepositoryFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public DataRepositoryFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(DataRepositoryFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRepositoryConfiguration dataRepositoryConfiguration = (DataRepositoryConfiguration) o;
    return Objects.equals(this.lifecycle, dataRepositoryConfiguration.lifecycle) &&
        Objects.equals(this.importPath, dataRepositoryConfiguration.importPath) &&
        Objects.equals(this.exportPath, dataRepositoryConfiguration.exportPath) &&
        Objects.equals(this.importedFileChunkSize, dataRepositoryConfiguration.importedFileChunkSize) &&
        Objects.equals(this.autoImportPolicy, dataRepositoryConfiguration.autoImportPolicy) &&
        Objects.equals(this.failureDetails, dataRepositoryConfiguration.failureDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifecycle, importPath, exportPath, importedFileChunkSize, autoImportPolicy, failureDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRepositoryConfiguration {\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    importPath: ").append(toIndentedString(importPath)).append("\n");
    sb.append("    exportPath: ").append(toIndentedString(exportPath)).append("\n");
    sb.append("    importedFileChunkSize: ").append(toIndentedString(importedFileChunkSize)).append("\n");
    sb.append("    autoImportPolicy: ").append(toIndentedString(autoImportPolicy)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Lifecycle");
    openapiFields.add("ImportPath");
    openapiFields.add("ExportPath");
    openapiFields.add("ImportedFileChunkSize");
    openapiFields.add("AutoImportPolicy");
    openapiFields.add("FailureDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataRepositoryConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataRepositoryConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataRepositoryConfiguration is not found in the empty JSON string", DataRepositoryConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataRepositoryConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataRepositoryConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Lifecycle`
      if (jsonObj.get("Lifecycle") != null && !jsonObj.get("Lifecycle").isJsonNull()) {
        DataRepositoryLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      }
      // validate the optional field `ImportPath`
      if (jsonObj.get("ImportPath") != null && !jsonObj.get("ImportPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImportPath"));
      }
      // validate the optional field `ExportPath`
      if (jsonObj.get("ExportPath") != null && !jsonObj.get("ExportPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExportPath"));
      }
      // validate the optional field `ImportedFileChunkSize`
      if (jsonObj.get("ImportedFileChunkSize") != null && !jsonObj.get("ImportedFileChunkSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ImportedFileChunkSize"));
      }
      // validate the optional field `AutoImportPolicy`
      if (jsonObj.get("AutoImportPolicy") != null && !jsonObj.get("AutoImportPolicy").isJsonNull()) {
        AutoImportPolicyType.validateJsonElement(jsonObj.get("AutoImportPolicy"));
      }
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        DataRepositoryFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataRepositoryConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataRepositoryConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataRepositoryConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataRepositoryConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataRepositoryConfiguration>() {
           @Override
           public void write(JsonWriter out, DataRepositoryConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataRepositoryConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataRepositoryConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataRepositoryConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataRepositoryConfiguration
   */
  public static DataRepositoryConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataRepositoryConfiguration.class);
  }

  /**
   * Convert an instance of DataRepositoryConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

