/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateStorageVirtualMachineRequestActiveDirectoryConfiguration;
import org.openapitools.client.model.StorageVirtualMachineRootVolumeSecurityStyle;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateStorageVirtualMachineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStorageVirtualMachineRequest {
  public static final String SERIALIZED_NAME_ACTIVE_DIRECTORY_CONFIGURATION = "ActiveDirectoryConfiguration";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DIRECTORY_CONFIGURATION)
  private CreateStorageVirtualMachineRequestActiveDirectoryConfiguration activeDirectoryConfiguration;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SVM_ADMIN_PASSWORD = "SvmAdminPassword";
  @SerializedName(SERIALIZED_NAME_SVM_ADMIN_PASSWORD)
  private String svmAdminPassword;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOT_VOLUME_SECURITY_STYLE = "RootVolumeSecurityStyle";
  @SerializedName(SERIALIZED_NAME_ROOT_VOLUME_SECURITY_STYLE)
  private StorageVirtualMachineRootVolumeSecurityStyle rootVolumeSecurityStyle;

  public CreateStorageVirtualMachineRequest() {
  }

  public CreateStorageVirtualMachineRequest activeDirectoryConfiguration(CreateStorageVirtualMachineRequestActiveDirectoryConfiguration activeDirectoryConfiguration) {
    this.activeDirectoryConfiguration = activeDirectoryConfiguration;
    return this;
  }

  /**
   * Get activeDirectoryConfiguration
   * @return activeDirectoryConfiguration
   */
  @javax.annotation.Nullable
  public CreateStorageVirtualMachineRequestActiveDirectoryConfiguration getActiveDirectoryConfiguration() {
    return activeDirectoryConfiguration;
  }

  public void setActiveDirectoryConfiguration(CreateStorageVirtualMachineRequestActiveDirectoryConfiguration activeDirectoryConfiguration) {
    this.activeDirectoryConfiguration = activeDirectoryConfiguration;
  }


  public CreateStorageVirtualMachineRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateStorageVirtualMachineRequest fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * The globally unique ID of the file system, assigned by Amazon FSx.
   * @return fileSystemId
   */
  @javax.annotation.Nonnull
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public CreateStorageVirtualMachineRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateStorageVirtualMachineRequest svmAdminPassword(String svmAdminPassword) {
    this.svmAdminPassword = svmAdminPassword;
    return this;
  }

  /**
   * Get svmAdminPassword
   * @return svmAdminPassword
   */
  @javax.annotation.Nullable
  public String getSvmAdminPassword() {
    return svmAdminPassword;
  }

  public void setSvmAdminPassword(String svmAdminPassword) {
    this.svmAdminPassword = svmAdminPassword;
  }


  public CreateStorageVirtualMachineRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateStorageVirtualMachineRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateStorageVirtualMachineRequest rootVolumeSecurityStyle(StorageVirtualMachineRootVolumeSecurityStyle rootVolumeSecurityStyle) {
    this.rootVolumeSecurityStyle = rootVolumeSecurityStyle;
    return this;
  }

  /**
   * Get rootVolumeSecurityStyle
   * @return rootVolumeSecurityStyle
   */
  @javax.annotation.Nullable
  public StorageVirtualMachineRootVolumeSecurityStyle getRootVolumeSecurityStyle() {
    return rootVolumeSecurityStyle;
  }

  public void setRootVolumeSecurityStyle(StorageVirtualMachineRootVolumeSecurityStyle rootVolumeSecurityStyle) {
    this.rootVolumeSecurityStyle = rootVolumeSecurityStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStorageVirtualMachineRequest createStorageVirtualMachineRequest = (CreateStorageVirtualMachineRequest) o;
    return Objects.equals(this.activeDirectoryConfiguration, createStorageVirtualMachineRequest.activeDirectoryConfiguration) &&
        Objects.equals(this.clientRequestToken, createStorageVirtualMachineRequest.clientRequestToken) &&
        Objects.equals(this.fileSystemId, createStorageVirtualMachineRequest.fileSystemId) &&
        Objects.equals(this.name, createStorageVirtualMachineRequest.name) &&
        Objects.equals(this.svmAdminPassword, createStorageVirtualMachineRequest.svmAdminPassword) &&
        Objects.equals(this.tags, createStorageVirtualMachineRequest.tags) &&
        Objects.equals(this.rootVolumeSecurityStyle, createStorageVirtualMachineRequest.rootVolumeSecurityStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeDirectoryConfiguration, clientRequestToken, fileSystemId, name, svmAdminPassword, tags, rootVolumeSecurityStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStorageVirtualMachineRequest {\n");
    sb.append("    activeDirectoryConfiguration: ").append(toIndentedString(activeDirectoryConfiguration)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    svmAdminPassword: ").append(toIndentedString(svmAdminPassword)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    rootVolumeSecurityStyle: ").append(toIndentedString(rootVolumeSecurityStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveDirectoryConfiguration");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("FileSystemId");
    openapiFields.add("Name");
    openapiFields.add("SvmAdminPassword");
    openapiFields.add("Tags");
    openapiFields.add("RootVolumeSecurityStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FileSystemId");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStorageVirtualMachineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStorageVirtualMachineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStorageVirtualMachineRequest is not found in the empty JSON string", CreateStorageVirtualMachineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStorageVirtualMachineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStorageVirtualMachineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateStorageVirtualMachineRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActiveDirectoryConfiguration`
      if (jsonObj.get("ActiveDirectoryConfiguration") != null && !jsonObj.get("ActiveDirectoryConfiguration").isJsonNull()) {
        CreateStorageVirtualMachineRequestActiveDirectoryConfiguration.validateJsonElement(jsonObj.get("ActiveDirectoryConfiguration"));
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      if (!jsonObj.get("FileSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileSystemId").toString()));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `SvmAdminPassword`
      if (jsonObj.get("SvmAdminPassword") != null && !jsonObj.get("SvmAdminPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SvmAdminPassword"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `RootVolumeSecurityStyle`
      if (jsonObj.get("RootVolumeSecurityStyle") != null && !jsonObj.get("RootVolumeSecurityStyle").isJsonNull()) {
        StorageVirtualMachineRootVolumeSecurityStyle.validateJsonElement(jsonObj.get("RootVolumeSecurityStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStorageVirtualMachineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStorageVirtualMachineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStorageVirtualMachineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStorageVirtualMachineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStorageVirtualMachineRequest>() {
           @Override
           public void write(JsonWriter out, CreateStorageVirtualMachineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStorageVirtualMachineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStorageVirtualMachineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStorageVirtualMachineRequest
   * @throws IOException if the JSON string is invalid with respect to CreateStorageVirtualMachineRequest
   */
  public static CreateStorageVirtualMachineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStorageVirtualMachineRequest.class);
  }

  /**
   * Convert an instance of CreateStorageVirtualMachineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

