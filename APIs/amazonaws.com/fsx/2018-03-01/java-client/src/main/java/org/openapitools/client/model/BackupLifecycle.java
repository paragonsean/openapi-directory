/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &lt;p&gt;The lifecycle status of the backup.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AVAILABLE&lt;/code&gt; - The backup is fully available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt; - For user-initiated backups on Lustre file systems only; Amazon FSx hasn&#39;t started creating the backup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - Amazon FSx is creating the new user-initiated backup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TRANSFERRING&lt;/code&gt; - For user-initiated backups on Lustre file systems only; Amazon FSx is backing up the file system.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;COPYING&lt;/code&gt; - Amazon FSx is copying the backup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt; - Amazon FSx deleted the backup and it&#39;s no longer available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED&lt;/code&gt; - Amazon FSx couldn&#39;t finish the backup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@JsonAdapter(BackupLifecycle.Adapter.class)
public enum BackupLifecycle {
  
  AVAILABLE("AVAILABLE"),
  
  CREATING("CREATING"),
  
  TRANSFERRING("TRANSFERRING"),
  
  DELETED("DELETED"),
  
  FAILED("FAILED"),
  
  PENDING("PENDING"),
  
  COPYING("COPYING");

  private String value;

  BackupLifecycle(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static BackupLifecycle fromValue(String value) {
    for (BackupLifecycle b : BackupLifecycle.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<BackupLifecycle> {
    @Override
    public void write(final JsonWriter jsonWriter, final BackupLifecycle enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public BackupLifecycle read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return BackupLifecycle.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    BackupLifecycle.fromValue(value);
  }
}

