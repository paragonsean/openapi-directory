/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataRepositoryAssociationNFS;
import org.openapitools.client.model.DataRepositoryAssociationS3;
import org.openapitools.client.model.DataRepositoryFailureDetails;
import org.openapitools.client.model.DataRepositoryLifecycle;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The configuration of a data repository association that links an Amazon FSx for Lustre file system to an Amazon S3 bucket or an Amazon File Cache resource to an Amazon S3 bucket or an NFS file system. The data repository association configuration object is returned in the response of the following operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreateDataRepositoryAssociation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UpdateDataRepositoryAssociation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DescribeDataRepositoryAssociations&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data repository associations are supported on Amazon File Cache resources and all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataRepositoryAssociation {
  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private DataRepositoryLifecycle lifecycle;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private DataRepositoryFailureDetails failureDetails;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_PATH = "FileSystemPath";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_PATH)
  private String fileSystemPath;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_PATH = "DataRepositoryPath";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_PATH)
  private String dataRepositoryPath;

  public static final String SERIALIZED_NAME_BATCH_IMPORT_META_DATA_ON_CREATE = "BatchImportMetaDataOnCreate";
  @SerializedName(SERIALIZED_NAME_BATCH_IMPORT_META_DATA_ON_CREATE)
  private Boolean batchImportMetaDataOnCreate;

  public static final String SERIALIZED_NAME_IMPORTED_FILE_CHUNK_SIZE = "ImportedFileChunkSize";
  @SerializedName(SERIALIZED_NAME_IMPORTED_FILE_CHUNK_SIZE)
  private Integer importedFileChunkSize;

  public static final String SERIALIZED_NAME_S3 = "S3";
  @SerializedName(SERIALIZED_NAME_S3)
  private DataRepositoryAssociationS3 S3;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_FILE_CACHE_ID = "FileCacheId";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_ID)
  private String fileCacheId;

  public static final String SERIALIZED_NAME_FILE_CACHE_PATH = "FileCachePath";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_PATH)
  private String fileCachePath;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_SUBDIRECTORIES = "DataRepositorySubdirectories";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_SUBDIRECTORIES)
  private List dataRepositorySubdirectories;

  public static final String SERIALIZED_NAME_N_F_S = "NFS";
  @SerializedName(SERIALIZED_NAME_N_F_S)
  private DataRepositoryAssociationNFS NFS;

  public DataRepositoryAssociation() {
  }

  public DataRepositoryAssociation associationId(String associationId) {
    this.associationId = associationId;
    return this;
  }

  /**
   * Get associationId
   * @return associationId
   */
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }

  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public DataRepositoryAssociation resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public DataRepositoryAssociation fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * The globally unique ID of the file system, assigned by Amazon FSx.
   * @return fileSystemId
   */
  @javax.annotation.Nullable
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public DataRepositoryAssociation lifecycle(DataRepositoryLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public DataRepositoryLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(DataRepositoryLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public DataRepositoryAssociation failureDetails(DataRepositoryFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public DataRepositoryFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(DataRepositoryFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }


  public DataRepositoryAssociation fileSystemPath(String fileSystemPath) {
    this.fileSystemPath = fileSystemPath;
    return this;
  }

  /**
   * Get fileSystemPath
   * @return fileSystemPath
   */
  @javax.annotation.Nullable
  public String getFileSystemPath() {
    return fileSystemPath;
  }

  public void setFileSystemPath(String fileSystemPath) {
    this.fileSystemPath = fileSystemPath;
  }


  public DataRepositoryAssociation dataRepositoryPath(String dataRepositoryPath) {
    this.dataRepositoryPath = dataRepositoryPath;
    return this;
  }

  /**
   * Get dataRepositoryPath
   * @return dataRepositoryPath
   */
  @javax.annotation.Nullable
  public String getDataRepositoryPath() {
    return dataRepositoryPath;
  }

  public void setDataRepositoryPath(String dataRepositoryPath) {
    this.dataRepositoryPath = dataRepositoryPath;
  }


  public DataRepositoryAssociation batchImportMetaDataOnCreate(Boolean batchImportMetaDataOnCreate) {
    this.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate;
    return this;
  }

  /**
   * Get batchImportMetaDataOnCreate
   * @return batchImportMetaDataOnCreate
   */
  @javax.annotation.Nullable
  public Boolean getBatchImportMetaDataOnCreate() {
    return batchImportMetaDataOnCreate;
  }

  public void setBatchImportMetaDataOnCreate(Boolean batchImportMetaDataOnCreate) {
    this.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate;
  }


  public DataRepositoryAssociation importedFileChunkSize(Integer importedFileChunkSize) {
    this.importedFileChunkSize = importedFileChunkSize;
    return this;
  }

  /**
   * Get importedFileChunkSize
   * @return importedFileChunkSize
   */
  @javax.annotation.Nullable
  public Integer getImportedFileChunkSize() {
    return importedFileChunkSize;
  }

  public void setImportedFileChunkSize(Integer importedFileChunkSize) {
    this.importedFileChunkSize = importedFileChunkSize;
  }


  public DataRepositoryAssociation S3(DataRepositoryAssociationS3 S3) {
    this.S3 = S3;
    return this;
  }

  /**
   * Get S3
   * @return S3
   */
  @javax.annotation.Nullable
  public DataRepositoryAssociationS3 getS3() {
    return S3;
  }

  public void setS3(DataRepositoryAssociationS3 S3) {
    this.S3 = S3;
  }


  public DataRepositoryAssociation tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public DataRepositoryAssociation addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public DataRepositoryAssociation creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DataRepositoryAssociation fileCacheId(String fileCacheId) {
    this.fileCacheId = fileCacheId;
    return this;
  }

  /**
   * Get fileCacheId
   * @return fileCacheId
   */
  @javax.annotation.Nullable
  public String getFileCacheId() {
    return fileCacheId;
  }

  public void setFileCacheId(String fileCacheId) {
    this.fileCacheId = fileCacheId;
  }


  public DataRepositoryAssociation fileCachePath(String fileCachePath) {
    this.fileCachePath = fileCachePath;
    return this;
  }

  /**
   * Get fileCachePath
   * @return fileCachePath
   */
  @javax.annotation.Nullable
  public String getFileCachePath() {
    return fileCachePath;
  }

  public void setFileCachePath(String fileCachePath) {
    this.fileCachePath = fileCachePath;
  }


  public DataRepositoryAssociation dataRepositorySubdirectories(List dataRepositorySubdirectories) {
    this.dataRepositorySubdirectories = dataRepositorySubdirectories;
    return this;
  }

  /**
   * Get dataRepositorySubdirectories
   * @return dataRepositorySubdirectories
   */
  @javax.annotation.Nullable
  public List getDataRepositorySubdirectories() {
    return dataRepositorySubdirectories;
  }

  public void setDataRepositorySubdirectories(List dataRepositorySubdirectories) {
    this.dataRepositorySubdirectories = dataRepositorySubdirectories;
  }


  public DataRepositoryAssociation NFS(DataRepositoryAssociationNFS NFS) {
    this.NFS = NFS;
    return this;
  }

  /**
   * Get NFS
   * @return NFS
   */
  @javax.annotation.Nullable
  public DataRepositoryAssociationNFS getNFS() {
    return NFS;
  }

  public void setNFS(DataRepositoryAssociationNFS NFS) {
    this.NFS = NFS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRepositoryAssociation dataRepositoryAssociation = (DataRepositoryAssociation) o;
    return Objects.equals(this.associationId, dataRepositoryAssociation.associationId) &&
        Objects.equals(this.resourceARN, dataRepositoryAssociation.resourceARN) &&
        Objects.equals(this.fileSystemId, dataRepositoryAssociation.fileSystemId) &&
        Objects.equals(this.lifecycle, dataRepositoryAssociation.lifecycle) &&
        Objects.equals(this.failureDetails, dataRepositoryAssociation.failureDetails) &&
        Objects.equals(this.fileSystemPath, dataRepositoryAssociation.fileSystemPath) &&
        Objects.equals(this.dataRepositoryPath, dataRepositoryAssociation.dataRepositoryPath) &&
        Objects.equals(this.batchImportMetaDataOnCreate, dataRepositoryAssociation.batchImportMetaDataOnCreate) &&
        Objects.equals(this.importedFileChunkSize, dataRepositoryAssociation.importedFileChunkSize) &&
        Objects.equals(this.S3, dataRepositoryAssociation.S3) &&
        Objects.equals(this.tags, dataRepositoryAssociation.tags) &&
        Objects.equals(this.creationTime, dataRepositoryAssociation.creationTime) &&
        Objects.equals(this.fileCacheId, dataRepositoryAssociation.fileCacheId) &&
        Objects.equals(this.fileCachePath, dataRepositoryAssociation.fileCachePath) &&
        Objects.equals(this.dataRepositorySubdirectories, dataRepositoryAssociation.dataRepositorySubdirectories) &&
        Objects.equals(this.NFS, dataRepositoryAssociation.NFS);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associationId, resourceARN, fileSystemId, lifecycle, failureDetails, fileSystemPath, dataRepositoryPath, batchImportMetaDataOnCreate, importedFileChunkSize, S3, tags, creationTime, fileCacheId, fileCachePath, dataRepositorySubdirectories, NFS);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRepositoryAssociation {\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    fileSystemPath: ").append(toIndentedString(fileSystemPath)).append("\n");
    sb.append("    dataRepositoryPath: ").append(toIndentedString(dataRepositoryPath)).append("\n");
    sb.append("    batchImportMetaDataOnCreate: ").append(toIndentedString(batchImportMetaDataOnCreate)).append("\n");
    sb.append("    importedFileChunkSize: ").append(toIndentedString(importedFileChunkSize)).append("\n");
    sb.append("    S3: ").append(toIndentedString(S3)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    fileCacheId: ").append(toIndentedString(fileCacheId)).append("\n");
    sb.append("    fileCachePath: ").append(toIndentedString(fileCachePath)).append("\n");
    sb.append("    dataRepositorySubdirectories: ").append(toIndentedString(dataRepositorySubdirectories)).append("\n");
    sb.append("    NFS: ").append(toIndentedString(NFS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssociationId");
    openapiFields.add("ResourceARN");
    openapiFields.add("FileSystemId");
    openapiFields.add("Lifecycle");
    openapiFields.add("FailureDetails");
    openapiFields.add("FileSystemPath");
    openapiFields.add("DataRepositoryPath");
    openapiFields.add("BatchImportMetaDataOnCreate");
    openapiFields.add("ImportedFileChunkSize");
    openapiFields.add("S3");
    openapiFields.add("Tags");
    openapiFields.add("CreationTime");
    openapiFields.add("FileCacheId");
    openapiFields.add("FileCachePath");
    openapiFields.add("DataRepositorySubdirectories");
    openapiFields.add("NFS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataRepositoryAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataRepositoryAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataRepositoryAssociation is not found in the empty JSON string", DataRepositoryAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataRepositoryAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataRepositoryAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssociationId`
      if (jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationId"));
      }
      if ((jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) && !jsonObj.get("ResourceARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceARN").toString()));
      }
      if ((jsonObj.get("FileSystemId") != null && !jsonObj.get("FileSystemId").isJsonNull()) && !jsonObj.get("FileSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileSystemId").toString()));
      }
      // validate the optional field `Lifecycle`
      if (jsonObj.get("Lifecycle") != null && !jsonObj.get("Lifecycle").isJsonNull()) {
        DataRepositoryLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      }
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        DataRepositoryFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
      // validate the optional field `FileSystemPath`
      if (jsonObj.get("FileSystemPath") != null && !jsonObj.get("FileSystemPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileSystemPath"));
      }
      // validate the optional field `DataRepositoryPath`
      if (jsonObj.get("DataRepositoryPath") != null && !jsonObj.get("DataRepositoryPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataRepositoryPath"));
      }
      // validate the optional field `BatchImportMetaDataOnCreate`
      if (jsonObj.get("BatchImportMetaDataOnCreate") != null && !jsonObj.get("BatchImportMetaDataOnCreate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("BatchImportMetaDataOnCreate"));
      }
      // validate the optional field `ImportedFileChunkSize`
      if (jsonObj.get("ImportedFileChunkSize") != null && !jsonObj.get("ImportedFileChunkSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ImportedFileChunkSize"));
      }
      // validate the optional field `S3`
      if (jsonObj.get("S3") != null && !jsonObj.get("S3").isJsonNull()) {
        DataRepositoryAssociationS3.validateJsonElement(jsonObj.get("S3"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `FileCacheId`
      if (jsonObj.get("FileCacheId") != null && !jsonObj.get("FileCacheId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileCacheId"));
      }
      // validate the optional field `FileCachePath`
      if (jsonObj.get("FileCachePath") != null && !jsonObj.get("FileCachePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileCachePath"));
      }
      // validate the optional field `DataRepositorySubdirectories`
      if (jsonObj.get("DataRepositorySubdirectories") != null && !jsonObj.get("DataRepositorySubdirectories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataRepositorySubdirectories"));
      }
      // validate the optional field `NFS`
      if (jsonObj.get("NFS") != null && !jsonObj.get("NFS").isJsonNull()) {
        DataRepositoryAssociationNFS.validateJsonElement(jsonObj.get("NFS"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataRepositoryAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataRepositoryAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataRepositoryAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataRepositoryAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<DataRepositoryAssociation>() {
           @Override
           public void write(JsonWriter out, DataRepositoryAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataRepositoryAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataRepositoryAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataRepositoryAssociation
   * @throws IOException if the JSON string is invalid with respect to DataRepositoryAssociation
   */
  public static DataRepositoryAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataRepositoryAssociation.class);
  }

  /**
   * Convert an instance of DataRepositoryAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

