/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateSnaplockConfigurationAutocommitPeriod;
import org.openapitools.client.model.CreateSnaplockConfigurationRetentionPeriod;
import org.openapitools.client.model.PrivilegedDelete;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates the SnapLock configuration for an existing FSx for ONTAP volume. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSnaplockConfiguration {
  public static final String SERIALIZED_NAME_AUDIT_LOG_VOLUME = "AuditLogVolume";
  @SerializedName(SERIALIZED_NAME_AUDIT_LOG_VOLUME)
  private Boolean auditLogVolume;

  public static final String SERIALIZED_NAME_AUTOCOMMIT_PERIOD = "AutocommitPeriod";
  @SerializedName(SERIALIZED_NAME_AUTOCOMMIT_PERIOD)
  private CreateSnaplockConfigurationAutocommitPeriod autocommitPeriod;

  public static final String SERIALIZED_NAME_PRIVILEGED_DELETE = "PrivilegedDelete";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED_DELETE)
  private PrivilegedDelete privilegedDelete;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "RetentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private CreateSnaplockConfigurationRetentionPeriod retentionPeriod;

  public static final String SERIALIZED_NAME_VOLUME_APPEND_MODE_ENABLED = "VolumeAppendModeEnabled";
  @SerializedName(SERIALIZED_NAME_VOLUME_APPEND_MODE_ENABLED)
  private Boolean volumeAppendModeEnabled;

  public UpdateSnaplockConfiguration() {
  }

  public UpdateSnaplockConfiguration auditLogVolume(Boolean auditLogVolume) {
    this.auditLogVolume = auditLogVolume;
    return this;
  }

  /**
   * Get auditLogVolume
   * @return auditLogVolume
   */
  @javax.annotation.Nullable
  public Boolean getAuditLogVolume() {
    return auditLogVolume;
  }

  public void setAuditLogVolume(Boolean auditLogVolume) {
    this.auditLogVolume = auditLogVolume;
  }


  public UpdateSnaplockConfiguration autocommitPeriod(CreateSnaplockConfigurationAutocommitPeriod autocommitPeriod) {
    this.autocommitPeriod = autocommitPeriod;
    return this;
  }

  /**
   * Get autocommitPeriod
   * @return autocommitPeriod
   */
  @javax.annotation.Nullable
  public CreateSnaplockConfigurationAutocommitPeriod getAutocommitPeriod() {
    return autocommitPeriod;
  }

  public void setAutocommitPeriod(CreateSnaplockConfigurationAutocommitPeriod autocommitPeriod) {
    this.autocommitPeriod = autocommitPeriod;
  }


  public UpdateSnaplockConfiguration privilegedDelete(PrivilegedDelete privilegedDelete) {
    this.privilegedDelete = privilegedDelete;
    return this;
  }

  /**
   * Get privilegedDelete
   * @return privilegedDelete
   */
  @javax.annotation.Nullable
  public PrivilegedDelete getPrivilegedDelete() {
    return privilegedDelete;
  }

  public void setPrivilegedDelete(PrivilegedDelete privilegedDelete) {
    this.privilegedDelete = privilegedDelete;
  }


  public UpdateSnaplockConfiguration retentionPeriod(CreateSnaplockConfigurationRetentionPeriod retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }

  /**
   * Get retentionPeriod
   * @return retentionPeriod
   */
  @javax.annotation.Nullable
  public CreateSnaplockConfigurationRetentionPeriod getRetentionPeriod() {
    return retentionPeriod;
  }

  public void setRetentionPeriod(CreateSnaplockConfigurationRetentionPeriod retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }


  public UpdateSnaplockConfiguration volumeAppendModeEnabled(Boolean volumeAppendModeEnabled) {
    this.volumeAppendModeEnabled = volumeAppendModeEnabled;
    return this;
  }

  /**
   * Get volumeAppendModeEnabled
   * @return volumeAppendModeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVolumeAppendModeEnabled() {
    return volumeAppendModeEnabled;
  }

  public void setVolumeAppendModeEnabled(Boolean volumeAppendModeEnabled) {
    this.volumeAppendModeEnabled = volumeAppendModeEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSnaplockConfiguration updateSnaplockConfiguration = (UpdateSnaplockConfiguration) o;
    return Objects.equals(this.auditLogVolume, updateSnaplockConfiguration.auditLogVolume) &&
        Objects.equals(this.autocommitPeriod, updateSnaplockConfiguration.autocommitPeriod) &&
        Objects.equals(this.privilegedDelete, updateSnaplockConfiguration.privilegedDelete) &&
        Objects.equals(this.retentionPeriod, updateSnaplockConfiguration.retentionPeriod) &&
        Objects.equals(this.volumeAppendModeEnabled, updateSnaplockConfiguration.volumeAppendModeEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditLogVolume, autocommitPeriod, privilegedDelete, retentionPeriod, volumeAppendModeEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSnaplockConfiguration {\n");
    sb.append("    auditLogVolume: ").append(toIndentedString(auditLogVolume)).append("\n");
    sb.append("    autocommitPeriod: ").append(toIndentedString(autocommitPeriod)).append("\n");
    sb.append("    privilegedDelete: ").append(toIndentedString(privilegedDelete)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("    volumeAppendModeEnabled: ").append(toIndentedString(volumeAppendModeEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuditLogVolume");
    openapiFields.add("AutocommitPeriod");
    openapiFields.add("PrivilegedDelete");
    openapiFields.add("RetentionPeriod");
    openapiFields.add("VolumeAppendModeEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSnaplockConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSnaplockConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSnaplockConfiguration is not found in the empty JSON string", UpdateSnaplockConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSnaplockConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSnaplockConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AuditLogVolume`
      if (jsonObj.get("AuditLogVolume") != null && !jsonObj.get("AuditLogVolume").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AuditLogVolume"));
      }
      // validate the optional field `AutocommitPeriod`
      if (jsonObj.get("AutocommitPeriod") != null && !jsonObj.get("AutocommitPeriod").isJsonNull()) {
        CreateSnaplockConfigurationAutocommitPeriod.validateJsonElement(jsonObj.get("AutocommitPeriod"));
      }
      // validate the optional field `PrivilegedDelete`
      if (jsonObj.get("PrivilegedDelete") != null && !jsonObj.get("PrivilegedDelete").isJsonNull()) {
        PrivilegedDelete.validateJsonElement(jsonObj.get("PrivilegedDelete"));
      }
      // validate the optional field `RetentionPeriod`
      if (jsonObj.get("RetentionPeriod") != null && !jsonObj.get("RetentionPeriod").isJsonNull()) {
        CreateSnaplockConfigurationRetentionPeriod.validateJsonElement(jsonObj.get("RetentionPeriod"));
      }
      // validate the optional field `VolumeAppendModeEnabled`
      if (jsonObj.get("VolumeAppendModeEnabled") != null && !jsonObj.get("VolumeAppendModeEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("VolumeAppendModeEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSnaplockConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSnaplockConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSnaplockConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSnaplockConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSnaplockConfiguration>() {
           @Override
           public void write(JsonWriter out, UpdateSnaplockConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSnaplockConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSnaplockConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSnaplockConfiguration
   * @throws IOException if the JSON string is invalid with respect to UpdateSnaplockConfiguration
   */
  public static UpdateSnaplockConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSnaplockConfiguration.class);
  }

  /**
   * Convert an instance of UpdateSnaplockConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

