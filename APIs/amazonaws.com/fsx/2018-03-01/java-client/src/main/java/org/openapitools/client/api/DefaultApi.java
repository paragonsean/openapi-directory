/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociateFileSystemAliasesRequest;
import org.openapitools.client.model.AssociateFileSystemAliasesResponse;
import org.openapitools.client.model.CancelDataRepositoryTaskRequest;
import org.openapitools.client.model.CancelDataRepositoryTaskResponse;
import org.openapitools.client.model.CopyBackupRequest;
import org.openapitools.client.model.CopyBackupResponse;
import org.openapitools.client.model.CreateBackupRequest;
import org.openapitools.client.model.CreateBackupResponse;
import org.openapitools.client.model.CreateDataRepositoryAssociationRequest;
import org.openapitools.client.model.CreateDataRepositoryAssociationResponse;
import org.openapitools.client.model.CreateDataRepositoryTaskRequest;
import org.openapitools.client.model.CreateDataRepositoryTaskResponse;
import org.openapitools.client.model.CreateFileCacheRequest;
import org.openapitools.client.model.CreateFileCacheResponse;
import org.openapitools.client.model.CreateFileSystemFromBackupRequest;
import org.openapitools.client.model.CreateFileSystemFromBackupResponse;
import org.openapitools.client.model.CreateFileSystemRequest;
import org.openapitools.client.model.CreateFileSystemResponse;
import org.openapitools.client.model.CreateSnapshotRequest;
import org.openapitools.client.model.CreateSnapshotResponse;
import org.openapitools.client.model.CreateStorageVirtualMachineRequest;
import org.openapitools.client.model.CreateStorageVirtualMachineResponse;
import org.openapitools.client.model.CreateVolumeFromBackupRequest;
import org.openapitools.client.model.CreateVolumeFromBackupResponse;
import org.openapitools.client.model.CreateVolumeRequest;
import org.openapitools.client.model.CreateVolumeResponse;
import org.openapitools.client.model.DeleteBackupRequest;
import org.openapitools.client.model.DeleteBackupResponse;
import org.openapitools.client.model.DeleteDataRepositoryAssociationRequest;
import org.openapitools.client.model.DeleteDataRepositoryAssociationResponse;
import org.openapitools.client.model.DeleteFileCacheRequest;
import org.openapitools.client.model.DeleteFileCacheResponse;
import org.openapitools.client.model.DeleteFileSystemRequest;
import org.openapitools.client.model.DeleteFileSystemResponse;
import org.openapitools.client.model.DeleteSnapshotRequest;
import org.openapitools.client.model.DeleteSnapshotResponse;
import org.openapitools.client.model.DeleteStorageVirtualMachineRequest;
import org.openapitools.client.model.DeleteStorageVirtualMachineResponse;
import org.openapitools.client.model.DeleteVolumeRequest;
import org.openapitools.client.model.DeleteVolumeResponse;
import org.openapitools.client.model.DescribeBackupsRequest;
import org.openapitools.client.model.DescribeBackupsResponse;
import org.openapitools.client.model.DescribeDataRepositoryAssociationsRequest;
import org.openapitools.client.model.DescribeDataRepositoryAssociationsResponse;
import org.openapitools.client.model.DescribeDataRepositoryTasksRequest;
import org.openapitools.client.model.DescribeDataRepositoryTasksResponse;
import org.openapitools.client.model.DescribeFileCachesRequest;
import org.openapitools.client.model.DescribeFileCachesResponse;
import org.openapitools.client.model.DescribeFileSystemAliasesRequest;
import org.openapitools.client.model.DescribeFileSystemAliasesResponse;
import org.openapitools.client.model.DescribeFileSystemsRequest;
import org.openapitools.client.model.DescribeFileSystemsResponse;
import org.openapitools.client.model.DescribeSnapshotsRequest;
import org.openapitools.client.model.DescribeSnapshotsResponse;
import org.openapitools.client.model.DescribeStorageVirtualMachinesRequest;
import org.openapitools.client.model.DescribeStorageVirtualMachinesResponse;
import org.openapitools.client.model.DescribeVolumesRequest;
import org.openapitools.client.model.DescribeVolumesResponse;
import org.openapitools.client.model.DisassociateFileSystemAliasesRequest;
import org.openapitools.client.model.DisassociateFileSystemAliasesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ReleaseFileSystemNfsV3LocksRequest;
import org.openapitools.client.model.ReleaseFileSystemNfsV3LocksResponse;
import org.openapitools.client.model.RestoreVolumeFromSnapshotRequest;
import org.openapitools.client.model.RestoreVolumeFromSnapshotResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateDataRepositoryAssociationRequest;
import org.openapitools.client.model.UpdateDataRepositoryAssociationResponse;
import org.openapitools.client.model.UpdateFileCacheRequest;
import org.openapitools.client.model.UpdateFileCacheResponse;
import org.openapitools.client.model.UpdateFileSystemRequest;
import org.openapitools.client.model.UpdateFileSystemResponse;
import org.openapitools.client.model.UpdateSnapshotRequest;
import org.openapitools.client.model.UpdateSnapshotResponse;
import org.openapitools.client.model.UpdateStorageVirtualMachineRequest;
import org.openapitools.client.model.UpdateStorageVirtualMachineResponse;
import org.openapitools.client.model.UpdateVolumeRequest;
import org.openapitools.client.model.UpdateVolumeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associateFileSystemAliases
     * @param xAmzTarget  (required)
     * @param associateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateFileSystemAliasesCall(String xAmzTarget, AssociateFileSystemAliasesRequest associateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateFileSystemAliasesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.AssociateFileSystemAliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateFileSystemAliasesValidateBeforeCall(String xAmzTarget, AssociateFileSystemAliasesRequest associateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateFileSystemAliases(Async)");
        }

        // verify the required parameter 'associateFileSystemAliasesRequest' is set
        if (associateFileSystemAliasesRequest == null) {
            throw new ApiException("Missing the required parameter 'associateFileSystemAliasesRequest' when calling associateFileSystemAliases(Async)");
        }

        return associateFileSystemAliasesCall(xAmzTarget, associateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this action to associate one or more Domain Name Server (DNS) aliases with an existing Amazon FSx for Windows File Server file system. A file system can have a maximum of 50 DNS aliases associated with it at any one time. If you try to associate a DNS alias that is already associated with the file system, FSx takes no action on that alias in the request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\&quot;&gt;Working with DNS Aliases&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/walkthrough05-file-system-custom-CNAME.html\&quot;&gt;Walkthrough 5: Using DNS aliases to access your file system&lt;/a&gt;, including additional steps you must take to be able to access your file system using a DNS alias.&lt;/p&gt; &lt;p&gt;The system response shows the DNS aliases that Amazon FSx is attempting to associate with the file system. Use the API operation to monitor the status of the aliases Amazon FSx is associating with the file system.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AssociateFileSystemAliasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public AssociateFileSystemAliasesResponse associateFileSystemAliases(String xAmzTarget, AssociateFileSystemAliasesRequest associateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AssociateFileSystemAliasesResponse> localVarResp = associateFileSystemAliasesWithHttpInfo(xAmzTarget, associateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this action to associate one or more Domain Name Server (DNS) aliases with an existing Amazon FSx for Windows File Server file system. A file system can have a maximum of 50 DNS aliases associated with it at any one time. If you try to associate a DNS alias that is already associated with the file system, FSx takes no action on that alias in the request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\&quot;&gt;Working with DNS Aliases&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/walkthrough05-file-system-custom-CNAME.html\&quot;&gt;Walkthrough 5: Using DNS aliases to access your file system&lt;/a&gt;, including additional steps you must take to be able to access your file system using a DNS alias.&lt;/p&gt; &lt;p&gt;The system response shows the DNS aliases that Amazon FSx is attempting to associate with the file system. Use the API operation to monitor the status of the aliases Amazon FSx is associating with the file system.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AssociateFileSystemAliasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociateFileSystemAliasesResponse> associateFileSystemAliasesWithHttpInfo(String xAmzTarget, AssociateFileSystemAliasesRequest associateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateFileSystemAliasesValidateBeforeCall(xAmzTarget, associateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AssociateFileSystemAliasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this action to associate one or more Domain Name Server (DNS) aliases with an existing Amazon FSx for Windows File Server file system. A file system can have a maximum of 50 DNS aliases associated with it at any one time. If you try to associate a DNS alias that is already associated with the file system, FSx takes no action on that alias in the request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\&quot;&gt;Working with DNS Aliases&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/walkthrough05-file-system-custom-CNAME.html\&quot;&gt;Walkthrough 5: Using DNS aliases to access your file system&lt;/a&gt;, including additional steps you must take to be able to access your file system using a DNS alias.&lt;/p&gt; &lt;p&gt;The system response shows the DNS aliases that Amazon FSx is attempting to associate with the file system. Use the API operation to monitor the status of the aliases Amazon FSx is associating with the file system.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateFileSystemAliasesAsync(String xAmzTarget, AssociateFileSystemAliasesRequest associateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AssociateFileSystemAliasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateFileSystemAliasesValidateBeforeCall(xAmzTarget, associateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AssociateFileSystemAliasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelDataRepositoryTask
     * @param xAmzTarget  (required)
     * @param cancelDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DataRepositoryTaskEnded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDataRepositoryTaskCall(String xAmzTarget, CancelDataRepositoryTaskRequest cancelDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelDataRepositoryTaskRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CancelDataRepositoryTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDataRepositoryTaskValidateBeforeCall(String xAmzTarget, CancelDataRepositoryTaskRequest cancelDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling cancelDataRepositoryTask(Async)");
        }

        // verify the required parameter 'cancelDataRepositoryTaskRequest' is set
        if (cancelDataRepositoryTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelDataRepositoryTaskRequest' when calling cancelDataRepositoryTask(Async)");
        }

        return cancelDataRepositoryTaskCall(xAmzTarget, cancelDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an existing Amazon FSx for Lustre data repository task if that task is in either the &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;EXECUTING&lt;/code&gt; state. When you cancel a task, Amazon FSx does the following.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any files that FSx has already exported are not reverted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FSx continues to export any files that are \&quot;in-flight\&quot; when the cancel operation is received.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FSx does not export any files that have not yet been exported.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param cancelDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelDataRepositoryTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DataRepositoryTaskEnded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public CancelDataRepositoryTaskResponse cancelDataRepositoryTask(String xAmzTarget, CancelDataRepositoryTaskRequest cancelDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelDataRepositoryTaskResponse> localVarResp = cancelDataRepositoryTaskWithHttpInfo(xAmzTarget, cancelDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels an existing Amazon FSx for Lustre data repository task if that task is in either the &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;EXECUTING&lt;/code&gt; state. When you cancel a task, Amazon FSx does the following.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any files that FSx has already exported are not reverted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FSx continues to export any files that are \&quot;in-flight\&quot; when the cancel operation is received.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FSx does not export any files that have not yet been exported.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param cancelDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelDataRepositoryTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DataRepositoryTaskEnded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelDataRepositoryTaskResponse> cancelDataRepositoryTaskWithHttpInfo(String xAmzTarget, CancelDataRepositoryTaskRequest cancelDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = cancelDataRepositoryTaskValidateBeforeCall(xAmzTarget, cancelDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelDataRepositoryTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an existing Amazon FSx for Lustre data repository task if that task is in either the &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;EXECUTING&lt;/code&gt; state. When you cancel a task, Amazon FSx does the following.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any files that FSx has already exported are not reverted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FSx continues to export any files that are \&quot;in-flight\&quot; when the cancel operation is received.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FSx does not export any files that have not yet been exported.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param cancelDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DataRepositoryTaskEnded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDataRepositoryTaskAsync(String xAmzTarget, CancelDataRepositoryTaskRequest cancelDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelDataRepositoryTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDataRepositoryTaskValidateBeforeCall(xAmzTarget, cancelDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelDataRepositoryTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyBackup
     * @param xAmzTarget  (required)
     * @param copyBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSourceKmsKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDestinationKmsKey </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRegion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> SourceBackupUnavailable </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IncompatibleRegionForMultiAZ </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyBackupCall(String xAmzTarget, CopyBackupRequest copyBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyBackupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CopyBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyBackupValidateBeforeCall(String xAmzTarget, CopyBackupRequest copyBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling copyBackup(Async)");
        }

        // verify the required parameter 'copyBackupRequest' is set
        if (copyBackupRequest == null) {
            throw new ApiException("Missing the required parameter 'copyBackupRequest' when calling copyBackup(Async)");
        }

        return copyBackupCall(xAmzTarget, copyBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Copies an existing backup within the same Amazon Web Services account to another Amazon Web Services Region (cross-Region copy) or within the same Amazon Web Services Region (in-Region copy). You can have up to five backup copy requests in progress to a single destination Region per account.&lt;/p&gt; &lt;p&gt;You can use cross-Region backup copies for cross-Region disaster recovery. You can periodically take backups and copy them to another Region so that in the event of a disaster in the primary Region, you can restore from backup and recover availability quickly in the other Region. You can make cross-Region copies only within your Amazon Web Services partition. A partition is a grouping of Regions. Amazon Web Services currently has three partitions: &lt;code&gt;aws&lt;/code&gt; (Standard Regions), &lt;code&gt;aws-cn&lt;/code&gt; (China Regions), and &lt;code&gt;aws-us-gov&lt;/code&gt; (Amazon Web Services GovCloud [US] Regions).&lt;/p&gt; &lt;p&gt;You can also use backup copies to clone your file dataset to another Region or within the same Region.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;SourceRegion&lt;/code&gt; parameter to specify the Amazon Web Services Region from which the backup will be copied. For example, if you make the call from the &lt;code&gt;us-west-1&lt;/code&gt; Region and want to copy a backup from the &lt;code&gt;us-east-2&lt;/code&gt; Region, you specify &lt;code&gt;us-east-2&lt;/code&gt; in the &lt;code&gt;SourceRegion&lt;/code&gt; parameter to make a cross-Region copy. If you don&#39;t specify a Region, the backup copy is created in the same Region where the request is sent from (in-Region copy).&lt;/p&gt; &lt;p&gt;For more information about creating backup copies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html#copy-backups\&quot;&gt; Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for Windows User Guide&lt;/i&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html#copy-backups\&quot;&gt;Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for Lustre User Guide&lt;/i&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/using-backups.html#copy-backups\&quot;&gt;Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for OpenZFS User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param copyBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CopyBackupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSourceKmsKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDestinationKmsKey </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRegion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> SourceBackupUnavailable </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IncompatibleRegionForMultiAZ </td><td>  -  </td></tr>
     </table>
     */
    public CopyBackupResponse copyBackup(String xAmzTarget, CopyBackupRequest copyBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CopyBackupResponse> localVarResp = copyBackupWithHttpInfo(xAmzTarget, copyBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Copies an existing backup within the same Amazon Web Services account to another Amazon Web Services Region (cross-Region copy) or within the same Amazon Web Services Region (in-Region copy). You can have up to five backup copy requests in progress to a single destination Region per account.&lt;/p&gt; &lt;p&gt;You can use cross-Region backup copies for cross-Region disaster recovery. You can periodically take backups and copy them to another Region so that in the event of a disaster in the primary Region, you can restore from backup and recover availability quickly in the other Region. You can make cross-Region copies only within your Amazon Web Services partition. A partition is a grouping of Regions. Amazon Web Services currently has three partitions: &lt;code&gt;aws&lt;/code&gt; (Standard Regions), &lt;code&gt;aws-cn&lt;/code&gt; (China Regions), and &lt;code&gt;aws-us-gov&lt;/code&gt; (Amazon Web Services GovCloud [US] Regions).&lt;/p&gt; &lt;p&gt;You can also use backup copies to clone your file dataset to another Region or within the same Region.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;SourceRegion&lt;/code&gt; parameter to specify the Amazon Web Services Region from which the backup will be copied. For example, if you make the call from the &lt;code&gt;us-west-1&lt;/code&gt; Region and want to copy a backup from the &lt;code&gt;us-east-2&lt;/code&gt; Region, you specify &lt;code&gt;us-east-2&lt;/code&gt; in the &lt;code&gt;SourceRegion&lt;/code&gt; parameter to make a cross-Region copy. If you don&#39;t specify a Region, the backup copy is created in the same Region where the request is sent from (in-Region copy).&lt;/p&gt; &lt;p&gt;For more information about creating backup copies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html#copy-backups\&quot;&gt; Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for Windows User Guide&lt;/i&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html#copy-backups\&quot;&gt;Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for Lustre User Guide&lt;/i&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/using-backups.html#copy-backups\&quot;&gt;Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for OpenZFS User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param copyBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CopyBackupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSourceKmsKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDestinationKmsKey </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRegion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> SourceBackupUnavailable </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IncompatibleRegionForMultiAZ </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyBackupResponse> copyBackupWithHttpInfo(String xAmzTarget, CopyBackupRequest copyBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = copyBackupValidateBeforeCall(xAmzTarget, copyBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CopyBackupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Copies an existing backup within the same Amazon Web Services account to another Amazon Web Services Region (cross-Region copy) or within the same Amazon Web Services Region (in-Region copy). You can have up to five backup copy requests in progress to a single destination Region per account.&lt;/p&gt; &lt;p&gt;You can use cross-Region backup copies for cross-Region disaster recovery. You can periodically take backups and copy them to another Region so that in the event of a disaster in the primary Region, you can restore from backup and recover availability quickly in the other Region. You can make cross-Region copies only within your Amazon Web Services partition. A partition is a grouping of Regions. Amazon Web Services currently has three partitions: &lt;code&gt;aws&lt;/code&gt; (Standard Regions), &lt;code&gt;aws-cn&lt;/code&gt; (China Regions), and &lt;code&gt;aws-us-gov&lt;/code&gt; (Amazon Web Services GovCloud [US] Regions).&lt;/p&gt; &lt;p&gt;You can also use backup copies to clone your file dataset to another Region or within the same Region.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;SourceRegion&lt;/code&gt; parameter to specify the Amazon Web Services Region from which the backup will be copied. For example, if you make the call from the &lt;code&gt;us-west-1&lt;/code&gt; Region and want to copy a backup from the &lt;code&gt;us-east-2&lt;/code&gt; Region, you specify &lt;code&gt;us-east-2&lt;/code&gt; in the &lt;code&gt;SourceRegion&lt;/code&gt; parameter to make a cross-Region copy. If you don&#39;t specify a Region, the backup copy is created in the same Region where the request is sent from (in-Region copy).&lt;/p&gt; &lt;p&gt;For more information about creating backup copies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html#copy-backups\&quot;&gt; Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for Windows User Guide&lt;/i&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html#copy-backups\&quot;&gt;Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for Lustre User Guide&lt;/i&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/using-backups.html#copy-backups\&quot;&gt;Copying backups&lt;/a&gt; in the &lt;i&gt;Amazon FSx for OpenZFS User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param copyBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSourceKmsKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDestinationKmsKey </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRegion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> SourceBackupUnavailable </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IncompatibleRegionForMultiAZ </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyBackupAsync(String xAmzTarget, CopyBackupRequest copyBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CopyBackupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyBackupValidateBeforeCall(xAmzTarget, copyBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CopyBackupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBackup
     * @param xAmzTarget  (required)
     * @param createBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBackupCall(String xAmzTarget, CreateBackupRequest createBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBackupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBackupValidateBeforeCall(String xAmzTarget, CreateBackupRequest createBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createBackup(Async)");
        }

        // verify the required parameter 'createBackupRequest' is set
        if (createBackupRequest == null) {
            throw new ApiException("Missing the required parameter 'createBackupRequest' when calling createBackup(Async)");
        }

        return createBackupCall(xAmzTarget, createBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a backup of an existing Amazon FSx for Windows File Server file system, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system. We recommend creating regular backups so that you can restore a file system or volume from a backup if an issue arises with the original file system or volume.&lt;/p&gt; &lt;p&gt;For Amazon FSx for Lustre file systems, you can create a backup only for file systems that have the following configuration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A Persistent deployment type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Are &lt;i&gt;not&lt;/i&gt; linked to a data repository&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about backups, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for Lustre, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html\&quot;&gt;Working with FSx for Lustre backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html\&quot;&gt;Working with FSx for Windows backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for NetApp ONTAP, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/using-backups.html\&quot;&gt;Working with FSx for NetApp ONTAP backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for OpenZFS, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/using-backups.html\&quot;&gt;Working with FSx for OpenZFS backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If a backup with the specified client request token exists and the parameters match, this operation returns the description of the existing backup. If a backup with the specified client request token exists and the parameters don&#39;t match, this operation returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a backup with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateBackup&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new Amazon FSx backup with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the backup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateBackup&lt;/code&gt; operation without the risk of creating an extra backup. This approach can be useful when an initial call fails in a way that makes it unclear whether a backup was created. If you use the same client request token and the initial call created a backup, the operation returns a successful result because all the parameters are the same.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateBackup&lt;/code&gt; operation returns while the backup&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the backup creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeBackups.html\&quot;&gt;DescribeBackups&lt;/a&gt; operation, which returns the backup state along with other information.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateBackupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public CreateBackupResponse createBackup(String xAmzTarget, CreateBackupRequest createBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateBackupResponse> localVarResp = createBackupWithHttpInfo(xAmzTarget, createBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a backup of an existing Amazon FSx for Windows File Server file system, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system. We recommend creating regular backups so that you can restore a file system or volume from a backup if an issue arises with the original file system or volume.&lt;/p&gt; &lt;p&gt;For Amazon FSx for Lustre file systems, you can create a backup only for file systems that have the following configuration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A Persistent deployment type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Are &lt;i&gt;not&lt;/i&gt; linked to a data repository&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about backups, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for Lustre, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html\&quot;&gt;Working with FSx for Lustre backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html\&quot;&gt;Working with FSx for Windows backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for NetApp ONTAP, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/using-backups.html\&quot;&gt;Working with FSx for NetApp ONTAP backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for OpenZFS, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/using-backups.html\&quot;&gt;Working with FSx for OpenZFS backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If a backup with the specified client request token exists and the parameters match, this operation returns the description of the existing backup. If a backup with the specified client request token exists and the parameters don&#39;t match, this operation returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a backup with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateBackup&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new Amazon FSx backup with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the backup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateBackup&lt;/code&gt; operation without the risk of creating an extra backup. This approach can be useful when an initial call fails in a way that makes it unclear whether a backup was created. If you use the same client request token and the initial call created a backup, the operation returns a successful result because all the parameters are the same.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateBackup&lt;/code&gt; operation returns while the backup&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the backup creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeBackups.html\&quot;&gt;DescribeBackups&lt;/a&gt; operation, which returns the backup state along with other information.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateBackupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateBackupResponse> createBackupWithHttpInfo(String xAmzTarget, CreateBackupRequest createBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createBackupValidateBeforeCall(xAmzTarget, createBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateBackupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a backup of an existing Amazon FSx for Windows File Server file system, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system. We recommend creating regular backups so that you can restore a file system or volume from a backup if an issue arises with the original file system or volume.&lt;/p&gt; &lt;p&gt;For Amazon FSx for Lustre file systems, you can create a backup only for file systems that have the following configuration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A Persistent deployment type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Are &lt;i&gt;not&lt;/i&gt; linked to a data repository&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about backups, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for Lustre, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/using-backups-fsx.html\&quot;&gt;Working with FSx for Lustre backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/using-backups.html\&quot;&gt;Working with FSx for Windows backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for NetApp ONTAP, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/using-backups.html\&quot;&gt;Working with FSx for NetApp ONTAP backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon FSx for OpenZFS, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/using-backups.html\&quot;&gt;Working with FSx for OpenZFS backups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If a backup with the specified client request token exists and the parameters match, this operation returns the description of the existing backup. If a backup with the specified client request token exists and the parameters don&#39;t match, this operation returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a backup with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateBackup&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new Amazon FSx backup with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the backup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateBackup&lt;/code&gt; operation without the risk of creating an extra backup. This approach can be useful when an initial call fails in a way that makes it unclear whether a backup was created. If you use the same client request token and the initial call created a backup, the operation returns a successful result because all the parameters are the same.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateBackup&lt;/code&gt; operation returns while the backup&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the backup creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeBackups.html\&quot;&gt;DescribeBackups&lt;/a&gt; operation, which returns the backup state along with other information.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBackupAsync(String xAmzTarget, CreateBackupRequest createBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateBackupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBackupValidateBeforeCall(xAmzTarget, createBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateBackupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDataRepositoryAssociation
     * @param xAmzTarget  (required)
     * @param createDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataRepositoryAssociationCall(String xAmzTarget, CreateDataRepositoryAssociationRequest createDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataRepositoryAssociationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateDataRepositoryAssociation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDataRepositoryAssociationValidateBeforeCall(String xAmzTarget, CreateDataRepositoryAssociationRequest createDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createDataRepositoryAssociation(Async)");
        }

        // verify the required parameter 'createDataRepositoryAssociationRequest' is set
        if (createDataRepositoryAssociationRequest == null) {
            throw new ApiException("Missing the required parameter 'createDataRepositoryAssociationRequest' when calling createDataRepositoryAssociation(Async)");
        }

        return createDataRepositoryAssociationCall(xAmzTarget, createDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon FSx for Lustre data repository association (DRA). A data repository association is a link between a directory on the file system and an Amazon S3 bucket or prefix. You can have a maximum of 8 data repository associations on a file system. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt; &lt;p&gt;Each data repository association must have a unique Amazon FSx file system directory and a unique S3 bucket or prefix associated with it. You can configure a data repository association for automatic import only, for automatic export only, or for both. To learn more about linking a data repository to your file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\&quot;&gt;Linking your file system to an S3 bucket&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateDataRepositoryAssociation&lt;/code&gt; isn&#39;t supported on Amazon File Cache resources. To create a DRA on Amazon File Cache, use the &lt;code&gt;CreateFileCache&lt;/code&gt; operation.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDataRepositoryAssociationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public CreateDataRepositoryAssociationResponse createDataRepositoryAssociation(String xAmzTarget, CreateDataRepositoryAssociationRequest createDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDataRepositoryAssociationResponse> localVarResp = createDataRepositoryAssociationWithHttpInfo(xAmzTarget, createDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon FSx for Lustre data repository association (DRA). A data repository association is a link between a directory on the file system and an Amazon S3 bucket or prefix. You can have a maximum of 8 data repository associations on a file system. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt; &lt;p&gt;Each data repository association must have a unique Amazon FSx file system directory and a unique S3 bucket or prefix associated with it. You can configure a data repository association for automatic import only, for automatic export only, or for both. To learn more about linking a data repository to your file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\&quot;&gt;Linking your file system to an S3 bucket&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateDataRepositoryAssociation&lt;/code&gt; isn&#39;t supported on Amazon File Cache resources. To create a DRA on Amazon File Cache, use the &lt;code&gt;CreateFileCache&lt;/code&gt; operation.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDataRepositoryAssociationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDataRepositoryAssociationResponse> createDataRepositoryAssociationWithHttpInfo(String xAmzTarget, CreateDataRepositoryAssociationRequest createDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDataRepositoryAssociationValidateBeforeCall(xAmzTarget, createDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDataRepositoryAssociationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon FSx for Lustre data repository association (DRA). A data repository association is a link between a directory on the file system and an Amazon S3 bucket or prefix. You can have a maximum of 8 data repository associations on a file system. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt; &lt;p&gt;Each data repository association must have a unique Amazon FSx file system directory and a unique S3 bucket or prefix associated with it. You can configure a data repository association for automatic import only, for automatic export only, or for both. To learn more about linking a data repository to your file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\&quot;&gt;Linking your file system to an S3 bucket&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;CreateDataRepositoryAssociation&lt;/code&gt; isn&#39;t supported on Amazon File Cache resources. To create a DRA on Amazon File Cache, use the &lt;code&gt;CreateFileCache&lt;/code&gt; operation.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataRepositoryAssociationAsync(String xAmzTarget, CreateDataRepositoryAssociationRequest createDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDataRepositoryAssociationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDataRepositoryAssociationValidateBeforeCall(xAmzTarget, createDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDataRepositoryAssociationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDataRepositoryTask
     * @param xAmzTarget  (required)
     * @param createDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DataRepositoryTaskExecuting </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataRepositoryTaskCall(String xAmzTarget, CreateDataRepositoryTaskRequest createDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataRepositoryTaskRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateDataRepositoryTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDataRepositoryTaskValidateBeforeCall(String xAmzTarget, CreateDataRepositoryTaskRequest createDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createDataRepositoryTask(Async)");
        }

        // verify the required parameter 'createDataRepositoryTaskRequest' is set
        if (createDataRepositoryTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'createDataRepositoryTaskRequest' when calling createDataRepositoryTask(Async)");
        }

        return createDataRepositoryTaskCall(xAmzTarget, createDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an Amazon FSx for Lustre data repository task. You use data repository tasks to perform bulk operations between your Amazon FSx file system and its linked data repositories. An example of a data repository task is exporting any data and metadata changes, including POSIX metadata, to files, directories, and symbolic links (symlinks) from your FSx file system to a linked data repository. A &lt;code&gt;CreateDataRepositoryTask&lt;/code&gt; operation will fail if a data repository is not linked to the FSx file system. To learn more about data repository tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-repository-tasks.html\&quot;&gt;Data Repository Tasks&lt;/a&gt;. To learn more about linking a data repository to your file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\&quot;&gt;Linking your file system to an S3 bucket&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDataRepositoryTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DataRepositoryTaskExecuting </td><td>  -  </td></tr>
     </table>
     */
    public CreateDataRepositoryTaskResponse createDataRepositoryTask(String xAmzTarget, CreateDataRepositoryTaskRequest createDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDataRepositoryTaskResponse> localVarResp = createDataRepositoryTaskWithHttpInfo(xAmzTarget, createDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an Amazon FSx for Lustre data repository task. You use data repository tasks to perform bulk operations between your Amazon FSx file system and its linked data repositories. An example of a data repository task is exporting any data and metadata changes, including POSIX metadata, to files, directories, and symbolic links (symlinks) from your FSx file system to a linked data repository. A &lt;code&gt;CreateDataRepositoryTask&lt;/code&gt; operation will fail if a data repository is not linked to the FSx file system. To learn more about data repository tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-repository-tasks.html\&quot;&gt;Data Repository Tasks&lt;/a&gt;. To learn more about linking a data repository to your file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\&quot;&gt;Linking your file system to an S3 bucket&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDataRepositoryTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DataRepositoryTaskExecuting </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDataRepositoryTaskResponse> createDataRepositoryTaskWithHttpInfo(String xAmzTarget, CreateDataRepositoryTaskRequest createDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDataRepositoryTaskValidateBeforeCall(xAmzTarget, createDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDataRepositoryTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an Amazon FSx for Lustre data repository task. You use data repository tasks to perform bulk operations between your Amazon FSx file system and its linked data repositories. An example of a data repository task is exporting any data and metadata changes, including POSIX metadata, to files, directories, and symbolic links (symlinks) from your FSx file system to a linked data repository. A &lt;code&gt;CreateDataRepositoryTask&lt;/code&gt; operation will fail if a data repository is not linked to the FSx file system. To learn more about data repository tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-repository-tasks.html\&quot;&gt;Data Repository Tasks&lt;/a&gt;. To learn more about linking a data repository to your file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\&quot;&gt;Linking your file system to an S3 bucket&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createDataRepositoryTaskRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DataRepositoryTaskExecuting </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataRepositoryTaskAsync(String xAmzTarget, CreateDataRepositoryTaskRequest createDataRepositoryTaskRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDataRepositoryTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDataRepositoryTaskValidateBeforeCall(xAmzTarget, createDataRepositoryTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDataRepositoryTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFileCache
     * @param xAmzTarget  (required)
     * @param createFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileCacheCall(String xAmzTarget, CreateFileCacheRequest createFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileCacheRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateFileCache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileCacheValidateBeforeCall(String xAmzTarget, CreateFileCacheRequest createFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createFileCache(Async)");
        }

        // verify the required parameter 'createFileCacheRequest' is set
        if (createFileCacheRequest == null) {
            throw new ApiException("Missing the required parameter 'createFileCacheRequest' when calling createFileCache(Async)");
        }

        return createFileCacheCall(xAmzTarget, createFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon File Cache resource.&lt;/p&gt; &lt;p&gt;You can use this operation with a client request token in the request that Amazon File Cache uses to ensure idempotent creation. If a cache with the specified client request token exists and the parameters match, &lt;code&gt;CreateFileCache&lt;/code&gt; returns the description of the existing cache. If a cache with the specified client request token exists and the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file cache with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateFileCache&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new, empty Amazon File Cache resourcewith an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the cache in JSON format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileCache&lt;/code&gt; call returns while the cache&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the cache creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\&quot;&gt;DescribeFileCaches&lt;/a&gt; operation, which returns the cache state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFileCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public CreateFileCacheResponse createFileCache(String xAmzTarget, CreateFileCacheRequest createFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFileCacheResponse> localVarResp = createFileCacheWithHttpInfo(xAmzTarget, createFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon File Cache resource.&lt;/p&gt; &lt;p&gt;You can use this operation with a client request token in the request that Amazon File Cache uses to ensure idempotent creation. If a cache with the specified client request token exists and the parameters match, &lt;code&gt;CreateFileCache&lt;/code&gt; returns the description of the existing cache. If a cache with the specified client request token exists and the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file cache with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateFileCache&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new, empty Amazon File Cache resourcewith an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the cache in JSON format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileCache&lt;/code&gt; call returns while the cache&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the cache creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\&quot;&gt;DescribeFileCaches&lt;/a&gt; operation, which returns the cache state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFileCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFileCacheResponse> createFileCacheWithHttpInfo(String xAmzTarget, CreateFileCacheRequest createFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFileCacheValidateBeforeCall(xAmzTarget, createFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFileCacheResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon File Cache resource.&lt;/p&gt; &lt;p&gt;You can use this operation with a client request token in the request that Amazon File Cache uses to ensure idempotent creation. If a cache with the specified client request token exists and the parameters match, &lt;code&gt;CreateFileCache&lt;/code&gt; returns the description of the existing cache. If a cache with the specified client request token exists and the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file cache with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateFileCache&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new, empty Amazon File Cache resourcewith an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the cache in JSON format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileCache&lt;/code&gt; call returns while the cache&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the cache creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\&quot;&gt;DescribeFileCaches&lt;/a&gt; operation, which returns the cache state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileCacheAsync(String xAmzTarget, CreateFileCacheRequest createFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFileCacheResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileCacheValidateBeforeCall(xAmzTarget, createFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFileCacheResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFileSystem
     * @param xAmzTarget  (required)
     * @param createFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidImportPath </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidExportPath </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileSystemCall(String xAmzTarget, CreateFileSystemRequest createFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileSystemRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateFileSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileSystemValidateBeforeCall(String xAmzTarget, CreateFileSystemRequest createFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createFileSystem(Async)");
        }

        // verify the required parameter 'createFileSystemRequest' is set
        if (createFileSystemRequest == null) {
            throw new ApiException("Missing the required parameter 'createFileSystemRequest' when calling createFileSystem(Async)");
        }

        return createFileSystemCall(xAmzTarget, createFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new, empty Amazon FSx file system. You can create the following supported Amazon FSx file systems using the &lt;code&gt;CreateFileSystem&lt;/code&gt; API operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for Lustre&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for NetApp ONTAP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for OpenZFS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for Windows File Server&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation requires a client request token in the request that Amazon FSx uses to ensure idempotent creation. This means that calling the operation multiple times with the same client request token has no effect. By using the idempotent operation, you can retry a &lt;code&gt;CreateFileSystem&lt;/code&gt; operation without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives success as long as the parameters are the same.&lt;/p&gt; &lt;p&gt;If a file system with the specified client request token exists and the parameters match, &lt;code&gt;CreateFileSystem&lt;/code&gt; returns the description of the existing file system. If a file system with the specified client request token exists and the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file system with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateFileSystem&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new, empty Amazon FSx file system with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the file system in JSON format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileSystem&lt;/code&gt; call returns while the file system&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the file-system creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt;DescribeFileSystems&lt;/a&gt; operation, which returns the file system state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFileSystemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidImportPath </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidExportPath </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public CreateFileSystemResponse createFileSystem(String xAmzTarget, CreateFileSystemRequest createFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFileSystemResponse> localVarResp = createFileSystemWithHttpInfo(xAmzTarget, createFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new, empty Amazon FSx file system. You can create the following supported Amazon FSx file systems using the &lt;code&gt;CreateFileSystem&lt;/code&gt; API operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for Lustre&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for NetApp ONTAP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for OpenZFS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for Windows File Server&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation requires a client request token in the request that Amazon FSx uses to ensure idempotent creation. This means that calling the operation multiple times with the same client request token has no effect. By using the idempotent operation, you can retry a &lt;code&gt;CreateFileSystem&lt;/code&gt; operation without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives success as long as the parameters are the same.&lt;/p&gt; &lt;p&gt;If a file system with the specified client request token exists and the parameters match, &lt;code&gt;CreateFileSystem&lt;/code&gt; returns the description of the existing file system. If a file system with the specified client request token exists and the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file system with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateFileSystem&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new, empty Amazon FSx file system with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the file system in JSON format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileSystem&lt;/code&gt; call returns while the file system&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the file-system creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt;DescribeFileSystems&lt;/a&gt; operation, which returns the file system state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFileSystemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidImportPath </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidExportPath </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFileSystemResponse> createFileSystemWithHttpInfo(String xAmzTarget, CreateFileSystemRequest createFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFileSystemValidateBeforeCall(xAmzTarget, createFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFileSystemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new, empty Amazon FSx file system. You can create the following supported Amazon FSx file systems using the &lt;code&gt;CreateFileSystem&lt;/code&gt; API operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for Lustre&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for NetApp ONTAP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for OpenZFS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon FSx for Windows File Server&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation requires a client request token in the request that Amazon FSx uses to ensure idempotent creation. This means that calling the operation multiple times with the same client request token has no effect. By using the idempotent operation, you can retry a &lt;code&gt;CreateFileSystem&lt;/code&gt; operation without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives success as long as the parameters are the same.&lt;/p&gt; &lt;p&gt;If a file system with the specified client request token exists and the parameters match, &lt;code&gt;CreateFileSystem&lt;/code&gt; returns the description of the existing file system. If a file system with the specified client request token exists and the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file system with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateFileSystem&lt;/code&gt; does the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new, empty Amazon FSx file system with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the file system in JSON format.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileSystem&lt;/code&gt; call returns while the file system&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the file-system creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt;DescribeFileSystems&lt;/a&gt; operation, which returns the file system state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidImportPath </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidExportPath </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileSystemAsync(String xAmzTarget, CreateFileSystemRequest createFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFileSystemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileSystemValidateBeforeCall(xAmzTarget, createFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFileSystemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFileSystemFromBackup
     * @param xAmzTarget  (required)
     * @param createFileSystemFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileSystemFromBackupCall(String xAmzTarget, CreateFileSystemFromBackupRequest createFileSystemFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileSystemFromBackupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateFileSystemFromBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileSystemFromBackupValidateBeforeCall(String xAmzTarget, CreateFileSystemFromBackupRequest createFileSystemFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createFileSystemFromBackup(Async)");
        }

        // verify the required parameter 'createFileSystemFromBackupRequest' is set
        if (createFileSystemFromBackupRequest == null) {
            throw new ApiException("Missing the required parameter 'createFileSystemFromBackupRequest' when calling createFileSystemFromBackup(Async)");
        }

        return createFileSystemFromBackupCall(xAmzTarget, createFileSystemFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon FSx for Lustre, Amazon FSx for Windows File Server, or Amazon FSx for OpenZFS file system from an existing Amazon FSx backup.&lt;/p&gt; &lt;p&gt;If a file system with the specified client request token exists and the parameters match, this operation returns the description of the file system. If a file system with the specified client request token exists but the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file system with the specified client request token doesn&#39;t exist, this operation does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new Amazon FSx file system from backup with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the file system.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Parameters like the Active Directory, default share name, automatic backup, and backup settings default to the parameters of the file system that was backed up, unless overridden. You can explicitly supply other settings.&lt;/p&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; call without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives a success message as long as the parameters are the same.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; call returns while the file system&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the file-system creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt; DescribeFileSystems&lt;/a&gt; operation, which returns the file system state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileSystemFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFileSystemFromBackupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public CreateFileSystemFromBackupResponse createFileSystemFromBackup(String xAmzTarget, CreateFileSystemFromBackupRequest createFileSystemFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFileSystemFromBackupResponse> localVarResp = createFileSystemFromBackupWithHttpInfo(xAmzTarget, createFileSystemFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon FSx for Lustre, Amazon FSx for Windows File Server, or Amazon FSx for OpenZFS file system from an existing Amazon FSx backup.&lt;/p&gt; &lt;p&gt;If a file system with the specified client request token exists and the parameters match, this operation returns the description of the file system. If a file system with the specified client request token exists but the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file system with the specified client request token doesn&#39;t exist, this operation does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new Amazon FSx file system from backup with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the file system.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Parameters like the Active Directory, default share name, automatic backup, and backup settings default to the parameters of the file system that was backed up, unless overridden. You can explicitly supply other settings.&lt;/p&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; call without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives a success message as long as the parameters are the same.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; call returns while the file system&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the file-system creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt; DescribeFileSystems&lt;/a&gt; operation, which returns the file system state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileSystemFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFileSystemFromBackupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFileSystemFromBackupResponse> createFileSystemFromBackupWithHttpInfo(String xAmzTarget, CreateFileSystemFromBackupRequest createFileSystemFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFileSystemFromBackupValidateBeforeCall(xAmzTarget, createFileSystemFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFileSystemFromBackupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon FSx for Lustre, Amazon FSx for Windows File Server, or Amazon FSx for OpenZFS file system from an existing Amazon FSx backup.&lt;/p&gt; &lt;p&gt;If a file system with the specified client request token exists and the parameters match, this operation returns the description of the file system. If a file system with the specified client request token exists but the parameters don&#39;t match, this call returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a file system with the specified client request token doesn&#39;t exist, this operation does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new Amazon FSx file system from backup with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the file system.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Parameters like the Active Directory, default share name, automatic backup, and backup settings default to the parameters of the file system that was backed up, unless overridden. You can explicitly supply other settings.&lt;/p&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; call without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives a success message as long as the parameters are the same.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; call returns while the file system&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the file-system creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt; DescribeFileSystems&lt;/a&gt; operation, which returns the file system state along with other information.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createFileSystemFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPerUnitStorageThroughput </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileSystemFromBackupAsync(String xAmzTarget, CreateFileSystemFromBackupRequest createFileSystemFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFileSystemFromBackupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileSystemFromBackupValidateBeforeCall(xAmzTarget, createFileSystemFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFileSystemFromBackupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSnapshot
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotCall(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSnapshotValidateBeforeCall(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createSnapshot(Async)");
        }

        // verify the required parameter 'createSnapshotRequest' is set
        if (createSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'createSnapshotRequest' when calling createSnapshot(Async)");
        }

        return createSnapshotCall(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a snapshot of an existing Amazon FSx for OpenZFS volume. With snapshots, you can easily undo file changes and compare file versions by restoring the volume to a previous version.&lt;/p&gt; &lt;p&gt;If a snapshot with the specified client request token exists, and the parameters match, this operation returns the description of the existing snapshot. If a snapshot with the specified client request token exists, and the parameters don&#39;t match, this operation returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a snapshot with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateSnapshot&lt;/code&gt; does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new OpenZFS snapshot with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateSnapshot&lt;/code&gt; operation without the risk of creating an extra snapshot. This approach can be useful when an initial call fails in a way that makes it unclear whether a snapshot was created. If you use the same client request token and the initial call created a snapshot, the operation returns a successful result because all the parameters are the same.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateSnapshot&lt;/code&gt; operation returns while the snapshot&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the snapshot creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeSnapshots.html\&quot;&gt;DescribeSnapshots&lt;/a&gt; operation, which returns the snapshot state along with other information.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public CreateSnapshotResponse createSnapshot(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSnapshotResponse> localVarResp = createSnapshotWithHttpInfo(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a snapshot of an existing Amazon FSx for OpenZFS volume. With snapshots, you can easily undo file changes and compare file versions by restoring the volume to a previous version.&lt;/p&gt; &lt;p&gt;If a snapshot with the specified client request token exists, and the parameters match, this operation returns the description of the existing snapshot. If a snapshot with the specified client request token exists, and the parameters don&#39;t match, this operation returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a snapshot with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateSnapshot&lt;/code&gt; does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new OpenZFS snapshot with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateSnapshot&lt;/code&gt; operation without the risk of creating an extra snapshot. This approach can be useful when an initial call fails in a way that makes it unclear whether a snapshot was created. If you use the same client request token and the initial call created a snapshot, the operation returns a successful result because all the parameters are the same.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateSnapshot&lt;/code&gt; operation returns while the snapshot&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the snapshot creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeSnapshots.html\&quot;&gt;DescribeSnapshots&lt;/a&gt; operation, which returns the snapshot state along with other information.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSnapshotResponse> createSnapshotWithHttpInfo(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSnapshotValidateBeforeCall(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a snapshot of an existing Amazon FSx for OpenZFS volume. With snapshots, you can easily undo file changes and compare file versions by restoring the volume to a previous version.&lt;/p&gt; &lt;p&gt;If a snapshot with the specified client request token exists, and the parameters match, this operation returns the description of the existing snapshot. If a snapshot with the specified client request token exists, and the parameters don&#39;t match, this operation returns &lt;code&gt;IncompatibleParameterError&lt;/code&gt;. If a snapshot with the specified client request token doesn&#39;t exist, &lt;code&gt;CreateSnapshot&lt;/code&gt; does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a new OpenZFS snapshot with an assigned ID, and an initial lifecycle state of &lt;code&gt;CREATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Returns the description of the snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using the idempotent operation, you can retry a &lt;code&gt;CreateSnapshot&lt;/code&gt; operation without the risk of creating an extra snapshot. This approach can be useful when an initial call fails in a way that makes it unclear whether a snapshot was created. If you use the same client request token and the initial call created a snapshot, the operation returns a successful result because all the parameters are the same.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateSnapshot&lt;/code&gt; operation returns while the snapshot&#39;s lifecycle state is still &lt;code&gt;CREATING&lt;/code&gt;. You can check the snapshot creation status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeSnapshots.html\&quot;&gt;DescribeSnapshots&lt;/a&gt; operation, which returns the snapshot state along with other information.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotAsync(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSnapshotValidateBeforeCall(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStorageVirtualMachine
     * @param xAmzTarget  (required)
     * @param createStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStorageVirtualMachineCall(String xAmzTarget, CreateStorageVirtualMachineRequest createStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStorageVirtualMachineRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateStorageVirtualMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStorageVirtualMachineValidateBeforeCall(String xAmzTarget, CreateStorageVirtualMachineRequest createStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createStorageVirtualMachine(Async)");
        }

        // verify the required parameter 'createStorageVirtualMachineRequest' is set
        if (createStorageVirtualMachineRequest == null) {
            throw new ApiException("Missing the required parameter 'createStorageVirtualMachineRequest' when calling createStorageVirtualMachine(Async)");
        }

        return createStorageVirtualMachineCall(xAmzTarget, createStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a storage virtual machine (SVM) for an Amazon FSx for ONTAP file system.
     * @param xAmzTarget  (required)
     * @param createStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStorageVirtualMachineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public CreateStorageVirtualMachineResponse createStorageVirtualMachine(String xAmzTarget, CreateStorageVirtualMachineRequest createStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStorageVirtualMachineResponse> localVarResp = createStorageVirtualMachineWithHttpInfo(xAmzTarget, createStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a storage virtual machine (SVM) for an Amazon FSx for ONTAP file system.
     * @param xAmzTarget  (required)
     * @param createStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStorageVirtualMachineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStorageVirtualMachineResponse> createStorageVirtualMachineWithHttpInfo(String xAmzTarget, CreateStorageVirtualMachineRequest createStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStorageVirtualMachineValidateBeforeCall(xAmzTarget, createStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStorageVirtualMachineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a storage virtual machine (SVM) for an Amazon FSx for ONTAP file system.
     * @param xAmzTarget  (required)
     * @param createStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ActiveDirectoryError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStorageVirtualMachineAsync(String xAmzTarget, CreateStorageVirtualMachineRequest createStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStorageVirtualMachineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStorageVirtualMachineValidateBeforeCall(xAmzTarget, createStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStorageVirtualMachineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVolume
     * @param xAmzTarget  (required)
     * @param createVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVolumeCall(String xAmzTarget, CreateVolumeRequest createVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVolumeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateVolume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVolumeValidateBeforeCall(String xAmzTarget, CreateVolumeRequest createVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createVolume(Async)");
        }

        // verify the required parameter 'createVolumeRequest' is set
        if (createVolumeRequest == null) {
            throw new ApiException("Missing the required parameter 'createVolumeRequest' when calling createVolume(Async)");
        }

        return createVolumeCall(xAmzTarget, createVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an FSx for ONTAP or Amazon FSx for OpenZFS storage volume.
     * @param xAmzTarget  (required)
     * @param createVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateVolumeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public CreateVolumeResponse createVolume(String xAmzTarget, CreateVolumeRequest createVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateVolumeResponse> localVarResp = createVolumeWithHttpInfo(xAmzTarget, createVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an FSx for ONTAP or Amazon FSx for OpenZFS storage volume.
     * @param xAmzTarget  (required)
     * @param createVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateVolumeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVolumeResponse> createVolumeWithHttpInfo(String xAmzTarget, CreateVolumeRequest createVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createVolumeValidateBeforeCall(xAmzTarget, createVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateVolumeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an FSx for ONTAP or Amazon FSx for OpenZFS storage volume.
     * @param xAmzTarget  (required)
     * @param createVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVolumeAsync(String xAmzTarget, CreateVolumeRequest createVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateVolumeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVolumeValidateBeforeCall(xAmzTarget, createVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateVolumeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVolumeFromBackup
     * @param xAmzTarget  (required)
     * @param createVolumeFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVolumeFromBackupCall(String xAmzTarget, CreateVolumeFromBackupRequest createVolumeFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVolumeFromBackupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateVolumeFromBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVolumeFromBackupValidateBeforeCall(String xAmzTarget, CreateVolumeFromBackupRequest createVolumeFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createVolumeFromBackup(Async)");
        }

        // verify the required parameter 'createVolumeFromBackupRequest' is set
        if (createVolumeFromBackupRequest == null) {
            throw new ApiException("Missing the required parameter 'createVolumeFromBackupRequest' when calling createVolumeFromBackup(Async)");
        }

        return createVolumeFromBackupCall(xAmzTarget, createVolumeFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new Amazon FSx for NetApp ONTAP volume from an existing Amazon FSx volume backup.
     * @param xAmzTarget  (required)
     * @param createVolumeFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateVolumeFromBackupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public CreateVolumeFromBackupResponse createVolumeFromBackup(String xAmzTarget, CreateVolumeFromBackupRequest createVolumeFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateVolumeFromBackupResponse> localVarResp = createVolumeFromBackupWithHttpInfo(xAmzTarget, createVolumeFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new Amazon FSx for NetApp ONTAP volume from an existing Amazon FSx volume backup.
     * @param xAmzTarget  (required)
     * @param createVolumeFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateVolumeFromBackupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVolumeFromBackupResponse> createVolumeFromBackupWithHttpInfo(String xAmzTarget, CreateVolumeFromBackupRequest createVolumeFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createVolumeFromBackupValidateBeforeCall(xAmzTarget, createVolumeFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateVolumeFromBackupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new Amazon FSx for NetApp ONTAP volume from an existing Amazon FSx volume backup.
     * @param xAmzTarget  (required)
     * @param createVolumeFromBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVolumeFromBackupAsync(String xAmzTarget, CreateVolumeFromBackupRequest createVolumeFromBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateVolumeFromBackupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVolumeFromBackupValidateBeforeCall(xAmzTarget, createVolumeFromBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateVolumeFromBackupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBackup
     * @param xAmzTarget  (required)
     * @param deleteBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupRestoring </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupBeingCopied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupCall(String xAmzTarget, DeleteBackupRequest deleteBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteBackupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteBackup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBackupValidateBeforeCall(String xAmzTarget, DeleteBackupRequest deleteBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteBackup(Async)");
        }

        // verify the required parameter 'deleteBackupRequest' is set
        if (deleteBackupRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteBackupRequest' when calling deleteBackup(Async)");
        }

        return deleteBackupCall(xAmzTarget, deleteBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon FSx backup. After deletion, the backup no longer exists, and its data is gone.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteBackup&lt;/code&gt; call returns instantly. The backup won&#39;t show up in later &lt;code&gt;DescribeBackups&lt;/code&gt; calls.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The data in a deleted backup is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteBackupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupRestoring </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupBeingCopied </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBackupResponse deleteBackup(String xAmzTarget, DeleteBackupRequest deleteBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteBackupResponse> localVarResp = deleteBackupWithHttpInfo(xAmzTarget, deleteBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon FSx backup. After deletion, the backup no longer exists, and its data is gone.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteBackup&lt;/code&gt; call returns instantly. The backup won&#39;t show up in later &lt;code&gt;DescribeBackups&lt;/code&gt; calls.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The data in a deleted backup is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteBackupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupRestoring </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupBeingCopied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteBackupResponse> deleteBackupWithHttpInfo(String xAmzTarget, DeleteBackupRequest deleteBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(xAmzTarget, deleteBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteBackupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon FSx backup. After deletion, the backup no longer exists, and its data is gone.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteBackup&lt;/code&gt; call returns instantly. The backup won&#39;t show up in later &lt;code&gt;DescribeBackups&lt;/code&gt; calls.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The data in a deleted backup is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteBackupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BackupInProgress </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupRestoring </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BackupBeingCopied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupAsync(String xAmzTarget, DeleteBackupRequest deleteBackupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteBackupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(xAmzTarget, deleteBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteBackupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataRepositoryAssociation
     * @param xAmzTarget  (required)
     * @param deleteDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDataRepositoryAssociationCall(String xAmzTarget, DeleteDataRepositoryAssociationRequest deleteDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDataRepositoryAssociationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteDataRepositoryAssociation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataRepositoryAssociationValidateBeforeCall(String xAmzTarget, DeleteDataRepositoryAssociationRequest deleteDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteDataRepositoryAssociation(Async)");
        }

        // verify the required parameter 'deleteDataRepositoryAssociationRequest' is set
        if (deleteDataRepositoryAssociationRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteDataRepositoryAssociationRequest' when calling deleteDataRepositoryAssociation(Async)");
        }

        return deleteDataRepositoryAssociationCall(xAmzTarget, deleteDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a data repository association on an Amazon FSx for Lustre file system. Deleting the data repository association unlinks the file system from the Amazon S3 bucket. When deleting a data repository association, you have the option of deleting the data in the file system that corresponds to the data repository association. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.
     * @param xAmzTarget  (required)
     * @param deleteDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDataRepositoryAssociationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDataRepositoryAssociationResponse deleteDataRepositoryAssociation(String xAmzTarget, DeleteDataRepositoryAssociationRequest deleteDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDataRepositoryAssociationResponse> localVarResp = deleteDataRepositoryAssociationWithHttpInfo(xAmzTarget, deleteDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a data repository association on an Amazon FSx for Lustre file system. Deleting the data repository association unlinks the file system from the Amazon S3 bucket. When deleting a data repository association, you have the option of deleting the data in the file system that corresponds to the data repository association. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.
     * @param xAmzTarget  (required)
     * @param deleteDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDataRepositoryAssociationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDataRepositoryAssociationResponse> deleteDataRepositoryAssociationWithHttpInfo(String xAmzTarget, DeleteDataRepositoryAssociationRequest deleteDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteDataRepositoryAssociationValidateBeforeCall(xAmzTarget, deleteDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDataRepositoryAssociationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a data repository association on an Amazon FSx for Lustre file system. Deleting the data repository association unlinks the file system from the Amazon S3 bucket. When deleting a data repository association, you have the option of deleting the data in the file system that corresponds to the data repository association. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.
     * @param xAmzTarget  (required)
     * @param deleteDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDataRepositoryAssociationAsync(String xAmzTarget, DeleteDataRepositoryAssociationRequest deleteDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDataRepositoryAssociationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataRepositoryAssociationValidateBeforeCall(xAmzTarget, deleteDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDataRepositoryAssociationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFileCache
     * @param xAmzTarget  (required)
     * @param deleteFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCacheCall(String xAmzTarget, DeleteFileCacheRequest deleteFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFileCacheRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteFileCache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileCacheValidateBeforeCall(String xAmzTarget, DeleteFileCacheRequest deleteFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteFileCache(Async)");
        }

        // verify the required parameter 'deleteFileCacheRequest' is set
        if (deleteFileCacheRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFileCacheRequest' when calling deleteFileCache(Async)");
        }

        return deleteFileCacheCall(xAmzTarget, deleteFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon File Cache resource. After deletion, the cache no longer exists, and its data is gone.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteFileCache&lt;/code&gt; operation returns while the cache has the &lt;code&gt;DELETING&lt;/code&gt; status. You can check the cache deletion status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\&quot;&gt;DescribeFileCaches&lt;/a&gt; operation, which returns a list of caches in your account. If you pass the cache ID for a deleted cache, the &lt;code&gt;DescribeFileCaches&lt;/code&gt; operation returns a &lt;code&gt;FileCacheNotFound&lt;/code&gt; error.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The data in a deleted cache is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteFileCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFileCacheResponse deleteFileCache(String xAmzTarget, DeleteFileCacheRequest deleteFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteFileCacheResponse> localVarResp = deleteFileCacheWithHttpInfo(xAmzTarget, deleteFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon File Cache resource. After deletion, the cache no longer exists, and its data is gone.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteFileCache&lt;/code&gt; operation returns while the cache has the &lt;code&gt;DELETING&lt;/code&gt; status. You can check the cache deletion status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\&quot;&gt;DescribeFileCaches&lt;/a&gt; operation, which returns a list of caches in your account. If you pass the cache ID for a deleted cache, the &lt;code&gt;DescribeFileCaches&lt;/code&gt; operation returns a &lt;code&gt;FileCacheNotFound&lt;/code&gt; error.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The data in a deleted cache is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteFileCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteFileCacheResponse> deleteFileCacheWithHttpInfo(String xAmzTarget, DeleteFileCacheRequest deleteFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFileCacheValidateBeforeCall(xAmzTarget, deleteFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteFileCacheResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon File Cache resource. After deletion, the cache no longer exists, and its data is gone.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteFileCache&lt;/code&gt; operation returns while the cache has the &lt;code&gt;DELETING&lt;/code&gt; status. You can check the cache deletion status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\&quot;&gt;DescribeFileCaches&lt;/a&gt; operation, which returns a list of caches in your account. If you pass the cache ID for a deleted cache, the &lt;code&gt;DescribeFileCaches&lt;/code&gt; operation returns a &lt;code&gt;FileCacheNotFound&lt;/code&gt; error.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The data in a deleted cache is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCacheAsync(String xAmzTarget, DeleteFileCacheRequest deleteFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteFileCacheResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileCacheValidateBeforeCall(xAmzTarget, deleteFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteFileCacheResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFileSystem
     * @param xAmzTarget  (required)
     * @param deleteFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileSystemCall(String xAmzTarget, DeleteFileSystemRequest deleteFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFileSystemRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteFileSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileSystemValidateBeforeCall(String xAmzTarget, DeleteFileSystemRequest deleteFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteFileSystem(Async)");
        }

        // verify the required parameter 'deleteFileSystemRequest' is set
        if (deleteFileSystemRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFileSystemRequest' when calling deleteFileSystem(Async)");
        }

        return deleteFileSystemCall(xAmzTarget, deleteFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a file system. After deletion, the file system no longer exists, and its data is gone. Any existing automatic backups and snapshots are also deleted.&lt;/p&gt; &lt;p&gt;To delete an Amazon FSx for NetApp ONTAP file system, first delete all the volumes and storage virtual machines (SVMs) on the file system. Then provide a &lt;code&gt;FileSystemId&lt;/code&gt; value to the &lt;code&gt;DeleFileSystem&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;By default, when you delete an Amazon FSx for Windows File Server file system, a final backup is created upon deletion. This final backup isn&#39;t subject to the file system&#39;s retention policy, and must be manually deleted.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteFileSystem&lt;/code&gt; operation returns while the file system has the &lt;code&gt;DELETING&lt;/code&gt; status. You can check the file system deletion status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt;DescribeFileSystems&lt;/a&gt; operation, which returns a list of file systems in your account. If you pass the file system ID for a deleted file system, the &lt;code&gt;DescribeFileSystems&lt;/code&gt; operation returns a &lt;code&gt;FileSystemNotFound&lt;/code&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a data repository task is in a &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;EXECUTING&lt;/code&gt; state, deleting an Amazon FSx for Lustre file system will fail with an HTTP status code 400 (Bad Request).&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;The data in a deleted file system is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteFileSystemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFileSystemResponse deleteFileSystem(String xAmzTarget, DeleteFileSystemRequest deleteFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteFileSystemResponse> localVarResp = deleteFileSystemWithHttpInfo(xAmzTarget, deleteFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a file system. After deletion, the file system no longer exists, and its data is gone. Any existing automatic backups and snapshots are also deleted.&lt;/p&gt; &lt;p&gt;To delete an Amazon FSx for NetApp ONTAP file system, first delete all the volumes and storage virtual machines (SVMs) on the file system. Then provide a &lt;code&gt;FileSystemId&lt;/code&gt; value to the &lt;code&gt;DeleFileSystem&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;By default, when you delete an Amazon FSx for Windows File Server file system, a final backup is created upon deletion. This final backup isn&#39;t subject to the file system&#39;s retention policy, and must be manually deleted.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteFileSystem&lt;/code&gt; operation returns while the file system has the &lt;code&gt;DELETING&lt;/code&gt; status. You can check the file system deletion status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt;DescribeFileSystems&lt;/a&gt; operation, which returns a list of file systems in your account. If you pass the file system ID for a deleted file system, the &lt;code&gt;DescribeFileSystems&lt;/code&gt; operation returns a &lt;code&gt;FileSystemNotFound&lt;/code&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a data repository task is in a &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;EXECUTING&lt;/code&gt; state, deleting an Amazon FSx for Lustre file system will fail with an HTTP status code 400 (Bad Request).&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;The data in a deleted file system is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteFileSystemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteFileSystemResponse> deleteFileSystemWithHttpInfo(String xAmzTarget, DeleteFileSystemRequest deleteFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFileSystemValidateBeforeCall(xAmzTarget, deleteFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteFileSystemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a file system. After deletion, the file system no longer exists, and its data is gone. Any existing automatic backups and snapshots are also deleted.&lt;/p&gt; &lt;p&gt;To delete an Amazon FSx for NetApp ONTAP file system, first delete all the volumes and storage virtual machines (SVMs) on the file system. Then provide a &lt;code&gt;FileSystemId&lt;/code&gt; value to the &lt;code&gt;DeleFileSystem&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;By default, when you delete an Amazon FSx for Windows File Server file system, a final backup is created upon deletion. This final backup isn&#39;t subject to the file system&#39;s retention policy, and must be manually deleted.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteFileSystem&lt;/code&gt; operation returns while the file system has the &lt;code&gt;DELETING&lt;/code&gt; status. You can check the file system deletion status by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileSystems.html\&quot;&gt;DescribeFileSystems&lt;/a&gt; operation, which returns a list of file systems in your account. If you pass the file system ID for a deleted file system, the &lt;code&gt;DescribeFileSystems&lt;/code&gt; operation returns a &lt;code&gt;FileSystemNotFound&lt;/code&gt; error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a data repository task is in a &lt;code&gt;PENDING&lt;/code&gt; or &lt;code&gt;EXECUTING&lt;/code&gt; state, deleting an Amazon FSx for Lustre file system will fail with an HTTP status code 400 (Bad Request).&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;The data in a deleted file system is also deleted and can&#39;t be recovered by any means.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param deleteFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileSystemAsync(String xAmzTarget, DeleteFileSystemRequest deleteFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteFileSystemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileSystemValidateBeforeCall(xAmzTarget, deleteFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteFileSystemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSnapshot
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotCall(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSnapshotValidateBeforeCall(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteSnapshot(Async)");
        }

        // verify the required parameter 'deleteSnapshotRequest' is set
        if (deleteSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSnapshotRequest' when calling deleteSnapshot(Async)");
        }

        return deleteSnapshotCall(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon FSx for OpenZFS snapshot. After deletion, the snapshot no longer exists, and its data is gone. Deleting a snapshot doesn&#39;t affect snapshots stored in a file system backup. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteSnapshot&lt;/code&gt; operation returns instantly. The snapshot appears with the lifecycle status of &lt;code&gt;DELETING&lt;/code&gt; until the deletion is complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSnapshotResponse deleteSnapshot(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSnapshotResponse> localVarResp = deleteSnapshotWithHttpInfo(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon FSx for OpenZFS snapshot. After deletion, the snapshot no longer exists, and its data is gone. Deleting a snapshot doesn&#39;t affect snapshots stored in a file system backup. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteSnapshot&lt;/code&gt; operation returns instantly. The snapshot appears with the lifecycle status of &lt;code&gt;DELETING&lt;/code&gt; until the deletion is complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSnapshotResponse> deleteSnapshotWithHttpInfo(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSnapshotValidateBeforeCall(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon FSx for OpenZFS snapshot. After deletion, the snapshot no longer exists, and its data is gone. Deleting a snapshot doesn&#39;t affect snapshots stored in a file system backup. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteSnapshot&lt;/code&gt; operation returns instantly. The snapshot appears with the lifecycle status of &lt;code&gt;DELETING&lt;/code&gt; until the deletion is complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotAsync(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSnapshotValidateBeforeCall(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStorageVirtualMachine
     * @param xAmzTarget  (required)
     * @param deleteStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStorageVirtualMachineCall(String xAmzTarget, DeleteStorageVirtualMachineRequest deleteStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStorageVirtualMachineRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteStorageVirtualMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStorageVirtualMachineValidateBeforeCall(String xAmzTarget, DeleteStorageVirtualMachineRequest deleteStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteStorageVirtualMachine(Async)");
        }

        // verify the required parameter 'deleteStorageVirtualMachineRequest' is set
        if (deleteStorageVirtualMachineRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteStorageVirtualMachineRequest' when calling deleteStorageVirtualMachine(Async)");
        }

        return deleteStorageVirtualMachineCall(xAmzTarget, deleteStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an existing Amazon FSx for ONTAP storage virtual machine (SVM). Prior to deleting an SVM, you must delete all non-root volumes in the SVM, otherwise the operation will fail.
     * @param xAmzTarget  (required)
     * @param deleteStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteStorageVirtualMachineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStorageVirtualMachineResponse deleteStorageVirtualMachine(String xAmzTarget, DeleteStorageVirtualMachineRequest deleteStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteStorageVirtualMachineResponse> localVarResp = deleteStorageVirtualMachineWithHttpInfo(xAmzTarget, deleteStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing Amazon FSx for ONTAP storage virtual machine (SVM). Prior to deleting an SVM, you must delete all non-root volumes in the SVM, otherwise the operation will fail.
     * @param xAmzTarget  (required)
     * @param deleteStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteStorageVirtualMachineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteStorageVirtualMachineResponse> deleteStorageVirtualMachineWithHttpInfo(String xAmzTarget, DeleteStorageVirtualMachineRequest deleteStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteStorageVirtualMachineValidateBeforeCall(xAmzTarget, deleteStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteStorageVirtualMachineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Amazon FSx for ONTAP storage virtual machine (SVM). Prior to deleting an SVM, you must delete all non-root volumes in the SVM, otherwise the operation will fail.
     * @param xAmzTarget  (required)
     * @param deleteStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStorageVirtualMachineAsync(String xAmzTarget, DeleteStorageVirtualMachineRequest deleteStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteStorageVirtualMachineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStorageVirtualMachineValidateBeforeCall(xAmzTarget, deleteStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteStorageVirtualMachineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVolume
     * @param xAmzTarget  (required)
     * @param deleteVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVolumeCall(String xAmzTarget, DeleteVolumeRequest deleteVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteVolumeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DeleteVolume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVolumeValidateBeforeCall(String xAmzTarget, DeleteVolumeRequest deleteVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteVolume(Async)");
        }

        // verify the required parameter 'deleteVolumeRequest' is set
        if (deleteVolumeRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteVolumeRequest' when calling deleteVolume(Async)");
        }

        return deleteVolumeCall(xAmzTarget, deleteVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
     * @param xAmzTarget  (required)
     * @param deleteVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteVolumeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVolumeResponse deleteVolume(String xAmzTarget, DeleteVolumeRequest deleteVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteVolumeResponse> localVarResp = deleteVolumeWithHttpInfo(xAmzTarget, deleteVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
     * @param xAmzTarget  (required)
     * @param deleteVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteVolumeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVolumeResponse> deleteVolumeWithHttpInfo(String xAmzTarget, DeleteVolumeRequest deleteVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVolumeValidateBeforeCall(xAmzTarget, deleteVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteVolumeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
     * @param xAmzTarget  (required)
     * @param deleteVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVolumeAsync(String xAmzTarget, DeleteVolumeRequest deleteVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteVolumeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVolumeValidateBeforeCall(xAmzTarget, deleteVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteVolumeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeBackups
     * @param xAmzTarget  (required)
     * @param describeBackupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeBackupsCall(String xAmzTarget, DescribeBackupsRequest describeBackupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeBackupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeBackups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeBackupsValidateBeforeCall(String xAmzTarget, DescribeBackupsRequest describeBackupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeBackups(Async)");
        }

        // verify the required parameter 'describeBackupsRequest' is set
        if (describeBackupsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeBackupsRequest' when calling describeBackups(Async)");
        }

        return describeBackupsCall(xAmzTarget, describeBackupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description of a specific Amazon FSx backup, if a &lt;code&gt;BackupIds&lt;/code&gt; value is provided for that backup. Otherwise, it returns all backups owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all backups, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of backups in a response. If more backups remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of the &lt;code&gt;NextToken&lt;/code&gt; value from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your backups. &lt;code&gt;DescribeBackups&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt; value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The operation might return fewer than the &lt;code&gt;MaxResults&lt;/code&gt; value of backup descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of the backups returned in the response of one &lt;code&gt;DescribeBackups&lt;/code&gt; call and the order of the backups returned across the responses of a multi-call iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeBackupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeBackupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeBackupsResponse describeBackups(String xAmzTarget, DescribeBackupsRequest describeBackupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeBackupsResponse> localVarResp = describeBackupsWithHttpInfo(xAmzTarget, describeBackupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description of a specific Amazon FSx backup, if a &lt;code&gt;BackupIds&lt;/code&gt; value is provided for that backup. Otherwise, it returns all backups owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all backups, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of backups in a response. If more backups remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of the &lt;code&gt;NextToken&lt;/code&gt; value from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your backups. &lt;code&gt;DescribeBackups&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt; value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The operation might return fewer than the &lt;code&gt;MaxResults&lt;/code&gt; value of backup descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of the backups returned in the response of one &lt;code&gt;DescribeBackups&lt;/code&gt; call and the order of the backups returned across the responses of a multi-call iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeBackupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeBackupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeBackupsResponse> describeBackupsWithHttpInfo(String xAmzTarget, DescribeBackupsRequest describeBackupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeBackupsValidateBeforeCall(xAmzTarget, describeBackupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeBackupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description of a specific Amazon FSx backup, if a &lt;code&gt;BackupIds&lt;/code&gt; value is provided for that backup. Otherwise, it returns all backups owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all backups, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of backups in a response. If more backups remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of the &lt;code&gt;NextToken&lt;/code&gt; value from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your backups. &lt;code&gt;DescribeBackups&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt; value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The operation might return fewer than the &lt;code&gt;MaxResults&lt;/code&gt; value of backup descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of the backups returned in the response of one &lt;code&gt;DescribeBackups&lt;/code&gt; call and the order of the backups returned across the responses of a multi-call iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeBackupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BackupNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeBackupsAsync(String xAmzTarget, DescribeBackupsRequest describeBackupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeBackupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeBackupsValidateBeforeCall(xAmzTarget, describeBackupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeBackupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeDataRepositoryAssociations
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryAssociationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDataRepositoryType </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDataRepositoryAssociationsCall(String xAmzTarget, DescribeDataRepositoryAssociationsRequest describeDataRepositoryAssociationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDataRepositoryAssociationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeDataRepositoryAssociations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeDataRepositoryAssociationsValidateBeforeCall(String xAmzTarget, DescribeDataRepositoryAssociationsRequest describeDataRepositoryAssociationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeDataRepositoryAssociations(Async)");
        }

        // verify the required parameter 'describeDataRepositoryAssociationsRequest' is set
        if (describeDataRepositoryAssociationsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeDataRepositoryAssociationsRequest' when calling describeDataRepositoryAssociations(Async)");
        }

        return describeDataRepositoryAssociationsCall(xAmzTarget, describeDataRepositoryAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx for Lustre or Amazon File Cache data repository associations, if one or more &lt;code&gt;AssociationIds&lt;/code&gt; values are provided in the request, or if filters are used in the request. Data repository associations are supported on Amazon File Cache resources and all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt; &lt;p&gt;You can use filters to narrow the response to include just data repository associations for specific file systems (use the &lt;code&gt;file-system-id&lt;/code&gt; filter with the ID of the file system) or caches (use the &lt;code&gt;file-cache-id&lt;/code&gt; filter with the ID of the cache), or data repository associations for a specific repository type (use the &lt;code&gt;data-repository-type&lt;/code&gt; filter with a value of &lt;code&gt;S3&lt;/code&gt; or &lt;code&gt;NFS&lt;/code&gt;). If you don&#39;t use filters, the response returns all data repository associations owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all data repository associations, you can paginate the response by using the optional &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of data repository associations returned in a response. If more data repository associations remain, a &lt;code&gt;NextToken&lt;/code&gt; value is returned in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryAssociationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeDataRepositoryAssociationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDataRepositoryType </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDataRepositoryAssociationsResponse describeDataRepositoryAssociations(String xAmzTarget, DescribeDataRepositoryAssociationsRequest describeDataRepositoryAssociationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeDataRepositoryAssociationsResponse> localVarResp = describeDataRepositoryAssociationsWithHttpInfo(xAmzTarget, describeDataRepositoryAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx for Lustre or Amazon File Cache data repository associations, if one or more &lt;code&gt;AssociationIds&lt;/code&gt; values are provided in the request, or if filters are used in the request. Data repository associations are supported on Amazon File Cache resources and all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt; &lt;p&gt;You can use filters to narrow the response to include just data repository associations for specific file systems (use the &lt;code&gt;file-system-id&lt;/code&gt; filter with the ID of the file system) or caches (use the &lt;code&gt;file-cache-id&lt;/code&gt; filter with the ID of the cache), or data repository associations for a specific repository type (use the &lt;code&gt;data-repository-type&lt;/code&gt; filter with a value of &lt;code&gt;S3&lt;/code&gt; or &lt;code&gt;NFS&lt;/code&gt;). If you don&#39;t use filters, the response returns all data repository associations owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all data repository associations, you can paginate the response by using the optional &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of data repository associations returned in a response. If more data repository associations remain, a &lt;code&gt;NextToken&lt;/code&gt; value is returned in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryAssociationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeDataRepositoryAssociationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDataRepositoryType </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDataRepositoryAssociationsResponse> describeDataRepositoryAssociationsWithHttpInfo(String xAmzTarget, DescribeDataRepositoryAssociationsRequest describeDataRepositoryAssociationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeDataRepositoryAssociationsValidateBeforeCall(xAmzTarget, describeDataRepositoryAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeDataRepositoryAssociationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description of specific Amazon FSx for Lustre or Amazon File Cache data repository associations, if one or more &lt;code&gt;AssociationIds&lt;/code&gt; values are provided in the request, or if filters are used in the request. Data repository associations are supported on Amazon File Cache resources and all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt; &lt;p&gt;You can use filters to narrow the response to include just data repository associations for specific file systems (use the &lt;code&gt;file-system-id&lt;/code&gt; filter with the ID of the file system) or caches (use the &lt;code&gt;file-cache-id&lt;/code&gt; filter with the ID of the cache), or data repository associations for a specific repository type (use the &lt;code&gt;data-repository-type&lt;/code&gt; filter with a value of &lt;code&gt;S3&lt;/code&gt; or &lt;code&gt;NFS&lt;/code&gt;). If you don&#39;t use filters, the response returns all data repository associations owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all data repository associations, you can paginate the response by using the optional &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of data repository associations returned in a response. If more data repository associations remain, a &lt;code&gt;NextToken&lt;/code&gt; value is returned in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryAssociationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDataRepositoryType </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDataRepositoryAssociationsAsync(String xAmzTarget, DescribeDataRepositoryAssociationsRequest describeDataRepositoryAssociationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeDataRepositoryAssociationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeDataRepositoryAssociationsValidateBeforeCall(xAmzTarget, describeDataRepositoryAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeDataRepositoryAssociationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeDataRepositoryTasks
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDataRepositoryTasksCall(String xAmzTarget, DescribeDataRepositoryTasksRequest describeDataRepositoryTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDataRepositoryTasksRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeDataRepositoryTasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeDataRepositoryTasksValidateBeforeCall(String xAmzTarget, DescribeDataRepositoryTasksRequest describeDataRepositoryTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeDataRepositoryTasks(Async)");
        }

        // verify the required parameter 'describeDataRepositoryTasksRequest' is set
        if (describeDataRepositoryTasksRequest == null) {
            throw new ApiException("Missing the required parameter 'describeDataRepositoryTasksRequest' when calling describeDataRepositoryTasks(Async)");
        }

        return describeDataRepositoryTasksCall(xAmzTarget, describeDataRepositoryTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx for Lustre or Amazon File Cache data repository tasks, if one or more &lt;code&gt;TaskIds&lt;/code&gt; values are provided in the request, or if filters are used in the request. You can use filters to narrow the response to include just tasks for specific file systems or caches, or tasks in a specific lifecycle state. Otherwise, it returns all data repository tasks owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all tasks, you can paginate the response by using the optional &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of tasks returned in a response. If more tasks remain, a &lt;code&gt;NextToken&lt;/code&gt; value is returned in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeDataRepositoryTasksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDataRepositoryTasksResponse describeDataRepositoryTasks(String xAmzTarget, DescribeDataRepositoryTasksRequest describeDataRepositoryTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeDataRepositoryTasksResponse> localVarResp = describeDataRepositoryTasksWithHttpInfo(xAmzTarget, describeDataRepositoryTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx for Lustre or Amazon File Cache data repository tasks, if one or more &lt;code&gt;TaskIds&lt;/code&gt; values are provided in the request, or if filters are used in the request. You can use filters to narrow the response to include just tasks for specific file systems or caches, or tasks in a specific lifecycle state. Otherwise, it returns all data repository tasks owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all tasks, you can paginate the response by using the optional &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of tasks returned in a response. If more tasks remain, a &lt;code&gt;NextToken&lt;/code&gt; value is returned in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeDataRepositoryTasksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDataRepositoryTasksResponse> describeDataRepositoryTasksWithHttpInfo(String xAmzTarget, DescribeDataRepositoryTasksRequest describeDataRepositoryTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeDataRepositoryTasksValidateBeforeCall(xAmzTarget, describeDataRepositoryTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeDataRepositoryTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description of specific Amazon FSx for Lustre or Amazon File Cache data repository tasks, if one or more &lt;code&gt;TaskIds&lt;/code&gt; values are provided in the request, or if filters are used in the request. You can use filters to narrow the response to include just tasks for specific file systems or caches, or tasks in a specific lifecycle state. Otherwise, it returns all data repository tasks owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all tasks, you can paginate the response by using the optional &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of tasks returned in a response. If more tasks remain, a &lt;code&gt;NextToken&lt;/code&gt; value is returned in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeDataRepositoryTasksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryTaskNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDataRepositoryTasksAsync(String xAmzTarget, DescribeDataRepositoryTasksRequest describeDataRepositoryTasksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeDataRepositoryTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeDataRepositoryTasksValidateBeforeCall(xAmzTarget, describeDataRepositoryTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeDataRepositoryTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFileCaches
     * @param xAmzTarget  (required)
     * @param describeFileCachesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFileCachesCall(String xAmzTarget, DescribeFileCachesRequest describeFileCachesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFileCachesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeFileCaches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFileCachesValidateBeforeCall(String xAmzTarget, DescribeFileCachesRequest describeFileCachesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFileCaches(Async)");
        }

        // verify the required parameter 'describeFileCachesRequest' is set
        if (describeFileCachesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFileCachesRequest' when calling describeFileCaches(Async)");
        }

        return describeFileCachesCall(xAmzTarget, describeFileCachesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description of a specific Amazon File Cache resource, if a &lt;code&gt;FileCacheIds&lt;/code&gt; value is provided for that cache. Otherwise, it returns descriptions of all caches owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all cache descriptions, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of descriptions in a response. If more cache descriptions remain, the operation returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your cache descriptions. &lt;code&gt;DescribeFileCaches&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; cache descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of caches returned in the response of one &lt;code&gt;DescribeFileCaches&lt;/code&gt; call and the order of caches returned across the responses of a multicall iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeFileCachesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFileCachesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFileCachesResponse describeFileCaches(String xAmzTarget, DescribeFileCachesRequest describeFileCachesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeFileCachesResponse> localVarResp = describeFileCachesWithHttpInfo(xAmzTarget, describeFileCachesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description of a specific Amazon File Cache resource, if a &lt;code&gt;FileCacheIds&lt;/code&gt; value is provided for that cache. Otherwise, it returns descriptions of all caches owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all cache descriptions, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of descriptions in a response. If more cache descriptions remain, the operation returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your cache descriptions. &lt;code&gt;DescribeFileCaches&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; cache descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of caches returned in the response of one &lt;code&gt;DescribeFileCaches&lt;/code&gt; call and the order of caches returned across the responses of a multicall iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeFileCachesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFileCachesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFileCachesResponse> describeFileCachesWithHttpInfo(String xAmzTarget, DescribeFileCachesRequest describeFileCachesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFileCachesValidateBeforeCall(xAmzTarget, describeFileCachesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFileCachesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description of a specific Amazon File Cache resource, if a &lt;code&gt;FileCacheIds&lt;/code&gt; value is provided for that cache. Otherwise, it returns descriptions of all caches owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all cache descriptions, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of descriptions in a response. If more cache descriptions remain, the operation returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your cache descriptions. &lt;code&gt;DescribeFileCaches&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; cache descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of caches returned in the response of one &lt;code&gt;DescribeFileCaches&lt;/code&gt; call and the order of caches returned across the responses of a multicall iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeFileCachesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFileCachesAsync(String xAmzTarget, DescribeFileCachesRequest describeFileCachesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeFileCachesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFileCachesValidateBeforeCall(xAmzTarget, describeFileCachesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFileCachesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFileSystemAliases
     * @param xAmzTarget  (required)
     * @param describeFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFileSystemAliasesCall(String xAmzTarget, DescribeFileSystemAliasesRequest describeFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFileSystemAliasesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeFileSystemAliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFileSystemAliasesValidateBeforeCall(String xAmzTarget, DescribeFileSystemAliasesRequest describeFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFileSystemAliases(Async)");
        }

        // verify the required parameter 'describeFileSystemAliasesRequest' is set
        if (describeFileSystemAliasesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFileSystemAliasesRequest' when calling describeFileSystemAliases(Async)");
        }

        return describeFileSystemAliasesCall(xAmzTarget, describeFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns the DNS aliases that are associated with the specified Amazon FSx for Windows File Server file system. A history of all DNS aliases that have been associated with and disassociated from the file system is available in the list of &lt;a&gt;AdministrativeAction&lt;/a&gt; provided in the &lt;a&gt;DescribeFileSystems&lt;/a&gt; operation response.
     * @param xAmzTarget  (required)
     * @param describeFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFileSystemAliasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFileSystemAliasesResponse describeFileSystemAliases(String xAmzTarget, DescribeFileSystemAliasesRequest describeFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeFileSystemAliasesResponse> localVarResp = describeFileSystemAliasesWithHttpInfo(xAmzTarget, describeFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the DNS aliases that are associated with the specified Amazon FSx for Windows File Server file system. A history of all DNS aliases that have been associated with and disassociated from the file system is available in the list of &lt;a&gt;AdministrativeAction&lt;/a&gt; provided in the &lt;a&gt;DescribeFileSystems&lt;/a&gt; operation response.
     * @param xAmzTarget  (required)
     * @param describeFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFileSystemAliasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFileSystemAliasesResponse> describeFileSystemAliasesWithHttpInfo(String xAmzTarget, DescribeFileSystemAliasesRequest describeFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFileSystemAliasesValidateBeforeCall(xAmzTarget, describeFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFileSystemAliasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the DNS aliases that are associated with the specified Amazon FSx for Windows File Server file system. A history of all DNS aliases that have been associated with and disassociated from the file system is available in the list of &lt;a&gt;AdministrativeAction&lt;/a&gt; provided in the &lt;a&gt;DescribeFileSystems&lt;/a&gt; operation response.
     * @param xAmzTarget  (required)
     * @param describeFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFileSystemAliasesAsync(String xAmzTarget, DescribeFileSystemAliasesRequest describeFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeFileSystemAliasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFileSystemAliasesValidateBeforeCall(xAmzTarget, describeFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFileSystemAliasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFileSystems
     * @param xAmzTarget  (required)
     * @param describeFileSystemsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFileSystemsCall(String xAmzTarget, DescribeFileSystemsRequest describeFileSystemsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFileSystemsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeFileSystems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFileSystemsValidateBeforeCall(String xAmzTarget, DescribeFileSystemsRequest describeFileSystemsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFileSystems(Async)");
        }

        // verify the required parameter 'describeFileSystemsRequest' is set
        if (describeFileSystemsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFileSystemsRequest' when calling describeFileSystems(Async)");
        }

        return describeFileSystemsCall(xAmzTarget, describeFileSystemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx file systems, if a &lt;code&gt;FileSystemIds&lt;/code&gt; value is provided for that file system. Otherwise, it returns descriptions of all file systems owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all file system descriptions, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of descriptions in a response. If more file system descriptions remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your file system descriptions. &lt;code&gt;DescribeFileSystems&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; file system descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of file systems returned in the response of one &lt;code&gt;DescribeFileSystems&lt;/code&gt; call and the order of file systems returned across the responses of a multicall iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeFileSystemsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFileSystemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFileSystemsResponse describeFileSystems(String xAmzTarget, DescribeFileSystemsRequest describeFileSystemsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeFileSystemsResponse> localVarResp = describeFileSystemsWithHttpInfo(xAmzTarget, describeFileSystemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx file systems, if a &lt;code&gt;FileSystemIds&lt;/code&gt; value is provided for that file system. Otherwise, it returns descriptions of all file systems owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all file system descriptions, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of descriptions in a response. If more file system descriptions remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your file system descriptions. &lt;code&gt;DescribeFileSystems&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; file system descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of file systems returned in the response of one &lt;code&gt;DescribeFileSystems&lt;/code&gt; call and the order of file systems returned across the responses of a multicall iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeFileSystemsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFileSystemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFileSystemsResponse> describeFileSystemsWithHttpInfo(String xAmzTarget, DescribeFileSystemsRequest describeFileSystemsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFileSystemsValidateBeforeCall(xAmzTarget, describeFileSystemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFileSystemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description of specific Amazon FSx file systems, if a &lt;code&gt;FileSystemIds&lt;/code&gt; value is provided for that file system. Otherwise, it returns descriptions of all file systems owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all file system descriptions, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of descriptions in a response. If more file system descriptions remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This operation is used in an iterative process to retrieve a list of your file system descriptions. &lt;code&gt;DescribeFileSystems&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; file system descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of file systems returned in the response of one &lt;code&gt;DescribeFileSystems&lt;/code&gt; call and the order of file systems returned across the responses of a multicall iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeFileSystemsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFileSystemsAsync(String xAmzTarget, DescribeFileSystemsRequest describeFileSystemsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeFileSystemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFileSystemsValidateBeforeCall(xAmzTarget, describeFileSystemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFileSystemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeSnapshots
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSnapshotsCall(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSnapshotsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeSnapshotsValidateBeforeCall(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeSnapshots(Async)");
        }

        // verify the required parameter 'describeSnapshotsRequest' is set
        if (describeSnapshotsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeSnapshotsRequest' when calling describeSnapshots(Async)");
        }

        return describeSnapshotsCall(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx for OpenZFS snapshots, if a &lt;code&gt;SnapshotIds&lt;/code&gt; value is provided. Otherwise, this operation returns all snapshots owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all snapshots, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of snapshots in a response. If more backups remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response. &lt;/p&gt; &lt;p&gt;Use this operation in an iterative process to retrieve a list of your snapshots. &lt;code&gt;DescribeSnapshots&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt; value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The operation might return fewer than the &lt;code&gt;MaxResults&lt;/code&gt; value of snapshot descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of snapshots returned in the response of one &lt;code&gt;DescribeSnapshots&lt;/code&gt; call and the order of backups returned across the responses of a multi-call iteration is unspecified. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeSnapshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSnapshotsResponse describeSnapshots(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeSnapshotsResponse> localVarResp = describeSnapshotsWithHttpInfo(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description of specific Amazon FSx for OpenZFS snapshots, if a &lt;code&gt;SnapshotIds&lt;/code&gt; value is provided. Otherwise, this operation returns all snapshots owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all snapshots, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of snapshots in a response. If more backups remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response. &lt;/p&gt; &lt;p&gt;Use this operation in an iterative process to retrieve a list of your snapshots. &lt;code&gt;DescribeSnapshots&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt; value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The operation might return fewer than the &lt;code&gt;MaxResults&lt;/code&gt; value of snapshot descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of snapshots returned in the response of one &lt;code&gt;DescribeSnapshots&lt;/code&gt; call and the order of backups returned across the responses of a multi-call iteration is unspecified. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeSnapshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSnapshotsResponse> describeSnapshotsWithHttpInfo(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeSnapshotsValidateBeforeCall(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description of specific Amazon FSx for OpenZFS snapshots, if a &lt;code&gt;SnapshotIds&lt;/code&gt; value is provided. Otherwise, this operation returns all snapshots owned by your Amazon Web Services account in the Amazon Web Services Region of the endpoint that you&#39;re calling.&lt;/p&gt; &lt;p&gt;When retrieving all snapshots, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of snapshots in a response. If more backups remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response. &lt;/p&gt; &lt;p&gt;Use this operation in an iterative process to retrieve a list of your snapshots. &lt;code&gt;DescribeSnapshots&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt; value. Then the operation continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;When using this operation, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The operation might return fewer than the &lt;code&gt;MaxResults&lt;/code&gt; value of snapshot descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of snapshots returned in the response of one &lt;code&gt;DescribeSnapshots&lt;/code&gt; call and the order of backups returned across the responses of a multi-call iteration is unspecified. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSnapshotsAsync(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeSnapshotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeSnapshotsValidateBeforeCall(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeStorageVirtualMachines
     * @param xAmzTarget  (required)
     * @param describeStorageVirtualMachinesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStorageVirtualMachinesCall(String xAmzTarget, DescribeStorageVirtualMachinesRequest describeStorageVirtualMachinesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStorageVirtualMachinesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeStorageVirtualMachines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeStorageVirtualMachinesValidateBeforeCall(String xAmzTarget, DescribeStorageVirtualMachinesRequest describeStorageVirtualMachinesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeStorageVirtualMachines(Async)");
        }

        // verify the required parameter 'describeStorageVirtualMachinesRequest' is set
        if (describeStorageVirtualMachinesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeStorageVirtualMachinesRequest' when calling describeStorageVirtualMachines(Async)");
        }

        return describeStorageVirtualMachinesCall(xAmzTarget, describeStorageVirtualMachinesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Describes one or more Amazon FSx for NetApp ONTAP storage virtual machines (SVMs).
     * @param xAmzTarget  (required)
     * @param describeStorageVirtualMachinesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeStorageVirtualMachinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStorageVirtualMachinesResponse describeStorageVirtualMachines(String xAmzTarget, DescribeStorageVirtualMachinesRequest describeStorageVirtualMachinesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeStorageVirtualMachinesResponse> localVarResp = describeStorageVirtualMachinesWithHttpInfo(xAmzTarget, describeStorageVirtualMachinesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes one or more Amazon FSx for NetApp ONTAP storage virtual machines (SVMs).
     * @param xAmzTarget  (required)
     * @param describeStorageVirtualMachinesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeStorageVirtualMachinesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStorageVirtualMachinesResponse> describeStorageVirtualMachinesWithHttpInfo(String xAmzTarget, DescribeStorageVirtualMachinesRequest describeStorageVirtualMachinesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeStorageVirtualMachinesValidateBeforeCall(xAmzTarget, describeStorageVirtualMachinesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeStorageVirtualMachinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes one or more Amazon FSx for NetApp ONTAP storage virtual machines (SVMs).
     * @param xAmzTarget  (required)
     * @param describeStorageVirtualMachinesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeStorageVirtualMachinesAsync(String xAmzTarget, DescribeStorageVirtualMachinesRequest describeStorageVirtualMachinesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeStorageVirtualMachinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeStorageVirtualMachinesValidateBeforeCall(xAmzTarget, describeStorageVirtualMachinesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeStorageVirtualMachinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeVolumes
     * @param xAmzTarget  (required)
     * @param describeVolumesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVolumesCall(String xAmzTarget, DescribeVolumesRequest describeVolumesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeVolumesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DescribeVolumes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeVolumesValidateBeforeCall(String xAmzTarget, DescribeVolumesRequest describeVolumesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeVolumes(Async)");
        }

        // verify the required parameter 'describeVolumesRequest' is set
        if (describeVolumesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeVolumesRequest' when calling describeVolumes(Async)");
        }

        return describeVolumesCall(xAmzTarget, describeVolumesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Describes one or more Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volumes.
     * @param xAmzTarget  (required)
     * @param describeVolumesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeVolumesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DescribeVolumesResponse describeVolumes(String xAmzTarget, DescribeVolumesRequest describeVolumesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeVolumesResponse> localVarResp = describeVolumesWithHttpInfo(xAmzTarget, describeVolumesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes one or more Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volumes.
     * @param xAmzTarget  (required)
     * @param describeVolumesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeVolumesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeVolumesResponse> describeVolumesWithHttpInfo(String xAmzTarget, DescribeVolumesRequest describeVolumesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeVolumesValidateBeforeCall(xAmzTarget, describeVolumesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeVolumesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes one or more Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volumes.
     * @param xAmzTarget  (required)
     * @param describeVolumesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVolumesAsync(String xAmzTarget, DescribeVolumesRequest describeVolumesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeVolumesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeVolumesValidateBeforeCall(xAmzTarget, describeVolumesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeVolumesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateFileSystemAliases
     * @param xAmzTarget  (required)
     * @param disassociateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateFileSystemAliasesCall(String xAmzTarget, DisassociateFileSystemAliasesRequest disassociateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateFileSystemAliasesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.DisassociateFileSystemAliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateFileSystemAliasesValidateBeforeCall(String xAmzTarget, DisassociateFileSystemAliasesRequest disassociateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateFileSystemAliases(Async)");
        }

        // verify the required parameter 'disassociateFileSystemAliasesRequest' is set
        if (disassociateFileSystemAliasesRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateFileSystemAliasesRequest' when calling disassociateFileSystemAliases(Async)");
        }

        return disassociateFileSystemAliasesCall(xAmzTarget, disassociateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this action to disassociate, or remove, one or more Domain Name Service (DNS) aliases from an Amazon FSx for Windows File Server file system. If you attempt to disassociate a DNS alias that is not associated with the file system, Amazon FSx responds with a 400 Bad Request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\&quot;&gt;Working with DNS Aliases&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The system generated response showing the DNS aliases that Amazon FSx is attempting to disassociate from the file system. Use the API operation to monitor the status of the aliases Amazon FSx is disassociating with the file system.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisassociateFileSystemAliasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public DisassociateFileSystemAliasesResponse disassociateFileSystemAliases(String xAmzTarget, DisassociateFileSystemAliasesRequest disassociateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisassociateFileSystemAliasesResponse> localVarResp = disassociateFileSystemAliasesWithHttpInfo(xAmzTarget, disassociateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this action to disassociate, or remove, one or more Domain Name Service (DNS) aliases from an Amazon FSx for Windows File Server file system. If you attempt to disassociate a DNS alias that is not associated with the file system, Amazon FSx responds with a 400 Bad Request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\&quot;&gt;Working with DNS Aliases&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The system generated response showing the DNS aliases that Amazon FSx is attempting to disassociate from the file system. Use the API operation to monitor the status of the aliases Amazon FSx is disassociating with the file system.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisassociateFileSystemAliasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisassociateFileSystemAliasesResponse> disassociateFileSystemAliasesWithHttpInfo(String xAmzTarget, DisassociateFileSystemAliasesRequest disassociateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateFileSystemAliasesValidateBeforeCall(xAmzTarget, disassociateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisassociateFileSystemAliasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this action to disassociate, or remove, one or more Domain Name Service (DNS) aliases from an Amazon FSx for Windows File Server file system. If you attempt to disassociate a DNS alias that is not associated with the file system, Amazon FSx responds with a 400 Bad Request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html\&quot;&gt;Working with DNS Aliases&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The system generated response showing the DNS aliases that Amazon FSx is attempting to disassociate from the file system. Use the API operation to monitor the status of the aliases Amazon FSx is disassociating with the file system.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateFileSystemAliasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateFileSystemAliasesAsync(String xAmzTarget, DisassociateFileSystemAliasesRequest disassociateFileSystemAliasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisassociateFileSystemAliasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateFileSystemAliasesValidateBeforeCall(xAmzTarget, disassociateFileSystemAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisassociateFileSystemAliasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists tags for Amazon FSx resources.&lt;/p&gt; &lt;p&gt;When retrieving all tags, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of tags in a response. If more tags remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This action is used in an iterative process to retrieve a list of your tags. &lt;code&gt;ListTagsForResource&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the action continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this action, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; file system descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of tags returned in the response of one &lt;code&gt;ListTagsForResource&lt;/code&gt; call and the order of tags returned across the responses of a multi-call iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists tags for Amazon FSx resources.&lt;/p&gt; &lt;p&gt;When retrieving all tags, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of tags in a response. If more tags remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This action is used in an iterative process to retrieve a list of your tags. &lt;code&gt;ListTagsForResource&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the action continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this action, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; file system descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of tags returned in the response of one &lt;code&gt;ListTagsForResource&lt;/code&gt; call and the order of tags returned across the responses of a multi-call iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists tags for Amazon FSx resources.&lt;/p&gt; &lt;p&gt;When retrieving all tags, you can optionally specify the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of tags in a response. If more tags remain, Amazon FSx returns a &lt;code&gt;NextToken&lt;/code&gt; value in the response. In this case, send a later request with the &lt;code&gt;NextToken&lt;/code&gt; request parameter set to the value of &lt;code&gt;NextToken&lt;/code&gt; from the last response.&lt;/p&gt; &lt;p&gt;This action is used in an iterative process to retrieve a list of your tags. &lt;code&gt;ListTagsForResource&lt;/code&gt; is called first without a &lt;code&gt;NextToken&lt;/code&gt;value. Then the action continues to be called with the &lt;code&gt;NextToken&lt;/code&gt; parameter set to the value of the last &lt;code&gt;NextToken&lt;/code&gt; value until a response has no &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When using this action, keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The implementation might return fewer than &lt;code&gt;MaxResults&lt;/code&gt; file system descriptions while still including a &lt;code&gt;NextToken&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order of tags returned in the response of one &lt;code&gt;ListTagsForResource&lt;/code&gt; call and the order of tags returned across the responses of a multi-call iteration is unspecified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseFileSystemNfsV3Locks
     * @param xAmzTarget  (required)
     * @param releaseFileSystemNfsV3LocksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseFileSystemNfsV3LocksCall(String xAmzTarget, ReleaseFileSystemNfsV3LocksRequest releaseFileSystemNfsV3LocksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releaseFileSystemNfsV3LocksRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.ReleaseFileSystemNfsV3Locks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseFileSystemNfsV3LocksValidateBeforeCall(String xAmzTarget, ReleaseFileSystemNfsV3LocksRequest releaseFileSystemNfsV3LocksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling releaseFileSystemNfsV3Locks(Async)");
        }

        // verify the required parameter 'releaseFileSystemNfsV3LocksRequest' is set
        if (releaseFileSystemNfsV3LocksRequest == null) {
            throw new ApiException("Missing the required parameter 'releaseFileSystemNfsV3LocksRequest' when calling releaseFileSystemNfsV3Locks(Async)");
        }

        return releaseFileSystemNfsV3LocksCall(xAmzTarget, releaseFileSystemNfsV3LocksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Releases the file system lock from an Amazon FSx for OpenZFS file system.
     * @param xAmzTarget  (required)
     * @param releaseFileSystemNfsV3LocksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ReleaseFileSystemNfsV3LocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ReleaseFileSystemNfsV3LocksResponse releaseFileSystemNfsV3Locks(String xAmzTarget, ReleaseFileSystemNfsV3LocksRequest releaseFileSystemNfsV3LocksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ReleaseFileSystemNfsV3LocksResponse> localVarResp = releaseFileSystemNfsV3LocksWithHttpInfo(xAmzTarget, releaseFileSystemNfsV3LocksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Releases the file system lock from an Amazon FSx for OpenZFS file system.
     * @param xAmzTarget  (required)
     * @param releaseFileSystemNfsV3LocksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ReleaseFileSystemNfsV3LocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleaseFileSystemNfsV3LocksResponse> releaseFileSystemNfsV3LocksWithHttpInfo(String xAmzTarget, ReleaseFileSystemNfsV3LocksRequest releaseFileSystemNfsV3LocksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = releaseFileSystemNfsV3LocksValidateBeforeCall(xAmzTarget, releaseFileSystemNfsV3LocksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ReleaseFileSystemNfsV3LocksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Releases the file system lock from an Amazon FSx for OpenZFS file system.
     * @param xAmzTarget  (required)
     * @param releaseFileSystemNfsV3LocksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseFileSystemNfsV3LocksAsync(String xAmzTarget, ReleaseFileSystemNfsV3LocksRequest releaseFileSystemNfsV3LocksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ReleaseFileSystemNfsV3LocksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseFileSystemNfsV3LocksValidateBeforeCall(xAmzTarget, releaseFileSystemNfsV3LocksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ReleaseFileSystemNfsV3LocksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreVolumeFromSnapshot
     * @param xAmzTarget  (required)
     * @param restoreVolumeFromSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreVolumeFromSnapshotCall(String xAmzTarget, RestoreVolumeFromSnapshotRequest restoreVolumeFromSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreVolumeFromSnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.RestoreVolumeFromSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreVolumeFromSnapshotValidateBeforeCall(String xAmzTarget, RestoreVolumeFromSnapshotRequest restoreVolumeFromSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling restoreVolumeFromSnapshot(Async)");
        }

        // verify the required parameter 'restoreVolumeFromSnapshotRequest' is set
        if (restoreVolumeFromSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreVolumeFromSnapshotRequest' when calling restoreVolumeFromSnapshot(Async)");
        }

        return restoreVolumeFromSnapshotCall(xAmzTarget, restoreVolumeFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns an Amazon FSx for OpenZFS volume to the state saved by the specified snapshot.
     * @param xAmzTarget  (required)
     * @param restoreVolumeFromSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RestoreVolumeFromSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public RestoreVolumeFromSnapshotResponse restoreVolumeFromSnapshot(String xAmzTarget, RestoreVolumeFromSnapshotRequest restoreVolumeFromSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RestoreVolumeFromSnapshotResponse> localVarResp = restoreVolumeFromSnapshotWithHttpInfo(xAmzTarget, restoreVolumeFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an Amazon FSx for OpenZFS volume to the state saved by the specified snapshot.
     * @param xAmzTarget  (required)
     * @param restoreVolumeFromSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RestoreVolumeFromSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreVolumeFromSnapshotResponse> restoreVolumeFromSnapshotWithHttpInfo(String xAmzTarget, RestoreVolumeFromSnapshotRequest restoreVolumeFromSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = restoreVolumeFromSnapshotValidateBeforeCall(xAmzTarget, restoreVolumeFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RestoreVolumeFromSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an Amazon FSx for OpenZFS volume to the state saved by the specified snapshot.
     * @param xAmzTarget  (required)
     * @param restoreVolumeFromSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreVolumeFromSnapshotAsync(String xAmzTarget, RestoreVolumeFromSnapshotRequest restoreVolumeFromSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RestoreVolumeFromSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreVolumeFromSnapshotValidateBeforeCall(xAmzTarget, restoreVolumeFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RestoreVolumeFromSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Tags an Amazon FSx resource.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Tags an Amazon FSx resource.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tags an Amazon FSx resource.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This action removes a tag from an Amazon FSx resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This action removes a tag from an Amazon FSx resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This action removes a tag from an Amazon FSx resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotServiceResourceError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceDoesNotSupportTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDataRepositoryAssociation
     * @param xAmzTarget  (required)
     * @param updateDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDataRepositoryAssociationCall(String xAmzTarget, UpdateDataRepositoryAssociationRequest updateDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDataRepositoryAssociationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UpdateDataRepositoryAssociation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDataRepositoryAssociationValidateBeforeCall(String xAmzTarget, UpdateDataRepositoryAssociationRequest updateDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateDataRepositoryAssociation(Async)");
        }

        // verify the required parameter 'updateDataRepositoryAssociationRequest' is set
        if (updateDataRepositoryAssociationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDataRepositoryAssociationRequest' when calling updateDataRepositoryAssociation(Async)");
        }

        return updateDataRepositoryAssociationCall(xAmzTarget, updateDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the configuration of an existing data repository association on an Amazon FSx for Lustre file system. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.
     * @param xAmzTarget  (required)
     * @param updateDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateDataRepositoryAssociationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDataRepositoryAssociationResponse updateDataRepositoryAssociation(String xAmzTarget, UpdateDataRepositoryAssociationRequest updateDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateDataRepositoryAssociationResponse> localVarResp = updateDataRepositoryAssociationWithHttpInfo(xAmzTarget, updateDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the configuration of an existing data repository association on an Amazon FSx for Lustre file system. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.
     * @param xAmzTarget  (required)
     * @param updateDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateDataRepositoryAssociationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDataRepositoryAssociationResponse> updateDataRepositoryAssociationWithHttpInfo(String xAmzTarget, UpdateDataRepositoryAssociationRequest updateDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateDataRepositoryAssociationValidateBeforeCall(xAmzTarget, updateDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateDataRepositoryAssociationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the configuration of an existing data repository association on an Amazon FSx for Lustre file system. Data repository associations are supported on all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.
     * @param xAmzTarget  (required)
     * @param updateDataRepositoryAssociationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DataRepositoryAssociationNotFound </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDataRepositoryAssociationAsync(String xAmzTarget, UpdateDataRepositoryAssociationRequest updateDataRepositoryAssociationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateDataRepositoryAssociationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDataRepositoryAssociationValidateBeforeCall(xAmzTarget, updateDataRepositoryAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateDataRepositoryAssociationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFileCache
     * @param xAmzTarget  (required)
     * @param updateFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileCacheCall(String xAmzTarget, UpdateFileCacheRequest updateFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFileCacheRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UpdateFileCache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileCacheValidateBeforeCall(String xAmzTarget, UpdateFileCacheRequest updateFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateFileCache(Async)");
        }

        // verify the required parameter 'updateFileCacheRequest' is set
        if (updateFileCacheRequest == null) {
            throw new ApiException("Missing the required parameter 'updateFileCacheRequest' when calling updateFileCache(Async)");
        }

        return updateFileCacheCall(xAmzTarget, updateFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the configuration of an existing Amazon File Cache resource. You can update multiple properties in a single request.
     * @param xAmzTarget  (required)
     * @param updateFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateFileCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFileCacheResponse updateFileCache(String xAmzTarget, UpdateFileCacheRequest updateFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateFileCacheResponse> localVarResp = updateFileCacheWithHttpInfo(xAmzTarget, updateFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the configuration of an existing Amazon File Cache resource. You can update multiple properties in a single request.
     * @param xAmzTarget  (required)
     * @param updateFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateFileCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFileCacheResponse> updateFileCacheWithHttpInfo(String xAmzTarget, UpdateFileCacheRequest updateFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateFileCacheValidateBeforeCall(xAmzTarget, updateFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateFileCacheResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the configuration of an existing Amazon File Cache resource. You can update multiple properties in a single request.
     * @param xAmzTarget  (required)
     * @param updateFileCacheRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FileCacheNotFound </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MissingFileCacheConfiguration </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileCacheAsync(String xAmzTarget, UpdateFileCacheRequest updateFileCacheRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateFileCacheResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileCacheValidateBeforeCall(xAmzTarget, updateFileCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateFileCacheResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFileSystem
     * @param xAmzTarget  (required)
     * @param updateFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileSystemCall(String xAmzTarget, UpdateFileSystemRequest updateFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFileSystemRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UpdateFileSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileSystemValidateBeforeCall(String xAmzTarget, UpdateFileSystemRequest updateFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateFileSystem(Async)");
        }

        // verify the required parameter 'updateFileSystemRequest' is set
        if (updateFileSystemRequest == null) {
            throw new ApiException("Missing the required parameter 'updateFileSystemRequest' when calling updateFileSystem(Async)");
        }

        return updateFileSystemCall(xAmzTarget, updateFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this operation to update the configuration of an existing Amazon FSx file system. You can update multiple properties in a single request.&lt;/p&gt; &lt;p&gt;For FSx for Windows File Server file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AuditLogConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SelfManagedActiveDirectoryConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for Lustre file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutoImportPolicy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DataCompressionType&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LogConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LustreRootSquashConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for ONTAP file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddRouteTableIds&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DiskIopsConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FsxAdminPassword&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RemoveRouteTableIds&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for OpenZFS file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CopyTagsToBackups&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CopyTagsToVolumes&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DiskIopsConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateFileSystemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFileSystemResponse updateFileSystem(String xAmzTarget, UpdateFileSystemRequest updateFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateFileSystemResponse> localVarResp = updateFileSystemWithHttpInfo(xAmzTarget, updateFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this operation to update the configuration of an existing Amazon FSx file system. You can update multiple properties in a single request.&lt;/p&gt; &lt;p&gt;For FSx for Windows File Server file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AuditLogConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SelfManagedActiveDirectoryConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for Lustre file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutoImportPolicy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DataCompressionType&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LogConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LustreRootSquashConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for ONTAP file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddRouteTableIds&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DiskIopsConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FsxAdminPassword&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RemoveRouteTableIds&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for OpenZFS file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CopyTagsToBackups&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CopyTagsToVolumes&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DiskIopsConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateFileSystemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFileSystemResponse> updateFileSystemWithHttpInfo(String xAmzTarget, UpdateFileSystemRequest updateFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateFileSystemValidateBeforeCall(xAmzTarget, updateFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateFileSystemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this operation to update the configuration of an existing Amazon FSx file system. You can update multiple properties in a single request.&lt;/p&gt; &lt;p&gt;For FSx for Windows File Server file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AuditLogConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SelfManagedActiveDirectoryConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for Lustre file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutoImportPolicy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DataCompressionType&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LogConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LustreRootSquashConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for ONTAP file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddRouteTableIds&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DiskIopsConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FsxAdminPassword&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RemoveRouteTableIds&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For FSx for OpenZFS file systems, you can update the following properties:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutomaticBackupRetentionDays&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CopyTagsToBackups&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CopyTagsToVolumes&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DailyAutomaticBackupStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DiskIopsConfiguration&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StorageCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ThroughputCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WeeklyMaintenanceStartTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param updateFileSystemRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNetworkSettings </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FileSystemNotFound </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MissingFileSystemConfiguration </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileSystemAsync(String xAmzTarget, UpdateFileSystemRequest updateFileSystemRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateFileSystemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileSystemValidateBeforeCall(xAmzTarget, updateFileSystemRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateFileSystemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSnapshot
     * @param xAmzTarget  (required)
     * @param updateSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSnapshotCall(String xAmzTarget, UpdateSnapshotRequest updateSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UpdateSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSnapshotValidateBeforeCall(String xAmzTarget, UpdateSnapshotRequest updateSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateSnapshot(Async)");
        }

        // verify the required parameter 'updateSnapshotRequest' is set
        if (updateSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSnapshotRequest' when calling updateSnapshot(Async)");
        }

        return updateSnapshotCall(xAmzTarget, updateSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the name of an Amazon FSx for OpenZFS snapshot.
     * @param xAmzTarget  (required)
     * @param updateSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSnapshotResponse updateSnapshot(String xAmzTarget, UpdateSnapshotRequest updateSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSnapshotResponse> localVarResp = updateSnapshotWithHttpInfo(xAmzTarget, updateSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name of an Amazon FSx for OpenZFS snapshot.
     * @param xAmzTarget  (required)
     * @param updateSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSnapshotResponse> updateSnapshotWithHttpInfo(String xAmzTarget, UpdateSnapshotRequest updateSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSnapshotValidateBeforeCall(xAmzTarget, updateSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name of an Amazon FSx for OpenZFS snapshot.
     * @param xAmzTarget  (required)
     * @param updateSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSnapshotAsync(String xAmzTarget, UpdateSnapshotRequest updateSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSnapshotValidateBeforeCall(xAmzTarget, updateSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStorageVirtualMachine
     * @param xAmzTarget  (required)
     * @param updateStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStorageVirtualMachineCall(String xAmzTarget, UpdateStorageVirtualMachineRequest updateStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStorageVirtualMachineRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UpdateStorageVirtualMachine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStorageVirtualMachineValidateBeforeCall(String xAmzTarget, UpdateStorageVirtualMachineRequest updateStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateStorageVirtualMachine(Async)");
        }

        // verify the required parameter 'updateStorageVirtualMachineRequest' is set
        if (updateStorageVirtualMachineRequest == null) {
            throw new ApiException("Missing the required parameter 'updateStorageVirtualMachineRequest' when calling updateStorageVirtualMachine(Async)");
        }

        return updateStorageVirtualMachineCall(xAmzTarget, updateStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates an FSx for ONTAP storage virtual machine (SVM).
     * @param xAmzTarget  (required)
     * @param updateStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateStorageVirtualMachineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStorageVirtualMachineResponse updateStorageVirtualMachine(String xAmzTarget, UpdateStorageVirtualMachineRequest updateStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateStorageVirtualMachineResponse> localVarResp = updateStorageVirtualMachineWithHttpInfo(xAmzTarget, updateStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an FSx for ONTAP storage virtual machine (SVM).
     * @param xAmzTarget  (required)
     * @param updateStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateStorageVirtualMachineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStorageVirtualMachineResponse> updateStorageVirtualMachineWithHttpInfo(String xAmzTarget, UpdateStorageVirtualMachineRequest updateStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateStorageVirtualMachineValidateBeforeCall(xAmzTarget, updateStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateStorageVirtualMachineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an FSx for ONTAP storage virtual machine (SVM).
     * @param xAmzTarget  (required)
     * @param updateStorageVirtualMachineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageVirtualMachineNotFound </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStorageVirtualMachineAsync(String xAmzTarget, UpdateStorageVirtualMachineRequest updateStorageVirtualMachineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateStorageVirtualMachineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStorageVirtualMachineValidateBeforeCall(xAmzTarget, updateStorageVirtualMachineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateStorageVirtualMachineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVolume
     * @param xAmzTarget  (required)
     * @param updateVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVolumeCall(String xAmzTarget, UpdateVolumeRequest updateVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVolumeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSSimbaAPIService_v20180301.UpdateVolume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVolumeValidateBeforeCall(String xAmzTarget, UpdateVolumeRequest updateVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateVolume(Async)");
        }

        // verify the required parameter 'updateVolumeRequest' is set
        if (updateVolumeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVolumeRequest' when calling updateVolume(Async)");
        }

        return updateVolumeCall(xAmzTarget, updateVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the configuration of an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
     * @param xAmzTarget  (required)
     * @param updateVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateVolumeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVolumeResponse updateVolume(String xAmzTarget, UpdateVolumeRequest updateVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateVolumeResponse> localVarResp = updateVolumeWithHttpInfo(xAmzTarget, updateVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the configuration of an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
     * @param xAmzTarget  (required)
     * @param updateVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateVolumeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateVolumeResponse> updateVolumeWithHttpInfo(String xAmzTarget, UpdateVolumeRequest updateVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateVolumeValidateBeforeCall(xAmzTarget, updateVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateVolumeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the configuration of an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume.
     * @param xAmzTarget  (required)
     * @param updateVolumeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleParameterError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingVolumeConfiguration </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VolumeNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVolumeAsync(String xAmzTarget, UpdateVolumeRequest updateVolumeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateVolumeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVolumeValidateBeforeCall(xAmzTarget, updateVolumeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateVolumeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
