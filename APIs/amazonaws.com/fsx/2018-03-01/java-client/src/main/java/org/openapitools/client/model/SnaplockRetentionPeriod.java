/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SnaplockRetentionPeriodDefaultRetention;
import org.openapitools.client.model.SnaplockRetentionPeriodMaximumRetention;
import org.openapitools.client.model.SnaplockRetentionPeriodMinimumRetention;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration to set the retention period of an FSx for ONTAP SnapLock volume. The retention period includes default, maximum, and minimum settings. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-retention.html\&quot;&gt;Working with the retention period in SnapLock&lt;/a&gt;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnaplockRetentionPeriod {
  public static final String SERIALIZED_NAME_DEFAULT_RETENTION = "DefaultRetention";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RETENTION)
  private SnaplockRetentionPeriodDefaultRetention defaultRetention;

  public static final String SERIALIZED_NAME_MINIMUM_RETENTION = "MinimumRetention";
  @SerializedName(SERIALIZED_NAME_MINIMUM_RETENTION)
  private SnaplockRetentionPeriodMinimumRetention minimumRetention;

  public static final String SERIALIZED_NAME_MAXIMUM_RETENTION = "MaximumRetention";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RETENTION)
  private SnaplockRetentionPeriodMaximumRetention maximumRetention;

  public SnaplockRetentionPeriod() {
  }

  public SnaplockRetentionPeriod defaultRetention(SnaplockRetentionPeriodDefaultRetention defaultRetention) {
    this.defaultRetention = defaultRetention;
    return this;
  }

  /**
   * Get defaultRetention
   * @return defaultRetention
   */
  @javax.annotation.Nonnull
  public SnaplockRetentionPeriodDefaultRetention getDefaultRetention() {
    return defaultRetention;
  }

  public void setDefaultRetention(SnaplockRetentionPeriodDefaultRetention defaultRetention) {
    this.defaultRetention = defaultRetention;
  }


  public SnaplockRetentionPeriod minimumRetention(SnaplockRetentionPeriodMinimumRetention minimumRetention) {
    this.minimumRetention = minimumRetention;
    return this;
  }

  /**
   * Get minimumRetention
   * @return minimumRetention
   */
  @javax.annotation.Nonnull
  public SnaplockRetentionPeriodMinimumRetention getMinimumRetention() {
    return minimumRetention;
  }

  public void setMinimumRetention(SnaplockRetentionPeriodMinimumRetention minimumRetention) {
    this.minimumRetention = minimumRetention;
  }


  public SnaplockRetentionPeriod maximumRetention(SnaplockRetentionPeriodMaximumRetention maximumRetention) {
    this.maximumRetention = maximumRetention;
    return this;
  }

  /**
   * Get maximumRetention
   * @return maximumRetention
   */
  @javax.annotation.Nonnull
  public SnaplockRetentionPeriodMaximumRetention getMaximumRetention() {
    return maximumRetention;
  }

  public void setMaximumRetention(SnaplockRetentionPeriodMaximumRetention maximumRetention) {
    this.maximumRetention = maximumRetention;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnaplockRetentionPeriod snaplockRetentionPeriod = (SnaplockRetentionPeriod) o;
    return Objects.equals(this.defaultRetention, snaplockRetentionPeriod.defaultRetention) &&
        Objects.equals(this.minimumRetention, snaplockRetentionPeriod.minimumRetention) &&
        Objects.equals(this.maximumRetention, snaplockRetentionPeriod.maximumRetention);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultRetention, minimumRetention, maximumRetention);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnaplockRetentionPeriod {\n");
    sb.append("    defaultRetention: ").append(toIndentedString(defaultRetention)).append("\n");
    sb.append("    minimumRetention: ").append(toIndentedString(minimumRetention)).append("\n");
    sb.append("    maximumRetention: ").append(toIndentedString(maximumRetention)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultRetention");
    openapiFields.add("MinimumRetention");
    openapiFields.add("MaximumRetention");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DefaultRetention");
    openapiRequiredFields.add("MinimumRetention");
    openapiRequiredFields.add("MaximumRetention");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnaplockRetentionPeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnaplockRetentionPeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnaplockRetentionPeriod is not found in the empty JSON string", SnaplockRetentionPeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnaplockRetentionPeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnaplockRetentionPeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SnaplockRetentionPeriod.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DefaultRetention`
      SnaplockRetentionPeriodDefaultRetention.validateJsonElement(jsonObj.get("DefaultRetention"));
      // validate the required field `MinimumRetention`
      SnaplockRetentionPeriodMinimumRetention.validateJsonElement(jsonObj.get("MinimumRetention"));
      // validate the required field `MaximumRetention`
      SnaplockRetentionPeriodMaximumRetention.validateJsonElement(jsonObj.get("MaximumRetention"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnaplockRetentionPeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnaplockRetentionPeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnaplockRetentionPeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnaplockRetentionPeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<SnaplockRetentionPeriod>() {
           @Override
           public void write(JsonWriter out, SnaplockRetentionPeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnaplockRetentionPeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnaplockRetentionPeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnaplockRetentionPeriod
   * @throws IOException if the JSON string is invalid with respect to SnaplockRetentionPeriod
   */
  public static SnaplockRetentionPeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnaplockRetentionPeriod.class);
  }

  /**
   * Convert an instance of SnaplockRetentionPeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

