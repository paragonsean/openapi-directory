/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateFileCacheLustreConfigurationMetadataConfiguration;
import org.openapitools.client.model.FileCacheLustreConfigurationLogConfiguration;
import org.openapitools.client.model.FileCacheLustreDeploymentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the Amazon File Cache resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileCacheLustreConfiguration {
  public static final String SERIALIZED_NAME_PER_UNIT_STORAGE_THROUGHPUT = "PerUnitStorageThroughput";
  @SerializedName(SERIALIZED_NAME_PER_UNIT_STORAGE_THROUGHPUT)
  private Integer perUnitStorageThroughput;

  public static final String SERIALIZED_NAME_DEPLOYMENT_TYPE = "DeploymentType";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TYPE)
  private FileCacheLustreDeploymentType deploymentType;

  public static final String SERIALIZED_NAME_MOUNT_NAME = "MountName";
  @SerializedName(SERIALIZED_NAME_MOUNT_NAME)
  private String mountName;

  public static final String SERIALIZED_NAME_WEEKLY_MAINTENANCE_START_TIME = "WeeklyMaintenanceStartTime";
  @SerializedName(SERIALIZED_NAME_WEEKLY_MAINTENANCE_START_TIME)
  private String weeklyMaintenanceStartTime;

  public static final String SERIALIZED_NAME_METADATA_CONFIGURATION = "MetadataConfiguration";
  @SerializedName(SERIALIZED_NAME_METADATA_CONFIGURATION)
  private CreateFileCacheLustreConfigurationMetadataConfiguration metadataConfiguration;

  public static final String SERIALIZED_NAME_LOG_CONFIGURATION = "LogConfiguration";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGURATION)
  private FileCacheLustreConfigurationLogConfiguration logConfiguration;

  public FileCacheLustreConfiguration() {
  }

  public FileCacheLustreConfiguration perUnitStorageThroughput(Integer perUnitStorageThroughput) {
    this.perUnitStorageThroughput = perUnitStorageThroughput;
    return this;
  }

  /**
   * Get perUnitStorageThroughput
   * @return perUnitStorageThroughput
   */
  @javax.annotation.Nullable
  public Integer getPerUnitStorageThroughput() {
    return perUnitStorageThroughput;
  }

  public void setPerUnitStorageThroughput(Integer perUnitStorageThroughput) {
    this.perUnitStorageThroughput = perUnitStorageThroughput;
  }


  public FileCacheLustreConfiguration deploymentType(FileCacheLustreDeploymentType deploymentType) {
    this.deploymentType = deploymentType;
    return this;
  }

  /**
   * Get deploymentType
   * @return deploymentType
   */
  @javax.annotation.Nullable
  public FileCacheLustreDeploymentType getDeploymentType() {
    return deploymentType;
  }

  public void setDeploymentType(FileCacheLustreDeploymentType deploymentType) {
    this.deploymentType = deploymentType;
  }


  public FileCacheLustreConfiguration mountName(String mountName) {
    this.mountName = mountName;
    return this;
  }

  /**
   * Get mountName
   * @return mountName
   */
  @javax.annotation.Nullable
  public String getMountName() {
    return mountName;
  }

  public void setMountName(String mountName) {
    this.mountName = mountName;
  }


  public FileCacheLustreConfiguration weeklyMaintenanceStartTime(String weeklyMaintenanceStartTime) {
    this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    return this;
  }

  /**
   * &lt;p&gt;A recurring weekly time, in the format &lt;code&gt;D:HH:MM&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;code&gt;D&lt;/code&gt; is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_week_date\&quot;&gt;the ISO-8601 spec as described on Wikipedia&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;HH&lt;/code&gt; is the zero-padded hour of the day (0-23), and &lt;code&gt;MM&lt;/code&gt; is the zero-padded minute of the hour. &lt;/p&gt; &lt;p&gt;For example, &lt;code&gt;1:05:00&lt;/code&gt; specifies maintenance at 5 AM Monday.&lt;/p&gt;
   * @return weeklyMaintenanceStartTime
   */
  @javax.annotation.Nullable
  public String getWeeklyMaintenanceStartTime() {
    return weeklyMaintenanceStartTime;
  }

  public void setWeeklyMaintenanceStartTime(String weeklyMaintenanceStartTime) {
    this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
  }


  public FileCacheLustreConfiguration metadataConfiguration(CreateFileCacheLustreConfigurationMetadataConfiguration metadataConfiguration) {
    this.metadataConfiguration = metadataConfiguration;
    return this;
  }

  /**
   * Get metadataConfiguration
   * @return metadataConfiguration
   */
  @javax.annotation.Nullable
  public CreateFileCacheLustreConfigurationMetadataConfiguration getMetadataConfiguration() {
    return metadataConfiguration;
  }

  public void setMetadataConfiguration(CreateFileCacheLustreConfigurationMetadataConfiguration metadataConfiguration) {
    this.metadataConfiguration = metadataConfiguration;
  }


  public FileCacheLustreConfiguration logConfiguration(FileCacheLustreConfigurationLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
    return this;
  }

  /**
   * Get logConfiguration
   * @return logConfiguration
   */
  @javax.annotation.Nullable
  public FileCacheLustreConfigurationLogConfiguration getLogConfiguration() {
    return logConfiguration;
  }

  public void setLogConfiguration(FileCacheLustreConfigurationLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileCacheLustreConfiguration fileCacheLustreConfiguration = (FileCacheLustreConfiguration) o;
    return Objects.equals(this.perUnitStorageThroughput, fileCacheLustreConfiguration.perUnitStorageThroughput) &&
        Objects.equals(this.deploymentType, fileCacheLustreConfiguration.deploymentType) &&
        Objects.equals(this.mountName, fileCacheLustreConfiguration.mountName) &&
        Objects.equals(this.weeklyMaintenanceStartTime, fileCacheLustreConfiguration.weeklyMaintenanceStartTime) &&
        Objects.equals(this.metadataConfiguration, fileCacheLustreConfiguration.metadataConfiguration) &&
        Objects.equals(this.logConfiguration, fileCacheLustreConfiguration.logConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(perUnitStorageThroughput, deploymentType, mountName, weeklyMaintenanceStartTime, metadataConfiguration, logConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileCacheLustreConfiguration {\n");
    sb.append("    perUnitStorageThroughput: ").append(toIndentedString(perUnitStorageThroughput)).append("\n");
    sb.append("    deploymentType: ").append(toIndentedString(deploymentType)).append("\n");
    sb.append("    mountName: ").append(toIndentedString(mountName)).append("\n");
    sb.append("    weeklyMaintenanceStartTime: ").append(toIndentedString(weeklyMaintenanceStartTime)).append("\n");
    sb.append("    metadataConfiguration: ").append(toIndentedString(metadataConfiguration)).append("\n");
    sb.append("    logConfiguration: ").append(toIndentedString(logConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PerUnitStorageThroughput");
    openapiFields.add("DeploymentType");
    openapiFields.add("MountName");
    openapiFields.add("WeeklyMaintenanceStartTime");
    openapiFields.add("MetadataConfiguration");
    openapiFields.add("LogConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileCacheLustreConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileCacheLustreConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileCacheLustreConfiguration is not found in the empty JSON string", FileCacheLustreConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileCacheLustreConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileCacheLustreConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PerUnitStorageThroughput`
      if (jsonObj.get("PerUnitStorageThroughput") != null && !jsonObj.get("PerUnitStorageThroughput").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PerUnitStorageThroughput"));
      }
      // validate the optional field `DeploymentType`
      if (jsonObj.get("DeploymentType") != null && !jsonObj.get("DeploymentType").isJsonNull()) {
        FileCacheLustreDeploymentType.validateJsonElement(jsonObj.get("DeploymentType"));
      }
      // validate the optional field `MountName`
      if (jsonObj.get("MountName") != null && !jsonObj.get("MountName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MountName"));
      }
      if ((jsonObj.get("WeeklyMaintenanceStartTime") != null && !jsonObj.get("WeeklyMaintenanceStartTime").isJsonNull()) && !jsonObj.get("WeeklyMaintenanceStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WeeklyMaintenanceStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WeeklyMaintenanceStartTime").toString()));
      }
      // validate the optional field `MetadataConfiguration`
      if (jsonObj.get("MetadataConfiguration") != null && !jsonObj.get("MetadataConfiguration").isJsonNull()) {
        CreateFileCacheLustreConfigurationMetadataConfiguration.validateJsonElement(jsonObj.get("MetadataConfiguration"));
      }
      // validate the optional field `LogConfiguration`
      if (jsonObj.get("LogConfiguration") != null && !jsonObj.get("LogConfiguration").isJsonNull()) {
        FileCacheLustreConfigurationLogConfiguration.validateJsonElement(jsonObj.get("LogConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileCacheLustreConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileCacheLustreConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileCacheLustreConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileCacheLustreConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<FileCacheLustreConfiguration>() {
           @Override
           public void write(JsonWriter out, FileCacheLustreConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileCacheLustreConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileCacheLustreConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileCacheLustreConfiguration
   * @throws IOException if the JSON string is invalid with respect to FileCacheLustreConfiguration
   */
  public static FileCacheLustreConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileCacheLustreConfiguration.class);
  }

  /**
   * Convert an instance of FileCacheLustreConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

