/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileCacheDataRepositoryAssociationNFS;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The configuration for a data repository association (DRA) to be created during the Amazon File Cache resource creation. The DRA links the cache to either an Amazon S3 bucket or prefix, or a Network File System (NFS) data repository that supports the NFSv3 protocol.&lt;/p&gt; &lt;p&gt;The DRA does not support automatic import or automatic export.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileCacheDataRepositoryAssociation {
  public static final String SERIALIZED_NAME_FILE_CACHE_PATH = "FileCachePath";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_PATH)
  private String fileCachePath;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_PATH = "DataRepositoryPath";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_PATH)
  private String dataRepositoryPath;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_SUBDIRECTORIES = "DataRepositorySubdirectories";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_SUBDIRECTORIES)
  private List dataRepositorySubdirectories;

  public static final String SERIALIZED_NAME_N_F_S = "NFS";
  @SerializedName(SERIALIZED_NAME_N_F_S)
  private FileCacheDataRepositoryAssociationNFS NFS;

  public FileCacheDataRepositoryAssociation() {
  }

  public FileCacheDataRepositoryAssociation fileCachePath(String fileCachePath) {
    this.fileCachePath = fileCachePath;
    return this;
  }

  /**
   * Get fileCachePath
   * @return fileCachePath
   */
  @javax.annotation.Nonnull
  public String getFileCachePath() {
    return fileCachePath;
  }

  public void setFileCachePath(String fileCachePath) {
    this.fileCachePath = fileCachePath;
  }


  public FileCacheDataRepositoryAssociation dataRepositoryPath(String dataRepositoryPath) {
    this.dataRepositoryPath = dataRepositoryPath;
    return this;
  }

  /**
   * Get dataRepositoryPath
   * @return dataRepositoryPath
   */
  @javax.annotation.Nonnull
  public String getDataRepositoryPath() {
    return dataRepositoryPath;
  }

  public void setDataRepositoryPath(String dataRepositoryPath) {
    this.dataRepositoryPath = dataRepositoryPath;
  }


  public FileCacheDataRepositoryAssociation dataRepositorySubdirectories(List dataRepositorySubdirectories) {
    this.dataRepositorySubdirectories = dataRepositorySubdirectories;
    return this;
  }

  /**
   * Get dataRepositorySubdirectories
   * @return dataRepositorySubdirectories
   */
  @javax.annotation.Nullable
  public List getDataRepositorySubdirectories() {
    return dataRepositorySubdirectories;
  }

  public void setDataRepositorySubdirectories(List dataRepositorySubdirectories) {
    this.dataRepositorySubdirectories = dataRepositorySubdirectories;
  }


  public FileCacheDataRepositoryAssociation NFS(FileCacheDataRepositoryAssociationNFS NFS) {
    this.NFS = NFS;
    return this;
  }

  /**
   * Get NFS
   * @return NFS
   */
  @javax.annotation.Nullable
  public FileCacheDataRepositoryAssociationNFS getNFS() {
    return NFS;
  }

  public void setNFS(FileCacheDataRepositoryAssociationNFS NFS) {
    this.NFS = NFS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileCacheDataRepositoryAssociation fileCacheDataRepositoryAssociation = (FileCacheDataRepositoryAssociation) o;
    return Objects.equals(this.fileCachePath, fileCacheDataRepositoryAssociation.fileCachePath) &&
        Objects.equals(this.dataRepositoryPath, fileCacheDataRepositoryAssociation.dataRepositoryPath) &&
        Objects.equals(this.dataRepositorySubdirectories, fileCacheDataRepositoryAssociation.dataRepositorySubdirectories) &&
        Objects.equals(this.NFS, fileCacheDataRepositoryAssociation.NFS);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileCachePath, dataRepositoryPath, dataRepositorySubdirectories, NFS);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileCacheDataRepositoryAssociation {\n");
    sb.append("    fileCachePath: ").append(toIndentedString(fileCachePath)).append("\n");
    sb.append("    dataRepositoryPath: ").append(toIndentedString(dataRepositoryPath)).append("\n");
    sb.append("    dataRepositorySubdirectories: ").append(toIndentedString(dataRepositorySubdirectories)).append("\n");
    sb.append("    NFS: ").append(toIndentedString(NFS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FileCachePath");
    openapiFields.add("DataRepositoryPath");
    openapiFields.add("DataRepositorySubdirectories");
    openapiFields.add("NFS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FileCachePath");
    openapiRequiredFields.add("DataRepositoryPath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileCacheDataRepositoryAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileCacheDataRepositoryAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileCacheDataRepositoryAssociation is not found in the empty JSON string", FileCacheDataRepositoryAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileCacheDataRepositoryAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileCacheDataRepositoryAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileCacheDataRepositoryAssociation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `FileCachePath`
      String.validateJsonElement(jsonObj.get("FileCachePath"));
      // validate the required field `DataRepositoryPath`
      String.validateJsonElement(jsonObj.get("DataRepositoryPath"));
      // validate the optional field `DataRepositorySubdirectories`
      if (jsonObj.get("DataRepositorySubdirectories") != null && !jsonObj.get("DataRepositorySubdirectories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataRepositorySubdirectories"));
      }
      // validate the optional field `NFS`
      if (jsonObj.get("NFS") != null && !jsonObj.get("NFS").isJsonNull()) {
        FileCacheDataRepositoryAssociationNFS.validateJsonElement(jsonObj.get("NFS"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileCacheDataRepositoryAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileCacheDataRepositoryAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileCacheDataRepositoryAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileCacheDataRepositoryAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<FileCacheDataRepositoryAssociation>() {
           @Override
           public void write(JsonWriter out, FileCacheDataRepositoryAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileCacheDataRepositoryAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileCacheDataRepositoryAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileCacheDataRepositoryAssociation
   * @throws IOException if the JSON string is invalid with respect to FileCacheDataRepositoryAssociation
   */
  public static FileCacheDataRepositoryAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileCacheDataRepositoryAssociation.class);
  }

  /**
   * Convert an instance of FileCacheDataRepositoryAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

