/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SelfManagedActiveDirectoryAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the Microsoft Active Directory (AD) directory configuration to which the FSx for ONTAP storage virtual machine (SVM) is joined. Note that account credentials are not returned in the response payload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SvmActiveDirectoryConfiguration {
  public static final String SERIALIZED_NAME_NET_BIOS_NAME = "NetBiosName";
  @SerializedName(SERIALIZED_NAME_NET_BIOS_NAME)
  private String netBiosName;

  public static final String SERIALIZED_NAME_SELF_MANAGED_ACTIVE_DIRECTORY_CONFIGURATION = "SelfManagedActiveDirectoryConfiguration";
  @SerializedName(SERIALIZED_NAME_SELF_MANAGED_ACTIVE_DIRECTORY_CONFIGURATION)
  private SelfManagedActiveDirectoryAttributes selfManagedActiveDirectoryConfiguration;

  public SvmActiveDirectoryConfiguration() {
  }

  public SvmActiveDirectoryConfiguration netBiosName(String netBiosName) {
    this.netBiosName = netBiosName;
    return this;
  }

  /**
   * Get netBiosName
   * @return netBiosName
   */
  @javax.annotation.Nullable
  public String getNetBiosName() {
    return netBiosName;
  }

  public void setNetBiosName(String netBiosName) {
    this.netBiosName = netBiosName;
  }


  public SvmActiveDirectoryConfiguration selfManagedActiveDirectoryConfiguration(SelfManagedActiveDirectoryAttributes selfManagedActiveDirectoryConfiguration) {
    this.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration;
    return this;
  }

  /**
   * Get selfManagedActiveDirectoryConfiguration
   * @return selfManagedActiveDirectoryConfiguration
   */
  @javax.annotation.Nullable
  public SelfManagedActiveDirectoryAttributes getSelfManagedActiveDirectoryConfiguration() {
    return selfManagedActiveDirectoryConfiguration;
  }

  public void setSelfManagedActiveDirectoryConfiguration(SelfManagedActiveDirectoryAttributes selfManagedActiveDirectoryConfiguration) {
    this.selfManagedActiveDirectoryConfiguration = selfManagedActiveDirectoryConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SvmActiveDirectoryConfiguration svmActiveDirectoryConfiguration = (SvmActiveDirectoryConfiguration) o;
    return Objects.equals(this.netBiosName, svmActiveDirectoryConfiguration.netBiosName) &&
        Objects.equals(this.selfManagedActiveDirectoryConfiguration, svmActiveDirectoryConfiguration.selfManagedActiveDirectoryConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(netBiosName, selfManagedActiveDirectoryConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SvmActiveDirectoryConfiguration {\n");
    sb.append("    netBiosName: ").append(toIndentedString(netBiosName)).append("\n");
    sb.append("    selfManagedActiveDirectoryConfiguration: ").append(toIndentedString(selfManagedActiveDirectoryConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NetBiosName");
    openapiFields.add("SelfManagedActiveDirectoryConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SvmActiveDirectoryConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SvmActiveDirectoryConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SvmActiveDirectoryConfiguration is not found in the empty JSON string", SvmActiveDirectoryConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SvmActiveDirectoryConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SvmActiveDirectoryConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NetBiosName`
      if (jsonObj.get("NetBiosName") != null && !jsonObj.get("NetBiosName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetBiosName"));
      }
      // validate the optional field `SelfManagedActiveDirectoryConfiguration`
      if (jsonObj.get("SelfManagedActiveDirectoryConfiguration") != null && !jsonObj.get("SelfManagedActiveDirectoryConfiguration").isJsonNull()) {
        SelfManagedActiveDirectoryAttributes.validateJsonElement(jsonObj.get("SelfManagedActiveDirectoryConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SvmActiveDirectoryConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SvmActiveDirectoryConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SvmActiveDirectoryConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SvmActiveDirectoryConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SvmActiveDirectoryConfiguration>() {
           @Override
           public void write(JsonWriter out, SvmActiveDirectoryConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SvmActiveDirectoryConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SvmActiveDirectoryConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SvmActiveDirectoryConfiguration
   * @throws IOException if the JSON string is invalid with respect to SvmActiveDirectoryConfiguration
   */
  public static SvmActiveDirectoryConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SvmActiveDirectoryConfiguration.class);
  }

  /**
   * Convert an instance of SvmActiveDirectoryConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

