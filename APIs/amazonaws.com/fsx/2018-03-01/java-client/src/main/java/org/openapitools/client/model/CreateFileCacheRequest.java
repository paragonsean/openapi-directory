/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateFileCacheRequestLustreConfiguration;
import org.openapitools.client.model.FileCacheType;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFileCacheRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFileCacheRequest {
  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_FILE_CACHE_TYPE = "FileCacheType";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_TYPE)
  private FileCacheType fileCacheType;

  public static final String SERIALIZED_NAME_FILE_CACHE_TYPE_VERSION = "FileCacheTypeVersion";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_TYPE_VERSION)
  private String fileCacheTypeVersion;

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY = "StorageCapacity";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY)
  private Integer storageCapacity;

  public static final String SERIALIZED_NAME_SUBNET_IDS = "SubnetIds";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
  private List<String> subnetIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
  private List securityGroupIds;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_DATA_REPOSITORY_ASSOCIATIONS = "CopyTagsToDataRepositoryAssociations";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_DATA_REPOSITORY_ASSOCIATIONS)
  private Boolean copyTagsToDataRepositoryAssociations;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_LUSTRE_CONFIGURATION = "LustreConfiguration";
  @SerializedName(SERIALIZED_NAME_LUSTRE_CONFIGURATION)
  private CreateFileCacheRequestLustreConfiguration lustreConfiguration;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_ASSOCIATIONS = "DataRepositoryAssociations";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_ASSOCIATIONS)
  private List dataRepositoryAssociations;

  public CreateFileCacheRequest() {
  }

  public CreateFileCacheRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateFileCacheRequest fileCacheType(FileCacheType fileCacheType) {
    this.fileCacheType = fileCacheType;
    return this;
  }

  /**
   * Get fileCacheType
   * @return fileCacheType
   */
  @javax.annotation.Nonnull
  public FileCacheType getFileCacheType() {
    return fileCacheType;
  }

  public void setFileCacheType(FileCacheType fileCacheType) {
    this.fileCacheType = fileCacheType;
  }


  public CreateFileCacheRequest fileCacheTypeVersion(String fileCacheTypeVersion) {
    this.fileCacheTypeVersion = fileCacheTypeVersion;
    return this;
  }

  /**
   * Get fileCacheTypeVersion
   * @return fileCacheTypeVersion
   */
  @javax.annotation.Nonnull
  public String getFileCacheTypeVersion() {
    return fileCacheTypeVersion;
  }

  public void setFileCacheTypeVersion(String fileCacheTypeVersion) {
    this.fileCacheTypeVersion = fileCacheTypeVersion;
  }


  public CreateFileCacheRequest storageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
    return this;
  }

  /**
   * Get storageCapacity
   * @return storageCapacity
   */
  @javax.annotation.Nonnull
  public Integer getStorageCapacity() {
    return storageCapacity;
  }

  public void setStorageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
  }


  public CreateFileCacheRequest subnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public CreateFileCacheRequest addSubnetIdsItem(String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new ArrayList<>();
    }
    this.subnetIds.add(subnetIdsItem);
    return this;
  }

  /**
   * A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the &lt;code&gt;CreateFileCache&lt;/code&gt; operation.
   * @return subnetIds
   */
  @javax.annotation.Nonnull
  public List<String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
  }


  public CreateFileCacheRequest securityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
    return this;
  }

  /**
   * Get securityGroupIds
   * @return securityGroupIds
   */
  @javax.annotation.Nullable
  public List getSecurityGroupIds() {
    return securityGroupIds;
  }

  public void setSecurityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
  }


  public CreateFileCacheRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateFileCacheRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateFileCacheRequest copyTagsToDataRepositoryAssociations(Boolean copyTagsToDataRepositoryAssociations) {
    this.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations;
    return this;
  }

  /**
   * Get copyTagsToDataRepositoryAssociations
   * @return copyTagsToDataRepositoryAssociations
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToDataRepositoryAssociations() {
    return copyTagsToDataRepositoryAssociations;
  }

  public void setCopyTagsToDataRepositoryAssociations(Boolean copyTagsToDataRepositoryAssociations) {
    this.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations;
  }


  public CreateFileCacheRequest kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateFileCacheRequest lustreConfiguration(CreateFileCacheRequestLustreConfiguration lustreConfiguration) {
    this.lustreConfiguration = lustreConfiguration;
    return this;
  }

  /**
   * Get lustreConfiguration
   * @return lustreConfiguration
   */
  @javax.annotation.Nullable
  public CreateFileCacheRequestLustreConfiguration getLustreConfiguration() {
    return lustreConfiguration;
  }

  public void setLustreConfiguration(CreateFileCacheRequestLustreConfiguration lustreConfiguration) {
    this.lustreConfiguration = lustreConfiguration;
  }


  public CreateFileCacheRequest dataRepositoryAssociations(List dataRepositoryAssociations) {
    this.dataRepositoryAssociations = dataRepositoryAssociations;
    return this;
  }

  /**
   * Get dataRepositoryAssociations
   * @return dataRepositoryAssociations
   */
  @javax.annotation.Nullable
  public List getDataRepositoryAssociations() {
    return dataRepositoryAssociations;
  }

  public void setDataRepositoryAssociations(List dataRepositoryAssociations) {
    this.dataRepositoryAssociations = dataRepositoryAssociations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFileCacheRequest createFileCacheRequest = (CreateFileCacheRequest) o;
    return Objects.equals(this.clientRequestToken, createFileCacheRequest.clientRequestToken) &&
        Objects.equals(this.fileCacheType, createFileCacheRequest.fileCacheType) &&
        Objects.equals(this.fileCacheTypeVersion, createFileCacheRequest.fileCacheTypeVersion) &&
        Objects.equals(this.storageCapacity, createFileCacheRequest.storageCapacity) &&
        Objects.equals(this.subnetIds, createFileCacheRequest.subnetIds) &&
        Objects.equals(this.securityGroupIds, createFileCacheRequest.securityGroupIds) &&
        Objects.equals(this.tags, createFileCacheRequest.tags) &&
        Objects.equals(this.copyTagsToDataRepositoryAssociations, createFileCacheRequest.copyTagsToDataRepositoryAssociations) &&
        Objects.equals(this.kmsKeyId, createFileCacheRequest.kmsKeyId) &&
        Objects.equals(this.lustreConfiguration, createFileCacheRequest.lustreConfiguration) &&
        Objects.equals(this.dataRepositoryAssociations, createFileCacheRequest.dataRepositoryAssociations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRequestToken, fileCacheType, fileCacheTypeVersion, storageCapacity, subnetIds, securityGroupIds, tags, copyTagsToDataRepositoryAssociations, kmsKeyId, lustreConfiguration, dataRepositoryAssociations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFileCacheRequest {\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    fileCacheType: ").append(toIndentedString(fileCacheType)).append("\n");
    sb.append("    fileCacheTypeVersion: ").append(toIndentedString(fileCacheTypeVersion)).append("\n");
    sb.append("    storageCapacity: ").append(toIndentedString(storageCapacity)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    copyTagsToDataRepositoryAssociations: ").append(toIndentedString(copyTagsToDataRepositoryAssociations)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    lustreConfiguration: ").append(toIndentedString(lustreConfiguration)).append("\n");
    sb.append("    dataRepositoryAssociations: ").append(toIndentedString(dataRepositoryAssociations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientRequestToken");
    openapiFields.add("FileCacheType");
    openapiFields.add("FileCacheTypeVersion");
    openapiFields.add("StorageCapacity");
    openapiFields.add("SubnetIds");
    openapiFields.add("SecurityGroupIds");
    openapiFields.add("Tags");
    openapiFields.add("CopyTagsToDataRepositoryAssociations");
    openapiFields.add("KmsKeyId");
    openapiFields.add("LustreConfiguration");
    openapiFields.add("DataRepositoryAssociations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FileCacheType");
    openapiRequiredFields.add("FileCacheTypeVersion");
    openapiRequiredFields.add("StorageCapacity");
    openapiRequiredFields.add("SubnetIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFileCacheRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFileCacheRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFileCacheRequest is not found in the empty JSON string", CreateFileCacheRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFileCacheRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFileCacheRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFileCacheRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
      // validate the required field `FileCacheType`
      FileCacheType.validateJsonElement(jsonObj.get("FileCacheType"));
      // validate the required field `FileCacheTypeVersion`
      String.validateJsonElement(jsonObj.get("FileCacheTypeVersion"));
      // validate the required field `StorageCapacity`
      Integer.validateJsonElement(jsonObj.get("StorageCapacity"));
      // ensure the required json array is present
      if (jsonObj.get("SubnetIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("SubnetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubnetIds` to be an array in the JSON string but got `%s`", jsonObj.get("SubnetIds").toString()));
      }
      // validate the optional field `SecurityGroupIds`
      if (jsonObj.get("SecurityGroupIds") != null && !jsonObj.get("SecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupIds"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `CopyTagsToDataRepositoryAssociations`
      if (jsonObj.get("CopyTagsToDataRepositoryAssociations") != null && !jsonObj.get("CopyTagsToDataRepositoryAssociations").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToDataRepositoryAssociations"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `LustreConfiguration`
      if (jsonObj.get("LustreConfiguration") != null && !jsonObj.get("LustreConfiguration").isJsonNull()) {
        CreateFileCacheRequestLustreConfiguration.validateJsonElement(jsonObj.get("LustreConfiguration"));
      }
      // validate the optional field `DataRepositoryAssociations`
      if (jsonObj.get("DataRepositoryAssociations") != null && !jsonObj.get("DataRepositoryAssociations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataRepositoryAssociations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFileCacheRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFileCacheRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFileCacheRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFileCacheRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFileCacheRequest>() {
           @Override
           public void write(JsonWriter out, CreateFileCacheRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFileCacheRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFileCacheRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFileCacheRequest
   * @throws IOException if the JSON string is invalid with respect to CreateFileCacheRequest
   */
  public static CreateFileCacheRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFileCacheRequest.class);
  }

  /**
   * Convert an instance of CreateFileCacheRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

