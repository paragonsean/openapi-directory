/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SvmEndpointsIscsi;
import org.openapitools.client.model.SvmEndpointsManagement;
import org.openapitools.client.model.SvmEndpointsNfs;
import org.openapitools.client.model.SvmEndpointsSmb;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Amazon FSx for NetApp ONTAP storage virtual machine (SVM) has the following endpoints that are used to access data or to manage the SVM using the NetApp ONTAP CLI, REST API, or NetApp CloudManager.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SvmEndpoints {
  public static final String SERIALIZED_NAME_ISCSI = "Iscsi";
  @SerializedName(SERIALIZED_NAME_ISCSI)
  private SvmEndpointsIscsi iscsi;

  public static final String SERIALIZED_NAME_MANAGEMENT = "Management";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT)
  private SvmEndpointsManagement management;

  public static final String SERIALIZED_NAME_NFS = "Nfs";
  @SerializedName(SERIALIZED_NAME_NFS)
  private SvmEndpointsNfs nfs;

  public static final String SERIALIZED_NAME_SMB = "Smb";
  @SerializedName(SERIALIZED_NAME_SMB)
  private SvmEndpointsSmb smb;

  public SvmEndpoints() {
  }

  public SvmEndpoints iscsi(SvmEndpointsIscsi iscsi) {
    this.iscsi = iscsi;
    return this;
  }

  /**
   * Get iscsi
   * @return iscsi
   */
  @javax.annotation.Nullable
  public SvmEndpointsIscsi getIscsi() {
    return iscsi;
  }

  public void setIscsi(SvmEndpointsIscsi iscsi) {
    this.iscsi = iscsi;
  }


  public SvmEndpoints management(SvmEndpointsManagement management) {
    this.management = management;
    return this;
  }

  /**
   * Get management
   * @return management
   */
  @javax.annotation.Nullable
  public SvmEndpointsManagement getManagement() {
    return management;
  }

  public void setManagement(SvmEndpointsManagement management) {
    this.management = management;
  }


  public SvmEndpoints nfs(SvmEndpointsNfs nfs) {
    this.nfs = nfs;
    return this;
  }

  /**
   * Get nfs
   * @return nfs
   */
  @javax.annotation.Nullable
  public SvmEndpointsNfs getNfs() {
    return nfs;
  }

  public void setNfs(SvmEndpointsNfs nfs) {
    this.nfs = nfs;
  }


  public SvmEndpoints smb(SvmEndpointsSmb smb) {
    this.smb = smb;
    return this;
  }

  /**
   * Get smb
   * @return smb
   */
  @javax.annotation.Nullable
  public SvmEndpointsSmb getSmb() {
    return smb;
  }

  public void setSmb(SvmEndpointsSmb smb) {
    this.smb = smb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SvmEndpoints svmEndpoints = (SvmEndpoints) o;
    return Objects.equals(this.iscsi, svmEndpoints.iscsi) &&
        Objects.equals(this.management, svmEndpoints.management) &&
        Objects.equals(this.nfs, svmEndpoints.nfs) &&
        Objects.equals(this.smb, svmEndpoints.smb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iscsi, management, nfs, smb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SvmEndpoints {\n");
    sb.append("    iscsi: ").append(toIndentedString(iscsi)).append("\n");
    sb.append("    management: ").append(toIndentedString(management)).append("\n");
    sb.append("    nfs: ").append(toIndentedString(nfs)).append("\n");
    sb.append("    smb: ").append(toIndentedString(smb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Iscsi");
    openapiFields.add("Management");
    openapiFields.add("Nfs");
    openapiFields.add("Smb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SvmEndpoints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SvmEndpoints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SvmEndpoints is not found in the empty JSON string", SvmEndpoints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SvmEndpoints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SvmEndpoints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Iscsi`
      if (jsonObj.get("Iscsi") != null && !jsonObj.get("Iscsi").isJsonNull()) {
        SvmEndpointsIscsi.validateJsonElement(jsonObj.get("Iscsi"));
      }
      // validate the optional field `Management`
      if (jsonObj.get("Management") != null && !jsonObj.get("Management").isJsonNull()) {
        SvmEndpointsManagement.validateJsonElement(jsonObj.get("Management"));
      }
      // validate the optional field `Nfs`
      if (jsonObj.get("Nfs") != null && !jsonObj.get("Nfs").isJsonNull()) {
        SvmEndpointsNfs.validateJsonElement(jsonObj.get("Nfs"));
      }
      // validate the optional field `Smb`
      if (jsonObj.get("Smb") != null && !jsonObj.get("Smb").isJsonNull()) {
        SvmEndpointsSmb.validateJsonElement(jsonObj.get("Smb"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SvmEndpoints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SvmEndpoints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SvmEndpoints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SvmEndpoints.class));

       return (TypeAdapter<T>) new TypeAdapter<SvmEndpoints>() {
           @Override
           public void write(JsonWriter out, SvmEndpoints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SvmEndpoints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SvmEndpoints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SvmEndpoints
   * @throws IOException if the JSON string is invalid with respect to SvmEndpoints
   */
  public static SvmEndpoints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SvmEndpoints.class);
  }

  /**
   * Convert an instance of SvmEndpoints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

