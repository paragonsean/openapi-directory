/*
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileCacheCreatingFailureDetails;
import org.openapitools.client.model.FileCacheCreatingLustreConfiguration;
import org.openapitools.client.model.FileCacheLifecycle;
import org.openapitools.client.model.FileCacheType;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFileCacheResponseFileCache
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:01.724479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFileCacheResponseFileCache {
  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_FILE_CACHE_ID = "FileCacheId";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_ID)
  private String fileCacheId;

  public static final String SERIALIZED_NAME_FILE_CACHE_TYPE = "FileCacheType";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_TYPE)
  private FileCacheType fileCacheType;

  public static final String SERIALIZED_NAME_FILE_CACHE_TYPE_VERSION = "FileCacheTypeVersion";
  @SerializedName(SERIALIZED_NAME_FILE_CACHE_TYPE_VERSION)
  private String fileCacheTypeVersion;

  public static final String SERIALIZED_NAME_LIFECYCLE = "Lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private FileCacheLifecycle lifecycle;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private FileCacheCreatingFailureDetails failureDetails;

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY = "StorageCapacity";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY)
  private Integer storageCapacity;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SUBNET_IDS = "SubnetIds";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
  private List<String> subnetIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_IDS = "NetworkInterfaceIds";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_IDS)
  private List<String> networkInterfaceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DN_S_NAME = "DNSName";
  @SerializedName(SERIALIZED_NAME_DN_S_NAME)
  private String dnSName;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_DATA_REPOSITORY_ASSOCIATIONS = "CopyTagsToDataRepositoryAssociations";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_DATA_REPOSITORY_ASSOCIATIONS)
  private Boolean copyTagsToDataRepositoryAssociations;

  public static final String SERIALIZED_NAME_LUSTRE_CONFIGURATION = "LustreConfiguration";
  @SerializedName(SERIALIZED_NAME_LUSTRE_CONFIGURATION)
  private FileCacheCreatingLustreConfiguration lustreConfiguration;

  public static final String SERIALIZED_NAME_DATA_REPOSITORY_ASSOCIATION_IDS = "DataRepositoryAssociationIds";
  @SerializedName(SERIALIZED_NAME_DATA_REPOSITORY_ASSOCIATION_IDS)
  private List dataRepositoryAssociationIds;

  public CreateFileCacheResponseFileCache() {
  }

  public CreateFileCacheResponseFileCache ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public CreateFileCacheResponseFileCache creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public CreateFileCacheResponseFileCache fileCacheId(String fileCacheId) {
    this.fileCacheId = fileCacheId;
    return this;
  }

  /**
   * Get fileCacheId
   * @return fileCacheId
   */
  @javax.annotation.Nullable
  public String getFileCacheId() {
    return fileCacheId;
  }

  public void setFileCacheId(String fileCacheId) {
    this.fileCacheId = fileCacheId;
  }


  public CreateFileCacheResponseFileCache fileCacheType(FileCacheType fileCacheType) {
    this.fileCacheType = fileCacheType;
    return this;
  }

  /**
   * Get fileCacheType
   * @return fileCacheType
   */
  @javax.annotation.Nullable
  public FileCacheType getFileCacheType() {
    return fileCacheType;
  }

  public void setFileCacheType(FileCacheType fileCacheType) {
    this.fileCacheType = fileCacheType;
  }


  public CreateFileCacheResponseFileCache fileCacheTypeVersion(String fileCacheTypeVersion) {
    this.fileCacheTypeVersion = fileCacheTypeVersion;
    return this;
  }

  /**
   * Get fileCacheTypeVersion
   * @return fileCacheTypeVersion
   */
  @javax.annotation.Nullable
  public String getFileCacheTypeVersion() {
    return fileCacheTypeVersion;
  }

  public void setFileCacheTypeVersion(String fileCacheTypeVersion) {
    this.fileCacheTypeVersion = fileCacheTypeVersion;
  }


  public CreateFileCacheResponseFileCache lifecycle(FileCacheLifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  public FileCacheLifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(FileCacheLifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public CreateFileCacheResponseFileCache failureDetails(FileCacheCreatingFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public FileCacheCreatingFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(FileCacheCreatingFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }


  public CreateFileCacheResponseFileCache storageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
    return this;
  }

  /**
   * Get storageCapacity
   * @return storageCapacity
   */
  @javax.annotation.Nullable
  public Integer getStorageCapacity() {
    return storageCapacity;
  }

  public void setStorageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
  }


  public CreateFileCacheResponseFileCache vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * The ID of your virtual private cloud (VPC). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html\&quot;&gt;VPC and subnets&lt;/a&gt; in the &lt;i&gt;Amazon VPC User Guide&lt;/i&gt;.
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public CreateFileCacheResponseFileCache subnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public CreateFileCacheResponseFileCache addSubnetIdsItem(String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new ArrayList<>();
    }
    this.subnetIds.add(subnetIdsItem);
    return this;
  }

  /**
   * A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the &lt;code&gt;CreateFileCache&lt;/code&gt; operation.
   * @return subnetIds
   */
  @javax.annotation.Nullable
  public List<String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
  }


  public CreateFileCacheResponseFileCache networkInterfaceIds(List<String> networkInterfaceIds) {
    this.networkInterfaceIds = networkInterfaceIds;
    return this;
  }

  public CreateFileCacheResponseFileCache addNetworkInterfaceIdsItem(String networkInterfaceIdsItem) {
    if (this.networkInterfaceIds == null) {
      this.networkInterfaceIds = new ArrayList<>();
    }
    this.networkInterfaceIds.add(networkInterfaceIdsItem);
    return this;
  }

  /**
   * A list of network interface IDs.
   * @return networkInterfaceIds
   */
  @javax.annotation.Nullable
  public List<String> getNetworkInterfaceIds() {
    return networkInterfaceIds;
  }

  public void setNetworkInterfaceIds(List<String> networkInterfaceIds) {
    this.networkInterfaceIds = networkInterfaceIds;
  }


  public CreateFileCacheResponseFileCache dnSName(String dnSName) {
    this.dnSName = dnSName;
    return this;
  }

  /**
   * Get dnSName
   * @return dnSName
   */
  @javax.annotation.Nullable
  public String getDnSName() {
    return dnSName;
  }

  public void setDnSName(String dnSName) {
    this.dnSName = dnSName;
  }


  public CreateFileCacheResponseFileCache kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateFileCacheResponseFileCache resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public CreateFileCacheResponseFileCache tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateFileCacheResponseFileCache addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateFileCacheResponseFileCache copyTagsToDataRepositoryAssociations(Boolean copyTagsToDataRepositoryAssociations) {
    this.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations;
    return this;
  }

  /**
   * Get copyTagsToDataRepositoryAssociations
   * @return copyTagsToDataRepositoryAssociations
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToDataRepositoryAssociations() {
    return copyTagsToDataRepositoryAssociations;
  }

  public void setCopyTagsToDataRepositoryAssociations(Boolean copyTagsToDataRepositoryAssociations) {
    this.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations;
  }


  public CreateFileCacheResponseFileCache lustreConfiguration(FileCacheCreatingLustreConfiguration lustreConfiguration) {
    this.lustreConfiguration = lustreConfiguration;
    return this;
  }

  /**
   * Get lustreConfiguration
   * @return lustreConfiguration
   */
  @javax.annotation.Nullable
  public FileCacheCreatingLustreConfiguration getLustreConfiguration() {
    return lustreConfiguration;
  }

  public void setLustreConfiguration(FileCacheCreatingLustreConfiguration lustreConfiguration) {
    this.lustreConfiguration = lustreConfiguration;
  }


  public CreateFileCacheResponseFileCache dataRepositoryAssociationIds(List dataRepositoryAssociationIds) {
    this.dataRepositoryAssociationIds = dataRepositoryAssociationIds;
    return this;
  }

  /**
   * Get dataRepositoryAssociationIds
   * @return dataRepositoryAssociationIds
   */
  @javax.annotation.Nullable
  public List getDataRepositoryAssociationIds() {
    return dataRepositoryAssociationIds;
  }

  public void setDataRepositoryAssociationIds(List dataRepositoryAssociationIds) {
    this.dataRepositoryAssociationIds = dataRepositoryAssociationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFileCacheResponseFileCache createFileCacheResponseFileCache = (CreateFileCacheResponseFileCache) o;
    return Objects.equals(this.ownerId, createFileCacheResponseFileCache.ownerId) &&
        Objects.equals(this.creationTime, createFileCacheResponseFileCache.creationTime) &&
        Objects.equals(this.fileCacheId, createFileCacheResponseFileCache.fileCacheId) &&
        Objects.equals(this.fileCacheType, createFileCacheResponseFileCache.fileCacheType) &&
        Objects.equals(this.fileCacheTypeVersion, createFileCacheResponseFileCache.fileCacheTypeVersion) &&
        Objects.equals(this.lifecycle, createFileCacheResponseFileCache.lifecycle) &&
        Objects.equals(this.failureDetails, createFileCacheResponseFileCache.failureDetails) &&
        Objects.equals(this.storageCapacity, createFileCacheResponseFileCache.storageCapacity) &&
        Objects.equals(this.vpcId, createFileCacheResponseFileCache.vpcId) &&
        Objects.equals(this.subnetIds, createFileCacheResponseFileCache.subnetIds) &&
        Objects.equals(this.networkInterfaceIds, createFileCacheResponseFileCache.networkInterfaceIds) &&
        Objects.equals(this.dnSName, createFileCacheResponseFileCache.dnSName) &&
        Objects.equals(this.kmsKeyId, createFileCacheResponseFileCache.kmsKeyId) &&
        Objects.equals(this.resourceARN, createFileCacheResponseFileCache.resourceARN) &&
        Objects.equals(this.tags, createFileCacheResponseFileCache.tags) &&
        Objects.equals(this.copyTagsToDataRepositoryAssociations, createFileCacheResponseFileCache.copyTagsToDataRepositoryAssociations) &&
        Objects.equals(this.lustreConfiguration, createFileCacheResponseFileCache.lustreConfiguration) &&
        Objects.equals(this.dataRepositoryAssociationIds, createFileCacheResponseFileCache.dataRepositoryAssociationIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerId, creationTime, fileCacheId, fileCacheType, fileCacheTypeVersion, lifecycle, failureDetails, storageCapacity, vpcId, subnetIds, networkInterfaceIds, dnSName, kmsKeyId, resourceARN, tags, copyTagsToDataRepositoryAssociations, lustreConfiguration, dataRepositoryAssociationIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFileCacheResponseFileCache {\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    fileCacheId: ").append(toIndentedString(fileCacheId)).append("\n");
    sb.append("    fileCacheType: ").append(toIndentedString(fileCacheType)).append("\n");
    sb.append("    fileCacheTypeVersion: ").append(toIndentedString(fileCacheTypeVersion)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    storageCapacity: ").append(toIndentedString(storageCapacity)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    networkInterfaceIds: ").append(toIndentedString(networkInterfaceIds)).append("\n");
    sb.append("    dnSName: ").append(toIndentedString(dnSName)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    copyTagsToDataRepositoryAssociations: ").append(toIndentedString(copyTagsToDataRepositoryAssociations)).append("\n");
    sb.append("    lustreConfiguration: ").append(toIndentedString(lustreConfiguration)).append("\n");
    sb.append("    dataRepositoryAssociationIds: ").append(toIndentedString(dataRepositoryAssociationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OwnerId");
    openapiFields.add("CreationTime");
    openapiFields.add("FileCacheId");
    openapiFields.add("FileCacheType");
    openapiFields.add("FileCacheTypeVersion");
    openapiFields.add("Lifecycle");
    openapiFields.add("FailureDetails");
    openapiFields.add("StorageCapacity");
    openapiFields.add("VpcId");
    openapiFields.add("SubnetIds");
    openapiFields.add("NetworkInterfaceIds");
    openapiFields.add("DNSName");
    openapiFields.add("KmsKeyId");
    openapiFields.add("ResourceARN");
    openapiFields.add("Tags");
    openapiFields.add("CopyTagsToDataRepositoryAssociations");
    openapiFields.add("LustreConfiguration");
    openapiFields.add("DataRepositoryAssociationIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFileCacheResponseFileCache
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFileCacheResponseFileCache.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFileCacheResponseFileCache is not found in the empty JSON string", CreateFileCacheResponseFileCache.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFileCacheResponseFileCache.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFileCacheResponseFileCache` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("OwnerId") != null && !jsonObj.get("OwnerId").isJsonNull()) && !jsonObj.get("OwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerId").toString()));
      }
      // validate the optional field `FileCacheId`
      if (jsonObj.get("FileCacheId") != null && !jsonObj.get("FileCacheId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileCacheId"));
      }
      // validate the optional field `FileCacheType`
      if (jsonObj.get("FileCacheType") != null && !jsonObj.get("FileCacheType").isJsonNull()) {
        FileCacheType.validateJsonElement(jsonObj.get("FileCacheType"));
      }
      // validate the optional field `FileCacheTypeVersion`
      if (jsonObj.get("FileCacheTypeVersion") != null && !jsonObj.get("FileCacheTypeVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileCacheTypeVersion"));
      }
      // validate the optional field `Lifecycle`
      if (jsonObj.get("Lifecycle") != null && !jsonObj.get("Lifecycle").isJsonNull()) {
        FileCacheLifecycle.validateJsonElement(jsonObj.get("Lifecycle"));
      }
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        FileCacheCreatingFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
      // validate the optional field `StorageCapacity`
      if (jsonObj.get("StorageCapacity") != null && !jsonObj.get("StorageCapacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StorageCapacity"));
      }
      if ((jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) && !jsonObj.get("VpcId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VpcId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VpcId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SubnetIds") != null && !jsonObj.get("SubnetIds").isJsonNull() && !jsonObj.get("SubnetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubnetIds` to be an array in the JSON string but got `%s`", jsonObj.get("SubnetIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NetworkInterfaceIds") != null && !jsonObj.get("NetworkInterfaceIds").isJsonNull() && !jsonObj.get("NetworkInterfaceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetworkInterfaceIds` to be an array in the JSON string but got `%s`", jsonObj.get("NetworkInterfaceIds").toString()));
      }
      // validate the optional field `DNSName`
      if (jsonObj.get("DNSName") != null && !jsonObj.get("DNSName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DNSName"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      if ((jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) && !jsonObj.get("ResourceARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceARN").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `CopyTagsToDataRepositoryAssociations`
      if (jsonObj.get("CopyTagsToDataRepositoryAssociations") != null && !jsonObj.get("CopyTagsToDataRepositoryAssociations").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToDataRepositoryAssociations"));
      }
      // validate the optional field `LustreConfiguration`
      if (jsonObj.get("LustreConfiguration") != null && !jsonObj.get("LustreConfiguration").isJsonNull()) {
        FileCacheCreatingLustreConfiguration.validateJsonElement(jsonObj.get("LustreConfiguration"));
      }
      // validate the optional field `DataRepositoryAssociationIds`
      if (jsonObj.get("DataRepositoryAssociationIds") != null && !jsonObj.get("DataRepositoryAssociationIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataRepositoryAssociationIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFileCacheResponseFileCache.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFileCacheResponseFileCache' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFileCacheResponseFileCache> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFileCacheResponseFileCache.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFileCacheResponseFileCache>() {
           @Override
           public void write(JsonWriter out, CreateFileCacheResponseFileCache value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFileCacheResponseFileCache read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFileCacheResponseFileCache given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFileCacheResponseFileCache
   * @throws IOException if the JSON string is invalid with respect to CreateFileCacheResponseFileCache
   */
  public static CreateFileCacheResponseFileCache fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFileCacheResponseFileCache.class);
  }

  /**
   * Convert an instance of CreateFileCacheResponseFileCache to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

