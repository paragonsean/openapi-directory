# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_directory_information import BackupDirectoryInformation
from openapi_server.models.backup_failure_details import BackupFailureDetails
from openapi_server.models.backup_file_system import BackupFileSystem
from openapi_server.models.backup_lifecycle import BackupLifecycle
from openapi_server.models.backup_type import BackupType
from openapi_server.models.resource_type import ResourceType
from openapi_server.models.volume import Volume
import re
from openapi_server import util


class CreateBackupResponseBackup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_id: str=None, lifecycle: BackupLifecycle=None, failure_details: BackupFailureDetails=None, type: BackupType=None, progress_percent: int=None, creation_time: datetime=None, kms_key_id: str=None, resource_arn: str=None, tags: List=None, file_system: BackupFileSystem=None, directory_information: BackupDirectoryInformation=None, owner_id: str=None, source_backup_id: str=None, source_backup_region: str=None, resource_type: ResourceType=None, volume: Volume=None):
        """CreateBackupResponseBackup - a model defined in OpenAPI

        :param backup_id: The backup_id of this CreateBackupResponseBackup.
        :param lifecycle: The lifecycle of this CreateBackupResponseBackup.
        :param failure_details: The failure_details of this CreateBackupResponseBackup.
        :param type: The type of this CreateBackupResponseBackup.
        :param progress_percent: The progress_percent of this CreateBackupResponseBackup.
        :param creation_time: The creation_time of this CreateBackupResponseBackup.
        :param kms_key_id: The kms_key_id of this CreateBackupResponseBackup.
        :param resource_arn: The resource_arn of this CreateBackupResponseBackup.
        :param tags: The tags of this CreateBackupResponseBackup.
        :param file_system: The file_system of this CreateBackupResponseBackup.
        :param directory_information: The directory_information of this CreateBackupResponseBackup.
        :param owner_id: The owner_id of this CreateBackupResponseBackup.
        :param source_backup_id: The source_backup_id of this CreateBackupResponseBackup.
        :param source_backup_region: The source_backup_region of this CreateBackupResponseBackup.
        :param resource_type: The resource_type of this CreateBackupResponseBackup.
        :param volume: The volume of this CreateBackupResponseBackup.
        """
        self.openapi_types = {
            'backup_id': str,
            'lifecycle': BackupLifecycle,
            'failure_details': BackupFailureDetails,
            'type': BackupType,
            'progress_percent': int,
            'creation_time': datetime,
            'kms_key_id': str,
            'resource_arn': str,
            'tags': List,
            'file_system': BackupFileSystem,
            'directory_information': BackupDirectoryInformation,
            'owner_id': str,
            'source_backup_id': str,
            'source_backup_region': str,
            'resource_type': ResourceType,
            'volume': Volume
        }

        self.attribute_map = {
            'backup_id': 'BackupId',
            'lifecycle': 'Lifecycle',
            'failure_details': 'FailureDetails',
            'type': 'Type',
            'progress_percent': 'ProgressPercent',
            'creation_time': 'CreationTime',
            'kms_key_id': 'KmsKeyId',
            'resource_arn': 'ResourceARN',
            'tags': 'Tags',
            'file_system': 'FileSystem',
            'directory_information': 'DirectoryInformation',
            'owner_id': 'OwnerId',
            'source_backup_id': 'SourceBackupId',
            'source_backup_region': 'SourceBackupRegion',
            'resource_type': 'ResourceType',
            'volume': 'Volume'
        }

        self._backup_id = backup_id
        self._lifecycle = lifecycle
        self._failure_details = failure_details
        self._type = type
        self._progress_percent = progress_percent
        self._creation_time = creation_time
        self._kms_key_id = kms_key_id
        self._resource_arn = resource_arn
        self._tags = tags
        self._file_system = file_system
        self._directory_information = directory_information
        self._owner_id = owner_id
        self._source_backup_id = source_backup_id
        self._source_backup_region = source_backup_region
        self._resource_type = resource_type
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackupResponseBackup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackupResponse_Backup of this CreateBackupResponseBackup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this CreateBackupResponseBackup.


        :return: The backup_id of this CreateBackupResponseBackup.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this CreateBackupResponseBackup.


        :param backup_id: The backup_id of this CreateBackupResponseBackup.
        :type backup_id: str
        """
        if backup_id is None:
            raise ValueError("Invalid value for `backup_id`, must not be `None`")

        self._backup_id = backup_id

    @property
    def lifecycle(self):
        """Gets the lifecycle of this CreateBackupResponseBackup.


        :return: The lifecycle of this CreateBackupResponseBackup.
        :rtype: BackupLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this CreateBackupResponseBackup.


        :param lifecycle: The lifecycle of this CreateBackupResponseBackup.
        :type lifecycle: BackupLifecycle
        """
        if lifecycle is None:
            raise ValueError("Invalid value for `lifecycle`, must not be `None`")

        self._lifecycle = lifecycle

    @property
    def failure_details(self):
        """Gets the failure_details of this CreateBackupResponseBackup.


        :return: The failure_details of this CreateBackupResponseBackup.
        :rtype: BackupFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this CreateBackupResponseBackup.


        :param failure_details: The failure_details of this CreateBackupResponseBackup.
        :type failure_details: BackupFailureDetails
        """

        self._failure_details = failure_details

    @property
    def type(self):
        """Gets the type of this CreateBackupResponseBackup.


        :return: The type of this CreateBackupResponseBackup.
        :rtype: BackupType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateBackupResponseBackup.


        :param type: The type of this CreateBackupResponseBackup.
        :type type: BackupType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def progress_percent(self):
        """Gets the progress_percent of this CreateBackupResponseBackup.

        Displays the current percent of progress of an asynchronous task.

        :return: The progress_percent of this CreateBackupResponseBackup.
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this CreateBackupResponseBackup.

        Displays the current percent of progress of an asynchronous task.

        :param progress_percent: The progress_percent of this CreateBackupResponseBackup.
        :type progress_percent: int
        """
        if progress_percent is not None and progress_percent > 100:
            raise ValueError("Invalid value for `progress_percent`, must be a value less than or equal to `100`")
        if progress_percent is not None and progress_percent < 0:
            raise ValueError("Invalid value for `progress_percent`, must be a value greater than or equal to `0`")

        self._progress_percent = progress_percent

    @property
    def creation_time(self):
        """Gets the creation_time of this CreateBackupResponseBackup.


        :return: The creation_time of this CreateBackupResponseBackup.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CreateBackupResponseBackup.


        :param creation_time: The creation_time of this CreateBackupResponseBackup.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateBackupResponseBackup.


        :return: The kms_key_id of this CreateBackupResponseBackup.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateBackupResponseBackup.


        :param kms_key_id: The kms_key_id of this CreateBackupResponseBackup.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def resource_arn(self):
        """Gets the resource_arn of this CreateBackupResponseBackup.


        :return: The resource_arn of this CreateBackupResponseBackup.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this CreateBackupResponseBackup.


        :param resource_arn: The resource_arn of this CreateBackupResponseBackup.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def tags(self):
        """Gets the tags of this CreateBackupResponseBackup.


        :return: The tags of this CreateBackupResponseBackup.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateBackupResponseBackup.


        :param tags: The tags of this CreateBackupResponseBackup.
        :type tags: List
        """

        self._tags = tags

    @property
    def file_system(self):
        """Gets the file_system of this CreateBackupResponseBackup.


        :return: The file_system of this CreateBackupResponseBackup.
        :rtype: BackupFileSystem
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """Sets the file_system of this CreateBackupResponseBackup.


        :param file_system: The file_system of this CreateBackupResponseBackup.
        :type file_system: BackupFileSystem
        """
        if file_system is None:
            raise ValueError("Invalid value for `file_system`, must not be `None`")

        self._file_system = file_system

    @property
    def directory_information(self):
        """Gets the directory_information of this CreateBackupResponseBackup.


        :return: The directory_information of this CreateBackupResponseBackup.
        :rtype: BackupDirectoryInformation
        """
        return self._directory_information

    @directory_information.setter
    def directory_information(self, directory_information):
        """Sets the directory_information of this CreateBackupResponseBackup.


        :param directory_information: The directory_information of this CreateBackupResponseBackup.
        :type directory_information: BackupDirectoryInformation
        """

        self._directory_information = directory_information

    @property
    def owner_id(self):
        """Gets the owner_id of this CreateBackupResponseBackup.

        An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.

        :return: The owner_id of this CreateBackupResponseBackup.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CreateBackupResponseBackup.

        An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.

        :param owner_id: The owner_id of this CreateBackupResponseBackup.
        :type owner_id: str
        """
        if owner_id is not None and len(owner_id) > 12:
            raise ValueError("Invalid value for `owner_id`, length must be less than or equal to `12`")
        if owner_id is not None and len(owner_id) < 12:
            raise ValueError("Invalid value for `owner_id`, length must be greater than or equal to `12`")
        if owner_id is not None and not re.search(r'^\d{12}$', owner_id):
            raise ValueError("Invalid value for `owner_id`, must be a follow pattern or equal to `/^\d{12}$/`")

        self._owner_id = owner_id

    @property
    def source_backup_id(self):
        """Gets the source_backup_id of this CreateBackupResponseBackup.

        The ID of the source backup. Specifies the backup that you are copying.

        :return: The source_backup_id of this CreateBackupResponseBackup.
        :rtype: str
        """
        return self._source_backup_id

    @source_backup_id.setter
    def source_backup_id(self, source_backup_id):
        """Sets the source_backup_id of this CreateBackupResponseBackup.

        The ID of the source backup. Specifies the backup that you are copying.

        :param source_backup_id: The source_backup_id of this CreateBackupResponseBackup.
        :type source_backup_id: str
        """
        if source_backup_id is not None and len(source_backup_id) > 128:
            raise ValueError("Invalid value for `source_backup_id`, length must be less than or equal to `128`")
        if source_backup_id is not None and len(source_backup_id) < 12:
            raise ValueError("Invalid value for `source_backup_id`, length must be greater than or equal to `12`")
        if source_backup_id is not None and not re.search(r'^(backup-[0-9a-f]{8,})$', source_backup_id):
            raise ValueError("Invalid value for `source_backup_id`, must be a follow pattern or equal to `/^(backup-[0-9a-f]{8,})$/`")

        self._source_backup_id = source_backup_id

    @property
    def source_backup_region(self):
        """Gets the source_backup_region of this CreateBackupResponseBackup.


        :return: The source_backup_region of this CreateBackupResponseBackup.
        :rtype: str
        """
        return self._source_backup_region

    @source_backup_region.setter
    def source_backup_region(self, source_backup_region):
        """Sets the source_backup_region of this CreateBackupResponseBackup.


        :param source_backup_region: The source_backup_region of this CreateBackupResponseBackup.
        :type source_backup_region: str
        """

        self._source_backup_region = source_backup_region

    @property
    def resource_type(self):
        """Gets the resource_type of this CreateBackupResponseBackup.


        :return: The resource_type of this CreateBackupResponseBackup.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreateBackupResponseBackup.


        :param resource_type: The resource_type of this CreateBackupResponseBackup.
        :type resource_type: ResourceType
        """

        self._resource_type = resource_type

    @property
    def volume(self):
        """Gets the volume of this CreateBackupResponseBackup.


        :return: The volume of this CreateBackupResponseBackup.
        :rtype: Volume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this CreateBackupResponseBackup.


        :param volume: The volume of this CreateBackupResponseBackup.
        :type volume: Volume
        """

        self._volume = volume
