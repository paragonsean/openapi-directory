# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_repository_association_nfs import DataRepositoryAssociationNFS
from openapi_server.models.data_repository_association_s3 import DataRepositoryAssociationS3
from openapi_server.models.data_repository_failure_details import DataRepositoryFailureDetails
from openapi_server.models.data_repository_lifecycle import DataRepositoryLifecycle
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class DataRepositoryAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_id: str=None, resource_arn: str=None, file_system_id: str=None, lifecycle: DataRepositoryLifecycle=None, failure_details: DataRepositoryFailureDetails=None, file_system_path: str=None, data_repository_path: str=None, batch_import_meta_data_on_create: bool=None, imported_file_chunk_size: int=None, s3: DataRepositoryAssociationS3=None, tags: List[Tag]=None, creation_time: datetime=None, file_cache_id: str=None, file_cache_path: str=None, data_repository_subdirectories: List=None, nfs: DataRepositoryAssociationNFS=None):
        """DataRepositoryAssociation - a model defined in OpenAPI

        :param association_id: The association_id of this DataRepositoryAssociation.
        :param resource_arn: The resource_arn of this DataRepositoryAssociation.
        :param file_system_id: The file_system_id of this DataRepositoryAssociation.
        :param lifecycle: The lifecycle of this DataRepositoryAssociation.
        :param failure_details: The failure_details of this DataRepositoryAssociation.
        :param file_system_path: The file_system_path of this DataRepositoryAssociation.
        :param data_repository_path: The data_repository_path of this DataRepositoryAssociation.
        :param batch_import_meta_data_on_create: The batch_import_meta_data_on_create of this DataRepositoryAssociation.
        :param imported_file_chunk_size: The imported_file_chunk_size of this DataRepositoryAssociation.
        :param s3: The s3 of this DataRepositoryAssociation.
        :param tags: The tags of this DataRepositoryAssociation.
        :param creation_time: The creation_time of this DataRepositoryAssociation.
        :param file_cache_id: The file_cache_id of this DataRepositoryAssociation.
        :param file_cache_path: The file_cache_path of this DataRepositoryAssociation.
        :param data_repository_subdirectories: The data_repository_subdirectories of this DataRepositoryAssociation.
        :param nfs: The nfs of this DataRepositoryAssociation.
        """
        self.openapi_types = {
            'association_id': str,
            'resource_arn': str,
            'file_system_id': str,
            'lifecycle': DataRepositoryLifecycle,
            'failure_details': DataRepositoryFailureDetails,
            'file_system_path': str,
            'data_repository_path': str,
            'batch_import_meta_data_on_create': bool,
            'imported_file_chunk_size': int,
            's3': DataRepositoryAssociationS3,
            'tags': List[Tag],
            'creation_time': datetime,
            'file_cache_id': str,
            'file_cache_path': str,
            'data_repository_subdirectories': List,
            'nfs': DataRepositoryAssociationNFS
        }

        self.attribute_map = {
            'association_id': 'AssociationId',
            'resource_arn': 'ResourceARN',
            'file_system_id': 'FileSystemId',
            'lifecycle': 'Lifecycle',
            'failure_details': 'FailureDetails',
            'file_system_path': 'FileSystemPath',
            'data_repository_path': 'DataRepositoryPath',
            'batch_import_meta_data_on_create': 'BatchImportMetaDataOnCreate',
            'imported_file_chunk_size': 'ImportedFileChunkSize',
            's3': 'S3',
            'tags': 'Tags',
            'creation_time': 'CreationTime',
            'file_cache_id': 'FileCacheId',
            'file_cache_path': 'FileCachePath',
            'data_repository_subdirectories': 'DataRepositorySubdirectories',
            'nfs': 'NFS'
        }

        self._association_id = association_id
        self._resource_arn = resource_arn
        self._file_system_id = file_system_id
        self._lifecycle = lifecycle
        self._failure_details = failure_details
        self._file_system_path = file_system_path
        self._data_repository_path = data_repository_path
        self._batch_import_meta_data_on_create = batch_import_meta_data_on_create
        self._imported_file_chunk_size = imported_file_chunk_size
        self._s3 = s3
        self._tags = tags
        self._creation_time = creation_time
        self._file_cache_id = file_cache_id
        self._file_cache_path = file_cache_path
        self._data_repository_subdirectories = data_repository_subdirectories
        self._nfs = nfs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataRepositoryAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataRepositoryAssociation of this DataRepositoryAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_id(self):
        """Gets the association_id of this DataRepositoryAssociation.


        :return: The association_id of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this DataRepositoryAssociation.


        :param association_id: The association_id of this DataRepositoryAssociation.
        :type association_id: str
        """

        self._association_id = association_id

    @property
    def resource_arn(self):
        """Gets the resource_arn of this DataRepositoryAssociation.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this DataRepositoryAssociation.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this DataRepositoryAssociation.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn

    @property
    def file_system_id(self):
        """Gets the file_system_id of this DataRepositoryAssociation.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :return: The file_system_id of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this DataRepositoryAssociation.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :param file_system_id: The file_system_id of this DataRepositoryAssociation.
        :type file_system_id: str
        """
        if file_system_id is not None and len(file_system_id) > 21:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `21`")
        if file_system_id is not None and len(file_system_id) < 11:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `11`")
        if file_system_id is not None and not re.search(r'^(fs-[0-9a-f]{8,})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(fs-[0-9a-f]{8,})$/`")

        self._file_system_id = file_system_id

    @property
    def lifecycle(self):
        """Gets the lifecycle of this DataRepositoryAssociation.


        :return: The lifecycle of this DataRepositoryAssociation.
        :rtype: DataRepositoryLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this DataRepositoryAssociation.


        :param lifecycle: The lifecycle of this DataRepositoryAssociation.
        :type lifecycle: DataRepositoryLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def failure_details(self):
        """Gets the failure_details of this DataRepositoryAssociation.


        :return: The failure_details of this DataRepositoryAssociation.
        :rtype: DataRepositoryFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this DataRepositoryAssociation.


        :param failure_details: The failure_details of this DataRepositoryAssociation.
        :type failure_details: DataRepositoryFailureDetails
        """

        self._failure_details = failure_details

    @property
    def file_system_path(self):
        """Gets the file_system_path of this DataRepositoryAssociation.


        :return: The file_system_path of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._file_system_path

    @file_system_path.setter
    def file_system_path(self, file_system_path):
        """Sets the file_system_path of this DataRepositoryAssociation.


        :param file_system_path: The file_system_path of this DataRepositoryAssociation.
        :type file_system_path: str
        """

        self._file_system_path = file_system_path

    @property
    def data_repository_path(self):
        """Gets the data_repository_path of this DataRepositoryAssociation.


        :return: The data_repository_path of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._data_repository_path

    @data_repository_path.setter
    def data_repository_path(self, data_repository_path):
        """Sets the data_repository_path of this DataRepositoryAssociation.


        :param data_repository_path: The data_repository_path of this DataRepositoryAssociation.
        :type data_repository_path: str
        """

        self._data_repository_path = data_repository_path

    @property
    def batch_import_meta_data_on_create(self):
        """Gets the batch_import_meta_data_on_create of this DataRepositoryAssociation.


        :return: The batch_import_meta_data_on_create of this DataRepositoryAssociation.
        :rtype: bool
        """
        return self._batch_import_meta_data_on_create

    @batch_import_meta_data_on_create.setter
    def batch_import_meta_data_on_create(self, batch_import_meta_data_on_create):
        """Sets the batch_import_meta_data_on_create of this DataRepositoryAssociation.


        :param batch_import_meta_data_on_create: The batch_import_meta_data_on_create of this DataRepositoryAssociation.
        :type batch_import_meta_data_on_create: bool
        """

        self._batch_import_meta_data_on_create = batch_import_meta_data_on_create

    @property
    def imported_file_chunk_size(self):
        """Gets the imported_file_chunk_size of this DataRepositoryAssociation.


        :return: The imported_file_chunk_size of this DataRepositoryAssociation.
        :rtype: int
        """
        return self._imported_file_chunk_size

    @imported_file_chunk_size.setter
    def imported_file_chunk_size(self, imported_file_chunk_size):
        """Sets the imported_file_chunk_size of this DataRepositoryAssociation.


        :param imported_file_chunk_size: The imported_file_chunk_size of this DataRepositoryAssociation.
        :type imported_file_chunk_size: int
        """

        self._imported_file_chunk_size = imported_file_chunk_size

    @property
    def s3(self):
        """Gets the s3 of this DataRepositoryAssociation.


        :return: The s3 of this DataRepositoryAssociation.
        :rtype: DataRepositoryAssociationS3
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this DataRepositoryAssociation.


        :param s3: The s3 of this DataRepositoryAssociation.
        :type s3: DataRepositoryAssociationS3
        """

        self._s3 = s3

    @property
    def tags(self):
        """Gets the tags of this DataRepositoryAssociation.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this DataRepositoryAssociation.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DataRepositoryAssociation.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this DataRepositoryAssociation.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def creation_time(self):
        """Gets the creation_time of this DataRepositoryAssociation.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :return: The creation_time of this DataRepositoryAssociation.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DataRepositoryAssociation.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :param creation_time: The creation_time of this DataRepositoryAssociation.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def file_cache_id(self):
        """Gets the file_cache_id of this DataRepositoryAssociation.


        :return: The file_cache_id of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._file_cache_id

    @file_cache_id.setter
    def file_cache_id(self, file_cache_id):
        """Sets the file_cache_id of this DataRepositoryAssociation.


        :param file_cache_id: The file_cache_id of this DataRepositoryAssociation.
        :type file_cache_id: str
        """

        self._file_cache_id = file_cache_id

    @property
    def file_cache_path(self):
        """Gets the file_cache_path of this DataRepositoryAssociation.


        :return: The file_cache_path of this DataRepositoryAssociation.
        :rtype: str
        """
        return self._file_cache_path

    @file_cache_path.setter
    def file_cache_path(self, file_cache_path):
        """Sets the file_cache_path of this DataRepositoryAssociation.


        :param file_cache_path: The file_cache_path of this DataRepositoryAssociation.
        :type file_cache_path: str
        """

        self._file_cache_path = file_cache_path

    @property
    def data_repository_subdirectories(self):
        """Gets the data_repository_subdirectories of this DataRepositoryAssociation.


        :return: The data_repository_subdirectories of this DataRepositoryAssociation.
        :rtype: List
        """
        return self._data_repository_subdirectories

    @data_repository_subdirectories.setter
    def data_repository_subdirectories(self, data_repository_subdirectories):
        """Sets the data_repository_subdirectories of this DataRepositoryAssociation.


        :param data_repository_subdirectories: The data_repository_subdirectories of this DataRepositoryAssociation.
        :type data_repository_subdirectories: List
        """

        self._data_repository_subdirectories = data_repository_subdirectories

    @property
    def nfs(self):
        """Gets the nfs of this DataRepositoryAssociation.


        :return: The nfs of this DataRepositoryAssociation.
        :rtype: DataRepositoryAssociationNFS
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this DataRepositoryAssociation.


        :param nfs: The nfs of this DataRepositoryAssociation.
        :type nfs: DataRepositoryAssociationNFS
        """

        self._nfs = nfs
