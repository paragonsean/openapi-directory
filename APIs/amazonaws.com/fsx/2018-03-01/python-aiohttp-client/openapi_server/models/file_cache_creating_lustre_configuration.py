# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_file_cache_lustre_configuration_metadata_configuration import CreateFileCacheLustreConfigurationMetadataConfiguration
from openapi_server.models.file_cache_lustre_configuration_log_configuration import FileCacheLustreConfigurationLogConfiguration
from openapi_server.models.file_cache_lustre_deployment_type import FileCacheLustreDeploymentType
import re
from openapi_server import util


class FileCacheCreatingLustreConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, per_unit_storage_throughput: int=None, deployment_type: FileCacheLustreDeploymentType=None, mount_name: str=None, weekly_maintenance_start_time: str=None, metadata_configuration: CreateFileCacheLustreConfigurationMetadataConfiguration=None, log_configuration: FileCacheLustreConfigurationLogConfiguration=None):
        """FileCacheCreatingLustreConfiguration - a model defined in OpenAPI

        :param per_unit_storage_throughput: The per_unit_storage_throughput of this FileCacheCreatingLustreConfiguration.
        :param deployment_type: The deployment_type of this FileCacheCreatingLustreConfiguration.
        :param mount_name: The mount_name of this FileCacheCreatingLustreConfiguration.
        :param weekly_maintenance_start_time: The weekly_maintenance_start_time of this FileCacheCreatingLustreConfiguration.
        :param metadata_configuration: The metadata_configuration of this FileCacheCreatingLustreConfiguration.
        :param log_configuration: The log_configuration of this FileCacheCreatingLustreConfiguration.
        """
        self.openapi_types = {
            'per_unit_storage_throughput': int,
            'deployment_type': FileCacheLustreDeploymentType,
            'mount_name': str,
            'weekly_maintenance_start_time': str,
            'metadata_configuration': CreateFileCacheLustreConfigurationMetadataConfiguration,
            'log_configuration': FileCacheLustreConfigurationLogConfiguration
        }

        self.attribute_map = {
            'per_unit_storage_throughput': 'PerUnitStorageThroughput',
            'deployment_type': 'DeploymentType',
            'mount_name': 'MountName',
            'weekly_maintenance_start_time': 'WeeklyMaintenanceStartTime',
            'metadata_configuration': 'MetadataConfiguration',
            'log_configuration': 'LogConfiguration'
        }

        self._per_unit_storage_throughput = per_unit_storage_throughput
        self._deployment_type = deployment_type
        self._mount_name = mount_name
        self._weekly_maintenance_start_time = weekly_maintenance_start_time
        self._metadata_configuration = metadata_configuration
        self._log_configuration = log_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileCacheCreatingLustreConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileCacheCreating_LustreConfiguration of this FileCacheCreatingLustreConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def per_unit_storage_throughput(self):
        """Gets the per_unit_storage_throughput of this FileCacheCreatingLustreConfiguration.


        :return: The per_unit_storage_throughput of this FileCacheCreatingLustreConfiguration.
        :rtype: int
        """
        return self._per_unit_storage_throughput

    @per_unit_storage_throughput.setter
    def per_unit_storage_throughput(self, per_unit_storage_throughput):
        """Sets the per_unit_storage_throughput of this FileCacheCreatingLustreConfiguration.


        :param per_unit_storage_throughput: The per_unit_storage_throughput of this FileCacheCreatingLustreConfiguration.
        :type per_unit_storage_throughput: int
        """

        self._per_unit_storage_throughput = per_unit_storage_throughput

    @property
    def deployment_type(self):
        """Gets the deployment_type of this FileCacheCreatingLustreConfiguration.


        :return: The deployment_type of this FileCacheCreatingLustreConfiguration.
        :rtype: FileCacheLustreDeploymentType
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this FileCacheCreatingLustreConfiguration.


        :param deployment_type: The deployment_type of this FileCacheCreatingLustreConfiguration.
        :type deployment_type: FileCacheLustreDeploymentType
        """

        self._deployment_type = deployment_type

    @property
    def mount_name(self):
        """Gets the mount_name of this FileCacheCreatingLustreConfiguration.


        :return: The mount_name of this FileCacheCreatingLustreConfiguration.
        :rtype: str
        """
        return self._mount_name

    @mount_name.setter
    def mount_name(self, mount_name):
        """Sets the mount_name of this FileCacheCreatingLustreConfiguration.


        :param mount_name: The mount_name of this FileCacheCreatingLustreConfiguration.
        :type mount_name: str
        """

        self._mount_name = mount_name

    @property
    def weekly_maintenance_start_time(self):
        """Gets the weekly_maintenance_start_time of this FileCacheCreatingLustreConfiguration.

        <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p> <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href=\"https://en.wikipedia.org/wiki/ISO_week_date\">the ISO-8601 spec as described on Wikipedia</a>.</p> <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p> <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>

        :return: The weekly_maintenance_start_time of this FileCacheCreatingLustreConfiguration.
        :rtype: str
        """
        return self._weekly_maintenance_start_time

    @weekly_maintenance_start_time.setter
    def weekly_maintenance_start_time(self, weekly_maintenance_start_time):
        """Sets the weekly_maintenance_start_time of this FileCacheCreatingLustreConfiguration.

        <p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p> <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href=\"https://en.wikipedia.org/wiki/ISO_week_date\">the ISO-8601 spec as described on Wikipedia</a>.</p> <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p> <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>

        :param weekly_maintenance_start_time: The weekly_maintenance_start_time of this FileCacheCreatingLustreConfiguration.
        :type weekly_maintenance_start_time: str
        """
        if weekly_maintenance_start_time is not None and len(weekly_maintenance_start_time) > 7:
            raise ValueError("Invalid value for `weekly_maintenance_start_time`, length must be less than or equal to `7`")
        if weekly_maintenance_start_time is not None and len(weekly_maintenance_start_time) < 7:
            raise ValueError("Invalid value for `weekly_maintenance_start_time`, length must be greater than or equal to `7`")
        if weekly_maintenance_start_time is not None and not re.search(r'^[1-7]:([01]\d|2[0-3]):?([0-5]\d)$', weekly_maintenance_start_time):
            raise ValueError("Invalid value for `weekly_maintenance_start_time`, must be a follow pattern or equal to `/^[1-7]:([01]\d|2[0-3]):?([0-5]\d)$/`")

        self._weekly_maintenance_start_time = weekly_maintenance_start_time

    @property
    def metadata_configuration(self):
        """Gets the metadata_configuration of this FileCacheCreatingLustreConfiguration.


        :return: The metadata_configuration of this FileCacheCreatingLustreConfiguration.
        :rtype: CreateFileCacheLustreConfigurationMetadataConfiguration
        """
        return self._metadata_configuration

    @metadata_configuration.setter
    def metadata_configuration(self, metadata_configuration):
        """Sets the metadata_configuration of this FileCacheCreatingLustreConfiguration.


        :param metadata_configuration: The metadata_configuration of this FileCacheCreatingLustreConfiguration.
        :type metadata_configuration: CreateFileCacheLustreConfigurationMetadataConfiguration
        """

        self._metadata_configuration = metadata_configuration

    @property
    def log_configuration(self):
        """Gets the log_configuration of this FileCacheCreatingLustreConfiguration.


        :return: The log_configuration of this FileCacheCreatingLustreConfiguration.
        :rtype: FileCacheLustreConfigurationLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this FileCacheCreatingLustreConfiguration.


        :param log_configuration: The log_configuration of this FileCacheCreatingLustreConfiguration.
        :type log_configuration: FileCacheLustreConfigurationLogConfiguration
        """

        self._log_configuration = log_configuration
