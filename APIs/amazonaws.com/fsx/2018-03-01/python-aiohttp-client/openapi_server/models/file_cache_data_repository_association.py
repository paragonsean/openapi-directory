# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_cache_data_repository_association_nfs import FileCacheDataRepositoryAssociationNFS
from openapi_server import util


class FileCacheDataRepositoryAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_cache_path: str=None, data_repository_path: str=None, data_repository_subdirectories: List=None, nfs: FileCacheDataRepositoryAssociationNFS=None):
        """FileCacheDataRepositoryAssociation - a model defined in OpenAPI

        :param file_cache_path: The file_cache_path of this FileCacheDataRepositoryAssociation.
        :param data_repository_path: The data_repository_path of this FileCacheDataRepositoryAssociation.
        :param data_repository_subdirectories: The data_repository_subdirectories of this FileCacheDataRepositoryAssociation.
        :param nfs: The nfs of this FileCacheDataRepositoryAssociation.
        """
        self.openapi_types = {
            'file_cache_path': str,
            'data_repository_path': str,
            'data_repository_subdirectories': List,
            'nfs': FileCacheDataRepositoryAssociationNFS
        }

        self.attribute_map = {
            'file_cache_path': 'FileCachePath',
            'data_repository_path': 'DataRepositoryPath',
            'data_repository_subdirectories': 'DataRepositorySubdirectories',
            'nfs': 'NFS'
        }

        self._file_cache_path = file_cache_path
        self._data_repository_path = data_repository_path
        self._data_repository_subdirectories = data_repository_subdirectories
        self._nfs = nfs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileCacheDataRepositoryAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileCacheDataRepositoryAssociation of this FileCacheDataRepositoryAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_cache_path(self):
        """Gets the file_cache_path of this FileCacheDataRepositoryAssociation.


        :return: The file_cache_path of this FileCacheDataRepositoryAssociation.
        :rtype: str
        """
        return self._file_cache_path

    @file_cache_path.setter
    def file_cache_path(self, file_cache_path):
        """Sets the file_cache_path of this FileCacheDataRepositoryAssociation.


        :param file_cache_path: The file_cache_path of this FileCacheDataRepositoryAssociation.
        :type file_cache_path: str
        """
        if file_cache_path is None:
            raise ValueError("Invalid value for `file_cache_path`, must not be `None`")

        self._file_cache_path = file_cache_path

    @property
    def data_repository_path(self):
        """Gets the data_repository_path of this FileCacheDataRepositoryAssociation.


        :return: The data_repository_path of this FileCacheDataRepositoryAssociation.
        :rtype: str
        """
        return self._data_repository_path

    @data_repository_path.setter
    def data_repository_path(self, data_repository_path):
        """Sets the data_repository_path of this FileCacheDataRepositoryAssociation.


        :param data_repository_path: The data_repository_path of this FileCacheDataRepositoryAssociation.
        :type data_repository_path: str
        """
        if data_repository_path is None:
            raise ValueError("Invalid value for `data_repository_path`, must not be `None`")

        self._data_repository_path = data_repository_path

    @property
    def data_repository_subdirectories(self):
        """Gets the data_repository_subdirectories of this FileCacheDataRepositoryAssociation.


        :return: The data_repository_subdirectories of this FileCacheDataRepositoryAssociation.
        :rtype: List
        """
        return self._data_repository_subdirectories

    @data_repository_subdirectories.setter
    def data_repository_subdirectories(self, data_repository_subdirectories):
        """Sets the data_repository_subdirectories of this FileCacheDataRepositoryAssociation.


        :param data_repository_subdirectories: The data_repository_subdirectories of this FileCacheDataRepositoryAssociation.
        :type data_repository_subdirectories: List
        """

        self._data_repository_subdirectories = data_repository_subdirectories

    @property
    def nfs(self):
        """Gets the nfs of this FileCacheDataRepositoryAssociation.


        :return: The nfs of this FileCacheDataRepositoryAssociation.
        :rtype: FileCacheDataRepositoryAssociationNFS
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this FileCacheDataRepositoryAssociation.


        :param nfs: The nfs of this FileCacheDataRepositoryAssociation.
        :type nfs: FileCacheDataRepositoryAssociationNFS
        """

        self._nfs = nfs
