# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snaplock_retention_period_default_retention import SnaplockRetentionPeriodDefaultRetention
from openapi_server.models.snaplock_retention_period_maximum_retention import SnaplockRetentionPeriodMaximumRetention
from openapi_server.models.snaplock_retention_period_minimum_retention import SnaplockRetentionPeriodMinimumRetention
from openapi_server import util


class CreateSnaplockConfigurationRetentionPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_retention: SnaplockRetentionPeriodDefaultRetention=None, minimum_retention: SnaplockRetentionPeriodMinimumRetention=None, maximum_retention: SnaplockRetentionPeriodMaximumRetention=None):
        """CreateSnaplockConfigurationRetentionPeriod - a model defined in OpenAPI

        :param default_retention: The default_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :param minimum_retention: The minimum_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :param maximum_retention: The maximum_retention of this CreateSnaplockConfigurationRetentionPeriod.
        """
        self.openapi_types = {
            'default_retention': SnaplockRetentionPeriodDefaultRetention,
            'minimum_retention': SnaplockRetentionPeriodMinimumRetention,
            'maximum_retention': SnaplockRetentionPeriodMaximumRetention
        }

        self.attribute_map = {
            'default_retention': 'DefaultRetention',
            'minimum_retention': 'MinimumRetention',
            'maximum_retention': 'MaximumRetention'
        }

        self._default_retention = default_retention
        self._minimum_retention = minimum_retention
        self._maximum_retention = maximum_retention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSnaplockConfigurationRetentionPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSnaplockConfiguration_RetentionPeriod of this CreateSnaplockConfigurationRetentionPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_retention(self):
        """Gets the default_retention of this CreateSnaplockConfigurationRetentionPeriod.


        :return: The default_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :rtype: SnaplockRetentionPeriodDefaultRetention
        """
        return self._default_retention

    @default_retention.setter
    def default_retention(self, default_retention):
        """Sets the default_retention of this CreateSnaplockConfigurationRetentionPeriod.


        :param default_retention: The default_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :type default_retention: SnaplockRetentionPeriodDefaultRetention
        """
        if default_retention is None:
            raise ValueError("Invalid value for `default_retention`, must not be `None`")

        self._default_retention = default_retention

    @property
    def minimum_retention(self):
        """Gets the minimum_retention of this CreateSnaplockConfigurationRetentionPeriod.


        :return: The minimum_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :rtype: SnaplockRetentionPeriodMinimumRetention
        """
        return self._minimum_retention

    @minimum_retention.setter
    def minimum_retention(self, minimum_retention):
        """Sets the minimum_retention of this CreateSnaplockConfigurationRetentionPeriod.


        :param minimum_retention: The minimum_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :type minimum_retention: SnaplockRetentionPeriodMinimumRetention
        """
        if minimum_retention is None:
            raise ValueError("Invalid value for `minimum_retention`, must not be `None`")

        self._minimum_retention = minimum_retention

    @property
    def maximum_retention(self):
        """Gets the maximum_retention of this CreateSnaplockConfigurationRetentionPeriod.


        :return: The maximum_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :rtype: SnaplockRetentionPeriodMaximumRetention
        """
        return self._maximum_retention

    @maximum_retention.setter
    def maximum_retention(self, maximum_retention):
        """Sets the maximum_retention of this CreateSnaplockConfigurationRetentionPeriod.


        :param maximum_retention: The maximum_retention of this CreateSnaplockConfigurationRetentionPeriod.
        :type maximum_retention: SnaplockRetentionPeriodMaximumRetention
        """
        if maximum_retention is None:
            raise ValueError("Invalid value for `maximum_retention`, must not be `None`")

        self._maximum_retention = maximum_retention
