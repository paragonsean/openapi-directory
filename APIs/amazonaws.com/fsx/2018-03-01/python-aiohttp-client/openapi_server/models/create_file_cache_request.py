# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_file_cache_request_lustre_configuration import CreateFileCacheRequestLustreConfiguration
from openapi_server.models.file_cache_type import FileCacheType
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateFileCacheRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, file_cache_type: FileCacheType=None, file_cache_type_version: str=None, storage_capacity: int=None, subnet_ids: List[str]=None, security_group_ids: List=None, tags: List[Tag]=None, copy_tags_to_data_repository_associations: bool=None, kms_key_id: str=None, lustre_configuration: CreateFileCacheRequestLustreConfiguration=None, data_repository_associations: List=None):
        """CreateFileCacheRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateFileCacheRequest.
        :param file_cache_type: The file_cache_type of this CreateFileCacheRequest.
        :param file_cache_type_version: The file_cache_type_version of this CreateFileCacheRequest.
        :param storage_capacity: The storage_capacity of this CreateFileCacheRequest.
        :param subnet_ids: The subnet_ids of this CreateFileCacheRequest.
        :param security_group_ids: The security_group_ids of this CreateFileCacheRequest.
        :param tags: The tags of this CreateFileCacheRequest.
        :param copy_tags_to_data_repository_associations: The copy_tags_to_data_repository_associations of this CreateFileCacheRequest.
        :param kms_key_id: The kms_key_id of this CreateFileCacheRequest.
        :param lustre_configuration: The lustre_configuration of this CreateFileCacheRequest.
        :param data_repository_associations: The data_repository_associations of this CreateFileCacheRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'file_cache_type': FileCacheType,
            'file_cache_type_version': str,
            'storage_capacity': int,
            'subnet_ids': List[str],
            'security_group_ids': List,
            'tags': List[Tag],
            'copy_tags_to_data_repository_associations': bool,
            'kms_key_id': str,
            'lustre_configuration': CreateFileCacheRequestLustreConfiguration,
            'data_repository_associations': List
        }

        self.attribute_map = {
            'client_request_token': 'ClientRequestToken',
            'file_cache_type': 'FileCacheType',
            'file_cache_type_version': 'FileCacheTypeVersion',
            'storage_capacity': 'StorageCapacity',
            'subnet_ids': 'SubnetIds',
            'security_group_ids': 'SecurityGroupIds',
            'tags': 'Tags',
            'copy_tags_to_data_repository_associations': 'CopyTagsToDataRepositoryAssociations',
            'kms_key_id': 'KmsKeyId',
            'lustre_configuration': 'LustreConfiguration',
            'data_repository_associations': 'DataRepositoryAssociations'
        }

        self._client_request_token = client_request_token
        self._file_cache_type = file_cache_type
        self._file_cache_type_version = file_cache_type_version
        self._storage_capacity = storage_capacity
        self._subnet_ids = subnet_ids
        self._security_group_ids = security_group_ids
        self._tags = tags
        self._copy_tags_to_data_repository_associations = copy_tags_to_data_repository_associations
        self._kms_key_id = kms_key_id
        self._lustre_configuration = lustre_configuration
        self._data_repository_associations = data_repository_associations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFileCacheRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFileCacheRequest of this CreateFileCacheRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateFileCacheRequest.


        :return: The client_request_token of this CreateFileCacheRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateFileCacheRequest.


        :param client_request_token: The client_request_token of this CreateFileCacheRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def file_cache_type(self):
        """Gets the file_cache_type of this CreateFileCacheRequest.


        :return: The file_cache_type of this CreateFileCacheRequest.
        :rtype: FileCacheType
        """
        return self._file_cache_type

    @file_cache_type.setter
    def file_cache_type(self, file_cache_type):
        """Sets the file_cache_type of this CreateFileCacheRequest.


        :param file_cache_type: The file_cache_type of this CreateFileCacheRequest.
        :type file_cache_type: FileCacheType
        """
        if file_cache_type is None:
            raise ValueError("Invalid value for `file_cache_type`, must not be `None`")

        self._file_cache_type = file_cache_type

    @property
    def file_cache_type_version(self):
        """Gets the file_cache_type_version of this CreateFileCacheRequest.


        :return: The file_cache_type_version of this CreateFileCacheRequest.
        :rtype: str
        """
        return self._file_cache_type_version

    @file_cache_type_version.setter
    def file_cache_type_version(self, file_cache_type_version):
        """Sets the file_cache_type_version of this CreateFileCacheRequest.


        :param file_cache_type_version: The file_cache_type_version of this CreateFileCacheRequest.
        :type file_cache_type_version: str
        """
        if file_cache_type_version is None:
            raise ValueError("Invalid value for `file_cache_type_version`, must not be `None`")

        self._file_cache_type_version = file_cache_type_version

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this CreateFileCacheRequest.


        :return: The storage_capacity of this CreateFileCacheRequest.
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this CreateFileCacheRequest.


        :param storage_capacity: The storage_capacity of this CreateFileCacheRequest.
        :type storage_capacity: int
        """
        if storage_capacity is None:
            raise ValueError("Invalid value for `storage_capacity`, must not be `None`")

        self._storage_capacity = storage_capacity

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this CreateFileCacheRequest.

        A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.

        :return: The subnet_ids of this CreateFileCacheRequest.
        :rtype: List[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this CreateFileCacheRequest.

        A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.

        :param subnet_ids: The subnet_ids of this CreateFileCacheRequest.
        :type subnet_ids: List[str]
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")
        if subnet_ids is not None and len(subnet_ids) > 50:
            raise ValueError("Invalid value for `subnet_ids`, number of items must be less than or equal to `50`")

        self._subnet_ids = subnet_ids

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateFileCacheRequest.


        :return: The security_group_ids of this CreateFileCacheRequest.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateFileCacheRequest.


        :param security_group_ids: The security_group_ids of this CreateFileCacheRequest.
        :type security_group_ids: List
        """

        self._security_group_ids = security_group_ids

    @property
    def tags(self):
        """Gets the tags of this CreateFileCacheRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateFileCacheRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFileCacheRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateFileCacheRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def copy_tags_to_data_repository_associations(self):
        """Gets the copy_tags_to_data_repository_associations of this CreateFileCacheRequest.


        :return: The copy_tags_to_data_repository_associations of this CreateFileCacheRequest.
        :rtype: bool
        """
        return self._copy_tags_to_data_repository_associations

    @copy_tags_to_data_repository_associations.setter
    def copy_tags_to_data_repository_associations(self, copy_tags_to_data_repository_associations):
        """Sets the copy_tags_to_data_repository_associations of this CreateFileCacheRequest.


        :param copy_tags_to_data_repository_associations: The copy_tags_to_data_repository_associations of this CreateFileCacheRequest.
        :type copy_tags_to_data_repository_associations: bool
        """

        self._copy_tags_to_data_repository_associations = copy_tags_to_data_repository_associations

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateFileCacheRequest.


        :return: The kms_key_id of this CreateFileCacheRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateFileCacheRequest.


        :param kms_key_id: The kms_key_id of this CreateFileCacheRequest.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def lustre_configuration(self):
        """Gets the lustre_configuration of this CreateFileCacheRequest.


        :return: The lustre_configuration of this CreateFileCacheRequest.
        :rtype: CreateFileCacheRequestLustreConfiguration
        """
        return self._lustre_configuration

    @lustre_configuration.setter
    def lustre_configuration(self, lustre_configuration):
        """Sets the lustre_configuration of this CreateFileCacheRequest.


        :param lustre_configuration: The lustre_configuration of this CreateFileCacheRequest.
        :type lustre_configuration: CreateFileCacheRequestLustreConfiguration
        """

        self._lustre_configuration = lustre_configuration

    @property
    def data_repository_associations(self):
        """Gets the data_repository_associations of this CreateFileCacheRequest.


        :return: The data_repository_associations of this CreateFileCacheRequest.
        :rtype: List
        """
        return self._data_repository_associations

    @data_repository_associations.setter
    def data_repository_associations(self, data_repository_associations):
        """Sets the data_repository_associations of this CreateFileCacheRequest.


        :param data_repository_associations: The data_repository_associations of this CreateFileCacheRequest.
        :type data_repository_associations: List
        """

        self._data_repository_associations = data_repository_associations
