# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeSnapshotsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot_ids: List=None, filters: List=None, max_results: int=None, next_token: str=None):
        """DescribeSnapshotsRequest - a model defined in OpenAPI

        :param snapshot_ids: The snapshot_ids of this DescribeSnapshotsRequest.
        :param filters: The filters of this DescribeSnapshotsRequest.
        :param max_results: The max_results of this DescribeSnapshotsRequest.
        :param next_token: The next_token of this DescribeSnapshotsRequest.
        """
        self.openapi_types = {
            'snapshot_ids': List,
            'filters': List,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'snapshot_ids': 'SnapshotIds',
            'filters': 'Filters',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._snapshot_ids = snapshot_ids
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSnapshotsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSnapshotsRequest of this DescribeSnapshotsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot_ids(self):
        """Gets the snapshot_ids of this DescribeSnapshotsRequest.


        :return: The snapshot_ids of this DescribeSnapshotsRequest.
        :rtype: List
        """
        return self._snapshot_ids

    @snapshot_ids.setter
    def snapshot_ids(self, snapshot_ids):
        """Sets the snapshot_ids of this DescribeSnapshotsRequest.


        :param snapshot_ids: The snapshot_ids of this DescribeSnapshotsRequest.
        :type snapshot_ids: List
        """

        self._snapshot_ids = snapshot_ids

    @property
    def filters(self):
        """Gets the filters of this DescribeSnapshotsRequest.


        :return: The filters of this DescribeSnapshotsRequest.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeSnapshotsRequest.


        :param filters: The filters of this DescribeSnapshotsRequest.
        :type filters: List
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this DescribeSnapshotsRequest.

        The maximum number of resources to return in the response. This value must be an integer greater than zero.

        :return: The max_results of this DescribeSnapshotsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeSnapshotsRequest.

        The maximum number of resources to return in the response. This value must be an integer greater than zero.

        :param max_results: The max_results of this DescribeSnapshotsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 2147483647:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `2147483647`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeSnapshotsRequest.

        (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.

        :return: The next_token of this DescribeSnapshotsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeSnapshotsRequest.

        (Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.

        :param next_token: The next_token of this DescribeSnapshotsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 255:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `255`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._next_token = next_token
