# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.administrative_action_failure_details import AdministrativeActionFailureDetails
from openapi_server.models.administrative_action_target_file_system_values import AdministrativeActionTargetFileSystemValues
from openapi_server.models.administrative_action_type import AdministrativeActionType
from openapi_server.models.snapshot import Snapshot
from openapi_server.models.status import Status
from openapi_server.models.volume import Volume
from openapi_server import util


class AdministrativeAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrative_action_type: AdministrativeActionType=None, progress_percent: int=None, request_time: datetime=None, status: Status=None, target_file_system_values: AdministrativeActionTargetFileSystemValues=None, failure_details: AdministrativeActionFailureDetails=None, target_volume_values: Volume=None, target_snapshot_values: Snapshot=None):
        """AdministrativeAction - a model defined in OpenAPI

        :param administrative_action_type: The administrative_action_type of this AdministrativeAction.
        :param progress_percent: The progress_percent of this AdministrativeAction.
        :param request_time: The request_time of this AdministrativeAction.
        :param status: The status of this AdministrativeAction.
        :param target_file_system_values: The target_file_system_values of this AdministrativeAction.
        :param failure_details: The failure_details of this AdministrativeAction.
        :param target_volume_values: The target_volume_values of this AdministrativeAction.
        :param target_snapshot_values: The target_snapshot_values of this AdministrativeAction.
        """
        self.openapi_types = {
            'administrative_action_type': AdministrativeActionType,
            'progress_percent': int,
            'request_time': datetime,
            'status': Status,
            'target_file_system_values': AdministrativeActionTargetFileSystemValues,
            'failure_details': AdministrativeActionFailureDetails,
            'target_volume_values': Volume,
            'target_snapshot_values': Snapshot
        }

        self.attribute_map = {
            'administrative_action_type': 'AdministrativeActionType',
            'progress_percent': 'ProgressPercent',
            'request_time': 'RequestTime',
            'status': 'Status',
            'target_file_system_values': 'TargetFileSystemValues',
            'failure_details': 'FailureDetails',
            'target_volume_values': 'TargetVolumeValues',
            'target_snapshot_values': 'TargetSnapshotValues'
        }

        self._administrative_action_type = administrative_action_type
        self._progress_percent = progress_percent
        self._request_time = request_time
        self._status = status
        self._target_file_system_values = target_file_system_values
        self._failure_details = failure_details
        self._target_volume_values = target_volume_values
        self._target_snapshot_values = target_snapshot_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdministrativeAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdministrativeAction of this AdministrativeAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrative_action_type(self):
        """Gets the administrative_action_type of this AdministrativeAction.


        :return: The administrative_action_type of this AdministrativeAction.
        :rtype: AdministrativeActionType
        """
        return self._administrative_action_type

    @administrative_action_type.setter
    def administrative_action_type(self, administrative_action_type):
        """Sets the administrative_action_type of this AdministrativeAction.


        :param administrative_action_type: The administrative_action_type of this AdministrativeAction.
        :type administrative_action_type: AdministrativeActionType
        """

        self._administrative_action_type = administrative_action_type

    @property
    def progress_percent(self):
        """Gets the progress_percent of this AdministrativeAction.


        :return: The progress_percent of this AdministrativeAction.
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this AdministrativeAction.


        :param progress_percent: The progress_percent of this AdministrativeAction.
        :type progress_percent: int
        """

        self._progress_percent = progress_percent

    @property
    def request_time(self):
        """Gets the request_time of this AdministrativeAction.


        :return: The request_time of this AdministrativeAction.
        :rtype: datetime
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this AdministrativeAction.


        :param request_time: The request_time of this AdministrativeAction.
        :type request_time: datetime
        """

        self._request_time = request_time

    @property
    def status(self):
        """Gets the status of this AdministrativeAction.


        :return: The status of this AdministrativeAction.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdministrativeAction.


        :param status: The status of this AdministrativeAction.
        :type status: Status
        """

        self._status = status

    @property
    def target_file_system_values(self):
        """Gets the target_file_system_values of this AdministrativeAction.


        :return: The target_file_system_values of this AdministrativeAction.
        :rtype: AdministrativeActionTargetFileSystemValues
        """
        return self._target_file_system_values

    @target_file_system_values.setter
    def target_file_system_values(self, target_file_system_values):
        """Sets the target_file_system_values of this AdministrativeAction.


        :param target_file_system_values: The target_file_system_values of this AdministrativeAction.
        :type target_file_system_values: AdministrativeActionTargetFileSystemValues
        """

        self._target_file_system_values = target_file_system_values

    @property
    def failure_details(self):
        """Gets the failure_details of this AdministrativeAction.


        :return: The failure_details of this AdministrativeAction.
        :rtype: AdministrativeActionFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this AdministrativeAction.


        :param failure_details: The failure_details of this AdministrativeAction.
        :type failure_details: AdministrativeActionFailureDetails
        """

        self._failure_details = failure_details

    @property
    def target_volume_values(self):
        """Gets the target_volume_values of this AdministrativeAction.


        :return: The target_volume_values of this AdministrativeAction.
        :rtype: Volume
        """
        return self._target_volume_values

    @target_volume_values.setter
    def target_volume_values(self, target_volume_values):
        """Sets the target_volume_values of this AdministrativeAction.


        :param target_volume_values: The target_volume_values of this AdministrativeAction.
        :type target_volume_values: Volume
        """

        self._target_volume_values = target_volume_values

    @property
    def target_snapshot_values(self):
        """Gets the target_snapshot_values of this AdministrativeAction.


        :return: The target_snapshot_values of this AdministrativeAction.
        :rtype: Snapshot
        """
        return self._target_snapshot_values

    @target_snapshot_values.setter
    def target_snapshot_values(self, target_snapshot_values):
        """Sets the target_snapshot_values of this AdministrativeAction.


        :param target_snapshot_values: The target_snapshot_values of this AdministrativeAction.
        :type target_snapshot_values: Snapshot
        """

        self._target_snapshot_values = target_snapshot_values
