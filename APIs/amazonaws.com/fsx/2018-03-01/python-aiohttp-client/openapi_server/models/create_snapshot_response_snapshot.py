# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lifecycle_transition_reason import LifecycleTransitionReason
from openapi_server.models.snapshot_lifecycle import SnapshotLifecycle
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateSnapshotResponseSnapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, snapshot_id: str=None, name: str=None, volume_id: str=None, creation_time: datetime=None, lifecycle: SnapshotLifecycle=None, lifecycle_transition_reason: LifecycleTransitionReason=None, tags: List[Tag]=None, administrative_actions: List=None):
        """CreateSnapshotResponseSnapshot - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this CreateSnapshotResponseSnapshot.
        :param snapshot_id: The snapshot_id of this CreateSnapshotResponseSnapshot.
        :param name: The name of this CreateSnapshotResponseSnapshot.
        :param volume_id: The volume_id of this CreateSnapshotResponseSnapshot.
        :param creation_time: The creation_time of this CreateSnapshotResponseSnapshot.
        :param lifecycle: The lifecycle of this CreateSnapshotResponseSnapshot.
        :param lifecycle_transition_reason: The lifecycle_transition_reason of this CreateSnapshotResponseSnapshot.
        :param tags: The tags of this CreateSnapshotResponseSnapshot.
        :param administrative_actions: The administrative_actions of this CreateSnapshotResponseSnapshot.
        """
        self.openapi_types = {
            'resource_arn': str,
            'snapshot_id': str,
            'name': str,
            'volume_id': str,
            'creation_time': datetime,
            'lifecycle': SnapshotLifecycle,
            'lifecycle_transition_reason': LifecycleTransitionReason,
            'tags': List[Tag],
            'administrative_actions': List
        }

        self.attribute_map = {
            'resource_arn': 'ResourceARN',
            'snapshot_id': 'SnapshotId',
            'name': 'Name',
            'volume_id': 'VolumeId',
            'creation_time': 'CreationTime',
            'lifecycle': 'Lifecycle',
            'lifecycle_transition_reason': 'LifecycleTransitionReason',
            'tags': 'Tags',
            'administrative_actions': 'AdministrativeActions'
        }

        self._resource_arn = resource_arn
        self._snapshot_id = snapshot_id
        self._name = name
        self._volume_id = volume_id
        self._creation_time = creation_time
        self._lifecycle = lifecycle
        self._lifecycle_transition_reason = lifecycle_transition_reason
        self._tags = tags
        self._administrative_actions = administrative_actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSnapshotResponseSnapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSnapshotResponse_Snapshot of this CreateSnapshotResponseSnapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this CreateSnapshotResponseSnapshot.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this CreateSnapshotResponseSnapshot.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this CreateSnapshotResponseSnapshot.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this CreateSnapshotResponseSnapshot.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this CreateSnapshotResponseSnapshot.


        :return: The snapshot_id of this CreateSnapshotResponseSnapshot.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this CreateSnapshotResponseSnapshot.


        :param snapshot_id: The snapshot_id of this CreateSnapshotResponseSnapshot.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def name(self):
        """Gets the name of this CreateSnapshotResponseSnapshot.


        :return: The name of this CreateSnapshotResponseSnapshot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSnapshotResponseSnapshot.


        :param name: The name of this CreateSnapshotResponseSnapshot.
        :type name: str
        """

        self._name = name

    @property
    def volume_id(self):
        """Gets the volume_id of this CreateSnapshotResponseSnapshot.


        :return: The volume_id of this CreateSnapshotResponseSnapshot.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this CreateSnapshotResponseSnapshot.


        :param volume_id: The volume_id of this CreateSnapshotResponseSnapshot.
        :type volume_id: str
        """

        self._volume_id = volume_id

    @property
    def creation_time(self):
        """Gets the creation_time of this CreateSnapshotResponseSnapshot.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :return: The creation_time of this CreateSnapshotResponseSnapshot.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CreateSnapshotResponseSnapshot.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :param creation_time: The creation_time of this CreateSnapshotResponseSnapshot.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def lifecycle(self):
        """Gets the lifecycle of this CreateSnapshotResponseSnapshot.


        :return: The lifecycle of this CreateSnapshotResponseSnapshot.
        :rtype: SnapshotLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this CreateSnapshotResponseSnapshot.


        :param lifecycle: The lifecycle of this CreateSnapshotResponseSnapshot.
        :type lifecycle: SnapshotLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def lifecycle_transition_reason(self):
        """Gets the lifecycle_transition_reason of this CreateSnapshotResponseSnapshot.


        :return: The lifecycle_transition_reason of this CreateSnapshotResponseSnapshot.
        :rtype: LifecycleTransitionReason
        """
        return self._lifecycle_transition_reason

    @lifecycle_transition_reason.setter
    def lifecycle_transition_reason(self, lifecycle_transition_reason):
        """Sets the lifecycle_transition_reason of this CreateSnapshotResponseSnapshot.


        :param lifecycle_transition_reason: The lifecycle_transition_reason of this CreateSnapshotResponseSnapshot.
        :type lifecycle_transition_reason: LifecycleTransitionReason
        """

        self._lifecycle_transition_reason = lifecycle_transition_reason

    @property
    def tags(self):
        """Gets the tags of this CreateSnapshotResponseSnapshot.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateSnapshotResponseSnapshot.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSnapshotResponseSnapshot.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateSnapshotResponseSnapshot.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def administrative_actions(self):
        """Gets the administrative_actions of this CreateSnapshotResponseSnapshot.


        :return: The administrative_actions of this CreateSnapshotResponseSnapshot.
        :rtype: List
        """
        return self._administrative_actions

    @administrative_actions.setter
    def administrative_actions(self, administrative_actions):
        """Sets the administrative_actions of this CreateSnapshotResponseSnapshot.


        :param administrative_actions: The administrative_actions of this CreateSnapshotResponseSnapshot.
        :type administrative_actions: List
        """

        self._administrative_actions = administrative_actions
