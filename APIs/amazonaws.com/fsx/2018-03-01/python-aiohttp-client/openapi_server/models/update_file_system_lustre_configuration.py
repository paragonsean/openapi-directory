# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_import_policy_type import AutoImportPolicyType
from openapi_server.models.data_compression_type import DataCompressionType
from openapi_server.models.update_file_system_lustre_configuration_log_configuration import UpdateFileSystemLustreConfigurationLogConfiguration
from openapi_server.models.update_file_system_lustre_configuration_root_squash_configuration import UpdateFileSystemLustreConfigurationRootSquashConfiguration
import re
from openapi_server import util


class UpdateFileSystemLustreConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, weekly_maintenance_start_time: str=None, daily_automatic_backup_start_time: str=None, automatic_backup_retention_days: int=None, auto_import_policy: AutoImportPolicyType=None, data_compression_type: DataCompressionType=None, log_configuration: UpdateFileSystemLustreConfigurationLogConfiguration=None, root_squash_configuration: UpdateFileSystemLustreConfigurationRootSquashConfiguration=None):
        """UpdateFileSystemLustreConfiguration - a model defined in OpenAPI

        :param weekly_maintenance_start_time: The weekly_maintenance_start_time of this UpdateFileSystemLustreConfiguration.
        :param daily_automatic_backup_start_time: The daily_automatic_backup_start_time of this UpdateFileSystemLustreConfiguration.
        :param automatic_backup_retention_days: The automatic_backup_retention_days of this UpdateFileSystemLustreConfiguration.
        :param auto_import_policy: The auto_import_policy of this UpdateFileSystemLustreConfiguration.
        :param data_compression_type: The data_compression_type of this UpdateFileSystemLustreConfiguration.
        :param log_configuration: The log_configuration of this UpdateFileSystemLustreConfiguration.
        :param root_squash_configuration: The root_squash_configuration of this UpdateFileSystemLustreConfiguration.
        """
        self.openapi_types = {
            'weekly_maintenance_start_time': str,
            'daily_automatic_backup_start_time': str,
            'automatic_backup_retention_days': int,
            'auto_import_policy': AutoImportPolicyType,
            'data_compression_type': DataCompressionType,
            'log_configuration': UpdateFileSystemLustreConfigurationLogConfiguration,
            'root_squash_configuration': UpdateFileSystemLustreConfigurationRootSquashConfiguration
        }

        self.attribute_map = {
            'weekly_maintenance_start_time': 'WeeklyMaintenanceStartTime',
            'daily_automatic_backup_start_time': 'DailyAutomaticBackupStartTime',
            'automatic_backup_retention_days': 'AutomaticBackupRetentionDays',
            'auto_import_policy': 'AutoImportPolicy',
            'data_compression_type': 'DataCompressionType',
            'log_configuration': 'LogConfiguration',
            'root_squash_configuration': 'RootSquashConfiguration'
        }

        self._weekly_maintenance_start_time = weekly_maintenance_start_time
        self._daily_automatic_backup_start_time = daily_automatic_backup_start_time
        self._automatic_backup_retention_days = automatic_backup_retention_days
        self._auto_import_policy = auto_import_policy
        self._data_compression_type = data_compression_type
        self._log_configuration = log_configuration
        self._root_squash_configuration = root_squash_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFileSystemLustreConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFileSystemLustreConfiguration of this UpdateFileSystemLustreConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weekly_maintenance_start_time(self):
        """Gets the weekly_maintenance_start_time of this UpdateFileSystemLustreConfiguration.


        :return: The weekly_maintenance_start_time of this UpdateFileSystemLustreConfiguration.
        :rtype: str
        """
        return self._weekly_maintenance_start_time

    @weekly_maintenance_start_time.setter
    def weekly_maintenance_start_time(self, weekly_maintenance_start_time):
        """Sets the weekly_maintenance_start_time of this UpdateFileSystemLustreConfiguration.


        :param weekly_maintenance_start_time: The weekly_maintenance_start_time of this UpdateFileSystemLustreConfiguration.
        :type weekly_maintenance_start_time: str
        """

        self._weekly_maintenance_start_time = weekly_maintenance_start_time

    @property
    def daily_automatic_backup_start_time(self):
        """Gets the daily_automatic_backup_start_time of this UpdateFileSystemLustreConfiguration.

        A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. 

        :return: The daily_automatic_backup_start_time of this UpdateFileSystemLustreConfiguration.
        :rtype: str
        """
        return self._daily_automatic_backup_start_time

    @daily_automatic_backup_start_time.setter
    def daily_automatic_backup_start_time(self, daily_automatic_backup_start_time):
        """Sets the daily_automatic_backup_start_time of this UpdateFileSystemLustreConfiguration.

        A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. 

        :param daily_automatic_backup_start_time: The daily_automatic_backup_start_time of this UpdateFileSystemLustreConfiguration.
        :type daily_automatic_backup_start_time: str
        """
        if daily_automatic_backup_start_time is not None and len(daily_automatic_backup_start_time) > 5:
            raise ValueError("Invalid value for `daily_automatic_backup_start_time`, length must be less than or equal to `5`")
        if daily_automatic_backup_start_time is not None and len(daily_automatic_backup_start_time) < 5:
            raise ValueError("Invalid value for `daily_automatic_backup_start_time`, length must be greater than or equal to `5`")
        if daily_automatic_backup_start_time is not None and not re.search(r'^([01]\d|2[0-3]):?([0-5]\d)$', daily_automatic_backup_start_time):
            raise ValueError("Invalid value for `daily_automatic_backup_start_time`, must be a follow pattern or equal to `/^([01]\d|2[0-3]):?([0-5]\d)$/`")

        self._daily_automatic_backup_start_time = daily_automatic_backup_start_time

    @property
    def automatic_backup_retention_days(self):
        """Gets the automatic_backup_retention_days of this UpdateFileSystemLustreConfiguration.


        :return: The automatic_backup_retention_days of this UpdateFileSystemLustreConfiguration.
        :rtype: int
        """
        return self._automatic_backup_retention_days

    @automatic_backup_retention_days.setter
    def automatic_backup_retention_days(self, automatic_backup_retention_days):
        """Sets the automatic_backup_retention_days of this UpdateFileSystemLustreConfiguration.


        :param automatic_backup_retention_days: The automatic_backup_retention_days of this UpdateFileSystemLustreConfiguration.
        :type automatic_backup_retention_days: int
        """

        self._automatic_backup_retention_days = automatic_backup_retention_days

    @property
    def auto_import_policy(self):
        """Gets the auto_import_policy of this UpdateFileSystemLustreConfiguration.


        :return: The auto_import_policy of this UpdateFileSystemLustreConfiguration.
        :rtype: AutoImportPolicyType
        """
        return self._auto_import_policy

    @auto_import_policy.setter
    def auto_import_policy(self, auto_import_policy):
        """Sets the auto_import_policy of this UpdateFileSystemLustreConfiguration.


        :param auto_import_policy: The auto_import_policy of this UpdateFileSystemLustreConfiguration.
        :type auto_import_policy: AutoImportPolicyType
        """

        self._auto_import_policy = auto_import_policy

    @property
    def data_compression_type(self):
        """Gets the data_compression_type of this UpdateFileSystemLustreConfiguration.


        :return: The data_compression_type of this UpdateFileSystemLustreConfiguration.
        :rtype: DataCompressionType
        """
        return self._data_compression_type

    @data_compression_type.setter
    def data_compression_type(self, data_compression_type):
        """Sets the data_compression_type of this UpdateFileSystemLustreConfiguration.


        :param data_compression_type: The data_compression_type of this UpdateFileSystemLustreConfiguration.
        :type data_compression_type: DataCompressionType
        """

        self._data_compression_type = data_compression_type

    @property
    def log_configuration(self):
        """Gets the log_configuration of this UpdateFileSystemLustreConfiguration.


        :return: The log_configuration of this UpdateFileSystemLustreConfiguration.
        :rtype: UpdateFileSystemLustreConfigurationLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this UpdateFileSystemLustreConfiguration.


        :param log_configuration: The log_configuration of this UpdateFileSystemLustreConfiguration.
        :type log_configuration: UpdateFileSystemLustreConfigurationLogConfiguration
        """

        self._log_configuration = log_configuration

    @property
    def root_squash_configuration(self):
        """Gets the root_squash_configuration of this UpdateFileSystemLustreConfiguration.


        :return: The root_squash_configuration of this UpdateFileSystemLustreConfiguration.
        :rtype: UpdateFileSystemLustreConfigurationRootSquashConfiguration
        """
        return self._root_squash_configuration

    @root_squash_configuration.setter
    def root_squash_configuration(self, root_squash_configuration):
        """Sets the root_squash_configuration of this UpdateFileSystemLustreConfiguration.


        :param root_squash_configuration: The root_squash_configuration of this UpdateFileSystemLustreConfiguration.
        :type root_squash_configuration: UpdateFileSystemLustreConfigurationRootSquashConfiguration
        """

        self._root_squash_configuration = root_squash_configuration
