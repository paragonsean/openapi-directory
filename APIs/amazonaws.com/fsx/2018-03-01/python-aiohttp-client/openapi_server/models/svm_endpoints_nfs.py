# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SvmEndpointsNfs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_name: str=None, ip_addresses: List=None):
        """SvmEndpointsNfs - a model defined in OpenAPI

        :param dns_name: The dns_name of this SvmEndpointsNfs.
        :param ip_addresses: The ip_addresses of this SvmEndpointsNfs.
        """
        self.openapi_types = {
            'dns_name': str,
            'ip_addresses': List
        }

        self.attribute_map = {
            'dns_name': 'DNSName',
            'ip_addresses': 'IpAddresses'
        }

        self._dns_name = dns_name
        self._ip_addresses = ip_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SvmEndpointsNfs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SvmEndpoints_Nfs of this SvmEndpointsNfs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_name(self):
        """Gets the dns_name of this SvmEndpointsNfs.

        The file system's DNS name. You can mount your file system using its DNS name.

        :return: The dns_name of this SvmEndpointsNfs.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this SvmEndpointsNfs.

        The file system's DNS name. You can mount your file system using its DNS name.

        :param dns_name: The dns_name of this SvmEndpointsNfs.
        :type dns_name: str
        """
        if dns_name is not None and len(dns_name) > 275:
            raise ValueError("Invalid value for `dns_name`, length must be less than or equal to `275`")
        if dns_name is not None and len(dns_name) < 16:
            raise ValueError("Invalid value for `dns_name`, length must be greater than or equal to `16`")
        if dns_name is not None and not re.search(r'^((fs|fc)i?-[0-9a-f]{8,}\..{4,253})$', dns_name):
            raise ValueError("Invalid value for `dns_name`, must be a follow pattern or equal to `/^((fs|fc)i?-[0-9a-f]{8,}\..{4,253})$/`")

        self._dns_name = dns_name

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this SvmEndpointsNfs.


        :return: The ip_addresses of this SvmEndpointsNfs.
        :rtype: List
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this SvmEndpointsNfs.


        :param ip_addresses: The ip_addresses of this SvmEndpointsNfs.
        :type ip_addresses: List
        """

        self._ip_addresses = ip_addresses
