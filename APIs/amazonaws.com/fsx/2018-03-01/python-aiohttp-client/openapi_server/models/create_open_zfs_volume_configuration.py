# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_open_zfs_volume_configuration_origin_snapshot import CreateOpenZFSVolumeConfigurationOriginSnapshot
from openapi_server.models.open_zfs_data_compression_type import OpenZFSDataCompressionType
from openapi_server import util


class CreateOpenZFSVolumeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent_volume_id: str=None, storage_capacity_reservation_gi_b: int=None, storage_capacity_quota_gi_b: int=None, record_size_ki_b: int=None, data_compression_type: OpenZFSDataCompressionType=None, copy_tags_to_snapshots: bool=None, origin_snapshot: CreateOpenZFSVolumeConfigurationOriginSnapshot=None, read_only: bool=None, nfs_exports: List=None, user_and_group_quotas: List=None):
        """CreateOpenZFSVolumeConfiguration - a model defined in OpenAPI

        :param parent_volume_id: The parent_volume_id of this CreateOpenZFSVolumeConfiguration.
        :param storage_capacity_reservation_gi_b: The storage_capacity_reservation_gi_b of this CreateOpenZFSVolumeConfiguration.
        :param storage_capacity_quota_gi_b: The storage_capacity_quota_gi_b of this CreateOpenZFSVolumeConfiguration.
        :param record_size_ki_b: The record_size_ki_b of this CreateOpenZFSVolumeConfiguration.
        :param data_compression_type: The data_compression_type of this CreateOpenZFSVolumeConfiguration.
        :param copy_tags_to_snapshots: The copy_tags_to_snapshots of this CreateOpenZFSVolumeConfiguration.
        :param origin_snapshot: The origin_snapshot of this CreateOpenZFSVolumeConfiguration.
        :param read_only: The read_only of this CreateOpenZFSVolumeConfiguration.
        :param nfs_exports: The nfs_exports of this CreateOpenZFSVolumeConfiguration.
        :param user_and_group_quotas: The user_and_group_quotas of this CreateOpenZFSVolumeConfiguration.
        """
        self.openapi_types = {
            'parent_volume_id': str,
            'storage_capacity_reservation_gi_b': int,
            'storage_capacity_quota_gi_b': int,
            'record_size_ki_b': int,
            'data_compression_type': OpenZFSDataCompressionType,
            'copy_tags_to_snapshots': bool,
            'origin_snapshot': CreateOpenZFSVolumeConfigurationOriginSnapshot,
            'read_only': bool,
            'nfs_exports': List,
            'user_and_group_quotas': List
        }

        self.attribute_map = {
            'parent_volume_id': 'ParentVolumeId',
            'storage_capacity_reservation_gi_b': 'StorageCapacityReservationGiB',
            'storage_capacity_quota_gi_b': 'StorageCapacityQuotaGiB',
            'record_size_ki_b': 'RecordSizeKiB',
            'data_compression_type': 'DataCompressionType',
            'copy_tags_to_snapshots': 'CopyTagsToSnapshots',
            'origin_snapshot': 'OriginSnapshot',
            'read_only': 'ReadOnly',
            'nfs_exports': 'NfsExports',
            'user_and_group_quotas': 'UserAndGroupQuotas'
        }

        self._parent_volume_id = parent_volume_id
        self._storage_capacity_reservation_gi_b = storage_capacity_reservation_gi_b
        self._storage_capacity_quota_gi_b = storage_capacity_quota_gi_b
        self._record_size_ki_b = record_size_ki_b
        self._data_compression_type = data_compression_type
        self._copy_tags_to_snapshots = copy_tags_to_snapshots
        self._origin_snapshot = origin_snapshot
        self._read_only = read_only
        self._nfs_exports = nfs_exports
        self._user_and_group_quotas = user_and_group_quotas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOpenZFSVolumeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOpenZFSVolumeConfiguration of this CreateOpenZFSVolumeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent_volume_id(self):
        """Gets the parent_volume_id of this CreateOpenZFSVolumeConfiguration.


        :return: The parent_volume_id of this CreateOpenZFSVolumeConfiguration.
        :rtype: str
        """
        return self._parent_volume_id

    @parent_volume_id.setter
    def parent_volume_id(self, parent_volume_id):
        """Sets the parent_volume_id of this CreateOpenZFSVolumeConfiguration.


        :param parent_volume_id: The parent_volume_id of this CreateOpenZFSVolumeConfiguration.
        :type parent_volume_id: str
        """
        if parent_volume_id is None:
            raise ValueError("Invalid value for `parent_volume_id`, must not be `None`")

        self._parent_volume_id = parent_volume_id

    @property
    def storage_capacity_reservation_gi_b(self):
        """Gets the storage_capacity_reservation_gi_b of this CreateOpenZFSVolumeConfiguration.


        :return: The storage_capacity_reservation_gi_b of this CreateOpenZFSVolumeConfiguration.
        :rtype: int
        """
        return self._storage_capacity_reservation_gi_b

    @storage_capacity_reservation_gi_b.setter
    def storage_capacity_reservation_gi_b(self, storage_capacity_reservation_gi_b):
        """Sets the storage_capacity_reservation_gi_b of this CreateOpenZFSVolumeConfiguration.


        :param storage_capacity_reservation_gi_b: The storage_capacity_reservation_gi_b of this CreateOpenZFSVolumeConfiguration.
        :type storage_capacity_reservation_gi_b: int
        """

        self._storage_capacity_reservation_gi_b = storage_capacity_reservation_gi_b

    @property
    def storage_capacity_quota_gi_b(self):
        """Gets the storage_capacity_quota_gi_b of this CreateOpenZFSVolumeConfiguration.


        :return: The storage_capacity_quota_gi_b of this CreateOpenZFSVolumeConfiguration.
        :rtype: int
        """
        return self._storage_capacity_quota_gi_b

    @storage_capacity_quota_gi_b.setter
    def storage_capacity_quota_gi_b(self, storage_capacity_quota_gi_b):
        """Sets the storage_capacity_quota_gi_b of this CreateOpenZFSVolumeConfiguration.


        :param storage_capacity_quota_gi_b: The storage_capacity_quota_gi_b of this CreateOpenZFSVolumeConfiguration.
        :type storage_capacity_quota_gi_b: int
        """

        self._storage_capacity_quota_gi_b = storage_capacity_quota_gi_b

    @property
    def record_size_ki_b(self):
        """Gets the record_size_ki_b of this CreateOpenZFSVolumeConfiguration.


        :return: The record_size_ki_b of this CreateOpenZFSVolumeConfiguration.
        :rtype: int
        """
        return self._record_size_ki_b

    @record_size_ki_b.setter
    def record_size_ki_b(self, record_size_ki_b):
        """Sets the record_size_ki_b of this CreateOpenZFSVolumeConfiguration.


        :param record_size_ki_b: The record_size_ki_b of this CreateOpenZFSVolumeConfiguration.
        :type record_size_ki_b: int
        """

        self._record_size_ki_b = record_size_ki_b

    @property
    def data_compression_type(self):
        """Gets the data_compression_type of this CreateOpenZFSVolumeConfiguration.


        :return: The data_compression_type of this CreateOpenZFSVolumeConfiguration.
        :rtype: OpenZFSDataCompressionType
        """
        return self._data_compression_type

    @data_compression_type.setter
    def data_compression_type(self, data_compression_type):
        """Sets the data_compression_type of this CreateOpenZFSVolumeConfiguration.


        :param data_compression_type: The data_compression_type of this CreateOpenZFSVolumeConfiguration.
        :type data_compression_type: OpenZFSDataCompressionType
        """

        self._data_compression_type = data_compression_type

    @property
    def copy_tags_to_snapshots(self):
        """Gets the copy_tags_to_snapshots of this CreateOpenZFSVolumeConfiguration.


        :return: The copy_tags_to_snapshots of this CreateOpenZFSVolumeConfiguration.
        :rtype: bool
        """
        return self._copy_tags_to_snapshots

    @copy_tags_to_snapshots.setter
    def copy_tags_to_snapshots(self, copy_tags_to_snapshots):
        """Sets the copy_tags_to_snapshots of this CreateOpenZFSVolumeConfiguration.


        :param copy_tags_to_snapshots: The copy_tags_to_snapshots of this CreateOpenZFSVolumeConfiguration.
        :type copy_tags_to_snapshots: bool
        """

        self._copy_tags_to_snapshots = copy_tags_to_snapshots

    @property
    def origin_snapshot(self):
        """Gets the origin_snapshot of this CreateOpenZFSVolumeConfiguration.


        :return: The origin_snapshot of this CreateOpenZFSVolumeConfiguration.
        :rtype: CreateOpenZFSVolumeConfigurationOriginSnapshot
        """
        return self._origin_snapshot

    @origin_snapshot.setter
    def origin_snapshot(self, origin_snapshot):
        """Sets the origin_snapshot of this CreateOpenZFSVolumeConfiguration.


        :param origin_snapshot: The origin_snapshot of this CreateOpenZFSVolumeConfiguration.
        :type origin_snapshot: CreateOpenZFSVolumeConfigurationOriginSnapshot
        """

        self._origin_snapshot = origin_snapshot

    @property
    def read_only(self):
        """Gets the read_only of this CreateOpenZFSVolumeConfiguration.


        :return: The read_only of this CreateOpenZFSVolumeConfiguration.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this CreateOpenZFSVolumeConfiguration.


        :param read_only: The read_only of this CreateOpenZFSVolumeConfiguration.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def nfs_exports(self):
        """Gets the nfs_exports of this CreateOpenZFSVolumeConfiguration.


        :return: The nfs_exports of this CreateOpenZFSVolumeConfiguration.
        :rtype: List
        """
        return self._nfs_exports

    @nfs_exports.setter
    def nfs_exports(self, nfs_exports):
        """Sets the nfs_exports of this CreateOpenZFSVolumeConfiguration.


        :param nfs_exports: The nfs_exports of this CreateOpenZFSVolumeConfiguration.
        :type nfs_exports: List
        """

        self._nfs_exports = nfs_exports

    @property
    def user_and_group_quotas(self):
        """Gets the user_and_group_quotas of this CreateOpenZFSVolumeConfiguration.


        :return: The user_and_group_quotas of this CreateOpenZFSVolumeConfiguration.
        :rtype: List
        """
        return self._user_and_group_quotas

    @user_and_group_quotas.setter
    def user_and_group_quotas(self, user_and_group_quotas):
        """Sets the user_and_group_quotas of this CreateOpenZFSVolumeConfiguration.


        :param user_and_group_quotas: The user_and_group_quotas of this CreateOpenZFSVolumeConfiguration.
        :type user_and_group_quotas: List
        """

        self._user_and_group_quotas = user_and_group_quotas
