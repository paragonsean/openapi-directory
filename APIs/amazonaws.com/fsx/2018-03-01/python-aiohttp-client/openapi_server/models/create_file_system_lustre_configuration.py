# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_import_policy_type import AutoImportPolicyType
from openapi_server.models.create_file_system_lustre_configuration_log_configuration import CreateFileSystemLustreConfigurationLogConfiguration
from openapi_server.models.create_file_system_lustre_configuration_root_squash_configuration import CreateFileSystemLustreConfigurationRootSquashConfiguration
from openapi_server.models.data_compression_type import DataCompressionType
from openapi_server.models.drive_cache_type import DriveCacheType
from openapi_server.models.lustre_deployment_type import LustreDeploymentType
import re
from openapi_server import util


class CreateFileSystemLustreConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, weekly_maintenance_start_time: str=None, import_path: str=None, export_path: str=None, imported_file_chunk_size: int=None, deployment_type: LustreDeploymentType=None, auto_import_policy: AutoImportPolicyType=None, per_unit_storage_throughput: int=None, daily_automatic_backup_start_time: str=None, automatic_backup_retention_days: int=None, copy_tags_to_backups: bool=None, drive_cache_type: DriveCacheType=None, data_compression_type: DataCompressionType=None, log_configuration: CreateFileSystemLustreConfigurationLogConfiguration=None, root_squash_configuration: CreateFileSystemLustreConfigurationRootSquashConfiguration=None):
        """CreateFileSystemLustreConfiguration - a model defined in OpenAPI

        :param weekly_maintenance_start_time: The weekly_maintenance_start_time of this CreateFileSystemLustreConfiguration.
        :param import_path: The import_path of this CreateFileSystemLustreConfiguration.
        :param export_path: The export_path of this CreateFileSystemLustreConfiguration.
        :param imported_file_chunk_size: The imported_file_chunk_size of this CreateFileSystemLustreConfiguration.
        :param deployment_type: The deployment_type of this CreateFileSystemLustreConfiguration.
        :param auto_import_policy: The auto_import_policy of this CreateFileSystemLustreConfiguration.
        :param per_unit_storage_throughput: The per_unit_storage_throughput of this CreateFileSystemLustreConfiguration.
        :param daily_automatic_backup_start_time: The daily_automatic_backup_start_time of this CreateFileSystemLustreConfiguration.
        :param automatic_backup_retention_days: The automatic_backup_retention_days of this CreateFileSystemLustreConfiguration.
        :param copy_tags_to_backups: The copy_tags_to_backups of this CreateFileSystemLustreConfiguration.
        :param drive_cache_type: The drive_cache_type of this CreateFileSystemLustreConfiguration.
        :param data_compression_type: The data_compression_type of this CreateFileSystemLustreConfiguration.
        :param log_configuration: The log_configuration of this CreateFileSystemLustreConfiguration.
        :param root_squash_configuration: The root_squash_configuration of this CreateFileSystemLustreConfiguration.
        """
        self.openapi_types = {
            'weekly_maintenance_start_time': str,
            'import_path': str,
            'export_path': str,
            'imported_file_chunk_size': int,
            'deployment_type': LustreDeploymentType,
            'auto_import_policy': AutoImportPolicyType,
            'per_unit_storage_throughput': int,
            'daily_automatic_backup_start_time': str,
            'automatic_backup_retention_days': int,
            'copy_tags_to_backups': bool,
            'drive_cache_type': DriveCacheType,
            'data_compression_type': DataCompressionType,
            'log_configuration': CreateFileSystemLustreConfigurationLogConfiguration,
            'root_squash_configuration': CreateFileSystemLustreConfigurationRootSquashConfiguration
        }

        self.attribute_map = {
            'weekly_maintenance_start_time': 'WeeklyMaintenanceStartTime',
            'import_path': 'ImportPath',
            'export_path': 'ExportPath',
            'imported_file_chunk_size': 'ImportedFileChunkSize',
            'deployment_type': 'DeploymentType',
            'auto_import_policy': 'AutoImportPolicy',
            'per_unit_storage_throughput': 'PerUnitStorageThroughput',
            'daily_automatic_backup_start_time': 'DailyAutomaticBackupStartTime',
            'automatic_backup_retention_days': 'AutomaticBackupRetentionDays',
            'copy_tags_to_backups': 'CopyTagsToBackups',
            'drive_cache_type': 'DriveCacheType',
            'data_compression_type': 'DataCompressionType',
            'log_configuration': 'LogConfiguration',
            'root_squash_configuration': 'RootSquashConfiguration'
        }

        self._weekly_maintenance_start_time = weekly_maintenance_start_time
        self._import_path = import_path
        self._export_path = export_path
        self._imported_file_chunk_size = imported_file_chunk_size
        self._deployment_type = deployment_type
        self._auto_import_policy = auto_import_policy
        self._per_unit_storage_throughput = per_unit_storage_throughput
        self._daily_automatic_backup_start_time = daily_automatic_backup_start_time
        self._automatic_backup_retention_days = automatic_backup_retention_days
        self._copy_tags_to_backups = copy_tags_to_backups
        self._drive_cache_type = drive_cache_type
        self._data_compression_type = data_compression_type
        self._log_configuration = log_configuration
        self._root_squash_configuration = root_squash_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFileSystemLustreConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFileSystemLustreConfiguration of this CreateFileSystemLustreConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weekly_maintenance_start_time(self):
        """Gets the weekly_maintenance_start_time of this CreateFileSystemLustreConfiguration.


        :return: The weekly_maintenance_start_time of this CreateFileSystemLustreConfiguration.
        :rtype: str
        """
        return self._weekly_maintenance_start_time

    @weekly_maintenance_start_time.setter
    def weekly_maintenance_start_time(self, weekly_maintenance_start_time):
        """Sets the weekly_maintenance_start_time of this CreateFileSystemLustreConfiguration.


        :param weekly_maintenance_start_time: The weekly_maintenance_start_time of this CreateFileSystemLustreConfiguration.
        :type weekly_maintenance_start_time: str
        """

        self._weekly_maintenance_start_time = weekly_maintenance_start_time

    @property
    def import_path(self):
        """Gets the import_path of this CreateFileSystemLustreConfiguration.


        :return: The import_path of this CreateFileSystemLustreConfiguration.
        :rtype: str
        """
        return self._import_path

    @import_path.setter
    def import_path(self, import_path):
        """Sets the import_path of this CreateFileSystemLustreConfiguration.


        :param import_path: The import_path of this CreateFileSystemLustreConfiguration.
        :type import_path: str
        """

        self._import_path = import_path

    @property
    def export_path(self):
        """Gets the export_path of this CreateFileSystemLustreConfiguration.


        :return: The export_path of this CreateFileSystemLustreConfiguration.
        :rtype: str
        """
        return self._export_path

    @export_path.setter
    def export_path(self, export_path):
        """Sets the export_path of this CreateFileSystemLustreConfiguration.


        :param export_path: The export_path of this CreateFileSystemLustreConfiguration.
        :type export_path: str
        """

        self._export_path = export_path

    @property
    def imported_file_chunk_size(self):
        """Gets the imported_file_chunk_size of this CreateFileSystemLustreConfiguration.


        :return: The imported_file_chunk_size of this CreateFileSystemLustreConfiguration.
        :rtype: int
        """
        return self._imported_file_chunk_size

    @imported_file_chunk_size.setter
    def imported_file_chunk_size(self, imported_file_chunk_size):
        """Sets the imported_file_chunk_size of this CreateFileSystemLustreConfiguration.


        :param imported_file_chunk_size: The imported_file_chunk_size of this CreateFileSystemLustreConfiguration.
        :type imported_file_chunk_size: int
        """

        self._imported_file_chunk_size = imported_file_chunk_size

    @property
    def deployment_type(self):
        """Gets the deployment_type of this CreateFileSystemLustreConfiguration.


        :return: The deployment_type of this CreateFileSystemLustreConfiguration.
        :rtype: LustreDeploymentType
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this CreateFileSystemLustreConfiguration.


        :param deployment_type: The deployment_type of this CreateFileSystemLustreConfiguration.
        :type deployment_type: LustreDeploymentType
        """

        self._deployment_type = deployment_type

    @property
    def auto_import_policy(self):
        """Gets the auto_import_policy of this CreateFileSystemLustreConfiguration.


        :return: The auto_import_policy of this CreateFileSystemLustreConfiguration.
        :rtype: AutoImportPolicyType
        """
        return self._auto_import_policy

    @auto_import_policy.setter
    def auto_import_policy(self, auto_import_policy):
        """Sets the auto_import_policy of this CreateFileSystemLustreConfiguration.


        :param auto_import_policy: The auto_import_policy of this CreateFileSystemLustreConfiguration.
        :type auto_import_policy: AutoImportPolicyType
        """

        self._auto_import_policy = auto_import_policy

    @property
    def per_unit_storage_throughput(self):
        """Gets the per_unit_storage_throughput of this CreateFileSystemLustreConfiguration.


        :return: The per_unit_storage_throughput of this CreateFileSystemLustreConfiguration.
        :rtype: int
        """
        return self._per_unit_storage_throughput

    @per_unit_storage_throughput.setter
    def per_unit_storage_throughput(self, per_unit_storage_throughput):
        """Sets the per_unit_storage_throughput of this CreateFileSystemLustreConfiguration.


        :param per_unit_storage_throughput: The per_unit_storage_throughput of this CreateFileSystemLustreConfiguration.
        :type per_unit_storage_throughput: int
        """

        self._per_unit_storage_throughput = per_unit_storage_throughput

    @property
    def daily_automatic_backup_start_time(self):
        """Gets the daily_automatic_backup_start_time of this CreateFileSystemLustreConfiguration.

        A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. 

        :return: The daily_automatic_backup_start_time of this CreateFileSystemLustreConfiguration.
        :rtype: str
        """
        return self._daily_automatic_backup_start_time

    @daily_automatic_backup_start_time.setter
    def daily_automatic_backup_start_time(self, daily_automatic_backup_start_time):
        """Sets the daily_automatic_backup_start_time of this CreateFileSystemLustreConfiguration.

        A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. 

        :param daily_automatic_backup_start_time: The daily_automatic_backup_start_time of this CreateFileSystemLustreConfiguration.
        :type daily_automatic_backup_start_time: str
        """
        if daily_automatic_backup_start_time is not None and len(daily_automatic_backup_start_time) > 5:
            raise ValueError("Invalid value for `daily_automatic_backup_start_time`, length must be less than or equal to `5`")
        if daily_automatic_backup_start_time is not None and len(daily_automatic_backup_start_time) < 5:
            raise ValueError("Invalid value for `daily_automatic_backup_start_time`, length must be greater than or equal to `5`")
        if daily_automatic_backup_start_time is not None and not re.search(r'^([01]\d|2[0-3]):?([0-5]\d)$', daily_automatic_backup_start_time):
            raise ValueError("Invalid value for `daily_automatic_backup_start_time`, must be a follow pattern or equal to `/^([01]\d|2[0-3]):?([0-5]\d)$/`")

        self._daily_automatic_backup_start_time = daily_automatic_backup_start_time

    @property
    def automatic_backup_retention_days(self):
        """Gets the automatic_backup_retention_days of this CreateFileSystemLustreConfiguration.


        :return: The automatic_backup_retention_days of this CreateFileSystemLustreConfiguration.
        :rtype: int
        """
        return self._automatic_backup_retention_days

    @automatic_backup_retention_days.setter
    def automatic_backup_retention_days(self, automatic_backup_retention_days):
        """Sets the automatic_backup_retention_days of this CreateFileSystemLustreConfiguration.


        :param automatic_backup_retention_days: The automatic_backup_retention_days of this CreateFileSystemLustreConfiguration.
        :type automatic_backup_retention_days: int
        """

        self._automatic_backup_retention_days = automatic_backup_retention_days

    @property
    def copy_tags_to_backups(self):
        """Gets the copy_tags_to_backups of this CreateFileSystemLustreConfiguration.


        :return: The copy_tags_to_backups of this CreateFileSystemLustreConfiguration.
        :rtype: bool
        """
        return self._copy_tags_to_backups

    @copy_tags_to_backups.setter
    def copy_tags_to_backups(self, copy_tags_to_backups):
        """Sets the copy_tags_to_backups of this CreateFileSystemLustreConfiguration.


        :param copy_tags_to_backups: The copy_tags_to_backups of this CreateFileSystemLustreConfiguration.
        :type copy_tags_to_backups: bool
        """

        self._copy_tags_to_backups = copy_tags_to_backups

    @property
    def drive_cache_type(self):
        """Gets the drive_cache_type of this CreateFileSystemLustreConfiguration.


        :return: The drive_cache_type of this CreateFileSystemLustreConfiguration.
        :rtype: DriveCacheType
        """
        return self._drive_cache_type

    @drive_cache_type.setter
    def drive_cache_type(self, drive_cache_type):
        """Sets the drive_cache_type of this CreateFileSystemLustreConfiguration.


        :param drive_cache_type: The drive_cache_type of this CreateFileSystemLustreConfiguration.
        :type drive_cache_type: DriveCacheType
        """

        self._drive_cache_type = drive_cache_type

    @property
    def data_compression_type(self):
        """Gets the data_compression_type of this CreateFileSystemLustreConfiguration.


        :return: The data_compression_type of this CreateFileSystemLustreConfiguration.
        :rtype: DataCompressionType
        """
        return self._data_compression_type

    @data_compression_type.setter
    def data_compression_type(self, data_compression_type):
        """Sets the data_compression_type of this CreateFileSystemLustreConfiguration.


        :param data_compression_type: The data_compression_type of this CreateFileSystemLustreConfiguration.
        :type data_compression_type: DataCompressionType
        """

        self._data_compression_type = data_compression_type

    @property
    def log_configuration(self):
        """Gets the log_configuration of this CreateFileSystemLustreConfiguration.


        :return: The log_configuration of this CreateFileSystemLustreConfiguration.
        :rtype: CreateFileSystemLustreConfigurationLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this CreateFileSystemLustreConfiguration.


        :param log_configuration: The log_configuration of this CreateFileSystemLustreConfiguration.
        :type log_configuration: CreateFileSystemLustreConfigurationLogConfiguration
        """

        self._log_configuration = log_configuration

    @property
    def root_squash_configuration(self):
        """Gets the root_squash_configuration of this CreateFileSystemLustreConfiguration.


        :return: The root_squash_configuration of this CreateFileSystemLustreConfiguration.
        :rtype: CreateFileSystemLustreConfigurationRootSquashConfiguration
        """
        return self._root_squash_configuration

    @root_squash_configuration.setter
    def root_squash_configuration(self, root_squash_configuration):
        """Sets the root_squash_configuration of this CreateFileSystemLustreConfiguration.


        :param root_squash_configuration: The root_squash_configuration of this CreateFileSystemLustreConfiguration.
        :type root_squash_configuration: CreateFileSystemLustreConfigurationRootSquashConfiguration
        """

        self._root_squash_configuration = root_squash_configuration
