# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_cache_creating_failure_details import FileCacheCreatingFailureDetails
from openapi_server.models.file_cache_creating_lustre_configuration import FileCacheCreatingLustreConfiguration
from openapi_server.models.file_cache_lifecycle import FileCacheLifecycle
from openapi_server.models.file_cache_type import FileCacheType
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class FileCacheCreating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_id: str=None, creation_time: datetime=None, file_cache_id: str=None, file_cache_type: FileCacheType=None, file_cache_type_version: str=None, lifecycle: FileCacheLifecycle=None, failure_details: FileCacheCreatingFailureDetails=None, storage_capacity: int=None, vpc_id: str=None, subnet_ids: List[str]=None, network_interface_ids: List[str]=None, dns_name: str=None, kms_key_id: str=None, resource_arn: str=None, tags: List[Tag]=None, copy_tags_to_data_repository_associations: bool=None, lustre_configuration: FileCacheCreatingLustreConfiguration=None, data_repository_association_ids: List=None):
        """FileCacheCreating - a model defined in OpenAPI

        :param owner_id: The owner_id of this FileCacheCreating.
        :param creation_time: The creation_time of this FileCacheCreating.
        :param file_cache_id: The file_cache_id of this FileCacheCreating.
        :param file_cache_type: The file_cache_type of this FileCacheCreating.
        :param file_cache_type_version: The file_cache_type_version of this FileCacheCreating.
        :param lifecycle: The lifecycle of this FileCacheCreating.
        :param failure_details: The failure_details of this FileCacheCreating.
        :param storage_capacity: The storage_capacity of this FileCacheCreating.
        :param vpc_id: The vpc_id of this FileCacheCreating.
        :param subnet_ids: The subnet_ids of this FileCacheCreating.
        :param network_interface_ids: The network_interface_ids of this FileCacheCreating.
        :param dns_name: The dns_name of this FileCacheCreating.
        :param kms_key_id: The kms_key_id of this FileCacheCreating.
        :param resource_arn: The resource_arn of this FileCacheCreating.
        :param tags: The tags of this FileCacheCreating.
        :param copy_tags_to_data_repository_associations: The copy_tags_to_data_repository_associations of this FileCacheCreating.
        :param lustre_configuration: The lustre_configuration of this FileCacheCreating.
        :param data_repository_association_ids: The data_repository_association_ids of this FileCacheCreating.
        """
        self.openapi_types = {
            'owner_id': str,
            'creation_time': datetime,
            'file_cache_id': str,
            'file_cache_type': FileCacheType,
            'file_cache_type_version': str,
            'lifecycle': FileCacheLifecycle,
            'failure_details': FileCacheCreatingFailureDetails,
            'storage_capacity': int,
            'vpc_id': str,
            'subnet_ids': List[str],
            'network_interface_ids': List[str],
            'dns_name': str,
            'kms_key_id': str,
            'resource_arn': str,
            'tags': List[Tag],
            'copy_tags_to_data_repository_associations': bool,
            'lustre_configuration': FileCacheCreatingLustreConfiguration,
            'data_repository_association_ids': List
        }

        self.attribute_map = {
            'owner_id': 'OwnerId',
            'creation_time': 'CreationTime',
            'file_cache_id': 'FileCacheId',
            'file_cache_type': 'FileCacheType',
            'file_cache_type_version': 'FileCacheTypeVersion',
            'lifecycle': 'Lifecycle',
            'failure_details': 'FailureDetails',
            'storage_capacity': 'StorageCapacity',
            'vpc_id': 'VpcId',
            'subnet_ids': 'SubnetIds',
            'network_interface_ids': 'NetworkInterfaceIds',
            'dns_name': 'DNSName',
            'kms_key_id': 'KmsKeyId',
            'resource_arn': 'ResourceARN',
            'tags': 'Tags',
            'copy_tags_to_data_repository_associations': 'CopyTagsToDataRepositoryAssociations',
            'lustre_configuration': 'LustreConfiguration',
            'data_repository_association_ids': 'DataRepositoryAssociationIds'
        }

        self._owner_id = owner_id
        self._creation_time = creation_time
        self._file_cache_id = file_cache_id
        self._file_cache_type = file_cache_type
        self._file_cache_type_version = file_cache_type_version
        self._lifecycle = lifecycle
        self._failure_details = failure_details
        self._storage_capacity = storage_capacity
        self._vpc_id = vpc_id
        self._subnet_ids = subnet_ids
        self._network_interface_ids = network_interface_ids
        self._dns_name = dns_name
        self._kms_key_id = kms_key_id
        self._resource_arn = resource_arn
        self._tags = tags
        self._copy_tags_to_data_repository_associations = copy_tags_to_data_repository_associations
        self._lustre_configuration = lustre_configuration
        self._data_repository_association_ids = data_repository_association_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileCacheCreating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileCacheCreating of this FileCacheCreating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_id(self):
        """Gets the owner_id of this FileCacheCreating.

        An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.

        :return: The owner_id of this FileCacheCreating.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this FileCacheCreating.

        An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.

        :param owner_id: The owner_id of this FileCacheCreating.
        :type owner_id: str
        """
        if owner_id is not None and len(owner_id) > 12:
            raise ValueError("Invalid value for `owner_id`, length must be less than or equal to `12`")
        if owner_id is not None and len(owner_id) < 12:
            raise ValueError("Invalid value for `owner_id`, length must be greater than or equal to `12`")
        if owner_id is not None and not re.search(r'^\d{12}$', owner_id):
            raise ValueError("Invalid value for `owner_id`, must be a follow pattern or equal to `/^\d{12}$/`")

        self._owner_id = owner_id

    @property
    def creation_time(self):
        """Gets the creation_time of this FileCacheCreating.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :return: The creation_time of this FileCacheCreating.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this FileCacheCreating.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :param creation_time: The creation_time of this FileCacheCreating.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def file_cache_id(self):
        """Gets the file_cache_id of this FileCacheCreating.


        :return: The file_cache_id of this FileCacheCreating.
        :rtype: str
        """
        return self._file_cache_id

    @file_cache_id.setter
    def file_cache_id(self, file_cache_id):
        """Sets the file_cache_id of this FileCacheCreating.


        :param file_cache_id: The file_cache_id of this FileCacheCreating.
        :type file_cache_id: str
        """

        self._file_cache_id = file_cache_id

    @property
    def file_cache_type(self):
        """Gets the file_cache_type of this FileCacheCreating.


        :return: The file_cache_type of this FileCacheCreating.
        :rtype: FileCacheType
        """
        return self._file_cache_type

    @file_cache_type.setter
    def file_cache_type(self, file_cache_type):
        """Sets the file_cache_type of this FileCacheCreating.


        :param file_cache_type: The file_cache_type of this FileCacheCreating.
        :type file_cache_type: FileCacheType
        """

        self._file_cache_type = file_cache_type

    @property
    def file_cache_type_version(self):
        """Gets the file_cache_type_version of this FileCacheCreating.


        :return: The file_cache_type_version of this FileCacheCreating.
        :rtype: str
        """
        return self._file_cache_type_version

    @file_cache_type_version.setter
    def file_cache_type_version(self, file_cache_type_version):
        """Sets the file_cache_type_version of this FileCacheCreating.


        :param file_cache_type_version: The file_cache_type_version of this FileCacheCreating.
        :type file_cache_type_version: str
        """

        self._file_cache_type_version = file_cache_type_version

    @property
    def lifecycle(self):
        """Gets the lifecycle of this FileCacheCreating.


        :return: The lifecycle of this FileCacheCreating.
        :rtype: FileCacheLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this FileCacheCreating.


        :param lifecycle: The lifecycle of this FileCacheCreating.
        :type lifecycle: FileCacheLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def failure_details(self):
        """Gets the failure_details of this FileCacheCreating.


        :return: The failure_details of this FileCacheCreating.
        :rtype: FileCacheCreatingFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this FileCacheCreating.


        :param failure_details: The failure_details of this FileCacheCreating.
        :type failure_details: FileCacheCreatingFailureDetails
        """

        self._failure_details = failure_details

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this FileCacheCreating.


        :return: The storage_capacity of this FileCacheCreating.
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this FileCacheCreating.


        :param storage_capacity: The storage_capacity of this FileCacheCreating.
        :type storage_capacity: int
        """

        self._storage_capacity = storage_capacity

    @property
    def vpc_id(self):
        """Gets the vpc_id of this FileCacheCreating.

        The ID of your virtual private cloud (VPC). For more information, see <a href=\"https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html\">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.

        :return: The vpc_id of this FileCacheCreating.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this FileCacheCreating.

        The ID of your virtual private cloud (VPC). For more information, see <a href=\"https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html\">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.

        :param vpc_id: The vpc_id of this FileCacheCreating.
        :type vpc_id: str
        """
        if vpc_id is not None and len(vpc_id) > 21:
            raise ValueError("Invalid value for `vpc_id`, length must be less than or equal to `21`")
        if vpc_id is not None and len(vpc_id) < 12:
            raise ValueError("Invalid value for `vpc_id`, length must be greater than or equal to `12`")
        if vpc_id is not None and not re.search(r'^(vpc-[0-9a-f]{8,})$', vpc_id):
            raise ValueError("Invalid value for `vpc_id`, must be a follow pattern or equal to `/^(vpc-[0-9a-f]{8,})$/`")

        self._vpc_id = vpc_id

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this FileCacheCreating.

        A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.

        :return: The subnet_ids of this FileCacheCreating.
        :rtype: List[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this FileCacheCreating.

        A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.

        :param subnet_ids: The subnet_ids of this FileCacheCreating.
        :type subnet_ids: List[str]
        """
        if subnet_ids is not None and len(subnet_ids) > 50:
            raise ValueError("Invalid value for `subnet_ids`, number of items must be less than or equal to `50`")

        self._subnet_ids = subnet_ids

    @property
    def network_interface_ids(self):
        """Gets the network_interface_ids of this FileCacheCreating.

        A list of network interface IDs.

        :return: The network_interface_ids of this FileCacheCreating.
        :rtype: List[str]
        """
        return self._network_interface_ids

    @network_interface_ids.setter
    def network_interface_ids(self, network_interface_ids):
        """Sets the network_interface_ids of this FileCacheCreating.

        A list of network interface IDs.

        :param network_interface_ids: The network_interface_ids of this FileCacheCreating.
        :type network_interface_ids: List[str]
        """
        if network_interface_ids is not None and len(network_interface_ids) > 50:
            raise ValueError("Invalid value for `network_interface_ids`, number of items must be less than or equal to `50`")

        self._network_interface_ids = network_interface_ids

    @property
    def dns_name(self):
        """Gets the dns_name of this FileCacheCreating.


        :return: The dns_name of this FileCacheCreating.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this FileCacheCreating.


        :param dns_name: The dns_name of this FileCacheCreating.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this FileCacheCreating.


        :return: The kms_key_id of this FileCacheCreating.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this FileCacheCreating.


        :param kms_key_id: The kms_key_id of this FileCacheCreating.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def resource_arn(self):
        """Gets the resource_arn of this FileCacheCreating.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this FileCacheCreating.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this FileCacheCreating.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this FileCacheCreating.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn

    @property
    def tags(self):
        """Gets the tags of this FileCacheCreating.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this FileCacheCreating.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FileCacheCreating.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this FileCacheCreating.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def copy_tags_to_data_repository_associations(self):
        """Gets the copy_tags_to_data_repository_associations of this FileCacheCreating.


        :return: The copy_tags_to_data_repository_associations of this FileCacheCreating.
        :rtype: bool
        """
        return self._copy_tags_to_data_repository_associations

    @copy_tags_to_data_repository_associations.setter
    def copy_tags_to_data_repository_associations(self, copy_tags_to_data_repository_associations):
        """Sets the copy_tags_to_data_repository_associations of this FileCacheCreating.


        :param copy_tags_to_data_repository_associations: The copy_tags_to_data_repository_associations of this FileCacheCreating.
        :type copy_tags_to_data_repository_associations: bool
        """

        self._copy_tags_to_data_repository_associations = copy_tags_to_data_repository_associations

    @property
    def lustre_configuration(self):
        """Gets the lustre_configuration of this FileCacheCreating.


        :return: The lustre_configuration of this FileCacheCreating.
        :rtype: FileCacheCreatingLustreConfiguration
        """
        return self._lustre_configuration

    @lustre_configuration.setter
    def lustre_configuration(self, lustre_configuration):
        """Sets the lustre_configuration of this FileCacheCreating.


        :param lustre_configuration: The lustre_configuration of this FileCacheCreating.
        :type lustre_configuration: FileCacheCreatingLustreConfiguration
        """

        self._lustre_configuration = lustre_configuration

    @property
    def data_repository_association_ids(self):
        """Gets the data_repository_association_ids of this FileCacheCreating.


        :return: The data_repository_association_ids of this FileCacheCreating.
        :rtype: List
        """
        return self._data_repository_association_ids

    @data_repository_association_ids.setter
    def data_repository_association_ids(self, data_repository_association_ids):
        """Sets the data_repository_association_ids of this FileCacheCreating.


        :param data_repository_association_ids: The data_repository_association_ids of this FileCacheCreating.
        :type data_repository_association_ids: List
        """

        self._data_repository_association_ids = data_repository_association_ids
