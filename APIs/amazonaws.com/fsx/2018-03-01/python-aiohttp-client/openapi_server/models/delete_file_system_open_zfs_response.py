# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class DeleteFileSystemOpenZFSResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, final_backup_id: str=None, final_backup_tags: List[Tag]=None):
        """DeleteFileSystemOpenZFSResponse - a model defined in OpenAPI

        :param final_backup_id: The final_backup_id of this DeleteFileSystemOpenZFSResponse.
        :param final_backup_tags: The final_backup_tags of this DeleteFileSystemOpenZFSResponse.
        """
        self.openapi_types = {
            'final_backup_id': str,
            'final_backup_tags': List[Tag]
        }

        self.attribute_map = {
            'final_backup_id': 'FinalBackupId',
            'final_backup_tags': 'FinalBackupTags'
        }

        self._final_backup_id = final_backup_id
        self._final_backup_tags = final_backup_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteFileSystemOpenZFSResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteFileSystemOpenZFSResponse of this DeleteFileSystemOpenZFSResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def final_backup_id(self):
        """Gets the final_backup_id of this DeleteFileSystemOpenZFSResponse.

        The ID of the source backup. Specifies the backup that you are copying.

        :return: The final_backup_id of this DeleteFileSystemOpenZFSResponse.
        :rtype: str
        """
        return self._final_backup_id

    @final_backup_id.setter
    def final_backup_id(self, final_backup_id):
        """Sets the final_backup_id of this DeleteFileSystemOpenZFSResponse.

        The ID of the source backup. Specifies the backup that you are copying.

        :param final_backup_id: The final_backup_id of this DeleteFileSystemOpenZFSResponse.
        :type final_backup_id: str
        """
        if final_backup_id is not None and len(final_backup_id) > 128:
            raise ValueError("Invalid value for `final_backup_id`, length must be less than or equal to `128`")
        if final_backup_id is not None and len(final_backup_id) < 12:
            raise ValueError("Invalid value for `final_backup_id`, length must be greater than or equal to `12`")
        if final_backup_id is not None and not re.search(r'^(backup-[0-9a-f]{8,})$', final_backup_id):
            raise ValueError("Invalid value for `final_backup_id`, must be a follow pattern or equal to `/^(backup-[0-9a-f]{8,})$/`")

        self._final_backup_id = final_backup_id

    @property
    def final_backup_tags(self):
        """Gets the final_backup_tags of this DeleteFileSystemOpenZFSResponse.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The final_backup_tags of this DeleteFileSystemOpenZFSResponse.
        :rtype: List[Tag]
        """
        return self._final_backup_tags

    @final_backup_tags.setter
    def final_backup_tags(self, final_backup_tags):
        """Sets the final_backup_tags of this DeleteFileSystemOpenZFSResponse.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param final_backup_tags: The final_backup_tags of this DeleteFileSystemOpenZFSResponse.
        :type final_backup_tags: List[Tag]
        """
        if final_backup_tags is not None and len(final_backup_tags) > 50:
            raise ValueError("Invalid value for `final_backup_tags`, number of items must be less than or equal to `50`")
        if final_backup_tags is not None and len(final_backup_tags) < 1:
            raise ValueError("Invalid value for `final_backup_tags`, number of items must be greater than or equal to `1`")

        self._final_backup_tags = final_backup_tags
