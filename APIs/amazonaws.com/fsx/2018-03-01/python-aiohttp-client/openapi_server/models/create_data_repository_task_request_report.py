# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_format import ReportFormat
from openapi_server.models.report_scope import ReportScope
from openapi_server import util


class CreateDataRepositoryTaskRequestReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, path: str=None, format: ReportFormat=None, scope: ReportScope=None):
        """CreateDataRepositoryTaskRequestReport - a model defined in OpenAPI

        :param enabled: The enabled of this CreateDataRepositoryTaskRequestReport.
        :param path: The path of this CreateDataRepositoryTaskRequestReport.
        :param format: The format of this CreateDataRepositoryTaskRequestReport.
        :param scope: The scope of this CreateDataRepositoryTaskRequestReport.
        """
        self.openapi_types = {
            'enabled': bool,
            'path': str,
            'format': ReportFormat,
            'scope': ReportScope
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'path': 'Path',
            'format': 'Format',
            'scope': 'Scope'
        }

        self._enabled = enabled
        self._path = path
        self._format = format
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataRepositoryTaskRequestReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataRepositoryTaskRequest_Report of this CreateDataRepositoryTaskRequestReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this CreateDataRepositoryTaskRequestReport.


        :return: The enabled of this CreateDataRepositoryTaskRequestReport.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateDataRepositoryTaskRequestReport.


        :param enabled: The enabled of this CreateDataRepositoryTaskRequestReport.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def path(self):
        """Gets the path of this CreateDataRepositoryTaskRequestReport.


        :return: The path of this CreateDataRepositoryTaskRequestReport.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CreateDataRepositoryTaskRequestReport.


        :param path: The path of this CreateDataRepositoryTaskRequestReport.
        :type path: str
        """

        self._path = path

    @property
    def format(self):
        """Gets the format of this CreateDataRepositoryTaskRequestReport.


        :return: The format of this CreateDataRepositoryTaskRequestReport.
        :rtype: ReportFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateDataRepositoryTaskRequestReport.


        :param format: The format of this CreateDataRepositoryTaskRequestReport.
        :type format: ReportFormat
        """

        self._format = format

    @property
    def scope(self):
        """Gets the scope of this CreateDataRepositoryTaskRequestReport.


        :return: The scope of this CreateDataRepositoryTaskRequestReport.
        :rtype: ReportScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CreateDataRepositoryTaskRequestReport.


        :param scope: The scope of this CreateDataRepositoryTaskRequestReport.
        :type scope: ReportScope
        """

        self._scope = scope
