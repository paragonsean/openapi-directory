# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.completion_report import CompletionReport
from openapi_server.models.data_repository_task_failure_details import DataRepositoryTaskFailureDetails
from openapi_server.models.data_repository_task_lifecycle import DataRepositoryTaskLifecycle
from openapi_server.models.data_repository_task_status import DataRepositoryTaskStatus
from openapi_server.models.data_repository_task_type import DataRepositoryTaskType
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateDataRepositoryTaskResponseDataRepositoryTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id: str=None, lifecycle: DataRepositoryTaskLifecycle=None, type: DataRepositoryTaskType=None, creation_time: datetime=None, start_time: datetime=None, end_time: datetime=None, resource_arn: str=None, tags: List[Tag]=None, file_system_id: str=None, paths: List=None, failure_details: DataRepositoryTaskFailureDetails=None, status: DataRepositoryTaskStatus=None, report: CompletionReport=None, capacity_to_release: int=None, file_cache_id: str=None):
        """CreateDataRepositoryTaskResponseDataRepositoryTask - a model defined in OpenAPI

        :param task_id: The task_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param lifecycle: The lifecycle of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param type: The type of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param creation_time: The creation_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param start_time: The start_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param end_time: The end_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param resource_arn: The resource_arn of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param tags: The tags of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param file_system_id: The file_system_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param paths: The paths of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param failure_details: The failure_details of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param status: The status of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param report: The report of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param capacity_to_release: The capacity_to_release of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :param file_cache_id: The file_cache_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        """
        self.openapi_types = {
            'task_id': str,
            'lifecycle': DataRepositoryTaskLifecycle,
            'type': DataRepositoryTaskType,
            'creation_time': datetime,
            'start_time': datetime,
            'end_time': datetime,
            'resource_arn': str,
            'tags': List[Tag],
            'file_system_id': str,
            'paths': List,
            'failure_details': DataRepositoryTaskFailureDetails,
            'status': DataRepositoryTaskStatus,
            'report': CompletionReport,
            'capacity_to_release': int,
            'file_cache_id': str
        }

        self.attribute_map = {
            'task_id': 'TaskId',
            'lifecycle': 'Lifecycle',
            'type': 'Type',
            'creation_time': 'CreationTime',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'resource_arn': 'ResourceARN',
            'tags': 'Tags',
            'file_system_id': 'FileSystemId',
            'paths': 'Paths',
            'failure_details': 'FailureDetails',
            'status': 'Status',
            'report': 'Report',
            'capacity_to_release': 'CapacityToRelease',
            'file_cache_id': 'FileCacheId'
        }

        self._task_id = task_id
        self._lifecycle = lifecycle
        self._type = type
        self._creation_time = creation_time
        self._start_time = start_time
        self._end_time = end_time
        self._resource_arn = resource_arn
        self._tags = tags
        self._file_system_id = file_system_id
        self._paths = paths
        self._failure_details = failure_details
        self._status = status
        self._report = report
        self._capacity_to_release = capacity_to_release
        self._file_cache_id = file_cache_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataRepositoryTaskResponseDataRepositoryTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataRepositoryTaskResponse_DataRepositoryTask of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The task_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param task_id: The task_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id

    @property
    def lifecycle(self):
        """Gets the lifecycle of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The lifecycle of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: DataRepositoryTaskLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param lifecycle: The lifecycle of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type lifecycle: DataRepositoryTaskLifecycle
        """
        if lifecycle is None:
            raise ValueError("Invalid value for `lifecycle`, must not be `None`")

        self._lifecycle = lifecycle

    @property
    def type(self):
        """Gets the type of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The type of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: DataRepositoryTaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param type: The type of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type type: DataRepositoryTaskType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def creation_time(self):
        """Gets the creation_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :return: The creation_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :param creation_time: The creation_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def start_time(self):
        """Gets the start_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The start_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param start_time: The start_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The end_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param end_time: The end_time of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def resource_arn(self):
        """Gets the resource_arn of this CreateDataRepositoryTaskResponseDataRepositoryTask.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this CreateDataRepositoryTaskResponseDataRepositoryTask.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn

    @property
    def tags(self):
        """Gets the tags of this CreateDataRepositoryTaskResponseDataRepositoryTask.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataRepositoryTaskResponseDataRepositoryTask.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The file_system_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param file_system_id: The file_system_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type file_system_id: str
        """

        self._file_system_id = file_system_id

    @property
    def paths(self):
        """Gets the paths of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The paths of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: List
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param paths: The paths of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type paths: List
        """

        self._paths = paths

    @property
    def failure_details(self):
        """Gets the failure_details of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The failure_details of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: DataRepositoryTaskFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param failure_details: The failure_details of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type failure_details: DataRepositoryTaskFailureDetails
        """

        self._failure_details = failure_details

    @property
    def status(self):
        """Gets the status of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The status of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: DataRepositoryTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param status: The status of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type status: DataRepositoryTaskStatus
        """

        self._status = status

    @property
    def report(self):
        """Gets the report of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The report of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: CompletionReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param report: The report of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type report: CompletionReport
        """

        self._report = report

    @property
    def capacity_to_release(self):
        """Gets the capacity_to_release of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The capacity_to_release of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: int
        """
        return self._capacity_to_release

    @capacity_to_release.setter
    def capacity_to_release(self, capacity_to_release):
        """Sets the capacity_to_release of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param capacity_to_release: The capacity_to_release of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type capacity_to_release: int
        """

        self._capacity_to_release = capacity_to_release

    @property
    def file_cache_id(self):
        """Gets the file_cache_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :return: The file_cache_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :rtype: str
        """
        return self._file_cache_id

    @file_cache_id.setter
    def file_cache_id(self, file_cache_id):
        """Sets the file_cache_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.


        :param file_cache_id: The file_cache_id of this CreateDataRepositoryTaskResponseDataRepositoryTask.
        :type file_cache_id: str
        """

        self._file_cache_id = file_cache_id
