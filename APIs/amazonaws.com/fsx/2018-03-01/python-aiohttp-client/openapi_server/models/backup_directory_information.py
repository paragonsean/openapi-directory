# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class BackupDirectoryInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, active_directory_id: str=None, resource_arn: str=None):
        """BackupDirectoryInformation - a model defined in OpenAPI

        :param domain_name: The domain_name of this BackupDirectoryInformation.
        :param active_directory_id: The active_directory_id of this BackupDirectoryInformation.
        :param resource_arn: The resource_arn of this BackupDirectoryInformation.
        """
        self.openapi_types = {
            'domain_name': str,
            'active_directory_id': str,
            'resource_arn': str
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'active_directory_id': 'ActiveDirectoryId',
            'resource_arn': 'ResourceARN'
        }

        self._domain_name = domain_name
        self._active_directory_id = active_directory_id
        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupDirectoryInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backup_DirectoryInformation of this BackupDirectoryInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this BackupDirectoryInformation.


        :return: The domain_name of this BackupDirectoryInformation.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this BackupDirectoryInformation.


        :param domain_name: The domain_name of this BackupDirectoryInformation.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def active_directory_id(self):
        """Gets the active_directory_id of this BackupDirectoryInformation.


        :return: The active_directory_id of this BackupDirectoryInformation.
        :rtype: str
        """
        return self._active_directory_id

    @active_directory_id.setter
    def active_directory_id(self, active_directory_id):
        """Sets the active_directory_id of this BackupDirectoryInformation.


        :param active_directory_id: The active_directory_id of this BackupDirectoryInformation.
        :type active_directory_id: str
        """

        self._active_directory_id = active_directory_id

    @property
    def resource_arn(self):
        """Gets the resource_arn of this BackupDirectoryInformation.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this BackupDirectoryInformation.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this BackupDirectoryInformation.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this BackupDirectoryInformation.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn
