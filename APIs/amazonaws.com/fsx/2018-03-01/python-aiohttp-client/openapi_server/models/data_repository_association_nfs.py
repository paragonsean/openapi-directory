# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nfs_data_repository_configuration_auto_export_policy import NFSDataRepositoryConfigurationAutoExportPolicy
from openapi_server.models.nfs_version import NfsVersion
from openapi_server import util


class DataRepositoryAssociationNFS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version: NfsVersion=None, dns_ips: List=None, auto_export_policy: NFSDataRepositoryConfigurationAutoExportPolicy=None):
        """DataRepositoryAssociationNFS - a model defined in OpenAPI

        :param version: The version of this DataRepositoryAssociationNFS.
        :param dns_ips: The dns_ips of this DataRepositoryAssociationNFS.
        :param auto_export_policy: The auto_export_policy of this DataRepositoryAssociationNFS.
        """
        self.openapi_types = {
            'version': NfsVersion,
            'dns_ips': List,
            'auto_export_policy': NFSDataRepositoryConfigurationAutoExportPolicy
        }

        self.attribute_map = {
            'version': 'Version',
            'dns_ips': 'DnsIps',
            'auto_export_policy': 'AutoExportPolicy'
        }

        self._version = version
        self._dns_ips = dns_ips
        self._auto_export_policy = auto_export_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataRepositoryAssociationNFS':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataRepositoryAssociation_NFS of this DataRepositoryAssociationNFS.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this DataRepositoryAssociationNFS.


        :return: The version of this DataRepositoryAssociationNFS.
        :rtype: NfsVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DataRepositoryAssociationNFS.


        :param version: The version of this DataRepositoryAssociationNFS.
        :type version: NfsVersion
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def dns_ips(self):
        """Gets the dns_ips of this DataRepositoryAssociationNFS.


        :return: The dns_ips of this DataRepositoryAssociationNFS.
        :rtype: List
        """
        return self._dns_ips

    @dns_ips.setter
    def dns_ips(self, dns_ips):
        """Sets the dns_ips of this DataRepositoryAssociationNFS.


        :param dns_ips: The dns_ips of this DataRepositoryAssociationNFS.
        :type dns_ips: List
        """

        self._dns_ips = dns_ips

    @property
    def auto_export_policy(self):
        """Gets the auto_export_policy of this DataRepositoryAssociationNFS.


        :return: The auto_export_policy of this DataRepositoryAssociationNFS.
        :rtype: NFSDataRepositoryConfigurationAutoExportPolicy
        """
        return self._auto_export_policy

    @auto_export_policy.setter
    def auto_export_policy(self, auto_export_policy):
        """Sets the auto_export_policy of this DataRepositoryAssociationNFS.


        :param auto_export_policy: The auto_export_policy of this DataRepositoryAssociationNFS.
        :type auto_export_policy: NFSDataRepositoryConfigurationAutoExportPolicy
        """

        self._auto_export_policy = auto_export_policy
