# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_repository_association_request_s3 import CreateDataRepositoryAssociationRequestS3
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateDataRepositoryAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, file_system_path: str=None, data_repository_path: str=None, batch_import_meta_data_on_create: bool=None, imported_file_chunk_size: int=None, s3: CreateDataRepositoryAssociationRequestS3=None, client_request_token: str=None, tags: List[Tag]=None):
        """CreateDataRepositoryAssociationRequest - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this CreateDataRepositoryAssociationRequest.
        :param file_system_path: The file_system_path of this CreateDataRepositoryAssociationRequest.
        :param data_repository_path: The data_repository_path of this CreateDataRepositoryAssociationRequest.
        :param batch_import_meta_data_on_create: The batch_import_meta_data_on_create of this CreateDataRepositoryAssociationRequest.
        :param imported_file_chunk_size: The imported_file_chunk_size of this CreateDataRepositoryAssociationRequest.
        :param s3: The s3 of this CreateDataRepositoryAssociationRequest.
        :param client_request_token: The client_request_token of this CreateDataRepositoryAssociationRequest.
        :param tags: The tags of this CreateDataRepositoryAssociationRequest.
        """
        self.openapi_types = {
            'file_system_id': str,
            'file_system_path': str,
            'data_repository_path': str,
            'batch_import_meta_data_on_create': bool,
            'imported_file_chunk_size': int,
            's3': CreateDataRepositoryAssociationRequestS3,
            'client_request_token': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'file_system_id': 'FileSystemId',
            'file_system_path': 'FileSystemPath',
            'data_repository_path': 'DataRepositoryPath',
            'batch_import_meta_data_on_create': 'BatchImportMetaDataOnCreate',
            'imported_file_chunk_size': 'ImportedFileChunkSize',
            's3': 'S3',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags'
        }

        self._file_system_id = file_system_id
        self._file_system_path = file_system_path
        self._data_repository_path = data_repository_path
        self._batch_import_meta_data_on_create = batch_import_meta_data_on_create
        self._imported_file_chunk_size = imported_file_chunk_size
        self._s3 = s3
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataRepositoryAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataRepositoryAssociationRequest of this CreateDataRepositoryAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateDataRepositoryAssociationRequest.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :return: The file_system_id of this CreateDataRepositoryAssociationRequest.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateDataRepositoryAssociationRequest.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :param file_system_id: The file_system_id of this CreateDataRepositoryAssociationRequest.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 21:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `21`")
        if file_system_id is not None and len(file_system_id) < 11:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `11`")
        if file_system_id is not None and not re.search(r'^(fs-[0-9a-f]{8,})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(fs-[0-9a-f]{8,})$/`")

        self._file_system_id = file_system_id

    @property
    def file_system_path(self):
        """Gets the file_system_path of this CreateDataRepositoryAssociationRequest.


        :return: The file_system_path of this CreateDataRepositoryAssociationRequest.
        :rtype: str
        """
        return self._file_system_path

    @file_system_path.setter
    def file_system_path(self, file_system_path):
        """Sets the file_system_path of this CreateDataRepositoryAssociationRequest.


        :param file_system_path: The file_system_path of this CreateDataRepositoryAssociationRequest.
        :type file_system_path: str
        """

        self._file_system_path = file_system_path

    @property
    def data_repository_path(self):
        """Gets the data_repository_path of this CreateDataRepositoryAssociationRequest.


        :return: The data_repository_path of this CreateDataRepositoryAssociationRequest.
        :rtype: str
        """
        return self._data_repository_path

    @data_repository_path.setter
    def data_repository_path(self, data_repository_path):
        """Sets the data_repository_path of this CreateDataRepositoryAssociationRequest.


        :param data_repository_path: The data_repository_path of this CreateDataRepositoryAssociationRequest.
        :type data_repository_path: str
        """
        if data_repository_path is None:
            raise ValueError("Invalid value for `data_repository_path`, must not be `None`")

        self._data_repository_path = data_repository_path

    @property
    def batch_import_meta_data_on_create(self):
        """Gets the batch_import_meta_data_on_create of this CreateDataRepositoryAssociationRequest.


        :return: The batch_import_meta_data_on_create of this CreateDataRepositoryAssociationRequest.
        :rtype: bool
        """
        return self._batch_import_meta_data_on_create

    @batch_import_meta_data_on_create.setter
    def batch_import_meta_data_on_create(self, batch_import_meta_data_on_create):
        """Sets the batch_import_meta_data_on_create of this CreateDataRepositoryAssociationRequest.


        :param batch_import_meta_data_on_create: The batch_import_meta_data_on_create of this CreateDataRepositoryAssociationRequest.
        :type batch_import_meta_data_on_create: bool
        """

        self._batch_import_meta_data_on_create = batch_import_meta_data_on_create

    @property
    def imported_file_chunk_size(self):
        """Gets the imported_file_chunk_size of this CreateDataRepositoryAssociationRequest.


        :return: The imported_file_chunk_size of this CreateDataRepositoryAssociationRequest.
        :rtype: int
        """
        return self._imported_file_chunk_size

    @imported_file_chunk_size.setter
    def imported_file_chunk_size(self, imported_file_chunk_size):
        """Sets the imported_file_chunk_size of this CreateDataRepositoryAssociationRequest.


        :param imported_file_chunk_size: The imported_file_chunk_size of this CreateDataRepositoryAssociationRequest.
        :type imported_file_chunk_size: int
        """

        self._imported_file_chunk_size = imported_file_chunk_size

    @property
    def s3(self):
        """Gets the s3 of this CreateDataRepositoryAssociationRequest.


        :return: The s3 of this CreateDataRepositoryAssociationRequest.
        :rtype: CreateDataRepositoryAssociationRequestS3
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this CreateDataRepositoryAssociationRequest.


        :param s3: The s3 of this CreateDataRepositoryAssociationRequest.
        :type s3: CreateDataRepositoryAssociationRequestS3
        """

        self._s3 = s3

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateDataRepositoryAssociationRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this CreateDataRepositoryAssociationRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateDataRepositoryAssociationRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this CreateDataRepositoryAssociationRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateDataRepositoryAssociationRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateDataRepositoryAssociationRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataRepositoryAssociationRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateDataRepositoryAssociationRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
