# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_volume_request_ontap_configuration import UpdateVolumeRequestOntapConfiguration
from openapi_server.models.update_volume_request_open_zfs_configuration import UpdateVolumeRequestOpenZFSConfiguration
import re
from openapi_server import util


class UpdateVolumeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, volume_id: str=None, ontap_configuration: UpdateVolumeRequestOntapConfiguration=None, name: str=None, open_zfs_configuration: UpdateVolumeRequestOpenZFSConfiguration=None):
        """UpdateVolumeRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this UpdateVolumeRequest.
        :param volume_id: The volume_id of this UpdateVolumeRequest.
        :param ontap_configuration: The ontap_configuration of this UpdateVolumeRequest.
        :param name: The name of this UpdateVolumeRequest.
        :param open_zfs_configuration: The open_zfs_configuration of this UpdateVolumeRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'volume_id': str,
            'ontap_configuration': UpdateVolumeRequestOntapConfiguration,
            'name': str,
            'open_zfs_configuration': UpdateVolumeRequestOpenZFSConfiguration
        }

        self.attribute_map = {
            'client_request_token': 'ClientRequestToken',
            'volume_id': 'VolumeId',
            'ontap_configuration': 'OntapConfiguration',
            'name': 'Name',
            'open_zfs_configuration': 'OpenZFSConfiguration'
        }

        self._client_request_token = client_request_token
        self._volume_id = volume_id
        self._ontap_configuration = ontap_configuration
        self._name = name
        self._open_zfs_configuration = open_zfs_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVolumeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVolumeRequest of this UpdateVolumeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this UpdateVolumeRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this UpdateVolumeRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this UpdateVolumeRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this UpdateVolumeRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token

    @property
    def volume_id(self):
        """Gets the volume_id of this UpdateVolumeRequest.


        :return: The volume_id of this UpdateVolumeRequest.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this UpdateVolumeRequest.


        :param volume_id: The volume_id of this UpdateVolumeRequest.
        :type volume_id: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")

        self._volume_id = volume_id

    @property
    def ontap_configuration(self):
        """Gets the ontap_configuration of this UpdateVolumeRequest.


        :return: The ontap_configuration of this UpdateVolumeRequest.
        :rtype: UpdateVolumeRequestOntapConfiguration
        """
        return self._ontap_configuration

    @ontap_configuration.setter
    def ontap_configuration(self, ontap_configuration):
        """Sets the ontap_configuration of this UpdateVolumeRequest.


        :param ontap_configuration: The ontap_configuration of this UpdateVolumeRequest.
        :type ontap_configuration: UpdateVolumeRequestOntapConfiguration
        """

        self._ontap_configuration = ontap_configuration

    @property
    def name(self):
        """Gets the name of this UpdateVolumeRequest.


        :return: The name of this UpdateVolumeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateVolumeRequest.


        :param name: The name of this UpdateVolumeRequest.
        :type name: str
        """

        self._name = name

    @property
    def open_zfs_configuration(self):
        """Gets the open_zfs_configuration of this UpdateVolumeRequest.


        :return: The open_zfs_configuration of this UpdateVolumeRequest.
        :rtype: UpdateVolumeRequestOpenZFSConfiguration
        """
        return self._open_zfs_configuration

    @open_zfs_configuration.setter
    def open_zfs_configuration(self, open_zfs_configuration):
        """Sets the open_zfs_configuration of this UpdateVolumeRequest.


        :param open_zfs_configuration: The open_zfs_configuration of this UpdateVolumeRequest.
        :type open_zfs_configuration: UpdateVolumeRequestOpenZFSConfiguration
        """

        self._open_zfs_configuration = open_zfs_configuration
