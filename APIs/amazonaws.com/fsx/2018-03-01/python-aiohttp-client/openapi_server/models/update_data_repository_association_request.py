# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_repository_association_request_s3 import CreateDataRepositoryAssociationRequestS3
import re
from openapi_server import util


class UpdateDataRepositoryAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_id: str=None, client_request_token: str=None, imported_file_chunk_size: int=None, s3: CreateDataRepositoryAssociationRequestS3=None):
        """UpdateDataRepositoryAssociationRequest - a model defined in OpenAPI

        :param association_id: The association_id of this UpdateDataRepositoryAssociationRequest.
        :param client_request_token: The client_request_token of this UpdateDataRepositoryAssociationRequest.
        :param imported_file_chunk_size: The imported_file_chunk_size of this UpdateDataRepositoryAssociationRequest.
        :param s3: The s3 of this UpdateDataRepositoryAssociationRequest.
        """
        self.openapi_types = {
            'association_id': str,
            'client_request_token': str,
            'imported_file_chunk_size': int,
            's3': CreateDataRepositoryAssociationRequestS3
        }

        self.attribute_map = {
            'association_id': 'AssociationId',
            'client_request_token': 'ClientRequestToken',
            'imported_file_chunk_size': 'ImportedFileChunkSize',
            's3': 'S3'
        }

        self._association_id = association_id
        self._client_request_token = client_request_token
        self._imported_file_chunk_size = imported_file_chunk_size
        self._s3 = s3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDataRepositoryAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDataRepositoryAssociationRequest of this UpdateDataRepositoryAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_id(self):
        """Gets the association_id of this UpdateDataRepositoryAssociationRequest.


        :return: The association_id of this UpdateDataRepositoryAssociationRequest.
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this UpdateDataRepositoryAssociationRequest.


        :param association_id: The association_id of this UpdateDataRepositoryAssociationRequest.
        :type association_id: str
        """
        if association_id is None:
            raise ValueError("Invalid value for `association_id`, must not be `None`")

        self._association_id = association_id

    @property
    def client_request_token(self):
        """Gets the client_request_token of this UpdateDataRepositoryAssociationRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this UpdateDataRepositoryAssociationRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this UpdateDataRepositoryAssociationRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this UpdateDataRepositoryAssociationRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token

    @property
    def imported_file_chunk_size(self):
        """Gets the imported_file_chunk_size of this UpdateDataRepositoryAssociationRequest.


        :return: The imported_file_chunk_size of this UpdateDataRepositoryAssociationRequest.
        :rtype: int
        """
        return self._imported_file_chunk_size

    @imported_file_chunk_size.setter
    def imported_file_chunk_size(self, imported_file_chunk_size):
        """Sets the imported_file_chunk_size of this UpdateDataRepositoryAssociationRequest.


        :param imported_file_chunk_size: The imported_file_chunk_size of this UpdateDataRepositoryAssociationRequest.
        :type imported_file_chunk_size: int
        """

        self._imported_file_chunk_size = imported_file_chunk_size

    @property
    def s3(self):
        """Gets the s3 of this UpdateDataRepositoryAssociationRequest.


        :return: The s3 of this UpdateDataRepositoryAssociationRequest.
        :rtype: CreateDataRepositoryAssociationRequestS3
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this UpdateDataRepositoryAssociationRequest.


        :param s3: The s3 of this UpdateDataRepositoryAssociationRequest.
        :type s3: CreateDataRepositoryAssociationRequestS3
        """

        self._s3 = s3
