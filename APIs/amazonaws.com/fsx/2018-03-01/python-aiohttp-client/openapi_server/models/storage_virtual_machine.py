# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_virtual_machine_active_directory_configuration import StorageVirtualMachineActiveDirectoryConfiguration
from openapi_server.models.storage_virtual_machine_endpoints import StorageVirtualMachineEndpoints
from openapi_server.models.storage_virtual_machine_lifecycle import StorageVirtualMachineLifecycle
from openapi_server.models.storage_virtual_machine_lifecycle_transition_reason import StorageVirtualMachineLifecycleTransitionReason
from openapi_server.models.storage_virtual_machine_root_volume_security_style import StorageVirtualMachineRootVolumeSecurityStyle
from openapi_server.models.storage_virtual_machine_subtype import StorageVirtualMachineSubtype
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class StorageVirtualMachine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_directory_configuration: StorageVirtualMachineActiveDirectoryConfiguration=None, creation_time: datetime=None, endpoints: StorageVirtualMachineEndpoints=None, file_system_id: str=None, lifecycle: StorageVirtualMachineLifecycle=None, name: str=None, resource_arn: str=None, storage_virtual_machine_id: str=None, subtype: StorageVirtualMachineSubtype=None, uuid: str=None, tags: List[Tag]=None, lifecycle_transition_reason: StorageVirtualMachineLifecycleTransitionReason=None, root_volume_security_style: StorageVirtualMachineRootVolumeSecurityStyle=None):
        """StorageVirtualMachine - a model defined in OpenAPI

        :param active_directory_configuration: The active_directory_configuration of this StorageVirtualMachine.
        :param creation_time: The creation_time of this StorageVirtualMachine.
        :param endpoints: The endpoints of this StorageVirtualMachine.
        :param file_system_id: The file_system_id of this StorageVirtualMachine.
        :param lifecycle: The lifecycle of this StorageVirtualMachine.
        :param name: The name of this StorageVirtualMachine.
        :param resource_arn: The resource_arn of this StorageVirtualMachine.
        :param storage_virtual_machine_id: The storage_virtual_machine_id of this StorageVirtualMachine.
        :param subtype: The subtype of this StorageVirtualMachine.
        :param uuid: The uuid of this StorageVirtualMachine.
        :param tags: The tags of this StorageVirtualMachine.
        :param lifecycle_transition_reason: The lifecycle_transition_reason of this StorageVirtualMachine.
        :param root_volume_security_style: The root_volume_security_style of this StorageVirtualMachine.
        """
        self.openapi_types = {
            'active_directory_configuration': StorageVirtualMachineActiveDirectoryConfiguration,
            'creation_time': datetime,
            'endpoints': StorageVirtualMachineEndpoints,
            'file_system_id': str,
            'lifecycle': StorageVirtualMachineLifecycle,
            'name': str,
            'resource_arn': str,
            'storage_virtual_machine_id': str,
            'subtype': StorageVirtualMachineSubtype,
            'uuid': str,
            'tags': List[Tag],
            'lifecycle_transition_reason': StorageVirtualMachineLifecycleTransitionReason,
            'root_volume_security_style': StorageVirtualMachineRootVolumeSecurityStyle
        }

        self.attribute_map = {
            'active_directory_configuration': 'ActiveDirectoryConfiguration',
            'creation_time': 'CreationTime',
            'endpoints': 'Endpoints',
            'file_system_id': 'FileSystemId',
            'lifecycle': 'Lifecycle',
            'name': 'Name',
            'resource_arn': 'ResourceARN',
            'storage_virtual_machine_id': 'StorageVirtualMachineId',
            'subtype': 'Subtype',
            'uuid': 'UUID',
            'tags': 'Tags',
            'lifecycle_transition_reason': 'LifecycleTransitionReason',
            'root_volume_security_style': 'RootVolumeSecurityStyle'
        }

        self._active_directory_configuration = active_directory_configuration
        self._creation_time = creation_time
        self._endpoints = endpoints
        self._file_system_id = file_system_id
        self._lifecycle = lifecycle
        self._name = name
        self._resource_arn = resource_arn
        self._storage_virtual_machine_id = storage_virtual_machine_id
        self._subtype = subtype
        self._uuid = uuid
        self._tags = tags
        self._lifecycle_transition_reason = lifecycle_transition_reason
        self._root_volume_security_style = root_volume_security_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageVirtualMachine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageVirtualMachine of this StorageVirtualMachine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_directory_configuration(self):
        """Gets the active_directory_configuration of this StorageVirtualMachine.


        :return: The active_directory_configuration of this StorageVirtualMachine.
        :rtype: StorageVirtualMachineActiveDirectoryConfiguration
        """
        return self._active_directory_configuration

    @active_directory_configuration.setter
    def active_directory_configuration(self, active_directory_configuration):
        """Sets the active_directory_configuration of this StorageVirtualMachine.


        :param active_directory_configuration: The active_directory_configuration of this StorageVirtualMachine.
        :type active_directory_configuration: StorageVirtualMachineActiveDirectoryConfiguration
        """

        self._active_directory_configuration = active_directory_configuration

    @property
    def creation_time(self):
        """Gets the creation_time of this StorageVirtualMachine.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :return: The creation_time of this StorageVirtualMachine.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StorageVirtualMachine.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :param creation_time: The creation_time of this StorageVirtualMachine.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def endpoints(self):
        """Gets the endpoints of this StorageVirtualMachine.


        :return: The endpoints of this StorageVirtualMachine.
        :rtype: StorageVirtualMachineEndpoints
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this StorageVirtualMachine.


        :param endpoints: The endpoints of this StorageVirtualMachine.
        :type endpoints: StorageVirtualMachineEndpoints
        """

        self._endpoints = endpoints

    @property
    def file_system_id(self):
        """Gets the file_system_id of this StorageVirtualMachine.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :return: The file_system_id of this StorageVirtualMachine.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this StorageVirtualMachine.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :param file_system_id: The file_system_id of this StorageVirtualMachine.
        :type file_system_id: str
        """
        if file_system_id is not None and len(file_system_id) > 21:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `21`")
        if file_system_id is not None and len(file_system_id) < 11:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `11`")
        if file_system_id is not None and not re.search(r'^(fs-[0-9a-f]{8,})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(fs-[0-9a-f]{8,})$/`")

        self._file_system_id = file_system_id

    @property
    def lifecycle(self):
        """Gets the lifecycle of this StorageVirtualMachine.


        :return: The lifecycle of this StorageVirtualMachine.
        :rtype: StorageVirtualMachineLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this StorageVirtualMachine.


        :param lifecycle: The lifecycle of this StorageVirtualMachine.
        :type lifecycle: StorageVirtualMachineLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def name(self):
        """Gets the name of this StorageVirtualMachine.


        :return: The name of this StorageVirtualMachine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageVirtualMachine.


        :param name: The name of this StorageVirtualMachine.
        :type name: str
        """

        self._name = name

    @property
    def resource_arn(self):
        """Gets the resource_arn of this StorageVirtualMachine.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this StorageVirtualMachine.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this StorageVirtualMachine.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this StorageVirtualMachine.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn

    @property
    def storage_virtual_machine_id(self):
        """Gets the storage_virtual_machine_id of this StorageVirtualMachine.


        :return: The storage_virtual_machine_id of this StorageVirtualMachine.
        :rtype: str
        """
        return self._storage_virtual_machine_id

    @storage_virtual_machine_id.setter
    def storage_virtual_machine_id(self, storage_virtual_machine_id):
        """Sets the storage_virtual_machine_id of this StorageVirtualMachine.


        :param storage_virtual_machine_id: The storage_virtual_machine_id of this StorageVirtualMachine.
        :type storage_virtual_machine_id: str
        """

        self._storage_virtual_machine_id = storage_virtual_machine_id

    @property
    def subtype(self):
        """Gets the subtype of this StorageVirtualMachine.


        :return: The subtype of this StorageVirtualMachine.
        :rtype: StorageVirtualMachineSubtype
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this StorageVirtualMachine.


        :param subtype: The subtype of this StorageVirtualMachine.
        :type subtype: StorageVirtualMachineSubtype
        """

        self._subtype = subtype

    @property
    def uuid(self):
        """Gets the uuid of this StorageVirtualMachine.


        :return: The uuid of this StorageVirtualMachine.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StorageVirtualMachine.


        :param uuid: The uuid of this StorageVirtualMachine.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def tags(self):
        """Gets the tags of this StorageVirtualMachine.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this StorageVirtualMachine.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StorageVirtualMachine.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this StorageVirtualMachine.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def lifecycle_transition_reason(self):
        """Gets the lifecycle_transition_reason of this StorageVirtualMachine.


        :return: The lifecycle_transition_reason of this StorageVirtualMachine.
        :rtype: StorageVirtualMachineLifecycleTransitionReason
        """
        return self._lifecycle_transition_reason

    @lifecycle_transition_reason.setter
    def lifecycle_transition_reason(self, lifecycle_transition_reason):
        """Sets the lifecycle_transition_reason of this StorageVirtualMachine.


        :param lifecycle_transition_reason: The lifecycle_transition_reason of this StorageVirtualMachine.
        :type lifecycle_transition_reason: StorageVirtualMachineLifecycleTransitionReason
        """

        self._lifecycle_transition_reason = lifecycle_transition_reason

    @property
    def root_volume_security_style(self):
        """Gets the root_volume_security_style of this StorageVirtualMachine.


        :return: The root_volume_security_style of this StorageVirtualMachine.
        :rtype: StorageVirtualMachineRootVolumeSecurityStyle
        """
        return self._root_volume_security_style

    @root_volume_security_style.setter
    def root_volume_security_style(self, root_volume_security_style):
        """Sets the root_volume_security_style of this StorageVirtualMachine.


        :param root_volume_security_style: The root_volume_security_style of this StorageVirtualMachine.
        :type root_volume_security_style: StorageVirtualMachineRootVolumeSecurityStyle
        """

        self._root_volume_security_style = root_volume_security_style
