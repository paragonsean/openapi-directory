# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileCacheLustreMetadataConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_capacity: int=None):
        """FileCacheLustreMetadataConfiguration - a model defined in OpenAPI

        :param storage_capacity: The storage_capacity of this FileCacheLustreMetadataConfiguration.
        """
        self.openapi_types = {
            'storage_capacity': int
        }

        self.attribute_map = {
            'storage_capacity': 'StorageCapacity'
        }

        self._storage_capacity = storage_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileCacheLustreMetadataConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileCacheLustreMetadataConfiguration of this FileCacheLustreMetadataConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this FileCacheLustreMetadataConfiguration.


        :return: The storage_capacity of this FileCacheLustreMetadataConfiguration.
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this FileCacheLustreMetadataConfiguration.


        :param storage_capacity: The storage_capacity of this FileCacheLustreMetadataConfiguration.
        :type storage_capacity: int
        """
        if storage_capacity is None:
            raise ValueError("Invalid value for `storage_capacity`, must not be `None`")

        self._storage_capacity = storage_capacity
