# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class DeleteVolumeRequestOntapConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skip_final_backup: bool=None, final_backup_tags: List[Tag]=None, bypass_snaplock_enterprise_retention: bool=None):
        """DeleteVolumeRequestOntapConfiguration - a model defined in OpenAPI

        :param skip_final_backup: The skip_final_backup of this DeleteVolumeRequestOntapConfiguration.
        :param final_backup_tags: The final_backup_tags of this DeleteVolumeRequestOntapConfiguration.
        :param bypass_snaplock_enterprise_retention: The bypass_snaplock_enterprise_retention of this DeleteVolumeRequestOntapConfiguration.
        """
        self.openapi_types = {
            'skip_final_backup': bool,
            'final_backup_tags': List[Tag],
            'bypass_snaplock_enterprise_retention': bool
        }

        self.attribute_map = {
            'skip_final_backup': 'SkipFinalBackup',
            'final_backup_tags': 'FinalBackupTags',
            'bypass_snaplock_enterprise_retention': 'BypassSnaplockEnterpriseRetention'
        }

        self._skip_final_backup = skip_final_backup
        self._final_backup_tags = final_backup_tags
        self._bypass_snaplock_enterprise_retention = bypass_snaplock_enterprise_retention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteVolumeRequestOntapConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteVolumeRequest_OntapConfiguration of this DeleteVolumeRequestOntapConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skip_final_backup(self):
        """Gets the skip_final_backup of this DeleteVolumeRequestOntapConfiguration.


        :return: The skip_final_backup of this DeleteVolumeRequestOntapConfiguration.
        :rtype: bool
        """
        return self._skip_final_backup

    @skip_final_backup.setter
    def skip_final_backup(self, skip_final_backup):
        """Sets the skip_final_backup of this DeleteVolumeRequestOntapConfiguration.


        :param skip_final_backup: The skip_final_backup of this DeleteVolumeRequestOntapConfiguration.
        :type skip_final_backup: bool
        """

        self._skip_final_backup = skip_final_backup

    @property
    def final_backup_tags(self):
        """Gets the final_backup_tags of this DeleteVolumeRequestOntapConfiguration.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The final_backup_tags of this DeleteVolumeRequestOntapConfiguration.
        :rtype: List[Tag]
        """
        return self._final_backup_tags

    @final_backup_tags.setter
    def final_backup_tags(self, final_backup_tags):
        """Sets the final_backup_tags of this DeleteVolumeRequestOntapConfiguration.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param final_backup_tags: The final_backup_tags of this DeleteVolumeRequestOntapConfiguration.
        :type final_backup_tags: List[Tag]
        """
        if final_backup_tags is not None and len(final_backup_tags) > 50:
            raise ValueError("Invalid value for `final_backup_tags`, number of items must be less than or equal to `50`")
        if final_backup_tags is not None and len(final_backup_tags) < 1:
            raise ValueError("Invalid value for `final_backup_tags`, number of items must be greater than or equal to `1`")

        self._final_backup_tags = final_backup_tags

    @property
    def bypass_snaplock_enterprise_retention(self):
        """Gets the bypass_snaplock_enterprise_retention of this DeleteVolumeRequestOntapConfiguration.


        :return: The bypass_snaplock_enterprise_retention of this DeleteVolumeRequestOntapConfiguration.
        :rtype: bool
        """
        return self._bypass_snaplock_enterprise_retention

    @bypass_snaplock_enterprise_retention.setter
    def bypass_snaplock_enterprise_retention(self, bypass_snaplock_enterprise_retention):
        """Sets the bypass_snaplock_enterprise_retention of this DeleteVolumeRequestOntapConfiguration.


        :param bypass_snaplock_enterprise_retention: The bypass_snaplock_enterprise_retention of this DeleteVolumeRequestOntapConfiguration.
        :type bypass_snaplock_enterprise_retention: bool
        """

        self._bypass_snaplock_enterprise_retention = bypass_snaplock_enterprise_retention
