# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_file_system_lustre_configuration import CreateFileSystemLustreConfiguration
from openapi_server.models.create_file_system_ontap_configuration import CreateFileSystemOntapConfiguration
from openapi_server.models.create_file_system_request_open_zfs_configuration import CreateFileSystemRequestOpenZFSConfiguration
from openapi_server.models.create_file_system_request_windows_configuration import CreateFileSystemRequestWindowsConfiguration
from openapi_server.models.file_system_type import FileSystemType
from openapi_server.models.storage_type import StorageType
import re
from openapi_server import util


class CreateFileSystemRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, file_system_type: FileSystemType=None, storage_capacity: int=None, storage_type: StorageType=None, subnet_ids: List=None, security_group_ids: List=None, tags: List=None, kms_key_id: str=None, windows_configuration: CreateFileSystemRequestWindowsConfiguration=None, lustre_configuration: CreateFileSystemLustreConfiguration=None, ontap_configuration: CreateFileSystemOntapConfiguration=None, file_system_type_version: str=None, open_zfs_configuration: CreateFileSystemRequestOpenZFSConfiguration=None):
        """CreateFileSystemRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateFileSystemRequest.
        :param file_system_type: The file_system_type of this CreateFileSystemRequest.
        :param storage_capacity: The storage_capacity of this CreateFileSystemRequest.
        :param storage_type: The storage_type of this CreateFileSystemRequest.
        :param subnet_ids: The subnet_ids of this CreateFileSystemRequest.
        :param security_group_ids: The security_group_ids of this CreateFileSystemRequest.
        :param tags: The tags of this CreateFileSystemRequest.
        :param kms_key_id: The kms_key_id of this CreateFileSystemRequest.
        :param windows_configuration: The windows_configuration of this CreateFileSystemRequest.
        :param lustre_configuration: The lustre_configuration of this CreateFileSystemRequest.
        :param ontap_configuration: The ontap_configuration of this CreateFileSystemRequest.
        :param file_system_type_version: The file_system_type_version of this CreateFileSystemRequest.
        :param open_zfs_configuration: The open_zfs_configuration of this CreateFileSystemRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'file_system_type': FileSystemType,
            'storage_capacity': int,
            'storage_type': StorageType,
            'subnet_ids': List,
            'security_group_ids': List,
            'tags': List,
            'kms_key_id': str,
            'windows_configuration': CreateFileSystemRequestWindowsConfiguration,
            'lustre_configuration': CreateFileSystemLustreConfiguration,
            'ontap_configuration': CreateFileSystemOntapConfiguration,
            'file_system_type_version': str,
            'open_zfs_configuration': CreateFileSystemRequestOpenZFSConfiguration
        }

        self.attribute_map = {
            'client_request_token': 'ClientRequestToken',
            'file_system_type': 'FileSystemType',
            'storage_capacity': 'StorageCapacity',
            'storage_type': 'StorageType',
            'subnet_ids': 'SubnetIds',
            'security_group_ids': 'SecurityGroupIds',
            'tags': 'Tags',
            'kms_key_id': 'KmsKeyId',
            'windows_configuration': 'WindowsConfiguration',
            'lustre_configuration': 'LustreConfiguration',
            'ontap_configuration': 'OntapConfiguration',
            'file_system_type_version': 'FileSystemTypeVersion',
            'open_zfs_configuration': 'OpenZFSConfiguration'
        }

        self._client_request_token = client_request_token
        self._file_system_type = file_system_type
        self._storage_capacity = storage_capacity
        self._storage_type = storage_type
        self._subnet_ids = subnet_ids
        self._security_group_ids = security_group_ids
        self._tags = tags
        self._kms_key_id = kms_key_id
        self._windows_configuration = windows_configuration
        self._lustre_configuration = lustre_configuration
        self._ontap_configuration = ontap_configuration
        self._file_system_type_version = file_system_type_version
        self._open_zfs_configuration = open_zfs_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFileSystemRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFileSystemRequest of this CreateFileSystemRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateFileSystemRequest.


        :return: The client_request_token of this CreateFileSystemRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateFileSystemRequest.


        :param client_request_token: The client_request_token of this CreateFileSystemRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def file_system_type(self):
        """Gets the file_system_type of this CreateFileSystemRequest.


        :return: The file_system_type of this CreateFileSystemRequest.
        :rtype: FileSystemType
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this CreateFileSystemRequest.


        :param file_system_type: The file_system_type of this CreateFileSystemRequest.
        :type file_system_type: FileSystemType
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this CreateFileSystemRequest.


        :return: The storage_capacity of this CreateFileSystemRequest.
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this CreateFileSystemRequest.


        :param storage_capacity: The storage_capacity of this CreateFileSystemRequest.
        :type storage_capacity: int
        """
        if storage_capacity is None:
            raise ValueError("Invalid value for `storage_capacity`, must not be `None`")

        self._storage_capacity = storage_capacity

    @property
    def storage_type(self):
        """Gets the storage_type of this CreateFileSystemRequest.


        :return: The storage_type of this CreateFileSystemRequest.
        :rtype: StorageType
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this CreateFileSystemRequest.


        :param storage_type: The storage_type of this CreateFileSystemRequest.
        :type storage_type: StorageType
        """

        self._storage_type = storage_type

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this CreateFileSystemRequest.


        :return: The subnet_ids of this CreateFileSystemRequest.
        :rtype: List
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this CreateFileSystemRequest.


        :param subnet_ids: The subnet_ids of this CreateFileSystemRequest.
        :type subnet_ids: List
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")

        self._subnet_ids = subnet_ids

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateFileSystemRequest.


        :return: The security_group_ids of this CreateFileSystemRequest.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateFileSystemRequest.


        :param security_group_ids: The security_group_ids of this CreateFileSystemRequest.
        :type security_group_ids: List
        """

        self._security_group_ids = security_group_ids

    @property
    def tags(self):
        """Gets the tags of this CreateFileSystemRequest.


        :return: The tags of this CreateFileSystemRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFileSystemRequest.


        :param tags: The tags of this CreateFileSystemRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateFileSystemRequest.

        <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>

        :return: The kms_key_id of this CreateFileSystemRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateFileSystemRequest.

        <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>

        :param kms_key_id: The kms_key_id of this CreateFileSystemRequest.
        :type kms_key_id: str
        """
        if kms_key_id is not None and len(kms_key_id) > 2048:
            raise ValueError("Invalid value for `kms_key_id`, length must be less than or equal to `2048`")
        if kms_key_id is not None and len(kms_key_id) < 1:
            raise ValueError("Invalid value for `kms_key_id`, length must be greater than or equal to `1`")
        if kms_key_id is not None and not re.search(r'^.{1,2048}$', kms_key_id):
            raise ValueError("Invalid value for `kms_key_id`, must be a follow pattern or equal to `/^.{1,2048}$/`")

        self._kms_key_id = kms_key_id

    @property
    def windows_configuration(self):
        """Gets the windows_configuration of this CreateFileSystemRequest.


        :return: The windows_configuration of this CreateFileSystemRequest.
        :rtype: CreateFileSystemRequestWindowsConfiguration
        """
        return self._windows_configuration

    @windows_configuration.setter
    def windows_configuration(self, windows_configuration):
        """Sets the windows_configuration of this CreateFileSystemRequest.


        :param windows_configuration: The windows_configuration of this CreateFileSystemRequest.
        :type windows_configuration: CreateFileSystemRequestWindowsConfiguration
        """

        self._windows_configuration = windows_configuration

    @property
    def lustre_configuration(self):
        """Gets the lustre_configuration of this CreateFileSystemRequest.


        :return: The lustre_configuration of this CreateFileSystemRequest.
        :rtype: CreateFileSystemLustreConfiguration
        """
        return self._lustre_configuration

    @lustre_configuration.setter
    def lustre_configuration(self, lustre_configuration):
        """Sets the lustre_configuration of this CreateFileSystemRequest.


        :param lustre_configuration: The lustre_configuration of this CreateFileSystemRequest.
        :type lustre_configuration: CreateFileSystemLustreConfiguration
        """

        self._lustre_configuration = lustre_configuration

    @property
    def ontap_configuration(self):
        """Gets the ontap_configuration of this CreateFileSystemRequest.


        :return: The ontap_configuration of this CreateFileSystemRequest.
        :rtype: CreateFileSystemOntapConfiguration
        """
        return self._ontap_configuration

    @ontap_configuration.setter
    def ontap_configuration(self, ontap_configuration):
        """Sets the ontap_configuration of this CreateFileSystemRequest.


        :param ontap_configuration: The ontap_configuration of this CreateFileSystemRequest.
        :type ontap_configuration: CreateFileSystemOntapConfiguration
        """

        self._ontap_configuration = ontap_configuration

    @property
    def file_system_type_version(self):
        """Gets the file_system_type_version of this CreateFileSystemRequest.


        :return: The file_system_type_version of this CreateFileSystemRequest.
        :rtype: str
        """
        return self._file_system_type_version

    @file_system_type_version.setter
    def file_system_type_version(self, file_system_type_version):
        """Sets the file_system_type_version of this CreateFileSystemRequest.


        :param file_system_type_version: The file_system_type_version of this CreateFileSystemRequest.
        :type file_system_type_version: str
        """

        self._file_system_type_version = file_system_type_version

    @property
    def open_zfs_configuration(self):
        """Gets the open_zfs_configuration of this CreateFileSystemRequest.


        :return: The open_zfs_configuration of this CreateFileSystemRequest.
        :rtype: CreateFileSystemRequestOpenZFSConfiguration
        """
        return self._open_zfs_configuration

    @open_zfs_configuration.setter
    def open_zfs_configuration(self, open_zfs_configuration):
        """Sets the open_zfs_configuration of this CreateFileSystemRequest.


        :param open_zfs_configuration: The open_zfs_configuration of this CreateFileSystemRequest.
        :type open_zfs_configuration: CreateFileSystemRequestOpenZFSConfiguration
        """

        self._open_zfs_configuration = open_zfs_configuration
