# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ReleaseFileSystemNfsV3LocksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, client_request_token: str=None):
        """ReleaseFileSystemNfsV3LocksRequest - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this ReleaseFileSystemNfsV3LocksRequest.
        :param client_request_token: The client_request_token of this ReleaseFileSystemNfsV3LocksRequest.
        """
        self.openapi_types = {
            'file_system_id': str,
            'client_request_token': str
        }

        self.attribute_map = {
            'file_system_id': 'FileSystemId',
            'client_request_token': 'ClientRequestToken'
        }

        self._file_system_id = file_system_id
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseFileSystemNfsV3LocksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseFileSystemNfsV3LocksRequest of this ReleaseFileSystemNfsV3LocksRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this ReleaseFileSystemNfsV3LocksRequest.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :return: The file_system_id of this ReleaseFileSystemNfsV3LocksRequest.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this ReleaseFileSystemNfsV3LocksRequest.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :param file_system_id: The file_system_id of this ReleaseFileSystemNfsV3LocksRequest.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 21:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `21`")
        if file_system_id is not None and len(file_system_id) < 11:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `11`")
        if file_system_id is not None and not re.search(r'^(fs-[0-9a-f]{8,})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(fs-[0-9a-f]{8,})$/`")

        self._file_system_id = file_system_id

    @property
    def client_request_token(self):
        """Gets the client_request_token of this ReleaseFileSystemNfsV3LocksRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this ReleaseFileSystemNfsV3LocksRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this ReleaseFileSystemNfsV3LocksRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this ReleaseFileSystemNfsV3LocksRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token
