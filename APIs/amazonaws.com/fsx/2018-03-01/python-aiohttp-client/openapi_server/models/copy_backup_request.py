# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CopyBackupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, source_backup_id: str=None, source_region: str=None, kms_key_id: str=None, copy_tags: bool=None, tags: List[Tag]=None):
        """CopyBackupRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CopyBackupRequest.
        :param source_backup_id: The source_backup_id of this CopyBackupRequest.
        :param source_region: The source_region of this CopyBackupRequest.
        :param kms_key_id: The kms_key_id of this CopyBackupRequest.
        :param copy_tags: The copy_tags of this CopyBackupRequest.
        :param tags: The tags of this CopyBackupRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'source_backup_id': str,
            'source_region': str,
            'kms_key_id': str,
            'copy_tags': bool,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'client_request_token': 'ClientRequestToken',
            'source_backup_id': 'SourceBackupId',
            'source_region': 'SourceRegion',
            'kms_key_id': 'KmsKeyId',
            'copy_tags': 'CopyTags',
            'tags': 'Tags'
        }

        self._client_request_token = client_request_token
        self._source_backup_id = source_backup_id
        self._source_region = source_region
        self._kms_key_id = kms_key_id
        self._copy_tags = copy_tags
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyBackupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyBackupRequest of this CopyBackupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CopyBackupRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this CopyBackupRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CopyBackupRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this CopyBackupRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token

    @property
    def source_backup_id(self):
        """Gets the source_backup_id of this CopyBackupRequest.


        :return: The source_backup_id of this CopyBackupRequest.
        :rtype: str
        """
        return self._source_backup_id

    @source_backup_id.setter
    def source_backup_id(self, source_backup_id):
        """Sets the source_backup_id of this CopyBackupRequest.


        :param source_backup_id: The source_backup_id of this CopyBackupRequest.
        :type source_backup_id: str
        """
        if source_backup_id is None:
            raise ValueError("Invalid value for `source_backup_id`, must not be `None`")

        self._source_backup_id = source_backup_id

    @property
    def source_region(self):
        """Gets the source_region of this CopyBackupRequest.


        :return: The source_region of this CopyBackupRequest.
        :rtype: str
        """
        return self._source_region

    @source_region.setter
    def source_region(self, source_region):
        """Sets the source_region of this CopyBackupRequest.


        :param source_region: The source_region of this CopyBackupRequest.
        :type source_region: str
        """

        self._source_region = source_region

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CopyBackupRequest.

        <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>

        :return: The kms_key_id of this CopyBackupRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CopyBackupRequest.

        <p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>

        :param kms_key_id: The kms_key_id of this CopyBackupRequest.
        :type kms_key_id: str
        """
        if kms_key_id is not None and len(kms_key_id) > 2048:
            raise ValueError("Invalid value for `kms_key_id`, length must be less than or equal to `2048`")
        if kms_key_id is not None and len(kms_key_id) < 1:
            raise ValueError("Invalid value for `kms_key_id`, length must be greater than or equal to `1`")
        if kms_key_id is not None and not re.search(r'^.{1,2048}$', kms_key_id):
            raise ValueError("Invalid value for `kms_key_id`, must be a follow pattern or equal to `/^.{1,2048}$/`")

        self._kms_key_id = kms_key_id

    @property
    def copy_tags(self):
        """Gets the copy_tags of this CopyBackupRequest.


        :return: The copy_tags of this CopyBackupRequest.
        :rtype: bool
        """
        return self._copy_tags

    @copy_tags.setter
    def copy_tags(self, copy_tags):
        """Sets the copy_tags of this CopyBackupRequest.


        :param copy_tags: The copy_tags of this CopyBackupRequest.
        :type copy_tags: bool
        """

        self._copy_tags = copy_tags

    @property
    def tags(self):
        """Gets the tags of this CopyBackupRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CopyBackupRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CopyBackupRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CopyBackupRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
