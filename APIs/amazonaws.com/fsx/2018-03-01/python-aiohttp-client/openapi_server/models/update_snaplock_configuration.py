# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_snaplock_configuration_autocommit_period import CreateSnaplockConfigurationAutocommitPeriod
from openapi_server.models.create_snaplock_configuration_retention_period import CreateSnaplockConfigurationRetentionPeriod
from openapi_server.models.privileged_delete import PrivilegedDelete
from openapi_server import util


class UpdateSnaplockConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_log_volume: bool=None, autocommit_period: CreateSnaplockConfigurationAutocommitPeriod=None, privileged_delete: PrivilegedDelete=None, retention_period: CreateSnaplockConfigurationRetentionPeriod=None, volume_append_mode_enabled: bool=None):
        """UpdateSnaplockConfiguration - a model defined in OpenAPI

        :param audit_log_volume: The audit_log_volume of this UpdateSnaplockConfiguration.
        :param autocommit_period: The autocommit_period of this UpdateSnaplockConfiguration.
        :param privileged_delete: The privileged_delete of this UpdateSnaplockConfiguration.
        :param retention_period: The retention_period of this UpdateSnaplockConfiguration.
        :param volume_append_mode_enabled: The volume_append_mode_enabled of this UpdateSnaplockConfiguration.
        """
        self.openapi_types = {
            'audit_log_volume': bool,
            'autocommit_period': CreateSnaplockConfigurationAutocommitPeriod,
            'privileged_delete': PrivilegedDelete,
            'retention_period': CreateSnaplockConfigurationRetentionPeriod,
            'volume_append_mode_enabled': bool
        }

        self.attribute_map = {
            'audit_log_volume': 'AuditLogVolume',
            'autocommit_period': 'AutocommitPeriod',
            'privileged_delete': 'PrivilegedDelete',
            'retention_period': 'RetentionPeriod',
            'volume_append_mode_enabled': 'VolumeAppendModeEnabled'
        }

        self._audit_log_volume = audit_log_volume
        self._autocommit_period = autocommit_period
        self._privileged_delete = privileged_delete
        self._retention_period = retention_period
        self._volume_append_mode_enabled = volume_append_mode_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSnaplockConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSnaplockConfiguration of this UpdateSnaplockConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_log_volume(self):
        """Gets the audit_log_volume of this UpdateSnaplockConfiguration.


        :return: The audit_log_volume of this UpdateSnaplockConfiguration.
        :rtype: bool
        """
        return self._audit_log_volume

    @audit_log_volume.setter
    def audit_log_volume(self, audit_log_volume):
        """Sets the audit_log_volume of this UpdateSnaplockConfiguration.


        :param audit_log_volume: The audit_log_volume of this UpdateSnaplockConfiguration.
        :type audit_log_volume: bool
        """

        self._audit_log_volume = audit_log_volume

    @property
    def autocommit_period(self):
        """Gets the autocommit_period of this UpdateSnaplockConfiguration.


        :return: The autocommit_period of this UpdateSnaplockConfiguration.
        :rtype: CreateSnaplockConfigurationAutocommitPeriod
        """
        return self._autocommit_period

    @autocommit_period.setter
    def autocommit_period(self, autocommit_period):
        """Sets the autocommit_period of this UpdateSnaplockConfiguration.


        :param autocommit_period: The autocommit_period of this UpdateSnaplockConfiguration.
        :type autocommit_period: CreateSnaplockConfigurationAutocommitPeriod
        """

        self._autocommit_period = autocommit_period

    @property
    def privileged_delete(self):
        """Gets the privileged_delete of this UpdateSnaplockConfiguration.


        :return: The privileged_delete of this UpdateSnaplockConfiguration.
        :rtype: PrivilegedDelete
        """
        return self._privileged_delete

    @privileged_delete.setter
    def privileged_delete(self, privileged_delete):
        """Sets the privileged_delete of this UpdateSnaplockConfiguration.


        :param privileged_delete: The privileged_delete of this UpdateSnaplockConfiguration.
        :type privileged_delete: PrivilegedDelete
        """

        self._privileged_delete = privileged_delete

    @property
    def retention_period(self):
        """Gets the retention_period of this UpdateSnaplockConfiguration.


        :return: The retention_period of this UpdateSnaplockConfiguration.
        :rtype: CreateSnaplockConfigurationRetentionPeriod
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this UpdateSnaplockConfiguration.


        :param retention_period: The retention_period of this UpdateSnaplockConfiguration.
        :type retention_period: CreateSnaplockConfigurationRetentionPeriod
        """

        self._retention_period = retention_period

    @property
    def volume_append_mode_enabled(self):
        """Gets the volume_append_mode_enabled of this UpdateSnaplockConfiguration.


        :return: The volume_append_mode_enabled of this UpdateSnaplockConfiguration.
        :rtype: bool
        """
        return self._volume_append_mode_enabled

    @volume_append_mode_enabled.setter
    def volume_append_mode_enabled(self, volume_append_mode_enabled):
        """Sets the volume_append_mode_enabled of this UpdateSnaplockConfiguration.


        :param volume_append_mode_enabled: The volume_append_mode_enabled of this UpdateSnaplockConfiguration.
        :type volume_append_mode_enabled: bool
        """

        self._volume_append_mode_enabled = volume_append_mode_enabled
