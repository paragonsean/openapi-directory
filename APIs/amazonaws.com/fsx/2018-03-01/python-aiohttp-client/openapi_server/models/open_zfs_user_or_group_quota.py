# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_zfs_quota_type import OpenZFSQuotaType
from openapi_server import util


class OpenZFSUserOrGroupQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: OpenZFSQuotaType=None, id: int=None, storage_capacity_quota_gi_b: int=None):
        """OpenZFSUserOrGroupQuota - a model defined in OpenAPI

        :param type: The type of this OpenZFSUserOrGroupQuota.
        :param id: The id of this OpenZFSUserOrGroupQuota.
        :param storage_capacity_quota_gi_b: The storage_capacity_quota_gi_b of this OpenZFSUserOrGroupQuota.
        """
        self.openapi_types = {
            'type': OpenZFSQuotaType,
            'id': int,
            'storage_capacity_quota_gi_b': int
        }

        self.attribute_map = {
            'type': 'Type',
            'id': 'Id',
            'storage_capacity_quota_gi_b': 'StorageCapacityQuotaGiB'
        }

        self._type = type
        self._id = id
        self._storage_capacity_quota_gi_b = storage_capacity_quota_gi_b

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenZFSUserOrGroupQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenZFSUserOrGroupQuota of this OpenZFSUserOrGroupQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this OpenZFSUserOrGroupQuota.


        :return: The type of this OpenZFSUserOrGroupQuota.
        :rtype: OpenZFSQuotaType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenZFSUserOrGroupQuota.


        :param type: The type of this OpenZFSUserOrGroupQuota.
        :type type: OpenZFSQuotaType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def id(self):
        """Gets the id of this OpenZFSUserOrGroupQuota.


        :return: The id of this OpenZFSUserOrGroupQuota.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenZFSUserOrGroupQuota.


        :param id: The id of this OpenZFSUserOrGroupQuota.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def storage_capacity_quota_gi_b(self):
        """Gets the storage_capacity_quota_gi_b of this OpenZFSUserOrGroupQuota.


        :return: The storage_capacity_quota_gi_b of this OpenZFSUserOrGroupQuota.
        :rtype: int
        """
        return self._storage_capacity_quota_gi_b

    @storage_capacity_quota_gi_b.setter
    def storage_capacity_quota_gi_b(self, storage_capacity_quota_gi_b):
        """Sets the storage_capacity_quota_gi_b of this OpenZFSUserOrGroupQuota.


        :param storage_capacity_quota_gi_b: The storage_capacity_quota_gi_b of this OpenZFSUserOrGroupQuota.
        :type storage_capacity_quota_gi_b: int
        """
        if storage_capacity_quota_gi_b is None:
            raise ValueError("Invalid value for `storage_capacity_quota_gi_b`, must not be `None`")

        self._storage_capacity_quota_gi_b = storage_capacity_quota_gi_b
