# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_volume_from_backup_request_ontap_configuration import CreateVolumeFromBackupRequestOntapConfiguration
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateVolumeFromBackupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_id: str=None, client_request_token: str=None, name: str=None, ontap_configuration: CreateVolumeFromBackupRequestOntapConfiguration=None, tags: List[Tag]=None):
        """CreateVolumeFromBackupRequest - a model defined in OpenAPI

        :param backup_id: The backup_id of this CreateVolumeFromBackupRequest.
        :param client_request_token: The client_request_token of this CreateVolumeFromBackupRequest.
        :param name: The name of this CreateVolumeFromBackupRequest.
        :param ontap_configuration: The ontap_configuration of this CreateVolumeFromBackupRequest.
        :param tags: The tags of this CreateVolumeFromBackupRequest.
        """
        self.openapi_types = {
            'backup_id': str,
            'client_request_token': str,
            'name': str,
            'ontap_configuration': CreateVolumeFromBackupRequestOntapConfiguration,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'backup_id': 'BackupId',
            'client_request_token': 'ClientRequestToken',
            'name': 'Name',
            'ontap_configuration': 'OntapConfiguration',
            'tags': 'Tags'
        }

        self._backup_id = backup_id
        self._client_request_token = client_request_token
        self._name = name
        self._ontap_configuration = ontap_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVolumeFromBackupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVolumeFromBackupRequest of this CreateVolumeFromBackupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this CreateVolumeFromBackupRequest.

        The ID of the source backup. Specifies the backup that you are copying.

        :return: The backup_id of this CreateVolumeFromBackupRequest.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this CreateVolumeFromBackupRequest.

        The ID of the source backup. Specifies the backup that you are copying.

        :param backup_id: The backup_id of this CreateVolumeFromBackupRequest.
        :type backup_id: str
        """
        if backup_id is None:
            raise ValueError("Invalid value for `backup_id`, must not be `None`")
        if backup_id is not None and len(backup_id) > 128:
            raise ValueError("Invalid value for `backup_id`, length must be less than or equal to `128`")
        if backup_id is not None and len(backup_id) < 12:
            raise ValueError("Invalid value for `backup_id`, length must be greater than or equal to `12`")
        if backup_id is not None and not re.search(r'^(backup-[0-9a-f]{8,})$', backup_id):
            raise ValueError("Invalid value for `backup_id`, must be a follow pattern or equal to `/^(backup-[0-9a-f]{8,})$/`")

        self._backup_id = backup_id

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateVolumeFromBackupRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this CreateVolumeFromBackupRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateVolumeFromBackupRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this CreateVolumeFromBackupRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token

    @property
    def name(self):
        """Gets the name of this CreateVolumeFromBackupRequest.


        :return: The name of this CreateVolumeFromBackupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVolumeFromBackupRequest.


        :param name: The name of this CreateVolumeFromBackupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ontap_configuration(self):
        """Gets the ontap_configuration of this CreateVolumeFromBackupRequest.


        :return: The ontap_configuration of this CreateVolumeFromBackupRequest.
        :rtype: CreateVolumeFromBackupRequestOntapConfiguration
        """
        return self._ontap_configuration

    @ontap_configuration.setter
    def ontap_configuration(self, ontap_configuration):
        """Sets the ontap_configuration of this CreateVolumeFromBackupRequest.


        :param ontap_configuration: The ontap_configuration of this CreateVolumeFromBackupRequest.
        :type ontap_configuration: CreateVolumeFromBackupRequestOntapConfiguration
        """

        self._ontap_configuration = ontap_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateVolumeFromBackupRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateVolumeFromBackupRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVolumeFromBackupRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateVolumeFromBackupRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
