# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_repository_task_request_report import CreateDataRepositoryTaskRequestReport
from openapi_server.models.data_repository_task_type import DataRepositoryTaskType
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateDataRepositoryTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: DataRepositoryTaskType=None, paths: List=None, file_system_id: str=None, report: CreateDataRepositoryTaskRequestReport=None, client_request_token: str=None, tags: List[Tag]=None, capacity_to_release: int=None):
        """CreateDataRepositoryTaskRequest - a model defined in OpenAPI

        :param type: The type of this CreateDataRepositoryTaskRequest.
        :param paths: The paths of this CreateDataRepositoryTaskRequest.
        :param file_system_id: The file_system_id of this CreateDataRepositoryTaskRequest.
        :param report: The report of this CreateDataRepositoryTaskRequest.
        :param client_request_token: The client_request_token of this CreateDataRepositoryTaskRequest.
        :param tags: The tags of this CreateDataRepositoryTaskRequest.
        :param capacity_to_release: The capacity_to_release of this CreateDataRepositoryTaskRequest.
        """
        self.openapi_types = {
            'type': DataRepositoryTaskType,
            'paths': List,
            'file_system_id': str,
            'report': CreateDataRepositoryTaskRequestReport,
            'client_request_token': str,
            'tags': List[Tag],
            'capacity_to_release': int
        }

        self.attribute_map = {
            'type': 'Type',
            'paths': 'Paths',
            'file_system_id': 'FileSystemId',
            'report': 'Report',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags',
            'capacity_to_release': 'CapacityToRelease'
        }

        self._type = type
        self._paths = paths
        self._file_system_id = file_system_id
        self._report = report
        self._client_request_token = client_request_token
        self._tags = tags
        self._capacity_to_release = capacity_to_release

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataRepositoryTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataRepositoryTaskRequest of this CreateDataRepositoryTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CreateDataRepositoryTaskRequest.


        :return: The type of this CreateDataRepositoryTaskRequest.
        :rtype: DataRepositoryTaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateDataRepositoryTaskRequest.


        :param type: The type of this CreateDataRepositoryTaskRequest.
        :type type: DataRepositoryTaskType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def paths(self):
        """Gets the paths of this CreateDataRepositoryTaskRequest.


        :return: The paths of this CreateDataRepositoryTaskRequest.
        :rtype: List
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this CreateDataRepositoryTaskRequest.


        :param paths: The paths of this CreateDataRepositoryTaskRequest.
        :type paths: List
        """

        self._paths = paths

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateDataRepositoryTaskRequest.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :return: The file_system_id of this CreateDataRepositoryTaskRequest.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateDataRepositoryTaskRequest.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :param file_system_id: The file_system_id of this CreateDataRepositoryTaskRequest.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 21:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `21`")
        if file_system_id is not None and len(file_system_id) < 11:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `11`")
        if file_system_id is not None and not re.search(r'^(fs-[0-9a-f]{8,})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(fs-[0-9a-f]{8,})$/`")

        self._file_system_id = file_system_id

    @property
    def report(self):
        """Gets the report of this CreateDataRepositoryTaskRequest.


        :return: The report of this CreateDataRepositoryTaskRequest.
        :rtype: CreateDataRepositoryTaskRequestReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this CreateDataRepositoryTaskRequest.


        :param report: The report of this CreateDataRepositoryTaskRequest.
        :type report: CreateDataRepositoryTaskRequestReport
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")

        self._report = report

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateDataRepositoryTaskRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :return: The client_request_token of this CreateDataRepositoryTaskRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateDataRepositoryTaskRequest.

        (Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.

        :param client_request_token: The client_request_token of this CreateDataRepositoryTaskRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 63:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `63`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'[A-za-z0-9_.-]{0,63}$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[A-za-z0-9_.-]{0,63}$/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateDataRepositoryTaskRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateDataRepositoryTaskRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataRepositoryTaskRequest.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateDataRepositoryTaskRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def capacity_to_release(self):
        """Gets the capacity_to_release of this CreateDataRepositoryTaskRequest.


        :return: The capacity_to_release of this CreateDataRepositoryTaskRequest.
        :rtype: int
        """
        return self._capacity_to_release

    @capacity_to_release.setter
    def capacity_to_release(self, capacity_to_release):
        """Sets the capacity_to_release of this CreateDataRepositoryTaskRequest.


        :param capacity_to_release: The capacity_to_release of this CreateDataRepositoryTaskRequest.
        :type capacity_to_release: int
        """

        self._capacity_to_release = capacity_to_release
