# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ontap_volume_configuration import OntapVolumeConfiguration
from openapi_server.models.tag import Tag
from openapi_server.models.volume_lifecycle import VolumeLifecycle
from openapi_server.models.volume_lifecycle_transition_reason import VolumeLifecycleTransitionReason
from openapi_server.models.volume_open_zfs_configuration import VolumeOpenZFSConfiguration
from openapi_server.models.volume_type import VolumeType
import re
from openapi_server import util


class CreateVolumeFromBackupResponseVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, file_system_id: str=None, lifecycle: VolumeLifecycle=None, name: str=None, ontap_configuration: OntapVolumeConfiguration=None, resource_arn: str=None, tags: List[Tag]=None, volume_id: str=None, volume_type: VolumeType=None, lifecycle_transition_reason: VolumeLifecycleTransitionReason=None, administrative_actions: List=None, open_zfs_configuration: VolumeOpenZFSConfiguration=None):
        """CreateVolumeFromBackupResponseVolume - a model defined in OpenAPI

        :param creation_time: The creation_time of this CreateVolumeFromBackupResponseVolume.
        :param file_system_id: The file_system_id of this CreateVolumeFromBackupResponseVolume.
        :param lifecycle: The lifecycle of this CreateVolumeFromBackupResponseVolume.
        :param name: The name of this CreateVolumeFromBackupResponseVolume.
        :param ontap_configuration: The ontap_configuration of this CreateVolumeFromBackupResponseVolume.
        :param resource_arn: The resource_arn of this CreateVolumeFromBackupResponseVolume.
        :param tags: The tags of this CreateVolumeFromBackupResponseVolume.
        :param volume_id: The volume_id of this CreateVolumeFromBackupResponseVolume.
        :param volume_type: The volume_type of this CreateVolumeFromBackupResponseVolume.
        :param lifecycle_transition_reason: The lifecycle_transition_reason of this CreateVolumeFromBackupResponseVolume.
        :param administrative_actions: The administrative_actions of this CreateVolumeFromBackupResponseVolume.
        :param open_zfs_configuration: The open_zfs_configuration of this CreateVolumeFromBackupResponseVolume.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'file_system_id': str,
            'lifecycle': VolumeLifecycle,
            'name': str,
            'ontap_configuration': OntapVolumeConfiguration,
            'resource_arn': str,
            'tags': List[Tag],
            'volume_id': str,
            'volume_type': VolumeType,
            'lifecycle_transition_reason': VolumeLifecycleTransitionReason,
            'administrative_actions': List,
            'open_zfs_configuration': VolumeOpenZFSConfiguration
        }

        self.attribute_map = {
            'creation_time': 'CreationTime',
            'file_system_id': 'FileSystemId',
            'lifecycle': 'Lifecycle',
            'name': 'Name',
            'ontap_configuration': 'OntapConfiguration',
            'resource_arn': 'ResourceARN',
            'tags': 'Tags',
            'volume_id': 'VolumeId',
            'volume_type': 'VolumeType',
            'lifecycle_transition_reason': 'LifecycleTransitionReason',
            'administrative_actions': 'AdministrativeActions',
            'open_zfs_configuration': 'OpenZFSConfiguration'
        }

        self._creation_time = creation_time
        self._file_system_id = file_system_id
        self._lifecycle = lifecycle
        self._name = name
        self._ontap_configuration = ontap_configuration
        self._resource_arn = resource_arn
        self._tags = tags
        self._volume_id = volume_id
        self._volume_type = volume_type
        self._lifecycle_transition_reason = lifecycle_transition_reason
        self._administrative_actions = administrative_actions
        self._open_zfs_configuration = open_zfs_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVolumeFromBackupResponseVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVolumeFromBackupResponse_Volume of this CreateVolumeFromBackupResponseVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this CreateVolumeFromBackupResponseVolume.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :return: The creation_time of this CreateVolumeFromBackupResponseVolume.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CreateVolumeFromBackupResponseVolume.

        The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.

        :param creation_time: The creation_time of this CreateVolumeFromBackupResponseVolume.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateVolumeFromBackupResponseVolume.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :return: The file_system_id of this CreateVolumeFromBackupResponseVolume.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateVolumeFromBackupResponseVolume.

        The globally unique ID of the file system, assigned by Amazon FSx.

        :param file_system_id: The file_system_id of this CreateVolumeFromBackupResponseVolume.
        :type file_system_id: str
        """
        if file_system_id is not None and len(file_system_id) > 21:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `21`")
        if file_system_id is not None and len(file_system_id) < 11:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `11`")
        if file_system_id is not None and not re.search(r'^(fs-[0-9a-f]{8,})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(fs-[0-9a-f]{8,})$/`")

        self._file_system_id = file_system_id

    @property
    def lifecycle(self):
        """Gets the lifecycle of this CreateVolumeFromBackupResponseVolume.


        :return: The lifecycle of this CreateVolumeFromBackupResponseVolume.
        :rtype: VolumeLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this CreateVolumeFromBackupResponseVolume.


        :param lifecycle: The lifecycle of this CreateVolumeFromBackupResponseVolume.
        :type lifecycle: VolumeLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def name(self):
        """Gets the name of this CreateVolumeFromBackupResponseVolume.


        :return: The name of this CreateVolumeFromBackupResponseVolume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVolumeFromBackupResponseVolume.


        :param name: The name of this CreateVolumeFromBackupResponseVolume.
        :type name: str
        """

        self._name = name

    @property
    def ontap_configuration(self):
        """Gets the ontap_configuration of this CreateVolumeFromBackupResponseVolume.


        :return: The ontap_configuration of this CreateVolumeFromBackupResponseVolume.
        :rtype: OntapVolumeConfiguration
        """
        return self._ontap_configuration

    @ontap_configuration.setter
    def ontap_configuration(self, ontap_configuration):
        """Sets the ontap_configuration of this CreateVolumeFromBackupResponseVolume.


        :param ontap_configuration: The ontap_configuration of this CreateVolumeFromBackupResponseVolume.
        :type ontap_configuration: OntapVolumeConfiguration
        """

        self._ontap_configuration = ontap_configuration

    @property
    def resource_arn(self):
        """Gets the resource_arn of this CreateVolumeFromBackupResponseVolume.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The resource_arn of this CreateVolumeFromBackupResponseVolume.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this CreateVolumeFromBackupResponseVolume.

        The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.

        :param resource_arn: The resource_arn of this CreateVolumeFromBackupResponseVolume.
        :type resource_arn: str
        """
        if resource_arn is not None and len(resource_arn) > 512:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `512`")
        if resource_arn is not None and len(resource_arn) < 8:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `8`")
        if resource_arn is not None and not re.search(r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!\/).{0,1024}$/`")

        self._resource_arn = resource_arn

    @property
    def tags(self):
        """Gets the tags of this CreateVolumeFromBackupResponseVolume.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :return: The tags of this CreateVolumeFromBackupResponseVolume.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVolumeFromBackupResponseVolume.

        A list of <code>Tag</code> values, with a maximum of 50 elements.

        :param tags: The tags of this CreateVolumeFromBackupResponseVolume.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def volume_id(self):
        """Gets the volume_id of this CreateVolumeFromBackupResponseVolume.


        :return: The volume_id of this CreateVolumeFromBackupResponseVolume.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this CreateVolumeFromBackupResponseVolume.


        :param volume_id: The volume_id of this CreateVolumeFromBackupResponseVolume.
        :type volume_id: str
        """

        self._volume_id = volume_id

    @property
    def volume_type(self):
        """Gets the volume_type of this CreateVolumeFromBackupResponseVolume.


        :return: The volume_type of this CreateVolumeFromBackupResponseVolume.
        :rtype: VolumeType
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this CreateVolumeFromBackupResponseVolume.


        :param volume_type: The volume_type of this CreateVolumeFromBackupResponseVolume.
        :type volume_type: VolumeType
        """

        self._volume_type = volume_type

    @property
    def lifecycle_transition_reason(self):
        """Gets the lifecycle_transition_reason of this CreateVolumeFromBackupResponseVolume.


        :return: The lifecycle_transition_reason of this CreateVolumeFromBackupResponseVolume.
        :rtype: VolumeLifecycleTransitionReason
        """
        return self._lifecycle_transition_reason

    @lifecycle_transition_reason.setter
    def lifecycle_transition_reason(self, lifecycle_transition_reason):
        """Sets the lifecycle_transition_reason of this CreateVolumeFromBackupResponseVolume.


        :param lifecycle_transition_reason: The lifecycle_transition_reason of this CreateVolumeFromBackupResponseVolume.
        :type lifecycle_transition_reason: VolumeLifecycleTransitionReason
        """

        self._lifecycle_transition_reason = lifecycle_transition_reason

    @property
    def administrative_actions(self):
        """Gets the administrative_actions of this CreateVolumeFromBackupResponseVolume.


        :return: The administrative_actions of this CreateVolumeFromBackupResponseVolume.
        :rtype: List
        """
        return self._administrative_actions

    @administrative_actions.setter
    def administrative_actions(self, administrative_actions):
        """Sets the administrative_actions of this CreateVolumeFromBackupResponseVolume.


        :param administrative_actions: The administrative_actions of this CreateVolumeFromBackupResponseVolume.
        :type administrative_actions: List
        """

        self._administrative_actions = administrative_actions

    @property
    def open_zfs_configuration(self):
        """Gets the open_zfs_configuration of this CreateVolumeFromBackupResponseVolume.


        :return: The open_zfs_configuration of this CreateVolumeFromBackupResponseVolume.
        :rtype: VolumeOpenZFSConfiguration
        """
        return self._open_zfs_configuration

    @open_zfs_configuration.setter
    def open_zfs_configuration(self, open_zfs_configuration):
        """Sets the open_zfs_configuration of this CreateVolumeFromBackupResponseVolume.


        :param open_zfs_configuration: The open_zfs_configuration of this CreateVolumeFromBackupResponseVolume.
        :type open_zfs_configuration: VolumeOpenZFSConfiguration
        """

        self._open_zfs_configuration = open_zfs_configuration
