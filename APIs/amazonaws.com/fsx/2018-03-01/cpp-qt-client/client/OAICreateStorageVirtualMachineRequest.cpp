/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStorageVirtualMachineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStorageVirtualMachineRequest::OAICreateStorageVirtualMachineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStorageVirtualMachineRequest::OAICreateStorageVirtualMachineRequest() {
    this->initializeModel();
}

OAICreateStorageVirtualMachineRequest::~OAICreateStorageVirtualMachineRequest() {}

void OAICreateStorageVirtualMachineRequest::initializeModel() {

    m_active_directory_configuration_isSet = false;
    m_active_directory_configuration_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_svm_admin_password_isSet = false;
    m_svm_admin_password_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_root_volume_security_style_isSet = false;
    m_root_volume_security_style_isValid = false;
}

void OAICreateStorageVirtualMachineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStorageVirtualMachineRequest::fromJsonObject(QJsonObject json) {

    m_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_active_directory_configuration, json[QString("ActiveDirectoryConfiguration")]);
    m_active_directory_configuration_isSet = !json[QString("ActiveDirectoryConfiguration")].isNull() && m_active_directory_configuration_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_svm_admin_password_isValid = ::OpenAPI::fromJsonValue(m_svm_admin_password, json[QString("SvmAdminPassword")]);
    m_svm_admin_password_isSet = !json[QString("SvmAdminPassword")].isNull() && m_svm_admin_password_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_root_volume_security_style_isValid = ::OpenAPI::fromJsonValue(m_root_volume_security_style, json[QString("RootVolumeSecurityStyle")]);
    m_root_volume_security_style_isSet = !json[QString("RootVolumeSecurityStyle")].isNull() && m_root_volume_security_style_isValid;
}

QString OAICreateStorageVirtualMachineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStorageVirtualMachineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_configuration.isSet()) {
        obj.insert(QString("ActiveDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_active_directory_configuration));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_svm_admin_password_isSet) {
        obj.insert(QString("SvmAdminPassword"), ::OpenAPI::toJsonValue(m_svm_admin_password));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_root_volume_security_style.isSet()) {
        obj.insert(QString("RootVolumeSecurityStyle"), ::OpenAPI::toJsonValue(m_root_volume_security_style));
    }
    return obj;
}

OAICreateStorageVirtualMachineRequest_ActiveDirectoryConfiguration OAICreateStorageVirtualMachineRequest::getActiveDirectoryConfiguration() const {
    return m_active_directory_configuration;
}
void OAICreateStorageVirtualMachineRequest::setActiveDirectoryConfiguration(const OAICreateStorageVirtualMachineRequest_ActiveDirectoryConfiguration &active_directory_configuration) {
    m_active_directory_configuration = active_directory_configuration;
    m_active_directory_configuration_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_active_directory_configuration_Set() const{
    return m_active_directory_configuration_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_active_directory_configuration_Valid() const{
    return m_active_directory_configuration_isValid;
}

QString OAICreateStorageVirtualMachineRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateStorageVirtualMachineRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreateStorageVirtualMachineRequest::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateStorageVirtualMachineRequest::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAICreateStorageVirtualMachineRequest::getName() const {
    return m_name;
}
void OAICreateStorageVirtualMachineRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateStorageVirtualMachineRequest::getSvmAdminPassword() const {
    return m_svm_admin_password;
}
void OAICreateStorageVirtualMachineRequest::setSvmAdminPassword(const QString &svm_admin_password) {
    m_svm_admin_password = svm_admin_password;
    m_svm_admin_password_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_svm_admin_password_Set() const{
    return m_svm_admin_password_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_svm_admin_password_Valid() const{
    return m_svm_admin_password_isValid;
}

QList<OAITag> OAICreateStorageVirtualMachineRequest::getTags() const {
    return m_tags;
}
void OAICreateStorageVirtualMachineRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIStorageVirtualMachineRootVolumeSecurityStyle OAICreateStorageVirtualMachineRequest::getRootVolumeSecurityStyle() const {
    return m_root_volume_security_style;
}
void OAICreateStorageVirtualMachineRequest::setRootVolumeSecurityStyle(const OAIStorageVirtualMachineRootVolumeSecurityStyle &root_volume_security_style) {
    m_root_volume_security_style = root_volume_security_style;
    m_root_volume_security_style_isSet = true;
}

bool OAICreateStorageVirtualMachineRequest::is_root_volume_security_style_Set() const{
    return m_root_volume_security_style_isSet;
}

bool OAICreateStorageVirtualMachineRequest::is_root_volume_security_style_Valid() const{
    return m_root_volume_security_style_isValid;
}

bool OAICreateStorageVirtualMachineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svm_admin_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_volume_security_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStorageVirtualMachineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
