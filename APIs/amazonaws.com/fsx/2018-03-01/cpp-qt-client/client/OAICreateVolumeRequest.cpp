/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVolumeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVolumeRequest::OAICreateVolumeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVolumeRequest::OAICreateVolumeRequest() {
    this->initializeModel();
}

OAICreateVolumeRequest::~OAICreateVolumeRequest() {}

void OAICreateVolumeRequest::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ontap_configuration_isSet = false;
    m_ontap_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_open_zfs_configuration_isSet = false;
    m_open_zfs_configuration_isValid = false;
}

void OAICreateVolumeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVolumeRequest::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("VolumeType")]);
    m_volume_type_isSet = !json[QString("VolumeType")].isNull() && m_volume_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_ontap_configuration_isValid = ::OpenAPI::fromJsonValue(m_ontap_configuration, json[QString("OntapConfiguration")]);
    m_ontap_configuration_isSet = !json[QString("OntapConfiguration")].isNull() && m_ontap_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_open_zfs_configuration_isValid = ::OpenAPI::fromJsonValue(m_open_zfs_configuration, json[QString("OpenZFSConfiguration")]);
    m_open_zfs_configuration_isSet = !json[QString("OpenZFSConfiguration")].isNull() && m_open_zfs_configuration_isValid;
}

QString OAICreateVolumeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVolumeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_volume_type.isSet()) {
        obj.insert(QString("VolumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ontap_configuration.isSet()) {
        obj.insert(QString("OntapConfiguration"), ::OpenAPI::toJsonValue(m_ontap_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_open_zfs_configuration.isSet()) {
        obj.insert(QString("OpenZFSConfiguration"), ::OpenAPI::toJsonValue(m_open_zfs_configuration));
    }
    return obj;
}

QString OAICreateVolumeRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateVolumeRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateVolumeRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateVolumeRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAIVolumeType OAICreateVolumeRequest::getVolumeType() const {
    return m_volume_type;
}
void OAICreateVolumeRequest::setVolumeType(const OAIVolumeType &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAICreateVolumeRequest::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAICreateVolumeRequest::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

QString OAICreateVolumeRequest::getName() const {
    return m_name;
}
void OAICreateVolumeRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateVolumeRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateVolumeRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateVolumeRequest_OntapConfiguration OAICreateVolumeRequest::getOntapConfiguration() const {
    return m_ontap_configuration;
}
void OAICreateVolumeRequest::setOntapConfiguration(const OAICreateVolumeRequest_OntapConfiguration &ontap_configuration) {
    m_ontap_configuration = ontap_configuration;
    m_ontap_configuration_isSet = true;
}

bool OAICreateVolumeRequest::is_ontap_configuration_Set() const{
    return m_ontap_configuration_isSet;
}

bool OAICreateVolumeRequest::is_ontap_configuration_Valid() const{
    return m_ontap_configuration_isValid;
}

QList<OAITag> OAICreateVolumeRequest::getTags() const {
    return m_tags;
}
void OAICreateVolumeRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVolumeRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVolumeRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateVolumeRequest_OpenZFSConfiguration OAICreateVolumeRequest::getOpenZfsConfiguration() const {
    return m_open_zfs_configuration;
}
void OAICreateVolumeRequest::setOpenZfsConfiguration(const OAICreateVolumeRequest_OpenZFSConfiguration &open_zfs_configuration) {
    m_open_zfs_configuration = open_zfs_configuration;
    m_open_zfs_configuration_isSet = true;
}

bool OAICreateVolumeRequest::is_open_zfs_configuration_Set() const{
    return m_open_zfs_configuration_isSet;
}

bool OAICreateVolumeRequest::is_open_zfs_configuration_Valid() const{
    return m_open_zfs_configuration_isValid;
}

bool OAICreateVolumeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ontap_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_zfs_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVolumeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_volume_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
