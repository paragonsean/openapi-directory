/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILustreDeploymentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILustreDeploymentType::OAILustreDeploymentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILustreDeploymentType::OAILustreDeploymentType() {
    this->initializeModel();
}

OAILustreDeploymentType::~OAILustreDeploymentType() {}

void OAILustreDeploymentType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILustreDeploymentType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILustreDeploymentType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SCRATCH_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAILustreDeploymentType::SCRATCH_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCRATCH_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAILustreDeploymentType::SCRATCH_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERSISTENT_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAILustreDeploymentType::PERSISTENT_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERSISTENT_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAILustreDeploymentType::PERSISTENT_2;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILustreDeploymentType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILustreDeploymentType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILustreDeploymentType::SCRATCH_1:
            val = "SCRATCH_1";
            break;
        case eOAILustreDeploymentType::SCRATCH_2:
            val = "SCRATCH_2";
            break;
        case eOAILustreDeploymentType::PERSISTENT_1:
            val = "PERSISTENT_1";
            break;
        case eOAILustreDeploymentType::PERSISTENT_2:
            val = "PERSISTENT_2";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILustreDeploymentType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILustreDeploymentType::eOAILustreDeploymentType OAILustreDeploymentType::getValue() const {
    return m_value;
}

void OAILustreDeploymentType::setValue(const OAILustreDeploymentType::eOAILustreDeploymentType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILustreDeploymentType::isSet() const {
    
    return m_value_isSet;
}

bool OAILustreDeploymentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
