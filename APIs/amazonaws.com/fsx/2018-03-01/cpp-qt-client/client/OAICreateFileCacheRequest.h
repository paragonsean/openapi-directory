/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFileCacheRequest.h
 *
 * 
 */

#ifndef OAICreateFileCacheRequest_H
#define OAICreateFileCacheRequest_H

#include <QJsonObject>

#include "OAICreateFileCacheRequest_LustreConfiguration.h"
#include "OAIFileCacheType.h"
#include "OAITag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITag;
class OAICreateFileCacheRequest_LustreConfiguration;

class OAICreateFileCacheRequest : public OAIObject {
public:
    OAICreateFileCacheRequest();
    OAICreateFileCacheRequest(QString json);
    ~OAICreateFileCacheRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    OAIFileCacheType getFileCacheType() const;
    void setFileCacheType(const OAIFileCacheType &file_cache_type);
    bool is_file_cache_type_Set() const;
    bool is_file_cache_type_Valid() const;

    QString getFileCacheTypeVersion() const;
    void setFileCacheTypeVersion(const QString &file_cache_type_version);
    bool is_file_cache_type_version_Set() const;
    bool is_file_cache_type_version_Valid() const;

    qint32 getStorageCapacity() const;
    void setStorageCapacity(const qint32 &storage_capacity);
    bool is_storage_capacity_Set() const;
    bool is_storage_capacity_Valid() const;

    QList<QString> getSubnetIds() const;
    void setSubnetIds(const QList<QString> &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QList<OAITag> getTags() const;
    void setTags(const QList<OAITag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    bool getCopyTagsToDataRepositoryAssociations() const;
    void setCopyTagsToDataRepositoryAssociations(const bool &copy_tags_to_data_repository_associations);
    bool is_copy_tags_to_data_repository_associations_Set() const;
    bool is_copy_tags_to_data_repository_associations_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    OAICreateFileCacheRequest_LustreConfiguration getLustreConfiguration() const;
    void setLustreConfiguration(const OAICreateFileCacheRequest_LustreConfiguration &lustre_configuration);
    bool is_lustre_configuration_Set() const;
    bool is_lustre_configuration_Valid() const;

    QList getDataRepositoryAssociations() const;
    void setDataRepositoryAssociations(const QList &data_repository_associations);
    bool is_data_repository_associations_Set() const;
    bool is_data_repository_associations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    OAIFileCacheType m_file_cache_type;
    bool m_file_cache_type_isSet;
    bool m_file_cache_type_isValid;

    QString m_file_cache_type_version;
    bool m_file_cache_type_version_isSet;
    bool m_file_cache_type_version_isValid;

    qint32 m_storage_capacity;
    bool m_storage_capacity_isSet;
    bool m_storage_capacity_isValid;

    QList<QString> m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QList<OAITag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    bool m_copy_tags_to_data_repository_associations;
    bool m_copy_tags_to_data_repository_associations_isSet;
    bool m_copy_tags_to_data_repository_associations_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    OAICreateFileCacheRequest_LustreConfiguration m_lustre_configuration;
    bool m_lustre_configuration_isSet;
    bool m_lustre_configuration_isValid;

    QList m_data_repository_associations;
    bool m_data_repository_associations_isSet;
    bool m_data_repository_associations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFileCacheRequest)

#endif // OAICreateFileCacheRequest_H
