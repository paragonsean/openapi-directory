/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterName::OAIFilterName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterName::OAIFilterName() {
    this->initializeModel();
}

OAIFilterName::~OAIFilterName() {}

void OAIFilterName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFilterName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFilterName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("file-system-id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::FILE_SYSTEM_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("backup-type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::BACKUP_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("file-system-type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::FILE_SYSTEM_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("volume-id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::VOLUME_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("data-repository-type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::DATA_REPOSITORY_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("file-cache-id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::FILE_CACHE_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("file-cache-type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterName::FILE_CACHE_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFilterName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFilterName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFilterName::FILE_SYSTEM_ID:
            val = "file-system-id";
            break;
        case eOAIFilterName::BACKUP_TYPE:
            val = "backup-type";
            break;
        case eOAIFilterName::FILE_SYSTEM_TYPE:
            val = "file-system-type";
            break;
        case eOAIFilterName::VOLUME_ID:
            val = "volume-id";
            break;
        case eOAIFilterName::DATA_REPOSITORY_TYPE:
            val = "data-repository-type";
            break;
        case eOAIFilterName::FILE_CACHE_ID:
            val = "file-cache-id";
            break;
        case eOAIFilterName::FILE_CACHE_TYPE:
            val = "file-cache-type";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFilterName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFilterName::eOAIFilterName OAIFilterName::getValue() const {
    return m_value;
}

void OAIFilterName::setValue(const OAIFilterName::eOAIFilterName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFilterName::isSet() const {
    
    return m_value_isSet;
}

bool OAIFilterName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
