/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataRepositoryTask.h
 *
 * A description of the data repository task. You use data repository tasks to perform bulk transfer operations between an Amazon FSx for Lustre file system and a linked data repository. An Amazon File Cache resource uses a task to automatically release files from the cache.
 */

#ifndef OAIDataRepositoryTask_H
#define OAIDataRepositoryTask_H

#include <QJsonObject>

#include "OAICompletionReport.h"
#include "OAIDataRepositoryTaskLifecycle.h"
#include "OAIDataRepositoryTaskType.h"
#include "OAIDataRepositoryTask_FailureDetails.h"
#include "OAIDataRepositoryTask_Status.h"
#include "OAITag.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITag;
class OAIDataRepositoryTask_FailureDetails;
class OAIDataRepositoryTask_Status;
class OAICompletionReport;

class OAIDataRepositoryTask : public OAIObject {
public:
    OAIDataRepositoryTask();
    OAIDataRepositoryTask(QString json);
    ~OAIDataRepositoryTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTaskId() const;
    void setTaskId(const QString &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    OAIDataRepositoryTaskLifecycle getLifecycle() const;
    void setLifecycle(const OAIDataRepositoryTaskLifecycle &lifecycle);
    bool is_lifecycle_Set() const;
    bool is_lifecycle_Valid() const;

    OAIDataRepositoryTaskType getType() const;
    void setType(const OAIDataRepositoryTaskType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    QList<OAITag> getTags() const;
    void setTags(const QList<OAITag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    QList getPaths() const;
    void setPaths(const QList &paths);
    bool is_paths_Set() const;
    bool is_paths_Valid() const;

    OAIDataRepositoryTask_FailureDetails getFailureDetails() const;
    void setFailureDetails(const OAIDataRepositoryTask_FailureDetails &failure_details);
    bool is_failure_details_Set() const;
    bool is_failure_details_Valid() const;

    OAIDataRepositoryTask_Status getStatus() const;
    void setStatus(const OAIDataRepositoryTask_Status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICompletionReport getReport() const;
    void setReport(const OAICompletionReport &report);
    bool is_report_Set() const;
    bool is_report_Valid() const;

    qint32 getCapacityToRelease() const;
    void setCapacityToRelease(const qint32 &capacity_to_release);
    bool is_capacity_to_release_Set() const;
    bool is_capacity_to_release_Valid() const;

    QString getFileCacheId() const;
    void setFileCacheId(const QString &file_cache_id);
    bool is_file_cache_id_Set() const;
    bool is_file_cache_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    OAIDataRepositoryTaskLifecycle m_lifecycle;
    bool m_lifecycle_isSet;
    bool m_lifecycle_isValid;

    OAIDataRepositoryTaskType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    QList<OAITag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    QList m_paths;
    bool m_paths_isSet;
    bool m_paths_isValid;

    OAIDataRepositoryTask_FailureDetails m_failure_details;
    bool m_failure_details_isSet;
    bool m_failure_details_isValid;

    OAIDataRepositoryTask_Status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICompletionReport m_report;
    bool m_report_isSet;
    bool m_report_isValid;

    qint32 m_capacity_to_release;
    bool m_capacity_to_release_isSet;
    bool m_capacity_to_release_isValid;

    QString m_file_cache_id;
    bool m_file_cache_id_isSet;
    bool m_file_cache_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataRepositoryTask)

#endif // OAIDataRepositoryTask_H
