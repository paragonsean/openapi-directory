/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileCacheDataRepositoryAssociation.h
 *
 * &lt;p&gt;The configuration for a data repository association (DRA) to be created during the Amazon File Cache resource creation. The DRA links the cache to either an Amazon S3 bucket or prefix, or a Network File System (NFS) data repository that supports the NFSv3 protocol.&lt;/p&gt; &lt;p&gt;The DRA does not support automatic import or automatic export.&lt;/p&gt;
 */

#ifndef OAIFileCacheDataRepositoryAssociation_H
#define OAIFileCacheDataRepositoryAssociation_H

#include <QJsonObject>

#include "OAIFileCacheDataRepositoryAssociation_NFS.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFileCacheDataRepositoryAssociation_NFS;

class OAIFileCacheDataRepositoryAssociation : public OAIObject {
public:
    OAIFileCacheDataRepositoryAssociation();
    OAIFileCacheDataRepositoryAssociation(QString json);
    ~OAIFileCacheDataRepositoryAssociation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFileCachePath() const;
    void setFileCachePath(const QString &file_cache_path);
    bool is_file_cache_path_Set() const;
    bool is_file_cache_path_Valid() const;

    QString getDataRepositoryPath() const;
    void setDataRepositoryPath(const QString &data_repository_path);
    bool is_data_repository_path_Set() const;
    bool is_data_repository_path_Valid() const;

    QList getDataRepositorySubdirectories() const;
    void setDataRepositorySubdirectories(const QList &data_repository_subdirectories);
    bool is_data_repository_subdirectories_Set() const;
    bool is_data_repository_subdirectories_Valid() const;

    OAIFileCacheDataRepositoryAssociation_NFS getNfs() const;
    void setNfs(const OAIFileCacheDataRepositoryAssociation_NFS &nfs);
    bool is_nfs_Set() const;
    bool is_nfs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_cache_path;
    bool m_file_cache_path_isSet;
    bool m_file_cache_path_isValid;

    QString m_data_repository_path;
    bool m_data_repository_path_isSet;
    bool m_data_repository_path_isValid;

    QList m_data_repository_subdirectories;
    bool m_data_repository_subdirectories_isSet;
    bool m_data_repository_subdirectories_isValid;

    OAIFileCacheDataRepositoryAssociation_NFS m_nfs;
    bool m_nfs_isSet;
    bool m_nfs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileCacheDataRepositoryAssociation)

#endif // OAIFileCacheDataRepositoryAssociation_H
