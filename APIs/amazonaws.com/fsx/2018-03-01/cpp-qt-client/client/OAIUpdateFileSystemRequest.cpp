/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystemRequest::OAIUpdateFileSystemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystemRequest::OAIUpdateFileSystemRequest() {
    this->initializeModel();
}

OAIUpdateFileSystemRequest::~OAIUpdateFileSystemRequest() {}

void OAIUpdateFileSystemRequest::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_windows_configuration_isSet = false;
    m_windows_configuration_isValid = false;

    m_lustre_configuration_isSet = false;
    m_lustre_configuration_isValid = false;

    m_ontap_configuration_isSet = false;
    m_ontap_configuration_isValid = false;

    m_open_zfs_configuration_isSet = false;
    m_open_zfs_configuration_isValid = false;
}

void OAIUpdateFileSystemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystemRequest::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("StorageCapacity")]);
    m_storage_capacity_isSet = !json[QString("StorageCapacity")].isNull() && m_storage_capacity_isValid;

    m_windows_configuration_isValid = ::OpenAPI::fromJsonValue(m_windows_configuration, json[QString("WindowsConfiguration")]);
    m_windows_configuration_isSet = !json[QString("WindowsConfiguration")].isNull() && m_windows_configuration_isValid;

    m_lustre_configuration_isValid = ::OpenAPI::fromJsonValue(m_lustre_configuration, json[QString("LustreConfiguration")]);
    m_lustre_configuration_isSet = !json[QString("LustreConfiguration")].isNull() && m_lustre_configuration_isValid;

    m_ontap_configuration_isValid = ::OpenAPI::fromJsonValue(m_ontap_configuration, json[QString("OntapConfiguration")]);
    m_ontap_configuration_isSet = !json[QString("OntapConfiguration")].isNull() && m_ontap_configuration_isValid;

    m_open_zfs_configuration_isValid = ::OpenAPI::fromJsonValue(m_open_zfs_configuration, json[QString("OpenZFSConfiguration")]);
    m_open_zfs_configuration_isSet = !json[QString("OpenZFSConfiguration")].isNull() && m_open_zfs_configuration_isValid;
}

QString OAIUpdateFileSystemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("StorageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_windows_configuration.isSet()) {
        obj.insert(QString("WindowsConfiguration"), ::OpenAPI::toJsonValue(m_windows_configuration));
    }
    if (m_lustre_configuration.isSet()) {
        obj.insert(QString("LustreConfiguration"), ::OpenAPI::toJsonValue(m_lustre_configuration));
    }
    if (m_ontap_configuration.isSet()) {
        obj.insert(QString("OntapConfiguration"), ::OpenAPI::toJsonValue(m_ontap_configuration));
    }
    if (m_open_zfs_configuration.isSet()) {
        obj.insert(QString("OpenZFSConfiguration"), ::OpenAPI::toJsonValue(m_open_zfs_configuration));
    }
    return obj;
}

QString OAIUpdateFileSystemRequest::getFileSystemId() const {
    return m_file_system_id;
}
void OAIUpdateFileSystemRequest::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIUpdateFileSystemRequest::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIUpdateFileSystemRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateFileSystemRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateFileSystemRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

qint32 OAIUpdateFileSystemRequest::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAIUpdateFileSystemRequest::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAIUpdateFileSystemRequest::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

OAIUpdateFileSystemRequest_WindowsConfiguration OAIUpdateFileSystemRequest::getWindowsConfiguration() const {
    return m_windows_configuration;
}
void OAIUpdateFileSystemRequest::setWindowsConfiguration(const OAIUpdateFileSystemRequest_WindowsConfiguration &windows_configuration) {
    m_windows_configuration = windows_configuration;
    m_windows_configuration_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_windows_configuration_Set() const{
    return m_windows_configuration_isSet;
}

bool OAIUpdateFileSystemRequest::is_windows_configuration_Valid() const{
    return m_windows_configuration_isValid;
}

OAIUpdateFileSystemLustreConfiguration OAIUpdateFileSystemRequest::getLustreConfiguration() const {
    return m_lustre_configuration;
}
void OAIUpdateFileSystemRequest::setLustreConfiguration(const OAIUpdateFileSystemLustreConfiguration &lustre_configuration) {
    m_lustre_configuration = lustre_configuration;
    m_lustre_configuration_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_lustre_configuration_Set() const{
    return m_lustre_configuration_isSet;
}

bool OAIUpdateFileSystemRequest::is_lustre_configuration_Valid() const{
    return m_lustre_configuration_isValid;
}

OAIUpdateFileSystemOntapConfiguration OAIUpdateFileSystemRequest::getOntapConfiguration() const {
    return m_ontap_configuration;
}
void OAIUpdateFileSystemRequest::setOntapConfiguration(const OAIUpdateFileSystemOntapConfiguration &ontap_configuration) {
    m_ontap_configuration = ontap_configuration;
    m_ontap_configuration_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_ontap_configuration_Set() const{
    return m_ontap_configuration_isSet;
}

bool OAIUpdateFileSystemRequest::is_ontap_configuration_Valid() const{
    return m_ontap_configuration_isValid;
}

OAIUpdateFileSystemRequest_OpenZFSConfiguration OAIUpdateFileSystemRequest::getOpenZfsConfiguration() const {
    return m_open_zfs_configuration;
}
void OAIUpdateFileSystemRequest::setOpenZfsConfiguration(const OAIUpdateFileSystemRequest_OpenZFSConfiguration &open_zfs_configuration) {
    m_open_zfs_configuration = open_zfs_configuration;
    m_open_zfs_configuration_isSet = true;
}

bool OAIUpdateFileSystemRequest::is_open_zfs_configuration_Set() const{
    return m_open_zfs_configuration_isSet;
}

bool OAIUpdateFileSystemRequest::is_open_zfs_configuration_Valid() const{
    return m_open_zfs_configuration_isValid;
}

bool OAIUpdateFileSystemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lustre_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ontap_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_zfs_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && true;
}

} // namespace OpenAPI
