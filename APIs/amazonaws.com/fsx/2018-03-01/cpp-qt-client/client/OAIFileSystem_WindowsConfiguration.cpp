/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileSystem_WindowsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileSystem_WindowsConfiguration::OAIFileSystem_WindowsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileSystem_WindowsConfiguration::OAIFileSystem_WindowsConfiguration() {
    this->initializeModel();
}

OAIFileSystem_WindowsConfiguration::~OAIFileSystem_WindowsConfiguration() {}

void OAIFileSystem_WindowsConfiguration::initializeModel() {

    m_active_directory_id_isSet = false;
    m_active_directory_id_isValid = false;

    m_self_managed_active_directory_configuration_isSet = false;
    m_self_managed_active_directory_configuration_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_remote_administration_endpoint_isSet = false;
    m_remote_administration_endpoint_isValid = false;

    m_preferred_subnet_id_isSet = false;
    m_preferred_subnet_id_isValid = false;

    m_preferred_file_server_ip_isSet = false;
    m_preferred_file_server_ip_isValid = false;

    m_throughput_capacity_isSet = false;
    m_throughput_capacity_isValid = false;

    m_maintenance_operations_in_progress_isSet = false;
    m_maintenance_operations_in_progress_isValid = false;

    m_weekly_maintenance_start_time_isSet = false;
    m_weekly_maintenance_start_time_isValid = false;

    m_daily_automatic_backup_start_time_isSet = false;
    m_daily_automatic_backup_start_time_isValid = false;

    m_automatic_backup_retention_days_isSet = false;
    m_automatic_backup_retention_days_isValid = false;

    m_copy_tags_to_backups_isSet = false;
    m_copy_tags_to_backups_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_audit_log_configuration_isSet = false;
    m_audit_log_configuration_isValid = false;
}

void OAIFileSystem_WindowsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileSystem_WindowsConfiguration::fromJsonObject(QJsonObject json) {

    m_active_directory_id_isValid = ::OpenAPI::fromJsonValue(m_active_directory_id, json[QString("ActiveDirectoryId")]);
    m_active_directory_id_isSet = !json[QString("ActiveDirectoryId")].isNull() && m_active_directory_id_isValid;

    m_self_managed_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_self_managed_active_directory_configuration, json[QString("SelfManagedActiveDirectoryConfiguration")]);
    m_self_managed_active_directory_configuration_isSet = !json[QString("SelfManagedActiveDirectoryConfiguration")].isNull() && m_self_managed_active_directory_configuration_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("DeploymentType")]);
    m_deployment_type_isSet = !json[QString("DeploymentType")].isNull() && m_deployment_type_isValid;

    m_remote_administration_endpoint_isValid = ::OpenAPI::fromJsonValue(m_remote_administration_endpoint, json[QString("RemoteAdministrationEndpoint")]);
    m_remote_administration_endpoint_isSet = !json[QString("RemoteAdministrationEndpoint")].isNull() && m_remote_administration_endpoint_isValid;

    m_preferred_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_preferred_subnet_id, json[QString("PreferredSubnetId")]);
    m_preferred_subnet_id_isSet = !json[QString("PreferredSubnetId")].isNull() && m_preferred_subnet_id_isValid;

    m_preferred_file_server_ip_isValid = ::OpenAPI::fromJsonValue(m_preferred_file_server_ip, json[QString("PreferredFileServerIp")]);
    m_preferred_file_server_ip_isSet = !json[QString("PreferredFileServerIp")].isNull() && m_preferred_file_server_ip_isValid;

    m_throughput_capacity_isValid = ::OpenAPI::fromJsonValue(m_throughput_capacity, json[QString("ThroughputCapacity")]);
    m_throughput_capacity_isSet = !json[QString("ThroughputCapacity")].isNull() && m_throughput_capacity_isValid;

    m_maintenance_operations_in_progress_isValid = ::OpenAPI::fromJsonValue(m_maintenance_operations_in_progress, json[QString("MaintenanceOperationsInProgress")]);
    m_maintenance_operations_in_progress_isSet = !json[QString("MaintenanceOperationsInProgress")].isNull() && m_maintenance_operations_in_progress_isValid;

    m_weekly_maintenance_start_time_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_start_time, json[QString("WeeklyMaintenanceStartTime")]);
    m_weekly_maintenance_start_time_isSet = !json[QString("WeeklyMaintenanceStartTime")].isNull() && m_weekly_maintenance_start_time_isValid;

    m_daily_automatic_backup_start_time_isValid = ::OpenAPI::fromJsonValue(m_daily_automatic_backup_start_time, json[QString("DailyAutomaticBackupStartTime")]);
    m_daily_automatic_backup_start_time_isSet = !json[QString("DailyAutomaticBackupStartTime")].isNull() && m_daily_automatic_backup_start_time_isValid;

    m_automatic_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_automatic_backup_retention_days, json[QString("AutomaticBackupRetentionDays")]);
    m_automatic_backup_retention_days_isSet = !json[QString("AutomaticBackupRetentionDays")].isNull() && m_automatic_backup_retention_days_isValid;

    m_copy_tags_to_backups_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_backups, json[QString("CopyTagsToBackups")]);
    m_copy_tags_to_backups_isSet = !json[QString("CopyTagsToBackups")].isNull() && m_copy_tags_to_backups_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_audit_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_audit_log_configuration, json[QString("AuditLogConfiguration")]);
    m_audit_log_configuration_isSet = !json[QString("AuditLogConfiguration")].isNull() && m_audit_log_configuration_isValid;
}

QString OAIFileSystem_WindowsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileSystem_WindowsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_id_isSet) {
        obj.insert(QString("ActiveDirectoryId"), ::OpenAPI::toJsonValue(m_active_directory_id));
    }
    if (m_self_managed_active_directory_configuration.isSet()) {
        obj.insert(QString("SelfManagedActiveDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_self_managed_active_directory_configuration));
    }
    if (m_deployment_type.isSet()) {
        obj.insert(QString("DeploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_remote_administration_endpoint_isSet) {
        obj.insert(QString("RemoteAdministrationEndpoint"), ::OpenAPI::toJsonValue(m_remote_administration_endpoint));
    }
    if (m_preferred_subnet_id_isSet) {
        obj.insert(QString("PreferredSubnetId"), ::OpenAPI::toJsonValue(m_preferred_subnet_id));
    }
    if (m_preferred_file_server_ip_isSet) {
        obj.insert(QString("PreferredFileServerIp"), ::OpenAPI::toJsonValue(m_preferred_file_server_ip));
    }
    if (m_throughput_capacity_isSet) {
        obj.insert(QString("ThroughputCapacity"), ::OpenAPI::toJsonValue(m_throughput_capacity));
    }
    if (m_maintenance_operations_in_progress.isSet()) {
        obj.insert(QString("MaintenanceOperationsInProgress"), ::OpenAPI::toJsonValue(m_maintenance_operations_in_progress));
    }
    if (m_weekly_maintenance_start_time_isSet) {
        obj.insert(QString("WeeklyMaintenanceStartTime"), ::OpenAPI::toJsonValue(m_weekly_maintenance_start_time));
    }
    if (m_daily_automatic_backup_start_time_isSet) {
        obj.insert(QString("DailyAutomaticBackupStartTime"), ::OpenAPI::toJsonValue(m_daily_automatic_backup_start_time));
    }
    if (m_automatic_backup_retention_days_isSet) {
        obj.insert(QString("AutomaticBackupRetentionDays"), ::OpenAPI::toJsonValue(m_automatic_backup_retention_days));
    }
    if (m_copy_tags_to_backups_isSet) {
        obj.insert(QString("CopyTagsToBackups"), ::OpenAPI::toJsonValue(m_copy_tags_to_backups));
    }
    if (m_aliases.size() > 0) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_audit_log_configuration.isSet()) {
        obj.insert(QString("AuditLogConfiguration"), ::OpenAPI::toJsonValue(m_audit_log_configuration));
    }
    return obj;
}

QString OAIFileSystem_WindowsConfiguration::getActiveDirectoryId() const {
    return m_active_directory_id;
}
void OAIFileSystem_WindowsConfiguration::setActiveDirectoryId(const QString &active_directory_id) {
    m_active_directory_id = active_directory_id;
    m_active_directory_id_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_active_directory_id_Set() const{
    return m_active_directory_id_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_active_directory_id_Valid() const{
    return m_active_directory_id_isValid;
}

OAISelfManagedActiveDirectoryAttributes OAIFileSystem_WindowsConfiguration::getSelfManagedActiveDirectoryConfiguration() const {
    return m_self_managed_active_directory_configuration;
}
void OAIFileSystem_WindowsConfiguration::setSelfManagedActiveDirectoryConfiguration(const OAISelfManagedActiveDirectoryAttributes &self_managed_active_directory_configuration) {
    m_self_managed_active_directory_configuration = self_managed_active_directory_configuration;
    m_self_managed_active_directory_configuration_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_self_managed_active_directory_configuration_Set() const{
    return m_self_managed_active_directory_configuration_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_self_managed_active_directory_configuration_Valid() const{
    return m_self_managed_active_directory_configuration_isValid;
}

OAIWindowsDeploymentType OAIFileSystem_WindowsConfiguration::getDeploymentType() const {
    return m_deployment_type;
}
void OAIFileSystem_WindowsConfiguration::setDeploymentType(const OAIWindowsDeploymentType &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

QString OAIFileSystem_WindowsConfiguration::getRemoteAdministrationEndpoint() const {
    return m_remote_administration_endpoint;
}
void OAIFileSystem_WindowsConfiguration::setRemoteAdministrationEndpoint(const QString &remote_administration_endpoint) {
    m_remote_administration_endpoint = remote_administration_endpoint;
    m_remote_administration_endpoint_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_remote_administration_endpoint_Set() const{
    return m_remote_administration_endpoint_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_remote_administration_endpoint_Valid() const{
    return m_remote_administration_endpoint_isValid;
}

QString OAIFileSystem_WindowsConfiguration::getPreferredSubnetId() const {
    return m_preferred_subnet_id;
}
void OAIFileSystem_WindowsConfiguration::setPreferredSubnetId(const QString &preferred_subnet_id) {
    m_preferred_subnet_id = preferred_subnet_id;
    m_preferred_subnet_id_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_preferred_subnet_id_Set() const{
    return m_preferred_subnet_id_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_preferred_subnet_id_Valid() const{
    return m_preferred_subnet_id_isValid;
}

QString OAIFileSystem_WindowsConfiguration::getPreferredFileServerIp() const {
    return m_preferred_file_server_ip;
}
void OAIFileSystem_WindowsConfiguration::setPreferredFileServerIp(const QString &preferred_file_server_ip) {
    m_preferred_file_server_ip = preferred_file_server_ip;
    m_preferred_file_server_ip_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_preferred_file_server_ip_Set() const{
    return m_preferred_file_server_ip_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_preferred_file_server_ip_Valid() const{
    return m_preferred_file_server_ip_isValid;
}

qint32 OAIFileSystem_WindowsConfiguration::getThroughputCapacity() const {
    return m_throughput_capacity;
}
void OAIFileSystem_WindowsConfiguration::setThroughputCapacity(const qint32 &throughput_capacity) {
    m_throughput_capacity = throughput_capacity;
    m_throughput_capacity_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_throughput_capacity_Set() const{
    return m_throughput_capacity_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_throughput_capacity_Valid() const{
    return m_throughput_capacity_isValid;
}

QList OAIFileSystem_WindowsConfiguration::getMaintenanceOperationsInProgress() const {
    return m_maintenance_operations_in_progress;
}
void OAIFileSystem_WindowsConfiguration::setMaintenanceOperationsInProgress(const QList &maintenance_operations_in_progress) {
    m_maintenance_operations_in_progress = maintenance_operations_in_progress;
    m_maintenance_operations_in_progress_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_maintenance_operations_in_progress_Set() const{
    return m_maintenance_operations_in_progress_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_maintenance_operations_in_progress_Valid() const{
    return m_maintenance_operations_in_progress_isValid;
}

QString OAIFileSystem_WindowsConfiguration::getWeeklyMaintenanceStartTime() const {
    return m_weekly_maintenance_start_time;
}
void OAIFileSystem_WindowsConfiguration::setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time) {
    m_weekly_maintenance_start_time = weekly_maintenance_start_time;
    m_weekly_maintenance_start_time_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_weekly_maintenance_start_time_Set() const{
    return m_weekly_maintenance_start_time_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_weekly_maintenance_start_time_Valid() const{
    return m_weekly_maintenance_start_time_isValid;
}

QString OAIFileSystem_WindowsConfiguration::getDailyAutomaticBackupStartTime() const {
    return m_daily_automatic_backup_start_time;
}
void OAIFileSystem_WindowsConfiguration::setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time) {
    m_daily_automatic_backup_start_time = daily_automatic_backup_start_time;
    m_daily_automatic_backup_start_time_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_daily_automatic_backup_start_time_Set() const{
    return m_daily_automatic_backup_start_time_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_daily_automatic_backup_start_time_Valid() const{
    return m_daily_automatic_backup_start_time_isValid;
}

qint32 OAIFileSystem_WindowsConfiguration::getAutomaticBackupRetentionDays() const {
    return m_automatic_backup_retention_days;
}
void OAIFileSystem_WindowsConfiguration::setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days) {
    m_automatic_backup_retention_days = automatic_backup_retention_days;
    m_automatic_backup_retention_days_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_automatic_backup_retention_days_Set() const{
    return m_automatic_backup_retention_days_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_automatic_backup_retention_days_Valid() const{
    return m_automatic_backup_retention_days_isValid;
}

bool OAIFileSystem_WindowsConfiguration::getCopyTagsToBackups() const {
    return m_copy_tags_to_backups;
}
void OAIFileSystem_WindowsConfiguration::setCopyTagsToBackups(const bool &copy_tags_to_backups) {
    m_copy_tags_to_backups = copy_tags_to_backups;
    m_copy_tags_to_backups_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_copy_tags_to_backups_Set() const{
    return m_copy_tags_to_backups_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_copy_tags_to_backups_Valid() const{
    return m_copy_tags_to_backups_isValid;
}

QList<OAIAlias> OAIFileSystem_WindowsConfiguration::getAliases() const {
    return m_aliases;
}
void OAIFileSystem_WindowsConfiguration::setAliases(const QList<OAIAlias> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_aliases_Valid() const{
    return m_aliases_isValid;
}

OAIWindowsFileSystemConfiguration_AuditLogConfiguration OAIFileSystem_WindowsConfiguration::getAuditLogConfiguration() const {
    return m_audit_log_configuration;
}
void OAIFileSystem_WindowsConfiguration::setAuditLogConfiguration(const OAIWindowsFileSystemConfiguration_AuditLogConfiguration &audit_log_configuration) {
    m_audit_log_configuration = audit_log_configuration;
    m_audit_log_configuration_isSet = true;
}

bool OAIFileSystem_WindowsConfiguration::is_audit_log_configuration_Set() const{
    return m_audit_log_configuration_isSet;
}

bool OAIFileSystem_WindowsConfiguration::is_audit_log_configuration_Valid() const{
    return m_audit_log_configuration_isValid;
}

bool OAIFileSystem_WindowsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_administration_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_file_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_operations_in_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_maintenance_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_automatic_backup_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileSystem_WindowsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
