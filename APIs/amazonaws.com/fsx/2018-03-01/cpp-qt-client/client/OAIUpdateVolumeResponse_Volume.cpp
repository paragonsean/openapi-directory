/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVolumeResponse_Volume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVolumeResponse_Volume::OAIUpdateVolumeResponse_Volume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVolumeResponse_Volume::OAIUpdateVolumeResponse_Volume() {
    this->initializeModel();
}

OAIUpdateVolumeResponse_Volume::~OAIUpdateVolumeResponse_Volume() {}

void OAIUpdateVolumeResponse_Volume::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ontap_configuration_isSet = false;
    m_ontap_configuration_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;

    m_lifecycle_transition_reason_isSet = false;
    m_lifecycle_transition_reason_isValid = false;

    m_administrative_actions_isSet = false;
    m_administrative_actions_isValid = false;

    m_open_zfs_configuration_isSet = false;
    m_open_zfs_configuration_isValid = false;
}

void OAIUpdateVolumeResponse_Volume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVolumeResponse_Volume::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_ontap_configuration_isValid = ::OpenAPI::fromJsonValue(m_ontap_configuration, json[QString("OntapConfiguration")]);
    m_ontap_configuration_isSet = !json[QString("OntapConfiguration")].isNull() && m_ontap_configuration_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("VolumeId")]);
    m_volume_id_isSet = !json[QString("VolumeId")].isNull() && m_volume_id_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("VolumeType")]);
    m_volume_type_isSet = !json[QString("VolumeType")].isNull() && m_volume_type_isValid;

    m_lifecycle_transition_reason_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_transition_reason, json[QString("LifecycleTransitionReason")]);
    m_lifecycle_transition_reason_isSet = !json[QString("LifecycleTransitionReason")].isNull() && m_lifecycle_transition_reason_isValid;

    m_administrative_actions_isValid = ::OpenAPI::fromJsonValue(m_administrative_actions, json[QString("AdministrativeActions")]);
    m_administrative_actions_isSet = !json[QString("AdministrativeActions")].isNull() && m_administrative_actions_isValid;

    m_open_zfs_configuration_isValid = ::OpenAPI::fromJsonValue(m_open_zfs_configuration, json[QString("OpenZFSConfiguration")]);
    m_open_zfs_configuration_isSet = !json[QString("OpenZFSConfiguration")].isNull() && m_open_zfs_configuration_isValid;
}

QString OAIUpdateVolumeResponse_Volume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVolumeResponse_Volume::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ontap_configuration.isSet()) {
        obj.insert(QString("OntapConfiguration"), ::OpenAPI::toJsonValue(m_ontap_configuration));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("VolumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_volume_type.isSet()) {
        obj.insert(QString("VolumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    if (m_lifecycle_transition_reason.isSet()) {
        obj.insert(QString("LifecycleTransitionReason"), ::OpenAPI::toJsonValue(m_lifecycle_transition_reason));
    }
    if (m_administrative_actions.isSet()) {
        obj.insert(QString("AdministrativeActions"), ::OpenAPI::toJsonValue(m_administrative_actions));
    }
    if (m_open_zfs_configuration.isSet()) {
        obj.insert(QString("OpenZFSConfiguration"), ::OpenAPI::toJsonValue(m_open_zfs_configuration));
    }
    return obj;
}

QDateTime OAIUpdateVolumeResponse_Volume::getCreationTime() const {
    return m_creation_time;
}
void OAIUpdateVolumeResponse_Volume::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIUpdateVolumeResponse_Volume::getFileSystemId() const {
    return m_file_system_id;
}
void OAIUpdateVolumeResponse_Volume::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIVolumeLifecycle OAIUpdateVolumeResponse_Volume::getLifecycle() const {
    return m_lifecycle;
}
void OAIUpdateVolumeResponse_Volume::setLifecycle(const OAIVolumeLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAIUpdateVolumeResponse_Volume::getName() const {
    return m_name;
}
void OAIUpdateVolumeResponse_Volume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_name_Valid() const{
    return m_name_isValid;
}

OAIOntapVolumeConfiguration OAIUpdateVolumeResponse_Volume::getOntapConfiguration() const {
    return m_ontap_configuration;
}
void OAIUpdateVolumeResponse_Volume::setOntapConfiguration(const OAIOntapVolumeConfiguration &ontap_configuration) {
    m_ontap_configuration = ontap_configuration;
    m_ontap_configuration_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_ontap_configuration_Set() const{
    return m_ontap_configuration_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_ontap_configuration_Valid() const{
    return m_ontap_configuration_isValid;
}

QString OAIUpdateVolumeResponse_Volume::getResourceArn() const {
    return m_resource_arn;
}
void OAIUpdateVolumeResponse_Volume::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList<OAITag> OAIUpdateVolumeResponse_Volume::getTags() const {
    return m_tags;
}
void OAIUpdateVolumeResponse_Volume::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIUpdateVolumeResponse_Volume::getVolumeId() const {
    return m_volume_id;
}
void OAIUpdateVolumeResponse_Volume::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

OAIVolumeType OAIUpdateVolumeResponse_Volume::getVolumeType() const {
    return m_volume_type;
}
void OAIUpdateVolumeResponse_Volume::setVolumeType(const OAIVolumeType &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

OAIVolume_LifecycleTransitionReason OAIUpdateVolumeResponse_Volume::getLifecycleTransitionReason() const {
    return m_lifecycle_transition_reason;
}
void OAIUpdateVolumeResponse_Volume::setLifecycleTransitionReason(const OAIVolume_LifecycleTransitionReason &lifecycle_transition_reason) {
    m_lifecycle_transition_reason = lifecycle_transition_reason;
    m_lifecycle_transition_reason_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_lifecycle_transition_reason_Set() const{
    return m_lifecycle_transition_reason_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_lifecycle_transition_reason_Valid() const{
    return m_lifecycle_transition_reason_isValid;
}

QList OAIUpdateVolumeResponse_Volume::getAdministrativeActions() const {
    return m_administrative_actions;
}
void OAIUpdateVolumeResponse_Volume::setAdministrativeActions(const QList &administrative_actions) {
    m_administrative_actions = administrative_actions;
    m_administrative_actions_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_administrative_actions_Set() const{
    return m_administrative_actions_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_administrative_actions_Valid() const{
    return m_administrative_actions_isValid;
}

OAIVolume_OpenZFSConfiguration OAIUpdateVolumeResponse_Volume::getOpenZfsConfiguration() const {
    return m_open_zfs_configuration;
}
void OAIUpdateVolumeResponse_Volume::setOpenZfsConfiguration(const OAIVolume_OpenZFSConfiguration &open_zfs_configuration) {
    m_open_zfs_configuration = open_zfs_configuration;
    m_open_zfs_configuration_isSet = true;
}

bool OAIUpdateVolumeResponse_Volume::is_open_zfs_configuration_Set() const{
    return m_open_zfs_configuration_isSet;
}

bool OAIUpdateVolumeResponse_Volume::is_open_zfs_configuration_Valid() const{
    return m_open_zfs_configuration_isValid;
}

bool OAIUpdateVolumeResponse_Volume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ontap_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_transition_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_zfs_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVolumeResponse_Volume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
