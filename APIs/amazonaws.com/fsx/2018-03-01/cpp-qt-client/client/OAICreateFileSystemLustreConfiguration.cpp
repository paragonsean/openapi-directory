/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFileSystemLustreConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFileSystemLustreConfiguration::OAICreateFileSystemLustreConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFileSystemLustreConfiguration::OAICreateFileSystemLustreConfiguration() {
    this->initializeModel();
}

OAICreateFileSystemLustreConfiguration::~OAICreateFileSystemLustreConfiguration() {}

void OAICreateFileSystemLustreConfiguration::initializeModel() {

    m_weekly_maintenance_start_time_isSet = false;
    m_weekly_maintenance_start_time_isValid = false;

    m_import_path_isSet = false;
    m_import_path_isValid = false;

    m_export_path_isSet = false;
    m_export_path_isValid = false;

    m_imported_file_chunk_size_isSet = false;
    m_imported_file_chunk_size_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_auto_import_policy_isSet = false;
    m_auto_import_policy_isValid = false;

    m_per_unit_storage_throughput_isSet = false;
    m_per_unit_storage_throughput_isValid = false;

    m_daily_automatic_backup_start_time_isSet = false;
    m_daily_automatic_backup_start_time_isValid = false;

    m_automatic_backup_retention_days_isSet = false;
    m_automatic_backup_retention_days_isValid = false;

    m_copy_tags_to_backups_isSet = false;
    m_copy_tags_to_backups_isValid = false;

    m_drive_cache_type_isSet = false;
    m_drive_cache_type_isValid = false;

    m_data_compression_type_isSet = false;
    m_data_compression_type_isValid = false;

    m_log_configuration_isSet = false;
    m_log_configuration_isValid = false;

    m_root_squash_configuration_isSet = false;
    m_root_squash_configuration_isValid = false;
}

void OAICreateFileSystemLustreConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFileSystemLustreConfiguration::fromJsonObject(QJsonObject json) {

    m_weekly_maintenance_start_time_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_start_time, json[QString("WeeklyMaintenanceStartTime")]);
    m_weekly_maintenance_start_time_isSet = !json[QString("WeeklyMaintenanceStartTime")].isNull() && m_weekly_maintenance_start_time_isValid;

    m_import_path_isValid = ::OpenAPI::fromJsonValue(m_import_path, json[QString("ImportPath")]);
    m_import_path_isSet = !json[QString("ImportPath")].isNull() && m_import_path_isValid;

    m_export_path_isValid = ::OpenAPI::fromJsonValue(m_export_path, json[QString("ExportPath")]);
    m_export_path_isSet = !json[QString("ExportPath")].isNull() && m_export_path_isValid;

    m_imported_file_chunk_size_isValid = ::OpenAPI::fromJsonValue(m_imported_file_chunk_size, json[QString("ImportedFileChunkSize")]);
    m_imported_file_chunk_size_isSet = !json[QString("ImportedFileChunkSize")].isNull() && m_imported_file_chunk_size_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("DeploymentType")]);
    m_deployment_type_isSet = !json[QString("DeploymentType")].isNull() && m_deployment_type_isValid;

    m_auto_import_policy_isValid = ::OpenAPI::fromJsonValue(m_auto_import_policy, json[QString("AutoImportPolicy")]);
    m_auto_import_policy_isSet = !json[QString("AutoImportPolicy")].isNull() && m_auto_import_policy_isValid;

    m_per_unit_storage_throughput_isValid = ::OpenAPI::fromJsonValue(m_per_unit_storage_throughput, json[QString("PerUnitStorageThroughput")]);
    m_per_unit_storage_throughput_isSet = !json[QString("PerUnitStorageThroughput")].isNull() && m_per_unit_storage_throughput_isValid;

    m_daily_automatic_backup_start_time_isValid = ::OpenAPI::fromJsonValue(m_daily_automatic_backup_start_time, json[QString("DailyAutomaticBackupStartTime")]);
    m_daily_automatic_backup_start_time_isSet = !json[QString("DailyAutomaticBackupStartTime")].isNull() && m_daily_automatic_backup_start_time_isValid;

    m_automatic_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_automatic_backup_retention_days, json[QString("AutomaticBackupRetentionDays")]);
    m_automatic_backup_retention_days_isSet = !json[QString("AutomaticBackupRetentionDays")].isNull() && m_automatic_backup_retention_days_isValid;

    m_copy_tags_to_backups_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_backups, json[QString("CopyTagsToBackups")]);
    m_copy_tags_to_backups_isSet = !json[QString("CopyTagsToBackups")].isNull() && m_copy_tags_to_backups_isValid;

    m_drive_cache_type_isValid = ::OpenAPI::fromJsonValue(m_drive_cache_type, json[QString("DriveCacheType")]);
    m_drive_cache_type_isSet = !json[QString("DriveCacheType")].isNull() && m_drive_cache_type_isValid;

    m_data_compression_type_isValid = ::OpenAPI::fromJsonValue(m_data_compression_type, json[QString("DataCompressionType")]);
    m_data_compression_type_isSet = !json[QString("DataCompressionType")].isNull() && m_data_compression_type_isValid;

    m_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_log_configuration, json[QString("LogConfiguration")]);
    m_log_configuration_isSet = !json[QString("LogConfiguration")].isNull() && m_log_configuration_isValid;

    m_root_squash_configuration_isValid = ::OpenAPI::fromJsonValue(m_root_squash_configuration, json[QString("RootSquashConfiguration")]);
    m_root_squash_configuration_isSet = !json[QString("RootSquashConfiguration")].isNull() && m_root_squash_configuration_isValid;
}

QString OAICreateFileSystemLustreConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFileSystemLustreConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_weekly_maintenance_start_time_isSet) {
        obj.insert(QString("WeeklyMaintenanceStartTime"), ::OpenAPI::toJsonValue(m_weekly_maintenance_start_time));
    }
    if (m_import_path_isSet) {
        obj.insert(QString("ImportPath"), ::OpenAPI::toJsonValue(m_import_path));
    }
    if (m_export_path_isSet) {
        obj.insert(QString("ExportPath"), ::OpenAPI::toJsonValue(m_export_path));
    }
    if (m_imported_file_chunk_size_isSet) {
        obj.insert(QString("ImportedFileChunkSize"), ::OpenAPI::toJsonValue(m_imported_file_chunk_size));
    }
    if (m_deployment_type.isSet()) {
        obj.insert(QString("DeploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_auto_import_policy.isSet()) {
        obj.insert(QString("AutoImportPolicy"), ::OpenAPI::toJsonValue(m_auto_import_policy));
    }
    if (m_per_unit_storage_throughput_isSet) {
        obj.insert(QString("PerUnitStorageThroughput"), ::OpenAPI::toJsonValue(m_per_unit_storage_throughput));
    }
    if (m_daily_automatic_backup_start_time_isSet) {
        obj.insert(QString("DailyAutomaticBackupStartTime"), ::OpenAPI::toJsonValue(m_daily_automatic_backup_start_time));
    }
    if (m_automatic_backup_retention_days_isSet) {
        obj.insert(QString("AutomaticBackupRetentionDays"), ::OpenAPI::toJsonValue(m_automatic_backup_retention_days));
    }
    if (m_copy_tags_to_backups_isSet) {
        obj.insert(QString("CopyTagsToBackups"), ::OpenAPI::toJsonValue(m_copy_tags_to_backups));
    }
    if (m_drive_cache_type.isSet()) {
        obj.insert(QString("DriveCacheType"), ::OpenAPI::toJsonValue(m_drive_cache_type));
    }
    if (m_data_compression_type.isSet()) {
        obj.insert(QString("DataCompressionType"), ::OpenAPI::toJsonValue(m_data_compression_type));
    }
    if (m_log_configuration.isSet()) {
        obj.insert(QString("LogConfiguration"), ::OpenAPI::toJsonValue(m_log_configuration));
    }
    if (m_root_squash_configuration.isSet()) {
        obj.insert(QString("RootSquashConfiguration"), ::OpenAPI::toJsonValue(m_root_squash_configuration));
    }
    return obj;
}

QString OAICreateFileSystemLustreConfiguration::getWeeklyMaintenanceStartTime() const {
    return m_weekly_maintenance_start_time;
}
void OAICreateFileSystemLustreConfiguration::setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time) {
    m_weekly_maintenance_start_time = weekly_maintenance_start_time;
    m_weekly_maintenance_start_time_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_weekly_maintenance_start_time_Set() const{
    return m_weekly_maintenance_start_time_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_weekly_maintenance_start_time_Valid() const{
    return m_weekly_maintenance_start_time_isValid;
}

QString OAICreateFileSystemLustreConfiguration::getImportPath() const {
    return m_import_path;
}
void OAICreateFileSystemLustreConfiguration::setImportPath(const QString &import_path) {
    m_import_path = import_path;
    m_import_path_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_import_path_Set() const{
    return m_import_path_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_import_path_Valid() const{
    return m_import_path_isValid;
}

QString OAICreateFileSystemLustreConfiguration::getExportPath() const {
    return m_export_path;
}
void OAICreateFileSystemLustreConfiguration::setExportPath(const QString &export_path) {
    m_export_path = export_path;
    m_export_path_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_export_path_Set() const{
    return m_export_path_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_export_path_Valid() const{
    return m_export_path_isValid;
}

qint32 OAICreateFileSystemLustreConfiguration::getImportedFileChunkSize() const {
    return m_imported_file_chunk_size;
}
void OAICreateFileSystemLustreConfiguration::setImportedFileChunkSize(const qint32 &imported_file_chunk_size) {
    m_imported_file_chunk_size = imported_file_chunk_size;
    m_imported_file_chunk_size_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_imported_file_chunk_size_Set() const{
    return m_imported_file_chunk_size_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_imported_file_chunk_size_Valid() const{
    return m_imported_file_chunk_size_isValid;
}

OAILustreDeploymentType OAICreateFileSystemLustreConfiguration::getDeploymentType() const {
    return m_deployment_type;
}
void OAICreateFileSystemLustreConfiguration::setDeploymentType(const OAILustreDeploymentType &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

OAIAutoImportPolicyType OAICreateFileSystemLustreConfiguration::getAutoImportPolicy() const {
    return m_auto_import_policy;
}
void OAICreateFileSystemLustreConfiguration::setAutoImportPolicy(const OAIAutoImportPolicyType &auto_import_policy) {
    m_auto_import_policy = auto_import_policy;
    m_auto_import_policy_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_auto_import_policy_Set() const{
    return m_auto_import_policy_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_auto_import_policy_Valid() const{
    return m_auto_import_policy_isValid;
}

qint32 OAICreateFileSystemLustreConfiguration::getPerUnitStorageThroughput() const {
    return m_per_unit_storage_throughput;
}
void OAICreateFileSystemLustreConfiguration::setPerUnitStorageThroughput(const qint32 &per_unit_storage_throughput) {
    m_per_unit_storage_throughput = per_unit_storage_throughput;
    m_per_unit_storage_throughput_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_per_unit_storage_throughput_Set() const{
    return m_per_unit_storage_throughput_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_per_unit_storage_throughput_Valid() const{
    return m_per_unit_storage_throughput_isValid;
}

QString OAICreateFileSystemLustreConfiguration::getDailyAutomaticBackupStartTime() const {
    return m_daily_automatic_backup_start_time;
}
void OAICreateFileSystemLustreConfiguration::setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time) {
    m_daily_automatic_backup_start_time = daily_automatic_backup_start_time;
    m_daily_automatic_backup_start_time_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_daily_automatic_backup_start_time_Set() const{
    return m_daily_automatic_backup_start_time_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_daily_automatic_backup_start_time_Valid() const{
    return m_daily_automatic_backup_start_time_isValid;
}

qint32 OAICreateFileSystemLustreConfiguration::getAutomaticBackupRetentionDays() const {
    return m_automatic_backup_retention_days;
}
void OAICreateFileSystemLustreConfiguration::setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days) {
    m_automatic_backup_retention_days = automatic_backup_retention_days;
    m_automatic_backup_retention_days_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_automatic_backup_retention_days_Set() const{
    return m_automatic_backup_retention_days_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_automatic_backup_retention_days_Valid() const{
    return m_automatic_backup_retention_days_isValid;
}

bool OAICreateFileSystemLustreConfiguration::getCopyTagsToBackups() const {
    return m_copy_tags_to_backups;
}
void OAICreateFileSystemLustreConfiguration::setCopyTagsToBackups(const bool &copy_tags_to_backups) {
    m_copy_tags_to_backups = copy_tags_to_backups;
    m_copy_tags_to_backups_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_copy_tags_to_backups_Set() const{
    return m_copy_tags_to_backups_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_copy_tags_to_backups_Valid() const{
    return m_copy_tags_to_backups_isValid;
}

OAIDriveCacheType OAICreateFileSystemLustreConfiguration::getDriveCacheType() const {
    return m_drive_cache_type;
}
void OAICreateFileSystemLustreConfiguration::setDriveCacheType(const OAIDriveCacheType &drive_cache_type) {
    m_drive_cache_type = drive_cache_type;
    m_drive_cache_type_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_drive_cache_type_Set() const{
    return m_drive_cache_type_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_drive_cache_type_Valid() const{
    return m_drive_cache_type_isValid;
}

OAIDataCompressionType OAICreateFileSystemLustreConfiguration::getDataCompressionType() const {
    return m_data_compression_type;
}
void OAICreateFileSystemLustreConfiguration::setDataCompressionType(const OAIDataCompressionType &data_compression_type) {
    m_data_compression_type = data_compression_type;
    m_data_compression_type_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_data_compression_type_Set() const{
    return m_data_compression_type_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_data_compression_type_Valid() const{
    return m_data_compression_type_isValid;
}

OAICreateFileSystemLustreConfiguration_LogConfiguration OAICreateFileSystemLustreConfiguration::getLogConfiguration() const {
    return m_log_configuration;
}
void OAICreateFileSystemLustreConfiguration::setLogConfiguration(const OAICreateFileSystemLustreConfiguration_LogConfiguration &log_configuration) {
    m_log_configuration = log_configuration;
    m_log_configuration_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_log_configuration_Set() const{
    return m_log_configuration_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_log_configuration_Valid() const{
    return m_log_configuration_isValid;
}

OAICreateFileSystemLustreConfiguration_RootSquashConfiguration OAICreateFileSystemLustreConfiguration::getRootSquashConfiguration() const {
    return m_root_squash_configuration;
}
void OAICreateFileSystemLustreConfiguration::setRootSquashConfiguration(const OAICreateFileSystemLustreConfiguration_RootSquashConfiguration &root_squash_configuration) {
    m_root_squash_configuration = root_squash_configuration;
    m_root_squash_configuration_isSet = true;
}

bool OAICreateFileSystemLustreConfiguration::is_root_squash_configuration_Set() const{
    return m_root_squash_configuration_isSet;
}

bool OAICreateFileSystemLustreConfiguration::is_root_squash_configuration_Valid() const{
    return m_root_squash_configuration_isValid;
}

bool OAICreateFileSystemLustreConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_weekly_maintenance_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_file_chunk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_import_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_unit_storage_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_automatic_backup_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_cache_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_squash_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFileSystemLustreConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
