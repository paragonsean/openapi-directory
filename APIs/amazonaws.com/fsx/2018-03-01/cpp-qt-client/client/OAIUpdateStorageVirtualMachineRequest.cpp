/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStorageVirtualMachineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStorageVirtualMachineRequest::OAIUpdateStorageVirtualMachineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStorageVirtualMachineRequest::OAIUpdateStorageVirtualMachineRequest() {
    this->initializeModel();
}

OAIUpdateStorageVirtualMachineRequest::~OAIUpdateStorageVirtualMachineRequest() {}

void OAIUpdateStorageVirtualMachineRequest::initializeModel() {

    m_active_directory_configuration_isSet = false;
    m_active_directory_configuration_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_storage_virtual_machine_id_isSet = false;
    m_storage_virtual_machine_id_isValid = false;

    m_svm_admin_password_isSet = false;
    m_svm_admin_password_isValid = false;
}

void OAIUpdateStorageVirtualMachineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStorageVirtualMachineRequest::fromJsonObject(QJsonObject json) {

    m_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_active_directory_configuration, json[QString("ActiveDirectoryConfiguration")]);
    m_active_directory_configuration_isSet = !json[QString("ActiveDirectoryConfiguration")].isNull() && m_active_directory_configuration_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_storage_virtual_machine_id_isValid = ::OpenAPI::fromJsonValue(m_storage_virtual_machine_id, json[QString("StorageVirtualMachineId")]);
    m_storage_virtual_machine_id_isSet = !json[QString("StorageVirtualMachineId")].isNull() && m_storage_virtual_machine_id_isValid;

    m_svm_admin_password_isValid = ::OpenAPI::fromJsonValue(m_svm_admin_password, json[QString("SvmAdminPassword")]);
    m_svm_admin_password_isSet = !json[QString("SvmAdminPassword")].isNull() && m_svm_admin_password_isValid;
}

QString OAIUpdateStorageVirtualMachineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStorageVirtualMachineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_configuration.isSet()) {
        obj.insert(QString("ActiveDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_active_directory_configuration));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_storage_virtual_machine_id_isSet) {
        obj.insert(QString("StorageVirtualMachineId"), ::OpenAPI::toJsonValue(m_storage_virtual_machine_id));
    }
    if (m_svm_admin_password_isSet) {
        obj.insert(QString("SvmAdminPassword"), ::OpenAPI::toJsonValue(m_svm_admin_password));
    }
    return obj;
}

OAIUpdateStorageVirtualMachineRequest_ActiveDirectoryConfiguration OAIUpdateStorageVirtualMachineRequest::getActiveDirectoryConfiguration() const {
    return m_active_directory_configuration;
}
void OAIUpdateStorageVirtualMachineRequest::setActiveDirectoryConfiguration(const OAIUpdateStorageVirtualMachineRequest_ActiveDirectoryConfiguration &active_directory_configuration) {
    m_active_directory_configuration = active_directory_configuration;
    m_active_directory_configuration_isSet = true;
}

bool OAIUpdateStorageVirtualMachineRequest::is_active_directory_configuration_Set() const{
    return m_active_directory_configuration_isSet;
}

bool OAIUpdateStorageVirtualMachineRequest::is_active_directory_configuration_Valid() const{
    return m_active_directory_configuration_isValid;
}

QString OAIUpdateStorageVirtualMachineRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateStorageVirtualMachineRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateStorageVirtualMachineRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateStorageVirtualMachineRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIUpdateStorageVirtualMachineRequest::getStorageVirtualMachineId() const {
    return m_storage_virtual_machine_id;
}
void OAIUpdateStorageVirtualMachineRequest::setStorageVirtualMachineId(const QString &storage_virtual_machine_id) {
    m_storage_virtual_machine_id = storage_virtual_machine_id;
    m_storage_virtual_machine_id_isSet = true;
}

bool OAIUpdateStorageVirtualMachineRequest::is_storage_virtual_machine_id_Set() const{
    return m_storage_virtual_machine_id_isSet;
}

bool OAIUpdateStorageVirtualMachineRequest::is_storage_virtual_machine_id_Valid() const{
    return m_storage_virtual_machine_id_isValid;
}

QString OAIUpdateStorageVirtualMachineRequest::getSvmAdminPassword() const {
    return m_svm_admin_password;
}
void OAIUpdateStorageVirtualMachineRequest::setSvmAdminPassword(const QString &svm_admin_password) {
    m_svm_admin_password = svm_admin_password;
    m_svm_admin_password_isSet = true;
}

bool OAIUpdateStorageVirtualMachineRequest::is_svm_admin_password_Set() const{
    return m_svm_admin_password_isSet;
}

bool OAIUpdateStorageVirtualMachineRequest::is_svm_admin_password_Valid() const{
    return m_svm_admin_password_isValid;
}

bool OAIUpdateStorageVirtualMachineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_virtual_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svm_admin_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStorageVirtualMachineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_virtual_machine_id_isValid && true;
}

} // namespace OpenAPI
