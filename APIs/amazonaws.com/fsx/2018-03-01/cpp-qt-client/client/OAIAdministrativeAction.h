/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdministrativeAction.h
 *
 * Describes a specific Amazon FSx administrative action for the current Windows, Lustre, or OpenZFS file system.
 */

#ifndef OAIAdministrativeAction_H
#define OAIAdministrativeAction_H

#include <QJsonObject>

#include "OAIAdministrativeActionFailureDetails.h"
#include "OAIAdministrativeActionType.h"
#include "OAIAdministrativeAction_TargetFileSystemValues.h"
#include "OAISnapshot.h"
#include "OAIStatus.h"
#include "OAIVolume.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdministrativeAction_TargetFileSystemValues;
class OAIAdministrativeActionFailureDetails;
class OAIVolume;
class OAISnapshot;

class OAIAdministrativeAction : public OAIObject {
public:
    OAIAdministrativeAction();
    OAIAdministrativeAction(QString json);
    ~OAIAdministrativeAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAdministrativeActionType getAdministrativeActionType() const;
    void setAdministrativeActionType(const OAIAdministrativeActionType &administrative_action_type);
    bool is_administrative_action_type_Set() const;
    bool is_administrative_action_type_Valid() const;

    qint32 getProgressPercent() const;
    void setProgressPercent(const qint32 &progress_percent);
    bool is_progress_percent_Set() const;
    bool is_progress_percent_Valid() const;

    QDateTime getRequestTime() const;
    void setRequestTime(const QDateTime &request_time);
    bool is_request_time_Set() const;
    bool is_request_time_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIAdministrativeAction_TargetFileSystemValues getTargetFileSystemValues() const;
    void setTargetFileSystemValues(const OAIAdministrativeAction_TargetFileSystemValues &target_file_system_values);
    bool is_target_file_system_values_Set() const;
    bool is_target_file_system_values_Valid() const;

    OAIAdministrativeActionFailureDetails getFailureDetails() const;
    void setFailureDetails(const OAIAdministrativeActionFailureDetails &failure_details);
    bool is_failure_details_Set() const;
    bool is_failure_details_Valid() const;

    OAIVolume getTargetVolumeValues() const;
    void setTargetVolumeValues(const OAIVolume &target_volume_values);
    bool is_target_volume_values_Set() const;
    bool is_target_volume_values_Valid() const;

    OAISnapshot getTargetSnapshotValues() const;
    void setTargetSnapshotValues(const OAISnapshot &target_snapshot_values);
    bool is_target_snapshot_values_Set() const;
    bool is_target_snapshot_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAdministrativeActionType m_administrative_action_type;
    bool m_administrative_action_type_isSet;
    bool m_administrative_action_type_isValid;

    qint32 m_progress_percent;
    bool m_progress_percent_isSet;
    bool m_progress_percent_isValid;

    QDateTime m_request_time;
    bool m_request_time_isSet;
    bool m_request_time_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIAdministrativeAction_TargetFileSystemValues m_target_file_system_values;
    bool m_target_file_system_values_isSet;
    bool m_target_file_system_values_isValid;

    OAIAdministrativeActionFailureDetails m_failure_details;
    bool m_failure_details_isSet;
    bool m_failure_details_isValid;

    OAIVolume m_target_volume_values;
    bool m_target_volume_values_isSet;
    bool m_target_volume_values_isValid;

    OAISnapshot m_target_snapshot_values;
    bool m_target_snapshot_values_isSet;
    bool m_target_snapshot_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdministrativeAction)

#endif // OAIAdministrativeAction_H
