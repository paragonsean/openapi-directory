/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministrativeActionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdministrativeActionType::OAIAdministrativeActionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdministrativeActionType::OAIAdministrativeActionType() {
    this->initializeModel();
}

OAIAdministrativeActionType::~OAIAdministrativeActionType() {}

void OAIAdministrativeActionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAdministrativeActionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAdministrativeActionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FILE_SYSTEM_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::FILE_SYSTEM_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STORAGE_OPTIMIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::STORAGE_OPTIMIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILE_SYSTEM_ALIAS_ASSOCIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::FILE_SYSTEM_ALIAS_ASSOCIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILE_SYSTEM_ALIAS_DISASSOCIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::FILE_SYSTEM_ALIAS_DISASSOCIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOLUME_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::VOLUME_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNAPSHOT_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::SNAPSHOT_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RELEASE_NFS_V3_LOCKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::RELEASE_NFS_V3_LOCKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOLUME_RESTORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdministrativeActionType::VOLUME_RESTORE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAdministrativeActionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAdministrativeActionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAdministrativeActionType::FILE_SYSTEM_UPDATE:
            val = "FILE_SYSTEM_UPDATE";
            break;
        case eOAIAdministrativeActionType::STORAGE_OPTIMIZATION:
            val = "STORAGE_OPTIMIZATION";
            break;
        case eOAIAdministrativeActionType::FILE_SYSTEM_ALIAS_ASSOCIATION:
            val = "FILE_SYSTEM_ALIAS_ASSOCIATION";
            break;
        case eOAIAdministrativeActionType::FILE_SYSTEM_ALIAS_DISASSOCIATION:
            val = "FILE_SYSTEM_ALIAS_DISASSOCIATION";
            break;
        case eOAIAdministrativeActionType::VOLUME_UPDATE:
            val = "VOLUME_UPDATE";
            break;
        case eOAIAdministrativeActionType::SNAPSHOT_UPDATE:
            val = "SNAPSHOT_UPDATE";
            break;
        case eOAIAdministrativeActionType::RELEASE_NFS_V3_LOCKS:
            val = "RELEASE_NFS_V3_LOCKS";
            break;
        case eOAIAdministrativeActionType::VOLUME_RESTORE:
            val = "VOLUME_RESTORE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAdministrativeActionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAdministrativeActionType::eOAIAdministrativeActionType OAIAdministrativeActionType::getValue() const {
    return m_value;
}

void OAIAdministrativeActionType::setValue(const OAIAdministrativeActionType::eOAIAdministrativeActionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAdministrativeActionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAdministrativeActionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
