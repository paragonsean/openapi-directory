/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFileCacheRequest_LustreConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFileCacheRequest_LustreConfiguration::OAICreateFileCacheRequest_LustreConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFileCacheRequest_LustreConfiguration::OAICreateFileCacheRequest_LustreConfiguration() {
    this->initializeModel();
}

OAICreateFileCacheRequest_LustreConfiguration::~OAICreateFileCacheRequest_LustreConfiguration() {}

void OAICreateFileCacheRequest_LustreConfiguration::initializeModel() {

    m_per_unit_storage_throughput_isSet = false;
    m_per_unit_storage_throughput_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_weekly_maintenance_start_time_isSet = false;
    m_weekly_maintenance_start_time_isValid = false;

    m_metadata_configuration_isSet = false;
    m_metadata_configuration_isValid = false;
}

void OAICreateFileCacheRequest_LustreConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFileCacheRequest_LustreConfiguration::fromJsonObject(QJsonObject json) {

    m_per_unit_storage_throughput_isValid = ::OpenAPI::fromJsonValue(m_per_unit_storage_throughput, json[QString("PerUnitStorageThroughput")]);
    m_per_unit_storage_throughput_isSet = !json[QString("PerUnitStorageThroughput")].isNull() && m_per_unit_storage_throughput_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("DeploymentType")]);
    m_deployment_type_isSet = !json[QString("DeploymentType")].isNull() && m_deployment_type_isValid;

    m_weekly_maintenance_start_time_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_start_time, json[QString("WeeklyMaintenanceStartTime")]);
    m_weekly_maintenance_start_time_isSet = !json[QString("WeeklyMaintenanceStartTime")].isNull() && m_weekly_maintenance_start_time_isValid;

    m_metadata_configuration_isValid = ::OpenAPI::fromJsonValue(m_metadata_configuration, json[QString("MetadataConfiguration")]);
    m_metadata_configuration_isSet = !json[QString("MetadataConfiguration")].isNull() && m_metadata_configuration_isValid;
}

QString OAICreateFileCacheRequest_LustreConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFileCacheRequest_LustreConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_per_unit_storage_throughput_isSet) {
        obj.insert(QString("PerUnitStorageThroughput"), ::OpenAPI::toJsonValue(m_per_unit_storage_throughput));
    }
    if (m_deployment_type.isSet()) {
        obj.insert(QString("DeploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_weekly_maintenance_start_time_isSet) {
        obj.insert(QString("WeeklyMaintenanceStartTime"), ::OpenAPI::toJsonValue(m_weekly_maintenance_start_time));
    }
    if (m_metadata_configuration.isSet()) {
        obj.insert(QString("MetadataConfiguration"), ::OpenAPI::toJsonValue(m_metadata_configuration));
    }
    return obj;
}

qint32 OAICreateFileCacheRequest_LustreConfiguration::getPerUnitStorageThroughput() const {
    return m_per_unit_storage_throughput;
}
void OAICreateFileCacheRequest_LustreConfiguration::setPerUnitStorageThroughput(const qint32 &per_unit_storage_throughput) {
    m_per_unit_storage_throughput = per_unit_storage_throughput;
    m_per_unit_storage_throughput_isSet = true;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_per_unit_storage_throughput_Set() const{
    return m_per_unit_storage_throughput_isSet;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_per_unit_storage_throughput_Valid() const{
    return m_per_unit_storage_throughput_isValid;
}

OAIFileCacheLustreDeploymentType OAICreateFileCacheRequest_LustreConfiguration::getDeploymentType() const {
    return m_deployment_type;
}
void OAICreateFileCacheRequest_LustreConfiguration::setDeploymentType(const OAIFileCacheLustreDeploymentType &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

QString OAICreateFileCacheRequest_LustreConfiguration::getWeeklyMaintenanceStartTime() const {
    return m_weekly_maintenance_start_time;
}
void OAICreateFileCacheRequest_LustreConfiguration::setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time) {
    m_weekly_maintenance_start_time = weekly_maintenance_start_time;
    m_weekly_maintenance_start_time_isSet = true;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_weekly_maintenance_start_time_Set() const{
    return m_weekly_maintenance_start_time_isSet;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_weekly_maintenance_start_time_Valid() const{
    return m_weekly_maintenance_start_time_isValid;
}

OAICreateFileCacheLustreConfiguration_MetadataConfiguration OAICreateFileCacheRequest_LustreConfiguration::getMetadataConfiguration() const {
    return m_metadata_configuration;
}
void OAICreateFileCacheRequest_LustreConfiguration::setMetadataConfiguration(const OAICreateFileCacheLustreConfiguration_MetadataConfiguration &metadata_configuration) {
    m_metadata_configuration = metadata_configuration;
    m_metadata_configuration_isSet = true;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_metadata_configuration_Set() const{
    return m_metadata_configuration_isSet;
}

bool OAICreateFileCacheRequest_LustreConfiguration::is_metadata_configuration_Valid() const{
    return m_metadata_configuration_isValid;
}

bool OAICreateFileCacheRequest_LustreConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_per_unit_storage_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_maintenance_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFileCacheRequest_LustreConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_per_unit_storage_throughput_isValid && m_deployment_type_isValid && m_metadata_configuration_isValid && true;
}

} // namespace OpenAPI
