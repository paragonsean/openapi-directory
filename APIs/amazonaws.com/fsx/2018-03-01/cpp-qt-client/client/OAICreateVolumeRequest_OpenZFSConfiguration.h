/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateVolumeRequest_OpenZFSConfiguration.h
 *
 * 
 */

#ifndef OAICreateVolumeRequest_OpenZFSConfiguration_H
#define OAICreateVolumeRequest_OpenZFSConfiguration_H

#include <QJsonObject>

#include "OAICreateOpenZFSVolumeConfiguration_OriginSnapshot.h"
#include "OAIOpenZFSDataCompressionType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateOpenZFSVolumeConfiguration_OriginSnapshot;

class OAICreateVolumeRequest_OpenZFSConfiguration : public OAIObject {
public:
    OAICreateVolumeRequest_OpenZFSConfiguration();
    OAICreateVolumeRequest_OpenZFSConfiguration(QString json);
    ~OAICreateVolumeRequest_OpenZFSConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getParentVolumeId() const;
    void setParentVolumeId(const QString &parent_volume_id);
    bool is_parent_volume_id_Set() const;
    bool is_parent_volume_id_Valid() const;

    qint32 getStorageCapacityReservationGiB() const;
    void setStorageCapacityReservationGiB(const qint32 &storage_capacity_reservation_gi_b);
    bool is_storage_capacity_reservation_gi_b_Set() const;
    bool is_storage_capacity_reservation_gi_b_Valid() const;

    qint32 getStorageCapacityQuotaGiB() const;
    void setStorageCapacityQuotaGiB(const qint32 &storage_capacity_quota_gi_b);
    bool is_storage_capacity_quota_gi_b_Set() const;
    bool is_storage_capacity_quota_gi_b_Valid() const;

    qint32 getRecordSizeKiB() const;
    void setRecordSizeKiB(const qint32 &record_size_ki_b);
    bool is_record_size_ki_b_Set() const;
    bool is_record_size_ki_b_Valid() const;

    OAIOpenZFSDataCompressionType getDataCompressionType() const;
    void setDataCompressionType(const OAIOpenZFSDataCompressionType &data_compression_type);
    bool is_data_compression_type_Set() const;
    bool is_data_compression_type_Valid() const;

    bool getCopyTagsToSnapshots() const;
    void setCopyTagsToSnapshots(const bool &copy_tags_to_snapshots);
    bool is_copy_tags_to_snapshots_Set() const;
    bool is_copy_tags_to_snapshots_Valid() const;

    OAICreateOpenZFSVolumeConfiguration_OriginSnapshot getOriginSnapshot() const;
    void setOriginSnapshot(const OAICreateOpenZFSVolumeConfiguration_OriginSnapshot &origin_snapshot);
    bool is_origin_snapshot_Set() const;
    bool is_origin_snapshot_Valid() const;

    bool getReadOnly() const;
    void setReadOnly(const bool &read_only);
    bool is_read_only_Set() const;
    bool is_read_only_Valid() const;

    QList getNfsExports() const;
    void setNfsExports(const QList &nfs_exports);
    bool is_nfs_exports_Set() const;
    bool is_nfs_exports_Valid() const;

    QList getUserAndGroupQuotas() const;
    void setUserAndGroupQuotas(const QList &user_and_group_quotas);
    bool is_user_and_group_quotas_Set() const;
    bool is_user_and_group_quotas_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_parent_volume_id;
    bool m_parent_volume_id_isSet;
    bool m_parent_volume_id_isValid;

    qint32 m_storage_capacity_reservation_gi_b;
    bool m_storage_capacity_reservation_gi_b_isSet;
    bool m_storage_capacity_reservation_gi_b_isValid;

    qint32 m_storage_capacity_quota_gi_b;
    bool m_storage_capacity_quota_gi_b_isSet;
    bool m_storage_capacity_quota_gi_b_isValid;

    qint32 m_record_size_ki_b;
    bool m_record_size_ki_b_isSet;
    bool m_record_size_ki_b_isValid;

    OAIOpenZFSDataCompressionType m_data_compression_type;
    bool m_data_compression_type_isSet;
    bool m_data_compression_type_isValid;

    bool m_copy_tags_to_snapshots;
    bool m_copy_tags_to_snapshots_isSet;
    bool m_copy_tags_to_snapshots_isValid;

    OAICreateOpenZFSVolumeConfiguration_OriginSnapshot m_origin_snapshot;
    bool m_origin_snapshot_isSet;
    bool m_origin_snapshot_isValid;

    bool m_read_only;
    bool m_read_only_isSet;
    bool m_read_only_isValid;

    QList m_nfs_exports;
    bool m_nfs_exports_isSet;
    bool m_nfs_exports_isValid;

    QList m_user_and_group_quotas;
    bool m_user_and_group_quotas_isSet;
    bool m_user_and_group_quotas_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateVolumeRequest_OpenZFSConfiguration)

#endif // OAICreateVolumeRequest_OpenZFSConfiguration_H
