/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreVolumeFromSnapshotResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreVolumeFromSnapshotResponse::OAIRestoreVolumeFromSnapshotResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreVolumeFromSnapshotResponse::OAIRestoreVolumeFromSnapshotResponse() {
    this->initializeModel();
}

OAIRestoreVolumeFromSnapshotResponse::~OAIRestoreVolumeFromSnapshotResponse() {}

void OAIRestoreVolumeFromSnapshotResponse::initializeModel() {

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_administrative_actions_isSet = false;
    m_administrative_actions_isValid = false;
}

void OAIRestoreVolumeFromSnapshotResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreVolumeFromSnapshotResponse::fromJsonObject(QJsonObject json) {

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("VolumeId")]);
    m_volume_id_isSet = !json[QString("VolumeId")].isNull() && m_volume_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_administrative_actions_isValid = ::OpenAPI::fromJsonValue(m_administrative_actions, json[QString("AdministrativeActions")]);
    m_administrative_actions_isSet = !json[QString("AdministrativeActions")].isNull() && m_administrative_actions_isValid;
}

QString OAIRestoreVolumeFromSnapshotResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreVolumeFromSnapshotResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_volume_id_isSet) {
        obj.insert(QString("VolumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_administrative_actions.isSet()) {
        obj.insert(QString("AdministrativeActions"), ::OpenAPI::toJsonValue(m_administrative_actions));
    }
    return obj;
}

QString OAIRestoreVolumeFromSnapshotResponse::getVolumeId() const {
    return m_volume_id;
}
void OAIRestoreVolumeFromSnapshotResponse::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIRestoreVolumeFromSnapshotResponse::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIRestoreVolumeFromSnapshotResponse::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

OAIVolumeLifecycle OAIRestoreVolumeFromSnapshotResponse::getLifecycle() const {
    return m_lifecycle;
}
void OAIRestoreVolumeFromSnapshotResponse::setLifecycle(const OAIVolumeLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIRestoreVolumeFromSnapshotResponse::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIRestoreVolumeFromSnapshotResponse::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QList OAIRestoreVolumeFromSnapshotResponse::getAdministrativeActions() const {
    return m_administrative_actions;
}
void OAIRestoreVolumeFromSnapshotResponse::setAdministrativeActions(const QList &administrative_actions) {
    m_administrative_actions = administrative_actions;
    m_administrative_actions_isSet = true;
}

bool OAIRestoreVolumeFromSnapshotResponse::is_administrative_actions_Set() const{
    return m_administrative_actions_isSet;
}

bool OAIRestoreVolumeFromSnapshotResponse::is_administrative_actions_Valid() const{
    return m_administrative_actions_isValid;
}

bool OAIRestoreVolumeFromSnapshotResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreVolumeFromSnapshotResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
