/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileSystem_OpenZFSConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileSystem_OpenZFSConfiguration::OAIFileSystem_OpenZFSConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileSystem_OpenZFSConfiguration::OAIFileSystem_OpenZFSConfiguration() {
    this->initializeModel();
}

OAIFileSystem_OpenZFSConfiguration::~OAIFileSystem_OpenZFSConfiguration() {}

void OAIFileSystem_OpenZFSConfiguration::initializeModel() {

    m_automatic_backup_retention_days_isSet = false;
    m_automatic_backup_retention_days_isValid = false;

    m_copy_tags_to_backups_isSet = false;
    m_copy_tags_to_backups_isValid = false;

    m_copy_tags_to_volumes_isSet = false;
    m_copy_tags_to_volumes_isValid = false;

    m_daily_automatic_backup_start_time_isSet = false;
    m_daily_automatic_backup_start_time_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_throughput_capacity_isSet = false;
    m_throughput_capacity_isValid = false;

    m_weekly_maintenance_start_time_isSet = false;
    m_weekly_maintenance_start_time_isValid = false;

    m_disk_iops_configuration_isSet = false;
    m_disk_iops_configuration_isValid = false;

    m_root_volume_id_isSet = false;
    m_root_volume_id_isValid = false;
}

void OAIFileSystem_OpenZFSConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileSystem_OpenZFSConfiguration::fromJsonObject(QJsonObject json) {

    m_automatic_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_automatic_backup_retention_days, json[QString("AutomaticBackupRetentionDays")]);
    m_automatic_backup_retention_days_isSet = !json[QString("AutomaticBackupRetentionDays")].isNull() && m_automatic_backup_retention_days_isValid;

    m_copy_tags_to_backups_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_backups, json[QString("CopyTagsToBackups")]);
    m_copy_tags_to_backups_isSet = !json[QString("CopyTagsToBackups")].isNull() && m_copy_tags_to_backups_isValid;

    m_copy_tags_to_volumes_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_volumes, json[QString("CopyTagsToVolumes")]);
    m_copy_tags_to_volumes_isSet = !json[QString("CopyTagsToVolumes")].isNull() && m_copy_tags_to_volumes_isValid;

    m_daily_automatic_backup_start_time_isValid = ::OpenAPI::fromJsonValue(m_daily_automatic_backup_start_time, json[QString("DailyAutomaticBackupStartTime")]);
    m_daily_automatic_backup_start_time_isSet = !json[QString("DailyAutomaticBackupStartTime")].isNull() && m_daily_automatic_backup_start_time_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("DeploymentType")]);
    m_deployment_type_isSet = !json[QString("DeploymentType")].isNull() && m_deployment_type_isValid;

    m_throughput_capacity_isValid = ::OpenAPI::fromJsonValue(m_throughput_capacity, json[QString("ThroughputCapacity")]);
    m_throughput_capacity_isSet = !json[QString("ThroughputCapacity")].isNull() && m_throughput_capacity_isValid;

    m_weekly_maintenance_start_time_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_start_time, json[QString("WeeklyMaintenanceStartTime")]);
    m_weekly_maintenance_start_time_isSet = !json[QString("WeeklyMaintenanceStartTime")].isNull() && m_weekly_maintenance_start_time_isValid;

    m_disk_iops_configuration_isValid = ::OpenAPI::fromJsonValue(m_disk_iops_configuration, json[QString("DiskIopsConfiguration")]);
    m_disk_iops_configuration_isSet = !json[QString("DiskIopsConfiguration")].isNull() && m_disk_iops_configuration_isValid;

    m_root_volume_id_isValid = ::OpenAPI::fromJsonValue(m_root_volume_id, json[QString("RootVolumeId")]);
    m_root_volume_id_isSet = !json[QString("RootVolumeId")].isNull() && m_root_volume_id_isValid;
}

QString OAIFileSystem_OpenZFSConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileSystem_OpenZFSConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_backup_retention_days_isSet) {
        obj.insert(QString("AutomaticBackupRetentionDays"), ::OpenAPI::toJsonValue(m_automatic_backup_retention_days));
    }
    if (m_copy_tags_to_backups_isSet) {
        obj.insert(QString("CopyTagsToBackups"), ::OpenAPI::toJsonValue(m_copy_tags_to_backups));
    }
    if (m_copy_tags_to_volumes_isSet) {
        obj.insert(QString("CopyTagsToVolumes"), ::OpenAPI::toJsonValue(m_copy_tags_to_volumes));
    }
    if (m_daily_automatic_backup_start_time_isSet) {
        obj.insert(QString("DailyAutomaticBackupStartTime"), ::OpenAPI::toJsonValue(m_daily_automatic_backup_start_time));
    }
    if (m_deployment_type.isSet()) {
        obj.insert(QString("DeploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_throughput_capacity_isSet) {
        obj.insert(QString("ThroughputCapacity"), ::OpenAPI::toJsonValue(m_throughput_capacity));
    }
    if (m_weekly_maintenance_start_time_isSet) {
        obj.insert(QString("WeeklyMaintenanceStartTime"), ::OpenAPI::toJsonValue(m_weekly_maintenance_start_time));
    }
    if (m_disk_iops_configuration.isSet()) {
        obj.insert(QString("DiskIopsConfiguration"), ::OpenAPI::toJsonValue(m_disk_iops_configuration));
    }
    if (m_root_volume_id_isSet) {
        obj.insert(QString("RootVolumeId"), ::OpenAPI::toJsonValue(m_root_volume_id));
    }
    return obj;
}

qint32 OAIFileSystem_OpenZFSConfiguration::getAutomaticBackupRetentionDays() const {
    return m_automatic_backup_retention_days;
}
void OAIFileSystem_OpenZFSConfiguration::setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days) {
    m_automatic_backup_retention_days = automatic_backup_retention_days;
    m_automatic_backup_retention_days_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_automatic_backup_retention_days_Set() const{
    return m_automatic_backup_retention_days_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_automatic_backup_retention_days_Valid() const{
    return m_automatic_backup_retention_days_isValid;
}

bool OAIFileSystem_OpenZFSConfiguration::getCopyTagsToBackups() const {
    return m_copy_tags_to_backups;
}
void OAIFileSystem_OpenZFSConfiguration::setCopyTagsToBackups(const bool &copy_tags_to_backups) {
    m_copy_tags_to_backups = copy_tags_to_backups;
    m_copy_tags_to_backups_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_copy_tags_to_backups_Set() const{
    return m_copy_tags_to_backups_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_copy_tags_to_backups_Valid() const{
    return m_copy_tags_to_backups_isValid;
}

bool OAIFileSystem_OpenZFSConfiguration::getCopyTagsToVolumes() const {
    return m_copy_tags_to_volumes;
}
void OAIFileSystem_OpenZFSConfiguration::setCopyTagsToVolumes(const bool &copy_tags_to_volumes) {
    m_copy_tags_to_volumes = copy_tags_to_volumes;
    m_copy_tags_to_volumes_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_copy_tags_to_volumes_Set() const{
    return m_copy_tags_to_volumes_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_copy_tags_to_volumes_Valid() const{
    return m_copy_tags_to_volumes_isValid;
}

QString OAIFileSystem_OpenZFSConfiguration::getDailyAutomaticBackupStartTime() const {
    return m_daily_automatic_backup_start_time;
}
void OAIFileSystem_OpenZFSConfiguration::setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time) {
    m_daily_automatic_backup_start_time = daily_automatic_backup_start_time;
    m_daily_automatic_backup_start_time_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_daily_automatic_backup_start_time_Set() const{
    return m_daily_automatic_backup_start_time_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_daily_automatic_backup_start_time_Valid() const{
    return m_daily_automatic_backup_start_time_isValid;
}

OAIOpenZFSDeploymentType OAIFileSystem_OpenZFSConfiguration::getDeploymentType() const {
    return m_deployment_type;
}
void OAIFileSystem_OpenZFSConfiguration::setDeploymentType(const OAIOpenZFSDeploymentType &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

qint32 OAIFileSystem_OpenZFSConfiguration::getThroughputCapacity() const {
    return m_throughput_capacity;
}
void OAIFileSystem_OpenZFSConfiguration::setThroughputCapacity(const qint32 &throughput_capacity) {
    m_throughput_capacity = throughput_capacity;
    m_throughput_capacity_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_throughput_capacity_Set() const{
    return m_throughput_capacity_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_throughput_capacity_Valid() const{
    return m_throughput_capacity_isValid;
}

QString OAIFileSystem_OpenZFSConfiguration::getWeeklyMaintenanceStartTime() const {
    return m_weekly_maintenance_start_time;
}
void OAIFileSystem_OpenZFSConfiguration::setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time) {
    m_weekly_maintenance_start_time = weekly_maintenance_start_time;
    m_weekly_maintenance_start_time_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_weekly_maintenance_start_time_Set() const{
    return m_weekly_maintenance_start_time_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_weekly_maintenance_start_time_Valid() const{
    return m_weekly_maintenance_start_time_isValid;
}

OAIDiskIopsConfiguration OAIFileSystem_OpenZFSConfiguration::getDiskIopsConfiguration() const {
    return m_disk_iops_configuration;
}
void OAIFileSystem_OpenZFSConfiguration::setDiskIopsConfiguration(const OAIDiskIopsConfiguration &disk_iops_configuration) {
    m_disk_iops_configuration = disk_iops_configuration;
    m_disk_iops_configuration_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_disk_iops_configuration_Set() const{
    return m_disk_iops_configuration_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_disk_iops_configuration_Valid() const{
    return m_disk_iops_configuration_isValid;
}

QString OAIFileSystem_OpenZFSConfiguration::getRootVolumeId() const {
    return m_root_volume_id;
}
void OAIFileSystem_OpenZFSConfiguration::setRootVolumeId(const QString &root_volume_id) {
    m_root_volume_id = root_volume_id;
    m_root_volume_id_isSet = true;
}

bool OAIFileSystem_OpenZFSConfiguration::is_root_volume_id_Set() const{
    return m_root_volume_id_isSet;
}

bool OAIFileSystem_OpenZFSConfiguration::is_root_volume_id_Valid() const{
    return m_root_volume_id_isValid;
}

bool OAIFileSystem_OpenZFSConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_volumes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_automatic_backup_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_maintenance_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_iops_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileSystem_OpenZFSConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
