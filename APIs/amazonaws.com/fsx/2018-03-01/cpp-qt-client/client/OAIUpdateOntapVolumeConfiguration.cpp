/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOntapVolumeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOntapVolumeConfiguration::OAIUpdateOntapVolumeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOntapVolumeConfiguration::OAIUpdateOntapVolumeConfiguration() {
    this->initializeModel();
}

OAIUpdateOntapVolumeConfiguration::~OAIUpdateOntapVolumeConfiguration() {}

void OAIUpdateOntapVolumeConfiguration::initializeModel() {

    m_junction_path_isSet = false;
    m_junction_path_isValid = false;

    m_security_style_isSet = false;
    m_security_style_isValid = false;

    m_size_in_megabytes_isSet = false;
    m_size_in_megabytes_isValid = false;

    m_storage_efficiency_enabled_isSet = false;
    m_storage_efficiency_enabled_isValid = false;

    m_tiering_policy_isSet = false;
    m_tiering_policy_isValid = false;

    m_snapshot_policy_isSet = false;
    m_snapshot_policy_isValid = false;

    m_copy_tags_to_backups_isSet = false;
    m_copy_tags_to_backups_isValid = false;

    m_snaplock_configuration_isSet = false;
    m_snaplock_configuration_isValid = false;
}

void OAIUpdateOntapVolumeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOntapVolumeConfiguration::fromJsonObject(QJsonObject json) {

    m_junction_path_isValid = ::OpenAPI::fromJsonValue(m_junction_path, json[QString("JunctionPath")]);
    m_junction_path_isSet = !json[QString("JunctionPath")].isNull() && m_junction_path_isValid;

    m_security_style_isValid = ::OpenAPI::fromJsonValue(m_security_style, json[QString("SecurityStyle")]);
    m_security_style_isSet = !json[QString("SecurityStyle")].isNull() && m_security_style_isValid;

    m_size_in_megabytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_megabytes, json[QString("SizeInMegabytes")]);
    m_size_in_megabytes_isSet = !json[QString("SizeInMegabytes")].isNull() && m_size_in_megabytes_isValid;

    m_storage_efficiency_enabled_isValid = ::OpenAPI::fromJsonValue(m_storage_efficiency_enabled, json[QString("StorageEfficiencyEnabled")]);
    m_storage_efficiency_enabled_isSet = !json[QString("StorageEfficiencyEnabled")].isNull() && m_storage_efficiency_enabled_isValid;

    m_tiering_policy_isValid = ::OpenAPI::fromJsonValue(m_tiering_policy, json[QString("TieringPolicy")]);
    m_tiering_policy_isSet = !json[QString("TieringPolicy")].isNull() && m_tiering_policy_isValid;

    m_snapshot_policy_isValid = ::OpenAPI::fromJsonValue(m_snapshot_policy, json[QString("SnapshotPolicy")]);
    m_snapshot_policy_isSet = !json[QString("SnapshotPolicy")].isNull() && m_snapshot_policy_isValid;

    m_copy_tags_to_backups_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_backups, json[QString("CopyTagsToBackups")]);
    m_copy_tags_to_backups_isSet = !json[QString("CopyTagsToBackups")].isNull() && m_copy_tags_to_backups_isValid;

    m_snaplock_configuration_isValid = ::OpenAPI::fromJsonValue(m_snaplock_configuration, json[QString("SnaplockConfiguration")]);
    m_snaplock_configuration_isSet = !json[QString("SnaplockConfiguration")].isNull() && m_snaplock_configuration_isValid;
}

QString OAIUpdateOntapVolumeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOntapVolumeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_junction_path_isSet) {
        obj.insert(QString("JunctionPath"), ::OpenAPI::toJsonValue(m_junction_path));
    }
    if (m_security_style.isSet()) {
        obj.insert(QString("SecurityStyle"), ::OpenAPI::toJsonValue(m_security_style));
    }
    if (m_size_in_megabytes_isSet) {
        obj.insert(QString("SizeInMegabytes"), ::OpenAPI::toJsonValue(m_size_in_megabytes));
    }
    if (m_storage_efficiency_enabled_isSet) {
        obj.insert(QString("StorageEfficiencyEnabled"), ::OpenAPI::toJsonValue(m_storage_efficiency_enabled));
    }
    if (m_tiering_policy.isSet()) {
        obj.insert(QString("TieringPolicy"), ::OpenAPI::toJsonValue(m_tiering_policy));
    }
    if (m_snapshot_policy_isSet) {
        obj.insert(QString("SnapshotPolicy"), ::OpenAPI::toJsonValue(m_snapshot_policy));
    }
    if (m_copy_tags_to_backups_isSet) {
        obj.insert(QString("CopyTagsToBackups"), ::OpenAPI::toJsonValue(m_copy_tags_to_backups));
    }
    if (m_snaplock_configuration.isSet()) {
        obj.insert(QString("SnaplockConfiguration"), ::OpenAPI::toJsonValue(m_snaplock_configuration));
    }
    return obj;
}

QString OAIUpdateOntapVolumeConfiguration::getJunctionPath() const {
    return m_junction_path;
}
void OAIUpdateOntapVolumeConfiguration::setJunctionPath(const QString &junction_path) {
    m_junction_path = junction_path;
    m_junction_path_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_junction_path_Set() const{
    return m_junction_path_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_junction_path_Valid() const{
    return m_junction_path_isValid;
}

OAISecurityStyle OAIUpdateOntapVolumeConfiguration::getSecurityStyle() const {
    return m_security_style;
}
void OAIUpdateOntapVolumeConfiguration::setSecurityStyle(const OAISecurityStyle &security_style) {
    m_security_style = security_style;
    m_security_style_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_security_style_Set() const{
    return m_security_style_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_security_style_Valid() const{
    return m_security_style_isValid;
}

qint32 OAIUpdateOntapVolumeConfiguration::getSizeInMegabytes() const {
    return m_size_in_megabytes;
}
void OAIUpdateOntapVolumeConfiguration::setSizeInMegabytes(const qint32 &size_in_megabytes) {
    m_size_in_megabytes = size_in_megabytes;
    m_size_in_megabytes_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_size_in_megabytes_Set() const{
    return m_size_in_megabytes_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_size_in_megabytes_Valid() const{
    return m_size_in_megabytes_isValid;
}

bool OAIUpdateOntapVolumeConfiguration::getStorageEfficiencyEnabled() const {
    return m_storage_efficiency_enabled;
}
void OAIUpdateOntapVolumeConfiguration::setStorageEfficiencyEnabled(const bool &storage_efficiency_enabled) {
    m_storage_efficiency_enabled = storage_efficiency_enabled;
    m_storage_efficiency_enabled_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_storage_efficiency_enabled_Set() const{
    return m_storage_efficiency_enabled_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_storage_efficiency_enabled_Valid() const{
    return m_storage_efficiency_enabled_isValid;
}

OAIUpdateOntapVolumeConfiguration_TieringPolicy OAIUpdateOntapVolumeConfiguration::getTieringPolicy() const {
    return m_tiering_policy;
}
void OAIUpdateOntapVolumeConfiguration::setTieringPolicy(const OAIUpdateOntapVolumeConfiguration_TieringPolicy &tiering_policy) {
    m_tiering_policy = tiering_policy;
    m_tiering_policy_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_tiering_policy_Set() const{
    return m_tiering_policy_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_tiering_policy_Valid() const{
    return m_tiering_policy_isValid;
}

QString OAIUpdateOntapVolumeConfiguration::getSnapshotPolicy() const {
    return m_snapshot_policy;
}
void OAIUpdateOntapVolumeConfiguration::setSnapshotPolicy(const QString &snapshot_policy) {
    m_snapshot_policy = snapshot_policy;
    m_snapshot_policy_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_snapshot_policy_Set() const{
    return m_snapshot_policy_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_snapshot_policy_Valid() const{
    return m_snapshot_policy_isValid;
}

bool OAIUpdateOntapVolumeConfiguration::getCopyTagsToBackups() const {
    return m_copy_tags_to_backups;
}
void OAIUpdateOntapVolumeConfiguration::setCopyTagsToBackups(const bool &copy_tags_to_backups) {
    m_copy_tags_to_backups = copy_tags_to_backups;
    m_copy_tags_to_backups_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_copy_tags_to_backups_Set() const{
    return m_copy_tags_to_backups_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_copy_tags_to_backups_Valid() const{
    return m_copy_tags_to_backups_isValid;
}

OAIUpdateOntapVolumeConfiguration_SnaplockConfiguration OAIUpdateOntapVolumeConfiguration::getSnaplockConfiguration() const {
    return m_snaplock_configuration;
}
void OAIUpdateOntapVolumeConfiguration::setSnaplockConfiguration(const OAIUpdateOntapVolumeConfiguration_SnaplockConfiguration &snaplock_configuration) {
    m_snaplock_configuration = snaplock_configuration;
    m_snaplock_configuration_isSet = true;
}

bool OAIUpdateOntapVolumeConfiguration::is_snaplock_configuration_Set() const{
    return m_snaplock_configuration_isSet;
}

bool OAIUpdateOntapVolumeConfiguration::is_snaplock_configuration_Valid() const{
    return m_snaplock_configuration_isValid;
}

bool OAIUpdateOntapVolumeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_junction_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_megabytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_efficiency_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tiering_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snaplock_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOntapVolumeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
