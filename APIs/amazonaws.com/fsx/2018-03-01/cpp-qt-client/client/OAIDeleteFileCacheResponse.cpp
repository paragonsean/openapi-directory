/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteFileCacheResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteFileCacheResponse::OAIDeleteFileCacheResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteFileCacheResponse::OAIDeleteFileCacheResponse() {
    this->initializeModel();
}

OAIDeleteFileCacheResponse::~OAIDeleteFileCacheResponse() {}

void OAIDeleteFileCacheResponse::initializeModel() {

    m_file_cache_id_isSet = false;
    m_file_cache_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;
}

void OAIDeleteFileCacheResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteFileCacheResponse::fromJsonObject(QJsonObject json) {

    m_file_cache_id_isValid = ::OpenAPI::fromJsonValue(m_file_cache_id, json[QString("FileCacheId")]);
    m_file_cache_id_isSet = !json[QString("FileCacheId")].isNull() && m_file_cache_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;
}

QString OAIDeleteFileCacheResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteFileCacheResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_file_cache_id_isSet) {
        obj.insert(QString("FileCacheId"), ::OpenAPI::toJsonValue(m_file_cache_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    return obj;
}

QString OAIDeleteFileCacheResponse::getFileCacheId() const {
    return m_file_cache_id;
}
void OAIDeleteFileCacheResponse::setFileCacheId(const QString &file_cache_id) {
    m_file_cache_id = file_cache_id;
    m_file_cache_id_isSet = true;
}

bool OAIDeleteFileCacheResponse::is_file_cache_id_Set() const{
    return m_file_cache_id_isSet;
}

bool OAIDeleteFileCacheResponse::is_file_cache_id_Valid() const{
    return m_file_cache_id_isValid;
}

OAIFileCacheLifecycle OAIDeleteFileCacheResponse::getLifecycle() const {
    return m_lifecycle;
}
void OAIDeleteFileCacheResponse::setLifecycle(const OAIFileCacheLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIDeleteFileCacheResponse::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIDeleteFileCacheResponse::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

bool OAIDeleteFileCacheResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteFileCacheResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
