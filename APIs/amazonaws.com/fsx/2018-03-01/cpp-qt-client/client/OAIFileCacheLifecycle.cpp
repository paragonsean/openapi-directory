/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileCacheLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileCacheLifecycle::OAIFileCacheLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileCacheLifecycle::OAIFileCacheLifecycle() {
    this->initializeModel();
}

OAIFileCacheLifecycle::~OAIFileCacheLifecycle() {}

void OAIFileCacheLifecycle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFileCacheLifecycle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFileCacheLifecycle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFileCacheLifecycle::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFileCacheLifecycle::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFileCacheLifecycle::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFileCacheLifecycle::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFileCacheLifecycle::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFileCacheLifecycle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFileCacheLifecycle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFileCacheLifecycle::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIFileCacheLifecycle::CREATING:
            val = "CREATING";
            break;
        case eOAIFileCacheLifecycle::DELETING:
            val = "DELETING";
            break;
        case eOAIFileCacheLifecycle::UPDATING:
            val = "UPDATING";
            break;
        case eOAIFileCacheLifecycle::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFileCacheLifecycle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFileCacheLifecycle::eOAIFileCacheLifecycle OAIFileCacheLifecycle::getValue() const {
    return m_value;
}

void OAIFileCacheLifecycle::setValue(const OAIFileCacheLifecycle::eOAIFileCacheLifecycle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFileCacheLifecycle::isSet() const {
    
    return m_value_isSet;
}

bool OAIFileCacheLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
