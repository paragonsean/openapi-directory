/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileSystem_OpenZFSConfiguration.h
 *
 * 
 */

#ifndef OAIFileSystem_OpenZFSConfiguration_H
#define OAIFileSystem_OpenZFSConfiguration_H

#include <QJsonObject>

#include "OAIDiskIopsConfiguration.h"
#include "OAIOpenZFSDeploymentType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDiskIopsConfiguration;

class OAIFileSystem_OpenZFSConfiguration : public OAIObject {
public:
    OAIFileSystem_OpenZFSConfiguration();
    OAIFileSystem_OpenZFSConfiguration(QString json);
    ~OAIFileSystem_OpenZFSConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAutomaticBackupRetentionDays() const;
    void setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days);
    bool is_automatic_backup_retention_days_Set() const;
    bool is_automatic_backup_retention_days_Valid() const;

    bool getCopyTagsToBackups() const;
    void setCopyTagsToBackups(const bool &copy_tags_to_backups);
    bool is_copy_tags_to_backups_Set() const;
    bool is_copy_tags_to_backups_Valid() const;

    bool getCopyTagsToVolumes() const;
    void setCopyTagsToVolumes(const bool &copy_tags_to_volumes);
    bool is_copy_tags_to_volumes_Set() const;
    bool is_copy_tags_to_volumes_Valid() const;

    QString getDailyAutomaticBackupStartTime() const;
    void setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time);
    bool is_daily_automatic_backup_start_time_Set() const;
    bool is_daily_automatic_backup_start_time_Valid() const;

    OAIOpenZFSDeploymentType getDeploymentType() const;
    void setDeploymentType(const OAIOpenZFSDeploymentType &deployment_type);
    bool is_deployment_type_Set() const;
    bool is_deployment_type_Valid() const;

    qint32 getThroughputCapacity() const;
    void setThroughputCapacity(const qint32 &throughput_capacity);
    bool is_throughput_capacity_Set() const;
    bool is_throughput_capacity_Valid() const;

    QString getWeeklyMaintenanceStartTime() const;
    void setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time);
    bool is_weekly_maintenance_start_time_Set() const;
    bool is_weekly_maintenance_start_time_Valid() const;

    OAIDiskIopsConfiguration getDiskIopsConfiguration() const;
    void setDiskIopsConfiguration(const OAIDiskIopsConfiguration &disk_iops_configuration);
    bool is_disk_iops_configuration_Set() const;
    bool is_disk_iops_configuration_Valid() const;

    QString getRootVolumeId() const;
    void setRootVolumeId(const QString &root_volume_id);
    bool is_root_volume_id_Set() const;
    bool is_root_volume_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_automatic_backup_retention_days;
    bool m_automatic_backup_retention_days_isSet;
    bool m_automatic_backup_retention_days_isValid;

    bool m_copy_tags_to_backups;
    bool m_copy_tags_to_backups_isSet;
    bool m_copy_tags_to_backups_isValid;

    bool m_copy_tags_to_volumes;
    bool m_copy_tags_to_volumes_isSet;
    bool m_copy_tags_to_volumes_isValid;

    QString m_daily_automatic_backup_start_time;
    bool m_daily_automatic_backup_start_time_isSet;
    bool m_daily_automatic_backup_start_time_isValid;

    OAIOpenZFSDeploymentType m_deployment_type;
    bool m_deployment_type_isSet;
    bool m_deployment_type_isValid;

    qint32 m_throughput_capacity;
    bool m_throughput_capacity_isSet;
    bool m_throughput_capacity_isValid;

    QString m_weekly_maintenance_start_time;
    bool m_weekly_maintenance_start_time_isSet;
    bool m_weekly_maintenance_start_time_isValid;

    OAIDiskIopsConfiguration m_disk_iops_configuration;
    bool m_disk_iops_configuration_isSet;
    bool m_disk_iops_configuration_isValid;

    QString m_root_volume_id;
    bool m_root_volume_id_isSet;
    bool m_root_volume_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileSystem_OpenZFSConfiguration)

#endif // OAIFileSystem_OpenZFSConfiguration_H
