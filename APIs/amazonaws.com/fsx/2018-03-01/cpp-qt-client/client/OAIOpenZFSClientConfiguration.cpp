/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenZFSClientConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenZFSClientConfiguration::OAIOpenZFSClientConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenZFSClientConfiguration::OAIOpenZFSClientConfiguration() {
    this->initializeModel();
}

OAIOpenZFSClientConfiguration::~OAIOpenZFSClientConfiguration() {}

void OAIOpenZFSClientConfiguration::initializeModel() {

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIOpenZFSClientConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenZFSClientConfiguration::fromJsonObject(QJsonObject json) {

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("Clients")]);
    m_clients_isSet = !json[QString("Clients")].isNull() && m_clients_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;
}

QString OAIOpenZFSClientConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenZFSClientConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_clients_isSet) {
        obj.insert(QString("Clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIOpenZFSClientConfiguration::getClients() const {
    return m_clients;
}
void OAIOpenZFSClientConfiguration::setClients(const QString &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIOpenZFSClientConfiguration::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIOpenZFSClientConfiguration::is_clients_Valid() const{
    return m_clients_isValid;
}

QList OAIOpenZFSClientConfiguration::getOptions() const {
    return m_options;
}
void OAIOpenZFSClientConfiguration::setOptions(const QList &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIOpenZFSClientConfiguration::is_options_Set() const{
    return m_options_isSet;
}

bool OAIOpenZFSClientConfiguration::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIOpenZFSClientConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenZFSClientConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_clients_isValid && m_options_isValid && true;
}

} // namespace OpenAPI
