/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupLifecycle::OAIBackupLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupLifecycle::OAIBackupLifecycle() {
    this->initializeModel();
}

OAIBackupLifecycle::~OAIBackupLifecycle() {}

void OAIBackupLifecycle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBackupLifecycle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBackupLifecycle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSFERRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::TRANSFERRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COPYING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupLifecycle::COPYING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBackupLifecycle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBackupLifecycle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBackupLifecycle::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIBackupLifecycle::CREATING:
            val = "CREATING";
            break;
        case eOAIBackupLifecycle::TRANSFERRING:
            val = "TRANSFERRING";
            break;
        case eOAIBackupLifecycle::DELETED:
            val = "DELETED";
            break;
        case eOAIBackupLifecycle::FAILED:
            val = "FAILED";
            break;
        case eOAIBackupLifecycle::PENDING:
            val = "PENDING";
            break;
        case eOAIBackupLifecycle::COPYING:
            val = "COPYING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBackupLifecycle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBackupLifecycle::eOAIBackupLifecycle OAIBackupLifecycle::getValue() const {
    return m_value;
}

void OAIBackupLifecycle::setValue(const OAIBackupLifecycle::eOAIBackupLifecycle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBackupLifecycle::isSet() const {
    
    return m_value_isSet;
}

bool OAIBackupLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
