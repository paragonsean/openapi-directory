/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVolumeRequest_OpenZFSConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVolumeRequest_OpenZFSConfiguration::OAIUpdateVolumeRequest_OpenZFSConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVolumeRequest_OpenZFSConfiguration::OAIUpdateVolumeRequest_OpenZFSConfiguration() {
    this->initializeModel();
}

OAIUpdateVolumeRequest_OpenZFSConfiguration::~OAIUpdateVolumeRequest_OpenZFSConfiguration() {}

void OAIUpdateVolumeRequest_OpenZFSConfiguration::initializeModel() {

    m_storage_capacity_reservation_gi_b_isSet = false;
    m_storage_capacity_reservation_gi_b_isValid = false;

    m_storage_capacity_quota_gi_b_isSet = false;
    m_storage_capacity_quota_gi_b_isValid = false;

    m_record_size_ki_b_isSet = false;
    m_record_size_ki_b_isValid = false;

    m_data_compression_type_isSet = false;
    m_data_compression_type_isValid = false;

    m_nfs_exports_isSet = false;
    m_nfs_exports_isValid = false;

    m_user_and_group_quotas_isSet = false;
    m_user_and_group_quotas_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAIUpdateVolumeRequest_OpenZFSConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVolumeRequest_OpenZFSConfiguration::fromJsonObject(QJsonObject json) {

    m_storage_capacity_reservation_gi_b_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity_reservation_gi_b, json[QString("StorageCapacityReservationGiB")]);
    m_storage_capacity_reservation_gi_b_isSet = !json[QString("StorageCapacityReservationGiB")].isNull() && m_storage_capacity_reservation_gi_b_isValid;

    m_storage_capacity_quota_gi_b_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity_quota_gi_b, json[QString("StorageCapacityQuotaGiB")]);
    m_storage_capacity_quota_gi_b_isSet = !json[QString("StorageCapacityQuotaGiB")].isNull() && m_storage_capacity_quota_gi_b_isValid;

    m_record_size_ki_b_isValid = ::OpenAPI::fromJsonValue(m_record_size_ki_b, json[QString("RecordSizeKiB")]);
    m_record_size_ki_b_isSet = !json[QString("RecordSizeKiB")].isNull() && m_record_size_ki_b_isValid;

    m_data_compression_type_isValid = ::OpenAPI::fromJsonValue(m_data_compression_type, json[QString("DataCompressionType")]);
    m_data_compression_type_isSet = !json[QString("DataCompressionType")].isNull() && m_data_compression_type_isValid;

    m_nfs_exports_isValid = ::OpenAPI::fromJsonValue(m_nfs_exports, json[QString("NfsExports")]);
    m_nfs_exports_isSet = !json[QString("NfsExports")].isNull() && m_nfs_exports_isValid;

    m_user_and_group_quotas_isValid = ::OpenAPI::fromJsonValue(m_user_and_group_quotas, json[QString("UserAndGroupQuotas")]);
    m_user_and_group_quotas_isSet = !json[QString("UserAndGroupQuotas")].isNull() && m_user_and_group_quotas_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("ReadOnly")]);
    m_read_only_isSet = !json[QString("ReadOnly")].isNull() && m_read_only_isValid;
}

QString OAIUpdateVolumeRequest_OpenZFSConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVolumeRequest_OpenZFSConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_capacity_reservation_gi_b_isSet) {
        obj.insert(QString("StorageCapacityReservationGiB"), ::OpenAPI::toJsonValue(m_storage_capacity_reservation_gi_b));
    }
    if (m_storage_capacity_quota_gi_b_isSet) {
        obj.insert(QString("StorageCapacityQuotaGiB"), ::OpenAPI::toJsonValue(m_storage_capacity_quota_gi_b));
    }
    if (m_record_size_ki_b_isSet) {
        obj.insert(QString("RecordSizeKiB"), ::OpenAPI::toJsonValue(m_record_size_ki_b));
    }
    if (m_data_compression_type.isSet()) {
        obj.insert(QString("DataCompressionType"), ::OpenAPI::toJsonValue(m_data_compression_type));
    }
    if (m_nfs_exports.isSet()) {
        obj.insert(QString("NfsExports"), ::OpenAPI::toJsonValue(m_nfs_exports));
    }
    if (m_user_and_group_quotas.isSet()) {
        obj.insert(QString("UserAndGroupQuotas"), ::OpenAPI::toJsonValue(m_user_and_group_quotas));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("ReadOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    return obj;
}

qint32 OAIUpdateVolumeRequest_OpenZFSConfiguration::getStorageCapacityReservationGiB() const {
    return m_storage_capacity_reservation_gi_b;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setStorageCapacityReservationGiB(const qint32 &storage_capacity_reservation_gi_b) {
    m_storage_capacity_reservation_gi_b = storage_capacity_reservation_gi_b;
    m_storage_capacity_reservation_gi_b_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_storage_capacity_reservation_gi_b_Set() const{
    return m_storage_capacity_reservation_gi_b_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_storage_capacity_reservation_gi_b_Valid() const{
    return m_storage_capacity_reservation_gi_b_isValid;
}

qint32 OAIUpdateVolumeRequest_OpenZFSConfiguration::getStorageCapacityQuotaGiB() const {
    return m_storage_capacity_quota_gi_b;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setStorageCapacityQuotaGiB(const qint32 &storage_capacity_quota_gi_b) {
    m_storage_capacity_quota_gi_b = storage_capacity_quota_gi_b;
    m_storage_capacity_quota_gi_b_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_storage_capacity_quota_gi_b_Set() const{
    return m_storage_capacity_quota_gi_b_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_storage_capacity_quota_gi_b_Valid() const{
    return m_storage_capacity_quota_gi_b_isValid;
}

qint32 OAIUpdateVolumeRequest_OpenZFSConfiguration::getRecordSizeKiB() const {
    return m_record_size_ki_b;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setRecordSizeKiB(const qint32 &record_size_ki_b) {
    m_record_size_ki_b = record_size_ki_b;
    m_record_size_ki_b_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_record_size_ki_b_Set() const{
    return m_record_size_ki_b_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_record_size_ki_b_Valid() const{
    return m_record_size_ki_b_isValid;
}

OAIOpenZFSDataCompressionType OAIUpdateVolumeRequest_OpenZFSConfiguration::getDataCompressionType() const {
    return m_data_compression_type;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setDataCompressionType(const OAIOpenZFSDataCompressionType &data_compression_type) {
    m_data_compression_type = data_compression_type;
    m_data_compression_type_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_data_compression_type_Set() const{
    return m_data_compression_type_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_data_compression_type_Valid() const{
    return m_data_compression_type_isValid;
}

QList OAIUpdateVolumeRequest_OpenZFSConfiguration::getNfsExports() const {
    return m_nfs_exports;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setNfsExports(const QList &nfs_exports) {
    m_nfs_exports = nfs_exports;
    m_nfs_exports_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_nfs_exports_Set() const{
    return m_nfs_exports_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_nfs_exports_Valid() const{
    return m_nfs_exports_isValid;
}

QList OAIUpdateVolumeRequest_OpenZFSConfiguration::getUserAndGroupQuotas() const {
    return m_user_and_group_quotas;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setUserAndGroupQuotas(const QList &user_and_group_quotas) {
    m_user_and_group_quotas = user_and_group_quotas;
    m_user_and_group_quotas_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_user_and_group_quotas_Set() const{
    return m_user_and_group_quotas_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_user_and_group_quotas_Valid() const{
    return m_user_and_group_quotas_isValid;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::getReadOnly() const {
    return m_read_only;
}
void OAIUpdateVolumeRequest_OpenZFSConfiguration::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_capacity_reservation_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_quota_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_size_ki_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_and_group_quotas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVolumeRequest_OpenZFSConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
