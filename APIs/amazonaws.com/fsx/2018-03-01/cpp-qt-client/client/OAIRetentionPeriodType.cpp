/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetentionPeriodType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetentionPeriodType::OAIRetentionPeriodType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetentionPeriodType::OAIRetentionPeriodType() {
    this->initializeModel();
}

OAIRetentionPeriodType::~OAIRetentionPeriodType() {}

void OAIRetentionPeriodType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRetentionPeriodType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRetentionPeriodType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SECONDS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MINUTES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::MINUTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOURS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::HOURS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DAYS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::DAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONTHS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("YEARS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::YEARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INFINITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::INFINITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSPECIFIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionPeriodType::UNSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRetentionPeriodType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRetentionPeriodType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRetentionPeriodType::SECONDS:
            val = "SECONDS";
            break;
        case eOAIRetentionPeriodType::MINUTES:
            val = "MINUTES";
            break;
        case eOAIRetentionPeriodType::HOURS:
            val = "HOURS";
            break;
        case eOAIRetentionPeriodType::DAYS:
            val = "DAYS";
            break;
        case eOAIRetentionPeriodType::MONTHS:
            val = "MONTHS";
            break;
        case eOAIRetentionPeriodType::YEARS:
            val = "YEARS";
            break;
        case eOAIRetentionPeriodType::INFINITE:
            val = "INFINITE";
            break;
        case eOAIRetentionPeriodType::UNSPECIFIED:
            val = "UNSPECIFIED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRetentionPeriodType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRetentionPeriodType::eOAIRetentionPeriodType OAIRetentionPeriodType::getValue() const {
    return m_value;
}

void OAIRetentionPeriodType::setValue(const OAIRetentionPeriodType::eOAIRetentionPeriodType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRetentionPeriodType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRetentionPeriodType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
