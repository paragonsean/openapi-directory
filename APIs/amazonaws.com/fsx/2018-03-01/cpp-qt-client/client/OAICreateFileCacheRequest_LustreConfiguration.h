/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFileCacheRequest_LustreConfiguration.h
 *
 * 
 */

#ifndef OAICreateFileCacheRequest_LustreConfiguration_H
#define OAICreateFileCacheRequest_LustreConfiguration_H

#include <QJsonObject>

#include "OAICreateFileCacheLustreConfiguration_MetadataConfiguration.h"
#include "OAIFileCacheLustreDeploymentType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateFileCacheLustreConfiguration_MetadataConfiguration;

class OAICreateFileCacheRequest_LustreConfiguration : public OAIObject {
public:
    OAICreateFileCacheRequest_LustreConfiguration();
    OAICreateFileCacheRequest_LustreConfiguration(QString json);
    ~OAICreateFileCacheRequest_LustreConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPerUnitStorageThroughput() const;
    void setPerUnitStorageThroughput(const qint32 &per_unit_storage_throughput);
    bool is_per_unit_storage_throughput_Set() const;
    bool is_per_unit_storage_throughput_Valid() const;

    OAIFileCacheLustreDeploymentType getDeploymentType() const;
    void setDeploymentType(const OAIFileCacheLustreDeploymentType &deployment_type);
    bool is_deployment_type_Set() const;
    bool is_deployment_type_Valid() const;

    QString getWeeklyMaintenanceStartTime() const;
    void setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time);
    bool is_weekly_maintenance_start_time_Set() const;
    bool is_weekly_maintenance_start_time_Valid() const;

    OAICreateFileCacheLustreConfiguration_MetadataConfiguration getMetadataConfiguration() const;
    void setMetadataConfiguration(const OAICreateFileCacheLustreConfiguration_MetadataConfiguration &metadata_configuration);
    bool is_metadata_configuration_Set() const;
    bool is_metadata_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_per_unit_storage_throughput;
    bool m_per_unit_storage_throughput_isSet;
    bool m_per_unit_storage_throughput_isValid;

    OAIFileCacheLustreDeploymentType m_deployment_type;
    bool m_deployment_type_isSet;
    bool m_deployment_type_isValid;

    QString m_weekly_maintenance_start_time;
    bool m_weekly_maintenance_start_time_isSet;
    bool m_weekly_maintenance_start_time_isValid;

    OAICreateFileCacheLustreConfiguration_MetadataConfiguration m_metadata_configuration;
    bool m_metadata_configuration_isSet;
    bool m_metadata_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFileCacheRequest_LustreConfiguration)

#endif // OAICreateFileCacheRequest_LustreConfiguration_H
