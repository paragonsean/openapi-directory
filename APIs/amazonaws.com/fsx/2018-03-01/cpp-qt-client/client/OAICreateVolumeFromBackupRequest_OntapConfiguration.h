/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateVolumeFromBackupRequest_OntapConfiguration.h
 *
 * 
 */

#ifndef OAICreateVolumeFromBackupRequest_OntapConfiguration_H
#define OAICreateVolumeFromBackupRequest_OntapConfiguration_H

#include <QJsonObject>

#include "OAICreateOntapVolumeConfiguration_SnaplockConfiguration.h"
#include "OAIInputOntapVolumeType.h"
#include "OAISecurityStyle.h"
#include "OAITieringPolicy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITieringPolicy;
class OAICreateOntapVolumeConfiguration_SnaplockConfiguration;

class OAICreateVolumeFromBackupRequest_OntapConfiguration : public OAIObject {
public:
    OAICreateVolumeFromBackupRequest_OntapConfiguration();
    OAICreateVolumeFromBackupRequest_OntapConfiguration(QString json);
    ~OAICreateVolumeFromBackupRequest_OntapConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJunctionPath() const;
    void setJunctionPath(const QString &junction_path);
    bool is_junction_path_Set() const;
    bool is_junction_path_Valid() const;

    OAISecurityStyle getSecurityStyle() const;
    void setSecurityStyle(const OAISecurityStyle &security_style);
    bool is_security_style_Set() const;
    bool is_security_style_Valid() const;

    qint32 getSizeInMegabytes() const;
    void setSizeInMegabytes(const qint32 &size_in_megabytes);
    bool is_size_in_megabytes_Set() const;
    bool is_size_in_megabytes_Valid() const;

    bool getStorageEfficiencyEnabled() const;
    void setStorageEfficiencyEnabled(const bool &storage_efficiency_enabled);
    bool is_storage_efficiency_enabled_Set() const;
    bool is_storage_efficiency_enabled_Valid() const;

    QString getStorageVirtualMachineId() const;
    void setStorageVirtualMachineId(const QString &storage_virtual_machine_id);
    bool is_storage_virtual_machine_id_Set() const;
    bool is_storage_virtual_machine_id_Valid() const;

    OAITieringPolicy getTieringPolicy() const;
    void setTieringPolicy(const OAITieringPolicy &tiering_policy);
    bool is_tiering_policy_Set() const;
    bool is_tiering_policy_Valid() const;

    OAIInputOntapVolumeType getOntapVolumeType() const;
    void setOntapVolumeType(const OAIInputOntapVolumeType &ontap_volume_type);
    bool is_ontap_volume_type_Set() const;
    bool is_ontap_volume_type_Valid() const;

    QString getSnapshotPolicy() const;
    void setSnapshotPolicy(const QString &snapshot_policy);
    bool is_snapshot_policy_Set() const;
    bool is_snapshot_policy_Valid() const;

    bool getCopyTagsToBackups() const;
    void setCopyTagsToBackups(const bool &copy_tags_to_backups);
    bool is_copy_tags_to_backups_Set() const;
    bool is_copy_tags_to_backups_Valid() const;

    OAICreateOntapVolumeConfiguration_SnaplockConfiguration getSnaplockConfiguration() const;
    void setSnaplockConfiguration(const OAICreateOntapVolumeConfiguration_SnaplockConfiguration &snaplock_configuration);
    bool is_snaplock_configuration_Set() const;
    bool is_snaplock_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_junction_path;
    bool m_junction_path_isSet;
    bool m_junction_path_isValid;

    OAISecurityStyle m_security_style;
    bool m_security_style_isSet;
    bool m_security_style_isValid;

    qint32 m_size_in_megabytes;
    bool m_size_in_megabytes_isSet;
    bool m_size_in_megabytes_isValid;

    bool m_storage_efficiency_enabled;
    bool m_storage_efficiency_enabled_isSet;
    bool m_storage_efficiency_enabled_isValid;

    QString m_storage_virtual_machine_id;
    bool m_storage_virtual_machine_id_isSet;
    bool m_storage_virtual_machine_id_isValid;

    OAITieringPolicy m_tiering_policy;
    bool m_tiering_policy_isSet;
    bool m_tiering_policy_isValid;

    OAIInputOntapVolumeType m_ontap_volume_type;
    bool m_ontap_volume_type_isSet;
    bool m_ontap_volume_type_isValid;

    QString m_snapshot_policy;
    bool m_snapshot_policy_isSet;
    bool m_snapshot_policy_isValid;

    bool m_copy_tags_to_backups;
    bool m_copy_tags_to_backups_isSet;
    bool m_copy_tags_to_backups_isValid;

    OAICreateOntapVolumeConfiguration_SnaplockConfiguration m_snaplock_configuration;
    bool m_snaplock_configuration_isSet;
    bool m_snaplock_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateVolumeFromBackupRequest_OntapConfiguration)

#endif // OAICreateVolumeFromBackupRequest_OntapConfiguration_H
