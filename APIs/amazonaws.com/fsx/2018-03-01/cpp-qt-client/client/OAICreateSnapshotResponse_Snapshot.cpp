/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSnapshotResponse_Snapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSnapshotResponse_Snapshot::OAICreateSnapshotResponse_Snapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSnapshotResponse_Snapshot::OAICreateSnapshotResponse_Snapshot() {
    this->initializeModel();
}

OAICreateSnapshotResponse_Snapshot::~OAICreateSnapshotResponse_Snapshot() {}

void OAICreateSnapshotResponse_Snapshot::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_lifecycle_transition_reason_isSet = false;
    m_lifecycle_transition_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_administrative_actions_isSet = false;
    m_administrative_actions_isValid = false;
}

void OAICreateSnapshotResponse_Snapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSnapshotResponse_Snapshot::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("SnapshotId")]);
    m_snapshot_id_isSet = !json[QString("SnapshotId")].isNull() && m_snapshot_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("VolumeId")]);
    m_volume_id_isSet = !json[QString("VolumeId")].isNull() && m_volume_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_lifecycle_transition_reason_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_transition_reason, json[QString("LifecycleTransitionReason")]);
    m_lifecycle_transition_reason_isSet = !json[QString("LifecycleTransitionReason")].isNull() && m_lifecycle_transition_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_administrative_actions_isValid = ::OpenAPI::fromJsonValue(m_administrative_actions, json[QString("AdministrativeActions")]);
    m_administrative_actions_isSet = !json[QString("AdministrativeActions")].isNull() && m_administrative_actions_isValid;
}

QString OAICreateSnapshotResponse_Snapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSnapshotResponse_Snapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("SnapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("VolumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_lifecycle_transition_reason.isSet()) {
        obj.insert(QString("LifecycleTransitionReason"), ::OpenAPI::toJsonValue(m_lifecycle_transition_reason));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_administrative_actions.isSet()) {
        obj.insert(QString("AdministrativeActions"), ::OpenAPI::toJsonValue(m_administrative_actions));
    }
    return obj;
}

QString OAICreateSnapshotResponse_Snapshot::getResourceArn() const {
    return m_resource_arn;
}
void OAICreateSnapshotResponse_Snapshot::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAICreateSnapshotResponse_Snapshot::getSnapshotId() const {
    return m_snapshot_id;
}
void OAICreateSnapshotResponse_Snapshot::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

QString OAICreateSnapshotResponse_Snapshot::getName() const {
    return m_name;
}
void OAICreateSnapshotResponse_Snapshot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSnapshotResponse_Snapshot::getVolumeId() const {
    return m_volume_id;
}
void OAICreateSnapshotResponse_Snapshot::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

QDateTime OAICreateSnapshotResponse_Snapshot::getCreationTime() const {
    return m_creation_time;
}
void OAICreateSnapshotResponse_Snapshot::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAISnapshotLifecycle OAICreateSnapshotResponse_Snapshot::getLifecycle() const {
    return m_lifecycle;
}
void OAICreateSnapshotResponse_Snapshot::setLifecycle(const OAISnapshotLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAILifecycleTransitionReason OAICreateSnapshotResponse_Snapshot::getLifecycleTransitionReason() const {
    return m_lifecycle_transition_reason;
}
void OAICreateSnapshotResponse_Snapshot::setLifecycleTransitionReason(const OAILifecycleTransitionReason &lifecycle_transition_reason) {
    m_lifecycle_transition_reason = lifecycle_transition_reason;
    m_lifecycle_transition_reason_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_lifecycle_transition_reason_Set() const{
    return m_lifecycle_transition_reason_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_lifecycle_transition_reason_Valid() const{
    return m_lifecycle_transition_reason_isValid;
}

QList<OAITag> OAICreateSnapshotResponse_Snapshot::getTags() const {
    return m_tags;
}
void OAICreateSnapshotResponse_Snapshot::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateSnapshotResponse_Snapshot::getAdministrativeActions() const {
    return m_administrative_actions;
}
void OAICreateSnapshotResponse_Snapshot::setAdministrativeActions(const QList &administrative_actions) {
    m_administrative_actions = administrative_actions;
    m_administrative_actions_isSet = true;
}

bool OAICreateSnapshotResponse_Snapshot::is_administrative_actions_Set() const{
    return m_administrative_actions_isSet;
}

bool OAICreateSnapshotResponse_Snapshot::is_administrative_actions_Valid() const{
    return m_administrative_actions_isValid;
}

bool OAICreateSnapshotResponse_Snapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_transition_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSnapshotResponse_Snapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
