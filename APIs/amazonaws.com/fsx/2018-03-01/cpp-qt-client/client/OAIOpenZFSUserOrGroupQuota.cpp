/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenZFSUserOrGroupQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenZFSUserOrGroupQuota::OAIOpenZFSUserOrGroupQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenZFSUserOrGroupQuota::OAIOpenZFSUserOrGroupQuota() {
    this->initializeModel();
}

OAIOpenZFSUserOrGroupQuota::~OAIOpenZFSUserOrGroupQuota() {}

void OAIOpenZFSUserOrGroupQuota::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_storage_capacity_quota_gi_b_isSet = false;
    m_storage_capacity_quota_gi_b_isValid = false;
}

void OAIOpenZFSUserOrGroupQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenZFSUserOrGroupQuota::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_storage_capacity_quota_gi_b_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity_quota_gi_b, json[QString("StorageCapacityQuotaGiB")]);
    m_storage_capacity_quota_gi_b_isSet = !json[QString("StorageCapacityQuotaGiB")].isNull() && m_storage_capacity_quota_gi_b_isValid;
}

QString OAIOpenZFSUserOrGroupQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenZFSUserOrGroupQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_storage_capacity_quota_gi_b_isSet) {
        obj.insert(QString("StorageCapacityQuotaGiB"), ::OpenAPI::toJsonValue(m_storage_capacity_quota_gi_b));
    }
    return obj;
}

OAIOpenZFSQuotaType OAIOpenZFSUserOrGroupQuota::getType() const {
    return m_type;
}
void OAIOpenZFSUserOrGroupQuota::setType(const OAIOpenZFSQuotaType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOpenZFSUserOrGroupQuota::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOpenZFSUserOrGroupQuota::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIOpenZFSUserOrGroupQuota::getId() const {
    return m_id;
}
void OAIOpenZFSUserOrGroupQuota::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOpenZFSUserOrGroupQuota::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOpenZFSUserOrGroupQuota::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIOpenZFSUserOrGroupQuota::getStorageCapacityQuotaGiB() const {
    return m_storage_capacity_quota_gi_b;
}
void OAIOpenZFSUserOrGroupQuota::setStorageCapacityQuotaGiB(const qint32 &storage_capacity_quota_gi_b) {
    m_storage_capacity_quota_gi_b = storage_capacity_quota_gi_b;
    m_storage_capacity_quota_gi_b_isSet = true;
}

bool OAIOpenZFSUserOrGroupQuota::is_storage_capacity_quota_gi_b_Set() const{
    return m_storage_capacity_quota_gi_b_isSet;
}

bool OAIOpenZFSUserOrGroupQuota::is_storage_capacity_quota_gi_b_Valid() const{
    return m_storage_capacity_quota_gi_b_isValid;
}

bool OAIOpenZFSUserOrGroupQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_quota_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenZFSUserOrGroupQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_id_isValid && m_storage_capacity_quota_gi_b_isValid && true;
}

} // namespace OpenAPI
