/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILustreFileSystemConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILustreFileSystemConfiguration::OAILustreFileSystemConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILustreFileSystemConfiguration::OAILustreFileSystemConfiguration() {
    this->initializeModel();
}

OAILustreFileSystemConfiguration::~OAILustreFileSystemConfiguration() {}

void OAILustreFileSystemConfiguration::initializeModel() {

    m_weekly_maintenance_start_time_isSet = false;
    m_weekly_maintenance_start_time_isValid = false;

    m_data_repository_configuration_isSet = false;
    m_data_repository_configuration_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_per_unit_storage_throughput_isSet = false;
    m_per_unit_storage_throughput_isValid = false;

    m_mount_name_isSet = false;
    m_mount_name_isValid = false;

    m_daily_automatic_backup_start_time_isSet = false;
    m_daily_automatic_backup_start_time_isValid = false;

    m_automatic_backup_retention_days_isSet = false;
    m_automatic_backup_retention_days_isValid = false;

    m_copy_tags_to_backups_isSet = false;
    m_copy_tags_to_backups_isValid = false;

    m_drive_cache_type_isSet = false;
    m_drive_cache_type_isValid = false;

    m_data_compression_type_isSet = false;
    m_data_compression_type_isValid = false;

    m_log_configuration_isSet = false;
    m_log_configuration_isValid = false;

    m_root_squash_configuration_isSet = false;
    m_root_squash_configuration_isValid = false;
}

void OAILustreFileSystemConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILustreFileSystemConfiguration::fromJsonObject(QJsonObject json) {

    m_weekly_maintenance_start_time_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_start_time, json[QString("WeeklyMaintenanceStartTime")]);
    m_weekly_maintenance_start_time_isSet = !json[QString("WeeklyMaintenanceStartTime")].isNull() && m_weekly_maintenance_start_time_isValid;

    m_data_repository_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_repository_configuration, json[QString("DataRepositoryConfiguration")]);
    m_data_repository_configuration_isSet = !json[QString("DataRepositoryConfiguration")].isNull() && m_data_repository_configuration_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("DeploymentType")]);
    m_deployment_type_isSet = !json[QString("DeploymentType")].isNull() && m_deployment_type_isValid;

    m_per_unit_storage_throughput_isValid = ::OpenAPI::fromJsonValue(m_per_unit_storage_throughput, json[QString("PerUnitStorageThroughput")]);
    m_per_unit_storage_throughput_isSet = !json[QString("PerUnitStorageThroughput")].isNull() && m_per_unit_storage_throughput_isValid;

    m_mount_name_isValid = ::OpenAPI::fromJsonValue(m_mount_name, json[QString("MountName")]);
    m_mount_name_isSet = !json[QString("MountName")].isNull() && m_mount_name_isValid;

    m_daily_automatic_backup_start_time_isValid = ::OpenAPI::fromJsonValue(m_daily_automatic_backup_start_time, json[QString("DailyAutomaticBackupStartTime")]);
    m_daily_automatic_backup_start_time_isSet = !json[QString("DailyAutomaticBackupStartTime")].isNull() && m_daily_automatic_backup_start_time_isValid;

    m_automatic_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_automatic_backup_retention_days, json[QString("AutomaticBackupRetentionDays")]);
    m_automatic_backup_retention_days_isSet = !json[QString("AutomaticBackupRetentionDays")].isNull() && m_automatic_backup_retention_days_isValid;

    m_copy_tags_to_backups_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_backups, json[QString("CopyTagsToBackups")]);
    m_copy_tags_to_backups_isSet = !json[QString("CopyTagsToBackups")].isNull() && m_copy_tags_to_backups_isValid;

    m_drive_cache_type_isValid = ::OpenAPI::fromJsonValue(m_drive_cache_type, json[QString("DriveCacheType")]);
    m_drive_cache_type_isSet = !json[QString("DriveCacheType")].isNull() && m_drive_cache_type_isValid;

    m_data_compression_type_isValid = ::OpenAPI::fromJsonValue(m_data_compression_type, json[QString("DataCompressionType")]);
    m_data_compression_type_isSet = !json[QString("DataCompressionType")].isNull() && m_data_compression_type_isValid;

    m_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_log_configuration, json[QString("LogConfiguration")]);
    m_log_configuration_isSet = !json[QString("LogConfiguration")].isNull() && m_log_configuration_isValid;

    m_root_squash_configuration_isValid = ::OpenAPI::fromJsonValue(m_root_squash_configuration, json[QString("RootSquashConfiguration")]);
    m_root_squash_configuration_isSet = !json[QString("RootSquashConfiguration")].isNull() && m_root_squash_configuration_isValid;
}

QString OAILustreFileSystemConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILustreFileSystemConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_weekly_maintenance_start_time_isSet) {
        obj.insert(QString("WeeklyMaintenanceStartTime"), ::OpenAPI::toJsonValue(m_weekly_maintenance_start_time));
    }
    if (m_data_repository_configuration.isSet()) {
        obj.insert(QString("DataRepositoryConfiguration"), ::OpenAPI::toJsonValue(m_data_repository_configuration));
    }
    if (m_deployment_type.isSet()) {
        obj.insert(QString("DeploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_per_unit_storage_throughput_isSet) {
        obj.insert(QString("PerUnitStorageThroughput"), ::OpenAPI::toJsonValue(m_per_unit_storage_throughput));
    }
    if (m_mount_name_isSet) {
        obj.insert(QString("MountName"), ::OpenAPI::toJsonValue(m_mount_name));
    }
    if (m_daily_automatic_backup_start_time_isSet) {
        obj.insert(QString("DailyAutomaticBackupStartTime"), ::OpenAPI::toJsonValue(m_daily_automatic_backup_start_time));
    }
    if (m_automatic_backup_retention_days_isSet) {
        obj.insert(QString("AutomaticBackupRetentionDays"), ::OpenAPI::toJsonValue(m_automatic_backup_retention_days));
    }
    if (m_copy_tags_to_backups_isSet) {
        obj.insert(QString("CopyTagsToBackups"), ::OpenAPI::toJsonValue(m_copy_tags_to_backups));
    }
    if (m_drive_cache_type.isSet()) {
        obj.insert(QString("DriveCacheType"), ::OpenAPI::toJsonValue(m_drive_cache_type));
    }
    if (m_data_compression_type.isSet()) {
        obj.insert(QString("DataCompressionType"), ::OpenAPI::toJsonValue(m_data_compression_type));
    }
    if (m_log_configuration.isSet()) {
        obj.insert(QString("LogConfiguration"), ::OpenAPI::toJsonValue(m_log_configuration));
    }
    if (m_root_squash_configuration.isSet()) {
        obj.insert(QString("RootSquashConfiguration"), ::OpenAPI::toJsonValue(m_root_squash_configuration));
    }
    return obj;
}

QString OAILustreFileSystemConfiguration::getWeeklyMaintenanceStartTime() const {
    return m_weekly_maintenance_start_time;
}
void OAILustreFileSystemConfiguration::setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time) {
    m_weekly_maintenance_start_time = weekly_maintenance_start_time;
    m_weekly_maintenance_start_time_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_weekly_maintenance_start_time_Set() const{
    return m_weekly_maintenance_start_time_isSet;
}

bool OAILustreFileSystemConfiguration::is_weekly_maintenance_start_time_Valid() const{
    return m_weekly_maintenance_start_time_isValid;
}

OAIDataRepositoryConfiguration OAILustreFileSystemConfiguration::getDataRepositoryConfiguration() const {
    return m_data_repository_configuration;
}
void OAILustreFileSystemConfiguration::setDataRepositoryConfiguration(const OAIDataRepositoryConfiguration &data_repository_configuration) {
    m_data_repository_configuration = data_repository_configuration;
    m_data_repository_configuration_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_data_repository_configuration_Set() const{
    return m_data_repository_configuration_isSet;
}

bool OAILustreFileSystemConfiguration::is_data_repository_configuration_Valid() const{
    return m_data_repository_configuration_isValid;
}

OAILustreDeploymentType OAILustreFileSystemConfiguration::getDeploymentType() const {
    return m_deployment_type;
}
void OAILustreFileSystemConfiguration::setDeploymentType(const OAILustreDeploymentType &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAILustreFileSystemConfiguration::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

qint32 OAILustreFileSystemConfiguration::getPerUnitStorageThroughput() const {
    return m_per_unit_storage_throughput;
}
void OAILustreFileSystemConfiguration::setPerUnitStorageThroughput(const qint32 &per_unit_storage_throughput) {
    m_per_unit_storage_throughput = per_unit_storage_throughput;
    m_per_unit_storage_throughput_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_per_unit_storage_throughput_Set() const{
    return m_per_unit_storage_throughput_isSet;
}

bool OAILustreFileSystemConfiguration::is_per_unit_storage_throughput_Valid() const{
    return m_per_unit_storage_throughput_isValid;
}

QString OAILustreFileSystemConfiguration::getMountName() const {
    return m_mount_name;
}
void OAILustreFileSystemConfiguration::setMountName(const QString &mount_name) {
    m_mount_name = mount_name;
    m_mount_name_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_mount_name_Set() const{
    return m_mount_name_isSet;
}

bool OAILustreFileSystemConfiguration::is_mount_name_Valid() const{
    return m_mount_name_isValid;
}

QString OAILustreFileSystemConfiguration::getDailyAutomaticBackupStartTime() const {
    return m_daily_automatic_backup_start_time;
}
void OAILustreFileSystemConfiguration::setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time) {
    m_daily_automatic_backup_start_time = daily_automatic_backup_start_time;
    m_daily_automatic_backup_start_time_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_daily_automatic_backup_start_time_Set() const{
    return m_daily_automatic_backup_start_time_isSet;
}

bool OAILustreFileSystemConfiguration::is_daily_automatic_backup_start_time_Valid() const{
    return m_daily_automatic_backup_start_time_isValid;
}

qint32 OAILustreFileSystemConfiguration::getAutomaticBackupRetentionDays() const {
    return m_automatic_backup_retention_days;
}
void OAILustreFileSystemConfiguration::setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days) {
    m_automatic_backup_retention_days = automatic_backup_retention_days;
    m_automatic_backup_retention_days_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_automatic_backup_retention_days_Set() const{
    return m_automatic_backup_retention_days_isSet;
}

bool OAILustreFileSystemConfiguration::is_automatic_backup_retention_days_Valid() const{
    return m_automatic_backup_retention_days_isValid;
}

bool OAILustreFileSystemConfiguration::getCopyTagsToBackups() const {
    return m_copy_tags_to_backups;
}
void OAILustreFileSystemConfiguration::setCopyTagsToBackups(const bool &copy_tags_to_backups) {
    m_copy_tags_to_backups = copy_tags_to_backups;
    m_copy_tags_to_backups_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_copy_tags_to_backups_Set() const{
    return m_copy_tags_to_backups_isSet;
}

bool OAILustreFileSystemConfiguration::is_copy_tags_to_backups_Valid() const{
    return m_copy_tags_to_backups_isValid;
}

OAIDriveCacheType OAILustreFileSystemConfiguration::getDriveCacheType() const {
    return m_drive_cache_type;
}
void OAILustreFileSystemConfiguration::setDriveCacheType(const OAIDriveCacheType &drive_cache_type) {
    m_drive_cache_type = drive_cache_type;
    m_drive_cache_type_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_drive_cache_type_Set() const{
    return m_drive_cache_type_isSet;
}

bool OAILustreFileSystemConfiguration::is_drive_cache_type_Valid() const{
    return m_drive_cache_type_isValid;
}

OAIDataCompressionType OAILustreFileSystemConfiguration::getDataCompressionType() const {
    return m_data_compression_type;
}
void OAILustreFileSystemConfiguration::setDataCompressionType(const OAIDataCompressionType &data_compression_type) {
    m_data_compression_type = data_compression_type;
    m_data_compression_type_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_data_compression_type_Set() const{
    return m_data_compression_type_isSet;
}

bool OAILustreFileSystemConfiguration::is_data_compression_type_Valid() const{
    return m_data_compression_type_isValid;
}

OAILustreFileSystemConfiguration_LogConfiguration OAILustreFileSystemConfiguration::getLogConfiguration() const {
    return m_log_configuration;
}
void OAILustreFileSystemConfiguration::setLogConfiguration(const OAILustreFileSystemConfiguration_LogConfiguration &log_configuration) {
    m_log_configuration = log_configuration;
    m_log_configuration_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_log_configuration_Set() const{
    return m_log_configuration_isSet;
}

bool OAILustreFileSystemConfiguration::is_log_configuration_Valid() const{
    return m_log_configuration_isValid;
}

OAILustreFileSystemConfiguration_RootSquashConfiguration OAILustreFileSystemConfiguration::getRootSquashConfiguration() const {
    return m_root_squash_configuration;
}
void OAILustreFileSystemConfiguration::setRootSquashConfiguration(const OAILustreFileSystemConfiguration_RootSquashConfiguration &root_squash_configuration) {
    m_root_squash_configuration = root_squash_configuration;
    m_root_squash_configuration_isSet = true;
}

bool OAILustreFileSystemConfiguration::is_root_squash_configuration_Set() const{
    return m_root_squash_configuration_isSet;
}

bool OAILustreFileSystemConfiguration::is_root_squash_configuration_Valid() const{
    return m_root_squash_configuration_isValid;
}

bool OAILustreFileSystemConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_weekly_maintenance_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_repository_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_unit_storage_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_automatic_backup_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_cache_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_squash_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILustreFileSystemConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
