/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministrativeAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdministrativeAction::OAIAdministrativeAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdministrativeAction::OAIAdministrativeAction() {
    this->initializeModel();
}

OAIAdministrativeAction::~OAIAdministrativeAction() {}

void OAIAdministrativeAction::initializeModel() {

    m_administrative_action_type_isSet = false;
    m_administrative_action_type_isValid = false;

    m_progress_percent_isSet = false;
    m_progress_percent_isValid = false;

    m_request_time_isSet = false;
    m_request_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_file_system_values_isSet = false;
    m_target_file_system_values_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_target_volume_values_isSet = false;
    m_target_volume_values_isValid = false;

    m_target_snapshot_values_isSet = false;
    m_target_snapshot_values_isValid = false;
}

void OAIAdministrativeAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdministrativeAction::fromJsonObject(QJsonObject json) {

    m_administrative_action_type_isValid = ::OpenAPI::fromJsonValue(m_administrative_action_type, json[QString("AdministrativeActionType")]);
    m_administrative_action_type_isSet = !json[QString("AdministrativeActionType")].isNull() && m_administrative_action_type_isValid;

    m_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_progress_percent, json[QString("ProgressPercent")]);
    m_progress_percent_isSet = !json[QString("ProgressPercent")].isNull() && m_progress_percent_isValid;

    m_request_time_isValid = ::OpenAPI::fromJsonValue(m_request_time, json[QString("RequestTime")]);
    m_request_time_isSet = !json[QString("RequestTime")].isNull() && m_request_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_file_system_values_isValid = ::OpenAPI::fromJsonValue(m_target_file_system_values, json[QString("TargetFileSystemValues")]);
    m_target_file_system_values_isSet = !json[QString("TargetFileSystemValues")].isNull() && m_target_file_system_values_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;

    m_target_volume_values_isValid = ::OpenAPI::fromJsonValue(m_target_volume_values, json[QString("TargetVolumeValues")]);
    m_target_volume_values_isSet = !json[QString("TargetVolumeValues")].isNull() && m_target_volume_values_isValid;

    m_target_snapshot_values_isValid = ::OpenAPI::fromJsonValue(m_target_snapshot_values, json[QString("TargetSnapshotValues")]);
    m_target_snapshot_values_isSet = !json[QString("TargetSnapshotValues")].isNull() && m_target_snapshot_values_isValid;
}

QString OAIAdministrativeAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdministrativeAction::asJsonObject() const {
    QJsonObject obj;
    if (m_administrative_action_type.isSet()) {
        obj.insert(QString("AdministrativeActionType"), ::OpenAPI::toJsonValue(m_administrative_action_type));
    }
    if (m_progress_percent_isSet) {
        obj.insert(QString("ProgressPercent"), ::OpenAPI::toJsonValue(m_progress_percent));
    }
    if (m_request_time_isSet) {
        obj.insert(QString("RequestTime"), ::OpenAPI::toJsonValue(m_request_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_file_system_values.isSet()) {
        obj.insert(QString("TargetFileSystemValues"), ::OpenAPI::toJsonValue(m_target_file_system_values));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_target_volume_values.isSet()) {
        obj.insert(QString("TargetVolumeValues"), ::OpenAPI::toJsonValue(m_target_volume_values));
    }
    if (m_target_snapshot_values.isSet()) {
        obj.insert(QString("TargetSnapshotValues"), ::OpenAPI::toJsonValue(m_target_snapshot_values));
    }
    return obj;
}

OAIAdministrativeActionType OAIAdministrativeAction::getAdministrativeActionType() const {
    return m_administrative_action_type;
}
void OAIAdministrativeAction::setAdministrativeActionType(const OAIAdministrativeActionType &administrative_action_type) {
    m_administrative_action_type = administrative_action_type;
    m_administrative_action_type_isSet = true;
}

bool OAIAdministrativeAction::is_administrative_action_type_Set() const{
    return m_administrative_action_type_isSet;
}

bool OAIAdministrativeAction::is_administrative_action_type_Valid() const{
    return m_administrative_action_type_isValid;
}

qint32 OAIAdministrativeAction::getProgressPercent() const {
    return m_progress_percent;
}
void OAIAdministrativeAction::setProgressPercent(const qint32 &progress_percent) {
    m_progress_percent = progress_percent;
    m_progress_percent_isSet = true;
}

bool OAIAdministrativeAction::is_progress_percent_Set() const{
    return m_progress_percent_isSet;
}

bool OAIAdministrativeAction::is_progress_percent_Valid() const{
    return m_progress_percent_isValid;
}

QDateTime OAIAdministrativeAction::getRequestTime() const {
    return m_request_time;
}
void OAIAdministrativeAction::setRequestTime(const QDateTime &request_time) {
    m_request_time = request_time;
    m_request_time_isSet = true;
}

bool OAIAdministrativeAction::is_request_time_Set() const{
    return m_request_time_isSet;
}

bool OAIAdministrativeAction::is_request_time_Valid() const{
    return m_request_time_isValid;
}

OAIStatus OAIAdministrativeAction::getStatus() const {
    return m_status;
}
void OAIAdministrativeAction::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAdministrativeAction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAdministrativeAction::is_status_Valid() const{
    return m_status_isValid;
}

OAIAdministrativeAction_TargetFileSystemValues OAIAdministrativeAction::getTargetFileSystemValues() const {
    return m_target_file_system_values;
}
void OAIAdministrativeAction::setTargetFileSystemValues(const OAIAdministrativeAction_TargetFileSystemValues &target_file_system_values) {
    m_target_file_system_values = target_file_system_values;
    m_target_file_system_values_isSet = true;
}

bool OAIAdministrativeAction::is_target_file_system_values_Set() const{
    return m_target_file_system_values_isSet;
}

bool OAIAdministrativeAction::is_target_file_system_values_Valid() const{
    return m_target_file_system_values_isValid;
}

OAIAdministrativeActionFailureDetails OAIAdministrativeAction::getFailureDetails() const {
    return m_failure_details;
}
void OAIAdministrativeAction::setFailureDetails(const OAIAdministrativeActionFailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAIAdministrativeAction::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAIAdministrativeAction::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

OAIVolume OAIAdministrativeAction::getTargetVolumeValues() const {
    return m_target_volume_values;
}
void OAIAdministrativeAction::setTargetVolumeValues(const OAIVolume &target_volume_values) {
    m_target_volume_values = target_volume_values;
    m_target_volume_values_isSet = true;
}

bool OAIAdministrativeAction::is_target_volume_values_Set() const{
    return m_target_volume_values_isSet;
}

bool OAIAdministrativeAction::is_target_volume_values_Valid() const{
    return m_target_volume_values_isValid;
}

OAISnapshot OAIAdministrativeAction::getTargetSnapshotValues() const {
    return m_target_snapshot_values;
}
void OAIAdministrativeAction::setTargetSnapshotValues(const OAISnapshot &target_snapshot_values) {
    m_target_snapshot_values = target_snapshot_values;
    m_target_snapshot_values_isSet = true;
}

bool OAIAdministrativeAction::is_target_snapshot_values_Set() const{
    return m_target_snapshot_values_isSet;
}

bool OAIAdministrativeAction::is_target_snapshot_values_Valid() const{
    return m_target_snapshot_values_isValid;
}

bool OAIAdministrativeAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrative_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_file_system_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_volume_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_snapshot_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdministrativeAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
