/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOntapFileSystemConfiguration_Endpoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOntapFileSystemConfiguration_Endpoints::OAIOntapFileSystemConfiguration_Endpoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOntapFileSystemConfiguration_Endpoints::OAIOntapFileSystemConfiguration_Endpoints() {
    this->initializeModel();
}

OAIOntapFileSystemConfiguration_Endpoints::~OAIOntapFileSystemConfiguration_Endpoints() {}

void OAIOntapFileSystemConfiguration_Endpoints::initializeModel() {

    m_intercluster_isSet = false;
    m_intercluster_isValid = false;

    m_management_isSet = false;
    m_management_isValid = false;
}

void OAIOntapFileSystemConfiguration_Endpoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOntapFileSystemConfiguration_Endpoints::fromJsonObject(QJsonObject json) {

    m_intercluster_isValid = ::OpenAPI::fromJsonValue(m_intercluster, json[QString("Intercluster")]);
    m_intercluster_isSet = !json[QString("Intercluster")].isNull() && m_intercluster_isValid;

    m_management_isValid = ::OpenAPI::fromJsonValue(m_management, json[QString("Management")]);
    m_management_isSet = !json[QString("Management")].isNull() && m_management_isValid;
}

QString OAIOntapFileSystemConfiguration_Endpoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOntapFileSystemConfiguration_Endpoints::asJsonObject() const {
    QJsonObject obj;
    if (m_intercluster.isSet()) {
        obj.insert(QString("Intercluster"), ::OpenAPI::toJsonValue(m_intercluster));
    }
    if (m_management.isSet()) {
        obj.insert(QString("Management"), ::OpenAPI::toJsonValue(m_management));
    }
    return obj;
}

OAIFileSystemEndpoints_Intercluster OAIOntapFileSystemConfiguration_Endpoints::getIntercluster() const {
    return m_intercluster;
}
void OAIOntapFileSystemConfiguration_Endpoints::setIntercluster(const OAIFileSystemEndpoints_Intercluster &intercluster) {
    m_intercluster = intercluster;
    m_intercluster_isSet = true;
}

bool OAIOntapFileSystemConfiguration_Endpoints::is_intercluster_Set() const{
    return m_intercluster_isSet;
}

bool OAIOntapFileSystemConfiguration_Endpoints::is_intercluster_Valid() const{
    return m_intercluster_isValid;
}

OAIFileSystemEndpoints_Management OAIOntapFileSystemConfiguration_Endpoints::getManagement() const {
    return m_management;
}
void OAIOntapFileSystemConfiguration_Endpoints::setManagement(const OAIFileSystemEndpoints_Management &management) {
    m_management = management;
    m_management_isSet = true;
}

bool OAIOntapFileSystemConfiguration_Endpoints::is_management_Set() const{
    return m_management_isSet;
}

bool OAIOntapFileSystemConfiguration_Endpoints::is_management_Valid() const{
    return m_management_isValid;
}

bool OAIOntapFileSystemConfiguration_Endpoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intercluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_management.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOntapFileSystemConfiguration_Endpoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
