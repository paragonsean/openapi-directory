/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration() {
    this->initializeModel();
}

OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::~OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration() {}

void OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::initializeModel() {

    m_file_access_audit_log_level_isSet = false;
    m_file_access_audit_log_level_isValid = false;

    m_file_share_access_audit_log_level_isSet = false;
    m_file_share_access_audit_log_level_isValid = false;

    m_audit_log_destination_isSet = false;
    m_audit_log_destination_isValid = false;
}

void OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::fromJsonObject(QJsonObject json) {

    m_file_access_audit_log_level_isValid = ::OpenAPI::fromJsonValue(m_file_access_audit_log_level, json[QString("FileAccessAuditLogLevel")]);
    m_file_access_audit_log_level_isSet = !json[QString("FileAccessAuditLogLevel")].isNull() && m_file_access_audit_log_level_isValid;

    m_file_share_access_audit_log_level_isValid = ::OpenAPI::fromJsonValue(m_file_share_access_audit_log_level, json[QString("FileShareAccessAuditLogLevel")]);
    m_file_share_access_audit_log_level_isSet = !json[QString("FileShareAccessAuditLogLevel")].isNull() && m_file_share_access_audit_log_level_isValid;

    m_audit_log_destination_isValid = ::OpenAPI::fromJsonValue(m_audit_log_destination, json[QString("AuditLogDestination")]);
    m_audit_log_destination_isSet = !json[QString("AuditLogDestination")].isNull() && m_audit_log_destination_isValid;
}

QString OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_file_access_audit_log_level.isSet()) {
        obj.insert(QString("FileAccessAuditLogLevel"), ::OpenAPI::toJsonValue(m_file_access_audit_log_level));
    }
    if (m_file_share_access_audit_log_level.isSet()) {
        obj.insert(QString("FileShareAccessAuditLogLevel"), ::OpenAPI::toJsonValue(m_file_share_access_audit_log_level));
    }
    if (m_audit_log_destination_isSet) {
        obj.insert(QString("AuditLogDestination"), ::OpenAPI::toJsonValue(m_audit_log_destination));
    }
    return obj;
}

OAIWindowsAccessAuditLogLevel OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::getFileAccessAuditLogLevel() const {
    return m_file_access_audit_log_level;
}
void OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::setFileAccessAuditLogLevel(const OAIWindowsAccessAuditLogLevel &file_access_audit_log_level) {
    m_file_access_audit_log_level = file_access_audit_log_level;
    m_file_access_audit_log_level_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::is_file_access_audit_log_level_Set() const{
    return m_file_access_audit_log_level_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::is_file_access_audit_log_level_Valid() const{
    return m_file_access_audit_log_level_isValid;
}

OAIWindowsAccessAuditLogLevel OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::getFileShareAccessAuditLogLevel() const {
    return m_file_share_access_audit_log_level;
}
void OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::setFileShareAccessAuditLogLevel(const OAIWindowsAccessAuditLogLevel &file_share_access_audit_log_level) {
    m_file_share_access_audit_log_level = file_share_access_audit_log_level;
    m_file_share_access_audit_log_level_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::is_file_share_access_audit_log_level_Set() const{
    return m_file_share_access_audit_log_level_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::is_file_share_access_audit_log_level_Valid() const{
    return m_file_share_access_audit_log_level_isValid;
}

QString OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::getAuditLogDestination() const {
    return m_audit_log_destination;
}
void OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::setAuditLogDestination(const QString &audit_log_destination) {
    m_audit_log_destination = audit_log_destination;
    m_audit_log_destination_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::is_audit_log_destination_Set() const{
    return m_audit_log_destination_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::is_audit_log_destination_Valid() const{
    return m_audit_log_destination_isValid;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_access_audit_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_share_access_audit_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_access_audit_log_level_isValid && m_file_share_access_audit_log_level_isValid && true;
}

} // namespace OpenAPI
