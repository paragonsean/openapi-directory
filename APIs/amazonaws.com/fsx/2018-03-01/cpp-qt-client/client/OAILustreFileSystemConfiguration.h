/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILustreFileSystemConfiguration.h
 *
 * The configuration for the Amazon FSx for Lustre file system.
 */

#ifndef OAILustreFileSystemConfiguration_H
#define OAILustreFileSystemConfiguration_H

#include <QJsonObject>

#include "OAIDataCompressionType.h"
#include "OAIDataRepositoryConfiguration.h"
#include "OAIDriveCacheType.h"
#include "OAILustreDeploymentType.h"
#include "OAILustreFileSystemConfiguration_LogConfiguration.h"
#include "OAILustreFileSystemConfiguration_RootSquashConfiguration.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataRepositoryConfiguration;
class OAILustreFileSystemConfiguration_LogConfiguration;
class OAILustreFileSystemConfiguration_RootSquashConfiguration;

class OAILustreFileSystemConfiguration : public OAIObject {
public:
    OAILustreFileSystemConfiguration();
    OAILustreFileSystemConfiguration(QString json);
    ~OAILustreFileSystemConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWeeklyMaintenanceStartTime() const;
    void setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time);
    bool is_weekly_maintenance_start_time_Set() const;
    bool is_weekly_maintenance_start_time_Valid() const;

    OAIDataRepositoryConfiguration getDataRepositoryConfiguration() const;
    void setDataRepositoryConfiguration(const OAIDataRepositoryConfiguration &data_repository_configuration);
    bool is_data_repository_configuration_Set() const;
    bool is_data_repository_configuration_Valid() const;

    OAILustreDeploymentType getDeploymentType() const;
    void setDeploymentType(const OAILustreDeploymentType &deployment_type);
    bool is_deployment_type_Set() const;
    bool is_deployment_type_Valid() const;

    qint32 getPerUnitStorageThroughput() const;
    void setPerUnitStorageThroughput(const qint32 &per_unit_storage_throughput);
    bool is_per_unit_storage_throughput_Set() const;
    bool is_per_unit_storage_throughput_Valid() const;

    QString getMountName() const;
    void setMountName(const QString &mount_name);
    bool is_mount_name_Set() const;
    bool is_mount_name_Valid() const;

    QString getDailyAutomaticBackupStartTime() const;
    void setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time);
    bool is_daily_automatic_backup_start_time_Set() const;
    bool is_daily_automatic_backup_start_time_Valid() const;

    qint32 getAutomaticBackupRetentionDays() const;
    void setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days);
    bool is_automatic_backup_retention_days_Set() const;
    bool is_automatic_backup_retention_days_Valid() const;

    bool getCopyTagsToBackups() const;
    void setCopyTagsToBackups(const bool &copy_tags_to_backups);
    bool is_copy_tags_to_backups_Set() const;
    bool is_copy_tags_to_backups_Valid() const;

    OAIDriveCacheType getDriveCacheType() const;
    void setDriveCacheType(const OAIDriveCacheType &drive_cache_type);
    bool is_drive_cache_type_Set() const;
    bool is_drive_cache_type_Valid() const;

    OAIDataCompressionType getDataCompressionType() const;
    void setDataCompressionType(const OAIDataCompressionType &data_compression_type);
    bool is_data_compression_type_Set() const;
    bool is_data_compression_type_Valid() const;

    OAILustreFileSystemConfiguration_LogConfiguration getLogConfiguration() const;
    void setLogConfiguration(const OAILustreFileSystemConfiguration_LogConfiguration &log_configuration);
    bool is_log_configuration_Set() const;
    bool is_log_configuration_Valid() const;

    OAILustreFileSystemConfiguration_RootSquashConfiguration getRootSquashConfiguration() const;
    void setRootSquashConfiguration(const OAILustreFileSystemConfiguration_RootSquashConfiguration &root_squash_configuration);
    bool is_root_squash_configuration_Set() const;
    bool is_root_squash_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_weekly_maintenance_start_time;
    bool m_weekly_maintenance_start_time_isSet;
    bool m_weekly_maintenance_start_time_isValid;

    OAIDataRepositoryConfiguration m_data_repository_configuration;
    bool m_data_repository_configuration_isSet;
    bool m_data_repository_configuration_isValid;

    OAILustreDeploymentType m_deployment_type;
    bool m_deployment_type_isSet;
    bool m_deployment_type_isValid;

    qint32 m_per_unit_storage_throughput;
    bool m_per_unit_storage_throughput_isSet;
    bool m_per_unit_storage_throughput_isValid;

    QString m_mount_name;
    bool m_mount_name_isSet;
    bool m_mount_name_isValid;

    QString m_daily_automatic_backup_start_time;
    bool m_daily_automatic_backup_start_time_isSet;
    bool m_daily_automatic_backup_start_time_isValid;

    qint32 m_automatic_backup_retention_days;
    bool m_automatic_backup_retention_days_isSet;
    bool m_automatic_backup_retention_days_isValid;

    bool m_copy_tags_to_backups;
    bool m_copy_tags_to_backups_isSet;
    bool m_copy_tags_to_backups_isValid;

    OAIDriveCacheType m_drive_cache_type;
    bool m_drive_cache_type_isSet;
    bool m_drive_cache_type_isValid;

    OAIDataCompressionType m_data_compression_type;
    bool m_data_compression_type_isSet;
    bool m_data_compression_type_isValid;

    OAILustreFileSystemConfiguration_LogConfiguration m_log_configuration;
    bool m_log_configuration_isSet;
    bool m_log_configuration_isValid;

    OAILustreFileSystemConfiguration_RootSquashConfiguration m_root_squash_configuration;
    bool m_root_squash_configuration_isSet;
    bool m_root_squash_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILustreFileSystemConfiguration)

#endif // OAILustreFileSystemConfiguration_H
