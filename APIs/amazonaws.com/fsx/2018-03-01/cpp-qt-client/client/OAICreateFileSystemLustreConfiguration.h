/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFileSystemLustreConfiguration.h
 *
 * &lt;p&gt;The Lustre configuration for the file system being created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The following parameters are not supported for file systems with a data repository association created with .&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AutoImportPolicy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExportPath&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ImportedChunkSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ImportPath&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
 */

#ifndef OAICreateFileSystemLustreConfiguration_H
#define OAICreateFileSystemLustreConfiguration_H

#include <QJsonObject>

#include "OAIAutoImportPolicyType.h"
#include "OAICreateFileSystemLustreConfiguration_LogConfiguration.h"
#include "OAICreateFileSystemLustreConfiguration_RootSquashConfiguration.h"
#include "OAIDataCompressionType.h"
#include "OAIDriveCacheType.h"
#include "OAILustreDeploymentType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateFileSystemLustreConfiguration_LogConfiguration;
class OAICreateFileSystemLustreConfiguration_RootSquashConfiguration;

class OAICreateFileSystemLustreConfiguration : public OAIObject {
public:
    OAICreateFileSystemLustreConfiguration();
    OAICreateFileSystemLustreConfiguration(QString json);
    ~OAICreateFileSystemLustreConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWeeklyMaintenanceStartTime() const;
    void setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time);
    bool is_weekly_maintenance_start_time_Set() const;
    bool is_weekly_maintenance_start_time_Valid() const;

    QString getImportPath() const;
    void setImportPath(const QString &import_path);
    bool is_import_path_Set() const;
    bool is_import_path_Valid() const;

    QString getExportPath() const;
    void setExportPath(const QString &export_path);
    bool is_export_path_Set() const;
    bool is_export_path_Valid() const;

    qint32 getImportedFileChunkSize() const;
    void setImportedFileChunkSize(const qint32 &imported_file_chunk_size);
    bool is_imported_file_chunk_size_Set() const;
    bool is_imported_file_chunk_size_Valid() const;

    OAILustreDeploymentType getDeploymentType() const;
    void setDeploymentType(const OAILustreDeploymentType &deployment_type);
    bool is_deployment_type_Set() const;
    bool is_deployment_type_Valid() const;

    OAIAutoImportPolicyType getAutoImportPolicy() const;
    void setAutoImportPolicy(const OAIAutoImportPolicyType &auto_import_policy);
    bool is_auto_import_policy_Set() const;
    bool is_auto_import_policy_Valid() const;

    qint32 getPerUnitStorageThroughput() const;
    void setPerUnitStorageThroughput(const qint32 &per_unit_storage_throughput);
    bool is_per_unit_storage_throughput_Set() const;
    bool is_per_unit_storage_throughput_Valid() const;

    QString getDailyAutomaticBackupStartTime() const;
    void setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time);
    bool is_daily_automatic_backup_start_time_Set() const;
    bool is_daily_automatic_backup_start_time_Valid() const;

    qint32 getAutomaticBackupRetentionDays() const;
    void setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days);
    bool is_automatic_backup_retention_days_Set() const;
    bool is_automatic_backup_retention_days_Valid() const;

    bool getCopyTagsToBackups() const;
    void setCopyTagsToBackups(const bool &copy_tags_to_backups);
    bool is_copy_tags_to_backups_Set() const;
    bool is_copy_tags_to_backups_Valid() const;

    OAIDriveCacheType getDriveCacheType() const;
    void setDriveCacheType(const OAIDriveCacheType &drive_cache_type);
    bool is_drive_cache_type_Set() const;
    bool is_drive_cache_type_Valid() const;

    OAIDataCompressionType getDataCompressionType() const;
    void setDataCompressionType(const OAIDataCompressionType &data_compression_type);
    bool is_data_compression_type_Set() const;
    bool is_data_compression_type_Valid() const;

    OAICreateFileSystemLustreConfiguration_LogConfiguration getLogConfiguration() const;
    void setLogConfiguration(const OAICreateFileSystemLustreConfiguration_LogConfiguration &log_configuration);
    bool is_log_configuration_Set() const;
    bool is_log_configuration_Valid() const;

    OAICreateFileSystemLustreConfiguration_RootSquashConfiguration getRootSquashConfiguration() const;
    void setRootSquashConfiguration(const OAICreateFileSystemLustreConfiguration_RootSquashConfiguration &root_squash_configuration);
    bool is_root_squash_configuration_Set() const;
    bool is_root_squash_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_weekly_maintenance_start_time;
    bool m_weekly_maintenance_start_time_isSet;
    bool m_weekly_maintenance_start_time_isValid;

    QString m_import_path;
    bool m_import_path_isSet;
    bool m_import_path_isValid;

    QString m_export_path;
    bool m_export_path_isSet;
    bool m_export_path_isValid;

    qint32 m_imported_file_chunk_size;
    bool m_imported_file_chunk_size_isSet;
    bool m_imported_file_chunk_size_isValid;

    OAILustreDeploymentType m_deployment_type;
    bool m_deployment_type_isSet;
    bool m_deployment_type_isValid;

    OAIAutoImportPolicyType m_auto_import_policy;
    bool m_auto_import_policy_isSet;
    bool m_auto_import_policy_isValid;

    qint32 m_per_unit_storage_throughput;
    bool m_per_unit_storage_throughput_isSet;
    bool m_per_unit_storage_throughput_isValid;

    QString m_daily_automatic_backup_start_time;
    bool m_daily_automatic_backup_start_time_isSet;
    bool m_daily_automatic_backup_start_time_isValid;

    qint32 m_automatic_backup_retention_days;
    bool m_automatic_backup_retention_days_isSet;
    bool m_automatic_backup_retention_days_isValid;

    bool m_copy_tags_to_backups;
    bool m_copy_tags_to_backups_isSet;
    bool m_copy_tags_to_backups_isValid;

    OAIDriveCacheType m_drive_cache_type;
    bool m_drive_cache_type_isSet;
    bool m_drive_cache_type_isValid;

    OAIDataCompressionType m_data_compression_type;
    bool m_data_compression_type_isSet;
    bool m_data_compression_type_isValid;

    OAICreateFileSystemLustreConfiguration_LogConfiguration m_log_configuration;
    bool m_log_configuration_isSet;
    bool m_log_configuration_isValid;

    OAICreateFileSystemLustreConfiguration_RootSquashConfiguration m_root_squash_configuration;
    bool m_root_squash_configuration_isSet;
    bool m_root_squash_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFileSystemLustreConfiguration)

#endif // OAICreateFileSystemLustreConfiguration_H
