/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackupResponse_Backup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackupResponse_Backup::OAICreateBackupResponse_Backup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackupResponse_Backup::OAICreateBackupResponse_Backup() {
    this->initializeModel();
}

OAICreateBackupResponse_Backup::~OAICreateBackupResponse_Backup() {}

void OAICreateBackupResponse_Backup::initializeModel() {

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_progress_percent_isSet = false;
    m_progress_percent_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_file_system_isSet = false;
    m_file_system_isValid = false;

    m_directory_information_isSet = false;
    m_directory_information_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_source_backup_id_isSet = false;
    m_source_backup_id_isValid = false;

    m_source_backup_region_isSet = false;
    m_source_backup_region_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAICreateBackupResponse_Backup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackupResponse_Backup::fromJsonObject(QJsonObject json) {

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("BackupId")]);
    m_backup_id_isSet = !json[QString("BackupId")].isNull() && m_backup_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_progress_percent, json[QString("ProgressPercent")]);
    m_progress_percent_isSet = !json[QString("ProgressPercent")].isNull() && m_progress_percent_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_file_system_isValid = ::OpenAPI::fromJsonValue(m_file_system, json[QString("FileSystem")]);
    m_file_system_isSet = !json[QString("FileSystem")].isNull() && m_file_system_isValid;

    m_directory_information_isValid = ::OpenAPI::fromJsonValue(m_directory_information, json[QString("DirectoryInformation")]);
    m_directory_information_isSet = !json[QString("DirectoryInformation")].isNull() && m_directory_information_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_source_backup_id_isValid = ::OpenAPI::fromJsonValue(m_source_backup_id, json[QString("SourceBackupId")]);
    m_source_backup_id_isSet = !json[QString("SourceBackupId")].isNull() && m_source_backup_id_isValid;

    m_source_backup_region_isValid = ::OpenAPI::fromJsonValue(m_source_backup_region, json[QString("SourceBackupRegion")]);
    m_source_backup_region_isSet = !json[QString("SourceBackupRegion")].isNull() && m_source_backup_region_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("Volume")]);
    m_volume_isSet = !json[QString("Volume")].isNull() && m_volume_isValid;
}

QString OAICreateBackupResponse_Backup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackupResponse_Backup::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_id_isSet) {
        obj.insert(QString("BackupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_progress_percent_isSet) {
        obj.insert(QString("ProgressPercent"), ::OpenAPI::toJsonValue(m_progress_percent));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_file_system.isSet()) {
        obj.insert(QString("FileSystem"), ::OpenAPI::toJsonValue(m_file_system));
    }
    if (m_directory_information.isSet()) {
        obj.insert(QString("DirectoryInformation"), ::OpenAPI::toJsonValue(m_directory_information));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_source_backup_id_isSet) {
        obj.insert(QString("SourceBackupId"), ::OpenAPI::toJsonValue(m_source_backup_id));
    }
    if (m_source_backup_region_isSet) {
        obj.insert(QString("SourceBackupRegion"), ::OpenAPI::toJsonValue(m_source_backup_region));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_volume.isSet()) {
        obj.insert(QString("Volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

QString OAICreateBackupResponse_Backup::getBackupId() const {
    return m_backup_id;
}
void OAICreateBackupResponse_Backup::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAICreateBackupResponse_Backup::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

OAIBackupLifecycle OAICreateBackupResponse_Backup::getLifecycle() const {
    return m_lifecycle;
}
void OAICreateBackupResponse_Backup::setLifecycle(const OAIBackupLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAICreateBackupResponse_Backup::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIBackup_FailureDetails OAICreateBackupResponse_Backup::getFailureDetails() const {
    return m_failure_details;
}
void OAICreateBackupResponse_Backup::setFailureDetails(const OAIBackup_FailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAICreateBackupResponse_Backup::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

OAIBackupType OAICreateBackupResponse_Backup::getType() const {
    return m_type;
}
void OAICreateBackupResponse_Backup::setType(const OAIBackupType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateBackupResponse_Backup::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAICreateBackupResponse_Backup::getProgressPercent() const {
    return m_progress_percent;
}
void OAICreateBackupResponse_Backup::setProgressPercent(const qint32 &progress_percent) {
    m_progress_percent = progress_percent;
    m_progress_percent_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_progress_percent_Set() const{
    return m_progress_percent_isSet;
}

bool OAICreateBackupResponse_Backup::is_progress_percent_Valid() const{
    return m_progress_percent_isValid;
}

QDateTime OAICreateBackupResponse_Backup::getCreationTime() const {
    return m_creation_time;
}
void OAICreateBackupResponse_Backup::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateBackupResponse_Backup::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAICreateBackupResponse_Backup::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateBackupResponse_Backup::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateBackupResponse_Backup::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateBackupResponse_Backup::getResourceArn() const {
    return m_resource_arn;
}
void OAICreateBackupResponse_Backup::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAICreateBackupResponse_Backup::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAICreateBackupResponse_Backup::getTags() const {
    return m_tags;
}
void OAICreateBackupResponse_Backup::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateBackupResponse_Backup::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIBackup_FileSystem OAICreateBackupResponse_Backup::getFileSystem() const {
    return m_file_system;
}
void OAICreateBackupResponse_Backup::setFileSystem(const OAIBackup_FileSystem &file_system) {
    m_file_system = file_system;
    m_file_system_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_file_system_Set() const{
    return m_file_system_isSet;
}

bool OAICreateBackupResponse_Backup::is_file_system_Valid() const{
    return m_file_system_isValid;
}

OAIBackup_DirectoryInformation OAICreateBackupResponse_Backup::getDirectoryInformation() const {
    return m_directory_information;
}
void OAICreateBackupResponse_Backup::setDirectoryInformation(const OAIBackup_DirectoryInformation &directory_information) {
    m_directory_information = directory_information;
    m_directory_information_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_directory_information_Set() const{
    return m_directory_information_isSet;
}

bool OAICreateBackupResponse_Backup::is_directory_information_Valid() const{
    return m_directory_information_isValid;
}

QString OAICreateBackupResponse_Backup::getOwnerId() const {
    return m_owner_id;
}
void OAICreateBackupResponse_Backup::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAICreateBackupResponse_Backup::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAICreateBackupResponse_Backup::getSourceBackupId() const {
    return m_source_backup_id;
}
void OAICreateBackupResponse_Backup::setSourceBackupId(const QString &source_backup_id) {
    m_source_backup_id = source_backup_id;
    m_source_backup_id_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_source_backup_id_Set() const{
    return m_source_backup_id_isSet;
}

bool OAICreateBackupResponse_Backup::is_source_backup_id_Valid() const{
    return m_source_backup_id_isValid;
}

QString OAICreateBackupResponse_Backup::getSourceBackupRegion() const {
    return m_source_backup_region;
}
void OAICreateBackupResponse_Backup::setSourceBackupRegion(const QString &source_backup_region) {
    m_source_backup_region = source_backup_region;
    m_source_backup_region_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_source_backup_region_Set() const{
    return m_source_backup_region_isSet;
}

bool OAICreateBackupResponse_Backup::is_source_backup_region_Valid() const{
    return m_source_backup_region_isValid;
}

OAIResourceType OAICreateBackupResponse_Backup::getResourceType() const {
    return m_resource_type;
}
void OAICreateBackupResponse_Backup::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICreateBackupResponse_Backup::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIVolume OAICreateBackupResponse_Backup::getVolume() const {
    return m_volume;
}
void OAICreateBackupResponse_Backup::setVolume(const OAIVolume &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAICreateBackupResponse_Backup::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAICreateBackupResponse_Backup::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAICreateBackupResponse_Backup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackupResponse_Backup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_id_isValid && m_lifecycle_isValid && m_type_isValid && m_creation_time_isValid && m_file_system_isValid && true;
}

} // namespace OpenAPI
