/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystemResponse_FileSystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystemResponse_FileSystem::OAIUpdateFileSystemResponse_FileSystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystemResponse_FileSystem::OAIUpdateFileSystemResponse_FileSystem() {
    this->initializeModel();
}

OAIUpdateFileSystemResponse_FileSystem::~OAIUpdateFileSystemResponse_FileSystem() {}

void OAIUpdateFileSystemResponse_FileSystem::initializeModel() {

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_file_system_type_isSet = false;
    m_file_system_type_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_network_interface_ids_isSet = false;
    m_network_interface_ids_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_windows_configuration_isSet = false;
    m_windows_configuration_isValid = false;

    m_lustre_configuration_isSet = false;
    m_lustre_configuration_isValid = false;

    m_administrative_actions_isSet = false;
    m_administrative_actions_isValid = false;

    m_ontap_configuration_isSet = false;
    m_ontap_configuration_isValid = false;

    m_file_system_type_version_isSet = false;
    m_file_system_type_version_isValid = false;

    m_open_zfs_configuration_isSet = false;
    m_open_zfs_configuration_isValid = false;
}

void OAIUpdateFileSystemResponse_FileSystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystemResponse_FileSystem::fromJsonObject(QJsonObject json) {

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_file_system_type_isValid = ::OpenAPI::fromJsonValue(m_file_system_type, json[QString("FileSystemType")]);
    m_file_system_type_isSet = !json[QString("FileSystemType")].isNull() && m_file_system_type_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("StorageCapacity")]);
    m_storage_capacity_isSet = !json[QString("StorageCapacity")].isNull() && m_storage_capacity_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_network_interface_ids_isValid = ::OpenAPI::fromJsonValue(m_network_interface_ids, json[QString("NetworkInterfaceIds")]);
    m_network_interface_ids_isSet = !json[QString("NetworkInterfaceIds")].isNull() && m_network_interface_ids_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DNSName")]);
    m_dns_name_isSet = !json[QString("DNSName")].isNull() && m_dns_name_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_windows_configuration_isValid = ::OpenAPI::fromJsonValue(m_windows_configuration, json[QString("WindowsConfiguration")]);
    m_windows_configuration_isSet = !json[QString("WindowsConfiguration")].isNull() && m_windows_configuration_isValid;

    m_lustre_configuration_isValid = ::OpenAPI::fromJsonValue(m_lustre_configuration, json[QString("LustreConfiguration")]);
    m_lustre_configuration_isSet = !json[QString("LustreConfiguration")].isNull() && m_lustre_configuration_isValid;

    m_administrative_actions_isValid = ::OpenAPI::fromJsonValue(m_administrative_actions, json[QString("AdministrativeActions")]);
    m_administrative_actions_isSet = !json[QString("AdministrativeActions")].isNull() && m_administrative_actions_isValid;

    m_ontap_configuration_isValid = ::OpenAPI::fromJsonValue(m_ontap_configuration, json[QString("OntapConfiguration")]);
    m_ontap_configuration_isSet = !json[QString("OntapConfiguration")].isNull() && m_ontap_configuration_isValid;

    m_file_system_type_version_isValid = ::OpenAPI::fromJsonValue(m_file_system_type_version, json[QString("FileSystemTypeVersion")]);
    m_file_system_type_version_isSet = !json[QString("FileSystemTypeVersion")].isNull() && m_file_system_type_version_isValid;

    m_open_zfs_configuration_isValid = ::OpenAPI::fromJsonValue(m_open_zfs_configuration, json[QString("OpenZFSConfiguration")]);
    m_open_zfs_configuration_isSet = !json[QString("OpenZFSConfiguration")].isNull() && m_open_zfs_configuration_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystemResponse_FileSystem::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_file_system_type.isSet()) {
        obj.insert(QString("FileSystemType"), ::OpenAPI::toJsonValue(m_file_system_type));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("StorageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_storage_type.isSet()) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_network_interface_ids.isSet()) {
        obj.insert(QString("NetworkInterfaceIds"), ::OpenAPI::toJsonValue(m_network_interface_ids));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DNSName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_windows_configuration.isSet()) {
        obj.insert(QString("WindowsConfiguration"), ::OpenAPI::toJsonValue(m_windows_configuration));
    }
    if (m_lustre_configuration.isSet()) {
        obj.insert(QString("LustreConfiguration"), ::OpenAPI::toJsonValue(m_lustre_configuration));
    }
    if (m_administrative_actions.isSet()) {
        obj.insert(QString("AdministrativeActions"), ::OpenAPI::toJsonValue(m_administrative_actions));
    }
    if (m_ontap_configuration.isSet()) {
        obj.insert(QString("OntapConfiguration"), ::OpenAPI::toJsonValue(m_ontap_configuration));
    }
    if (m_file_system_type_version_isSet) {
        obj.insert(QString("FileSystemTypeVersion"), ::OpenAPI::toJsonValue(m_file_system_type_version));
    }
    if (m_open_zfs_configuration.isSet()) {
        obj.insert(QString("OpenZFSConfiguration"), ::OpenAPI::toJsonValue(m_open_zfs_configuration));
    }
    return obj;
}

QString OAIUpdateFileSystemResponse_FileSystem::getOwnerId() const {
    return m_owner_id;
}
void OAIUpdateFileSystemResponse_FileSystem::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QDateTime OAIUpdateFileSystemResponse_FileSystem::getCreationTime() const {
    return m_creation_time;
}
void OAIUpdateFileSystemResponse_FileSystem::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::getFileSystemId() const {
    return m_file_system_id;
}
void OAIUpdateFileSystemResponse_FileSystem::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIFileSystemType OAIUpdateFileSystemResponse_FileSystem::getFileSystemType() const {
    return m_file_system_type;
}
void OAIUpdateFileSystemResponse_FileSystem::setFileSystemType(const OAIFileSystemType &file_system_type) {
    m_file_system_type = file_system_type;
    m_file_system_type_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_file_system_type_Set() const{
    return m_file_system_type_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_file_system_type_Valid() const{
    return m_file_system_type_isValid;
}

OAIFileSystemLifecycle OAIUpdateFileSystemResponse_FileSystem::getLifecycle() const {
    return m_lifecycle;
}
void OAIUpdateFileSystemResponse_FileSystem::setLifecycle(const OAIFileSystemLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIFileSystemFailureDetails OAIUpdateFileSystemResponse_FileSystem::getFailureDetails() const {
    return m_failure_details;
}
void OAIUpdateFileSystemResponse_FileSystem::setFailureDetails(const OAIFileSystemFailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

qint32 OAIUpdateFileSystemResponse_FileSystem::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAIUpdateFileSystemResponse_FileSystem::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

OAIStorageType OAIUpdateFileSystemResponse_FileSystem::getStorageType() const {
    return m_storage_type;
}
void OAIUpdateFileSystemResponse_FileSystem::setStorageType(const OAIStorageType &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::getVpcId() const {
    return m_vpc_id;
}
void OAIUpdateFileSystemResponse_FileSystem::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QList OAIUpdateFileSystemResponse_FileSystem::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIUpdateFileSystemResponse_FileSystem::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAIUpdateFileSystemResponse_FileSystem::getNetworkInterfaceIds() const {
    return m_network_interface_ids;
}
void OAIUpdateFileSystemResponse_FileSystem::setNetworkInterfaceIds(const QList &network_interface_ids) {
    m_network_interface_ids = network_interface_ids;
    m_network_interface_ids_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_network_interface_ids_Set() const{
    return m_network_interface_ids_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_network_interface_ids_Valid() const{
    return m_network_interface_ids_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::getDnsName() const {
    return m_dns_name;
}
void OAIUpdateFileSystemResponse_FileSystem::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIUpdateFileSystemResponse_FileSystem::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::getResourceArn() const {
    return m_resource_arn;
}
void OAIUpdateFileSystemResponse_FileSystem::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAIUpdateFileSystemResponse_FileSystem::getTags() const {
    return m_tags;
}
void OAIUpdateFileSystemResponse_FileSystem::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIFileSystem_WindowsConfiguration OAIUpdateFileSystemResponse_FileSystem::getWindowsConfiguration() const {
    return m_windows_configuration;
}
void OAIUpdateFileSystemResponse_FileSystem::setWindowsConfiguration(const OAIFileSystem_WindowsConfiguration &windows_configuration) {
    m_windows_configuration = windows_configuration;
    m_windows_configuration_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_windows_configuration_Set() const{
    return m_windows_configuration_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_windows_configuration_Valid() const{
    return m_windows_configuration_isValid;
}

OAILustreFileSystemConfiguration OAIUpdateFileSystemResponse_FileSystem::getLustreConfiguration() const {
    return m_lustre_configuration;
}
void OAIUpdateFileSystemResponse_FileSystem::setLustreConfiguration(const OAILustreFileSystemConfiguration &lustre_configuration) {
    m_lustre_configuration = lustre_configuration;
    m_lustre_configuration_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_lustre_configuration_Set() const{
    return m_lustre_configuration_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_lustre_configuration_Valid() const{
    return m_lustre_configuration_isValid;
}

QList OAIUpdateFileSystemResponse_FileSystem::getAdministrativeActions() const {
    return m_administrative_actions;
}
void OAIUpdateFileSystemResponse_FileSystem::setAdministrativeActions(const QList &administrative_actions) {
    m_administrative_actions = administrative_actions;
    m_administrative_actions_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_administrative_actions_Set() const{
    return m_administrative_actions_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_administrative_actions_Valid() const{
    return m_administrative_actions_isValid;
}

OAIFileSystem_OntapConfiguration OAIUpdateFileSystemResponse_FileSystem::getOntapConfiguration() const {
    return m_ontap_configuration;
}
void OAIUpdateFileSystemResponse_FileSystem::setOntapConfiguration(const OAIFileSystem_OntapConfiguration &ontap_configuration) {
    m_ontap_configuration = ontap_configuration;
    m_ontap_configuration_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_ontap_configuration_Set() const{
    return m_ontap_configuration_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_ontap_configuration_Valid() const{
    return m_ontap_configuration_isValid;
}

QString OAIUpdateFileSystemResponse_FileSystem::getFileSystemTypeVersion() const {
    return m_file_system_type_version;
}
void OAIUpdateFileSystemResponse_FileSystem::setFileSystemTypeVersion(const QString &file_system_type_version) {
    m_file_system_type_version = file_system_type_version;
    m_file_system_type_version_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_file_system_type_version_Set() const{
    return m_file_system_type_version_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_file_system_type_version_Valid() const{
    return m_file_system_type_version_isValid;
}

OAIFileSystem_OpenZFSConfiguration OAIUpdateFileSystemResponse_FileSystem::getOpenZfsConfiguration() const {
    return m_open_zfs_configuration;
}
void OAIUpdateFileSystemResponse_FileSystem::setOpenZfsConfiguration(const OAIFileSystem_OpenZFSConfiguration &open_zfs_configuration) {
    m_open_zfs_configuration = open_zfs_configuration;
    m_open_zfs_configuration_isSet = true;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_open_zfs_configuration_Set() const{
    return m_open_zfs_configuration_isSet;
}

bool OAIUpdateFileSystemResponse_FileSystem::is_open_zfs_configuration_Valid() const{
    return m_open_zfs_configuration_isValid;
}

bool OAIUpdateFileSystemResponse_FileSystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lustre_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ontap_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_zfs_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystemResponse_FileSystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
