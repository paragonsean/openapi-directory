/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystemLustreConfiguration_LogConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystemLustreConfiguration_LogConfiguration::OAIUpdateFileSystemLustreConfiguration_LogConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystemLustreConfiguration_LogConfiguration::OAIUpdateFileSystemLustreConfiguration_LogConfiguration() {
    this->initializeModel();
}

OAIUpdateFileSystemLustreConfiguration_LogConfiguration::~OAIUpdateFileSystemLustreConfiguration_LogConfiguration() {}

void OAIUpdateFileSystemLustreConfiguration_LogConfiguration::initializeModel() {

    m_level_isSet = false;
    m_level_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;
}

void OAIUpdateFileSystemLustreConfiguration_LogConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystemLustreConfiguration_LogConfiguration::fromJsonObject(QJsonObject json) {

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("Level")]);
    m_level_isSet = !json[QString("Level")].isNull() && m_level_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;
}

QString OAIUpdateFileSystemLustreConfiguration_LogConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystemLustreConfiguration_LogConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_level.isSet()) {
        obj.insert(QString("Level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    return obj;
}

OAILustreAccessAuditLogLevel OAIUpdateFileSystemLustreConfiguration_LogConfiguration::getLevel() const {
    return m_level;
}
void OAIUpdateFileSystemLustreConfiguration_LogConfiguration::setLevel(const OAILustreAccessAuditLogLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIUpdateFileSystemLustreConfiguration_LogConfiguration::is_level_Set() const{
    return m_level_isSet;
}

bool OAIUpdateFileSystemLustreConfiguration_LogConfiguration::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIUpdateFileSystemLustreConfiguration_LogConfiguration::getDestination() const {
    return m_destination;
}
void OAIUpdateFileSystemLustreConfiguration_LogConfiguration::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIUpdateFileSystemLustreConfiguration_LogConfiguration::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIUpdateFileSystemLustreConfiguration_LogConfiguration::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIUpdateFileSystemLustreConfiguration_LogConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystemLustreConfiguration_LogConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_level_isValid && true;
}

} // namespace OpenAPI
