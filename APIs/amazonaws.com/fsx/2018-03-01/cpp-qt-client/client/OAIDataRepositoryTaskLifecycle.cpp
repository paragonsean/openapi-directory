/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataRepositoryTaskLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataRepositoryTaskLifecycle::OAIDataRepositoryTaskLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataRepositoryTaskLifecycle::OAIDataRepositoryTaskLifecycle() {
    this->initializeModel();
}

OAIDataRepositoryTaskLifecycle::~OAIDataRepositoryTaskLifecycle() {}

void OAIDataRepositoryTaskLifecycle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataRepositoryTaskLifecycle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataRepositoryTaskLifecycle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataRepositoryTaskLifecycle::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXECUTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataRepositoryTaskLifecycle::EXECUTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataRepositoryTaskLifecycle::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataRepositoryTaskLifecycle::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataRepositoryTaskLifecycle::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataRepositoryTaskLifecycle::CANCELING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataRepositoryTaskLifecycle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataRepositoryTaskLifecycle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataRepositoryTaskLifecycle::PENDING:
            val = "PENDING";
            break;
        case eOAIDataRepositoryTaskLifecycle::EXECUTING:
            val = "EXECUTING";
            break;
        case eOAIDataRepositoryTaskLifecycle::FAILED:
            val = "FAILED";
            break;
        case eOAIDataRepositoryTaskLifecycle::SUCCEEDED:
            val = "SUCCEEDED";
            break;
        case eOAIDataRepositoryTaskLifecycle::CANCELED:
            val = "CANCELED";
            break;
        case eOAIDataRepositoryTaskLifecycle::CANCELING:
            val = "CANCELING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataRepositoryTaskLifecycle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataRepositoryTaskLifecycle::eOAIDataRepositoryTaskLifecycle OAIDataRepositoryTaskLifecycle::getValue() const {
    return m_value;
}

void OAIDataRepositoryTaskLifecycle::setValue(const OAIDataRepositoryTaskLifecycle::eOAIDataRepositoryTaskLifecycle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataRepositoryTaskLifecycle::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataRepositoryTaskLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
