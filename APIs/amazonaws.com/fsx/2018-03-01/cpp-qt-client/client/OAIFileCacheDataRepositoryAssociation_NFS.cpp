/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileCacheDataRepositoryAssociation_NFS.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileCacheDataRepositoryAssociation_NFS::OAIFileCacheDataRepositoryAssociation_NFS(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileCacheDataRepositoryAssociation_NFS::OAIFileCacheDataRepositoryAssociation_NFS() {
    this->initializeModel();
}

OAIFileCacheDataRepositoryAssociation_NFS::~OAIFileCacheDataRepositoryAssociation_NFS() {}

void OAIFileCacheDataRepositoryAssociation_NFS::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_dns_ips_isSet = false;
    m_dns_ips_isValid = false;
}

void OAIFileCacheDataRepositoryAssociation_NFS::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileCacheDataRepositoryAssociation_NFS::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_dns_ips_isValid = ::OpenAPI::fromJsonValue(m_dns_ips, json[QString("DnsIps")]);
    m_dns_ips_isSet = !json[QString("DnsIps")].isNull() && m_dns_ips_isValid;
}

QString OAIFileCacheDataRepositoryAssociation_NFS::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileCacheDataRepositoryAssociation_NFS::asJsonObject() const {
    QJsonObject obj;
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_dns_ips.isSet()) {
        obj.insert(QString("DnsIps"), ::OpenAPI::toJsonValue(m_dns_ips));
    }
    return obj;
}

OAINfsVersion OAIFileCacheDataRepositoryAssociation_NFS::getVersion() const {
    return m_version;
}
void OAIFileCacheDataRepositoryAssociation_NFS::setVersion(const OAINfsVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFileCacheDataRepositoryAssociation_NFS::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFileCacheDataRepositoryAssociation_NFS::is_version_Valid() const{
    return m_version_isValid;
}

QList OAIFileCacheDataRepositoryAssociation_NFS::getDnsIps() const {
    return m_dns_ips;
}
void OAIFileCacheDataRepositoryAssociation_NFS::setDnsIps(const QList &dns_ips) {
    m_dns_ips = dns_ips;
    m_dns_ips_isSet = true;
}

bool OAIFileCacheDataRepositoryAssociation_NFS::is_dns_ips_Set() const{
    return m_dns_ips_isSet;
}

bool OAIFileCacheDataRepositoryAssociation_NFS::is_dns_ips_Valid() const{
    return m_dns_ips_isValid;
}

bool OAIFileCacheDataRepositoryAssociation_NFS::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_ips.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileCacheDataRepositoryAssociation_NFS::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_version_isValid && true;
}

} // namespace OpenAPI
