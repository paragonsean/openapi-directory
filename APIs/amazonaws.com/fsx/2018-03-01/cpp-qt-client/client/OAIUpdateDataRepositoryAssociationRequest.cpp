/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataRepositoryAssociationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataRepositoryAssociationRequest::OAIUpdateDataRepositoryAssociationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataRepositoryAssociationRequest::OAIUpdateDataRepositoryAssociationRequest() {
    this->initializeModel();
}

OAIUpdateDataRepositoryAssociationRequest::~OAIUpdateDataRepositoryAssociationRequest() {}

void OAIUpdateDataRepositoryAssociationRequest::initializeModel() {

    m_association_id_isSet = false;
    m_association_id_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_imported_file_chunk_size_isSet = false;
    m_imported_file_chunk_size_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;
}

void OAIUpdateDataRepositoryAssociationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataRepositoryAssociationRequest::fromJsonObject(QJsonObject json) {

    m_association_id_isValid = ::OpenAPI::fromJsonValue(m_association_id, json[QString("AssociationId")]);
    m_association_id_isSet = !json[QString("AssociationId")].isNull() && m_association_id_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_imported_file_chunk_size_isValid = ::OpenAPI::fromJsonValue(m_imported_file_chunk_size, json[QString("ImportedFileChunkSize")]);
    m_imported_file_chunk_size_isSet = !json[QString("ImportedFileChunkSize")].isNull() && m_imported_file_chunk_size_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;
}

QString OAIUpdateDataRepositoryAssociationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataRepositoryAssociationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_association_id_isSet) {
        obj.insert(QString("AssociationId"), ::OpenAPI::toJsonValue(m_association_id));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_imported_file_chunk_size_isSet) {
        obj.insert(QString("ImportedFileChunkSize"), ::OpenAPI::toJsonValue(m_imported_file_chunk_size));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    return obj;
}

QString OAIUpdateDataRepositoryAssociationRequest::getAssociationId() const {
    return m_association_id;
}
void OAIUpdateDataRepositoryAssociationRequest::setAssociationId(const QString &association_id) {
    m_association_id = association_id;
    m_association_id_isSet = true;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_association_id_Set() const{
    return m_association_id_isSet;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_association_id_Valid() const{
    return m_association_id_isValid;
}

QString OAIUpdateDataRepositoryAssociationRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateDataRepositoryAssociationRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

qint32 OAIUpdateDataRepositoryAssociationRequest::getImportedFileChunkSize() const {
    return m_imported_file_chunk_size;
}
void OAIUpdateDataRepositoryAssociationRequest::setImportedFileChunkSize(const qint32 &imported_file_chunk_size) {
    m_imported_file_chunk_size = imported_file_chunk_size;
    m_imported_file_chunk_size_isSet = true;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_imported_file_chunk_size_Set() const{
    return m_imported_file_chunk_size_isSet;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_imported_file_chunk_size_Valid() const{
    return m_imported_file_chunk_size_isValid;
}

OAICreateDataRepositoryAssociationRequest_S3 OAIUpdateDataRepositoryAssociationRequest::getS3() const {
    return m_s3;
}
void OAIUpdateDataRepositoryAssociationRequest::setS3(const OAICreateDataRepositoryAssociationRequest_S3 &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAIUpdateDataRepositoryAssociationRequest::is_s3_Valid() const{
    return m_s3_isValid;
}

bool OAIUpdateDataRepositoryAssociationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_file_chunk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataRepositoryAssociationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_association_id_isValid && true;
}

} // namespace OpenAPI
