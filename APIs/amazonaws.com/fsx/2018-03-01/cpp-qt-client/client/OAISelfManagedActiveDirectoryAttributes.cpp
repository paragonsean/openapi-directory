/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelfManagedActiveDirectoryAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelfManagedActiveDirectoryAttributes::OAISelfManagedActiveDirectoryAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelfManagedActiveDirectoryAttributes::OAISelfManagedActiveDirectoryAttributes() {
    this->initializeModel();
}

OAISelfManagedActiveDirectoryAttributes::~OAISelfManagedActiveDirectoryAttributes() {}

void OAISelfManagedActiveDirectoryAttributes::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_organizational_unit_distinguished_name_isSet = false;
    m_organizational_unit_distinguished_name_isValid = false;

    m_file_system_administrators_group_isSet = false;
    m_file_system_administrators_group_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_dns_ips_isSet = false;
    m_dns_ips_isValid = false;
}

void OAISelfManagedActiveDirectoryAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelfManagedActiveDirectoryAttributes::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_organizational_unit_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_distinguished_name, json[QString("OrganizationalUnitDistinguishedName")]);
    m_organizational_unit_distinguished_name_isSet = !json[QString("OrganizationalUnitDistinguishedName")].isNull() && m_organizational_unit_distinguished_name_isValid;

    m_file_system_administrators_group_isValid = ::OpenAPI::fromJsonValue(m_file_system_administrators_group, json[QString("FileSystemAdministratorsGroup")]);
    m_file_system_administrators_group_isSet = !json[QString("FileSystemAdministratorsGroup")].isNull() && m_file_system_administrators_group_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_dns_ips_isValid = ::OpenAPI::fromJsonValue(m_dns_ips, json[QString("DnsIps")]);
    m_dns_ips_isSet = !json[QString("DnsIps")].isNull() && m_dns_ips_isValid;
}

QString OAISelfManagedActiveDirectoryAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelfManagedActiveDirectoryAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_organizational_unit_distinguished_name_isSet) {
        obj.insert(QString("OrganizationalUnitDistinguishedName"), ::OpenAPI::toJsonValue(m_organizational_unit_distinguished_name));
    }
    if (m_file_system_administrators_group_isSet) {
        obj.insert(QString("FileSystemAdministratorsGroup"), ::OpenAPI::toJsonValue(m_file_system_administrators_group));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_dns_ips.isSet()) {
        obj.insert(QString("DnsIps"), ::OpenAPI::toJsonValue(m_dns_ips));
    }
    return obj;
}

QString OAISelfManagedActiveDirectoryAttributes::getDomainName() const {
    return m_domain_name;
}
void OAISelfManagedActiveDirectoryAttributes::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAISelfManagedActiveDirectoryAttributes::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAISelfManagedActiveDirectoryAttributes::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAISelfManagedActiveDirectoryAttributes::getOrganizationalUnitDistinguishedName() const {
    return m_organizational_unit_distinguished_name;
}
void OAISelfManagedActiveDirectoryAttributes::setOrganizationalUnitDistinguishedName(const QString &organizational_unit_distinguished_name) {
    m_organizational_unit_distinguished_name = organizational_unit_distinguished_name;
    m_organizational_unit_distinguished_name_isSet = true;
}

bool OAISelfManagedActiveDirectoryAttributes::is_organizational_unit_distinguished_name_Set() const{
    return m_organizational_unit_distinguished_name_isSet;
}

bool OAISelfManagedActiveDirectoryAttributes::is_organizational_unit_distinguished_name_Valid() const{
    return m_organizational_unit_distinguished_name_isValid;
}

QString OAISelfManagedActiveDirectoryAttributes::getFileSystemAdministratorsGroup() const {
    return m_file_system_administrators_group;
}
void OAISelfManagedActiveDirectoryAttributes::setFileSystemAdministratorsGroup(const QString &file_system_administrators_group) {
    m_file_system_administrators_group = file_system_administrators_group;
    m_file_system_administrators_group_isSet = true;
}

bool OAISelfManagedActiveDirectoryAttributes::is_file_system_administrators_group_Set() const{
    return m_file_system_administrators_group_isSet;
}

bool OAISelfManagedActiveDirectoryAttributes::is_file_system_administrators_group_Valid() const{
    return m_file_system_administrators_group_isValid;
}

QString OAISelfManagedActiveDirectoryAttributes::getUserName() const {
    return m_user_name;
}
void OAISelfManagedActiveDirectoryAttributes::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAISelfManagedActiveDirectoryAttributes::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAISelfManagedActiveDirectoryAttributes::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QList OAISelfManagedActiveDirectoryAttributes::getDnsIps() const {
    return m_dns_ips;
}
void OAISelfManagedActiveDirectoryAttributes::setDnsIps(const QList &dns_ips) {
    m_dns_ips = dns_ips;
    m_dns_ips_isSet = true;
}

bool OAISelfManagedActiveDirectoryAttributes::is_dns_ips_Set() const{
    return m_dns_ips_isSet;
}

bool OAISelfManagedActiveDirectoryAttributes::is_dns_ips_Valid() const{
    return m_dns_ips_isValid;
}

bool OAISelfManagedActiveDirectoryAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_administrators_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_ips.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelfManagedActiveDirectoryAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
