/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSnaplockConfiguration_RetentionPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSnaplockConfiguration_RetentionPeriod::OAICreateSnaplockConfiguration_RetentionPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSnaplockConfiguration_RetentionPeriod::OAICreateSnaplockConfiguration_RetentionPeriod() {
    this->initializeModel();
}

OAICreateSnaplockConfiguration_RetentionPeriod::~OAICreateSnaplockConfiguration_RetentionPeriod() {}

void OAICreateSnaplockConfiguration_RetentionPeriod::initializeModel() {

    m_default_retention_isSet = false;
    m_default_retention_isValid = false;

    m_minimum_retention_isSet = false;
    m_minimum_retention_isValid = false;

    m_maximum_retention_isSet = false;
    m_maximum_retention_isValid = false;
}

void OAICreateSnaplockConfiguration_RetentionPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSnaplockConfiguration_RetentionPeriod::fromJsonObject(QJsonObject json) {

    m_default_retention_isValid = ::OpenAPI::fromJsonValue(m_default_retention, json[QString("DefaultRetention")]);
    m_default_retention_isSet = !json[QString("DefaultRetention")].isNull() && m_default_retention_isValid;

    m_minimum_retention_isValid = ::OpenAPI::fromJsonValue(m_minimum_retention, json[QString("MinimumRetention")]);
    m_minimum_retention_isSet = !json[QString("MinimumRetention")].isNull() && m_minimum_retention_isValid;

    m_maximum_retention_isValid = ::OpenAPI::fromJsonValue(m_maximum_retention, json[QString("MaximumRetention")]);
    m_maximum_retention_isSet = !json[QString("MaximumRetention")].isNull() && m_maximum_retention_isValid;
}

QString OAICreateSnaplockConfiguration_RetentionPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSnaplockConfiguration_RetentionPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_default_retention.isSet()) {
        obj.insert(QString("DefaultRetention"), ::OpenAPI::toJsonValue(m_default_retention));
    }
    if (m_minimum_retention.isSet()) {
        obj.insert(QString("MinimumRetention"), ::OpenAPI::toJsonValue(m_minimum_retention));
    }
    if (m_maximum_retention.isSet()) {
        obj.insert(QString("MaximumRetention"), ::OpenAPI::toJsonValue(m_maximum_retention));
    }
    return obj;
}

OAISnaplockRetentionPeriod_DefaultRetention OAICreateSnaplockConfiguration_RetentionPeriod::getDefaultRetention() const {
    return m_default_retention;
}
void OAICreateSnaplockConfiguration_RetentionPeriod::setDefaultRetention(const OAISnaplockRetentionPeriod_DefaultRetention &default_retention) {
    m_default_retention = default_retention;
    m_default_retention_isSet = true;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::is_default_retention_Set() const{
    return m_default_retention_isSet;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::is_default_retention_Valid() const{
    return m_default_retention_isValid;
}

OAISnaplockRetentionPeriod_MinimumRetention OAICreateSnaplockConfiguration_RetentionPeriod::getMinimumRetention() const {
    return m_minimum_retention;
}
void OAICreateSnaplockConfiguration_RetentionPeriod::setMinimumRetention(const OAISnaplockRetentionPeriod_MinimumRetention &minimum_retention) {
    m_minimum_retention = minimum_retention;
    m_minimum_retention_isSet = true;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::is_minimum_retention_Set() const{
    return m_minimum_retention_isSet;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::is_minimum_retention_Valid() const{
    return m_minimum_retention_isValid;
}

OAISnaplockRetentionPeriod_MaximumRetention OAICreateSnaplockConfiguration_RetentionPeriod::getMaximumRetention() const {
    return m_maximum_retention;
}
void OAICreateSnaplockConfiguration_RetentionPeriod::setMaximumRetention(const OAISnaplockRetentionPeriod_MaximumRetention &maximum_retention) {
    m_maximum_retention = maximum_retention;
    m_maximum_retention_isSet = true;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::is_maximum_retention_Set() const{
    return m_maximum_retention_isSet;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::is_maximum_retention_Valid() const{
    return m_maximum_retention_isValid;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSnaplockConfiguration_RetentionPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_retention_isValid && m_minimum_retention_isValid && m_maximum_retention_isValid && true;
}

} // namespace OpenAPI
