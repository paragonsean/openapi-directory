/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataRepositoryTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataRepositoryTaskResponse::OAICreateDataRepositoryTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataRepositoryTaskResponse::OAICreateDataRepositoryTaskResponse() {
    this->initializeModel();
}

OAICreateDataRepositoryTaskResponse::~OAICreateDataRepositoryTaskResponse() {}

void OAICreateDataRepositoryTaskResponse::initializeModel() {

    m_data_repository_task_isSet = false;
    m_data_repository_task_isValid = false;
}

void OAICreateDataRepositoryTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataRepositoryTaskResponse::fromJsonObject(QJsonObject json) {

    m_data_repository_task_isValid = ::OpenAPI::fromJsonValue(m_data_repository_task, json[QString("DataRepositoryTask")]);
    m_data_repository_task_isSet = !json[QString("DataRepositoryTask")].isNull() && m_data_repository_task_isValid;
}

QString OAICreateDataRepositoryTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataRepositoryTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_repository_task.isSet()) {
        obj.insert(QString("DataRepositoryTask"), ::OpenAPI::toJsonValue(m_data_repository_task));
    }
    return obj;
}

OAICreateDataRepositoryTaskResponse_DataRepositoryTask OAICreateDataRepositoryTaskResponse::getDataRepositoryTask() const {
    return m_data_repository_task;
}
void OAICreateDataRepositoryTaskResponse::setDataRepositoryTask(const OAICreateDataRepositoryTaskResponse_DataRepositoryTask &data_repository_task) {
    m_data_repository_task = data_repository_task;
    m_data_repository_task_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse::is_data_repository_task_Set() const{
    return m_data_repository_task_isSet;
}

bool OAICreateDataRepositoryTaskResponse::is_data_repository_task_Valid() const{
    return m_data_repository_task_isValid;
}

bool OAICreateDataRepositoryTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_repository_task.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataRepositoryTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
