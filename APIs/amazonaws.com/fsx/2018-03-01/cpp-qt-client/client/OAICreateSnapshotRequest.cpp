/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSnapshotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSnapshotRequest::OAICreateSnapshotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSnapshotRequest::OAICreateSnapshotRequest() {
    this->initializeModel();
}

OAICreateSnapshotRequest::~OAICreateSnapshotRequest() {}

void OAICreateSnapshotRequest::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSnapshotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSnapshotRequest::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("VolumeId")]);
    m_volume_id_isSet = !json[QString("VolumeId")].isNull() && m_volume_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateSnapshotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSnapshotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("VolumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSnapshotRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateSnapshotRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateSnapshotRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateSnapshotRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreateSnapshotRequest::getName() const {
    return m_name;
}
void OAICreateSnapshotRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSnapshotRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSnapshotRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSnapshotRequest::getVolumeId() const {
    return m_volume_id;
}
void OAICreateSnapshotRequest::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAICreateSnapshotRequest::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAICreateSnapshotRequest::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

QList<OAITag> OAICreateSnapshotRequest::getTags() const {
    return m_tags;
}
void OAICreateSnapshotRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSnapshotRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSnapshotRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSnapshotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSnapshotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_volume_id_isValid && true;
}

} // namespace OpenAPI
