/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyBackupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyBackupRequest::OAICopyBackupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyBackupRequest::OAICopyBackupRequest() {
    this->initializeModel();
}

OAICopyBackupRequest::~OAICopyBackupRequest() {}

void OAICopyBackupRequest::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_source_backup_id_isSet = false;
    m_source_backup_id_isValid = false;

    m_source_region_isSet = false;
    m_source_region_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_copy_tags_isSet = false;
    m_copy_tags_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICopyBackupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyBackupRequest::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_source_backup_id_isValid = ::OpenAPI::fromJsonValue(m_source_backup_id, json[QString("SourceBackupId")]);
    m_source_backup_id_isSet = !json[QString("SourceBackupId")].isNull() && m_source_backup_id_isValid;

    m_source_region_isValid = ::OpenAPI::fromJsonValue(m_source_region, json[QString("SourceRegion")]);
    m_source_region_isSet = !json[QString("SourceRegion")].isNull() && m_source_region_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_copy_tags_isValid = ::OpenAPI::fromJsonValue(m_copy_tags, json[QString("CopyTags")]);
    m_copy_tags_isSet = !json[QString("CopyTags")].isNull() && m_copy_tags_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICopyBackupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyBackupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_source_backup_id_isSet) {
        obj.insert(QString("SourceBackupId"), ::OpenAPI::toJsonValue(m_source_backup_id));
    }
    if (m_source_region_isSet) {
        obj.insert(QString("SourceRegion"), ::OpenAPI::toJsonValue(m_source_region));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_copy_tags_isSet) {
        obj.insert(QString("CopyTags"), ::OpenAPI::toJsonValue(m_copy_tags));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICopyBackupRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICopyBackupRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICopyBackupRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICopyBackupRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICopyBackupRequest::getSourceBackupId() const {
    return m_source_backup_id;
}
void OAICopyBackupRequest::setSourceBackupId(const QString &source_backup_id) {
    m_source_backup_id = source_backup_id;
    m_source_backup_id_isSet = true;
}

bool OAICopyBackupRequest::is_source_backup_id_Set() const{
    return m_source_backup_id_isSet;
}

bool OAICopyBackupRequest::is_source_backup_id_Valid() const{
    return m_source_backup_id_isValid;
}

QString OAICopyBackupRequest::getSourceRegion() const {
    return m_source_region;
}
void OAICopyBackupRequest::setSourceRegion(const QString &source_region) {
    m_source_region = source_region;
    m_source_region_isSet = true;
}

bool OAICopyBackupRequest::is_source_region_Set() const{
    return m_source_region_isSet;
}

bool OAICopyBackupRequest::is_source_region_Valid() const{
    return m_source_region_isValid;
}

QString OAICopyBackupRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICopyBackupRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICopyBackupRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICopyBackupRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAICopyBackupRequest::getCopyTags() const {
    return m_copy_tags;
}
void OAICopyBackupRequest::setCopyTags(const bool &copy_tags) {
    m_copy_tags = copy_tags;
    m_copy_tags_isSet = true;
}

bool OAICopyBackupRequest::is_copy_tags_Set() const{
    return m_copy_tags_isSet;
}

bool OAICopyBackupRequest::is_copy_tags_Valid() const{
    return m_copy_tags_isValid;
}

QList<OAITag> OAICopyBackupRequest::getTags() const {
    return m_tags;
}
void OAICopyBackupRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICopyBackupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICopyBackupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICopyBackupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyBackupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_backup_id_isValid && true;
}

} // namespace OpenAPI
