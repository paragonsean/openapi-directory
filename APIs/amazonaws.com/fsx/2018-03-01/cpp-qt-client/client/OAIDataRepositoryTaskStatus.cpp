/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataRepositoryTaskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataRepositoryTaskStatus::OAIDataRepositoryTaskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataRepositoryTaskStatus::OAIDataRepositoryTaskStatus() {
    this->initializeModel();
}

OAIDataRepositoryTaskStatus::~OAIDataRepositoryTaskStatus() {}

void OAIDataRepositoryTaskStatus::initializeModel() {

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_succeeded_count_isSet = false;
    m_succeeded_count_isValid = false;

    m_failed_count_isSet = false;
    m_failed_count_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_released_capacity_isSet = false;
    m_released_capacity_isValid = false;
}

void OAIDataRepositoryTaskStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataRepositoryTaskStatus::fromJsonObject(QJsonObject json) {

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;

    m_succeeded_count_isValid = ::OpenAPI::fromJsonValue(m_succeeded_count, json[QString("SucceededCount")]);
    m_succeeded_count_isSet = !json[QString("SucceededCount")].isNull() && m_succeeded_count_isValid;

    m_failed_count_isValid = ::OpenAPI::fromJsonValue(m_failed_count, json[QString("FailedCount")]);
    m_failed_count_isSet = !json[QString("FailedCount")].isNull() && m_failed_count_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_released_capacity_isValid = ::OpenAPI::fromJsonValue(m_released_capacity, json[QString("ReleasedCapacity")]);
    m_released_capacity_isSet = !json[QString("ReleasedCapacity")].isNull() && m_released_capacity_isValid;
}

QString OAIDataRepositoryTaskStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataRepositoryTaskStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_succeeded_count_isSet) {
        obj.insert(QString("SucceededCount"), ::OpenAPI::toJsonValue(m_succeeded_count));
    }
    if (m_failed_count_isSet) {
        obj.insert(QString("FailedCount"), ::OpenAPI::toJsonValue(m_failed_count));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_released_capacity_isSet) {
        obj.insert(QString("ReleasedCapacity"), ::OpenAPI::toJsonValue(m_released_capacity));
    }
    return obj;
}

qint32 OAIDataRepositoryTaskStatus::getTotalCount() const {
    return m_total_count;
}
void OAIDataRepositoryTaskStatus::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIDataRepositoryTaskStatus::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIDataRepositoryTaskStatus::is_total_count_Valid() const{
    return m_total_count_isValid;
}

qint32 OAIDataRepositoryTaskStatus::getSucceededCount() const {
    return m_succeeded_count;
}
void OAIDataRepositoryTaskStatus::setSucceededCount(const qint32 &succeeded_count) {
    m_succeeded_count = succeeded_count;
    m_succeeded_count_isSet = true;
}

bool OAIDataRepositoryTaskStatus::is_succeeded_count_Set() const{
    return m_succeeded_count_isSet;
}

bool OAIDataRepositoryTaskStatus::is_succeeded_count_Valid() const{
    return m_succeeded_count_isValid;
}

qint32 OAIDataRepositoryTaskStatus::getFailedCount() const {
    return m_failed_count;
}
void OAIDataRepositoryTaskStatus::setFailedCount(const qint32 &failed_count) {
    m_failed_count = failed_count;
    m_failed_count_isSet = true;
}

bool OAIDataRepositoryTaskStatus::is_failed_count_Set() const{
    return m_failed_count_isSet;
}

bool OAIDataRepositoryTaskStatus::is_failed_count_Valid() const{
    return m_failed_count_isValid;
}

QDateTime OAIDataRepositoryTaskStatus::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDataRepositoryTaskStatus::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDataRepositoryTaskStatus::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDataRepositoryTaskStatus::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

qint32 OAIDataRepositoryTaskStatus::getReleasedCapacity() const {
    return m_released_capacity;
}
void OAIDataRepositoryTaskStatus::setReleasedCapacity(const qint32 &released_capacity) {
    m_released_capacity = released_capacity;
    m_released_capacity_isSet = true;
}

bool OAIDataRepositoryTaskStatus::is_released_capacity_Set() const{
    return m_released_capacity_isSet;
}

bool OAIDataRepositoryTaskStatus::is_released_capacity_Valid() const{
    return m_released_capacity_isValid;
}

bool OAIDataRepositoryTaskStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataRepositoryTaskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
