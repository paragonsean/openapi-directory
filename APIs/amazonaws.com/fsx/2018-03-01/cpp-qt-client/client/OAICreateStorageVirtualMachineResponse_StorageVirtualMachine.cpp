/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStorageVirtualMachineResponse_StorageVirtualMachine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::OAICreateStorageVirtualMachineResponse_StorageVirtualMachine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::OAICreateStorageVirtualMachineResponse_StorageVirtualMachine() {
    this->initializeModel();
}

OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::~OAICreateStorageVirtualMachineResponse_StorageVirtualMachine() {}

void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::initializeModel() {

    m_active_directory_configuration_isSet = false;
    m_active_directory_configuration_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_storage_virtual_machine_id_isSet = false;
    m_storage_virtual_machine_id_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_lifecycle_transition_reason_isSet = false;
    m_lifecycle_transition_reason_isValid = false;

    m_root_volume_security_style_isSet = false;
    m_root_volume_security_style_isValid = false;
}

void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::fromJsonObject(QJsonObject json) {

    m_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_active_directory_configuration, json[QString("ActiveDirectoryConfiguration")]);
    m_active_directory_configuration_isSet = !json[QString("ActiveDirectoryConfiguration")].isNull() && m_active_directory_configuration_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_storage_virtual_machine_id_isValid = ::OpenAPI::fromJsonValue(m_storage_virtual_machine_id, json[QString("StorageVirtualMachineId")]);
    m_storage_virtual_machine_id_isSet = !json[QString("StorageVirtualMachineId")].isNull() && m_storage_virtual_machine_id_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("Subtype")]);
    m_subtype_isSet = !json[QString("Subtype")].isNull() && m_subtype_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("UUID")]);
    m_uuid_isSet = !json[QString("UUID")].isNull() && m_uuid_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_lifecycle_transition_reason_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_transition_reason, json[QString("LifecycleTransitionReason")]);
    m_lifecycle_transition_reason_isSet = !json[QString("LifecycleTransitionReason")].isNull() && m_lifecycle_transition_reason_isValid;

    m_root_volume_security_style_isValid = ::OpenAPI::fromJsonValue(m_root_volume_security_style, json[QString("RootVolumeSecurityStyle")]);
    m_root_volume_security_style_isSet = !json[QString("RootVolumeSecurityStyle")].isNull() && m_root_volume_security_style_isValid;
}

QString OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_configuration.isSet()) {
        obj.insert(QString("ActiveDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_active_directory_configuration));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_storage_virtual_machine_id_isSet) {
        obj.insert(QString("StorageVirtualMachineId"), ::OpenAPI::toJsonValue(m_storage_virtual_machine_id));
    }
    if (m_subtype.isSet()) {
        obj.insert(QString("Subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("UUID"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_lifecycle_transition_reason.isSet()) {
        obj.insert(QString("LifecycleTransitionReason"), ::OpenAPI::toJsonValue(m_lifecycle_transition_reason));
    }
    if (m_root_volume_security_style.isSet()) {
        obj.insert(QString("RootVolumeSecurityStyle"), ::OpenAPI::toJsonValue(m_root_volume_security_style));
    }
    return obj;
}

OAIStorageVirtualMachine_ActiveDirectoryConfiguration OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getActiveDirectoryConfiguration() const {
    return m_active_directory_configuration;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setActiveDirectoryConfiguration(const OAIStorageVirtualMachine_ActiveDirectoryConfiguration &active_directory_configuration) {
    m_active_directory_configuration = active_directory_configuration;
    m_active_directory_configuration_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_active_directory_configuration_Set() const{
    return m_active_directory_configuration_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_active_directory_configuration_Valid() const{
    return m_active_directory_configuration_isValid;
}

QDateTime OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getCreationTime() const {
    return m_creation_time;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIStorageVirtualMachine_Endpoints OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getEndpoints() const {
    return m_endpoints;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setEndpoints(const OAIStorageVirtualMachine_Endpoints &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIStorageVirtualMachineLifecycle OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getLifecycle() const {
    return m_lifecycle;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setLifecycle(const OAIStorageVirtualMachineLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getName() const {
    return m_name;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getResourceArn() const {
    return m_resource_arn;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getStorageVirtualMachineId() const {
    return m_storage_virtual_machine_id;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setStorageVirtualMachineId(const QString &storage_virtual_machine_id) {
    m_storage_virtual_machine_id = storage_virtual_machine_id;
    m_storage_virtual_machine_id_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_storage_virtual_machine_id_Set() const{
    return m_storage_virtual_machine_id_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_storage_virtual_machine_id_Valid() const{
    return m_storage_virtual_machine_id_isValid;
}

OAIStorageVirtualMachineSubtype OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getSubtype() const {
    return m_subtype;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setSubtype(const OAIStorageVirtualMachineSubtype &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getUuid() const {
    return m_uuid;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QList<OAITag> OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getTags() const {
    return m_tags;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIStorageVirtualMachine_LifecycleTransitionReason OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getLifecycleTransitionReason() const {
    return m_lifecycle_transition_reason;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setLifecycleTransitionReason(const OAIStorageVirtualMachine_LifecycleTransitionReason &lifecycle_transition_reason) {
    m_lifecycle_transition_reason = lifecycle_transition_reason;
    m_lifecycle_transition_reason_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_lifecycle_transition_reason_Set() const{
    return m_lifecycle_transition_reason_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_lifecycle_transition_reason_Valid() const{
    return m_lifecycle_transition_reason_isValid;
}

OAIStorageVirtualMachineRootVolumeSecurityStyle OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::getRootVolumeSecurityStyle() const {
    return m_root_volume_security_style;
}
void OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::setRootVolumeSecurityStyle(const OAIStorageVirtualMachineRootVolumeSecurityStyle &root_volume_security_style) {
    m_root_volume_security_style = root_volume_security_style;
    m_root_volume_security_style_isSet = true;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_root_volume_security_style_Set() const{
    return m_root_volume_security_style_isSet;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::is_root_volume_security_style_Valid() const{
    return m_root_volume_security_style_isValid;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_virtual_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_transition_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_volume_security_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStorageVirtualMachineResponse_StorageVirtualMachine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
