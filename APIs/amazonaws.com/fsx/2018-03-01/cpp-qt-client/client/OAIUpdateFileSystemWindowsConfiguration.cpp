/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystemWindowsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystemWindowsConfiguration::OAIUpdateFileSystemWindowsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystemWindowsConfiguration::OAIUpdateFileSystemWindowsConfiguration() {
    this->initializeModel();
}

OAIUpdateFileSystemWindowsConfiguration::~OAIUpdateFileSystemWindowsConfiguration() {}

void OAIUpdateFileSystemWindowsConfiguration::initializeModel() {

    m_weekly_maintenance_start_time_isSet = false;
    m_weekly_maintenance_start_time_isValid = false;

    m_daily_automatic_backup_start_time_isSet = false;
    m_daily_automatic_backup_start_time_isValid = false;

    m_automatic_backup_retention_days_isSet = false;
    m_automatic_backup_retention_days_isValid = false;

    m_throughput_capacity_isSet = false;
    m_throughput_capacity_isValid = false;

    m_self_managed_active_directory_configuration_isSet = false;
    m_self_managed_active_directory_configuration_isValid = false;

    m_audit_log_configuration_isSet = false;
    m_audit_log_configuration_isValid = false;
}

void OAIUpdateFileSystemWindowsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystemWindowsConfiguration::fromJsonObject(QJsonObject json) {

    m_weekly_maintenance_start_time_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_start_time, json[QString("WeeklyMaintenanceStartTime")]);
    m_weekly_maintenance_start_time_isSet = !json[QString("WeeklyMaintenanceStartTime")].isNull() && m_weekly_maintenance_start_time_isValid;

    m_daily_automatic_backup_start_time_isValid = ::OpenAPI::fromJsonValue(m_daily_automatic_backup_start_time, json[QString("DailyAutomaticBackupStartTime")]);
    m_daily_automatic_backup_start_time_isSet = !json[QString("DailyAutomaticBackupStartTime")].isNull() && m_daily_automatic_backup_start_time_isValid;

    m_automatic_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_automatic_backup_retention_days, json[QString("AutomaticBackupRetentionDays")]);
    m_automatic_backup_retention_days_isSet = !json[QString("AutomaticBackupRetentionDays")].isNull() && m_automatic_backup_retention_days_isValid;

    m_throughput_capacity_isValid = ::OpenAPI::fromJsonValue(m_throughput_capacity, json[QString("ThroughputCapacity")]);
    m_throughput_capacity_isSet = !json[QString("ThroughputCapacity")].isNull() && m_throughput_capacity_isValid;

    m_self_managed_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_self_managed_active_directory_configuration, json[QString("SelfManagedActiveDirectoryConfiguration")]);
    m_self_managed_active_directory_configuration_isSet = !json[QString("SelfManagedActiveDirectoryConfiguration")].isNull() && m_self_managed_active_directory_configuration_isValid;

    m_audit_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_audit_log_configuration, json[QString("AuditLogConfiguration")]);
    m_audit_log_configuration_isSet = !json[QString("AuditLogConfiguration")].isNull() && m_audit_log_configuration_isValid;
}

QString OAIUpdateFileSystemWindowsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystemWindowsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_weekly_maintenance_start_time_isSet) {
        obj.insert(QString("WeeklyMaintenanceStartTime"), ::OpenAPI::toJsonValue(m_weekly_maintenance_start_time));
    }
    if (m_daily_automatic_backup_start_time_isSet) {
        obj.insert(QString("DailyAutomaticBackupStartTime"), ::OpenAPI::toJsonValue(m_daily_automatic_backup_start_time));
    }
    if (m_automatic_backup_retention_days_isSet) {
        obj.insert(QString("AutomaticBackupRetentionDays"), ::OpenAPI::toJsonValue(m_automatic_backup_retention_days));
    }
    if (m_throughput_capacity_isSet) {
        obj.insert(QString("ThroughputCapacity"), ::OpenAPI::toJsonValue(m_throughput_capacity));
    }
    if (m_self_managed_active_directory_configuration.isSet()) {
        obj.insert(QString("SelfManagedActiveDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_self_managed_active_directory_configuration));
    }
    if (m_audit_log_configuration.isSet()) {
        obj.insert(QString("AuditLogConfiguration"), ::OpenAPI::toJsonValue(m_audit_log_configuration));
    }
    return obj;
}

QString OAIUpdateFileSystemWindowsConfiguration::getWeeklyMaintenanceStartTime() const {
    return m_weekly_maintenance_start_time;
}
void OAIUpdateFileSystemWindowsConfiguration::setWeeklyMaintenanceStartTime(const QString &weekly_maintenance_start_time) {
    m_weekly_maintenance_start_time = weekly_maintenance_start_time;
    m_weekly_maintenance_start_time_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_weekly_maintenance_start_time_Set() const{
    return m_weekly_maintenance_start_time_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_weekly_maintenance_start_time_Valid() const{
    return m_weekly_maintenance_start_time_isValid;
}

QString OAIUpdateFileSystemWindowsConfiguration::getDailyAutomaticBackupStartTime() const {
    return m_daily_automatic_backup_start_time;
}
void OAIUpdateFileSystemWindowsConfiguration::setDailyAutomaticBackupStartTime(const QString &daily_automatic_backup_start_time) {
    m_daily_automatic_backup_start_time = daily_automatic_backup_start_time;
    m_daily_automatic_backup_start_time_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_daily_automatic_backup_start_time_Set() const{
    return m_daily_automatic_backup_start_time_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_daily_automatic_backup_start_time_Valid() const{
    return m_daily_automatic_backup_start_time_isValid;
}

qint32 OAIUpdateFileSystemWindowsConfiguration::getAutomaticBackupRetentionDays() const {
    return m_automatic_backup_retention_days;
}
void OAIUpdateFileSystemWindowsConfiguration::setAutomaticBackupRetentionDays(const qint32 &automatic_backup_retention_days) {
    m_automatic_backup_retention_days = automatic_backup_retention_days;
    m_automatic_backup_retention_days_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_automatic_backup_retention_days_Set() const{
    return m_automatic_backup_retention_days_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_automatic_backup_retention_days_Valid() const{
    return m_automatic_backup_retention_days_isValid;
}

qint32 OAIUpdateFileSystemWindowsConfiguration::getThroughputCapacity() const {
    return m_throughput_capacity;
}
void OAIUpdateFileSystemWindowsConfiguration::setThroughputCapacity(const qint32 &throughput_capacity) {
    m_throughput_capacity = throughput_capacity;
    m_throughput_capacity_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_throughput_capacity_Set() const{
    return m_throughput_capacity_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_throughput_capacity_Valid() const{
    return m_throughput_capacity_isValid;
}

OAIUpdateFileSystemWindowsConfiguration_SelfManagedActiveDirectoryConfiguration OAIUpdateFileSystemWindowsConfiguration::getSelfManagedActiveDirectoryConfiguration() const {
    return m_self_managed_active_directory_configuration;
}
void OAIUpdateFileSystemWindowsConfiguration::setSelfManagedActiveDirectoryConfiguration(const OAIUpdateFileSystemWindowsConfiguration_SelfManagedActiveDirectoryConfiguration &self_managed_active_directory_configuration) {
    m_self_managed_active_directory_configuration = self_managed_active_directory_configuration;
    m_self_managed_active_directory_configuration_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_self_managed_active_directory_configuration_Set() const{
    return m_self_managed_active_directory_configuration_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_self_managed_active_directory_configuration_Valid() const{
    return m_self_managed_active_directory_configuration_isValid;
}

OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration OAIUpdateFileSystemWindowsConfiguration::getAuditLogConfiguration() const {
    return m_audit_log_configuration;
}
void OAIUpdateFileSystemWindowsConfiguration::setAuditLogConfiguration(const OAIUpdateFileSystemWindowsConfiguration_AuditLogConfiguration &audit_log_configuration) {
    m_audit_log_configuration = audit_log_configuration;
    m_audit_log_configuration_isSet = true;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_audit_log_configuration_Set() const{
    return m_audit_log_configuration_isSet;
}

bool OAIUpdateFileSystemWindowsConfiguration::is_audit_log_configuration_Valid() const{
    return m_audit_log_configuration_isValid;
}

bool OAIUpdateFileSystemWindowsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_weekly_maintenance_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_automatic_backup_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystemWindowsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
