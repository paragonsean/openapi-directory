/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileCacheDataRepositoryAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileCacheDataRepositoryAssociation::OAIFileCacheDataRepositoryAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileCacheDataRepositoryAssociation::OAIFileCacheDataRepositoryAssociation() {
    this->initializeModel();
}

OAIFileCacheDataRepositoryAssociation::~OAIFileCacheDataRepositoryAssociation() {}

void OAIFileCacheDataRepositoryAssociation::initializeModel() {

    m_file_cache_path_isSet = false;
    m_file_cache_path_isValid = false;

    m_data_repository_path_isSet = false;
    m_data_repository_path_isValid = false;

    m_data_repository_subdirectories_isSet = false;
    m_data_repository_subdirectories_isValid = false;

    m_nfs_isSet = false;
    m_nfs_isValid = false;
}

void OAIFileCacheDataRepositoryAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileCacheDataRepositoryAssociation::fromJsonObject(QJsonObject json) {

    m_file_cache_path_isValid = ::OpenAPI::fromJsonValue(m_file_cache_path, json[QString("FileCachePath")]);
    m_file_cache_path_isSet = !json[QString("FileCachePath")].isNull() && m_file_cache_path_isValid;

    m_data_repository_path_isValid = ::OpenAPI::fromJsonValue(m_data_repository_path, json[QString("DataRepositoryPath")]);
    m_data_repository_path_isSet = !json[QString("DataRepositoryPath")].isNull() && m_data_repository_path_isValid;

    m_data_repository_subdirectories_isValid = ::OpenAPI::fromJsonValue(m_data_repository_subdirectories, json[QString("DataRepositorySubdirectories")]);
    m_data_repository_subdirectories_isSet = !json[QString("DataRepositorySubdirectories")].isNull() && m_data_repository_subdirectories_isValid;

    m_nfs_isValid = ::OpenAPI::fromJsonValue(m_nfs, json[QString("NFS")]);
    m_nfs_isSet = !json[QString("NFS")].isNull() && m_nfs_isValid;
}

QString OAIFileCacheDataRepositoryAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileCacheDataRepositoryAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_file_cache_path_isSet) {
        obj.insert(QString("FileCachePath"), ::OpenAPI::toJsonValue(m_file_cache_path));
    }
    if (m_data_repository_path_isSet) {
        obj.insert(QString("DataRepositoryPath"), ::OpenAPI::toJsonValue(m_data_repository_path));
    }
    if (m_data_repository_subdirectories.isSet()) {
        obj.insert(QString("DataRepositorySubdirectories"), ::OpenAPI::toJsonValue(m_data_repository_subdirectories));
    }
    if (m_nfs.isSet()) {
        obj.insert(QString("NFS"), ::OpenAPI::toJsonValue(m_nfs));
    }
    return obj;
}

QString OAIFileCacheDataRepositoryAssociation::getFileCachePath() const {
    return m_file_cache_path;
}
void OAIFileCacheDataRepositoryAssociation::setFileCachePath(const QString &file_cache_path) {
    m_file_cache_path = file_cache_path;
    m_file_cache_path_isSet = true;
}

bool OAIFileCacheDataRepositoryAssociation::is_file_cache_path_Set() const{
    return m_file_cache_path_isSet;
}

bool OAIFileCacheDataRepositoryAssociation::is_file_cache_path_Valid() const{
    return m_file_cache_path_isValid;
}

QString OAIFileCacheDataRepositoryAssociation::getDataRepositoryPath() const {
    return m_data_repository_path;
}
void OAIFileCacheDataRepositoryAssociation::setDataRepositoryPath(const QString &data_repository_path) {
    m_data_repository_path = data_repository_path;
    m_data_repository_path_isSet = true;
}

bool OAIFileCacheDataRepositoryAssociation::is_data_repository_path_Set() const{
    return m_data_repository_path_isSet;
}

bool OAIFileCacheDataRepositoryAssociation::is_data_repository_path_Valid() const{
    return m_data_repository_path_isValid;
}

QList OAIFileCacheDataRepositoryAssociation::getDataRepositorySubdirectories() const {
    return m_data_repository_subdirectories;
}
void OAIFileCacheDataRepositoryAssociation::setDataRepositorySubdirectories(const QList &data_repository_subdirectories) {
    m_data_repository_subdirectories = data_repository_subdirectories;
    m_data_repository_subdirectories_isSet = true;
}

bool OAIFileCacheDataRepositoryAssociation::is_data_repository_subdirectories_Set() const{
    return m_data_repository_subdirectories_isSet;
}

bool OAIFileCacheDataRepositoryAssociation::is_data_repository_subdirectories_Valid() const{
    return m_data_repository_subdirectories_isValid;
}

OAIFileCacheDataRepositoryAssociation_NFS OAIFileCacheDataRepositoryAssociation::getNfs() const {
    return m_nfs;
}
void OAIFileCacheDataRepositoryAssociation::setNfs(const OAIFileCacheDataRepositoryAssociation_NFS &nfs) {
    m_nfs = nfs;
    m_nfs_isSet = true;
}

bool OAIFileCacheDataRepositoryAssociation::is_nfs_Set() const{
    return m_nfs_isSet;
}

bool OAIFileCacheDataRepositoryAssociation::is_nfs_Valid() const{
    return m_nfs_isValid;
}

bool OAIFileCacheDataRepositoryAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_cache_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_repository_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_repository_subdirectories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileCacheDataRepositoryAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_cache_path_isValid && m_data_repository_path_isValid && true;
}

} // namespace OpenAPI
