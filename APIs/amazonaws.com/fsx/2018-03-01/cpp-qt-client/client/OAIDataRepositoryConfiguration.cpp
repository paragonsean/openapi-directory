/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataRepositoryConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataRepositoryConfiguration::OAIDataRepositoryConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataRepositoryConfiguration::OAIDataRepositoryConfiguration() {
    this->initializeModel();
}

OAIDataRepositoryConfiguration::~OAIDataRepositoryConfiguration() {}

void OAIDataRepositoryConfiguration::initializeModel() {

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_import_path_isSet = false;
    m_import_path_isValid = false;

    m_export_path_isSet = false;
    m_export_path_isValid = false;

    m_imported_file_chunk_size_isSet = false;
    m_imported_file_chunk_size_isValid = false;

    m_auto_import_policy_isSet = false;
    m_auto_import_policy_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;
}

void OAIDataRepositoryConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataRepositoryConfiguration::fromJsonObject(QJsonObject json) {

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_import_path_isValid = ::OpenAPI::fromJsonValue(m_import_path, json[QString("ImportPath")]);
    m_import_path_isSet = !json[QString("ImportPath")].isNull() && m_import_path_isValid;

    m_export_path_isValid = ::OpenAPI::fromJsonValue(m_export_path, json[QString("ExportPath")]);
    m_export_path_isSet = !json[QString("ExportPath")].isNull() && m_export_path_isValid;

    m_imported_file_chunk_size_isValid = ::OpenAPI::fromJsonValue(m_imported_file_chunk_size, json[QString("ImportedFileChunkSize")]);
    m_imported_file_chunk_size_isSet = !json[QString("ImportedFileChunkSize")].isNull() && m_imported_file_chunk_size_isValid;

    m_auto_import_policy_isValid = ::OpenAPI::fromJsonValue(m_auto_import_policy, json[QString("AutoImportPolicy")]);
    m_auto_import_policy_isSet = !json[QString("AutoImportPolicy")].isNull() && m_auto_import_policy_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;
}

QString OAIDataRepositoryConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataRepositoryConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_import_path_isSet) {
        obj.insert(QString("ImportPath"), ::OpenAPI::toJsonValue(m_import_path));
    }
    if (m_export_path_isSet) {
        obj.insert(QString("ExportPath"), ::OpenAPI::toJsonValue(m_export_path));
    }
    if (m_imported_file_chunk_size_isSet) {
        obj.insert(QString("ImportedFileChunkSize"), ::OpenAPI::toJsonValue(m_imported_file_chunk_size));
    }
    if (m_auto_import_policy.isSet()) {
        obj.insert(QString("AutoImportPolicy"), ::OpenAPI::toJsonValue(m_auto_import_policy));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    return obj;
}

OAIDataRepositoryLifecycle OAIDataRepositoryConfiguration::getLifecycle() const {
    return m_lifecycle;
}
void OAIDataRepositoryConfiguration::setLifecycle(const OAIDataRepositoryLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIDataRepositoryConfiguration::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIDataRepositoryConfiguration::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAIDataRepositoryConfiguration::getImportPath() const {
    return m_import_path;
}
void OAIDataRepositoryConfiguration::setImportPath(const QString &import_path) {
    m_import_path = import_path;
    m_import_path_isSet = true;
}

bool OAIDataRepositoryConfiguration::is_import_path_Set() const{
    return m_import_path_isSet;
}

bool OAIDataRepositoryConfiguration::is_import_path_Valid() const{
    return m_import_path_isValid;
}

QString OAIDataRepositoryConfiguration::getExportPath() const {
    return m_export_path;
}
void OAIDataRepositoryConfiguration::setExportPath(const QString &export_path) {
    m_export_path = export_path;
    m_export_path_isSet = true;
}

bool OAIDataRepositoryConfiguration::is_export_path_Set() const{
    return m_export_path_isSet;
}

bool OAIDataRepositoryConfiguration::is_export_path_Valid() const{
    return m_export_path_isValid;
}

qint32 OAIDataRepositoryConfiguration::getImportedFileChunkSize() const {
    return m_imported_file_chunk_size;
}
void OAIDataRepositoryConfiguration::setImportedFileChunkSize(const qint32 &imported_file_chunk_size) {
    m_imported_file_chunk_size = imported_file_chunk_size;
    m_imported_file_chunk_size_isSet = true;
}

bool OAIDataRepositoryConfiguration::is_imported_file_chunk_size_Set() const{
    return m_imported_file_chunk_size_isSet;
}

bool OAIDataRepositoryConfiguration::is_imported_file_chunk_size_Valid() const{
    return m_imported_file_chunk_size_isValid;
}

OAIAutoImportPolicyType OAIDataRepositoryConfiguration::getAutoImportPolicy() const {
    return m_auto_import_policy;
}
void OAIDataRepositoryConfiguration::setAutoImportPolicy(const OAIAutoImportPolicyType &auto_import_policy) {
    m_auto_import_policy = auto_import_policy;
    m_auto_import_policy_isSet = true;
}

bool OAIDataRepositoryConfiguration::is_auto_import_policy_Set() const{
    return m_auto_import_policy_isSet;
}

bool OAIDataRepositoryConfiguration::is_auto_import_policy_Valid() const{
    return m_auto_import_policy_isValid;
}

OAIDataRepositoryFailureDetails OAIDataRepositoryConfiguration::getFailureDetails() const {
    return m_failure_details;
}
void OAIDataRepositoryConfiguration::setFailureDetails(const OAIDataRepositoryFailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAIDataRepositoryConfiguration::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAIDataRepositoryConfiguration::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

bool OAIDataRepositoryConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_file_chunk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_import_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataRepositoryConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
