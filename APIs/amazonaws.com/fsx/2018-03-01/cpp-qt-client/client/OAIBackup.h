/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackup.h
 *
 * A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system.
 */

#ifndef OAIBackup_H
#define OAIBackup_H

#include <QJsonObject>

#include "OAIBackupLifecycle.h"
#include "OAIBackupType.h"
#include "OAIBackup_DirectoryInformation.h"
#include "OAIBackup_FailureDetails.h"
#include "OAIBackup_FileSystem.h"
#include "OAIResourceType.h"
#include "OAIVolume.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBackup_FailureDetails;
class OAIBackup_FileSystem;
class OAIBackup_DirectoryInformation;
class OAIVolume;

class OAIBackup : public OAIObject {
public:
    OAIBackup();
    OAIBackup(QString json);
    ~OAIBackup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBackupId() const;
    void setBackupId(const QString &backup_id);
    bool is_backup_id_Set() const;
    bool is_backup_id_Valid() const;

    OAIBackupLifecycle getLifecycle() const;
    void setLifecycle(const OAIBackupLifecycle &lifecycle);
    bool is_lifecycle_Set() const;
    bool is_lifecycle_Valid() const;

    OAIBackup_FailureDetails getFailureDetails() const;
    void setFailureDetails(const OAIBackup_FailureDetails &failure_details);
    bool is_failure_details_Set() const;
    bool is_failure_details_Valid() const;

    OAIBackupType getType() const;
    void setType(const OAIBackupType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getProgressPercent() const;
    void setProgressPercent(const qint32 &progress_percent);
    bool is_progress_percent_Set() const;
    bool is_progress_percent_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIBackup_FileSystem getFileSystem() const;
    void setFileSystem(const OAIBackup_FileSystem &file_system);
    bool is_file_system_Set() const;
    bool is_file_system_Valid() const;

    OAIBackup_DirectoryInformation getDirectoryInformation() const;
    void setDirectoryInformation(const OAIBackup_DirectoryInformation &directory_information);
    bool is_directory_information_Set() const;
    bool is_directory_information_Valid() const;

    QString getOwnerId() const;
    void setOwnerId(const QString &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    QString getSourceBackupId() const;
    void setSourceBackupId(const QString &source_backup_id);
    bool is_source_backup_id_Set() const;
    bool is_source_backup_id_Valid() const;

    QString getSourceBackupRegion() const;
    void setSourceBackupRegion(const QString &source_backup_region);
    bool is_source_backup_region_Set() const;
    bool is_source_backup_region_Valid() const;

    OAIResourceType getResourceType() const;
    void setResourceType(const OAIResourceType &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    OAIVolume getVolume() const;
    void setVolume(const OAIVolume &volume);
    bool is_volume_Set() const;
    bool is_volume_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_backup_id;
    bool m_backup_id_isSet;
    bool m_backup_id_isValid;

    OAIBackupLifecycle m_lifecycle;
    bool m_lifecycle_isSet;
    bool m_lifecycle_isValid;

    OAIBackup_FailureDetails m_failure_details;
    bool m_failure_details_isSet;
    bool m_failure_details_isValid;

    OAIBackupType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_progress_percent;
    bool m_progress_percent_isSet;
    bool m_progress_percent_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIBackup_FileSystem m_file_system;
    bool m_file_system_isSet;
    bool m_file_system_isValid;

    OAIBackup_DirectoryInformation m_directory_information;
    bool m_directory_information_isSet;
    bool m_directory_information_isValid;

    QString m_owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    QString m_source_backup_id;
    bool m_source_backup_id_isSet;
    bool m_source_backup_id_isValid;

    QString m_source_backup_region;
    bool m_source_backup_region_isSet;
    bool m_source_backup_region_isValid;

    OAIResourceType m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    OAIVolume m_volume;
    bool m_volume_isSet;
    bool m_volume_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackup)

#endif // OAIBackup_H
