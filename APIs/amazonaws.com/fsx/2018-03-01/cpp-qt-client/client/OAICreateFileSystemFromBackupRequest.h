/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFileSystemFromBackupRequest.h
 *
 * The request object for the &lt;code&gt;CreateFileSystemFromBackup&lt;/code&gt; operation.
 */

#ifndef OAICreateFileSystemFromBackupRequest_H
#define OAICreateFileSystemFromBackupRequest_H

#include <QJsonObject>

#include "OAICreateFileSystemFromBackupRequest_OpenZFSConfiguration.h"
#include "OAICreateFileSystemFromBackupRequest_WindowsConfiguration.h"
#include "OAICreateFileSystemLustreConfiguration.h"
#include "OAIStorageType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateFileSystemFromBackupRequest_WindowsConfiguration;
class OAICreateFileSystemLustreConfiguration;
class OAICreateFileSystemFromBackupRequest_OpenZFSConfiguration;

class OAICreateFileSystemFromBackupRequest : public OAIObject {
public:
    OAICreateFileSystemFromBackupRequest();
    OAICreateFileSystemFromBackupRequest(QString json);
    ~OAICreateFileSystemFromBackupRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBackupId() const;
    void setBackupId(const QString &backup_id);
    bool is_backup_id_Set() const;
    bool is_backup_id_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    QList getSubnetIds() const;
    void setSubnetIds(const QList &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateFileSystemFromBackupRequest_WindowsConfiguration getWindowsConfiguration() const;
    void setWindowsConfiguration(const OAICreateFileSystemFromBackupRequest_WindowsConfiguration &windows_configuration);
    bool is_windows_configuration_Set() const;
    bool is_windows_configuration_Valid() const;

    OAICreateFileSystemLustreConfiguration getLustreConfiguration() const;
    void setLustreConfiguration(const OAICreateFileSystemLustreConfiguration &lustre_configuration);
    bool is_lustre_configuration_Set() const;
    bool is_lustre_configuration_Valid() const;

    OAIStorageType getStorageType() const;
    void setStorageType(const OAIStorageType &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getFileSystemTypeVersion() const;
    void setFileSystemTypeVersion(const QString &file_system_type_version);
    bool is_file_system_type_version_Set() const;
    bool is_file_system_type_version_Valid() const;

    OAICreateFileSystemFromBackupRequest_OpenZFSConfiguration getOpenZfsConfiguration() const;
    void setOpenZfsConfiguration(const OAICreateFileSystemFromBackupRequest_OpenZFSConfiguration &open_zfs_configuration);
    bool is_open_zfs_configuration_Set() const;
    bool is_open_zfs_configuration_Valid() const;

    qint32 getStorageCapacity() const;
    void setStorageCapacity(const qint32 &storage_capacity);
    bool is_storage_capacity_Set() const;
    bool is_storage_capacity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_backup_id;
    bool m_backup_id_isSet;
    bool m_backup_id_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    QList m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateFileSystemFromBackupRequest_WindowsConfiguration m_windows_configuration;
    bool m_windows_configuration_isSet;
    bool m_windows_configuration_isValid;

    OAICreateFileSystemLustreConfiguration m_lustre_configuration;
    bool m_lustre_configuration_isSet;
    bool m_lustre_configuration_isValid;

    OAIStorageType m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_file_system_type_version;
    bool m_file_system_type_version_isSet;
    bool m_file_system_type_version_isValid;

    OAICreateFileSystemFromBackupRequest_OpenZFSConfiguration m_open_zfs_configuration;
    bool m_open_zfs_configuration_isSet;
    bool m_open_zfs_configuration_isValid;

    qint32 m_storage_capacity;
    bool m_storage_capacity_isSet;
    bool m_storage_capacity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFileSystemFromBackupRequest)

#endif // OAICreateFileSystemFromBackupRequest_H
