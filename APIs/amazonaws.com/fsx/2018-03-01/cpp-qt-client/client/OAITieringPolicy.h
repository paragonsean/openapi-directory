/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITieringPolicy.h
 *
 * &lt;p&gt;Describes the data tiering policy for an ONTAP volume. When enabled, Amazon FSx for ONTAP&#39;s intelligent tiering automatically transitions a volume&#39;s data between the file system&#39;s primary storage and capacity pool storage based on your access patterns.&lt;/p&gt; &lt;p&gt;Valid tiering policies are the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SNAPSHOT_ONLY&lt;/code&gt; - (Default value) moves cold snapshots to the capacity pool storage tier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AUTO&lt;/code&gt; - moves cold user data and snapshots to the capacity pool storage tier based on your access patterns.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALL&lt;/code&gt; - moves all user data blocks in both the active file system and Snapshot copies to the storage pool tier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; - keeps a volume&#39;s data in the primary storage tier, preventing it from being moved to the capacity pool tier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAITieringPolicy_H
#define OAITieringPolicy_H

#include <QJsonObject>

#include "OAITieringPolicyName.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITieringPolicy : public OAIObject {
public:
    OAITieringPolicy();
    OAITieringPolicy(QString json);
    ~OAITieringPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCoolingPeriod() const;
    void setCoolingPeriod(const qint32 &cooling_period);
    bool is_cooling_period_Set() const;
    bool is_cooling_period_Valid() const;

    OAITieringPolicyName getName() const;
    void setName(const OAITieringPolicyName &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cooling_period;
    bool m_cooling_period_isSet;
    bool m_cooling_period_isValid;

    OAITieringPolicyName m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITieringPolicy)

#endif // OAITieringPolicy_H
