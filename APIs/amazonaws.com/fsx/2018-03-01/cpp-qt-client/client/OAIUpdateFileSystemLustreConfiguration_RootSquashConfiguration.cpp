/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration() {
    this->initializeModel();
}

OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::~OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration() {}

void OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::initializeModel() {

    m_root_squash_isSet = false;
    m_root_squash_isValid = false;

    m_no_squash_nids_isSet = false;
    m_no_squash_nids_isValid = false;
}

void OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::fromJsonObject(QJsonObject json) {

    m_root_squash_isValid = ::OpenAPI::fromJsonValue(m_root_squash, json[QString("RootSquash")]);
    m_root_squash_isSet = !json[QString("RootSquash")].isNull() && m_root_squash_isValid;

    m_no_squash_nids_isValid = ::OpenAPI::fromJsonValue(m_no_squash_nids, json[QString("NoSquashNids")]);
    m_no_squash_nids_isSet = !json[QString("NoSquashNids")].isNull() && m_no_squash_nids_isValid;
}

QString OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_root_squash_isSet) {
        obj.insert(QString("RootSquash"), ::OpenAPI::toJsonValue(m_root_squash));
    }
    if (m_no_squash_nids.isSet()) {
        obj.insert(QString("NoSquashNids"), ::OpenAPI::toJsonValue(m_no_squash_nids));
    }
    return obj;
}

QString OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::getRootSquash() const {
    return m_root_squash;
}
void OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::setRootSquash(const QString &root_squash) {
    m_root_squash = root_squash;
    m_root_squash_isSet = true;
}

bool OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::is_root_squash_Set() const{
    return m_root_squash_isSet;
}

bool OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::is_root_squash_Valid() const{
    return m_root_squash_isValid;
}

QList OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::getNoSquashNids() const {
    return m_no_squash_nids;
}
void OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::setNoSquashNids(const QList &no_squash_nids) {
    m_no_squash_nids = no_squash_nids;
    m_no_squash_nids_isSet = true;
}

bool OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::is_no_squash_nids_Set() const{
    return m_no_squash_nids_isSet;
}

bool OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::is_no_squash_nids_Valid() const{
    return m_no_squash_nids_isValid;
}

bool OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_root_squash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_squash_nids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystemLustreConfiguration_RootSquashConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
