/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration.h
 *
 * 
 */

#ifndef OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration_H
#define OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration_H

#include <QJsonObject>

#include "OAIOpenZFSDataCompressionType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration : public OAIObject {
public:
    OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration();
    OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration(QString json);
    ~OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getRecordSizeKiB() const;
    void setRecordSizeKiB(const qint32 &record_size_ki_b);
    bool is_record_size_ki_b_Set() const;
    bool is_record_size_ki_b_Valid() const;

    OAIOpenZFSDataCompressionType getDataCompressionType() const;
    void setDataCompressionType(const OAIOpenZFSDataCompressionType &data_compression_type);
    bool is_data_compression_type_Set() const;
    bool is_data_compression_type_Valid() const;

    QList getNfsExports() const;
    void setNfsExports(const QList &nfs_exports);
    bool is_nfs_exports_Set() const;
    bool is_nfs_exports_Valid() const;

    QList getUserAndGroupQuotas() const;
    void setUserAndGroupQuotas(const QList &user_and_group_quotas);
    bool is_user_and_group_quotas_Set() const;
    bool is_user_and_group_quotas_Valid() const;

    bool getCopyTagsToSnapshots() const;
    void setCopyTagsToSnapshots(const bool &copy_tags_to_snapshots);
    bool is_copy_tags_to_snapshots_Set() const;
    bool is_copy_tags_to_snapshots_Valid() const;

    bool getReadOnly() const;
    void setReadOnly(const bool &read_only);
    bool is_read_only_Set() const;
    bool is_read_only_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_record_size_ki_b;
    bool m_record_size_ki_b_isSet;
    bool m_record_size_ki_b_isValid;

    OAIOpenZFSDataCompressionType m_data_compression_type;
    bool m_data_compression_type_isSet;
    bool m_data_compression_type_isValid;

    QList m_nfs_exports;
    bool m_nfs_exports_isSet;
    bool m_nfs_exports_isValid;

    QList m_user_and_group_quotas;
    bool m_user_and_group_quotas_isSet;
    bool m_user_and_group_quotas_isValid;

    bool m_copy_tags_to_snapshots;
    bool m_copy_tags_to_snapshots_isSet;
    bool m_copy_tags_to_snapshots_isValid;

    bool m_read_only;
    bool m_read_only_isSet;
    bool m_read_only_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration)

#endif // OAICreateFileSystemOpenZFSConfiguration_RootVolumeConfiguration_H
