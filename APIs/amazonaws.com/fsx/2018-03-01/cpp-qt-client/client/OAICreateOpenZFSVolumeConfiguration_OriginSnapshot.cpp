/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOpenZFSVolumeConfiguration_OriginSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::OAICreateOpenZFSVolumeConfiguration_OriginSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::OAICreateOpenZFSVolumeConfiguration_OriginSnapshot() {
    this->initializeModel();
}

OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::~OAICreateOpenZFSVolumeConfiguration_OriginSnapshot() {}

void OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::initializeModel() {

    m_snapshot_arn_isSet = false;
    m_snapshot_arn_isValid = false;

    m_copy_strategy_isSet = false;
    m_copy_strategy_isValid = false;
}

void OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::fromJsonObject(QJsonObject json) {

    m_snapshot_arn_isValid = ::OpenAPI::fromJsonValue(m_snapshot_arn, json[QString("SnapshotARN")]);
    m_snapshot_arn_isSet = !json[QString("SnapshotARN")].isNull() && m_snapshot_arn_isValid;

    m_copy_strategy_isValid = ::OpenAPI::fromJsonValue(m_copy_strategy, json[QString("CopyStrategy")]);
    m_copy_strategy_isSet = !json[QString("CopyStrategy")].isNull() && m_copy_strategy_isValid;
}

QString OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_arn_isSet) {
        obj.insert(QString("SnapshotARN"), ::OpenAPI::toJsonValue(m_snapshot_arn));
    }
    if (m_copy_strategy.isSet()) {
        obj.insert(QString("CopyStrategy"), ::OpenAPI::toJsonValue(m_copy_strategy));
    }
    return obj;
}

QString OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::getSnapshotArn() const {
    return m_snapshot_arn;
}
void OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::setSnapshotArn(const QString &snapshot_arn) {
    m_snapshot_arn = snapshot_arn;
    m_snapshot_arn_isSet = true;
}

bool OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::is_snapshot_arn_Set() const{
    return m_snapshot_arn_isSet;
}

bool OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::is_snapshot_arn_Valid() const{
    return m_snapshot_arn_isValid;
}

OAIOpenZFSCopyStrategy OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::getCopyStrategy() const {
    return m_copy_strategy;
}
void OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::setCopyStrategy(const OAIOpenZFSCopyStrategy &copy_strategy) {
    m_copy_strategy = copy_strategy;
    m_copy_strategy_isSet = true;
}

bool OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::is_copy_strategy_Set() const{
    return m_copy_strategy_isSet;
}

bool OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::is_copy_strategy_Valid() const{
    return m_copy_strategy_isValid;
}

bool OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOpenZFSVolumeConfiguration_OriginSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snapshot_arn_isValid && m_copy_strategy_isValid && true;
}

} // namespace OpenAPI
