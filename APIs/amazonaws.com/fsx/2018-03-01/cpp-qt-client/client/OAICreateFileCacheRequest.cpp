/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFileCacheRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFileCacheRequest::OAICreateFileCacheRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFileCacheRequest::OAICreateFileCacheRequest() {
    this->initializeModel();
}

OAICreateFileCacheRequest::~OAICreateFileCacheRequest() {}

void OAICreateFileCacheRequest::initializeModel() {

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_file_cache_type_isSet = false;
    m_file_cache_type_isValid = false;

    m_file_cache_type_version_isSet = false;
    m_file_cache_type_version_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_copy_tags_to_data_repository_associations_isSet = false;
    m_copy_tags_to_data_repository_associations_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_lustre_configuration_isSet = false;
    m_lustre_configuration_isValid = false;

    m_data_repository_associations_isSet = false;
    m_data_repository_associations_isValid = false;
}

void OAICreateFileCacheRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFileCacheRequest::fromJsonObject(QJsonObject json) {

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_file_cache_type_isValid = ::OpenAPI::fromJsonValue(m_file_cache_type, json[QString("FileCacheType")]);
    m_file_cache_type_isSet = !json[QString("FileCacheType")].isNull() && m_file_cache_type_isValid;

    m_file_cache_type_version_isValid = ::OpenAPI::fromJsonValue(m_file_cache_type_version, json[QString("FileCacheTypeVersion")]);
    m_file_cache_type_version_isSet = !json[QString("FileCacheTypeVersion")].isNull() && m_file_cache_type_version_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("StorageCapacity")]);
    m_storage_capacity_isSet = !json[QString("StorageCapacity")].isNull() && m_storage_capacity_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_copy_tags_to_data_repository_associations_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_data_repository_associations, json[QString("CopyTagsToDataRepositoryAssociations")]);
    m_copy_tags_to_data_repository_associations_isSet = !json[QString("CopyTagsToDataRepositoryAssociations")].isNull() && m_copy_tags_to_data_repository_associations_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_lustre_configuration_isValid = ::OpenAPI::fromJsonValue(m_lustre_configuration, json[QString("LustreConfiguration")]);
    m_lustre_configuration_isSet = !json[QString("LustreConfiguration")].isNull() && m_lustre_configuration_isValid;

    m_data_repository_associations_isValid = ::OpenAPI::fromJsonValue(m_data_repository_associations, json[QString("DataRepositoryAssociations")]);
    m_data_repository_associations_isSet = !json[QString("DataRepositoryAssociations")].isNull() && m_data_repository_associations_isValid;
}

QString OAICreateFileCacheRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFileCacheRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_file_cache_type.isSet()) {
        obj.insert(QString("FileCacheType"), ::OpenAPI::toJsonValue(m_file_cache_type));
    }
    if (m_file_cache_type_version_isSet) {
        obj.insert(QString("FileCacheTypeVersion"), ::OpenAPI::toJsonValue(m_file_cache_type_version));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("StorageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_subnet_ids.size() > 0) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_copy_tags_to_data_repository_associations_isSet) {
        obj.insert(QString("CopyTagsToDataRepositoryAssociations"), ::OpenAPI::toJsonValue(m_copy_tags_to_data_repository_associations));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_lustre_configuration.isSet()) {
        obj.insert(QString("LustreConfiguration"), ::OpenAPI::toJsonValue(m_lustre_configuration));
    }
    if (m_data_repository_associations.isSet()) {
        obj.insert(QString("DataRepositoryAssociations"), ::OpenAPI::toJsonValue(m_data_repository_associations));
    }
    return obj;
}

QString OAICreateFileCacheRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateFileCacheRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateFileCacheRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateFileCacheRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAIFileCacheType OAICreateFileCacheRequest::getFileCacheType() const {
    return m_file_cache_type;
}
void OAICreateFileCacheRequest::setFileCacheType(const OAIFileCacheType &file_cache_type) {
    m_file_cache_type = file_cache_type;
    m_file_cache_type_isSet = true;
}

bool OAICreateFileCacheRequest::is_file_cache_type_Set() const{
    return m_file_cache_type_isSet;
}

bool OAICreateFileCacheRequest::is_file_cache_type_Valid() const{
    return m_file_cache_type_isValid;
}

QString OAICreateFileCacheRequest::getFileCacheTypeVersion() const {
    return m_file_cache_type_version;
}
void OAICreateFileCacheRequest::setFileCacheTypeVersion(const QString &file_cache_type_version) {
    m_file_cache_type_version = file_cache_type_version;
    m_file_cache_type_version_isSet = true;
}

bool OAICreateFileCacheRequest::is_file_cache_type_version_Set() const{
    return m_file_cache_type_version_isSet;
}

bool OAICreateFileCacheRequest::is_file_cache_type_version_Valid() const{
    return m_file_cache_type_version_isValid;
}

qint32 OAICreateFileCacheRequest::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAICreateFileCacheRequest::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAICreateFileCacheRequest::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAICreateFileCacheRequest::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

QList<QString> OAICreateFileCacheRequest::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateFileCacheRequest::setSubnetIds(const QList<QString> &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateFileCacheRequest::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateFileCacheRequest::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAICreateFileCacheRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateFileCacheRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateFileCacheRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateFileCacheRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList<OAITag> OAICreateFileCacheRequest::getTags() const {
    return m_tags;
}
void OAICreateFileCacheRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFileCacheRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFileCacheRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateFileCacheRequest::getCopyTagsToDataRepositoryAssociations() const {
    return m_copy_tags_to_data_repository_associations;
}
void OAICreateFileCacheRequest::setCopyTagsToDataRepositoryAssociations(const bool &copy_tags_to_data_repository_associations) {
    m_copy_tags_to_data_repository_associations = copy_tags_to_data_repository_associations;
    m_copy_tags_to_data_repository_associations_isSet = true;
}

bool OAICreateFileCacheRequest::is_copy_tags_to_data_repository_associations_Set() const{
    return m_copy_tags_to_data_repository_associations_isSet;
}

bool OAICreateFileCacheRequest::is_copy_tags_to_data_repository_associations_Valid() const{
    return m_copy_tags_to_data_repository_associations_isValid;
}

QString OAICreateFileCacheRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateFileCacheRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateFileCacheRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateFileCacheRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

OAICreateFileCacheRequest_LustreConfiguration OAICreateFileCacheRequest::getLustreConfiguration() const {
    return m_lustre_configuration;
}
void OAICreateFileCacheRequest::setLustreConfiguration(const OAICreateFileCacheRequest_LustreConfiguration &lustre_configuration) {
    m_lustre_configuration = lustre_configuration;
    m_lustre_configuration_isSet = true;
}

bool OAICreateFileCacheRequest::is_lustre_configuration_Set() const{
    return m_lustre_configuration_isSet;
}

bool OAICreateFileCacheRequest::is_lustre_configuration_Valid() const{
    return m_lustre_configuration_isValid;
}

QList OAICreateFileCacheRequest::getDataRepositoryAssociations() const {
    return m_data_repository_associations;
}
void OAICreateFileCacheRequest::setDataRepositoryAssociations(const QList &data_repository_associations) {
    m_data_repository_associations = data_repository_associations;
    m_data_repository_associations_isSet = true;
}

bool OAICreateFileCacheRequest::is_data_repository_associations_Set() const{
    return m_data_repository_associations_isSet;
}

bool OAICreateFileCacheRequest::is_data_repository_associations_Valid() const{
    return m_data_repository_associations_isValid;
}

bool OAICreateFileCacheRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_cache_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_cache_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_data_repository_associations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lustre_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_repository_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFileCacheRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_cache_type_isValid && m_file_cache_type_version_isValid && m_storage_capacity_isValid && m_subnet_ids_isValid && true;
}

} // namespace OpenAPI
