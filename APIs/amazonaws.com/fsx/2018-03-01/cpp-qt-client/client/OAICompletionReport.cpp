/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompletionReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompletionReport::OAICompletionReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompletionReport::OAICompletionReport() {
    this->initializeModel();
}

OAICompletionReport::~OAICompletionReport() {}

void OAICompletionReport::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAICompletionReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompletionReport::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;
}

QString OAICompletionReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompletionReport::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

bool OAICompletionReport::getEnabled() const {
    return m_enabled;
}
void OAICompletionReport::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICompletionReport::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICompletionReport::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICompletionReport::getPath() const {
    return m_path;
}
void OAICompletionReport::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICompletionReport::is_path_Set() const{
    return m_path_isSet;
}

bool OAICompletionReport::is_path_Valid() const{
    return m_path_isValid;
}

OAIReportFormat OAICompletionReport::getFormat() const {
    return m_format;
}
void OAICompletionReport::setFormat(const OAIReportFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICompletionReport::is_format_Set() const{
    return m_format_isSet;
}

bool OAICompletionReport::is_format_Valid() const{
    return m_format_isValid;
}

OAIReportScope OAICompletionReport::getScope() const {
    return m_scope;
}
void OAICompletionReport::setScope(const OAIReportScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICompletionReport::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICompletionReport::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAICompletionReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompletionReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
