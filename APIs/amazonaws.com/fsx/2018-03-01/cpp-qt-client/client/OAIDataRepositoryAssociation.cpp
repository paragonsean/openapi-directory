/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataRepositoryAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataRepositoryAssociation::OAIDataRepositoryAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataRepositoryAssociation::OAIDataRepositoryAssociation() {
    this->initializeModel();
}

OAIDataRepositoryAssociation::~OAIDataRepositoryAssociation() {}

void OAIDataRepositoryAssociation::initializeModel() {

    m_association_id_isSet = false;
    m_association_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_file_system_path_isSet = false;
    m_file_system_path_isValid = false;

    m_data_repository_path_isSet = false;
    m_data_repository_path_isValid = false;

    m_batch_import_meta_data_on_create_isSet = false;
    m_batch_import_meta_data_on_create_isValid = false;

    m_imported_file_chunk_size_isSet = false;
    m_imported_file_chunk_size_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_file_cache_id_isSet = false;
    m_file_cache_id_isValid = false;

    m_file_cache_path_isSet = false;
    m_file_cache_path_isValid = false;

    m_data_repository_subdirectories_isSet = false;
    m_data_repository_subdirectories_isValid = false;

    m_nfs_isSet = false;
    m_nfs_isValid = false;
}

void OAIDataRepositoryAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataRepositoryAssociation::fromJsonObject(QJsonObject json) {

    m_association_id_isValid = ::OpenAPI::fromJsonValue(m_association_id, json[QString("AssociationId")]);
    m_association_id_isSet = !json[QString("AssociationId")].isNull() && m_association_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;

    m_file_system_path_isValid = ::OpenAPI::fromJsonValue(m_file_system_path, json[QString("FileSystemPath")]);
    m_file_system_path_isSet = !json[QString("FileSystemPath")].isNull() && m_file_system_path_isValid;

    m_data_repository_path_isValid = ::OpenAPI::fromJsonValue(m_data_repository_path, json[QString("DataRepositoryPath")]);
    m_data_repository_path_isSet = !json[QString("DataRepositoryPath")].isNull() && m_data_repository_path_isValid;

    m_batch_import_meta_data_on_create_isValid = ::OpenAPI::fromJsonValue(m_batch_import_meta_data_on_create, json[QString("BatchImportMetaDataOnCreate")]);
    m_batch_import_meta_data_on_create_isSet = !json[QString("BatchImportMetaDataOnCreate")].isNull() && m_batch_import_meta_data_on_create_isValid;

    m_imported_file_chunk_size_isValid = ::OpenAPI::fromJsonValue(m_imported_file_chunk_size, json[QString("ImportedFileChunkSize")]);
    m_imported_file_chunk_size_isSet = !json[QString("ImportedFileChunkSize")].isNull() && m_imported_file_chunk_size_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_file_cache_id_isValid = ::OpenAPI::fromJsonValue(m_file_cache_id, json[QString("FileCacheId")]);
    m_file_cache_id_isSet = !json[QString("FileCacheId")].isNull() && m_file_cache_id_isValid;

    m_file_cache_path_isValid = ::OpenAPI::fromJsonValue(m_file_cache_path, json[QString("FileCachePath")]);
    m_file_cache_path_isSet = !json[QString("FileCachePath")].isNull() && m_file_cache_path_isValid;

    m_data_repository_subdirectories_isValid = ::OpenAPI::fromJsonValue(m_data_repository_subdirectories, json[QString("DataRepositorySubdirectories")]);
    m_data_repository_subdirectories_isSet = !json[QString("DataRepositorySubdirectories")].isNull() && m_data_repository_subdirectories_isValid;

    m_nfs_isValid = ::OpenAPI::fromJsonValue(m_nfs, json[QString("NFS")]);
    m_nfs_isSet = !json[QString("NFS")].isNull() && m_nfs_isValid;
}

QString OAIDataRepositoryAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataRepositoryAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_association_id_isSet) {
        obj.insert(QString("AssociationId"), ::OpenAPI::toJsonValue(m_association_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_file_system_path_isSet) {
        obj.insert(QString("FileSystemPath"), ::OpenAPI::toJsonValue(m_file_system_path));
    }
    if (m_data_repository_path_isSet) {
        obj.insert(QString("DataRepositoryPath"), ::OpenAPI::toJsonValue(m_data_repository_path));
    }
    if (m_batch_import_meta_data_on_create_isSet) {
        obj.insert(QString("BatchImportMetaDataOnCreate"), ::OpenAPI::toJsonValue(m_batch_import_meta_data_on_create));
    }
    if (m_imported_file_chunk_size_isSet) {
        obj.insert(QString("ImportedFileChunkSize"), ::OpenAPI::toJsonValue(m_imported_file_chunk_size));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_file_cache_id_isSet) {
        obj.insert(QString("FileCacheId"), ::OpenAPI::toJsonValue(m_file_cache_id));
    }
    if (m_file_cache_path_isSet) {
        obj.insert(QString("FileCachePath"), ::OpenAPI::toJsonValue(m_file_cache_path));
    }
    if (m_data_repository_subdirectories.isSet()) {
        obj.insert(QString("DataRepositorySubdirectories"), ::OpenAPI::toJsonValue(m_data_repository_subdirectories));
    }
    if (m_nfs.isSet()) {
        obj.insert(QString("NFS"), ::OpenAPI::toJsonValue(m_nfs));
    }
    return obj;
}

QString OAIDataRepositoryAssociation::getAssociationId() const {
    return m_association_id;
}
void OAIDataRepositoryAssociation::setAssociationId(const QString &association_id) {
    m_association_id = association_id;
    m_association_id_isSet = true;
}

bool OAIDataRepositoryAssociation::is_association_id_Set() const{
    return m_association_id_isSet;
}

bool OAIDataRepositoryAssociation::is_association_id_Valid() const{
    return m_association_id_isValid;
}

QString OAIDataRepositoryAssociation::getResourceArn() const {
    return m_resource_arn;
}
void OAIDataRepositoryAssociation::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDataRepositoryAssociation::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDataRepositoryAssociation::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIDataRepositoryAssociation::getFileSystemId() const {
    return m_file_system_id;
}
void OAIDataRepositoryAssociation::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIDataRepositoryAssociation::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIDataRepositoryAssociation::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIDataRepositoryLifecycle OAIDataRepositoryAssociation::getLifecycle() const {
    return m_lifecycle;
}
void OAIDataRepositoryAssociation::setLifecycle(const OAIDataRepositoryLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIDataRepositoryAssociation::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIDataRepositoryAssociation::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIDataRepositoryFailureDetails OAIDataRepositoryAssociation::getFailureDetails() const {
    return m_failure_details;
}
void OAIDataRepositoryAssociation::setFailureDetails(const OAIDataRepositoryFailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAIDataRepositoryAssociation::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAIDataRepositoryAssociation::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

QString OAIDataRepositoryAssociation::getFileSystemPath() const {
    return m_file_system_path;
}
void OAIDataRepositoryAssociation::setFileSystemPath(const QString &file_system_path) {
    m_file_system_path = file_system_path;
    m_file_system_path_isSet = true;
}

bool OAIDataRepositoryAssociation::is_file_system_path_Set() const{
    return m_file_system_path_isSet;
}

bool OAIDataRepositoryAssociation::is_file_system_path_Valid() const{
    return m_file_system_path_isValid;
}

QString OAIDataRepositoryAssociation::getDataRepositoryPath() const {
    return m_data_repository_path;
}
void OAIDataRepositoryAssociation::setDataRepositoryPath(const QString &data_repository_path) {
    m_data_repository_path = data_repository_path;
    m_data_repository_path_isSet = true;
}

bool OAIDataRepositoryAssociation::is_data_repository_path_Set() const{
    return m_data_repository_path_isSet;
}

bool OAIDataRepositoryAssociation::is_data_repository_path_Valid() const{
    return m_data_repository_path_isValid;
}

bool OAIDataRepositoryAssociation::getBatchImportMetaDataOnCreate() const {
    return m_batch_import_meta_data_on_create;
}
void OAIDataRepositoryAssociation::setBatchImportMetaDataOnCreate(const bool &batch_import_meta_data_on_create) {
    m_batch_import_meta_data_on_create = batch_import_meta_data_on_create;
    m_batch_import_meta_data_on_create_isSet = true;
}

bool OAIDataRepositoryAssociation::is_batch_import_meta_data_on_create_Set() const{
    return m_batch_import_meta_data_on_create_isSet;
}

bool OAIDataRepositoryAssociation::is_batch_import_meta_data_on_create_Valid() const{
    return m_batch_import_meta_data_on_create_isValid;
}

qint32 OAIDataRepositoryAssociation::getImportedFileChunkSize() const {
    return m_imported_file_chunk_size;
}
void OAIDataRepositoryAssociation::setImportedFileChunkSize(const qint32 &imported_file_chunk_size) {
    m_imported_file_chunk_size = imported_file_chunk_size;
    m_imported_file_chunk_size_isSet = true;
}

bool OAIDataRepositoryAssociation::is_imported_file_chunk_size_Set() const{
    return m_imported_file_chunk_size_isSet;
}

bool OAIDataRepositoryAssociation::is_imported_file_chunk_size_Valid() const{
    return m_imported_file_chunk_size_isValid;
}

OAIDataRepositoryAssociation_S3 OAIDataRepositoryAssociation::getS3() const {
    return m_s3;
}
void OAIDataRepositoryAssociation::setS3(const OAIDataRepositoryAssociation_S3 &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAIDataRepositoryAssociation::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAIDataRepositoryAssociation::is_s3_Valid() const{
    return m_s3_isValid;
}

QList<OAITag> OAIDataRepositoryAssociation::getTags() const {
    return m_tags;
}
void OAIDataRepositoryAssociation::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDataRepositoryAssociation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDataRepositoryAssociation::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIDataRepositoryAssociation::getCreationTime() const {
    return m_creation_time;
}
void OAIDataRepositoryAssociation::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDataRepositoryAssociation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDataRepositoryAssociation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDataRepositoryAssociation::getFileCacheId() const {
    return m_file_cache_id;
}
void OAIDataRepositoryAssociation::setFileCacheId(const QString &file_cache_id) {
    m_file_cache_id = file_cache_id;
    m_file_cache_id_isSet = true;
}

bool OAIDataRepositoryAssociation::is_file_cache_id_Set() const{
    return m_file_cache_id_isSet;
}

bool OAIDataRepositoryAssociation::is_file_cache_id_Valid() const{
    return m_file_cache_id_isValid;
}

QString OAIDataRepositoryAssociation::getFileCachePath() const {
    return m_file_cache_path;
}
void OAIDataRepositoryAssociation::setFileCachePath(const QString &file_cache_path) {
    m_file_cache_path = file_cache_path;
    m_file_cache_path_isSet = true;
}

bool OAIDataRepositoryAssociation::is_file_cache_path_Set() const{
    return m_file_cache_path_isSet;
}

bool OAIDataRepositoryAssociation::is_file_cache_path_Valid() const{
    return m_file_cache_path_isValid;
}

QList OAIDataRepositoryAssociation::getDataRepositorySubdirectories() const {
    return m_data_repository_subdirectories;
}
void OAIDataRepositoryAssociation::setDataRepositorySubdirectories(const QList &data_repository_subdirectories) {
    m_data_repository_subdirectories = data_repository_subdirectories;
    m_data_repository_subdirectories_isSet = true;
}

bool OAIDataRepositoryAssociation::is_data_repository_subdirectories_Set() const{
    return m_data_repository_subdirectories_isSet;
}

bool OAIDataRepositoryAssociation::is_data_repository_subdirectories_Valid() const{
    return m_data_repository_subdirectories_isValid;
}

OAIDataRepositoryAssociation_NFS OAIDataRepositoryAssociation::getNfs() const {
    return m_nfs;
}
void OAIDataRepositoryAssociation::setNfs(const OAIDataRepositoryAssociation_NFS &nfs) {
    m_nfs = nfs;
    m_nfs_isSet = true;
}

bool OAIDataRepositoryAssociation::is_nfs_Set() const{
    return m_nfs_isSet;
}

bool OAIDataRepositoryAssociation::is_nfs_Valid() const{
    return m_nfs_isValid;
}

bool OAIDataRepositoryAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_repository_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_import_meta_data_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_file_chunk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_cache_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_repository_subdirectories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataRepositoryAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
