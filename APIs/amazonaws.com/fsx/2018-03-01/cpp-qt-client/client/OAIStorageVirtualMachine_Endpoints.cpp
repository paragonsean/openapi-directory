/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageVirtualMachine_Endpoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageVirtualMachine_Endpoints::OAIStorageVirtualMachine_Endpoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageVirtualMachine_Endpoints::OAIStorageVirtualMachine_Endpoints() {
    this->initializeModel();
}

OAIStorageVirtualMachine_Endpoints::~OAIStorageVirtualMachine_Endpoints() {}

void OAIStorageVirtualMachine_Endpoints::initializeModel() {

    m_iscsi_isSet = false;
    m_iscsi_isValid = false;

    m_management_isSet = false;
    m_management_isValid = false;

    m_nfs_isSet = false;
    m_nfs_isValid = false;

    m_smb_isSet = false;
    m_smb_isValid = false;
}

void OAIStorageVirtualMachine_Endpoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageVirtualMachine_Endpoints::fromJsonObject(QJsonObject json) {

    m_iscsi_isValid = ::OpenAPI::fromJsonValue(m_iscsi, json[QString("Iscsi")]);
    m_iscsi_isSet = !json[QString("Iscsi")].isNull() && m_iscsi_isValid;

    m_management_isValid = ::OpenAPI::fromJsonValue(m_management, json[QString("Management")]);
    m_management_isSet = !json[QString("Management")].isNull() && m_management_isValid;

    m_nfs_isValid = ::OpenAPI::fromJsonValue(m_nfs, json[QString("Nfs")]);
    m_nfs_isSet = !json[QString("Nfs")].isNull() && m_nfs_isValid;

    m_smb_isValid = ::OpenAPI::fromJsonValue(m_smb, json[QString("Smb")]);
    m_smb_isSet = !json[QString("Smb")].isNull() && m_smb_isValid;
}

QString OAIStorageVirtualMachine_Endpoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageVirtualMachine_Endpoints::asJsonObject() const {
    QJsonObject obj;
    if (m_iscsi.isSet()) {
        obj.insert(QString("Iscsi"), ::OpenAPI::toJsonValue(m_iscsi));
    }
    if (m_management.isSet()) {
        obj.insert(QString("Management"), ::OpenAPI::toJsonValue(m_management));
    }
    if (m_nfs.isSet()) {
        obj.insert(QString("Nfs"), ::OpenAPI::toJsonValue(m_nfs));
    }
    if (m_smb.isSet()) {
        obj.insert(QString("Smb"), ::OpenAPI::toJsonValue(m_smb));
    }
    return obj;
}

OAISvmEndpoints_Iscsi OAIStorageVirtualMachine_Endpoints::getIscsi() const {
    return m_iscsi;
}
void OAIStorageVirtualMachine_Endpoints::setIscsi(const OAISvmEndpoints_Iscsi &iscsi) {
    m_iscsi = iscsi;
    m_iscsi_isSet = true;
}

bool OAIStorageVirtualMachine_Endpoints::is_iscsi_Set() const{
    return m_iscsi_isSet;
}

bool OAIStorageVirtualMachine_Endpoints::is_iscsi_Valid() const{
    return m_iscsi_isValid;
}

OAISvmEndpoints_Management OAIStorageVirtualMachine_Endpoints::getManagement() const {
    return m_management;
}
void OAIStorageVirtualMachine_Endpoints::setManagement(const OAISvmEndpoints_Management &management) {
    m_management = management;
    m_management_isSet = true;
}

bool OAIStorageVirtualMachine_Endpoints::is_management_Set() const{
    return m_management_isSet;
}

bool OAIStorageVirtualMachine_Endpoints::is_management_Valid() const{
    return m_management_isValid;
}

OAISvmEndpoints_Nfs OAIStorageVirtualMachine_Endpoints::getNfs() const {
    return m_nfs;
}
void OAIStorageVirtualMachine_Endpoints::setNfs(const OAISvmEndpoints_Nfs &nfs) {
    m_nfs = nfs;
    m_nfs_isSet = true;
}

bool OAIStorageVirtualMachine_Endpoints::is_nfs_Set() const{
    return m_nfs_isSet;
}

bool OAIStorageVirtualMachine_Endpoints::is_nfs_Valid() const{
    return m_nfs_isValid;
}

OAISvmEndpoints_Smb OAIStorageVirtualMachine_Endpoints::getSmb() const {
    return m_smb;
}
void OAIStorageVirtualMachine_Endpoints::setSmb(const OAISvmEndpoints_Smb &smb) {
    m_smb = smb;
    m_smb_isSet = true;
}

bool OAIStorageVirtualMachine_Endpoints::is_smb_Set() const{
    return m_smb_isSet;
}

bool OAIStorageVirtualMachine_Endpoints::is_smb_Valid() const{
    return m_smb_isValid;
}

bool OAIStorageVirtualMachine_Endpoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iscsi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_management.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smb.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageVirtualMachine_Endpoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
