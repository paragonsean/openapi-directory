/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageVirtualMachine_ActiveDirectoryConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageVirtualMachine_ActiveDirectoryConfiguration::OAIStorageVirtualMachine_ActiveDirectoryConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageVirtualMachine_ActiveDirectoryConfiguration::OAIStorageVirtualMachine_ActiveDirectoryConfiguration() {
    this->initializeModel();
}

OAIStorageVirtualMachine_ActiveDirectoryConfiguration::~OAIStorageVirtualMachine_ActiveDirectoryConfiguration() {}

void OAIStorageVirtualMachine_ActiveDirectoryConfiguration::initializeModel() {

    m_net_bios_name_isSet = false;
    m_net_bios_name_isValid = false;

    m_self_managed_active_directory_configuration_isSet = false;
    m_self_managed_active_directory_configuration_isValid = false;
}

void OAIStorageVirtualMachine_ActiveDirectoryConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageVirtualMachine_ActiveDirectoryConfiguration::fromJsonObject(QJsonObject json) {

    m_net_bios_name_isValid = ::OpenAPI::fromJsonValue(m_net_bios_name, json[QString("NetBiosName")]);
    m_net_bios_name_isSet = !json[QString("NetBiosName")].isNull() && m_net_bios_name_isValid;

    m_self_managed_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_self_managed_active_directory_configuration, json[QString("SelfManagedActiveDirectoryConfiguration")]);
    m_self_managed_active_directory_configuration_isSet = !json[QString("SelfManagedActiveDirectoryConfiguration")].isNull() && m_self_managed_active_directory_configuration_isValid;
}

QString OAIStorageVirtualMachine_ActiveDirectoryConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageVirtualMachine_ActiveDirectoryConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_net_bios_name_isSet) {
        obj.insert(QString("NetBiosName"), ::OpenAPI::toJsonValue(m_net_bios_name));
    }
    if (m_self_managed_active_directory_configuration.isSet()) {
        obj.insert(QString("SelfManagedActiveDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_self_managed_active_directory_configuration));
    }
    return obj;
}

QString OAIStorageVirtualMachine_ActiveDirectoryConfiguration::getNetBiosName() const {
    return m_net_bios_name;
}
void OAIStorageVirtualMachine_ActiveDirectoryConfiguration::setNetBiosName(const QString &net_bios_name) {
    m_net_bios_name = net_bios_name;
    m_net_bios_name_isSet = true;
}

bool OAIStorageVirtualMachine_ActiveDirectoryConfiguration::is_net_bios_name_Set() const{
    return m_net_bios_name_isSet;
}

bool OAIStorageVirtualMachine_ActiveDirectoryConfiguration::is_net_bios_name_Valid() const{
    return m_net_bios_name_isValid;
}

OAISelfManagedActiveDirectoryAttributes OAIStorageVirtualMachine_ActiveDirectoryConfiguration::getSelfManagedActiveDirectoryConfiguration() const {
    return m_self_managed_active_directory_configuration;
}
void OAIStorageVirtualMachine_ActiveDirectoryConfiguration::setSelfManagedActiveDirectoryConfiguration(const OAISelfManagedActiveDirectoryAttributes &self_managed_active_directory_configuration) {
    m_self_managed_active_directory_configuration = self_managed_active_directory_configuration;
    m_self_managed_active_directory_configuration_isSet = true;
}

bool OAIStorageVirtualMachine_ActiveDirectoryConfiguration::is_self_managed_active_directory_configuration_Set() const{
    return m_self_managed_active_directory_configuration_isSet;
}

bool OAIStorageVirtualMachine_ActiveDirectoryConfiguration::is_self_managed_active_directory_configuration_Valid() const{
    return m_self_managed_active_directory_configuration_isValid;
}

bool OAIStorageVirtualMachine_ActiveDirectoryConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_net_bios_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageVirtualMachine_ActiveDirectoryConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
