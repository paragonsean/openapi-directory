/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataRepositoryTaskResponse_DataRepositoryTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataRepositoryTaskResponse_DataRepositoryTask::OAICreateDataRepositoryTaskResponse_DataRepositoryTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataRepositoryTaskResponse_DataRepositoryTask::OAICreateDataRepositoryTaskResponse_DataRepositoryTask() {
    this->initializeModel();
}

OAICreateDataRepositoryTaskResponse_DataRepositoryTask::~OAICreateDataRepositoryTaskResponse_DataRepositoryTask() {}

void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::initializeModel() {

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_capacity_to_release_isSet = false;
    m_capacity_to_release_isValid = false;

    m_file_cache_id_isSet = false;
    m_file_cache_id_isValid = false;
}

void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::fromJsonObject(QJsonObject json) {

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("TaskId")]);
    m_task_id_isSet = !json[QString("TaskId")].isNull() && m_task_id_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("Lifecycle")]);
    m_lifecycle_isSet = !json[QString("Lifecycle")].isNull() && m_lifecycle_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("Report")]);
    m_report_isSet = !json[QString("Report")].isNull() && m_report_isValid;

    m_capacity_to_release_isValid = ::OpenAPI::fromJsonValue(m_capacity_to_release, json[QString("CapacityToRelease")]);
    m_capacity_to_release_isSet = !json[QString("CapacityToRelease")].isNull() && m_capacity_to_release_isValid;

    m_file_cache_id_isValid = ::OpenAPI::fromJsonValue(m_file_cache_id, json[QString("FileCacheId")]);
    m_file_cache_id_isSet = !json[QString("FileCacheId")].isNull() && m_file_cache_id_isValid;
}

QString OAICreateDataRepositoryTaskResponse_DataRepositoryTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataRepositoryTaskResponse_DataRepositoryTask::asJsonObject() const {
    QJsonObject obj;
    if (m_task_id_isSet) {
        obj.insert(QString("TaskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("Lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_paths.isSet()) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_report.isSet()) {
        obj.insert(QString("Report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_capacity_to_release_isSet) {
        obj.insert(QString("CapacityToRelease"), ::OpenAPI::toJsonValue(m_capacity_to_release));
    }
    if (m_file_cache_id_isSet) {
        obj.insert(QString("FileCacheId"), ::OpenAPI::toJsonValue(m_file_cache_id));
    }
    return obj;
}

QString OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getTaskId() const {
    return m_task_id;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_task_id_Valid() const{
    return m_task_id_isValid;
}

OAIDataRepositoryTaskLifecycle OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getLifecycle() const {
    return m_lifecycle;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setLifecycle(const OAIDataRepositoryTaskLifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIDataRepositoryTaskType OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getType() const {
    return m_type;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setType(const OAIDataRepositoryTaskType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getCreationTime() const {
    return m_creation_time;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getStartTime() const {
    return m_start_time;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getEndTime() const {
    return m_end_time;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getResourceArn() const {
    return m_resource_arn;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList<OAITag> OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getTags() const {
    return m_tags;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QList OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getPaths() const {
    return m_paths;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setPaths(const QList &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_paths_Valid() const{
    return m_paths_isValid;
}

OAIDataRepositoryTask_FailureDetails OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getFailureDetails() const {
    return m_failure_details;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setFailureDetails(const OAIDataRepositoryTask_FailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

OAIDataRepositoryTask_Status OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getStatus() const {
    return m_status;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setStatus(const OAIDataRepositoryTask_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_status_Valid() const{
    return m_status_isValid;
}

OAICompletionReport OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getReport() const {
    return m_report;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setReport(const OAICompletionReport &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_report_Set() const{
    return m_report_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_report_Valid() const{
    return m_report_isValid;
}

qint32 OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getCapacityToRelease() const {
    return m_capacity_to_release;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setCapacityToRelease(const qint32 &capacity_to_release) {
    m_capacity_to_release = capacity_to_release;
    m_capacity_to_release_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_capacity_to_release_Set() const{
    return m_capacity_to_release_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_capacity_to_release_Valid() const{
    return m_capacity_to_release_isValid;
}

QString OAICreateDataRepositoryTaskResponse_DataRepositoryTask::getFileCacheId() const {
    return m_file_cache_id;
}
void OAICreateDataRepositoryTaskResponse_DataRepositoryTask::setFileCacheId(const QString &file_cache_id) {
    m_file_cache_id = file_cache_id;
    m_file_cache_id_isSet = true;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_file_cache_id_Set() const{
    return m_file_cache_id_isSet;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::is_file_cache_id_Valid() const{
    return m_file_cache_id_isValid;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_to_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataRepositoryTaskResponse_DataRepositoryTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_id_isValid && m_lifecycle_isValid && m_type_isValid && m_creation_time_isValid && true;
}

} // namespace OpenAPI
