/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackupRequest::OAICreateBackupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackupRequest::OAICreateBackupRequest() {
    this->initializeModel();
}

OAICreateBackupRequest::~OAICreateBackupRequest() {}

void OAICreateBackupRequest::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAICreateBackupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackupRequest::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("VolumeId")]);
    m_volume_id_isSet = !json[QString("VolumeId")].isNull() && m_volume_id_isValid;
}

QString OAICreateBackupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("VolumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QString OAICreateBackupRequest::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateBackupRequest::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateBackupRequest::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateBackupRequest::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAICreateBackupRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateBackupRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateBackupRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateBackupRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList OAICreateBackupRequest::getTags() const {
    return m_tags;
}
void OAICreateBackupRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateBackupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateBackupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateBackupRequest::getVolumeId() const {
    return m_volume_id;
}
void OAICreateBackupRequest::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAICreateBackupRequest::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAICreateBackupRequest::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAICreateBackupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
