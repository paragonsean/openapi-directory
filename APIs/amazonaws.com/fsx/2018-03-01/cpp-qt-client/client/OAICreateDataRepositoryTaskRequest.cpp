/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataRepositoryTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataRepositoryTaskRequest::OAICreateDataRepositoryTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataRepositoryTaskRequest::OAICreateDataRepositoryTaskRequest() {
    this->initializeModel();
}

OAICreateDataRepositoryTaskRequest::~OAICreateDataRepositoryTaskRequest() {}

void OAICreateDataRepositoryTaskRequest::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_capacity_to_release_isSet = false;
    m_capacity_to_release_isValid = false;
}

void OAICreateDataRepositoryTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataRepositoryTaskRequest::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("Report")]);
    m_report_isSet = !json[QString("Report")].isNull() && m_report_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_capacity_to_release_isValid = ::OpenAPI::fromJsonValue(m_capacity_to_release, json[QString("CapacityToRelease")]);
    m_capacity_to_release_isSet = !json[QString("CapacityToRelease")].isNull() && m_capacity_to_release_isValid;
}

QString OAICreateDataRepositoryTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataRepositoryTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_paths.isSet()) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_report.isSet()) {
        obj.insert(QString("Report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_capacity_to_release_isSet) {
        obj.insert(QString("CapacityToRelease"), ::OpenAPI::toJsonValue(m_capacity_to_release));
    }
    return obj;
}

OAIDataRepositoryTaskType OAICreateDataRepositoryTaskRequest::getType() const {
    return m_type;
}
void OAICreateDataRepositoryTaskRequest::setType(const OAIDataRepositoryTaskType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_type_Valid() const{
    return m_type_isValid;
}

QList OAICreateDataRepositoryTaskRequest::getPaths() const {
    return m_paths;
}
void OAICreateDataRepositoryTaskRequest::setPaths(const QList &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAICreateDataRepositoryTaskRequest::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateDataRepositoryTaskRequest::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAICreateDataRepositoryTaskRequest_Report OAICreateDataRepositoryTaskRequest::getReport() const {
    return m_report;
}
void OAICreateDataRepositoryTaskRequest::setReport(const OAICreateDataRepositoryTaskRequest_Report &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_report_Set() const{
    return m_report_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_report_Valid() const{
    return m_report_isValid;
}

QString OAICreateDataRepositoryTaskRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateDataRepositoryTaskRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAICreateDataRepositoryTaskRequest::getTags() const {
    return m_tags;
}
void OAICreateDataRepositoryTaskRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAICreateDataRepositoryTaskRequest::getCapacityToRelease() const {
    return m_capacity_to_release;
}
void OAICreateDataRepositoryTaskRequest::setCapacityToRelease(const qint32 &capacity_to_release) {
    m_capacity_to_release = capacity_to_release;
    m_capacity_to_release_isSet = true;
}

bool OAICreateDataRepositoryTaskRequest::is_capacity_to_release_Set() const{
    return m_capacity_to_release_isSet;
}

bool OAICreateDataRepositoryTaskRequest::is_capacity_to_release_Valid() const{
    return m_capacity_to_release_isValid;
}

bool OAICreateDataRepositoryTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_to_release_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataRepositoryTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_file_system_id_isValid && m_report_isValid && true;
}

} // namespace OpenAPI
