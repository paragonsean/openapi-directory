/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateSnaplockConfiguration_RetentionPeriod.h
 *
 * 
 */

#ifndef OAICreateSnaplockConfiguration_RetentionPeriod_H
#define OAICreateSnaplockConfiguration_RetentionPeriod_H

#include <QJsonObject>

#include "OAISnaplockRetentionPeriod_DefaultRetention.h"
#include "OAISnaplockRetentionPeriod_MaximumRetention.h"
#include "OAISnaplockRetentionPeriod_MinimumRetention.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISnaplockRetentionPeriod_DefaultRetention;
class OAISnaplockRetentionPeriod_MinimumRetention;
class OAISnaplockRetentionPeriod_MaximumRetention;

class OAICreateSnaplockConfiguration_RetentionPeriod : public OAIObject {
public:
    OAICreateSnaplockConfiguration_RetentionPeriod();
    OAICreateSnaplockConfiguration_RetentionPeriod(QString json);
    ~OAICreateSnaplockConfiguration_RetentionPeriod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISnaplockRetentionPeriod_DefaultRetention getDefaultRetention() const;
    void setDefaultRetention(const OAISnaplockRetentionPeriod_DefaultRetention &default_retention);
    bool is_default_retention_Set() const;
    bool is_default_retention_Valid() const;

    OAISnaplockRetentionPeriod_MinimumRetention getMinimumRetention() const;
    void setMinimumRetention(const OAISnaplockRetentionPeriod_MinimumRetention &minimum_retention);
    bool is_minimum_retention_Set() const;
    bool is_minimum_retention_Valid() const;

    OAISnaplockRetentionPeriod_MaximumRetention getMaximumRetention() const;
    void setMaximumRetention(const OAISnaplockRetentionPeriod_MaximumRetention &maximum_retention);
    bool is_maximum_retention_Set() const;
    bool is_maximum_retention_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISnaplockRetentionPeriod_DefaultRetention m_default_retention;
    bool m_default_retention_isSet;
    bool m_default_retention_isValid;

    OAISnaplockRetentionPeriod_MinimumRetention m_minimum_retention;
    bool m_minimum_retention_isSet;
    bool m_minimum_retention_isValid;

    OAISnaplockRetentionPeriod_MaximumRetention m_maximum_retention;
    bool m_maximum_retention_isSet;
    bool m_maximum_retention_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateSnaplockConfiguration_RetentionPeriod)

#endif // OAICreateSnaplockConfiguration_RetentionPeriod_H
