/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup_DirectoryInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup_DirectoryInformation::OAIBackup_DirectoryInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup_DirectoryInformation::OAIBackup_DirectoryInformation() {
    this->initializeModel();
}

OAIBackup_DirectoryInformation::~OAIBackup_DirectoryInformation() {}

void OAIBackup_DirectoryInformation::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_active_directory_id_isSet = false;
    m_active_directory_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIBackup_DirectoryInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup_DirectoryInformation::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_active_directory_id_isValid = ::OpenAPI::fromJsonValue(m_active_directory_id, json[QString("ActiveDirectoryId")]);
    m_active_directory_id_isSet = !json[QString("ActiveDirectoryId")].isNull() && m_active_directory_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;
}

QString OAIBackup_DirectoryInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup_DirectoryInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_active_directory_id_isSet) {
        obj.insert(QString("ActiveDirectoryId"), ::OpenAPI::toJsonValue(m_active_directory_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIBackup_DirectoryInformation::getDomainName() const {
    return m_domain_name;
}
void OAIBackup_DirectoryInformation::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIBackup_DirectoryInformation::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIBackup_DirectoryInformation::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIBackup_DirectoryInformation::getActiveDirectoryId() const {
    return m_active_directory_id;
}
void OAIBackup_DirectoryInformation::setActiveDirectoryId(const QString &active_directory_id) {
    m_active_directory_id = active_directory_id;
    m_active_directory_id_isSet = true;
}

bool OAIBackup_DirectoryInformation::is_active_directory_id_Set() const{
    return m_active_directory_id_isSet;
}

bool OAIBackup_DirectoryInformation::is_active_directory_id_Valid() const{
    return m_active_directory_id_isValid;
}

QString OAIBackup_DirectoryInformation::getResourceArn() const {
    return m_resource_arn;
}
void OAIBackup_DirectoryInformation::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIBackup_DirectoryInformation::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIBackup_DirectoryInformation::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIBackup_DirectoryInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup_DirectoryInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
