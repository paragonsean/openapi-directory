/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFileCacheResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFileCacheResponse::OAICreateFileCacheResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFileCacheResponse::OAICreateFileCacheResponse() {
    this->initializeModel();
}

OAICreateFileCacheResponse::~OAICreateFileCacheResponse() {}

void OAICreateFileCacheResponse::initializeModel() {

    m_file_cache_isSet = false;
    m_file_cache_isValid = false;
}

void OAICreateFileCacheResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFileCacheResponse::fromJsonObject(QJsonObject json) {

    m_file_cache_isValid = ::OpenAPI::fromJsonValue(m_file_cache, json[QString("FileCache")]);
    m_file_cache_isSet = !json[QString("FileCache")].isNull() && m_file_cache_isValid;
}

QString OAICreateFileCacheResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFileCacheResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_file_cache.isSet()) {
        obj.insert(QString("FileCache"), ::OpenAPI::toJsonValue(m_file_cache));
    }
    return obj;
}

OAICreateFileCacheResponse_FileCache OAICreateFileCacheResponse::getFileCache() const {
    return m_file_cache;
}
void OAICreateFileCacheResponse::setFileCache(const OAICreateFileCacheResponse_FileCache &file_cache) {
    m_file_cache = file_cache;
    m_file_cache_isSet = true;
}

bool OAICreateFileCacheResponse::is_file_cache_Set() const{
    return m_file_cache_isSet;
}

bool OAICreateFileCacheResponse::is_file_cache_Valid() const{
    return m_file_cache_isValid;
}

bool OAICreateFileCacheResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFileCacheResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
