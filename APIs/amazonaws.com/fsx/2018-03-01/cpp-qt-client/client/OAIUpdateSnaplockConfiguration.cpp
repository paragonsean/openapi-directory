/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSnaplockConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSnaplockConfiguration::OAIUpdateSnaplockConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSnaplockConfiguration::OAIUpdateSnaplockConfiguration() {
    this->initializeModel();
}

OAIUpdateSnaplockConfiguration::~OAIUpdateSnaplockConfiguration() {}

void OAIUpdateSnaplockConfiguration::initializeModel() {

    m_audit_log_volume_isSet = false;
    m_audit_log_volume_isValid = false;

    m_autocommit_period_isSet = false;
    m_autocommit_period_isValid = false;

    m_privileged_delete_isSet = false;
    m_privileged_delete_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;

    m_volume_append_mode_enabled_isSet = false;
    m_volume_append_mode_enabled_isValid = false;
}

void OAIUpdateSnaplockConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSnaplockConfiguration::fromJsonObject(QJsonObject json) {

    m_audit_log_volume_isValid = ::OpenAPI::fromJsonValue(m_audit_log_volume, json[QString("AuditLogVolume")]);
    m_audit_log_volume_isSet = !json[QString("AuditLogVolume")].isNull() && m_audit_log_volume_isValid;

    m_autocommit_period_isValid = ::OpenAPI::fromJsonValue(m_autocommit_period, json[QString("AutocommitPeriod")]);
    m_autocommit_period_isSet = !json[QString("AutocommitPeriod")].isNull() && m_autocommit_period_isValid;

    m_privileged_delete_isValid = ::OpenAPI::fromJsonValue(m_privileged_delete, json[QString("PrivilegedDelete")]);
    m_privileged_delete_isSet = !json[QString("PrivilegedDelete")].isNull() && m_privileged_delete_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("RetentionPeriod")]);
    m_retention_period_isSet = !json[QString("RetentionPeriod")].isNull() && m_retention_period_isValid;

    m_volume_append_mode_enabled_isValid = ::OpenAPI::fromJsonValue(m_volume_append_mode_enabled, json[QString("VolumeAppendModeEnabled")]);
    m_volume_append_mode_enabled_isSet = !json[QString("VolumeAppendModeEnabled")].isNull() && m_volume_append_mode_enabled_isValid;
}

QString OAIUpdateSnaplockConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSnaplockConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_log_volume_isSet) {
        obj.insert(QString("AuditLogVolume"), ::OpenAPI::toJsonValue(m_audit_log_volume));
    }
    if (m_autocommit_period.isSet()) {
        obj.insert(QString("AutocommitPeriod"), ::OpenAPI::toJsonValue(m_autocommit_period));
    }
    if (m_privileged_delete.isSet()) {
        obj.insert(QString("PrivilegedDelete"), ::OpenAPI::toJsonValue(m_privileged_delete));
    }
    if (m_retention_period.isSet()) {
        obj.insert(QString("RetentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    if (m_volume_append_mode_enabled_isSet) {
        obj.insert(QString("VolumeAppendModeEnabled"), ::OpenAPI::toJsonValue(m_volume_append_mode_enabled));
    }
    return obj;
}

bool OAIUpdateSnaplockConfiguration::getAuditLogVolume() const {
    return m_audit_log_volume;
}
void OAIUpdateSnaplockConfiguration::setAuditLogVolume(const bool &audit_log_volume) {
    m_audit_log_volume = audit_log_volume;
    m_audit_log_volume_isSet = true;
}

bool OAIUpdateSnaplockConfiguration::is_audit_log_volume_Set() const{
    return m_audit_log_volume_isSet;
}

bool OAIUpdateSnaplockConfiguration::is_audit_log_volume_Valid() const{
    return m_audit_log_volume_isValid;
}

OAICreateSnaplockConfiguration_AutocommitPeriod OAIUpdateSnaplockConfiguration::getAutocommitPeriod() const {
    return m_autocommit_period;
}
void OAIUpdateSnaplockConfiguration::setAutocommitPeriod(const OAICreateSnaplockConfiguration_AutocommitPeriod &autocommit_period) {
    m_autocommit_period = autocommit_period;
    m_autocommit_period_isSet = true;
}

bool OAIUpdateSnaplockConfiguration::is_autocommit_period_Set() const{
    return m_autocommit_period_isSet;
}

bool OAIUpdateSnaplockConfiguration::is_autocommit_period_Valid() const{
    return m_autocommit_period_isValid;
}

OAIPrivilegedDelete OAIUpdateSnaplockConfiguration::getPrivilegedDelete() const {
    return m_privileged_delete;
}
void OAIUpdateSnaplockConfiguration::setPrivilegedDelete(const OAIPrivilegedDelete &privileged_delete) {
    m_privileged_delete = privileged_delete;
    m_privileged_delete_isSet = true;
}

bool OAIUpdateSnaplockConfiguration::is_privileged_delete_Set() const{
    return m_privileged_delete_isSet;
}

bool OAIUpdateSnaplockConfiguration::is_privileged_delete_Valid() const{
    return m_privileged_delete_isValid;
}

OAICreateSnaplockConfiguration_RetentionPeriod OAIUpdateSnaplockConfiguration::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIUpdateSnaplockConfiguration::setRetentionPeriod(const OAICreateSnaplockConfiguration_RetentionPeriod &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIUpdateSnaplockConfiguration::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIUpdateSnaplockConfiguration::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

bool OAIUpdateSnaplockConfiguration::getVolumeAppendModeEnabled() const {
    return m_volume_append_mode_enabled;
}
void OAIUpdateSnaplockConfiguration::setVolumeAppendModeEnabled(const bool &volume_append_mode_enabled) {
    m_volume_append_mode_enabled = volume_append_mode_enabled;
    m_volume_append_mode_enabled_isSet = true;
}

bool OAIUpdateSnaplockConfiguration::is_volume_append_mode_enabled_Set() const{
    return m_volume_append_mode_enabled_isSet;
}

bool OAIUpdateSnaplockConfiguration::is_volume_append_mode_enabled_Valid() const{
    return m_volume_append_mode_enabled_isValid;
}

bool OAIUpdateSnaplockConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_log_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autocommit_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privileged_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_append_mode_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSnaplockConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
