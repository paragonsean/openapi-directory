/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateDataRepositoryAssociationResponse_Association.h
 *
 * 
 */

#ifndef OAIUpdateDataRepositoryAssociationResponse_Association_H
#define OAIUpdateDataRepositoryAssociationResponse_Association_H

#include <QJsonObject>

#include "OAIDataRepositoryAssociation_NFS.h"
#include "OAIDataRepositoryAssociation_S3.h"
#include "OAIDataRepositoryFailureDetails.h"
#include "OAIDataRepositoryLifecycle.h"
#include "OAITag.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataRepositoryFailureDetails;
class OAIDataRepositoryAssociation_S3;
class OAITag;
class OAIDataRepositoryAssociation_NFS;

class OAIUpdateDataRepositoryAssociationResponse_Association : public OAIObject {
public:
    OAIUpdateDataRepositoryAssociationResponse_Association();
    OAIUpdateDataRepositoryAssociationResponse_Association(QString json);
    ~OAIUpdateDataRepositoryAssociationResponse_Association() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssociationId() const;
    void setAssociationId(const QString &association_id);
    bool is_association_id_Set() const;
    bool is_association_id_Valid() const;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    OAIDataRepositoryLifecycle getLifecycle() const;
    void setLifecycle(const OAIDataRepositoryLifecycle &lifecycle);
    bool is_lifecycle_Set() const;
    bool is_lifecycle_Valid() const;

    OAIDataRepositoryFailureDetails getFailureDetails() const;
    void setFailureDetails(const OAIDataRepositoryFailureDetails &failure_details);
    bool is_failure_details_Set() const;
    bool is_failure_details_Valid() const;

    QString getFileSystemPath() const;
    void setFileSystemPath(const QString &file_system_path);
    bool is_file_system_path_Set() const;
    bool is_file_system_path_Valid() const;

    QString getDataRepositoryPath() const;
    void setDataRepositoryPath(const QString &data_repository_path);
    bool is_data_repository_path_Set() const;
    bool is_data_repository_path_Valid() const;

    bool getBatchImportMetaDataOnCreate() const;
    void setBatchImportMetaDataOnCreate(const bool &batch_import_meta_data_on_create);
    bool is_batch_import_meta_data_on_create_Set() const;
    bool is_batch_import_meta_data_on_create_Valid() const;

    qint32 getImportedFileChunkSize() const;
    void setImportedFileChunkSize(const qint32 &imported_file_chunk_size);
    bool is_imported_file_chunk_size_Set() const;
    bool is_imported_file_chunk_size_Valid() const;

    OAIDataRepositoryAssociation_S3 getS3() const;
    void setS3(const OAIDataRepositoryAssociation_S3 &s3);
    bool is_s3_Set() const;
    bool is_s3_Valid() const;

    QList<OAITag> getTags() const;
    void setTags(const QList<OAITag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getFileCacheId() const;
    void setFileCacheId(const QString &file_cache_id);
    bool is_file_cache_id_Set() const;
    bool is_file_cache_id_Valid() const;

    QString getFileCachePath() const;
    void setFileCachePath(const QString &file_cache_path);
    bool is_file_cache_path_Set() const;
    bool is_file_cache_path_Valid() const;

    QList getDataRepositorySubdirectories() const;
    void setDataRepositorySubdirectories(const QList &data_repository_subdirectories);
    bool is_data_repository_subdirectories_Set() const;
    bool is_data_repository_subdirectories_Valid() const;

    OAIDataRepositoryAssociation_NFS getNfs() const;
    void setNfs(const OAIDataRepositoryAssociation_NFS &nfs);
    bool is_nfs_Set() const;
    bool is_nfs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_association_id;
    bool m_association_id_isSet;
    bool m_association_id_isValid;

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    OAIDataRepositoryLifecycle m_lifecycle;
    bool m_lifecycle_isSet;
    bool m_lifecycle_isValid;

    OAIDataRepositoryFailureDetails m_failure_details;
    bool m_failure_details_isSet;
    bool m_failure_details_isValid;

    QString m_file_system_path;
    bool m_file_system_path_isSet;
    bool m_file_system_path_isValid;

    QString m_data_repository_path;
    bool m_data_repository_path_isSet;
    bool m_data_repository_path_isValid;

    bool m_batch_import_meta_data_on_create;
    bool m_batch_import_meta_data_on_create_isSet;
    bool m_batch_import_meta_data_on_create_isValid;

    qint32 m_imported_file_chunk_size;
    bool m_imported_file_chunk_size_isSet;
    bool m_imported_file_chunk_size_isValid;

    OAIDataRepositoryAssociation_S3 m_s3;
    bool m_s3_isSet;
    bool m_s3_isValid;

    QList<OAITag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_file_cache_id;
    bool m_file_cache_id_isSet;
    bool m_file_cache_id_isValid;

    QString m_file_cache_path;
    bool m_file_cache_path_isSet;
    bool m_file_cache_path_isValid;

    QList m_data_repository_subdirectories;
    bool m_data_repository_subdirectories_isSet;
    bool m_data_repository_subdirectories_isValid;

    OAIDataRepositoryAssociation_NFS m_nfs;
    bool m_nfs_isSet;
    bool m_nfs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateDataRepositoryAssociationResponse_Association)

#endif // OAIUpdateDataRepositoryAssociationResponse_Association_H
