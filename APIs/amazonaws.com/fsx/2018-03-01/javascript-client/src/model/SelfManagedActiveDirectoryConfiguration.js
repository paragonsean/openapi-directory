/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SelfManagedActiveDirectoryConfiguration model module.
 * @module model/SelfManagedActiveDirectoryConfiguration
 * @version 2018-03-01
 */
class SelfManagedActiveDirectoryConfiguration {
    /**
     * Constructs a new <code>SelfManagedActiveDirectoryConfiguration</code>.
     * The configuration that Amazon FSx uses to join a FSx for Windows File Server file system or an FSx for ONTAP storage virtual machine (SVM) to a self-managed (including on-premises) Microsoft Active Directory (AD) directory. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/WindowsGuide/self-managed-AD.html\&quot;&gt; Using Amazon FSx for Windows with your self-managed Microsoft Active Directory&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html\&quot;&gt;Managing FSx for ONTAP SVMs&lt;/a&gt;.
     * @alias module:model/SelfManagedActiveDirectoryConfiguration
     * @param domainName {String} 
     * @param userName {String} 
     * @param password {String} 
     * @param dnsIps {Array} 
     */
    constructor(domainName, userName, password, dnsIps) { 
        
        SelfManagedActiveDirectoryConfiguration.initialize(this, domainName, userName, password, dnsIps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName, userName, password, dnsIps) { 
        obj['DomainName'] = domainName;
        obj['UserName'] = userName;
        obj['Password'] = password;
        obj['DnsIps'] = dnsIps;
    }

    /**
     * Constructs a <code>SelfManagedActiveDirectoryConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SelfManagedActiveDirectoryConfiguration} obj Optional instance to populate.
     * @return {module:model/SelfManagedActiveDirectoryConfiguration} The populated <code>SelfManagedActiveDirectoryConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SelfManagedActiveDirectoryConfiguration();

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('OrganizationalUnitDistinguishedName')) {
                obj['OrganizationalUnitDistinguishedName'] = ApiClient.convertToType(data['OrganizationalUnitDistinguishedName'], 'String');
            }
            if (data.hasOwnProperty('FileSystemAdministratorsGroup')) {
                obj['FileSystemAdministratorsGroup'] = ApiClient.convertToType(data['FileSystemAdministratorsGroup'], 'String');
            }
            if (data.hasOwnProperty('UserName')) {
                obj['UserName'] = ApiClient.convertToType(data['UserName'], 'String');
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('DnsIps')) {
                obj['DnsIps'] = ApiClient.convertToType(data['DnsIps'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SelfManagedActiveDirectoryConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SelfManagedActiveDirectoryConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SelfManagedActiveDirectoryConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `OrganizationalUnitDistinguishedName`
        if (data['OrganizationalUnitDistinguishedName']) { // data not null
          String.validateJSON(data['OrganizationalUnitDistinguishedName']);
        }
        // validate the optional field `FileSystemAdministratorsGroup`
        if (data['FileSystemAdministratorsGroup']) { // data not null
          String.validateJSON(data['FileSystemAdministratorsGroup']);
        }
        // validate the optional field `UserName`
        if (data['UserName']) { // data not null
          String.validateJSON(data['UserName']);
        }
        // validate the optional field `Password`
        if (data['Password']) { // data not null
          String.validateJSON(data['Password']);
        }
        // validate the optional field `DnsIps`
        if (data['DnsIps']) { // data not null
          Array.validateJSON(data['DnsIps']);
        }

        return true;
    }


}

SelfManagedActiveDirectoryConfiguration.RequiredProperties = ["DomainName", "UserName", "Password", "DnsIps"];

/**
 * @member {String} DomainName
 */
SelfManagedActiveDirectoryConfiguration.prototype['DomainName'] = undefined;

/**
 * @member {String} OrganizationalUnitDistinguishedName
 */
SelfManagedActiveDirectoryConfiguration.prototype['OrganizationalUnitDistinguishedName'] = undefined;

/**
 * @member {String} FileSystemAdministratorsGroup
 */
SelfManagedActiveDirectoryConfiguration.prototype['FileSystemAdministratorsGroup'] = undefined;

/**
 * @member {String} UserName
 */
SelfManagedActiveDirectoryConfiguration.prototype['UserName'] = undefined;

/**
 * @member {String} Password
 */
SelfManagedActiveDirectoryConfiguration.prototype['Password'] = undefined;

/**
 * @member {Array} DnsIps
 */
SelfManagedActiveDirectoryConfiguration.prototype['DnsIps'] = undefined;






export default SelfManagedActiveDirectoryConfiguration;

