/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OpenZFSDataCompressionType from './OpenZFSDataCompressionType';
import OpenZFSVolumeConfigurationOriginSnapshot from './OpenZFSVolumeConfigurationOriginSnapshot';

/**
 * The OpenZFSVolumeConfiguration model module.
 * @module model/OpenZFSVolumeConfiguration
 * @version 2018-03-01
 */
class OpenZFSVolumeConfiguration {
    /**
     * Constructs a new <code>OpenZFSVolumeConfiguration</code>.
     * The configuration of an Amazon FSx for OpenZFS volume.
     * @alias module:model/OpenZFSVolumeConfiguration
     */
    constructor() { 
        
        OpenZFSVolumeConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OpenZFSVolumeConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenZFSVolumeConfiguration} obj Optional instance to populate.
     * @return {module:model/OpenZFSVolumeConfiguration} The populated <code>OpenZFSVolumeConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenZFSVolumeConfiguration();

            if (data.hasOwnProperty('ParentVolumeId')) {
                obj['ParentVolumeId'] = ApiClient.convertToType(data['ParentVolumeId'], 'String');
            }
            if (data.hasOwnProperty('VolumePath')) {
                obj['VolumePath'] = ApiClient.convertToType(data['VolumePath'], 'String');
            }
            if (data.hasOwnProperty('StorageCapacityReservationGiB')) {
                obj['StorageCapacityReservationGiB'] = ApiClient.convertToType(data['StorageCapacityReservationGiB'], 'Number');
            }
            if (data.hasOwnProperty('StorageCapacityQuotaGiB')) {
                obj['StorageCapacityQuotaGiB'] = ApiClient.convertToType(data['StorageCapacityQuotaGiB'], 'Number');
            }
            if (data.hasOwnProperty('RecordSizeKiB')) {
                obj['RecordSizeKiB'] = ApiClient.convertToType(data['RecordSizeKiB'], 'Number');
            }
            if (data.hasOwnProperty('DataCompressionType')) {
                obj['DataCompressionType'] = ApiClient.convertToType(data['DataCompressionType'], OpenZFSDataCompressionType);
            }
            if (data.hasOwnProperty('CopyTagsToSnapshots')) {
                obj['CopyTagsToSnapshots'] = ApiClient.convertToType(data['CopyTagsToSnapshots'], 'Boolean');
            }
            if (data.hasOwnProperty('OriginSnapshot')) {
                obj['OriginSnapshot'] = OpenZFSVolumeConfigurationOriginSnapshot.constructFromObject(data['OriginSnapshot']);
            }
            if (data.hasOwnProperty('ReadOnly')) {
                obj['ReadOnly'] = ApiClient.convertToType(data['ReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('NfsExports')) {
                obj['NfsExports'] = ApiClient.convertToType(data['NfsExports'], Array);
            }
            if (data.hasOwnProperty('UserAndGroupQuotas')) {
                obj['UserAndGroupQuotas'] = ApiClient.convertToType(data['UserAndGroupQuotas'], Array);
            }
            if (data.hasOwnProperty('RestoreToSnapshot')) {
                obj['RestoreToSnapshot'] = ApiClient.convertToType(data['RestoreToSnapshot'], 'String');
            }
            if (data.hasOwnProperty('DeleteIntermediateSnaphots')) {
                obj['DeleteIntermediateSnaphots'] = ApiClient.convertToType(data['DeleteIntermediateSnaphots'], 'Boolean');
            }
            if (data.hasOwnProperty('DeleteClonedVolumes')) {
                obj['DeleteClonedVolumes'] = ApiClient.convertToType(data['DeleteClonedVolumes'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenZFSVolumeConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenZFSVolumeConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ParentVolumeId`
        if (data['ParentVolumeId']) { // data not null
          String.validateJSON(data['ParentVolumeId']);
        }
        // validate the optional field `VolumePath`
        if (data['VolumePath']) { // data not null
          String.validateJSON(data['VolumePath']);
        }
        // validate the optional field `StorageCapacityReservationGiB`
        if (data['StorageCapacityReservationGiB']) { // data not null
          Number.validateJSON(data['StorageCapacityReservationGiB']);
        }
        // validate the optional field `StorageCapacityQuotaGiB`
        if (data['StorageCapacityQuotaGiB']) { // data not null
          Number.validateJSON(data['StorageCapacityQuotaGiB']);
        }
        // validate the optional field `RecordSizeKiB`
        if (data['RecordSizeKiB']) { // data not null
          Number.validateJSON(data['RecordSizeKiB']);
        }
        // validate the optional field `DataCompressionType`
        if (data['DataCompressionType']) { // data not null
          OpenZFSDataCompressionType.validateJSON(data['DataCompressionType']);
        }
        // validate the optional field `CopyTagsToSnapshots`
        if (data['CopyTagsToSnapshots']) { // data not null
          Boolean.validateJSON(data['CopyTagsToSnapshots']);
        }
        // validate the optional field `OriginSnapshot`
        if (data['OriginSnapshot']) { // data not null
          OpenZFSVolumeConfigurationOriginSnapshot.validateJSON(data['OriginSnapshot']);
        }
        // validate the optional field `ReadOnly`
        if (data['ReadOnly']) { // data not null
          Boolean.validateJSON(data['ReadOnly']);
        }
        // validate the optional field `NfsExports`
        if (data['NfsExports']) { // data not null
          Array.validateJSON(data['NfsExports']);
        }
        // validate the optional field `UserAndGroupQuotas`
        if (data['UserAndGroupQuotas']) { // data not null
          Array.validateJSON(data['UserAndGroupQuotas']);
        }
        // validate the optional field `RestoreToSnapshot`
        if (data['RestoreToSnapshot']) { // data not null
          String.validateJSON(data['RestoreToSnapshot']);
        }
        // validate the optional field `DeleteIntermediateSnaphots`
        if (data['DeleteIntermediateSnaphots']) { // data not null
          Boolean.validateJSON(data['DeleteIntermediateSnaphots']);
        }
        // validate the optional field `DeleteClonedVolumes`
        if (data['DeleteClonedVolumes']) { // data not null
          Boolean.validateJSON(data['DeleteClonedVolumes']);
        }

        return true;
    }


}



/**
 * @member {String} ParentVolumeId
 */
OpenZFSVolumeConfiguration.prototype['ParentVolumeId'] = undefined;

/**
 * @member {String} VolumePath
 */
OpenZFSVolumeConfiguration.prototype['VolumePath'] = undefined;

/**
 * @member {Number} StorageCapacityReservationGiB
 */
OpenZFSVolumeConfiguration.prototype['StorageCapacityReservationGiB'] = undefined;

/**
 * @member {Number} StorageCapacityQuotaGiB
 */
OpenZFSVolumeConfiguration.prototype['StorageCapacityQuotaGiB'] = undefined;

/**
 * @member {Number} RecordSizeKiB
 */
OpenZFSVolumeConfiguration.prototype['RecordSizeKiB'] = undefined;

/**
 * @member {module:model/OpenZFSDataCompressionType} DataCompressionType
 */
OpenZFSVolumeConfiguration.prototype['DataCompressionType'] = undefined;

/**
 * @member {Boolean} CopyTagsToSnapshots
 */
OpenZFSVolumeConfiguration.prototype['CopyTagsToSnapshots'] = undefined;

/**
 * @member {module:model/OpenZFSVolumeConfigurationOriginSnapshot} OriginSnapshot
 */
OpenZFSVolumeConfiguration.prototype['OriginSnapshot'] = undefined;

/**
 * @member {Boolean} ReadOnly
 */
OpenZFSVolumeConfiguration.prototype['ReadOnly'] = undefined;

/**
 * @member {Array} NfsExports
 */
OpenZFSVolumeConfiguration.prototype['NfsExports'] = undefined;

/**
 * @member {Array} UserAndGroupQuotas
 */
OpenZFSVolumeConfiguration.prototype['UserAndGroupQuotas'] = undefined;

/**
 * @member {String} RestoreToSnapshot
 */
OpenZFSVolumeConfiguration.prototype['RestoreToSnapshot'] = undefined;

/**
 * @member {Boolean} DeleteIntermediateSnaphots
 */
OpenZFSVolumeConfiguration.prototype['DeleteIntermediateSnaphots'] = undefined;

/**
 * @member {Boolean} DeleteClonedVolumes
 */
OpenZFSVolumeConfiguration.prototype['DeleteClonedVolumes'] = undefined;






export default OpenZFSVolumeConfiguration;

