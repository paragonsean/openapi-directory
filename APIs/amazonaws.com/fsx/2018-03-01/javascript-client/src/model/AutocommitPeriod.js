/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutocommitPeriodType from './AutocommitPeriodType';

/**
 * The AutocommitPeriod model module.
 * @module model/AutocommitPeriod
 * @version 2018-03-01
 */
class AutocommitPeriod {
    /**
     * Constructs a new <code>AutocommitPeriod</code>.
     * &lt;p&gt;Sets the autocommit period of files in an FSx for ONTAP SnapLock volume, which determines how long the files must remain unmodified before they&#39;re automatically transitioned to the write once, read many (WORM) state. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/worm-state.html#worm-state-autocommit\&quot;&gt;Autocommit&lt;/a&gt;. &lt;/p&gt;
     * @alias module:model/AutocommitPeriod
     * @param type {module:model/AutocommitPeriodType} 
     */
    constructor(type) { 
        
        AutocommitPeriod.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>AutocommitPeriod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutocommitPeriod} obj Optional instance to populate.
     * @return {module:model/AutocommitPeriod} The populated <code>AutocommitPeriod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutocommitPeriod();

            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], AutocommitPeriodType);
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutocommitPeriod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutocommitPeriod</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AutocommitPeriod.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          AutocommitPeriodType.validateJSON(data['Type']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          Number.validateJSON(data['Value']);
        }

        return true;
    }


}

AutocommitPeriod.RequiredProperties = ["Type"];

/**
 * @member {module:model/AutocommitPeriodType} Type
 */
AutocommitPeriod.prototype['Type'] = undefined;

/**
 * @member {Number} Value
 */
AutocommitPeriod.prototype['Value'] = undefined;






export default AutocommitPeriod;

