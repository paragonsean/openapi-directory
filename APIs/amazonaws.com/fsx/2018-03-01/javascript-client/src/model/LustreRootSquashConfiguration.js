/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LustreRootSquashConfiguration model module.
 * @module model/LustreRootSquashConfiguration
 * @version 2018-03-01
 */
class LustreRootSquashConfiguration {
    /**
     * Constructs a new <code>LustreRootSquashConfiguration</code>.
     * &lt;p&gt;The configuration for Lustre root squash used to restrict root-level access from clients that try to access your FSx for Lustre file system as root. Use the &lt;code&gt;RootSquash&lt;/code&gt; parameter to enable root squash. To learn more about Lustre root squash, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/LustreGuide/root-squash.html\&quot;&gt;Lustre root squash&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can also use the &lt;code&gt;NoSquashNids&lt;/code&gt; parameter to provide an array of clients who are not affected by the root squash setting. These clients will access the file system as root, with unrestricted privileges.&lt;/p&gt;
     * @alias module:model/LustreRootSquashConfiguration
     */
    constructor() { 
        
        LustreRootSquashConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LustreRootSquashConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LustreRootSquashConfiguration} obj Optional instance to populate.
     * @return {module:model/LustreRootSquashConfiguration} The populated <code>LustreRootSquashConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LustreRootSquashConfiguration();

            if (data.hasOwnProperty('RootSquash')) {
                obj['RootSquash'] = ApiClient.convertToType(data['RootSquash'], 'String');
            }
            if (data.hasOwnProperty('NoSquashNids')) {
                obj['NoSquashNids'] = ApiClient.convertToType(data['NoSquashNids'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LustreRootSquashConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LustreRootSquashConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `RootSquash`
        if (data['RootSquash']) { // data not null
          String.validateJSON(data['RootSquash']);
        }
        // validate the optional field `NoSquashNids`
        if (data['NoSquashNids']) { // data not null
          Array.validateJSON(data['NoSquashNids']);
        }

        return true;
    }


}



/**
 * @member {String} RootSquash
 */
LustreRootSquashConfiguration.prototype['RootSquash'] = undefined;

/**
 * @member {Array} NoSquashNids
 */
LustreRootSquashConfiguration.prototype['NoSquashNids'] = undefined;






export default LustreRootSquashConfiguration;

