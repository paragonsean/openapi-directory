/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OpenZFSClientConfiguration model module.
 * @module model/OpenZFSClientConfiguration
 * @version 2018-03-01
 */
class OpenZFSClientConfiguration {
    /**
     * Constructs a new <code>OpenZFSClientConfiguration</code>.
     * Specifies who can mount an OpenZFS file system and the options available while mounting the file system.
     * @alias module:model/OpenZFSClientConfiguration
     * @param clients {String} 
     * @param options {Array} 
     */
    constructor(clients, options) { 
        
        OpenZFSClientConfiguration.initialize(this, clients, options);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clients, options) { 
        obj['Clients'] = clients;
        obj['Options'] = options;
    }

    /**
     * Constructs a <code>OpenZFSClientConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenZFSClientConfiguration} obj Optional instance to populate.
     * @return {module:model/OpenZFSClientConfiguration} The populated <code>OpenZFSClientConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenZFSClientConfiguration();

            if (data.hasOwnProperty('Clients')) {
                obj['Clients'] = ApiClient.convertToType(data['Clients'], 'String');
            }
            if (data.hasOwnProperty('Options')) {
                obj['Options'] = ApiClient.convertToType(data['Options'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenZFSClientConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenZFSClientConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenZFSClientConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Clients`
        if (data['Clients']) { // data not null
          String.validateJSON(data['Clients']);
        }
        // validate the optional field `Options`
        if (data['Options']) { // data not null
          Array.validateJSON(data['Options']);
        }

        return true;
    }


}

OpenZFSClientConfiguration.RequiredProperties = ["Clients", "Options"];

/**
 * @member {String} Clients
 */
OpenZFSClientConfiguration.prototype['Clients'] = undefined;

/**
 * @member {Array} Options
 */
OpenZFSClientConfiguration.prototype['Options'] = undefined;






export default OpenZFSClientConfiguration;

