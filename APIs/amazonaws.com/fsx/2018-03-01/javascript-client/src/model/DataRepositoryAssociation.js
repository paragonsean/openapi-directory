/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataRepositoryAssociationNFS from './DataRepositoryAssociationNFS';
import DataRepositoryAssociationS3 from './DataRepositoryAssociationS3';
import DataRepositoryFailureDetails from './DataRepositoryFailureDetails';
import DataRepositoryLifecycle from './DataRepositoryLifecycle';
import Tag from './Tag';

/**
 * The DataRepositoryAssociation model module.
 * @module model/DataRepositoryAssociation
 * @version 2018-03-01
 */
class DataRepositoryAssociation {
    /**
     * Constructs a new <code>DataRepositoryAssociation</code>.
     * &lt;p&gt;The configuration of a data repository association that links an Amazon FSx for Lustre file system to an Amazon S3 bucket or an Amazon File Cache resource to an Amazon S3 bucket or an NFS file system. The data repository association configuration object is returned in the response of the following operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreateDataRepositoryAssociation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UpdateDataRepositoryAssociation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DescribeDataRepositoryAssociations&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data repository associations are supported on Amazon File Cache resources and all FSx for Lustre 2.12 and newer file systems, excluding &lt;code&gt;scratch_1&lt;/code&gt; deployment type.&lt;/p&gt;
     * @alias module:model/DataRepositoryAssociation
     */
    constructor() { 
        
        DataRepositoryAssociation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataRepositoryAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataRepositoryAssociation} obj Optional instance to populate.
     * @return {module:model/DataRepositoryAssociation} The populated <code>DataRepositoryAssociation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataRepositoryAssociation();

            if (data.hasOwnProperty('AssociationId')) {
                obj['AssociationId'] = ApiClient.convertToType(data['AssociationId'], 'String');
            }
            if (data.hasOwnProperty('ResourceARN')) {
                obj['ResourceARN'] = ApiClient.convertToType(data['ResourceARN'], 'String');
            }
            if (data.hasOwnProperty('FileSystemId')) {
                obj['FileSystemId'] = ApiClient.convertToType(data['FileSystemId'], 'String');
            }
            if (data.hasOwnProperty('Lifecycle')) {
                obj['Lifecycle'] = ApiClient.convertToType(data['Lifecycle'], DataRepositoryLifecycle);
            }
            if (data.hasOwnProperty('FailureDetails')) {
                obj['FailureDetails'] = DataRepositoryFailureDetails.constructFromObject(data['FailureDetails']);
            }
            if (data.hasOwnProperty('FileSystemPath')) {
                obj['FileSystemPath'] = ApiClient.convertToType(data['FileSystemPath'], 'String');
            }
            if (data.hasOwnProperty('DataRepositoryPath')) {
                obj['DataRepositoryPath'] = ApiClient.convertToType(data['DataRepositoryPath'], 'String');
            }
            if (data.hasOwnProperty('BatchImportMetaDataOnCreate')) {
                obj['BatchImportMetaDataOnCreate'] = ApiClient.convertToType(data['BatchImportMetaDataOnCreate'], 'Boolean');
            }
            if (data.hasOwnProperty('ImportedFileChunkSize')) {
                obj['ImportedFileChunkSize'] = ApiClient.convertToType(data['ImportedFileChunkSize'], 'Number');
            }
            if (data.hasOwnProperty('S3')) {
                obj['S3'] = DataRepositoryAssociationS3.constructFromObject(data['S3']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('FileCacheId')) {
                obj['FileCacheId'] = ApiClient.convertToType(data['FileCacheId'], 'String');
            }
            if (data.hasOwnProperty('FileCachePath')) {
                obj['FileCachePath'] = ApiClient.convertToType(data['FileCachePath'], 'String');
            }
            if (data.hasOwnProperty('DataRepositorySubdirectories')) {
                obj['DataRepositorySubdirectories'] = ApiClient.convertToType(data['DataRepositorySubdirectories'], Array);
            }
            if (data.hasOwnProperty('NFS')) {
                obj['NFS'] = DataRepositoryAssociationNFS.constructFromObject(data['NFS']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataRepositoryAssociation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataRepositoryAssociation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AssociationId`
        if (data['AssociationId']) { // data not null
          String.validateJSON(data['AssociationId']);
        }
        // ensure the json data is a string
        if (data['ResourceARN'] && !(typeof data['ResourceARN'] === 'string' || data['ResourceARN'] instanceof String)) {
            throw new Error("Expected the field `ResourceARN` to be a primitive type in the JSON string but got " + data['ResourceARN']);
        }
        // ensure the json data is a string
        if (data['FileSystemId'] && !(typeof data['FileSystemId'] === 'string' || data['FileSystemId'] instanceof String)) {
            throw new Error("Expected the field `FileSystemId` to be a primitive type in the JSON string but got " + data['FileSystemId']);
        }
        // validate the optional field `Lifecycle`
        if (data['Lifecycle']) { // data not null
          DataRepositoryLifecycle.validateJSON(data['Lifecycle']);
        }
        // validate the optional field `FailureDetails`
        if (data['FailureDetails']) { // data not null
          DataRepositoryFailureDetails.validateJSON(data['FailureDetails']);
        }
        // validate the optional field `FileSystemPath`
        if (data['FileSystemPath']) { // data not null
          String.validateJSON(data['FileSystemPath']);
        }
        // validate the optional field `DataRepositoryPath`
        if (data['DataRepositoryPath']) { // data not null
          String.validateJSON(data['DataRepositoryPath']);
        }
        // validate the optional field `BatchImportMetaDataOnCreate`
        if (data['BatchImportMetaDataOnCreate']) { // data not null
          Boolean.validateJSON(data['BatchImportMetaDataOnCreate']);
        }
        // validate the optional field `ImportedFileChunkSize`
        if (data['ImportedFileChunkSize']) { // data not null
          Number.validateJSON(data['ImportedFileChunkSize']);
        }
        // validate the optional field `S3`
        if (data['S3']) { // data not null
          DataRepositoryAssociationS3.validateJSON(data['S3']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }
        // validate the optional field `FileCacheId`
        if (data['FileCacheId']) { // data not null
          String.validateJSON(data['FileCacheId']);
        }
        // validate the optional field `FileCachePath`
        if (data['FileCachePath']) { // data not null
          String.validateJSON(data['FileCachePath']);
        }
        // validate the optional field `DataRepositorySubdirectories`
        if (data['DataRepositorySubdirectories']) { // data not null
          Array.validateJSON(data['DataRepositorySubdirectories']);
        }
        // validate the optional field `NFS`
        if (data['NFS']) { // data not null
          DataRepositoryAssociationNFS.validateJSON(data['NFS']);
        }

        return true;
    }


}



/**
 * @member {String} AssociationId
 */
DataRepositoryAssociation.prototype['AssociationId'] = undefined;

/**
 * The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.
 * @member {String} ResourceARN
 */
DataRepositoryAssociation.prototype['ResourceARN'] = undefined;

/**
 * The globally unique ID of the file system, assigned by Amazon FSx.
 * @member {String} FileSystemId
 */
DataRepositoryAssociation.prototype['FileSystemId'] = undefined;

/**
 * @member {module:model/DataRepositoryLifecycle} Lifecycle
 */
DataRepositoryAssociation.prototype['Lifecycle'] = undefined;

/**
 * @member {module:model/DataRepositoryFailureDetails} FailureDetails
 */
DataRepositoryAssociation.prototype['FailureDetails'] = undefined;

/**
 * @member {String} FileSystemPath
 */
DataRepositoryAssociation.prototype['FileSystemPath'] = undefined;

/**
 * @member {String} DataRepositoryPath
 */
DataRepositoryAssociation.prototype['DataRepositoryPath'] = undefined;

/**
 * @member {Boolean} BatchImportMetaDataOnCreate
 */
DataRepositoryAssociation.prototype['BatchImportMetaDataOnCreate'] = undefined;

/**
 * @member {Number} ImportedFileChunkSize
 */
DataRepositoryAssociation.prototype['ImportedFileChunkSize'] = undefined;

/**
 * @member {module:model/DataRepositoryAssociationS3} S3
 */
DataRepositoryAssociation.prototype['S3'] = undefined;

/**
 * A list of <code>Tag</code> values, with a maximum of 50 elements.
 * @member {Array.<module:model/Tag>} Tags
 */
DataRepositoryAssociation.prototype['Tags'] = undefined;

/**
 * The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
 * @member {Date} CreationTime
 */
DataRepositoryAssociation.prototype['CreationTime'] = undefined;

/**
 * @member {String} FileCacheId
 */
DataRepositoryAssociation.prototype['FileCacheId'] = undefined;

/**
 * @member {String} FileCachePath
 */
DataRepositoryAssociation.prototype['FileCachePath'] = undefined;

/**
 * @member {Array} DataRepositorySubdirectories
 */
DataRepositoryAssociation.prototype['DataRepositorySubdirectories'] = undefined;

/**
 * @member {module:model/DataRepositoryAssociationNFS} NFS
 */
DataRepositoryAssociation.prototype['NFS'] = undefined;






export default DataRepositoryAssociation;

