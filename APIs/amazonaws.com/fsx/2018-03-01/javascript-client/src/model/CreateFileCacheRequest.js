/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateFileCacheRequestLustreConfiguration from './CreateFileCacheRequestLustreConfiguration';
import FileCacheType from './FileCacheType';
import Tag from './Tag';

/**
 * The CreateFileCacheRequest model module.
 * @module model/CreateFileCacheRequest
 * @version 2018-03-01
 */
class CreateFileCacheRequest {
    /**
     * Constructs a new <code>CreateFileCacheRequest</code>.
     * @alias module:model/CreateFileCacheRequest
     * @param fileCacheType {module:model/FileCacheType} 
     * @param fileCacheTypeVersion {String} 
     * @param storageCapacity {Number} 
     * @param subnetIds {Array.<String>} A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.
     */
    constructor(fileCacheType, fileCacheTypeVersion, storageCapacity, subnetIds) { 
        
        CreateFileCacheRequest.initialize(this, fileCacheType, fileCacheTypeVersion, storageCapacity, subnetIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileCacheType, fileCacheTypeVersion, storageCapacity, subnetIds) { 
        obj['FileCacheType'] = fileCacheType;
        obj['FileCacheTypeVersion'] = fileCacheTypeVersion;
        obj['StorageCapacity'] = storageCapacity;
        obj['SubnetIds'] = subnetIds;
    }

    /**
     * Constructs a <code>CreateFileCacheRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateFileCacheRequest} obj Optional instance to populate.
     * @return {module:model/CreateFileCacheRequest} The populated <code>CreateFileCacheRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateFileCacheRequest();

            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('FileCacheType')) {
                obj['FileCacheType'] = ApiClient.convertToType(data['FileCacheType'], FileCacheType);
            }
            if (data.hasOwnProperty('FileCacheTypeVersion')) {
                obj['FileCacheTypeVersion'] = ApiClient.convertToType(data['FileCacheTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('StorageCapacity')) {
                obj['StorageCapacity'] = ApiClient.convertToType(data['StorageCapacity'], 'Number');
            }
            if (data.hasOwnProperty('SubnetIds')) {
                obj['SubnetIds'] = ApiClient.convertToType(data['SubnetIds'], ['String']);
            }
            if (data.hasOwnProperty('SecurityGroupIds')) {
                obj['SecurityGroupIds'] = ApiClient.convertToType(data['SecurityGroupIds'], Array);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
            if (data.hasOwnProperty('CopyTagsToDataRepositoryAssociations')) {
                obj['CopyTagsToDataRepositoryAssociations'] = ApiClient.convertToType(data['CopyTagsToDataRepositoryAssociations'], 'Boolean');
            }
            if (data.hasOwnProperty('KmsKeyId')) {
                obj['KmsKeyId'] = ApiClient.convertToType(data['KmsKeyId'], 'String');
            }
            if (data.hasOwnProperty('LustreConfiguration')) {
                obj['LustreConfiguration'] = CreateFileCacheRequestLustreConfiguration.constructFromObject(data['LustreConfiguration']);
            }
            if (data.hasOwnProperty('DataRepositoryAssociations')) {
                obj['DataRepositoryAssociations'] = ApiClient.convertToType(data['DataRepositoryAssociations'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateFileCacheRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateFileCacheRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateFileCacheRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ClientRequestToken`
        if (data['ClientRequestToken']) { // data not null
          String.validateJSON(data['ClientRequestToken']);
        }
        // validate the optional field `FileCacheType`
        if (data['FileCacheType']) { // data not null
          FileCacheType.validateJSON(data['FileCacheType']);
        }
        // validate the optional field `FileCacheTypeVersion`
        if (data['FileCacheTypeVersion']) { // data not null
          String.validateJSON(data['FileCacheTypeVersion']);
        }
        // validate the optional field `StorageCapacity`
        if (data['StorageCapacity']) { // data not null
          Number.validateJSON(data['StorageCapacity']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SubnetIds'])) {
            throw new Error("Expected the field `SubnetIds` to be an array in the JSON data but got " + data['SubnetIds']);
        }
        // validate the optional field `SecurityGroupIds`
        if (data['SecurityGroupIds']) { // data not null
          Array.validateJSON(data['SecurityGroupIds']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }
        // validate the optional field `CopyTagsToDataRepositoryAssociations`
        if (data['CopyTagsToDataRepositoryAssociations']) { // data not null
          Boolean.validateJSON(data['CopyTagsToDataRepositoryAssociations']);
        }
        // validate the optional field `KmsKeyId`
        if (data['KmsKeyId']) { // data not null
          String.validateJSON(data['KmsKeyId']);
        }
        // validate the optional field `LustreConfiguration`
        if (data['LustreConfiguration']) { // data not null
          CreateFileCacheRequestLustreConfiguration.validateJSON(data['LustreConfiguration']);
        }
        // validate the optional field `DataRepositoryAssociations`
        if (data['DataRepositoryAssociations']) { // data not null
          Array.validateJSON(data['DataRepositoryAssociations']);
        }

        return true;
    }


}

CreateFileCacheRequest.RequiredProperties = ["FileCacheType", "FileCacheTypeVersion", "StorageCapacity", "SubnetIds"];

/**
 * @member {String} ClientRequestToken
 */
CreateFileCacheRequest.prototype['ClientRequestToken'] = undefined;

/**
 * @member {module:model/FileCacheType} FileCacheType
 */
CreateFileCacheRequest.prototype['FileCacheType'] = undefined;

/**
 * @member {String} FileCacheTypeVersion
 */
CreateFileCacheRequest.prototype['FileCacheTypeVersion'] = undefined;

/**
 * @member {Number} StorageCapacity
 */
CreateFileCacheRequest.prototype['StorageCapacity'] = undefined;

/**
 * A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.
 * @member {Array.<String>} SubnetIds
 */
CreateFileCacheRequest.prototype['SubnetIds'] = undefined;

/**
 * @member {Array} SecurityGroupIds
 */
CreateFileCacheRequest.prototype['SecurityGroupIds'] = undefined;

/**
 * A list of <code>Tag</code> values, with a maximum of 50 elements.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateFileCacheRequest.prototype['Tags'] = undefined;

/**
 * @member {Boolean} CopyTagsToDataRepositoryAssociations
 */
CreateFileCacheRequest.prototype['CopyTagsToDataRepositoryAssociations'] = undefined;

/**
 * @member {String} KmsKeyId
 */
CreateFileCacheRequest.prototype['KmsKeyId'] = undefined;

/**
 * @member {module:model/CreateFileCacheRequestLustreConfiguration} LustreConfiguration
 */
CreateFileCacheRequest.prototype['LustreConfiguration'] = undefined;

/**
 * @member {Array} DataRepositoryAssociations
 */
CreateFileCacheRequest.prototype['DataRepositoryAssociations'] = undefined;






export default CreateFileCacheRequest;

