/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SnaplockRetentionPeriodDefaultRetention from './SnaplockRetentionPeriodDefaultRetention';
import SnaplockRetentionPeriodMaximumRetention from './SnaplockRetentionPeriodMaximumRetention';
import SnaplockRetentionPeriodMinimumRetention from './SnaplockRetentionPeriodMinimumRetention';

/**
 * The SnaplockRetentionPeriod model module.
 * @module model/SnaplockRetentionPeriod
 * @version 2018-03-01
 */
class SnaplockRetentionPeriod {
    /**
     * Constructs a new <code>SnaplockRetentionPeriod</code>.
     * The configuration to set the retention period of an FSx for ONTAP SnapLock volume. The retention period includes default, maximum, and minimum settings. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/snaplock-retention.html\&quot;&gt;Working with the retention period in SnapLock&lt;/a&gt;. 
     * @alias module:model/SnaplockRetentionPeriod
     * @param defaultRetention {module:model/SnaplockRetentionPeriodDefaultRetention} 
     * @param minimumRetention {module:model/SnaplockRetentionPeriodMinimumRetention} 
     * @param maximumRetention {module:model/SnaplockRetentionPeriodMaximumRetention} 
     */
    constructor(defaultRetention, minimumRetention, maximumRetention) { 
        
        SnaplockRetentionPeriod.initialize(this, defaultRetention, minimumRetention, maximumRetention);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultRetention, minimumRetention, maximumRetention) { 
        obj['DefaultRetention'] = defaultRetention;
        obj['MinimumRetention'] = minimumRetention;
        obj['MaximumRetention'] = maximumRetention;
    }

    /**
     * Constructs a <code>SnaplockRetentionPeriod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SnaplockRetentionPeriod} obj Optional instance to populate.
     * @return {module:model/SnaplockRetentionPeriod} The populated <code>SnaplockRetentionPeriod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SnaplockRetentionPeriod();

            if (data.hasOwnProperty('DefaultRetention')) {
                obj['DefaultRetention'] = SnaplockRetentionPeriodDefaultRetention.constructFromObject(data['DefaultRetention']);
            }
            if (data.hasOwnProperty('MinimumRetention')) {
                obj['MinimumRetention'] = SnaplockRetentionPeriodMinimumRetention.constructFromObject(data['MinimumRetention']);
            }
            if (data.hasOwnProperty('MaximumRetention')) {
                obj['MaximumRetention'] = SnaplockRetentionPeriodMaximumRetention.constructFromObject(data['MaximumRetention']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SnaplockRetentionPeriod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SnaplockRetentionPeriod</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SnaplockRetentionPeriod.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DefaultRetention`
        if (data['DefaultRetention']) { // data not null
          SnaplockRetentionPeriodDefaultRetention.validateJSON(data['DefaultRetention']);
        }
        // validate the optional field `MinimumRetention`
        if (data['MinimumRetention']) { // data not null
          SnaplockRetentionPeriodMinimumRetention.validateJSON(data['MinimumRetention']);
        }
        // validate the optional field `MaximumRetention`
        if (data['MaximumRetention']) { // data not null
          SnaplockRetentionPeriodMaximumRetention.validateJSON(data['MaximumRetention']);
        }

        return true;
    }


}

SnaplockRetentionPeriod.RequiredProperties = ["DefaultRetention", "MinimumRetention", "MaximumRetention"];

/**
 * @member {module:model/SnaplockRetentionPeriodDefaultRetention} DefaultRetention
 */
SnaplockRetentionPeriod.prototype['DefaultRetention'] = undefined;

/**
 * @member {module:model/SnaplockRetentionPeriodMinimumRetention} MinimumRetention
 */
SnaplockRetentionPeriod.prototype['MinimumRetention'] = undefined;

/**
 * @member {module:model/SnaplockRetentionPeriodMaximumRetention} MaximumRetention
 */
SnaplockRetentionPeriod.prototype['MaximumRetention'] = undefined;






export default SnaplockRetentionPeriod;

