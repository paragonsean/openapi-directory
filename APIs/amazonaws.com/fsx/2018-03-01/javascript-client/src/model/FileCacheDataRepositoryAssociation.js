/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileCacheDataRepositoryAssociationNFS from './FileCacheDataRepositoryAssociationNFS';

/**
 * The FileCacheDataRepositoryAssociation model module.
 * @module model/FileCacheDataRepositoryAssociation
 * @version 2018-03-01
 */
class FileCacheDataRepositoryAssociation {
    /**
     * Constructs a new <code>FileCacheDataRepositoryAssociation</code>.
     * &lt;p&gt;The configuration for a data repository association (DRA) to be created during the Amazon File Cache resource creation. The DRA links the cache to either an Amazon S3 bucket or prefix, or a Network File System (NFS) data repository that supports the NFSv3 protocol.&lt;/p&gt; &lt;p&gt;The DRA does not support automatic import or automatic export.&lt;/p&gt;
     * @alias module:model/FileCacheDataRepositoryAssociation
     * @param fileCachePath {String} 
     * @param dataRepositoryPath {String} 
     */
    constructor(fileCachePath, dataRepositoryPath) { 
        
        FileCacheDataRepositoryAssociation.initialize(this, fileCachePath, dataRepositoryPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileCachePath, dataRepositoryPath) { 
        obj['FileCachePath'] = fileCachePath;
        obj['DataRepositoryPath'] = dataRepositoryPath;
    }

    /**
     * Constructs a <code>FileCacheDataRepositoryAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileCacheDataRepositoryAssociation} obj Optional instance to populate.
     * @return {module:model/FileCacheDataRepositoryAssociation} The populated <code>FileCacheDataRepositoryAssociation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileCacheDataRepositoryAssociation();

            if (data.hasOwnProperty('FileCachePath')) {
                obj['FileCachePath'] = ApiClient.convertToType(data['FileCachePath'], 'String');
            }
            if (data.hasOwnProperty('DataRepositoryPath')) {
                obj['DataRepositoryPath'] = ApiClient.convertToType(data['DataRepositoryPath'], 'String');
            }
            if (data.hasOwnProperty('DataRepositorySubdirectories')) {
                obj['DataRepositorySubdirectories'] = ApiClient.convertToType(data['DataRepositorySubdirectories'], Array);
            }
            if (data.hasOwnProperty('NFS')) {
                obj['NFS'] = FileCacheDataRepositoryAssociationNFS.constructFromObject(data['NFS']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileCacheDataRepositoryAssociation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileCacheDataRepositoryAssociation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileCacheDataRepositoryAssociation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FileCachePath`
        if (data['FileCachePath']) { // data not null
          String.validateJSON(data['FileCachePath']);
        }
        // validate the optional field `DataRepositoryPath`
        if (data['DataRepositoryPath']) { // data not null
          String.validateJSON(data['DataRepositoryPath']);
        }
        // validate the optional field `DataRepositorySubdirectories`
        if (data['DataRepositorySubdirectories']) { // data not null
          Array.validateJSON(data['DataRepositorySubdirectories']);
        }
        // validate the optional field `NFS`
        if (data['NFS']) { // data not null
          FileCacheDataRepositoryAssociationNFS.validateJSON(data['NFS']);
        }

        return true;
    }


}

FileCacheDataRepositoryAssociation.RequiredProperties = ["FileCachePath", "DataRepositoryPath"];

/**
 * @member {String} FileCachePath
 */
FileCacheDataRepositoryAssociation.prototype['FileCachePath'] = undefined;

/**
 * @member {String} DataRepositoryPath
 */
FileCacheDataRepositoryAssociation.prototype['DataRepositoryPath'] = undefined;

/**
 * @member {Array} DataRepositorySubdirectories
 */
FileCacheDataRepositoryAssociation.prototype['DataRepositorySubdirectories'] = undefined;

/**
 * @member {module:model/FileCacheDataRepositoryAssociationNFS} NFS
 */
FileCacheDataRepositoryAssociation.prototype['NFS'] = undefined;






export default FileCacheDataRepositoryAssociation;

