/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NfsVersion from './NfsVersion';

/**
 * The FileCacheNFSConfiguration model module.
 * @module model/FileCacheNFSConfiguration
 * @version 2018-03-01
 */
class FileCacheNFSConfiguration {
    /**
     * Constructs a new <code>FileCacheNFSConfiguration</code>.
     * The configuration for an NFS data repository association (DRA) created during the creation of the Amazon File Cache resource.
     * @alias module:model/FileCacheNFSConfiguration
     * @param version {module:model/NfsVersion} 
     */
    constructor(version) { 
        
        FileCacheNFSConfiguration.initialize(this, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, version) { 
        obj['Version'] = version;
    }

    /**
     * Constructs a <code>FileCacheNFSConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileCacheNFSConfiguration} obj Optional instance to populate.
     * @return {module:model/FileCacheNFSConfiguration} The populated <code>FileCacheNFSConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileCacheNFSConfiguration();

            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], NfsVersion);
            }
            if (data.hasOwnProperty('DnsIps')) {
                obj['DnsIps'] = ApiClient.convertToType(data['DnsIps'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileCacheNFSConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileCacheNFSConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileCacheNFSConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Version`
        if (data['Version']) { // data not null
          NfsVersion.validateJSON(data['Version']);
        }
        // validate the optional field `DnsIps`
        if (data['DnsIps']) { // data not null
          Array.validateJSON(data['DnsIps']);
        }

        return true;
    }


}

FileCacheNFSConfiguration.RequiredProperties = ["Version"];

/**
 * @member {module:model/NfsVersion} Version
 */
FileCacheNFSConfiguration.prototype['Version'] = undefined;

/**
 * @member {Array} DnsIps
 */
FileCacheNFSConfiguration.prototype['DnsIps'] = undefined;






export default FileCacheNFSConfiguration;

