/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskIopsConfigurationMode from './DiskIopsConfigurationMode';

/**
 * The DiskIopsConfiguration model module.
 * @module model/DiskIopsConfiguration
 * @version 2018-03-01
 */
class DiskIopsConfiguration {
    /**
     * Constructs a new <code>DiskIopsConfiguration</code>.
     * The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or FSx for OpenZFS file system. By default, Amazon FSx automatically provisions 3 IOPS per GB of storage capacity. You can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how it is was provisioned, or the mode (by the customer or by Amazon FSx).
     * @alias module:model/DiskIopsConfiguration
     */
    constructor() { 
        
        DiskIopsConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiskIopsConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiskIopsConfiguration} obj Optional instance to populate.
     * @return {module:model/DiskIopsConfiguration} The populated <code>DiskIopsConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiskIopsConfiguration();

            if (data.hasOwnProperty('Mode')) {
                obj['Mode'] = ApiClient.convertToType(data['Mode'], DiskIopsConfigurationMode);
            }
            if (data.hasOwnProperty('Iops')) {
                obj['Iops'] = ApiClient.convertToType(data['Iops'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiskIopsConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiskIopsConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Mode`
        if (data['Mode']) { // data not null
          DiskIopsConfigurationMode.validateJSON(data['Mode']);
        }
        // validate the optional field `Iops`
        if (data['Iops']) { // data not null
          Number.validateJSON(data['Iops']);
        }

        return true;
    }


}



/**
 * @member {module:model/DiskIopsConfigurationMode} Mode
 */
DiskIopsConfiguration.prototype['Mode'] = undefined;

/**
 * @member {Number} Iops
 */
DiskIopsConfiguration.prototype['Iops'] = undefined;






export default DiskIopsConfiguration;

