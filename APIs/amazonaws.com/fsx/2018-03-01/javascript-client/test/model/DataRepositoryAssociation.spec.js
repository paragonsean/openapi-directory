/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonFsx);
  }
}(this, function(expect, AmazonFsx) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonFsx.DataRepositoryAssociation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataRepositoryAssociation', function() {
    it('should create an instance of DataRepositoryAssociation', function() {
      // uncomment below and update the code to test DataRepositoryAssociation
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be.a(AmazonFsx.DataRepositoryAssociation);
    });

    it('should have the property associationId (base name: "AssociationId")', function() {
      // uncomment below and update the code to test the property associationId
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property resourceARN (base name: "ResourceARN")', function() {
      // uncomment below and update the code to test the property resourceARN
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property fileSystemId (base name: "FileSystemId")', function() {
      // uncomment below and update the code to test the property fileSystemId
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property lifecycle (base name: "Lifecycle")', function() {
      // uncomment below and update the code to test the property lifecycle
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property failureDetails (base name: "FailureDetails")', function() {
      // uncomment below and update the code to test the property failureDetails
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property fileSystemPath (base name: "FileSystemPath")', function() {
      // uncomment below and update the code to test the property fileSystemPath
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property dataRepositoryPath (base name: "DataRepositoryPath")', function() {
      // uncomment below and update the code to test the property dataRepositoryPath
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property batchImportMetaDataOnCreate (base name: "BatchImportMetaDataOnCreate")', function() {
      // uncomment below and update the code to test the property batchImportMetaDataOnCreate
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property importedFileChunkSize (base name: "ImportedFileChunkSize")', function() {
      // uncomment below and update the code to test the property importedFileChunkSize
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property s3 (base name: "S3")', function() {
      // uncomment below and update the code to test the property s3
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "CreationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property fileCacheId (base name: "FileCacheId")', function() {
      // uncomment below and update the code to test the property fileCacheId
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property fileCachePath (base name: "FileCachePath")', function() {
      // uncomment below and update the code to test the property fileCachePath
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property dataRepositorySubdirectories (base name: "DataRepositorySubdirectories")', function() {
      // uncomment below and update the code to test the property dataRepositorySubdirectories
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

    it('should have the property NFS (base name: "NFS")', function() {
      // uncomment below and update the code to test the property NFS
      //var instance = new AmazonFsx.DataRepositoryAssociation();
      //expect(instance).to.be();
    });

  });

}));
