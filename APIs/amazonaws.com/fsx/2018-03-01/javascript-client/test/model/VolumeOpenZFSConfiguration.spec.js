/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonFsx);
  }
}(this, function(expect, AmazonFsx) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonFsx.VolumeOpenZFSConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VolumeOpenZFSConfiguration', function() {
    it('should create an instance of VolumeOpenZFSConfiguration', function() {
      // uncomment below and update the code to test VolumeOpenZFSConfiguration
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be.a(AmazonFsx.VolumeOpenZFSConfiguration);
    });

    it('should have the property parentVolumeId (base name: "ParentVolumeId")', function() {
      // uncomment below and update the code to test the property parentVolumeId
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property volumePath (base name: "VolumePath")', function() {
      // uncomment below and update the code to test the property volumePath
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property storageCapacityReservationGiB (base name: "StorageCapacityReservationGiB")', function() {
      // uncomment below and update the code to test the property storageCapacityReservationGiB
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property storageCapacityQuotaGiB (base name: "StorageCapacityQuotaGiB")', function() {
      // uncomment below and update the code to test the property storageCapacityQuotaGiB
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property recordSizeKiB (base name: "RecordSizeKiB")', function() {
      // uncomment below and update the code to test the property recordSizeKiB
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dataCompressionType (base name: "DataCompressionType")', function() {
      // uncomment below and update the code to test the property dataCompressionType
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property copyTagsToSnapshots (base name: "CopyTagsToSnapshots")', function() {
      // uncomment below and update the code to test the property copyTagsToSnapshots
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property originSnapshot (base name: "OriginSnapshot")', function() {
      // uncomment below and update the code to test the property originSnapshot
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "ReadOnly")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property nfsExports (base name: "NfsExports")', function() {
      // uncomment below and update the code to test the property nfsExports
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property userAndGroupQuotas (base name: "UserAndGroupQuotas")', function() {
      // uncomment below and update the code to test the property userAndGroupQuotas
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property restoreToSnapshot (base name: "RestoreToSnapshot")', function() {
      // uncomment below and update the code to test the property restoreToSnapshot
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property deleteIntermediateSnaphots (base name: "DeleteIntermediateSnaphots")', function() {
      // uncomment below and update the code to test the property deleteIntermediateSnaphots
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property deleteClonedVolumes (base name: "DeleteClonedVolumes")', function() {
      // uncomment below and update the code to test the property deleteClonedVolumes
      //var instance = new AmazonFsx.VolumeOpenZFSConfiguration();
      //expect(instance).to.be();
    });

  });

}));
