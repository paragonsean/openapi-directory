/**
 * Amazon FSx
 * Amazon FSx is a fully managed service that makes it easy for storage and application administrators to launch and use shared file storage.
 *
 * The version of the OpenAPI document: 2018-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonFsx);
  }
}(this, function(expect, AmazonFsx) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonFsx.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateFileSystemAliases', function() {
      it('should call associateFileSystemAliases successfully', function(done) {
        //uncomment below and update the code to test associateFileSystemAliases
        //instance.associateFileSystemAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelDataRepositoryTask', function() {
      it('should call cancelDataRepositoryTask successfully', function(done) {
        //uncomment below and update the code to test cancelDataRepositoryTask
        //instance.cancelDataRepositoryTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyBackup', function() {
      it('should call copyBackup successfully', function(done) {
        //uncomment below and update the code to test copyBackup
        //instance.copyBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackup', function() {
      it('should call createBackup successfully', function(done) {
        //uncomment below and update the code to test createBackup
        //instance.createBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataRepositoryAssociation', function() {
      it('should call createDataRepositoryAssociation successfully', function(done) {
        //uncomment below and update the code to test createDataRepositoryAssociation
        //instance.createDataRepositoryAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataRepositoryTask', function() {
      it('should call createDataRepositoryTask successfully', function(done) {
        //uncomment below and update the code to test createDataRepositoryTask
        //instance.createDataRepositoryTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFileCache', function() {
      it('should call createFileCache successfully', function(done) {
        //uncomment below and update the code to test createFileCache
        //instance.createFileCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFileSystem', function() {
      it('should call createFileSystem successfully', function(done) {
        //uncomment below and update the code to test createFileSystem
        //instance.createFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFileSystemFromBackup', function() {
      it('should call createFileSystemFromBackup successfully', function(done) {
        //uncomment below and update the code to test createFileSystemFromBackup
        //instance.createFileSystemFromBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSnapshot', function() {
      it('should call createSnapshot successfully', function(done) {
        //uncomment below and update the code to test createSnapshot
        //instance.createSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorageVirtualMachine', function() {
      it('should call createStorageVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test createStorageVirtualMachine
        //instance.createStorageVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVolume', function() {
      it('should call createVolume successfully', function(done) {
        //uncomment below and update the code to test createVolume
        //instance.createVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVolumeFromBackup', function() {
      it('should call createVolumeFromBackup successfully', function(done) {
        //uncomment below and update the code to test createVolumeFromBackup
        //instance.createVolumeFromBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackup', function() {
      it('should call deleteBackup successfully', function(done) {
        //uncomment below and update the code to test deleteBackup
        //instance.deleteBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataRepositoryAssociation', function() {
      it('should call deleteDataRepositoryAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteDataRepositoryAssociation
        //instance.deleteDataRepositoryAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileCache', function() {
      it('should call deleteFileCache successfully', function(done) {
        //uncomment below and update the code to test deleteFileCache
        //instance.deleteFileCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileSystem', function() {
      it('should call deleteFileSystem successfully', function(done) {
        //uncomment below and update the code to test deleteFileSystem
        //instance.deleteFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSnapshot', function() {
      it('should call deleteSnapshot successfully', function(done) {
        //uncomment below and update the code to test deleteSnapshot
        //instance.deleteSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageVirtualMachine', function() {
      it('should call deleteStorageVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test deleteStorageVirtualMachine
        //instance.deleteStorageVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVolume', function() {
      it('should call deleteVolume successfully', function(done) {
        //uncomment below and update the code to test deleteVolume
        //instance.deleteVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBackups', function() {
      it('should call describeBackups successfully', function(done) {
        //uncomment below and update the code to test describeBackups
        //instance.describeBackups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataRepositoryAssociations', function() {
      it('should call describeDataRepositoryAssociations successfully', function(done) {
        //uncomment below and update the code to test describeDataRepositoryAssociations
        //instance.describeDataRepositoryAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataRepositoryTasks', function() {
      it('should call describeDataRepositoryTasks successfully', function(done) {
        //uncomment below and update the code to test describeDataRepositoryTasks
        //instance.describeDataRepositoryTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFileCaches', function() {
      it('should call describeFileCaches successfully', function(done) {
        //uncomment below and update the code to test describeFileCaches
        //instance.describeFileCaches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFileSystemAliases', function() {
      it('should call describeFileSystemAliases successfully', function(done) {
        //uncomment below and update the code to test describeFileSystemAliases
        //instance.describeFileSystemAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFileSystems', function() {
      it('should call describeFileSystems successfully', function(done) {
        //uncomment below and update the code to test describeFileSystems
        //instance.describeFileSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSnapshots', function() {
      it('should call describeSnapshots successfully', function(done) {
        //uncomment below and update the code to test describeSnapshots
        //instance.describeSnapshots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeStorageVirtualMachines', function() {
      it('should call describeStorageVirtualMachines successfully', function(done) {
        //uncomment below and update the code to test describeStorageVirtualMachines
        //instance.describeStorageVirtualMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVolumes', function() {
      it('should call describeVolumes successfully', function(done) {
        //uncomment below and update the code to test describeVolumes
        //instance.describeVolumes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateFileSystemAliases', function() {
      it('should call disassociateFileSystemAliases successfully', function(done) {
        //uncomment below and update the code to test disassociateFileSystemAliases
        //instance.disassociateFileSystemAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('releaseFileSystemNfsV3Locks', function() {
      it('should call releaseFileSystemNfsV3Locks successfully', function(done) {
        //uncomment below and update the code to test releaseFileSystemNfsV3Locks
        //instance.releaseFileSystemNfsV3Locks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreVolumeFromSnapshot', function() {
      it('should call restoreVolumeFromSnapshot successfully', function(done) {
        //uncomment below and update the code to test restoreVolumeFromSnapshot
        //instance.restoreVolumeFromSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataRepositoryAssociation', function() {
      it('should call updateDataRepositoryAssociation successfully', function(done) {
        //uncomment below and update the code to test updateDataRepositoryAssociation
        //instance.updateDataRepositoryAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFileCache', function() {
      it('should call updateFileCache successfully', function(done) {
        //uncomment below and update the code to test updateFileCache
        //instance.updateFileCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFileSystem', function() {
      it('should call updateFileSystem successfully', function(done) {
        //uncomment below and update the code to test updateFileSystem
        //instance.updateFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSnapshot', function() {
      it('should call updateSnapshot successfully', function(done) {
        //uncomment below and update the code to test updateSnapshot
        //instance.updateSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStorageVirtualMachine', function() {
      it('should call updateStorageVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test updateStorageVirtualMachine
        //instance.updateStorageVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVolume', function() {
      it('should call updateVolume successfully', function(done) {
        //uncomment below and update the code to test updateVolume
        //instance.updateVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
