/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackfillMode;
import org.openapitools.client.model.FlexMatchMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Guidelines for use with FlexMatch to match players into games. All matchmaking requests must specify a matchmaking configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchmakingConfiguration {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONFIGURATION_ARN = "ConfigurationArn";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ARN)
  private String configurationArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GAME_SESSION_QUEUE_ARNS = "GameSessionQueueArns";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_QUEUE_ARNS)
  private List gameSessionQueueArns;

  public static final String SERIALIZED_NAME_REQUEST_TIMEOUT_SECONDS = "RequestTimeoutSeconds";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIMEOUT_SECONDS)
  private Integer requestTimeoutSeconds;

  public static final String SERIALIZED_NAME_ACCEPTANCE_TIMEOUT_SECONDS = "AcceptanceTimeoutSeconds";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_TIMEOUT_SECONDS)
  private Integer acceptanceTimeoutSeconds;

  public static final String SERIALIZED_NAME_ACCEPTANCE_REQUIRED = "AcceptanceRequired";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_REQUIRED)
  private Boolean acceptanceRequired;

  public static final String SERIALIZED_NAME_RULE_SET_NAME = "RuleSetName";
  @SerializedName(SERIALIZED_NAME_RULE_SET_NAME)
  private String ruleSetName;

  public static final String SERIALIZED_NAME_RULE_SET_ARN = "RuleSetArn";
  @SerializedName(SERIALIZED_NAME_RULE_SET_ARN)
  private String ruleSetArn;

  public static final String SERIALIZED_NAME_NOTIFICATION_TARGET = "NotificationTarget";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TARGET)
  private String notificationTarget;

  public static final String SERIALIZED_NAME_ADDITIONAL_PLAYER_COUNT = "AdditionalPlayerCount";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PLAYER_COUNT)
  private Integer additionalPlayerCount;

  public static final String SERIALIZED_NAME_CUSTOM_EVENT_DATA = "CustomEventData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EVENT_DATA)
  private String customEventData;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_GAME_PROPERTIES = "GameProperties";
  @SerializedName(SERIALIZED_NAME_GAME_PROPERTIES)
  private List gameProperties;

  public static final String SERIALIZED_NAME_GAME_SESSION_DATA = "GameSessionData";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_DATA)
  private String gameSessionData;

  public static final String SERIALIZED_NAME_BACKFILL_MODE = "BackfillMode";
  @SerializedName(SERIALIZED_NAME_BACKFILL_MODE)
  private BackfillMode backfillMode;

  public static final String SERIALIZED_NAME_FLEX_MATCH_MODE = "FlexMatchMode";
  @SerializedName(SERIALIZED_NAME_FLEX_MATCH_MODE)
  private FlexMatchMode flexMatchMode;

  public MatchmakingConfiguration() {
  }

  public MatchmakingConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MatchmakingConfiguration configurationArn(String configurationArn) {
    this.configurationArn = configurationArn;
    return this;
  }

  /**
   * Get configurationArn
   * @return configurationArn
   */
  @javax.annotation.Nullable
  public String getConfigurationArn() {
    return configurationArn;
  }

  public void setConfigurationArn(String configurationArn) {
    this.configurationArn = configurationArn;
  }


  public MatchmakingConfiguration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MatchmakingConfiguration gameSessionQueueArns(List gameSessionQueueArns) {
    this.gameSessionQueueArns = gameSessionQueueArns;
    return this;
  }

  /**
   * Get gameSessionQueueArns
   * @return gameSessionQueueArns
   */
  @javax.annotation.Nullable
  public List getGameSessionQueueArns() {
    return gameSessionQueueArns;
  }

  public void setGameSessionQueueArns(List gameSessionQueueArns) {
    this.gameSessionQueueArns = gameSessionQueueArns;
  }


  public MatchmakingConfiguration requestTimeoutSeconds(Integer requestTimeoutSeconds) {
    this.requestTimeoutSeconds = requestTimeoutSeconds;
    return this;
  }

  /**
   * Get requestTimeoutSeconds
   * @return requestTimeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getRequestTimeoutSeconds() {
    return requestTimeoutSeconds;
  }

  public void setRequestTimeoutSeconds(Integer requestTimeoutSeconds) {
    this.requestTimeoutSeconds = requestTimeoutSeconds;
  }


  public MatchmakingConfiguration acceptanceTimeoutSeconds(Integer acceptanceTimeoutSeconds) {
    this.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds;
    return this;
  }

  /**
   * Get acceptanceTimeoutSeconds
   * @return acceptanceTimeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getAcceptanceTimeoutSeconds() {
    return acceptanceTimeoutSeconds;
  }

  public void setAcceptanceTimeoutSeconds(Integer acceptanceTimeoutSeconds) {
    this.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds;
  }


  public MatchmakingConfiguration acceptanceRequired(Boolean acceptanceRequired) {
    this.acceptanceRequired = acceptanceRequired;
    return this;
  }

  /**
   * Get acceptanceRequired
   * @return acceptanceRequired
   */
  @javax.annotation.Nullable
  public Boolean getAcceptanceRequired() {
    return acceptanceRequired;
  }

  public void setAcceptanceRequired(Boolean acceptanceRequired) {
    this.acceptanceRequired = acceptanceRequired;
  }


  public MatchmakingConfiguration ruleSetName(String ruleSetName) {
    this.ruleSetName = ruleSetName;
    return this;
  }

  /**
   * Get ruleSetName
   * @return ruleSetName
   */
  @javax.annotation.Nullable
  public String getRuleSetName() {
    return ruleSetName;
  }

  public void setRuleSetName(String ruleSetName) {
    this.ruleSetName = ruleSetName;
  }


  public MatchmakingConfiguration ruleSetArn(String ruleSetArn) {
    this.ruleSetArn = ruleSetArn;
    return this;
  }

  /**
   * Get ruleSetArn
   * @return ruleSetArn
   */
  @javax.annotation.Nullable
  public String getRuleSetArn() {
    return ruleSetArn;
  }

  public void setRuleSetArn(String ruleSetArn) {
    this.ruleSetArn = ruleSetArn;
  }


  public MatchmakingConfiguration notificationTarget(String notificationTarget) {
    this.notificationTarget = notificationTarget;
    return this;
  }

  /**
   * Get notificationTarget
   * @return notificationTarget
   */
  @javax.annotation.Nullable
  public String getNotificationTarget() {
    return notificationTarget;
  }

  public void setNotificationTarget(String notificationTarget) {
    this.notificationTarget = notificationTarget;
  }


  public MatchmakingConfiguration additionalPlayerCount(Integer additionalPlayerCount) {
    this.additionalPlayerCount = additionalPlayerCount;
    return this;
  }

  /**
   * Get additionalPlayerCount
   * @return additionalPlayerCount
   */
  @javax.annotation.Nullable
  public Integer getAdditionalPlayerCount() {
    return additionalPlayerCount;
  }

  public void setAdditionalPlayerCount(Integer additionalPlayerCount) {
    this.additionalPlayerCount = additionalPlayerCount;
  }


  public MatchmakingConfiguration customEventData(String customEventData) {
    this.customEventData = customEventData;
    return this;
  }

  /**
   * Get customEventData
   * @return customEventData
   */
  @javax.annotation.Nullable
  public String getCustomEventData() {
    return customEventData;
  }

  public void setCustomEventData(String customEventData) {
    this.customEventData = customEventData;
  }


  public MatchmakingConfiguration creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public MatchmakingConfiguration gameProperties(List gameProperties) {
    this.gameProperties = gameProperties;
    return this;
  }

  /**
   * Get gameProperties
   * @return gameProperties
   */
  @javax.annotation.Nullable
  public List getGameProperties() {
    return gameProperties;
  }

  public void setGameProperties(List gameProperties) {
    this.gameProperties = gameProperties;
  }


  public MatchmakingConfiguration gameSessionData(String gameSessionData) {
    this.gameSessionData = gameSessionData;
    return this;
  }

  /**
   * Get gameSessionData
   * @return gameSessionData
   */
  @javax.annotation.Nullable
  public String getGameSessionData() {
    return gameSessionData;
  }

  public void setGameSessionData(String gameSessionData) {
    this.gameSessionData = gameSessionData;
  }


  public MatchmakingConfiguration backfillMode(BackfillMode backfillMode) {
    this.backfillMode = backfillMode;
    return this;
  }

  /**
   * Get backfillMode
   * @return backfillMode
   */
  @javax.annotation.Nullable
  public BackfillMode getBackfillMode() {
    return backfillMode;
  }

  public void setBackfillMode(BackfillMode backfillMode) {
    this.backfillMode = backfillMode;
  }


  public MatchmakingConfiguration flexMatchMode(FlexMatchMode flexMatchMode) {
    this.flexMatchMode = flexMatchMode;
    return this;
  }

  /**
   * Get flexMatchMode
   * @return flexMatchMode
   */
  @javax.annotation.Nullable
  public FlexMatchMode getFlexMatchMode() {
    return flexMatchMode;
  }

  public void setFlexMatchMode(FlexMatchMode flexMatchMode) {
    this.flexMatchMode = flexMatchMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchmakingConfiguration matchmakingConfiguration = (MatchmakingConfiguration) o;
    return Objects.equals(this.name, matchmakingConfiguration.name) &&
        Objects.equals(this.configurationArn, matchmakingConfiguration.configurationArn) &&
        Objects.equals(this.description, matchmakingConfiguration.description) &&
        Objects.equals(this.gameSessionQueueArns, matchmakingConfiguration.gameSessionQueueArns) &&
        Objects.equals(this.requestTimeoutSeconds, matchmakingConfiguration.requestTimeoutSeconds) &&
        Objects.equals(this.acceptanceTimeoutSeconds, matchmakingConfiguration.acceptanceTimeoutSeconds) &&
        Objects.equals(this.acceptanceRequired, matchmakingConfiguration.acceptanceRequired) &&
        Objects.equals(this.ruleSetName, matchmakingConfiguration.ruleSetName) &&
        Objects.equals(this.ruleSetArn, matchmakingConfiguration.ruleSetArn) &&
        Objects.equals(this.notificationTarget, matchmakingConfiguration.notificationTarget) &&
        Objects.equals(this.additionalPlayerCount, matchmakingConfiguration.additionalPlayerCount) &&
        Objects.equals(this.customEventData, matchmakingConfiguration.customEventData) &&
        Objects.equals(this.creationTime, matchmakingConfiguration.creationTime) &&
        Objects.equals(this.gameProperties, matchmakingConfiguration.gameProperties) &&
        Objects.equals(this.gameSessionData, matchmakingConfiguration.gameSessionData) &&
        Objects.equals(this.backfillMode, matchmakingConfiguration.backfillMode) &&
        Objects.equals(this.flexMatchMode, matchmakingConfiguration.flexMatchMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, configurationArn, description, gameSessionQueueArns, requestTimeoutSeconds, acceptanceTimeoutSeconds, acceptanceRequired, ruleSetName, ruleSetArn, notificationTarget, additionalPlayerCount, customEventData, creationTime, gameProperties, gameSessionData, backfillMode, flexMatchMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchmakingConfiguration {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    configurationArn: ").append(toIndentedString(configurationArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gameSessionQueueArns: ").append(toIndentedString(gameSessionQueueArns)).append("\n");
    sb.append("    requestTimeoutSeconds: ").append(toIndentedString(requestTimeoutSeconds)).append("\n");
    sb.append("    acceptanceTimeoutSeconds: ").append(toIndentedString(acceptanceTimeoutSeconds)).append("\n");
    sb.append("    acceptanceRequired: ").append(toIndentedString(acceptanceRequired)).append("\n");
    sb.append("    ruleSetName: ").append(toIndentedString(ruleSetName)).append("\n");
    sb.append("    ruleSetArn: ").append(toIndentedString(ruleSetArn)).append("\n");
    sb.append("    notificationTarget: ").append(toIndentedString(notificationTarget)).append("\n");
    sb.append("    additionalPlayerCount: ").append(toIndentedString(additionalPlayerCount)).append("\n");
    sb.append("    customEventData: ").append(toIndentedString(customEventData)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    gameProperties: ").append(toIndentedString(gameProperties)).append("\n");
    sb.append("    gameSessionData: ").append(toIndentedString(gameSessionData)).append("\n");
    sb.append("    backfillMode: ").append(toIndentedString(backfillMode)).append("\n");
    sb.append("    flexMatchMode: ").append(toIndentedString(flexMatchMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("ConfigurationArn");
    openapiFields.add("Description");
    openapiFields.add("GameSessionQueueArns");
    openapiFields.add("RequestTimeoutSeconds");
    openapiFields.add("AcceptanceTimeoutSeconds");
    openapiFields.add("AcceptanceRequired");
    openapiFields.add("RuleSetName");
    openapiFields.add("RuleSetArn");
    openapiFields.add("NotificationTarget");
    openapiFields.add("AdditionalPlayerCount");
    openapiFields.add("CustomEventData");
    openapiFields.add("CreationTime");
    openapiFields.add("GameProperties");
    openapiFields.add("GameSessionData");
    openapiFields.add("BackfillMode");
    openapiFields.add("FlexMatchMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchmakingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchmakingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchmakingConfiguration is not found in the empty JSON string", MatchmakingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchmakingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchmakingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `ConfigurationArn`
      if (jsonObj.get("ConfigurationArn") != null && !jsonObj.get("ConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationArn"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `GameSessionQueueArns`
      if (jsonObj.get("GameSessionQueueArns") != null && !jsonObj.get("GameSessionQueueArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GameSessionQueueArns"));
      }
      // validate the optional field `RequestTimeoutSeconds`
      if (jsonObj.get("RequestTimeoutSeconds") != null && !jsonObj.get("RequestTimeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RequestTimeoutSeconds"));
      }
      // validate the optional field `AcceptanceTimeoutSeconds`
      if (jsonObj.get("AcceptanceTimeoutSeconds") != null && !jsonObj.get("AcceptanceTimeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AcceptanceTimeoutSeconds"));
      }
      // validate the optional field `AcceptanceRequired`
      if (jsonObj.get("AcceptanceRequired") != null && !jsonObj.get("AcceptanceRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AcceptanceRequired"));
      }
      // validate the optional field `RuleSetName`
      if (jsonObj.get("RuleSetName") != null && !jsonObj.get("RuleSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleSetName"));
      }
      // validate the optional field `RuleSetArn`
      if (jsonObj.get("RuleSetArn") != null && !jsonObj.get("RuleSetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleSetArn"));
      }
      // validate the optional field `NotificationTarget`
      if (jsonObj.get("NotificationTarget") != null && !jsonObj.get("NotificationTarget").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationTarget"));
      }
      // validate the optional field `AdditionalPlayerCount`
      if (jsonObj.get("AdditionalPlayerCount") != null && !jsonObj.get("AdditionalPlayerCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AdditionalPlayerCount"));
      }
      // validate the optional field `CustomEventData`
      if (jsonObj.get("CustomEventData") != null && !jsonObj.get("CustomEventData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomEventData"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `GameProperties`
      if (jsonObj.get("GameProperties") != null && !jsonObj.get("GameProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GameProperties"));
      }
      // validate the optional field `GameSessionData`
      if (jsonObj.get("GameSessionData") != null && !jsonObj.get("GameSessionData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionData"));
      }
      // validate the optional field `BackfillMode`
      if (jsonObj.get("BackfillMode") != null && !jsonObj.get("BackfillMode").isJsonNull()) {
        BackfillMode.validateJsonElement(jsonObj.get("BackfillMode"));
      }
      // validate the optional field `FlexMatchMode`
      if (jsonObj.get("FlexMatchMode") != null && !jsonObj.get("FlexMatchMode").isJsonNull()) {
        FlexMatchMode.validateJsonElement(jsonObj.get("FlexMatchMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchmakingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchmakingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchmakingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchmakingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchmakingConfiguration>() {
           @Override
           public void write(JsonWriter out, MatchmakingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchmakingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchmakingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchmakingConfiguration
   * @throws IOException if the JSON string is invalid with respect to MatchmakingConfiguration
   */
  public static MatchmakingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchmakingConfiguration.class);
  }

  /**
   * Convert an instance of MatchmakingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

