/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GameServerClaimStatus;
import org.openapitools.client.model.GameServerUtilizationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeGameServerOutputGameServer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeGameServerOutputGameServer {
  public static final String SERIALIZED_NAME_GAME_SERVER_GROUP_NAME = "GameServerGroupName";
  @SerializedName(SERIALIZED_NAME_GAME_SERVER_GROUP_NAME)
  private String gameServerGroupName;

  public static final String SERIALIZED_NAME_GAME_SERVER_GROUP_ARN = "GameServerGroupArn";
  @SerializedName(SERIALIZED_NAME_GAME_SERVER_GROUP_ARN)
  private String gameServerGroupArn;

  public static final String SERIALIZED_NAME_GAME_SERVER_ID = "GameServerId";
  @SerializedName(SERIALIZED_NAME_GAME_SERVER_ID)
  private String gameServerId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_CONNECTION_INFO = "ConnectionInfo";
  @SerializedName(SERIALIZED_NAME_CONNECTION_INFO)
  private String connectionInfo;

  public static final String SERIALIZED_NAME_GAME_SERVER_DATA = "GameServerData";
  @SerializedName(SERIALIZED_NAME_GAME_SERVER_DATA)
  private String gameServerData;

  public static final String SERIALIZED_NAME_CLAIM_STATUS = "ClaimStatus";
  @SerializedName(SERIALIZED_NAME_CLAIM_STATUS)
  private GameServerClaimStatus claimStatus;

  public static final String SERIALIZED_NAME_UTILIZATION_STATUS = "UtilizationStatus";
  @SerializedName(SERIALIZED_NAME_UTILIZATION_STATUS)
  private GameServerUtilizationStatus utilizationStatus;

  public static final String SERIALIZED_NAME_REGISTRATION_TIME = "RegistrationTime";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_TIME)
  private OffsetDateTime registrationTime;

  public static final String SERIALIZED_NAME_LAST_CLAIM_TIME = "LastClaimTime";
  @SerializedName(SERIALIZED_NAME_LAST_CLAIM_TIME)
  private OffsetDateTime lastClaimTime;

  public static final String SERIALIZED_NAME_LAST_HEALTH_CHECK_TIME = "LastHealthCheckTime";
  @SerializedName(SERIALIZED_NAME_LAST_HEALTH_CHECK_TIME)
  private OffsetDateTime lastHealthCheckTime;

  public DescribeGameServerOutputGameServer() {
  }

  public DescribeGameServerOutputGameServer gameServerGroupName(String gameServerGroupName) {
    this.gameServerGroupName = gameServerGroupName;
    return this;
  }

  /**
   * Get gameServerGroupName
   * @return gameServerGroupName
   */
  @javax.annotation.Nullable
  public String getGameServerGroupName() {
    return gameServerGroupName;
  }

  public void setGameServerGroupName(String gameServerGroupName) {
    this.gameServerGroupName = gameServerGroupName;
  }


  public DescribeGameServerOutputGameServer gameServerGroupArn(String gameServerGroupArn) {
    this.gameServerGroupArn = gameServerGroupArn;
    return this;
  }

  /**
   * Get gameServerGroupArn
   * @return gameServerGroupArn
   */
  @javax.annotation.Nullable
  public String getGameServerGroupArn() {
    return gameServerGroupArn;
  }

  public void setGameServerGroupArn(String gameServerGroupArn) {
    this.gameServerGroupArn = gameServerGroupArn;
  }


  public DescribeGameServerOutputGameServer gameServerId(String gameServerId) {
    this.gameServerId = gameServerId;
    return this;
  }

  /**
   * Get gameServerId
   * @return gameServerId
   */
  @javax.annotation.Nullable
  public String getGameServerId() {
    return gameServerId;
  }

  public void setGameServerId(String gameServerId) {
    this.gameServerId = gameServerId;
  }


  public DescribeGameServerOutputGameServer instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public DescribeGameServerOutputGameServer connectionInfo(String connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

  /**
   * Get connectionInfo
   * @return connectionInfo
   */
  @javax.annotation.Nullable
  public String getConnectionInfo() {
    return connectionInfo;
  }

  public void setConnectionInfo(String connectionInfo) {
    this.connectionInfo = connectionInfo;
  }


  public DescribeGameServerOutputGameServer gameServerData(String gameServerData) {
    this.gameServerData = gameServerData;
    return this;
  }

  /**
   * Get gameServerData
   * @return gameServerData
   */
  @javax.annotation.Nullable
  public String getGameServerData() {
    return gameServerData;
  }

  public void setGameServerData(String gameServerData) {
    this.gameServerData = gameServerData;
  }


  public DescribeGameServerOutputGameServer claimStatus(GameServerClaimStatus claimStatus) {
    this.claimStatus = claimStatus;
    return this;
  }

  /**
   * Get claimStatus
   * @return claimStatus
   */
  @javax.annotation.Nullable
  public GameServerClaimStatus getClaimStatus() {
    return claimStatus;
  }

  public void setClaimStatus(GameServerClaimStatus claimStatus) {
    this.claimStatus = claimStatus;
  }


  public DescribeGameServerOutputGameServer utilizationStatus(GameServerUtilizationStatus utilizationStatus) {
    this.utilizationStatus = utilizationStatus;
    return this;
  }

  /**
   * Get utilizationStatus
   * @return utilizationStatus
   */
  @javax.annotation.Nullable
  public GameServerUtilizationStatus getUtilizationStatus() {
    return utilizationStatus;
  }

  public void setUtilizationStatus(GameServerUtilizationStatus utilizationStatus) {
    this.utilizationStatus = utilizationStatus;
  }


  public DescribeGameServerOutputGameServer registrationTime(OffsetDateTime registrationTime) {
    this.registrationTime = registrationTime;
    return this;
  }

  /**
   * Get registrationTime
   * @return registrationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegistrationTime() {
    return registrationTime;
  }

  public void setRegistrationTime(OffsetDateTime registrationTime) {
    this.registrationTime = registrationTime;
  }


  public DescribeGameServerOutputGameServer lastClaimTime(OffsetDateTime lastClaimTime) {
    this.lastClaimTime = lastClaimTime;
    return this;
  }

  /**
   * Get lastClaimTime
   * @return lastClaimTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastClaimTime() {
    return lastClaimTime;
  }

  public void setLastClaimTime(OffsetDateTime lastClaimTime) {
    this.lastClaimTime = lastClaimTime;
  }


  public DescribeGameServerOutputGameServer lastHealthCheckTime(OffsetDateTime lastHealthCheckTime) {
    this.lastHealthCheckTime = lastHealthCheckTime;
    return this;
  }

  /**
   * Get lastHealthCheckTime
   * @return lastHealthCheckTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastHealthCheckTime() {
    return lastHealthCheckTime;
  }

  public void setLastHealthCheckTime(OffsetDateTime lastHealthCheckTime) {
    this.lastHealthCheckTime = lastHealthCheckTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeGameServerOutputGameServer describeGameServerOutputGameServer = (DescribeGameServerOutputGameServer) o;
    return Objects.equals(this.gameServerGroupName, describeGameServerOutputGameServer.gameServerGroupName) &&
        Objects.equals(this.gameServerGroupArn, describeGameServerOutputGameServer.gameServerGroupArn) &&
        Objects.equals(this.gameServerId, describeGameServerOutputGameServer.gameServerId) &&
        Objects.equals(this.instanceId, describeGameServerOutputGameServer.instanceId) &&
        Objects.equals(this.connectionInfo, describeGameServerOutputGameServer.connectionInfo) &&
        Objects.equals(this.gameServerData, describeGameServerOutputGameServer.gameServerData) &&
        Objects.equals(this.claimStatus, describeGameServerOutputGameServer.claimStatus) &&
        Objects.equals(this.utilizationStatus, describeGameServerOutputGameServer.utilizationStatus) &&
        Objects.equals(this.registrationTime, describeGameServerOutputGameServer.registrationTime) &&
        Objects.equals(this.lastClaimTime, describeGameServerOutputGameServer.lastClaimTime) &&
        Objects.equals(this.lastHealthCheckTime, describeGameServerOutputGameServer.lastHealthCheckTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameServerGroupName, gameServerGroupArn, gameServerId, instanceId, connectionInfo, gameServerData, claimStatus, utilizationStatus, registrationTime, lastClaimTime, lastHealthCheckTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeGameServerOutputGameServer {\n");
    sb.append("    gameServerGroupName: ").append(toIndentedString(gameServerGroupName)).append("\n");
    sb.append("    gameServerGroupArn: ").append(toIndentedString(gameServerGroupArn)).append("\n");
    sb.append("    gameServerId: ").append(toIndentedString(gameServerId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    connectionInfo: ").append(toIndentedString(connectionInfo)).append("\n");
    sb.append("    gameServerData: ").append(toIndentedString(gameServerData)).append("\n");
    sb.append("    claimStatus: ").append(toIndentedString(claimStatus)).append("\n");
    sb.append("    utilizationStatus: ").append(toIndentedString(utilizationStatus)).append("\n");
    sb.append("    registrationTime: ").append(toIndentedString(registrationTime)).append("\n");
    sb.append("    lastClaimTime: ").append(toIndentedString(lastClaimTime)).append("\n");
    sb.append("    lastHealthCheckTime: ").append(toIndentedString(lastHealthCheckTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GameServerGroupName");
    openapiFields.add("GameServerGroupArn");
    openapiFields.add("GameServerId");
    openapiFields.add("InstanceId");
    openapiFields.add("ConnectionInfo");
    openapiFields.add("GameServerData");
    openapiFields.add("ClaimStatus");
    openapiFields.add("UtilizationStatus");
    openapiFields.add("RegistrationTime");
    openapiFields.add("LastClaimTime");
    openapiFields.add("LastHealthCheckTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeGameServerOutputGameServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeGameServerOutputGameServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeGameServerOutputGameServer is not found in the empty JSON string", DescribeGameServerOutputGameServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeGameServerOutputGameServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeGameServerOutputGameServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GameServerGroupName`
      if (jsonObj.get("GameServerGroupName") != null && !jsonObj.get("GameServerGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameServerGroupName"));
      }
      // validate the optional field `GameServerGroupArn`
      if (jsonObj.get("GameServerGroupArn") != null && !jsonObj.get("GameServerGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameServerGroupArn"));
      }
      // validate the optional field `GameServerId`
      if (jsonObj.get("GameServerId") != null && !jsonObj.get("GameServerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameServerId"));
      }
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `ConnectionInfo`
      if (jsonObj.get("ConnectionInfo") != null && !jsonObj.get("ConnectionInfo").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionInfo"));
      }
      // validate the optional field `GameServerData`
      if (jsonObj.get("GameServerData") != null && !jsonObj.get("GameServerData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameServerData"));
      }
      // validate the optional field `ClaimStatus`
      if (jsonObj.get("ClaimStatus") != null && !jsonObj.get("ClaimStatus").isJsonNull()) {
        GameServerClaimStatus.validateJsonElement(jsonObj.get("ClaimStatus"));
      }
      // validate the optional field `UtilizationStatus`
      if (jsonObj.get("UtilizationStatus") != null && !jsonObj.get("UtilizationStatus").isJsonNull()) {
        GameServerUtilizationStatus.validateJsonElement(jsonObj.get("UtilizationStatus"));
      }
      // validate the optional field `RegistrationTime`
      if (jsonObj.get("RegistrationTime") != null && !jsonObj.get("RegistrationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RegistrationTime"));
      }
      // validate the optional field `LastClaimTime`
      if (jsonObj.get("LastClaimTime") != null && !jsonObj.get("LastClaimTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastClaimTime"));
      }
      // validate the optional field `LastHealthCheckTime`
      if (jsonObj.get("LastHealthCheckTime") != null && !jsonObj.get("LastHealthCheckTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastHealthCheckTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeGameServerOutputGameServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeGameServerOutputGameServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeGameServerOutputGameServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeGameServerOutputGameServer.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeGameServerOutputGameServer>() {
           @Override
           public void write(JsonWriter out, DescribeGameServerOutputGameServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeGameServerOutputGameServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeGameServerOutputGameServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeGameServerOutputGameServer
   * @throws IOException if the JSON string is invalid with respect to DescribeGameServerOutputGameServer
   */
  public static DescribeGameServerOutputGameServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeGameServerOutputGameServer.class);
  }

  /**
   * Convert an instance of DescribeGameServerOutputGameServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

