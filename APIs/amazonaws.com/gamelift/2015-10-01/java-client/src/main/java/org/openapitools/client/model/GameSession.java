/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GameSessionStatus;
import org.openapitools.client.model.GameSessionStatusReason;
import org.openapitools.client.model.PlayerSessionCreationPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Properties describing a game session.&lt;/p&gt; &lt;p&gt;A game session in ACTIVE status can host players. When a game session ends, its status is set to &lt;code&gt;TERMINATED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Once the session ends, the game session object is retained for 30 days. This means you can reuse idempotency token values after this time. Game session logs are retained for 14 days.&lt;/p&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets\&quot;&gt;All APIs by task&lt;/a&gt; &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GameSession {
  public static final String SERIALIZED_NAME_GAME_SESSION_ID = "GameSessionId";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_ID)
  private String gameSessionId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FLEET_ID = "FleetId";
  @SerializedName(SERIALIZED_NAME_FLEET_ID)
  private String fleetId;

  public static final String SERIALIZED_NAME_FLEET_ARN = "FleetArn";
  @SerializedName(SERIALIZED_NAME_FLEET_ARN)
  private String fleetArn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_TERMINATION_TIME = "TerminationTime";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TIME)
  private OffsetDateTime terminationTime;

  public static final String SERIALIZED_NAME_CURRENT_PLAYER_SESSION_COUNT = "CurrentPlayerSessionCount";
  @SerializedName(SERIALIZED_NAME_CURRENT_PLAYER_SESSION_COUNT)
  private Integer currentPlayerSessionCount;

  public static final String SERIALIZED_NAME_MAXIMUM_PLAYER_SESSION_COUNT = "MaximumPlayerSessionCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_PLAYER_SESSION_COUNT)
  private Integer maximumPlayerSessionCount;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GameSessionStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private GameSessionStatusReason statusReason;

  public static final String SERIALIZED_NAME_GAME_PROPERTIES = "GameProperties";
  @SerializedName(SERIALIZED_NAME_GAME_PROPERTIES)
  private List gameProperties;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PLAYER_SESSION_CREATION_POLICY = "PlayerSessionCreationPolicy";
  @SerializedName(SERIALIZED_NAME_PLAYER_SESSION_CREATION_POLICY)
  private PlayerSessionCreationPolicy playerSessionCreationPolicy;

  public static final String SERIALIZED_NAME_CREATOR_ID = "CreatorId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_GAME_SESSION_DATA = "GameSessionData";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_DATA)
  private String gameSessionData;

  public static final String SERIALIZED_NAME_MATCHMAKER_DATA = "MatchmakerData";
  @SerializedName(SERIALIZED_NAME_MATCHMAKER_DATA)
  private String matchmakerData;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public GameSession() {
  }

  public GameSession gameSessionId(String gameSessionId) {
    this.gameSessionId = gameSessionId;
    return this;
  }

  /**
   * Get gameSessionId
   * @return gameSessionId
   */
  @javax.annotation.Nullable
  public String getGameSessionId() {
    return gameSessionId;
  }

  public void setGameSessionId(String gameSessionId) {
    this.gameSessionId = gameSessionId;
  }


  public GameSession name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GameSession fleetId(String fleetId) {
    this.fleetId = fleetId;
    return this;
  }

  /**
   * Get fleetId
   * @return fleetId
   */
  @javax.annotation.Nullable
  public String getFleetId() {
    return fleetId;
  }

  public void setFleetId(String fleetId) {
    this.fleetId = fleetId;
  }


  public GameSession fleetArn(String fleetArn) {
    this.fleetArn = fleetArn;
    return this;
  }

  /**
   * Get fleetArn
   * @return fleetArn
   */
  @javax.annotation.Nullable
  public String getFleetArn() {
    return fleetArn;
  }

  public void setFleetArn(String fleetArn) {
    this.fleetArn = fleetArn;
  }


  public GameSession creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public GameSession terminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
    return this;
  }

  /**
   * Get terminationTime
   * @return terminationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTerminationTime() {
    return terminationTime;
  }

  public void setTerminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
  }


  public GameSession currentPlayerSessionCount(Integer currentPlayerSessionCount) {
    this.currentPlayerSessionCount = currentPlayerSessionCount;
    return this;
  }

  /**
   * Get currentPlayerSessionCount
   * @return currentPlayerSessionCount
   */
  @javax.annotation.Nullable
  public Integer getCurrentPlayerSessionCount() {
    return currentPlayerSessionCount;
  }

  public void setCurrentPlayerSessionCount(Integer currentPlayerSessionCount) {
    this.currentPlayerSessionCount = currentPlayerSessionCount;
  }


  public GameSession maximumPlayerSessionCount(Integer maximumPlayerSessionCount) {
    this.maximumPlayerSessionCount = maximumPlayerSessionCount;
    return this;
  }

  /**
   * Get maximumPlayerSessionCount
   * @return maximumPlayerSessionCount
   */
  @javax.annotation.Nullable
  public Integer getMaximumPlayerSessionCount() {
    return maximumPlayerSessionCount;
  }

  public void setMaximumPlayerSessionCount(Integer maximumPlayerSessionCount) {
    this.maximumPlayerSessionCount = maximumPlayerSessionCount;
  }


  public GameSession status(GameSessionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GameSessionStatus getStatus() {
    return status;
  }

  public void setStatus(GameSessionStatus status) {
    this.status = status;
  }


  public GameSession statusReason(GameSessionStatusReason statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public GameSessionStatusReason getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(GameSessionStatusReason statusReason) {
    this.statusReason = statusReason;
  }


  public GameSession gameProperties(List gameProperties) {
    this.gameProperties = gameProperties;
    return this;
  }

  /**
   * Get gameProperties
   * @return gameProperties
   */
  @javax.annotation.Nullable
  public List getGameProperties() {
    return gameProperties;
  }

  public void setGameProperties(List gameProperties) {
    this.gameProperties = gameProperties;
  }


  public GameSession ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public GameSession dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Get dnsName
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public GameSession port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public GameSession playerSessionCreationPolicy(PlayerSessionCreationPolicy playerSessionCreationPolicy) {
    this.playerSessionCreationPolicy = playerSessionCreationPolicy;
    return this;
  }

  /**
   * Get playerSessionCreationPolicy
   * @return playerSessionCreationPolicy
   */
  @javax.annotation.Nullable
  public PlayerSessionCreationPolicy getPlayerSessionCreationPolicy() {
    return playerSessionCreationPolicy;
  }

  public void setPlayerSessionCreationPolicy(PlayerSessionCreationPolicy playerSessionCreationPolicy) {
    this.playerSessionCreationPolicy = playerSessionCreationPolicy;
  }


  public GameSession creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * Get creatorId
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public GameSession gameSessionData(String gameSessionData) {
    this.gameSessionData = gameSessionData;
    return this;
  }

  /**
   * Get gameSessionData
   * @return gameSessionData
   */
  @javax.annotation.Nullable
  public String getGameSessionData() {
    return gameSessionData;
  }

  public void setGameSessionData(String gameSessionData) {
    this.gameSessionData = gameSessionData;
  }


  public GameSession matchmakerData(String matchmakerData) {
    this.matchmakerData = matchmakerData;
    return this;
  }

  /**
   * Get matchmakerData
   * @return matchmakerData
   */
  @javax.annotation.Nullable
  public String getMatchmakerData() {
    return matchmakerData;
  }

  public void setMatchmakerData(String matchmakerData) {
    this.matchmakerData = matchmakerData;
  }


  public GameSession location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameSession gameSession = (GameSession) o;
    return Objects.equals(this.gameSessionId, gameSession.gameSessionId) &&
        Objects.equals(this.name, gameSession.name) &&
        Objects.equals(this.fleetId, gameSession.fleetId) &&
        Objects.equals(this.fleetArn, gameSession.fleetArn) &&
        Objects.equals(this.creationTime, gameSession.creationTime) &&
        Objects.equals(this.terminationTime, gameSession.terminationTime) &&
        Objects.equals(this.currentPlayerSessionCount, gameSession.currentPlayerSessionCount) &&
        Objects.equals(this.maximumPlayerSessionCount, gameSession.maximumPlayerSessionCount) &&
        Objects.equals(this.status, gameSession.status) &&
        Objects.equals(this.statusReason, gameSession.statusReason) &&
        Objects.equals(this.gameProperties, gameSession.gameProperties) &&
        Objects.equals(this.ipAddress, gameSession.ipAddress) &&
        Objects.equals(this.dnsName, gameSession.dnsName) &&
        Objects.equals(this.port, gameSession.port) &&
        Objects.equals(this.playerSessionCreationPolicy, gameSession.playerSessionCreationPolicy) &&
        Objects.equals(this.creatorId, gameSession.creatorId) &&
        Objects.equals(this.gameSessionData, gameSession.gameSessionData) &&
        Objects.equals(this.matchmakerData, gameSession.matchmakerData) &&
        Objects.equals(this.location, gameSession.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameSessionId, name, fleetId, fleetArn, creationTime, terminationTime, currentPlayerSessionCount, maximumPlayerSessionCount, status, statusReason, gameProperties, ipAddress, dnsName, port, playerSessionCreationPolicy, creatorId, gameSessionData, matchmakerData, location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameSession {\n");
    sb.append("    gameSessionId: ").append(toIndentedString(gameSessionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fleetId: ").append(toIndentedString(fleetId)).append("\n");
    sb.append("    fleetArn: ").append(toIndentedString(fleetArn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("    currentPlayerSessionCount: ").append(toIndentedString(currentPlayerSessionCount)).append("\n");
    sb.append("    maximumPlayerSessionCount: ").append(toIndentedString(maximumPlayerSessionCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    gameProperties: ").append(toIndentedString(gameProperties)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    playerSessionCreationPolicy: ").append(toIndentedString(playerSessionCreationPolicy)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    gameSessionData: ").append(toIndentedString(gameSessionData)).append("\n");
    sb.append("    matchmakerData: ").append(toIndentedString(matchmakerData)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GameSessionId");
    openapiFields.add("Name");
    openapiFields.add("FleetId");
    openapiFields.add("FleetArn");
    openapiFields.add("CreationTime");
    openapiFields.add("TerminationTime");
    openapiFields.add("CurrentPlayerSessionCount");
    openapiFields.add("MaximumPlayerSessionCount");
    openapiFields.add("Status");
    openapiFields.add("StatusReason");
    openapiFields.add("GameProperties");
    openapiFields.add("IpAddress");
    openapiFields.add("DnsName");
    openapiFields.add("Port");
    openapiFields.add("PlayerSessionCreationPolicy");
    openapiFields.add("CreatorId");
    openapiFields.add("GameSessionData");
    openapiFields.add("MatchmakerData");
    openapiFields.add("Location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GameSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GameSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameSession is not found in the empty JSON string", GameSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GameSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GameSessionId`
      if (jsonObj.get("GameSessionId") != null && !jsonObj.get("GameSessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionId"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `FleetId`
      if (jsonObj.get("FleetId") != null && !jsonObj.get("FleetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FleetId"));
      }
      // validate the optional field `FleetArn`
      if (jsonObj.get("FleetArn") != null && !jsonObj.get("FleetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FleetArn"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `TerminationTime`
      if (jsonObj.get("TerminationTime") != null && !jsonObj.get("TerminationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TerminationTime"));
      }
      // validate the optional field `CurrentPlayerSessionCount`
      if (jsonObj.get("CurrentPlayerSessionCount") != null && !jsonObj.get("CurrentPlayerSessionCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CurrentPlayerSessionCount"));
      }
      // validate the optional field `MaximumPlayerSessionCount`
      if (jsonObj.get("MaximumPlayerSessionCount") != null && !jsonObj.get("MaximumPlayerSessionCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumPlayerSessionCount"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        GameSessionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        GameSessionStatusReason.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the optional field `GameProperties`
      if (jsonObj.get("GameProperties") != null && !jsonObj.get("GameProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GameProperties"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `DnsName`
      if (jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsName"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `PlayerSessionCreationPolicy`
      if (jsonObj.get("PlayerSessionCreationPolicy") != null && !jsonObj.get("PlayerSessionCreationPolicy").isJsonNull()) {
        PlayerSessionCreationPolicy.validateJsonElement(jsonObj.get("PlayerSessionCreationPolicy"));
      }
      // validate the optional field `CreatorId`
      if (jsonObj.get("CreatorId") != null && !jsonObj.get("CreatorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatorId"));
      }
      // validate the optional field `GameSessionData`
      if (jsonObj.get("GameSessionData") != null && !jsonObj.get("GameSessionData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionData"));
      }
      // validate the optional field `MatchmakerData`
      if (jsonObj.get("MatchmakerData") != null && !jsonObj.get("MatchmakerData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MatchmakerData"));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Location"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameSession.class));

       return (TypeAdapter<T>) new TypeAdapter<GameSession>() {
           @Override
           public void write(JsonWriter out, GameSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GameSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GameSession
   * @throws IOException if the JSON string is invalid with respect to GameSession
   */
  public static GameSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameSession.class);
  }

  /**
   * Convert an instance of GameSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

