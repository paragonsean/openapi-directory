/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PlayerSessionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents a player session. Player sessions are created either for a specific game session, or as part of a game session placement or matchmaking request. A player session can represents a reserved player slot in a game session (when status is &lt;code&gt;RESERVED&lt;/code&gt;) or actual player activity in a game session (when status is &lt;code&gt;ACTIVE&lt;/code&gt;). A player session object, including player data, is automatically passed to a game session when the player connects to the game session and is validated. After the game session ends, player sessions information is retained for 30 days and then removed.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Related actions&lt;/b&gt; &lt;/p&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets\&quot;&gt;All APIs by task&lt;/a&gt; &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerSession {
  public static final String SERIALIZED_NAME_PLAYER_SESSION_ID = "PlayerSessionId";
  @SerializedName(SERIALIZED_NAME_PLAYER_SESSION_ID)
  private String playerSessionId;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_GAME_SESSION_ID = "GameSessionId";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_ID)
  private String gameSessionId;

  public static final String SERIALIZED_NAME_FLEET_ID = "FleetId";
  @SerializedName(SERIALIZED_NAME_FLEET_ID)
  private String fleetId;

  public static final String SERIALIZED_NAME_FLEET_ARN = "FleetArn";
  @SerializedName(SERIALIZED_NAME_FLEET_ARN)
  private String fleetArn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_TERMINATION_TIME = "TerminationTime";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TIME)
  private OffsetDateTime terminationTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PlayerSessionStatus status;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PLAYER_DATA = "PlayerData";
  @SerializedName(SERIALIZED_NAME_PLAYER_DATA)
  private String playerData;

  public PlayerSession() {
  }

  public PlayerSession playerSessionId(String playerSessionId) {
    this.playerSessionId = playerSessionId;
    return this;
  }

  /**
   * Get playerSessionId
   * @return playerSessionId
   */
  @javax.annotation.Nullable
  public String getPlayerSessionId() {
    return playerSessionId;
  }

  public void setPlayerSessionId(String playerSessionId) {
    this.playerSessionId = playerSessionId;
  }


  public PlayerSession playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public PlayerSession gameSessionId(String gameSessionId) {
    this.gameSessionId = gameSessionId;
    return this;
  }

  /**
   * Get gameSessionId
   * @return gameSessionId
   */
  @javax.annotation.Nullable
  public String getGameSessionId() {
    return gameSessionId;
  }

  public void setGameSessionId(String gameSessionId) {
    this.gameSessionId = gameSessionId;
  }


  public PlayerSession fleetId(String fleetId) {
    this.fleetId = fleetId;
    return this;
  }

  /**
   * Get fleetId
   * @return fleetId
   */
  @javax.annotation.Nullable
  public String getFleetId() {
    return fleetId;
  }

  public void setFleetId(String fleetId) {
    this.fleetId = fleetId;
  }


  public PlayerSession fleetArn(String fleetArn) {
    this.fleetArn = fleetArn;
    return this;
  }

  /**
   * Get fleetArn
   * @return fleetArn
   */
  @javax.annotation.Nullable
  public String getFleetArn() {
    return fleetArn;
  }

  public void setFleetArn(String fleetArn) {
    this.fleetArn = fleetArn;
  }


  public PlayerSession creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public PlayerSession terminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
    return this;
  }

  /**
   * Get terminationTime
   * @return terminationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTerminationTime() {
    return terminationTime;
  }

  public void setTerminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
  }


  public PlayerSession status(PlayerSessionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public PlayerSessionStatus getStatus() {
    return status;
  }

  public void setStatus(PlayerSessionStatus status) {
    this.status = status;
  }


  public PlayerSession ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public PlayerSession dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Get dnsName
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public PlayerSession port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public PlayerSession playerData(String playerData) {
    this.playerData = playerData;
    return this;
  }

  /**
   * Get playerData
   * @return playerData
   */
  @javax.annotation.Nullable
  public String getPlayerData() {
    return playerData;
  }

  public void setPlayerData(String playerData) {
    this.playerData = playerData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerSession playerSession = (PlayerSession) o;
    return Objects.equals(this.playerSessionId, playerSession.playerSessionId) &&
        Objects.equals(this.playerId, playerSession.playerId) &&
        Objects.equals(this.gameSessionId, playerSession.gameSessionId) &&
        Objects.equals(this.fleetId, playerSession.fleetId) &&
        Objects.equals(this.fleetArn, playerSession.fleetArn) &&
        Objects.equals(this.creationTime, playerSession.creationTime) &&
        Objects.equals(this.terminationTime, playerSession.terminationTime) &&
        Objects.equals(this.status, playerSession.status) &&
        Objects.equals(this.ipAddress, playerSession.ipAddress) &&
        Objects.equals(this.dnsName, playerSession.dnsName) &&
        Objects.equals(this.port, playerSession.port) &&
        Objects.equals(this.playerData, playerSession.playerData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerSessionId, playerId, gameSessionId, fleetId, fleetArn, creationTime, terminationTime, status, ipAddress, dnsName, port, playerData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerSession {\n");
    sb.append("    playerSessionId: ").append(toIndentedString(playerSessionId)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    gameSessionId: ").append(toIndentedString(gameSessionId)).append("\n");
    sb.append("    fleetId: ").append(toIndentedString(fleetId)).append("\n");
    sb.append("    fleetArn: ").append(toIndentedString(fleetArn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    playerData: ").append(toIndentedString(playerData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlayerSessionId");
    openapiFields.add("PlayerId");
    openapiFields.add("GameSessionId");
    openapiFields.add("FleetId");
    openapiFields.add("FleetArn");
    openapiFields.add("CreationTime");
    openapiFields.add("TerminationTime");
    openapiFields.add("Status");
    openapiFields.add("IpAddress");
    openapiFields.add("DnsName");
    openapiFields.add("Port");
    openapiFields.add("PlayerData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerSession is not found in the empty JSON string", PlayerSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PlayerSessionId`
      if (jsonObj.get("PlayerSessionId") != null && !jsonObj.get("PlayerSessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlayerSessionId"));
      }
      // validate the optional field `PlayerId`
      if (jsonObj.get("PlayerId") != null && !jsonObj.get("PlayerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlayerId"));
      }
      // validate the optional field `GameSessionId`
      if (jsonObj.get("GameSessionId") != null && !jsonObj.get("GameSessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionId"));
      }
      // validate the optional field `FleetId`
      if (jsonObj.get("FleetId") != null && !jsonObj.get("FleetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FleetId"));
      }
      // validate the optional field `FleetArn`
      if (jsonObj.get("FleetArn") != null && !jsonObj.get("FleetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FleetArn"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `TerminationTime`
      if (jsonObj.get("TerminationTime") != null && !jsonObj.get("TerminationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TerminationTime"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        PlayerSessionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `DnsName`
      if (jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsName"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `PlayerData`
      if (jsonObj.get("PlayerData") != null && !jsonObj.get("PlayerData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlayerData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerSession.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerSession>() {
           @Override
           public void write(JsonWriter out, PlayerSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerSession
   * @throws IOException if the JSON string is invalid with respect to PlayerSession
   */
  public static PlayerSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerSession.class);
  }

  /**
   * Convert an instance of PlayerSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

