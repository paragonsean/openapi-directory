/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GameSessionPlacementState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartGameSessionPlacementOutputGameSessionPlacement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartGameSessionPlacementOutputGameSessionPlacement {
  public static final String SERIALIZED_NAME_PLACEMENT_ID = "PlacementId";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_ID)
  private String placementId;

  public static final String SERIALIZED_NAME_GAME_SESSION_QUEUE_NAME = "GameSessionQueueName";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_QUEUE_NAME)
  private String gameSessionQueueName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GameSessionPlacementState status;

  public static final String SERIALIZED_NAME_GAME_PROPERTIES = "GameProperties";
  @SerializedName(SERIALIZED_NAME_GAME_PROPERTIES)
  private List gameProperties;

  public static final String SERIALIZED_NAME_MAXIMUM_PLAYER_SESSION_COUNT = "MaximumPlayerSessionCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_PLAYER_SESSION_COUNT)
  private Integer maximumPlayerSessionCount;

  public static final String SERIALIZED_NAME_GAME_SESSION_NAME = "GameSessionName";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_NAME)
  private String gameSessionName;

  public static final String SERIALIZED_NAME_GAME_SESSION_ID = "GameSessionId";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_ID)
  private String gameSessionId;

  public static final String SERIALIZED_NAME_GAME_SESSION_ARN = "GameSessionArn";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_ARN)
  private String gameSessionArn;

  public static final String SERIALIZED_NAME_GAME_SESSION_REGION = "GameSessionRegion";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_REGION)
  private String gameSessionRegion;

  public static final String SERIALIZED_NAME_PLAYER_LATENCIES = "PlayerLatencies";
  @SerializedName(SERIALIZED_NAME_PLAYER_LATENCIES)
  private List playerLatencies;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PLACED_PLAYER_SESSIONS = "PlacedPlayerSessions";
  @SerializedName(SERIALIZED_NAME_PLACED_PLAYER_SESSIONS)
  private List placedPlayerSessions;

  public static final String SERIALIZED_NAME_GAME_SESSION_DATA = "GameSessionData";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_DATA)
  private String gameSessionData;

  public static final String SERIALIZED_NAME_MATCHMAKER_DATA = "MatchmakerData";
  @SerializedName(SERIALIZED_NAME_MATCHMAKER_DATA)
  private String matchmakerData;

  public StartGameSessionPlacementOutputGameSessionPlacement() {
  }

  public StartGameSessionPlacementOutputGameSessionPlacement placementId(String placementId) {
    this.placementId = placementId;
    return this;
  }

  /**
   * Get placementId
   * @return placementId
   */
  @javax.annotation.Nullable
  public String getPlacementId() {
    return placementId;
  }

  public void setPlacementId(String placementId) {
    this.placementId = placementId;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameSessionQueueName(String gameSessionQueueName) {
    this.gameSessionQueueName = gameSessionQueueName;
    return this;
  }

  /**
   * Get gameSessionQueueName
   * @return gameSessionQueueName
   */
  @javax.annotation.Nullable
  public String getGameSessionQueueName() {
    return gameSessionQueueName;
  }

  public void setGameSessionQueueName(String gameSessionQueueName) {
    this.gameSessionQueueName = gameSessionQueueName;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement status(GameSessionPlacementState status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GameSessionPlacementState getStatus() {
    return status;
  }

  public void setStatus(GameSessionPlacementState status) {
    this.status = status;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameProperties(List gameProperties) {
    this.gameProperties = gameProperties;
    return this;
  }

  /**
   * Get gameProperties
   * @return gameProperties
   */
  @javax.annotation.Nullable
  public List getGameProperties() {
    return gameProperties;
  }

  public void setGameProperties(List gameProperties) {
    this.gameProperties = gameProperties;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement maximumPlayerSessionCount(Integer maximumPlayerSessionCount) {
    this.maximumPlayerSessionCount = maximumPlayerSessionCount;
    return this;
  }

  /**
   * Get maximumPlayerSessionCount
   * @return maximumPlayerSessionCount
   */
  @javax.annotation.Nullable
  public Integer getMaximumPlayerSessionCount() {
    return maximumPlayerSessionCount;
  }

  public void setMaximumPlayerSessionCount(Integer maximumPlayerSessionCount) {
    this.maximumPlayerSessionCount = maximumPlayerSessionCount;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameSessionName(String gameSessionName) {
    this.gameSessionName = gameSessionName;
    return this;
  }

  /**
   * Get gameSessionName
   * @return gameSessionName
   */
  @javax.annotation.Nullable
  public String getGameSessionName() {
    return gameSessionName;
  }

  public void setGameSessionName(String gameSessionName) {
    this.gameSessionName = gameSessionName;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameSessionId(String gameSessionId) {
    this.gameSessionId = gameSessionId;
    return this;
  }

  /**
   * Get gameSessionId
   * @return gameSessionId
   */
  @javax.annotation.Nullable
  public String getGameSessionId() {
    return gameSessionId;
  }

  public void setGameSessionId(String gameSessionId) {
    this.gameSessionId = gameSessionId;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameSessionArn(String gameSessionArn) {
    this.gameSessionArn = gameSessionArn;
    return this;
  }

  /**
   * Get gameSessionArn
   * @return gameSessionArn
   */
  @javax.annotation.Nullable
  public String getGameSessionArn() {
    return gameSessionArn;
  }

  public void setGameSessionArn(String gameSessionArn) {
    this.gameSessionArn = gameSessionArn;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameSessionRegion(String gameSessionRegion) {
    this.gameSessionRegion = gameSessionRegion;
    return this;
  }

  /**
   * Get gameSessionRegion
   * @return gameSessionRegion
   */
  @javax.annotation.Nullable
  public String getGameSessionRegion() {
    return gameSessionRegion;
  }

  public void setGameSessionRegion(String gameSessionRegion) {
    this.gameSessionRegion = gameSessionRegion;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement playerLatencies(List playerLatencies) {
    this.playerLatencies = playerLatencies;
    return this;
  }

  /**
   * Get playerLatencies
   * @return playerLatencies
   */
  @javax.annotation.Nullable
  public List getPlayerLatencies() {
    return playerLatencies;
  }

  public void setPlayerLatencies(List playerLatencies) {
    this.playerLatencies = playerLatencies;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Get dnsName
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement placedPlayerSessions(List placedPlayerSessions) {
    this.placedPlayerSessions = placedPlayerSessions;
    return this;
  }

  /**
   * Get placedPlayerSessions
   * @return placedPlayerSessions
   */
  @javax.annotation.Nullable
  public List getPlacedPlayerSessions() {
    return placedPlayerSessions;
  }

  public void setPlacedPlayerSessions(List placedPlayerSessions) {
    this.placedPlayerSessions = placedPlayerSessions;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement gameSessionData(String gameSessionData) {
    this.gameSessionData = gameSessionData;
    return this;
  }

  /**
   * Get gameSessionData
   * @return gameSessionData
   */
  @javax.annotation.Nullable
  public String getGameSessionData() {
    return gameSessionData;
  }

  public void setGameSessionData(String gameSessionData) {
    this.gameSessionData = gameSessionData;
  }


  public StartGameSessionPlacementOutputGameSessionPlacement matchmakerData(String matchmakerData) {
    this.matchmakerData = matchmakerData;
    return this;
  }

  /**
   * Get matchmakerData
   * @return matchmakerData
   */
  @javax.annotation.Nullable
  public String getMatchmakerData() {
    return matchmakerData;
  }

  public void setMatchmakerData(String matchmakerData) {
    this.matchmakerData = matchmakerData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartGameSessionPlacementOutputGameSessionPlacement startGameSessionPlacementOutputGameSessionPlacement = (StartGameSessionPlacementOutputGameSessionPlacement) o;
    return Objects.equals(this.placementId, startGameSessionPlacementOutputGameSessionPlacement.placementId) &&
        Objects.equals(this.gameSessionQueueName, startGameSessionPlacementOutputGameSessionPlacement.gameSessionQueueName) &&
        Objects.equals(this.status, startGameSessionPlacementOutputGameSessionPlacement.status) &&
        Objects.equals(this.gameProperties, startGameSessionPlacementOutputGameSessionPlacement.gameProperties) &&
        Objects.equals(this.maximumPlayerSessionCount, startGameSessionPlacementOutputGameSessionPlacement.maximumPlayerSessionCount) &&
        Objects.equals(this.gameSessionName, startGameSessionPlacementOutputGameSessionPlacement.gameSessionName) &&
        Objects.equals(this.gameSessionId, startGameSessionPlacementOutputGameSessionPlacement.gameSessionId) &&
        Objects.equals(this.gameSessionArn, startGameSessionPlacementOutputGameSessionPlacement.gameSessionArn) &&
        Objects.equals(this.gameSessionRegion, startGameSessionPlacementOutputGameSessionPlacement.gameSessionRegion) &&
        Objects.equals(this.playerLatencies, startGameSessionPlacementOutputGameSessionPlacement.playerLatencies) &&
        Objects.equals(this.startTime, startGameSessionPlacementOutputGameSessionPlacement.startTime) &&
        Objects.equals(this.endTime, startGameSessionPlacementOutputGameSessionPlacement.endTime) &&
        Objects.equals(this.ipAddress, startGameSessionPlacementOutputGameSessionPlacement.ipAddress) &&
        Objects.equals(this.dnsName, startGameSessionPlacementOutputGameSessionPlacement.dnsName) &&
        Objects.equals(this.port, startGameSessionPlacementOutputGameSessionPlacement.port) &&
        Objects.equals(this.placedPlayerSessions, startGameSessionPlacementOutputGameSessionPlacement.placedPlayerSessions) &&
        Objects.equals(this.gameSessionData, startGameSessionPlacementOutputGameSessionPlacement.gameSessionData) &&
        Objects.equals(this.matchmakerData, startGameSessionPlacementOutputGameSessionPlacement.matchmakerData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(placementId, gameSessionQueueName, status, gameProperties, maximumPlayerSessionCount, gameSessionName, gameSessionId, gameSessionArn, gameSessionRegion, playerLatencies, startTime, endTime, ipAddress, dnsName, port, placedPlayerSessions, gameSessionData, matchmakerData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartGameSessionPlacementOutputGameSessionPlacement {\n");
    sb.append("    placementId: ").append(toIndentedString(placementId)).append("\n");
    sb.append("    gameSessionQueueName: ").append(toIndentedString(gameSessionQueueName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    gameProperties: ").append(toIndentedString(gameProperties)).append("\n");
    sb.append("    maximumPlayerSessionCount: ").append(toIndentedString(maximumPlayerSessionCount)).append("\n");
    sb.append("    gameSessionName: ").append(toIndentedString(gameSessionName)).append("\n");
    sb.append("    gameSessionId: ").append(toIndentedString(gameSessionId)).append("\n");
    sb.append("    gameSessionArn: ").append(toIndentedString(gameSessionArn)).append("\n");
    sb.append("    gameSessionRegion: ").append(toIndentedString(gameSessionRegion)).append("\n");
    sb.append("    playerLatencies: ").append(toIndentedString(playerLatencies)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    placedPlayerSessions: ").append(toIndentedString(placedPlayerSessions)).append("\n");
    sb.append("    gameSessionData: ").append(toIndentedString(gameSessionData)).append("\n");
    sb.append("    matchmakerData: ").append(toIndentedString(matchmakerData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlacementId");
    openapiFields.add("GameSessionQueueName");
    openapiFields.add("Status");
    openapiFields.add("GameProperties");
    openapiFields.add("MaximumPlayerSessionCount");
    openapiFields.add("GameSessionName");
    openapiFields.add("GameSessionId");
    openapiFields.add("GameSessionArn");
    openapiFields.add("GameSessionRegion");
    openapiFields.add("PlayerLatencies");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("IpAddress");
    openapiFields.add("DnsName");
    openapiFields.add("Port");
    openapiFields.add("PlacedPlayerSessions");
    openapiFields.add("GameSessionData");
    openapiFields.add("MatchmakerData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartGameSessionPlacementOutputGameSessionPlacement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartGameSessionPlacementOutputGameSessionPlacement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartGameSessionPlacementOutputGameSessionPlacement is not found in the empty JSON string", StartGameSessionPlacementOutputGameSessionPlacement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartGameSessionPlacementOutputGameSessionPlacement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartGameSessionPlacementOutputGameSessionPlacement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PlacementId`
      if (jsonObj.get("PlacementId") != null && !jsonObj.get("PlacementId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlacementId"));
      }
      // validate the optional field `GameSessionQueueName`
      if (jsonObj.get("GameSessionQueueName") != null && !jsonObj.get("GameSessionQueueName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionQueueName"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        GameSessionPlacementState.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `GameProperties`
      if (jsonObj.get("GameProperties") != null && !jsonObj.get("GameProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GameProperties"));
      }
      // validate the optional field `MaximumPlayerSessionCount`
      if (jsonObj.get("MaximumPlayerSessionCount") != null && !jsonObj.get("MaximumPlayerSessionCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumPlayerSessionCount"));
      }
      // validate the optional field `GameSessionName`
      if (jsonObj.get("GameSessionName") != null && !jsonObj.get("GameSessionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionName"));
      }
      // validate the optional field `GameSessionId`
      if (jsonObj.get("GameSessionId") != null && !jsonObj.get("GameSessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionId"));
      }
      // validate the optional field `GameSessionArn`
      if (jsonObj.get("GameSessionArn") != null && !jsonObj.get("GameSessionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionArn"));
      }
      // validate the optional field `GameSessionRegion`
      if (jsonObj.get("GameSessionRegion") != null && !jsonObj.get("GameSessionRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionRegion"));
      }
      // validate the optional field `PlayerLatencies`
      if (jsonObj.get("PlayerLatencies") != null && !jsonObj.get("PlayerLatencies").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PlayerLatencies"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `DnsName`
      if (jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsName"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `PlacedPlayerSessions`
      if (jsonObj.get("PlacedPlayerSessions") != null && !jsonObj.get("PlacedPlayerSessions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PlacedPlayerSessions"));
      }
      // validate the optional field `GameSessionData`
      if (jsonObj.get("GameSessionData") != null && !jsonObj.get("GameSessionData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameSessionData"));
      }
      // validate the optional field `MatchmakerData`
      if (jsonObj.get("MatchmakerData") != null && !jsonObj.get("MatchmakerData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MatchmakerData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartGameSessionPlacementOutputGameSessionPlacement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartGameSessionPlacementOutputGameSessionPlacement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartGameSessionPlacementOutputGameSessionPlacement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartGameSessionPlacementOutputGameSessionPlacement.class));

       return (TypeAdapter<T>) new TypeAdapter<StartGameSessionPlacementOutputGameSessionPlacement>() {
           @Override
           public void write(JsonWriter out, StartGameSessionPlacementOutputGameSessionPlacement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartGameSessionPlacementOutputGameSessionPlacement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartGameSessionPlacementOutputGameSessionPlacement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartGameSessionPlacementOutputGameSessionPlacement
   * @throws IOException if the JSON string is invalid with respect to StartGameSessionPlacementOutputGameSessionPlacement
   */
  public static StartGameSessionPlacementOutputGameSessionPlacement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartGameSessionPlacementOutputGameSessionPlacement.class);
  }

  /**
   * Convert an instance of StartGameSessionPlacementOutputGameSessionPlacement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

