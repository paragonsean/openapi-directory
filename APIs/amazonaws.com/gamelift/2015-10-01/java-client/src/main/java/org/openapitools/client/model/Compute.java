/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ComputeStatus;
import org.openapitools.client.model.EC2InstanceType;
import org.openapitools.client.model.OperatingSystem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resources used to host your game servers. A compute resource can be managed Amazon GameLift Amazon EC2 instances or your own resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Compute {
  public static final String SERIALIZED_NAME_FLEET_ID = "FleetId";
  @SerializedName(SERIALIZED_NAME_FLEET_ID)
  private String fleetId;

  public static final String SERIALIZED_NAME_FLEET_ARN = "FleetArn";
  @SerializedName(SERIALIZED_NAME_FLEET_ARN)
  private String fleetArn;

  public static final String SERIALIZED_NAME_COMPUTE_NAME = "ComputeName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_NAME)
  private String computeName;

  public static final String SERIALIZED_NAME_COMPUTE_ARN = "ComputeArn";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ARN)
  private String computeArn;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_COMPUTE_STATUS = "ComputeStatus";
  @SerializedName(SERIALIZED_NAME_COMPUTE_STATUS)
  private ComputeStatus computeStatus;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "OperatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private OperatingSystem operatingSystem;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EC2InstanceType type;

  public static final String SERIALIZED_NAME_GAME_LIFT_SERVICE_SDK_ENDPOINT = "GameLiftServiceSdkEndpoint";
  @SerializedName(SERIALIZED_NAME_GAME_LIFT_SERVICE_SDK_ENDPOINT)
  private String gameLiftServiceSdkEndpoint;

  public Compute() {
  }

  public Compute fleetId(String fleetId) {
    this.fleetId = fleetId;
    return this;
  }

  /**
   * Get fleetId
   * @return fleetId
   */
  @javax.annotation.Nullable
  public String getFleetId() {
    return fleetId;
  }

  public void setFleetId(String fleetId) {
    this.fleetId = fleetId;
  }


  public Compute fleetArn(String fleetArn) {
    this.fleetArn = fleetArn;
    return this;
  }

  /**
   * Get fleetArn
   * @return fleetArn
   */
  @javax.annotation.Nullable
  public String getFleetArn() {
    return fleetArn;
  }

  public void setFleetArn(String fleetArn) {
    this.fleetArn = fleetArn;
  }


  public Compute computeName(String computeName) {
    this.computeName = computeName;
    return this;
  }

  /**
   * Get computeName
   * @return computeName
   */
  @javax.annotation.Nullable
  public String getComputeName() {
    return computeName;
  }

  public void setComputeName(String computeName) {
    this.computeName = computeName;
  }


  public Compute computeArn(String computeArn) {
    this.computeArn = computeArn;
    return this;
  }

  /**
   * Get computeArn
   * @return computeArn
   */
  @javax.annotation.Nullable
  public String getComputeArn() {
    return computeArn;
  }

  public void setComputeArn(String computeArn) {
    this.computeArn = computeArn;
  }


  public Compute ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Compute dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Get dnsName
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public Compute computeStatus(ComputeStatus computeStatus) {
    this.computeStatus = computeStatus;
    return this;
  }

  /**
   * Get computeStatus
   * @return computeStatus
   */
  @javax.annotation.Nullable
  public ComputeStatus getComputeStatus() {
    return computeStatus;
  }

  public void setComputeStatus(ComputeStatus computeStatus) {
    this.computeStatus = computeStatus;
  }


  public Compute location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Compute creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Compute operatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public OperatingSystem getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public Compute type(EC2InstanceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public EC2InstanceType getType() {
    return type;
  }

  public void setType(EC2InstanceType type) {
    this.type = type;
  }


  public Compute gameLiftServiceSdkEndpoint(String gameLiftServiceSdkEndpoint) {
    this.gameLiftServiceSdkEndpoint = gameLiftServiceSdkEndpoint;
    return this;
  }

  /**
   * Get gameLiftServiceSdkEndpoint
   * @return gameLiftServiceSdkEndpoint
   */
  @javax.annotation.Nullable
  public String getGameLiftServiceSdkEndpoint() {
    return gameLiftServiceSdkEndpoint;
  }

  public void setGameLiftServiceSdkEndpoint(String gameLiftServiceSdkEndpoint) {
    this.gameLiftServiceSdkEndpoint = gameLiftServiceSdkEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compute compute = (Compute) o;
    return Objects.equals(this.fleetId, compute.fleetId) &&
        Objects.equals(this.fleetArn, compute.fleetArn) &&
        Objects.equals(this.computeName, compute.computeName) &&
        Objects.equals(this.computeArn, compute.computeArn) &&
        Objects.equals(this.ipAddress, compute.ipAddress) &&
        Objects.equals(this.dnsName, compute.dnsName) &&
        Objects.equals(this.computeStatus, compute.computeStatus) &&
        Objects.equals(this.location, compute.location) &&
        Objects.equals(this.creationTime, compute.creationTime) &&
        Objects.equals(this.operatingSystem, compute.operatingSystem) &&
        Objects.equals(this.type, compute.type) &&
        Objects.equals(this.gameLiftServiceSdkEndpoint, compute.gameLiftServiceSdkEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fleetId, fleetArn, computeName, computeArn, ipAddress, dnsName, computeStatus, location, creationTime, operatingSystem, type, gameLiftServiceSdkEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compute {\n");
    sb.append("    fleetId: ").append(toIndentedString(fleetId)).append("\n");
    sb.append("    fleetArn: ").append(toIndentedString(fleetArn)).append("\n");
    sb.append("    computeName: ").append(toIndentedString(computeName)).append("\n");
    sb.append("    computeArn: ").append(toIndentedString(computeArn)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    computeStatus: ").append(toIndentedString(computeStatus)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    gameLiftServiceSdkEndpoint: ").append(toIndentedString(gameLiftServiceSdkEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FleetId");
    openapiFields.add("FleetArn");
    openapiFields.add("ComputeName");
    openapiFields.add("ComputeArn");
    openapiFields.add("IpAddress");
    openapiFields.add("DnsName");
    openapiFields.add("ComputeStatus");
    openapiFields.add("Location");
    openapiFields.add("CreationTime");
    openapiFields.add("OperatingSystem");
    openapiFields.add("Type");
    openapiFields.add("GameLiftServiceSdkEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Compute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Compute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Compute is not found in the empty JSON string", Compute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Compute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Compute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FleetId`
      if (jsonObj.get("FleetId") != null && !jsonObj.get("FleetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FleetId"));
      }
      // validate the optional field `FleetArn`
      if (jsonObj.get("FleetArn") != null && !jsonObj.get("FleetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FleetArn"));
      }
      // validate the optional field `ComputeName`
      if (jsonObj.get("ComputeName") != null && !jsonObj.get("ComputeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComputeName"));
      }
      // validate the optional field `ComputeArn`
      if (jsonObj.get("ComputeArn") != null && !jsonObj.get("ComputeArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComputeArn"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `DnsName`
      if (jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsName"));
      }
      // validate the optional field `ComputeStatus`
      if (jsonObj.get("ComputeStatus") != null && !jsonObj.get("ComputeStatus").isJsonNull()) {
        ComputeStatus.validateJsonElement(jsonObj.get("ComputeStatus"));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Location"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `OperatingSystem`
      if (jsonObj.get("OperatingSystem") != null && !jsonObj.get("OperatingSystem").isJsonNull()) {
        OperatingSystem.validateJsonElement(jsonObj.get("OperatingSystem"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        EC2InstanceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `GameLiftServiceSdkEndpoint`
      if (jsonObj.get("GameLiftServiceSdkEndpoint") != null && !jsonObj.get("GameLiftServiceSdkEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GameLiftServiceSdkEndpoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Compute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Compute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Compute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Compute.class));

       return (TypeAdapter<T>) new TypeAdapter<Compute>() {
           @Override
           public void write(JsonWriter out, Compute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Compute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Compute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Compute
   * @throws IOException if the JSON string is invalid with respect to Compute
   */
  public static Compute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Compute.class);
  }

  /**
   * Convert an instance of Compute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

