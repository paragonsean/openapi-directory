/*
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchmakingConfigurationStatus;
import org.openapitools.client.model.MatchmakingTicketGameSessionConnectionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartMatchmakingOutputMatchmakingTicket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.380048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartMatchmakingOutputMatchmakingTicket {
  public static final String SERIALIZED_NAME_TICKET_ID = "TicketId";
  @SerializedName(SERIALIZED_NAME_TICKET_ID)
  private String ticketId;

  public static final String SERIALIZED_NAME_CONFIGURATION_NAME = "ConfigurationName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_NAME)
  private String configurationName;

  public static final String SERIALIZED_NAME_CONFIGURATION_ARN = "ConfigurationArn";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ARN)
  private String configurationArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MatchmakingConfigurationStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PLAYERS = "Players";
  @SerializedName(SERIALIZED_NAME_PLAYERS)
  private List players;

  public static final String SERIALIZED_NAME_GAME_SESSION_CONNECTION_INFO = "GameSessionConnectionInfo";
  @SerializedName(SERIALIZED_NAME_GAME_SESSION_CONNECTION_INFO)
  private MatchmakingTicketGameSessionConnectionInfo gameSessionConnectionInfo;

  public static final String SERIALIZED_NAME_ESTIMATED_WAIT_TIME = "EstimatedWaitTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_WAIT_TIME)
  private Integer estimatedWaitTime;

  public StartMatchmakingOutputMatchmakingTicket() {
  }

  public StartMatchmakingOutputMatchmakingTicket ticketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  /**
   * Get ticketId
   * @return ticketId
   */
  @javax.annotation.Nullable
  public String getTicketId() {
    return ticketId;
  }

  public void setTicketId(String ticketId) {
    this.ticketId = ticketId;
  }


  public StartMatchmakingOutputMatchmakingTicket configurationName(String configurationName) {
    this.configurationName = configurationName;
    return this;
  }

  /**
   * Get configurationName
   * @return configurationName
   */
  @javax.annotation.Nullable
  public String getConfigurationName() {
    return configurationName;
  }

  public void setConfigurationName(String configurationName) {
    this.configurationName = configurationName;
  }


  public StartMatchmakingOutputMatchmakingTicket configurationArn(String configurationArn) {
    this.configurationArn = configurationArn;
    return this;
  }

  /**
   * Get configurationArn
   * @return configurationArn
   */
  @javax.annotation.Nullable
  public String getConfigurationArn() {
    return configurationArn;
  }

  public void setConfigurationArn(String configurationArn) {
    this.configurationArn = configurationArn;
  }


  public StartMatchmakingOutputMatchmakingTicket status(MatchmakingConfigurationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public MatchmakingConfigurationStatus getStatus() {
    return status;
  }

  public void setStatus(MatchmakingConfigurationStatus status) {
    this.status = status;
  }


  public StartMatchmakingOutputMatchmakingTicket statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public StartMatchmakingOutputMatchmakingTicket statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public StartMatchmakingOutputMatchmakingTicket startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public StartMatchmakingOutputMatchmakingTicket endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public StartMatchmakingOutputMatchmakingTicket players(List players) {
    this.players = players;
    return this;
  }

  /**
   * Get players
   * @return players
   */
  @javax.annotation.Nullable
  public List getPlayers() {
    return players;
  }

  public void setPlayers(List players) {
    this.players = players;
  }


  public StartMatchmakingOutputMatchmakingTicket gameSessionConnectionInfo(MatchmakingTicketGameSessionConnectionInfo gameSessionConnectionInfo) {
    this.gameSessionConnectionInfo = gameSessionConnectionInfo;
    return this;
  }

  /**
   * Get gameSessionConnectionInfo
   * @return gameSessionConnectionInfo
   */
  @javax.annotation.Nullable
  public MatchmakingTicketGameSessionConnectionInfo getGameSessionConnectionInfo() {
    return gameSessionConnectionInfo;
  }

  public void setGameSessionConnectionInfo(MatchmakingTicketGameSessionConnectionInfo gameSessionConnectionInfo) {
    this.gameSessionConnectionInfo = gameSessionConnectionInfo;
  }


  public StartMatchmakingOutputMatchmakingTicket estimatedWaitTime(Integer estimatedWaitTime) {
    this.estimatedWaitTime = estimatedWaitTime;
    return this;
  }

  /**
   * Get estimatedWaitTime
   * @return estimatedWaitTime
   */
  @javax.annotation.Nullable
  public Integer getEstimatedWaitTime() {
    return estimatedWaitTime;
  }

  public void setEstimatedWaitTime(Integer estimatedWaitTime) {
    this.estimatedWaitTime = estimatedWaitTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartMatchmakingOutputMatchmakingTicket startMatchmakingOutputMatchmakingTicket = (StartMatchmakingOutputMatchmakingTicket) o;
    return Objects.equals(this.ticketId, startMatchmakingOutputMatchmakingTicket.ticketId) &&
        Objects.equals(this.configurationName, startMatchmakingOutputMatchmakingTicket.configurationName) &&
        Objects.equals(this.configurationArn, startMatchmakingOutputMatchmakingTicket.configurationArn) &&
        Objects.equals(this.status, startMatchmakingOutputMatchmakingTicket.status) &&
        Objects.equals(this.statusReason, startMatchmakingOutputMatchmakingTicket.statusReason) &&
        Objects.equals(this.statusMessage, startMatchmakingOutputMatchmakingTicket.statusMessage) &&
        Objects.equals(this.startTime, startMatchmakingOutputMatchmakingTicket.startTime) &&
        Objects.equals(this.endTime, startMatchmakingOutputMatchmakingTicket.endTime) &&
        Objects.equals(this.players, startMatchmakingOutputMatchmakingTicket.players) &&
        Objects.equals(this.gameSessionConnectionInfo, startMatchmakingOutputMatchmakingTicket.gameSessionConnectionInfo) &&
        Objects.equals(this.estimatedWaitTime, startMatchmakingOutputMatchmakingTicket.estimatedWaitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticketId, configurationName, configurationArn, status, statusReason, statusMessage, startTime, endTime, players, gameSessionConnectionInfo, estimatedWaitTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartMatchmakingOutputMatchmakingTicket {\n");
    sb.append("    ticketId: ").append(toIndentedString(ticketId)).append("\n");
    sb.append("    configurationName: ").append(toIndentedString(configurationName)).append("\n");
    sb.append("    configurationArn: ").append(toIndentedString(configurationArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    players: ").append(toIndentedString(players)).append("\n");
    sb.append("    gameSessionConnectionInfo: ").append(toIndentedString(gameSessionConnectionInfo)).append("\n");
    sb.append("    estimatedWaitTime: ").append(toIndentedString(estimatedWaitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TicketId");
    openapiFields.add("ConfigurationName");
    openapiFields.add("ConfigurationArn");
    openapiFields.add("Status");
    openapiFields.add("StatusReason");
    openapiFields.add("StatusMessage");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Players");
    openapiFields.add("GameSessionConnectionInfo");
    openapiFields.add("EstimatedWaitTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartMatchmakingOutputMatchmakingTicket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartMatchmakingOutputMatchmakingTicket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartMatchmakingOutputMatchmakingTicket is not found in the empty JSON string", StartMatchmakingOutputMatchmakingTicket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartMatchmakingOutputMatchmakingTicket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartMatchmakingOutputMatchmakingTicket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TicketId`
      if (jsonObj.get("TicketId") != null && !jsonObj.get("TicketId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TicketId"));
      }
      // validate the optional field `ConfigurationName`
      if (jsonObj.get("ConfigurationName") != null && !jsonObj.get("ConfigurationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationName"));
      }
      // validate the optional field `ConfigurationArn`
      if (jsonObj.get("ConfigurationArn") != null && !jsonObj.get("ConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MatchmakingConfigurationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `Players`
      if (jsonObj.get("Players") != null && !jsonObj.get("Players").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Players"));
      }
      // validate the optional field `GameSessionConnectionInfo`
      if (jsonObj.get("GameSessionConnectionInfo") != null && !jsonObj.get("GameSessionConnectionInfo").isJsonNull()) {
        MatchmakingTicketGameSessionConnectionInfo.validateJsonElement(jsonObj.get("GameSessionConnectionInfo"));
      }
      // validate the optional field `EstimatedWaitTime`
      if (jsonObj.get("EstimatedWaitTime") != null && !jsonObj.get("EstimatedWaitTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedWaitTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartMatchmakingOutputMatchmakingTicket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartMatchmakingOutputMatchmakingTicket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartMatchmakingOutputMatchmakingTicket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartMatchmakingOutputMatchmakingTicket.class));

       return (TypeAdapter<T>) new TypeAdapter<StartMatchmakingOutputMatchmakingTicket>() {
           @Override
           public void write(JsonWriter out, StartMatchmakingOutputMatchmakingTicket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartMatchmakingOutputMatchmakingTicket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartMatchmakingOutputMatchmakingTicket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartMatchmakingOutputMatchmakingTicket
   * @throws IOException if the JSON string is invalid with respect to StartMatchmakingOutputMatchmakingTicket
   */
  public static StartMatchmakingOutputMatchmakingTicket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartMatchmakingOutputMatchmakingTicket.class);
  }

  /**
   * Convert an instance of StartMatchmakingOutputMatchmakingTicket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

