/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonGameLift);
  }
}(this, function(expect, AmazonGameLift) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonGameLift.MatchmakingConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MatchmakingConfiguration', function() {
    it('should create an instance of MatchmakingConfiguration', function() {
      // uncomment below and update the code to test MatchmakingConfiguration
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be.a(AmazonGameLift.MatchmakingConfiguration);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property configurationArn (base name: "ConfigurationArn")', function() {
      // uncomment below and update the code to test the property configurationArn
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property gameSessionQueueArns (base name: "GameSessionQueueArns")', function() {
      // uncomment below and update the code to test the property gameSessionQueueArns
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property requestTimeoutSeconds (base name: "RequestTimeoutSeconds")', function() {
      // uncomment below and update the code to test the property requestTimeoutSeconds
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property acceptanceTimeoutSeconds (base name: "AcceptanceTimeoutSeconds")', function() {
      // uncomment below and update the code to test the property acceptanceTimeoutSeconds
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property acceptanceRequired (base name: "AcceptanceRequired")', function() {
      // uncomment below and update the code to test the property acceptanceRequired
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property ruleSetName (base name: "RuleSetName")', function() {
      // uncomment below and update the code to test the property ruleSetName
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property ruleSetArn (base name: "RuleSetArn")', function() {
      // uncomment below and update the code to test the property ruleSetArn
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property notificationTarget (base name: "NotificationTarget")', function() {
      // uncomment below and update the code to test the property notificationTarget
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property additionalPlayerCount (base name: "AdditionalPlayerCount")', function() {
      // uncomment below and update the code to test the property additionalPlayerCount
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property customEventData (base name: "CustomEventData")', function() {
      // uncomment below and update the code to test the property customEventData
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "CreationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property gameProperties (base name: "GameProperties")', function() {
      // uncomment below and update the code to test the property gameProperties
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property gameSessionData (base name: "GameSessionData")', function() {
      // uncomment below and update the code to test the property gameSessionData
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property backfillMode (base name: "BackfillMode")', function() {
      // uncomment below and update the code to test the property backfillMode
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property flexMatchMode (base name: "FlexMatchMode")', function() {
      // uncomment below and update the code to test the property flexMatchMode
      //var instance = new AmazonGameLift.MatchmakingConfiguration();
      //expect(instance).to.be();
    });

  });

}));
