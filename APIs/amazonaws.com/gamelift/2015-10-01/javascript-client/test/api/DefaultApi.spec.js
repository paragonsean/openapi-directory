/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonGameLift);
  }
}(this, function(expect, AmazonGameLift) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonGameLift.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acceptMatch', function() {
      it('should call acceptMatch successfully', function(done) {
        //uncomment below and update the code to test acceptMatch
        //instance.acceptMatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('claimGameServer', function() {
      it('should call claimGameServer successfully', function(done) {
        //uncomment below and update the code to test claimGameServer
        //instance.claimGameServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAlias', function() {
      it('should call createAlias successfully', function(done) {
        //uncomment below and update the code to test createAlias
        //instance.createAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBuild', function() {
      it('should call createBuild successfully', function(done) {
        //uncomment below and update the code to test createBuild
        //instance.createBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFleet', function() {
      it('should call createFleet successfully', function(done) {
        //uncomment below and update the code to test createFleet
        //instance.createFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFleetLocations', function() {
      it('should call createFleetLocations successfully', function(done) {
        //uncomment below and update the code to test createFleetLocations
        //instance.createFleetLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGameServerGroup', function() {
      it('should call createGameServerGroup successfully', function(done) {
        //uncomment below and update the code to test createGameServerGroup
        //instance.createGameServerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGameSession', function() {
      it('should call createGameSession successfully', function(done) {
        //uncomment below and update the code to test createGameSession
        //instance.createGameSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGameSessionQueue', function() {
      it('should call createGameSessionQueue successfully', function(done) {
        //uncomment below and update the code to test createGameSessionQueue
        //instance.createGameSessionQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLocation', function() {
      it('should call createLocation successfully', function(done) {
        //uncomment below and update the code to test createLocation
        //instance.createLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMatchmakingConfiguration', function() {
      it('should call createMatchmakingConfiguration successfully', function(done) {
        //uncomment below and update the code to test createMatchmakingConfiguration
        //instance.createMatchmakingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMatchmakingRuleSet', function() {
      it('should call createMatchmakingRuleSet successfully', function(done) {
        //uncomment below and update the code to test createMatchmakingRuleSet
        //instance.createMatchmakingRuleSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPlayerSession', function() {
      it('should call createPlayerSession successfully', function(done) {
        //uncomment below and update the code to test createPlayerSession
        //instance.createPlayerSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPlayerSessions', function() {
      it('should call createPlayerSessions successfully', function(done) {
        //uncomment below and update the code to test createPlayerSessions
        //instance.createPlayerSessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createScript', function() {
      it('should call createScript successfully', function(done) {
        //uncomment below and update the code to test createScript
        //instance.createScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcPeeringAuthorization', function() {
      it('should call createVpcPeeringAuthorization successfully', function(done) {
        //uncomment below and update the code to test createVpcPeeringAuthorization
        //instance.createVpcPeeringAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcPeeringConnection', function() {
      it('should call createVpcPeeringConnection successfully', function(done) {
        //uncomment below and update the code to test createVpcPeeringConnection
        //instance.createVpcPeeringConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAlias', function() {
      it('should call deleteAlias successfully', function(done) {
        //uncomment below and update the code to test deleteAlias
        //instance.deleteAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBuild', function() {
      it('should call deleteBuild successfully', function(done) {
        //uncomment below and update the code to test deleteBuild
        //instance.deleteBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFleet', function() {
      it('should call deleteFleet successfully', function(done) {
        //uncomment below and update the code to test deleteFleet
        //instance.deleteFleet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFleetLocations', function() {
      it('should call deleteFleetLocations successfully', function(done) {
        //uncomment below and update the code to test deleteFleetLocations
        //instance.deleteFleetLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGameServerGroup', function() {
      it('should call deleteGameServerGroup successfully', function(done) {
        //uncomment below and update the code to test deleteGameServerGroup
        //instance.deleteGameServerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGameSessionQueue', function() {
      it('should call deleteGameSessionQueue successfully', function(done) {
        //uncomment below and update the code to test deleteGameSessionQueue
        //instance.deleteGameSessionQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLocation', function() {
      it('should call deleteLocation successfully', function(done) {
        //uncomment below and update the code to test deleteLocation
        //instance.deleteLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMatchmakingConfiguration', function() {
      it('should call deleteMatchmakingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteMatchmakingConfiguration
        //instance.deleteMatchmakingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMatchmakingRuleSet', function() {
      it('should call deleteMatchmakingRuleSet successfully', function(done) {
        //uncomment below and update the code to test deleteMatchmakingRuleSet
        //instance.deleteMatchmakingRuleSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScalingPolicy', function() {
      it('should call deleteScalingPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteScalingPolicy
        //instance.deleteScalingPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScript', function() {
      it('should call deleteScript successfully', function(done) {
        //uncomment below and update the code to test deleteScript
        //instance.deleteScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcPeeringAuthorization', function() {
      it('should call deleteVpcPeeringAuthorization successfully', function(done) {
        //uncomment below and update the code to test deleteVpcPeeringAuthorization
        //instance.deleteVpcPeeringAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcPeeringConnection', function() {
      it('should call deleteVpcPeeringConnection successfully', function(done) {
        //uncomment below and update the code to test deleteVpcPeeringConnection
        //instance.deleteVpcPeeringConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterCompute', function() {
      it('should call deregisterCompute successfully', function(done) {
        //uncomment below and update the code to test deregisterCompute
        //instance.deregisterCompute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterGameServer', function() {
      it('should call deregisterGameServer successfully', function(done) {
        //uncomment below and update the code to test deregisterGameServer
        //instance.deregisterGameServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAlias', function() {
      it('should call describeAlias successfully', function(done) {
        //uncomment below and update the code to test describeAlias
        //instance.describeAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBuild', function() {
      it('should call describeBuild successfully', function(done) {
        //uncomment below and update the code to test describeBuild
        //instance.describeBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCompute', function() {
      it('should call describeCompute successfully', function(done) {
        //uncomment below and update the code to test describeCompute
        //instance.describeCompute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEC2InstanceLimits', function() {
      it('should call describeEC2InstanceLimits successfully', function(done) {
        //uncomment below and update the code to test describeEC2InstanceLimits
        //instance.describeEC2InstanceLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetAttributes', function() {
      it('should call describeFleetAttributes successfully', function(done) {
        //uncomment below and update the code to test describeFleetAttributes
        //instance.describeFleetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetCapacity', function() {
      it('should call describeFleetCapacity successfully', function(done) {
        //uncomment below and update the code to test describeFleetCapacity
        //instance.describeFleetCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetEvents', function() {
      it('should call describeFleetEvents successfully', function(done) {
        //uncomment below and update the code to test describeFleetEvents
        //instance.describeFleetEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetLocationAttributes', function() {
      it('should call describeFleetLocationAttributes successfully', function(done) {
        //uncomment below and update the code to test describeFleetLocationAttributes
        //instance.describeFleetLocationAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetLocationCapacity', function() {
      it('should call describeFleetLocationCapacity successfully', function(done) {
        //uncomment below and update the code to test describeFleetLocationCapacity
        //instance.describeFleetLocationCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetLocationUtilization', function() {
      it('should call describeFleetLocationUtilization successfully', function(done) {
        //uncomment below and update the code to test describeFleetLocationUtilization
        //instance.describeFleetLocationUtilization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetPortSettings', function() {
      it('should call describeFleetPortSettings successfully', function(done) {
        //uncomment below and update the code to test describeFleetPortSettings
        //instance.describeFleetPortSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFleetUtilization', function() {
      it('should call describeFleetUtilization successfully', function(done) {
        //uncomment below and update the code to test describeFleetUtilization
        //instance.describeFleetUtilization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameServer', function() {
      it('should call describeGameServer successfully', function(done) {
        //uncomment below and update the code to test describeGameServer
        //instance.describeGameServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameServerGroup', function() {
      it('should call describeGameServerGroup successfully', function(done) {
        //uncomment below and update the code to test describeGameServerGroup
        //instance.describeGameServerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameServerInstances', function() {
      it('should call describeGameServerInstances successfully', function(done) {
        //uncomment below and update the code to test describeGameServerInstances
        //instance.describeGameServerInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameSessionDetails', function() {
      it('should call describeGameSessionDetails successfully', function(done) {
        //uncomment below and update the code to test describeGameSessionDetails
        //instance.describeGameSessionDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameSessionPlacement', function() {
      it('should call describeGameSessionPlacement successfully', function(done) {
        //uncomment below and update the code to test describeGameSessionPlacement
        //instance.describeGameSessionPlacement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameSessionQueues', function() {
      it('should call describeGameSessionQueues successfully', function(done) {
        //uncomment below and update the code to test describeGameSessionQueues
        //instance.describeGameSessionQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGameSessions', function() {
      it('should call describeGameSessions successfully', function(done) {
        //uncomment below and update the code to test describeGameSessions
        //instance.describeGameSessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInstances', function() {
      it('should call describeInstances successfully', function(done) {
        //uncomment below and update the code to test describeInstances
        //instance.describeInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMatchmaking', function() {
      it('should call describeMatchmaking successfully', function(done) {
        //uncomment below and update the code to test describeMatchmaking
        //instance.describeMatchmaking(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMatchmakingConfigurations', function() {
      it('should call describeMatchmakingConfigurations successfully', function(done) {
        //uncomment below and update the code to test describeMatchmakingConfigurations
        //instance.describeMatchmakingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMatchmakingRuleSets', function() {
      it('should call describeMatchmakingRuleSets successfully', function(done) {
        //uncomment below and update the code to test describeMatchmakingRuleSets
        //instance.describeMatchmakingRuleSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePlayerSessions', function() {
      it('should call describePlayerSessions successfully', function(done) {
        //uncomment below and update the code to test describePlayerSessions
        //instance.describePlayerSessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRuntimeConfiguration', function() {
      it('should call describeRuntimeConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeRuntimeConfiguration
        //instance.describeRuntimeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeScalingPolicies', function() {
      it('should call describeScalingPolicies successfully', function(done) {
        //uncomment below and update the code to test describeScalingPolicies
        //instance.describeScalingPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeScript', function() {
      it('should call describeScript successfully', function(done) {
        //uncomment below and update the code to test describeScript
        //instance.describeScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcPeeringAuthorizations', function() {
      it('should call describeVpcPeeringAuthorizations successfully', function(done) {
        //uncomment below and update the code to test describeVpcPeeringAuthorizations
        //instance.describeVpcPeeringAuthorizations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcPeeringConnections', function() {
      it('should call describeVpcPeeringConnections successfully', function(done) {
        //uncomment below and update the code to test describeVpcPeeringConnections
        //instance.describeVpcPeeringConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComputeAccess', function() {
      it('should call getComputeAccess successfully', function(done) {
        //uncomment below and update the code to test getComputeAccess
        //instance.getComputeAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComputeAuthToken', function() {
      it('should call getComputeAuthToken successfully', function(done) {
        //uncomment below and update the code to test getComputeAuthToken
        //instance.getComputeAuthToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGameSessionLogUrl', function() {
      it('should call getGameSessionLogUrl successfully', function(done) {
        //uncomment below and update the code to test getGameSessionLogUrl
        //instance.getGameSessionLogUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceAccess', function() {
      it('should call getInstanceAccess successfully', function(done) {
        //uncomment below and update the code to test getInstanceAccess
        //instance.getInstanceAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAliases', function() {
      it('should call listAliases successfully', function(done) {
        //uncomment below and update the code to test listAliases
        //instance.listAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuilds', function() {
      it('should call listBuilds successfully', function(done) {
        //uncomment below and update the code to test listBuilds
        //instance.listBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCompute', function() {
      it('should call listCompute successfully', function(done) {
        //uncomment below and update the code to test listCompute
        //instance.listCompute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFleets', function() {
      it('should call listFleets successfully', function(done) {
        //uncomment below and update the code to test listFleets
        //instance.listFleets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGameServerGroups', function() {
      it('should call listGameServerGroups successfully', function(done) {
        //uncomment below and update the code to test listGameServerGroups
        //instance.listGameServerGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGameServers', function() {
      it('should call listGameServers successfully', function(done) {
        //uncomment below and update the code to test listGameServers
        //instance.listGameServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLocations', function() {
      it('should call listLocations successfully', function(done) {
        //uncomment below and update the code to test listLocations
        //instance.listLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listScripts', function() {
      it('should call listScripts successfully', function(done) {
        //uncomment below and update the code to test listScripts
        //instance.listScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putScalingPolicy', function() {
      it('should call putScalingPolicy successfully', function(done) {
        //uncomment below and update the code to test putScalingPolicy
        //instance.putScalingPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerCompute', function() {
      it('should call registerCompute successfully', function(done) {
        //uncomment below and update the code to test registerCompute
        //instance.registerCompute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerGameServer', function() {
      it('should call registerGameServer successfully', function(done) {
        //uncomment below and update the code to test registerGameServer
        //instance.registerGameServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestUploadCredentials', function() {
      it('should call requestUploadCredentials successfully', function(done) {
        //uncomment below and update the code to test requestUploadCredentials
        //instance.requestUploadCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveAlias', function() {
      it('should call resolveAlias successfully', function(done) {
        //uncomment below and update the code to test resolveAlias
        //instance.resolveAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeGameServerGroup', function() {
      it('should call resumeGameServerGroup successfully', function(done) {
        //uncomment below and update the code to test resumeGameServerGroup
        //instance.resumeGameServerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchGameSessions', function() {
      it('should call searchGameSessions successfully', function(done) {
        //uncomment below and update the code to test searchGameSessions
        //instance.searchGameSessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFleetActions', function() {
      it('should call startFleetActions successfully', function(done) {
        //uncomment below and update the code to test startFleetActions
        //instance.startFleetActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startGameSessionPlacement', function() {
      it('should call startGameSessionPlacement successfully', function(done) {
        //uncomment below and update the code to test startGameSessionPlacement
        //instance.startGameSessionPlacement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startMatchBackfill', function() {
      it('should call startMatchBackfill successfully', function(done) {
        //uncomment below and update the code to test startMatchBackfill
        //instance.startMatchBackfill(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startMatchmaking', function() {
      it('should call startMatchmaking successfully', function(done) {
        //uncomment below and update the code to test startMatchmaking
        //instance.startMatchmaking(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopFleetActions', function() {
      it('should call stopFleetActions successfully', function(done) {
        //uncomment below and update the code to test stopFleetActions
        //instance.stopFleetActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopGameSessionPlacement', function() {
      it('should call stopGameSessionPlacement successfully', function(done) {
        //uncomment below and update the code to test stopGameSessionPlacement
        //instance.stopGameSessionPlacement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopMatchmaking', function() {
      it('should call stopMatchmaking successfully', function(done) {
        //uncomment below and update the code to test stopMatchmaking
        //instance.stopMatchmaking(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('suspendGameServerGroup', function() {
      it('should call suspendGameServerGroup successfully', function(done) {
        //uncomment below and update the code to test suspendGameServerGroup
        //instance.suspendGameServerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAlias', function() {
      it('should call updateAlias successfully', function(done) {
        //uncomment below and update the code to test updateAlias
        //instance.updateAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBuild', function() {
      it('should call updateBuild successfully', function(done) {
        //uncomment below and update the code to test updateBuild
        //instance.updateBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFleetAttributes', function() {
      it('should call updateFleetAttributes successfully', function(done) {
        //uncomment below and update the code to test updateFleetAttributes
        //instance.updateFleetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFleetCapacity', function() {
      it('should call updateFleetCapacity successfully', function(done) {
        //uncomment below and update the code to test updateFleetCapacity
        //instance.updateFleetCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFleetPortSettings', function() {
      it('should call updateFleetPortSettings successfully', function(done) {
        //uncomment below and update the code to test updateFleetPortSettings
        //instance.updateFleetPortSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGameServer', function() {
      it('should call updateGameServer successfully', function(done) {
        //uncomment below and update the code to test updateGameServer
        //instance.updateGameServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGameServerGroup', function() {
      it('should call updateGameServerGroup successfully', function(done) {
        //uncomment below and update the code to test updateGameServerGroup
        //instance.updateGameServerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGameSession', function() {
      it('should call updateGameSession successfully', function(done) {
        //uncomment below and update the code to test updateGameSession
        //instance.updateGameSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGameSessionQueue', function() {
      it('should call updateGameSessionQueue successfully', function(done) {
        //uncomment below and update the code to test updateGameSessionQueue
        //instance.updateGameSessionQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMatchmakingConfiguration', function() {
      it('should call updateMatchmakingConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateMatchmakingConfiguration
        //instance.updateMatchmakingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRuntimeConfiguration', function() {
      it('should call updateRuntimeConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateRuntimeConfiguration
        //instance.updateRuntimeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScript', function() {
      it('should call updateScript successfully', function(done) {
        //uncomment below and update the code to test updateScript
        //instance.updateScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateMatchmakingRuleSet', function() {
      it('should call validateMatchmakingRuleSet successfully', function(done) {
        //uncomment below and update the code to test validateMatchmakingRuleSet
        //instance.validateMatchmakingRuleSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
