/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeComputeOutput_Compute.h
 *
 * 
 */

#ifndef OAIDescribeComputeOutput_Compute_H
#define OAIDescribeComputeOutput_Compute_H

#include <QJsonObject>

#include "OAIComputeStatus.h"
#include "OAIEC2InstanceType.h"
#include "OAIOperatingSystem.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeComputeOutput_Compute : public OAIObject {
public:
    OAIDescribeComputeOutput_Compute();
    OAIDescribeComputeOutput_Compute(QString json);
    ~OAIDescribeComputeOutput_Compute() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFleetId() const;
    void setFleetId(const QString &fleet_id);
    bool is_fleet_id_Set() const;
    bool is_fleet_id_Valid() const;

    QString getFleetArn() const;
    void setFleetArn(const QString &fleet_arn);
    bool is_fleet_arn_Set() const;
    bool is_fleet_arn_Valid() const;

    QString getComputeName() const;
    void setComputeName(const QString &compute_name);
    bool is_compute_name_Set() const;
    bool is_compute_name_Valid() const;

    QString getComputeArn() const;
    void setComputeArn(const QString &compute_arn);
    bool is_compute_arn_Set() const;
    bool is_compute_arn_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QString getDnsName() const;
    void setDnsName(const QString &dns_name);
    bool is_dns_name_Set() const;
    bool is_dns_name_Valid() const;

    OAIComputeStatus getComputeStatus() const;
    void setComputeStatus(const OAIComputeStatus &compute_status);
    bool is_compute_status_Set() const;
    bool is_compute_status_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIOperatingSystem getOperatingSystem() const;
    void setOperatingSystem(const OAIOperatingSystem &operating_system);
    bool is_operating_system_Set() const;
    bool is_operating_system_Valid() const;

    OAIEC2InstanceType getType() const;
    void setType(const OAIEC2InstanceType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getGameLiftServiceSdkEndpoint() const;
    void setGameLiftServiceSdkEndpoint(const QString &game_lift_service_sdk_endpoint);
    bool is_game_lift_service_sdk_endpoint_Set() const;
    bool is_game_lift_service_sdk_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_fleet_id;
    bool m_fleet_id_isSet;
    bool m_fleet_id_isValid;

    QString m_fleet_arn;
    bool m_fleet_arn_isSet;
    bool m_fleet_arn_isValid;

    QString m_compute_name;
    bool m_compute_name_isSet;
    bool m_compute_name_isValid;

    QString m_compute_arn;
    bool m_compute_arn_isSet;
    bool m_compute_arn_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QString m_dns_name;
    bool m_dns_name_isSet;
    bool m_dns_name_isValid;

    OAIComputeStatus m_compute_status;
    bool m_compute_status_isSet;
    bool m_compute_status_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIOperatingSystem m_operating_system;
    bool m_operating_system_isSet;
    bool m_operating_system_isValid;

    OAIEC2InstanceType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_game_lift_service_sdk_endpoint;
    bool m_game_lift_service_sdk_endpoint_isSet;
    bool m_game_lift_service_sdk_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeComputeOutput_Compute)

#endif // OAIDescribeComputeOutput_Compute_H
