/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFleetInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFleetInput::OAICreateFleetInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFleetInput::OAICreateFleetInput() {
    this->initializeModel();
}

OAICreateFleetInput::~OAICreateFleetInput() {}

void OAICreateFleetInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_script_id_isSet = false;
    m_script_id_isValid = false;

    m_server_launch_path_isSet = false;
    m_server_launch_path_isValid = false;

    m_server_launch_parameters_isSet = false;
    m_server_launch_parameters_isValid = false;

    m_log_paths_isSet = false;
    m_log_paths_isValid = false;

    m_ec2_instance_type_isSet = false;
    m_ec2_instance_type_isValid = false;

    m_ec2_inbound_permissions_isSet = false;
    m_ec2_inbound_permissions_isValid = false;

    m_new_game_session_protection_policy_isSet = false;
    m_new_game_session_protection_policy_isValid = false;

    m_runtime_configuration_isSet = false;
    m_runtime_configuration_isValid = false;

    m_resource_creation_limit_policy_isSet = false;
    m_resource_creation_limit_policy_isValid = false;

    m_metric_groups_isSet = false;
    m_metric_groups_isValid = false;

    m_peer_vpc_aws_account_id_isSet = false;
    m_peer_vpc_aws_account_id_isValid = false;

    m_peer_vpc_id_isSet = false;
    m_peer_vpc_id_isValid = false;

    m_fleet_type_isSet = false;
    m_fleet_type_isValid = false;

    m_instance_role_arn_isSet = false;
    m_instance_role_arn_isValid = false;

    m_certificate_configuration_isSet = false;
    m_certificate_configuration_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_anywhere_configuration_isSet = false;
    m_anywhere_configuration_isValid = false;
}

void OAICreateFleetInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFleetInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("BuildId")]);
    m_build_id_isSet = !json[QString("BuildId")].isNull() && m_build_id_isValid;

    m_script_id_isValid = ::OpenAPI::fromJsonValue(m_script_id, json[QString("ScriptId")]);
    m_script_id_isSet = !json[QString("ScriptId")].isNull() && m_script_id_isValid;

    m_server_launch_path_isValid = ::OpenAPI::fromJsonValue(m_server_launch_path, json[QString("ServerLaunchPath")]);
    m_server_launch_path_isSet = !json[QString("ServerLaunchPath")].isNull() && m_server_launch_path_isValid;

    m_server_launch_parameters_isValid = ::OpenAPI::fromJsonValue(m_server_launch_parameters, json[QString("ServerLaunchParameters")]);
    m_server_launch_parameters_isSet = !json[QString("ServerLaunchParameters")].isNull() && m_server_launch_parameters_isValid;

    m_log_paths_isValid = ::OpenAPI::fromJsonValue(m_log_paths, json[QString("LogPaths")]);
    m_log_paths_isSet = !json[QString("LogPaths")].isNull() && m_log_paths_isValid;

    m_ec2_instance_type_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_type, json[QString("EC2InstanceType")]);
    m_ec2_instance_type_isSet = !json[QString("EC2InstanceType")].isNull() && m_ec2_instance_type_isValid;

    m_ec2_inbound_permissions_isValid = ::OpenAPI::fromJsonValue(m_ec2_inbound_permissions, json[QString("EC2InboundPermissions")]);
    m_ec2_inbound_permissions_isSet = !json[QString("EC2InboundPermissions")].isNull() && m_ec2_inbound_permissions_isValid;

    m_new_game_session_protection_policy_isValid = ::OpenAPI::fromJsonValue(m_new_game_session_protection_policy, json[QString("NewGameSessionProtectionPolicy")]);
    m_new_game_session_protection_policy_isSet = !json[QString("NewGameSessionProtectionPolicy")].isNull() && m_new_game_session_protection_policy_isValid;

    m_runtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_runtime_configuration, json[QString("RuntimeConfiguration")]);
    m_runtime_configuration_isSet = !json[QString("RuntimeConfiguration")].isNull() && m_runtime_configuration_isValid;

    m_resource_creation_limit_policy_isValid = ::OpenAPI::fromJsonValue(m_resource_creation_limit_policy, json[QString("ResourceCreationLimitPolicy")]);
    m_resource_creation_limit_policy_isSet = !json[QString("ResourceCreationLimitPolicy")].isNull() && m_resource_creation_limit_policy_isValid;

    m_metric_groups_isValid = ::OpenAPI::fromJsonValue(m_metric_groups, json[QString("MetricGroups")]);
    m_metric_groups_isSet = !json[QString("MetricGroups")].isNull() && m_metric_groups_isValid;

    m_peer_vpc_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_peer_vpc_aws_account_id, json[QString("PeerVpcAwsAccountId")]);
    m_peer_vpc_aws_account_id_isSet = !json[QString("PeerVpcAwsAccountId")].isNull() && m_peer_vpc_aws_account_id_isValid;

    m_peer_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_peer_vpc_id, json[QString("PeerVpcId")]);
    m_peer_vpc_id_isSet = !json[QString("PeerVpcId")].isNull() && m_peer_vpc_id_isValid;

    m_fleet_type_isValid = ::OpenAPI::fromJsonValue(m_fleet_type, json[QString("FleetType")]);
    m_fleet_type_isSet = !json[QString("FleetType")].isNull() && m_fleet_type_isValid;

    m_instance_role_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_role_arn, json[QString("InstanceRoleArn")]);
    m_instance_role_arn_isSet = !json[QString("InstanceRoleArn")].isNull() && m_instance_role_arn_isValid;

    m_certificate_configuration_isValid = ::OpenAPI::fromJsonValue(m_certificate_configuration, json[QString("CertificateConfiguration")]);
    m_certificate_configuration_isSet = !json[QString("CertificateConfiguration")].isNull() && m_certificate_configuration_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("Locations")]);
    m_locations_isSet = !json[QString("Locations")].isNull() && m_locations_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("ComputeType")]);
    m_compute_type_isSet = !json[QString("ComputeType")].isNull() && m_compute_type_isValid;

    m_anywhere_configuration_isValid = ::OpenAPI::fromJsonValue(m_anywhere_configuration, json[QString("AnywhereConfiguration")]);
    m_anywhere_configuration_isSet = !json[QString("AnywhereConfiguration")].isNull() && m_anywhere_configuration_isValid;
}

QString OAICreateFleetInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFleetInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("BuildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_script_id_isSet) {
        obj.insert(QString("ScriptId"), ::OpenAPI::toJsonValue(m_script_id));
    }
    if (m_server_launch_path_isSet) {
        obj.insert(QString("ServerLaunchPath"), ::OpenAPI::toJsonValue(m_server_launch_path));
    }
    if (m_server_launch_parameters_isSet) {
        obj.insert(QString("ServerLaunchParameters"), ::OpenAPI::toJsonValue(m_server_launch_parameters));
    }
    if (m_log_paths.isSet()) {
        obj.insert(QString("LogPaths"), ::OpenAPI::toJsonValue(m_log_paths));
    }
    if (m_ec2_instance_type.isSet()) {
        obj.insert(QString("EC2InstanceType"), ::OpenAPI::toJsonValue(m_ec2_instance_type));
    }
    if (m_ec2_inbound_permissions.isSet()) {
        obj.insert(QString("EC2InboundPermissions"), ::OpenAPI::toJsonValue(m_ec2_inbound_permissions));
    }
    if (m_new_game_session_protection_policy.isSet()) {
        obj.insert(QString("NewGameSessionProtectionPolicy"), ::OpenAPI::toJsonValue(m_new_game_session_protection_policy));
    }
    if (m_runtime_configuration.isSet()) {
        obj.insert(QString("RuntimeConfiguration"), ::OpenAPI::toJsonValue(m_runtime_configuration));
    }
    if (m_resource_creation_limit_policy.isSet()) {
        obj.insert(QString("ResourceCreationLimitPolicy"), ::OpenAPI::toJsonValue(m_resource_creation_limit_policy));
    }
    if (m_metric_groups.isSet()) {
        obj.insert(QString("MetricGroups"), ::OpenAPI::toJsonValue(m_metric_groups));
    }
    if (m_peer_vpc_aws_account_id_isSet) {
        obj.insert(QString("PeerVpcAwsAccountId"), ::OpenAPI::toJsonValue(m_peer_vpc_aws_account_id));
    }
    if (m_peer_vpc_id_isSet) {
        obj.insert(QString("PeerVpcId"), ::OpenAPI::toJsonValue(m_peer_vpc_id));
    }
    if (m_fleet_type.isSet()) {
        obj.insert(QString("FleetType"), ::OpenAPI::toJsonValue(m_fleet_type));
    }
    if (m_instance_role_arn_isSet) {
        obj.insert(QString("InstanceRoleArn"), ::OpenAPI::toJsonValue(m_instance_role_arn));
    }
    if (m_certificate_configuration.isSet()) {
        obj.insert(QString("CertificateConfiguration"), ::OpenAPI::toJsonValue(m_certificate_configuration));
    }
    if (m_locations.isSet()) {
        obj.insert(QString("Locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("ComputeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_anywhere_configuration.isSet()) {
        obj.insert(QString("AnywhereConfiguration"), ::OpenAPI::toJsonValue(m_anywhere_configuration));
    }
    return obj;
}

QString OAICreateFleetInput::getName() const {
    return m_name;
}
void OAICreateFleetInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFleetInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFleetInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateFleetInput::getDescription() const {
    return m_description;
}
void OAICreateFleetInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFleetInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFleetInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateFleetInput::getBuildId() const {
    return m_build_id;
}
void OAICreateFleetInput::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAICreateFleetInput::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAICreateFleetInput::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAICreateFleetInput::getScriptId() const {
    return m_script_id;
}
void OAICreateFleetInput::setScriptId(const QString &script_id) {
    m_script_id = script_id;
    m_script_id_isSet = true;
}

bool OAICreateFleetInput::is_script_id_Set() const{
    return m_script_id_isSet;
}

bool OAICreateFleetInput::is_script_id_Valid() const{
    return m_script_id_isValid;
}

QString OAICreateFleetInput::getServerLaunchPath() const {
    return m_server_launch_path;
}
void OAICreateFleetInput::setServerLaunchPath(const QString &server_launch_path) {
    m_server_launch_path = server_launch_path;
    m_server_launch_path_isSet = true;
}

bool OAICreateFleetInput::is_server_launch_path_Set() const{
    return m_server_launch_path_isSet;
}

bool OAICreateFleetInput::is_server_launch_path_Valid() const{
    return m_server_launch_path_isValid;
}

QString OAICreateFleetInput::getServerLaunchParameters() const {
    return m_server_launch_parameters;
}
void OAICreateFleetInput::setServerLaunchParameters(const QString &server_launch_parameters) {
    m_server_launch_parameters = server_launch_parameters;
    m_server_launch_parameters_isSet = true;
}

bool OAICreateFleetInput::is_server_launch_parameters_Set() const{
    return m_server_launch_parameters_isSet;
}

bool OAICreateFleetInput::is_server_launch_parameters_Valid() const{
    return m_server_launch_parameters_isValid;
}

QList OAICreateFleetInput::getLogPaths() const {
    return m_log_paths;
}
void OAICreateFleetInput::setLogPaths(const QList &log_paths) {
    m_log_paths = log_paths;
    m_log_paths_isSet = true;
}

bool OAICreateFleetInput::is_log_paths_Set() const{
    return m_log_paths_isSet;
}

bool OAICreateFleetInput::is_log_paths_Valid() const{
    return m_log_paths_isValid;
}

OAIEC2InstanceType OAICreateFleetInput::getEc2InstanceType() const {
    return m_ec2_instance_type;
}
void OAICreateFleetInput::setEc2InstanceType(const OAIEC2InstanceType &ec2_instance_type) {
    m_ec2_instance_type = ec2_instance_type;
    m_ec2_instance_type_isSet = true;
}

bool OAICreateFleetInput::is_ec2_instance_type_Set() const{
    return m_ec2_instance_type_isSet;
}

bool OAICreateFleetInput::is_ec2_instance_type_Valid() const{
    return m_ec2_instance_type_isValid;
}

QList OAICreateFleetInput::getEc2InboundPermissions() const {
    return m_ec2_inbound_permissions;
}
void OAICreateFleetInput::setEc2InboundPermissions(const QList &ec2_inbound_permissions) {
    m_ec2_inbound_permissions = ec2_inbound_permissions;
    m_ec2_inbound_permissions_isSet = true;
}

bool OAICreateFleetInput::is_ec2_inbound_permissions_Set() const{
    return m_ec2_inbound_permissions_isSet;
}

bool OAICreateFleetInput::is_ec2_inbound_permissions_Valid() const{
    return m_ec2_inbound_permissions_isValid;
}

OAIProtectionPolicy OAICreateFleetInput::getNewGameSessionProtectionPolicy() const {
    return m_new_game_session_protection_policy;
}
void OAICreateFleetInput::setNewGameSessionProtectionPolicy(const OAIProtectionPolicy &new_game_session_protection_policy) {
    m_new_game_session_protection_policy = new_game_session_protection_policy;
    m_new_game_session_protection_policy_isSet = true;
}

bool OAICreateFleetInput::is_new_game_session_protection_policy_Set() const{
    return m_new_game_session_protection_policy_isSet;
}

bool OAICreateFleetInput::is_new_game_session_protection_policy_Valid() const{
    return m_new_game_session_protection_policy_isValid;
}

OAICreateFleetInput_RuntimeConfiguration OAICreateFleetInput::getRuntimeConfiguration() const {
    return m_runtime_configuration;
}
void OAICreateFleetInput::setRuntimeConfiguration(const OAICreateFleetInput_RuntimeConfiguration &runtime_configuration) {
    m_runtime_configuration = runtime_configuration;
    m_runtime_configuration_isSet = true;
}

bool OAICreateFleetInput::is_runtime_configuration_Set() const{
    return m_runtime_configuration_isSet;
}

bool OAICreateFleetInput::is_runtime_configuration_Valid() const{
    return m_runtime_configuration_isValid;
}

OAICreateFleetInput_ResourceCreationLimitPolicy OAICreateFleetInput::getResourceCreationLimitPolicy() const {
    return m_resource_creation_limit_policy;
}
void OAICreateFleetInput::setResourceCreationLimitPolicy(const OAICreateFleetInput_ResourceCreationLimitPolicy &resource_creation_limit_policy) {
    m_resource_creation_limit_policy = resource_creation_limit_policy;
    m_resource_creation_limit_policy_isSet = true;
}

bool OAICreateFleetInput::is_resource_creation_limit_policy_Set() const{
    return m_resource_creation_limit_policy_isSet;
}

bool OAICreateFleetInput::is_resource_creation_limit_policy_Valid() const{
    return m_resource_creation_limit_policy_isValid;
}

QList OAICreateFleetInput::getMetricGroups() const {
    return m_metric_groups;
}
void OAICreateFleetInput::setMetricGroups(const QList &metric_groups) {
    m_metric_groups = metric_groups;
    m_metric_groups_isSet = true;
}

bool OAICreateFleetInput::is_metric_groups_Set() const{
    return m_metric_groups_isSet;
}

bool OAICreateFleetInput::is_metric_groups_Valid() const{
    return m_metric_groups_isValid;
}

QString OAICreateFleetInput::getPeerVpcAwsAccountId() const {
    return m_peer_vpc_aws_account_id;
}
void OAICreateFleetInput::setPeerVpcAwsAccountId(const QString &peer_vpc_aws_account_id) {
    m_peer_vpc_aws_account_id = peer_vpc_aws_account_id;
    m_peer_vpc_aws_account_id_isSet = true;
}

bool OAICreateFleetInput::is_peer_vpc_aws_account_id_Set() const{
    return m_peer_vpc_aws_account_id_isSet;
}

bool OAICreateFleetInput::is_peer_vpc_aws_account_id_Valid() const{
    return m_peer_vpc_aws_account_id_isValid;
}

QString OAICreateFleetInput::getPeerVpcId() const {
    return m_peer_vpc_id;
}
void OAICreateFleetInput::setPeerVpcId(const QString &peer_vpc_id) {
    m_peer_vpc_id = peer_vpc_id;
    m_peer_vpc_id_isSet = true;
}

bool OAICreateFleetInput::is_peer_vpc_id_Set() const{
    return m_peer_vpc_id_isSet;
}

bool OAICreateFleetInput::is_peer_vpc_id_Valid() const{
    return m_peer_vpc_id_isValid;
}

OAIFleetType OAICreateFleetInput::getFleetType() const {
    return m_fleet_type;
}
void OAICreateFleetInput::setFleetType(const OAIFleetType &fleet_type) {
    m_fleet_type = fleet_type;
    m_fleet_type_isSet = true;
}

bool OAICreateFleetInput::is_fleet_type_Set() const{
    return m_fleet_type_isSet;
}

bool OAICreateFleetInput::is_fleet_type_Valid() const{
    return m_fleet_type_isValid;
}

QString OAICreateFleetInput::getInstanceRoleArn() const {
    return m_instance_role_arn;
}
void OAICreateFleetInput::setInstanceRoleArn(const QString &instance_role_arn) {
    m_instance_role_arn = instance_role_arn;
    m_instance_role_arn_isSet = true;
}

bool OAICreateFleetInput::is_instance_role_arn_Set() const{
    return m_instance_role_arn_isSet;
}

bool OAICreateFleetInput::is_instance_role_arn_Valid() const{
    return m_instance_role_arn_isValid;
}

OAICreateFleetInput_CertificateConfiguration OAICreateFleetInput::getCertificateConfiguration() const {
    return m_certificate_configuration;
}
void OAICreateFleetInput::setCertificateConfiguration(const OAICreateFleetInput_CertificateConfiguration &certificate_configuration) {
    m_certificate_configuration = certificate_configuration;
    m_certificate_configuration_isSet = true;
}

bool OAICreateFleetInput::is_certificate_configuration_Set() const{
    return m_certificate_configuration_isSet;
}

bool OAICreateFleetInput::is_certificate_configuration_Valid() const{
    return m_certificate_configuration_isValid;
}

QList OAICreateFleetInput::getLocations() const {
    return m_locations;
}
void OAICreateFleetInput::setLocations(const QList &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAICreateFleetInput::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAICreateFleetInput::is_locations_Valid() const{
    return m_locations_isValid;
}

QList OAICreateFleetInput::getTags() const {
    return m_tags;
}
void OAICreateFleetInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFleetInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFleetInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIComputeType OAICreateFleetInput::getComputeType() const {
    return m_compute_type;
}
void OAICreateFleetInput::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAICreateFleetInput::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAICreateFleetInput::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

OAICreateFleetInput_AnywhereConfiguration OAICreateFleetInput::getAnywhereConfiguration() const {
    return m_anywhere_configuration;
}
void OAICreateFleetInput::setAnywhereConfiguration(const OAICreateFleetInput_AnywhereConfiguration &anywhere_configuration) {
    m_anywhere_configuration = anywhere_configuration;
    m_anywhere_configuration_isSet = true;
}

bool OAICreateFleetInput::is_anywhere_configuration_Set() const{
    return m_anywhere_configuration_isSet;
}

bool OAICreateFleetInput::is_anywhere_configuration_Valid() const{
    return m_anywhere_configuration_isValid;
}

bool OAICreateFleetInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_launch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_launch_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_inbound_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_game_session_protection_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_creation_limit_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_vpc_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anywhere_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFleetInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
