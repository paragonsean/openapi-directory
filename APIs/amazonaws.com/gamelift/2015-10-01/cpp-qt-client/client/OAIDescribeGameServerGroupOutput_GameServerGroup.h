/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeGameServerGroupOutput_GameServerGroup.h
 *
 * 
 */

#ifndef OAIDescribeGameServerGroupOutput_GameServerGroup_H
#define OAIDescribeGameServerGroupOutput_GameServerGroup_H

#include <QJsonObject>

#include "OAIBalancingStrategy.h"
#include "OAIGameServerGroupStatus.h"
#include "OAIGameServerProtectionPolicy.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeGameServerGroupOutput_GameServerGroup : public OAIObject {
public:
    OAIDescribeGameServerGroupOutput_GameServerGroup();
    OAIDescribeGameServerGroupOutput_GameServerGroup(QString json);
    ~OAIDescribeGameServerGroupOutput_GameServerGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGameServerGroupName() const;
    void setGameServerGroupName(const QString &game_server_group_name);
    bool is_game_server_group_name_Set() const;
    bool is_game_server_group_name_Valid() const;

    QString getGameServerGroupArn() const;
    void setGameServerGroupArn(const QString &game_server_group_arn);
    bool is_game_server_group_arn_Set() const;
    bool is_game_server_group_arn_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QList getInstanceDefinitions() const;
    void setInstanceDefinitions(const QList &instance_definitions);
    bool is_instance_definitions_Set() const;
    bool is_instance_definitions_Valid() const;

    OAIBalancingStrategy getBalancingStrategy() const;
    void setBalancingStrategy(const OAIBalancingStrategy &balancing_strategy);
    bool is_balancing_strategy_Set() const;
    bool is_balancing_strategy_Valid() const;

    OAIGameServerProtectionPolicy getGameServerProtectionPolicy() const;
    void setGameServerProtectionPolicy(const OAIGameServerProtectionPolicy &game_server_protection_policy);
    bool is_game_server_protection_policy_Set() const;
    bool is_game_server_protection_policy_Valid() const;

    QString getAutoScalingGroupArn() const;
    void setAutoScalingGroupArn(const QString &auto_scaling_group_arn);
    bool is_auto_scaling_group_arn_Set() const;
    bool is_auto_scaling_group_arn_Valid() const;

    OAIGameServerGroupStatus getStatus() const;
    void setStatus(const OAIGameServerGroupStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QList getSuspendedActions() const;
    void setSuspendedActions(const QList &suspended_actions);
    bool is_suspended_actions_Set() const;
    bool is_suspended_actions_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_game_server_group_name;
    bool m_game_server_group_name_isSet;
    bool m_game_server_group_name_isValid;

    QString m_game_server_group_arn;
    bool m_game_server_group_arn_isSet;
    bool m_game_server_group_arn_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QList m_instance_definitions;
    bool m_instance_definitions_isSet;
    bool m_instance_definitions_isValid;

    OAIBalancingStrategy m_balancing_strategy;
    bool m_balancing_strategy_isSet;
    bool m_balancing_strategy_isValid;

    OAIGameServerProtectionPolicy m_game_server_protection_policy;
    bool m_game_server_protection_policy_isSet;
    bool m_game_server_protection_policy_isValid;

    QString m_auto_scaling_group_arn;
    bool m_auto_scaling_group_arn_isSet;
    bool m_auto_scaling_group_arn_isValid;

    OAIGameServerGroupStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QList m_suspended_actions;
    bool m_suspended_actions_isSet;
    bool m_suspended_actions_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeGameServerGroupOutput_GameServerGroup)

#endif // OAIDescribeGameServerGroupOutput_GameServerGroup_H
