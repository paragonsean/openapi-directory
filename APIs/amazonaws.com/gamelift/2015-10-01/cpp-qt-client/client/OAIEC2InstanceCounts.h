/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEC2InstanceCounts.h
 *
 * Resource capacity settings. Fleet capacity is measured in Amazon EC2 instances. Pending and terminating counts are non-zero when the fleet capacity is adjusting to a scaling event or if access to resources is temporarily affected.
 */

#ifndef OAIEC2InstanceCounts_H
#define OAIEC2InstanceCounts_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEC2InstanceCounts : public OAIObject {
public:
    OAIEC2InstanceCounts();
    OAIEC2InstanceCounts(QString json);
    ~OAIEC2InstanceCounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDesired() const;
    void setDesired(const qint32 &desired);
    bool is_desired_Set() const;
    bool is_desired_Valid() const;

    qint32 getMinimum() const;
    void setMinimum(const qint32 &minimum);
    bool is_minimum_Set() const;
    bool is_minimum_Valid() const;

    qint32 getMaximum() const;
    void setMaximum(const qint32 &maximum);
    bool is_maximum_Set() const;
    bool is_maximum_Valid() const;

    qint32 getPending() const;
    void setPending(const qint32 &pending);
    bool is_pending_Set() const;
    bool is_pending_Valid() const;

    qint32 getActive() const;
    void setActive(const qint32 &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    qint32 getIdle() const;
    void setIdle(const qint32 &idle);
    bool is_idle_Set() const;
    bool is_idle_Valid() const;

    qint32 getTerminating() const;
    void setTerminating(const qint32 &terminating);
    bool is_terminating_Set() const;
    bool is_terminating_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_desired;
    bool m_desired_isSet;
    bool m_desired_isValid;

    qint32 m_minimum;
    bool m_minimum_isSet;
    bool m_minimum_isValid;

    qint32 m_maximum;
    bool m_maximum_isSet;
    bool m_maximum_isValid;

    qint32 m_pending;
    bool m_pending_isSet;
    bool m_pending_isValid;

    qint32 m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    qint32 m_idle;
    bool m_idle_isSet;
    bool m_idle_isValid;

    qint32 m_terminating;
    bool m_terminating_isSet;
    bool m_terminating_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEC2InstanceCounts)

#endif // OAIEC2InstanceCounts_H
