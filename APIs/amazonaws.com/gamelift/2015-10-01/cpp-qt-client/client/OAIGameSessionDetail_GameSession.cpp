/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameSessionDetail_GameSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameSessionDetail_GameSession::OAIGameSessionDetail_GameSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameSessionDetail_GameSession::OAIGameSessionDetail_GameSession() {
    this->initializeModel();
}

OAIGameSessionDetail_GameSession::~OAIGameSessionDetail_GameSession() {}

void OAIGameSessionDetail_GameSession::initializeModel() {

    m_game_session_id_isSet = false;
    m_game_session_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_fleet_id_isSet = false;
    m_fleet_id_isValid = false;

    m_fleet_arn_isSet = false;
    m_fleet_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_termination_time_isSet = false;
    m_termination_time_isValid = false;

    m_current_player_session_count_isSet = false;
    m_current_player_session_count_isValid = false;

    m_maximum_player_session_count_isSet = false;
    m_maximum_player_session_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_game_properties_isSet = false;
    m_game_properties_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_player_session_creation_policy_isSet = false;
    m_player_session_creation_policy_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_game_session_data_isSet = false;
    m_game_session_data_isValid = false;

    m_matchmaker_data_isSet = false;
    m_matchmaker_data_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIGameSessionDetail_GameSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameSessionDetail_GameSession::fromJsonObject(QJsonObject json) {

    m_game_session_id_isValid = ::OpenAPI::fromJsonValue(m_game_session_id, json[QString("GameSessionId")]);
    m_game_session_id_isSet = !json[QString("GameSessionId")].isNull() && m_game_session_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_fleet_id_isValid = ::OpenAPI::fromJsonValue(m_fleet_id, json[QString("FleetId")]);
    m_fleet_id_isSet = !json[QString("FleetId")].isNull() && m_fleet_id_isValid;

    m_fleet_arn_isValid = ::OpenAPI::fromJsonValue(m_fleet_arn, json[QString("FleetArn")]);
    m_fleet_arn_isSet = !json[QString("FleetArn")].isNull() && m_fleet_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_termination_time_isValid = ::OpenAPI::fromJsonValue(m_termination_time, json[QString("TerminationTime")]);
    m_termination_time_isSet = !json[QString("TerminationTime")].isNull() && m_termination_time_isValid;

    m_current_player_session_count_isValid = ::OpenAPI::fromJsonValue(m_current_player_session_count, json[QString("CurrentPlayerSessionCount")]);
    m_current_player_session_count_isSet = !json[QString("CurrentPlayerSessionCount")].isNull() && m_current_player_session_count_isValid;

    m_maximum_player_session_count_isValid = ::OpenAPI::fromJsonValue(m_maximum_player_session_count, json[QString("MaximumPlayerSessionCount")]);
    m_maximum_player_session_count_isSet = !json[QString("MaximumPlayerSessionCount")].isNull() && m_maximum_player_session_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_game_properties_isValid = ::OpenAPI::fromJsonValue(m_game_properties, json[QString("GameProperties")]);
    m_game_properties_isSet = !json[QString("GameProperties")].isNull() && m_game_properties_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DnsName")]);
    m_dns_name_isSet = !json[QString("DnsName")].isNull() && m_dns_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_player_session_creation_policy_isValid = ::OpenAPI::fromJsonValue(m_player_session_creation_policy, json[QString("PlayerSessionCreationPolicy")]);
    m_player_session_creation_policy_isSet = !json[QString("PlayerSessionCreationPolicy")].isNull() && m_player_session_creation_policy_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("CreatorId")]);
    m_creator_id_isSet = !json[QString("CreatorId")].isNull() && m_creator_id_isValid;

    m_game_session_data_isValid = ::OpenAPI::fromJsonValue(m_game_session_data, json[QString("GameSessionData")]);
    m_game_session_data_isSet = !json[QString("GameSessionData")].isNull() && m_game_session_data_isValid;

    m_matchmaker_data_isValid = ::OpenAPI::fromJsonValue(m_matchmaker_data, json[QString("MatchmakerData")]);
    m_matchmaker_data_isSet = !json[QString("MatchmakerData")].isNull() && m_matchmaker_data_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;
}

QString OAIGameSessionDetail_GameSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameSessionDetail_GameSession::asJsonObject() const {
    QJsonObject obj;
    if (m_game_session_id_isSet) {
        obj.insert(QString("GameSessionId"), ::OpenAPI::toJsonValue(m_game_session_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_fleet_id_isSet) {
        obj.insert(QString("FleetId"), ::OpenAPI::toJsonValue(m_fleet_id));
    }
    if (m_fleet_arn_isSet) {
        obj.insert(QString("FleetArn"), ::OpenAPI::toJsonValue(m_fleet_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_termination_time_isSet) {
        obj.insert(QString("TerminationTime"), ::OpenAPI::toJsonValue(m_termination_time));
    }
    if (m_current_player_session_count_isSet) {
        obj.insert(QString("CurrentPlayerSessionCount"), ::OpenAPI::toJsonValue(m_current_player_session_count));
    }
    if (m_maximum_player_session_count_isSet) {
        obj.insert(QString("MaximumPlayerSessionCount"), ::OpenAPI::toJsonValue(m_maximum_player_session_count));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason.isSet()) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_game_properties.isSet()) {
        obj.insert(QString("GameProperties"), ::OpenAPI::toJsonValue(m_game_properties));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_player_session_creation_policy.isSet()) {
        obj.insert(QString("PlayerSessionCreationPolicy"), ::OpenAPI::toJsonValue(m_player_session_creation_policy));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("CreatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_game_session_data_isSet) {
        obj.insert(QString("GameSessionData"), ::OpenAPI::toJsonValue(m_game_session_data));
    }
    if (m_matchmaker_data_isSet) {
        obj.insert(QString("MatchmakerData"), ::OpenAPI::toJsonValue(m_matchmaker_data));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

QString OAIGameSessionDetail_GameSession::getGameSessionId() const {
    return m_game_session_id;
}
void OAIGameSessionDetail_GameSession::setGameSessionId(const QString &game_session_id) {
    m_game_session_id = game_session_id;
    m_game_session_id_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_game_session_id_Set() const{
    return m_game_session_id_isSet;
}

bool OAIGameSessionDetail_GameSession::is_game_session_id_Valid() const{
    return m_game_session_id_isValid;
}

QString OAIGameSessionDetail_GameSession::getName() const {
    return m_name;
}
void OAIGameSessionDetail_GameSession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGameSessionDetail_GameSession::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGameSessionDetail_GameSession::getFleetId() const {
    return m_fleet_id;
}
void OAIGameSessionDetail_GameSession::setFleetId(const QString &fleet_id) {
    m_fleet_id = fleet_id;
    m_fleet_id_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_fleet_id_Set() const{
    return m_fleet_id_isSet;
}

bool OAIGameSessionDetail_GameSession::is_fleet_id_Valid() const{
    return m_fleet_id_isValid;
}

QString OAIGameSessionDetail_GameSession::getFleetArn() const {
    return m_fleet_arn;
}
void OAIGameSessionDetail_GameSession::setFleetArn(const QString &fleet_arn) {
    m_fleet_arn = fleet_arn;
    m_fleet_arn_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_fleet_arn_Set() const{
    return m_fleet_arn_isSet;
}

bool OAIGameSessionDetail_GameSession::is_fleet_arn_Valid() const{
    return m_fleet_arn_isValid;
}

QDateTime OAIGameSessionDetail_GameSession::getCreationTime() const {
    return m_creation_time;
}
void OAIGameSessionDetail_GameSession::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGameSessionDetail_GameSession::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIGameSessionDetail_GameSession::getTerminationTime() const {
    return m_termination_time;
}
void OAIGameSessionDetail_GameSession::setTerminationTime(const QDateTime &termination_time) {
    m_termination_time = termination_time;
    m_termination_time_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_termination_time_Set() const{
    return m_termination_time_isSet;
}

bool OAIGameSessionDetail_GameSession::is_termination_time_Valid() const{
    return m_termination_time_isValid;
}

qint32 OAIGameSessionDetail_GameSession::getCurrentPlayerSessionCount() const {
    return m_current_player_session_count;
}
void OAIGameSessionDetail_GameSession::setCurrentPlayerSessionCount(const qint32 &current_player_session_count) {
    m_current_player_session_count = current_player_session_count;
    m_current_player_session_count_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_current_player_session_count_Set() const{
    return m_current_player_session_count_isSet;
}

bool OAIGameSessionDetail_GameSession::is_current_player_session_count_Valid() const{
    return m_current_player_session_count_isValid;
}

qint32 OAIGameSessionDetail_GameSession::getMaximumPlayerSessionCount() const {
    return m_maximum_player_session_count;
}
void OAIGameSessionDetail_GameSession::setMaximumPlayerSessionCount(const qint32 &maximum_player_session_count) {
    m_maximum_player_session_count = maximum_player_session_count;
    m_maximum_player_session_count_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_maximum_player_session_count_Set() const{
    return m_maximum_player_session_count_isSet;
}

bool OAIGameSessionDetail_GameSession::is_maximum_player_session_count_Valid() const{
    return m_maximum_player_session_count_isValid;
}

OAIGameSessionStatus OAIGameSessionDetail_GameSession::getStatus() const {
    return m_status;
}
void OAIGameSessionDetail_GameSession::setStatus(const OAIGameSessionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGameSessionDetail_GameSession::is_status_Valid() const{
    return m_status_isValid;
}

OAIGameSessionStatusReason OAIGameSessionDetail_GameSession::getStatusReason() const {
    return m_status_reason;
}
void OAIGameSessionDetail_GameSession::setStatusReason(const OAIGameSessionStatusReason &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGameSessionDetail_GameSession::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QList OAIGameSessionDetail_GameSession::getGameProperties() const {
    return m_game_properties;
}
void OAIGameSessionDetail_GameSession::setGameProperties(const QList &game_properties) {
    m_game_properties = game_properties;
    m_game_properties_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_game_properties_Set() const{
    return m_game_properties_isSet;
}

bool OAIGameSessionDetail_GameSession::is_game_properties_Valid() const{
    return m_game_properties_isValid;
}

QString OAIGameSessionDetail_GameSession::getIpAddress() const {
    return m_ip_address;
}
void OAIGameSessionDetail_GameSession::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIGameSessionDetail_GameSession::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIGameSessionDetail_GameSession::getDnsName() const {
    return m_dns_name;
}
void OAIGameSessionDetail_GameSession::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIGameSessionDetail_GameSession::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

qint32 OAIGameSessionDetail_GameSession::getPort() const {
    return m_port;
}
void OAIGameSessionDetail_GameSession::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGameSessionDetail_GameSession::is_port_Valid() const{
    return m_port_isValid;
}

OAIPlayerSessionCreationPolicy OAIGameSessionDetail_GameSession::getPlayerSessionCreationPolicy() const {
    return m_player_session_creation_policy;
}
void OAIGameSessionDetail_GameSession::setPlayerSessionCreationPolicy(const OAIPlayerSessionCreationPolicy &player_session_creation_policy) {
    m_player_session_creation_policy = player_session_creation_policy;
    m_player_session_creation_policy_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_player_session_creation_policy_Set() const{
    return m_player_session_creation_policy_isSet;
}

bool OAIGameSessionDetail_GameSession::is_player_session_creation_policy_Valid() const{
    return m_player_session_creation_policy_isValid;
}

QString OAIGameSessionDetail_GameSession::getCreatorId() const {
    return m_creator_id;
}
void OAIGameSessionDetail_GameSession::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIGameSessionDetail_GameSession::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAIGameSessionDetail_GameSession::getGameSessionData() const {
    return m_game_session_data;
}
void OAIGameSessionDetail_GameSession::setGameSessionData(const QString &game_session_data) {
    m_game_session_data = game_session_data;
    m_game_session_data_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_game_session_data_Set() const{
    return m_game_session_data_isSet;
}

bool OAIGameSessionDetail_GameSession::is_game_session_data_Valid() const{
    return m_game_session_data_isValid;
}

QString OAIGameSessionDetail_GameSession::getMatchmakerData() const {
    return m_matchmaker_data;
}
void OAIGameSessionDetail_GameSession::setMatchmakerData(const QString &matchmaker_data) {
    m_matchmaker_data = matchmaker_data;
    m_matchmaker_data_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_matchmaker_data_Set() const{
    return m_matchmaker_data_isSet;
}

bool OAIGameSessionDetail_GameSession::is_matchmaker_data_Valid() const{
    return m_matchmaker_data_isValid;
}

QString OAIGameSessionDetail_GameSession::getLocation() const {
    return m_location;
}
void OAIGameSessionDetail_GameSession::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGameSessionDetail_GameSession::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGameSessionDetail_GameSession::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIGameSessionDetail_GameSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_player_session_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_player_session_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_session_creation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matchmaker_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameSessionDetail_GameSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
