/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMatchmakingOutput_MatchmakingTicket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMatchmakingOutput_MatchmakingTicket::OAIStartMatchmakingOutput_MatchmakingTicket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMatchmakingOutput_MatchmakingTicket::OAIStartMatchmakingOutput_MatchmakingTicket() {
    this->initializeModel();
}

OAIStartMatchmakingOutput_MatchmakingTicket::~OAIStartMatchmakingOutput_MatchmakingTicket() {}

void OAIStartMatchmakingOutput_MatchmakingTicket::initializeModel() {

    m_ticket_id_isSet = false;
    m_ticket_id_isValid = false;

    m_configuration_name_isSet = false;
    m_configuration_name_isValid = false;

    m_configuration_arn_isSet = false;
    m_configuration_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_players_isSet = false;
    m_players_isValid = false;

    m_game_session_connection_info_isSet = false;
    m_game_session_connection_info_isValid = false;

    m_estimated_wait_time_isSet = false;
    m_estimated_wait_time_isValid = false;
}

void OAIStartMatchmakingOutput_MatchmakingTicket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMatchmakingOutput_MatchmakingTicket::fromJsonObject(QJsonObject json) {

    m_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_ticket_id, json[QString("TicketId")]);
    m_ticket_id_isSet = !json[QString("TicketId")].isNull() && m_ticket_id_isValid;

    m_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_name, json[QString("ConfigurationName")]);
    m_configuration_name_isSet = !json[QString("ConfigurationName")].isNull() && m_configuration_name_isValid;

    m_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_configuration_arn, json[QString("ConfigurationArn")]);
    m_configuration_arn_isSet = !json[QString("ConfigurationArn")].isNull() && m_configuration_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_players_isValid = ::OpenAPI::fromJsonValue(m_players, json[QString("Players")]);
    m_players_isSet = !json[QString("Players")].isNull() && m_players_isValid;

    m_game_session_connection_info_isValid = ::OpenAPI::fromJsonValue(m_game_session_connection_info, json[QString("GameSessionConnectionInfo")]);
    m_game_session_connection_info_isSet = !json[QString("GameSessionConnectionInfo")].isNull() && m_game_session_connection_info_isValid;

    m_estimated_wait_time_isValid = ::OpenAPI::fromJsonValue(m_estimated_wait_time, json[QString("EstimatedWaitTime")]);
    m_estimated_wait_time_isSet = !json[QString("EstimatedWaitTime")].isNull() && m_estimated_wait_time_isValid;
}

QString OAIStartMatchmakingOutput_MatchmakingTicket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMatchmakingOutput_MatchmakingTicket::asJsonObject() const {
    QJsonObject obj;
    if (m_ticket_id_isSet) {
        obj.insert(QString("TicketId"), ::OpenAPI::toJsonValue(m_ticket_id));
    }
    if (m_configuration_name_isSet) {
        obj.insert(QString("ConfigurationName"), ::OpenAPI::toJsonValue(m_configuration_name));
    }
    if (m_configuration_arn_isSet) {
        obj.insert(QString("ConfigurationArn"), ::OpenAPI::toJsonValue(m_configuration_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_players.isSet()) {
        obj.insert(QString("Players"), ::OpenAPI::toJsonValue(m_players));
    }
    if (m_game_session_connection_info.isSet()) {
        obj.insert(QString("GameSessionConnectionInfo"), ::OpenAPI::toJsonValue(m_game_session_connection_info));
    }
    if (m_estimated_wait_time_isSet) {
        obj.insert(QString("EstimatedWaitTime"), ::OpenAPI::toJsonValue(m_estimated_wait_time));
    }
    return obj;
}

QString OAIStartMatchmakingOutput_MatchmakingTicket::getTicketId() const {
    return m_ticket_id;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setTicketId(const QString &ticket_id) {
    m_ticket_id = ticket_id;
    m_ticket_id_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_ticket_id_Set() const{
    return m_ticket_id_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_ticket_id_Valid() const{
    return m_ticket_id_isValid;
}

QString OAIStartMatchmakingOutput_MatchmakingTicket::getConfigurationName() const {
    return m_configuration_name;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setConfigurationName(const QString &configuration_name) {
    m_configuration_name = configuration_name;
    m_configuration_name_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_configuration_name_Set() const{
    return m_configuration_name_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_configuration_name_Valid() const{
    return m_configuration_name_isValid;
}

QString OAIStartMatchmakingOutput_MatchmakingTicket::getConfigurationArn() const {
    return m_configuration_arn;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setConfigurationArn(const QString &configuration_arn) {
    m_configuration_arn = configuration_arn;
    m_configuration_arn_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_configuration_arn_Set() const{
    return m_configuration_arn_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_configuration_arn_Valid() const{
    return m_configuration_arn_isValid;
}

OAIMatchmakingConfigurationStatus OAIStartMatchmakingOutput_MatchmakingTicket::getStatus() const {
    return m_status;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setStatus(const OAIMatchmakingConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStartMatchmakingOutput_MatchmakingTicket::getStatusReason() const {
    return m_status_reason;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAIStartMatchmakingOutput_MatchmakingTicket::getStatusMessage() const {
    return m_status_message;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIStartMatchmakingOutput_MatchmakingTicket::getStartTime() const {
    return m_start_time;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIStartMatchmakingOutput_MatchmakingTicket::getEndTime() const {
    return m_end_time;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIStartMatchmakingOutput_MatchmakingTicket::getPlayers() const {
    return m_players;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setPlayers(const QList &players) {
    m_players = players;
    m_players_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_players_Set() const{
    return m_players_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_players_Valid() const{
    return m_players_isValid;
}

OAIMatchmakingTicket_GameSessionConnectionInfo OAIStartMatchmakingOutput_MatchmakingTicket::getGameSessionConnectionInfo() const {
    return m_game_session_connection_info;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setGameSessionConnectionInfo(const OAIMatchmakingTicket_GameSessionConnectionInfo &game_session_connection_info) {
    m_game_session_connection_info = game_session_connection_info;
    m_game_session_connection_info_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_game_session_connection_info_Set() const{
    return m_game_session_connection_info_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_game_session_connection_info_Valid() const{
    return m_game_session_connection_info_isValid;
}

qint32 OAIStartMatchmakingOutput_MatchmakingTicket::getEstimatedWaitTime() const {
    return m_estimated_wait_time;
}
void OAIStartMatchmakingOutput_MatchmakingTicket::setEstimatedWaitTime(const qint32 &estimated_wait_time) {
    m_estimated_wait_time = estimated_wait_time;
    m_estimated_wait_time_isSet = true;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_estimated_wait_time_Set() const{
    return m_estimated_wait_time_isSet;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::is_estimated_wait_time_Valid() const{
    return m_estimated_wait_time_isValid;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_players.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_connection_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_wait_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMatchmakingOutput_MatchmakingTicket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
