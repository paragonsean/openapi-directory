/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateMatchmakingConfigurationInput.h
 *
 * 
 */

#ifndef OAIUpdateMatchmakingConfigurationInput_H
#define OAIUpdateMatchmakingConfigurationInput_H

#include <QJsonObject>

#include "OAIBackfillMode.h"
#include "OAIFlexMatchMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateMatchmakingConfigurationInput : public OAIObject {
public:
    OAIUpdateMatchmakingConfigurationInput();
    OAIUpdateMatchmakingConfigurationInput(QString json);
    ~OAIUpdateMatchmakingConfigurationInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getGameSessionQueueArns() const;
    void setGameSessionQueueArns(const QList &game_session_queue_arns);
    bool is_game_session_queue_arns_Set() const;
    bool is_game_session_queue_arns_Valid() const;

    qint32 getRequestTimeoutSeconds() const;
    void setRequestTimeoutSeconds(const qint32 &request_timeout_seconds);
    bool is_request_timeout_seconds_Set() const;
    bool is_request_timeout_seconds_Valid() const;

    qint32 getAcceptanceTimeoutSeconds() const;
    void setAcceptanceTimeoutSeconds(const qint32 &acceptance_timeout_seconds);
    bool is_acceptance_timeout_seconds_Set() const;
    bool is_acceptance_timeout_seconds_Valid() const;

    bool getAcceptanceRequired() const;
    void setAcceptanceRequired(const bool &acceptance_required);
    bool is_acceptance_required_Set() const;
    bool is_acceptance_required_Valid() const;

    QString getRuleSetName() const;
    void setRuleSetName(const QString &rule_set_name);
    bool is_rule_set_name_Set() const;
    bool is_rule_set_name_Valid() const;

    QString getNotificationTarget() const;
    void setNotificationTarget(const QString &notification_target);
    bool is_notification_target_Set() const;
    bool is_notification_target_Valid() const;

    qint32 getAdditionalPlayerCount() const;
    void setAdditionalPlayerCount(const qint32 &additional_player_count);
    bool is_additional_player_count_Set() const;
    bool is_additional_player_count_Valid() const;

    QString getCustomEventData() const;
    void setCustomEventData(const QString &custom_event_data);
    bool is_custom_event_data_Set() const;
    bool is_custom_event_data_Valid() const;

    QList getGameProperties() const;
    void setGameProperties(const QList &game_properties);
    bool is_game_properties_Set() const;
    bool is_game_properties_Valid() const;

    QString getGameSessionData() const;
    void setGameSessionData(const QString &game_session_data);
    bool is_game_session_data_Set() const;
    bool is_game_session_data_Valid() const;

    OAIBackfillMode getBackfillMode() const;
    void setBackfillMode(const OAIBackfillMode &backfill_mode);
    bool is_backfill_mode_Set() const;
    bool is_backfill_mode_Valid() const;

    OAIFlexMatchMode getFlexMatchMode() const;
    void setFlexMatchMode(const OAIFlexMatchMode &flex_match_mode);
    bool is_flex_match_mode_Set() const;
    bool is_flex_match_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_game_session_queue_arns;
    bool m_game_session_queue_arns_isSet;
    bool m_game_session_queue_arns_isValid;

    qint32 m_request_timeout_seconds;
    bool m_request_timeout_seconds_isSet;
    bool m_request_timeout_seconds_isValid;

    qint32 m_acceptance_timeout_seconds;
    bool m_acceptance_timeout_seconds_isSet;
    bool m_acceptance_timeout_seconds_isValid;

    bool m_acceptance_required;
    bool m_acceptance_required_isSet;
    bool m_acceptance_required_isValid;

    QString m_rule_set_name;
    bool m_rule_set_name_isSet;
    bool m_rule_set_name_isValid;

    QString m_notification_target;
    bool m_notification_target_isSet;
    bool m_notification_target_isValid;

    qint32 m_additional_player_count;
    bool m_additional_player_count_isSet;
    bool m_additional_player_count_isValid;

    QString m_custom_event_data;
    bool m_custom_event_data_isSet;
    bool m_custom_event_data_isValid;

    QList m_game_properties;
    bool m_game_properties_isSet;
    bool m_game_properties_isValid;

    QString m_game_session_data;
    bool m_game_session_data_isSet;
    bool m_game_session_data_isValid;

    OAIBackfillMode m_backfill_mode;
    bool m_backfill_mode_isSet;
    bool m_backfill_mode_isValid;

    OAIFlexMatchMode m_flex_match_mode;
    bool m_flex_match_mode_isSet;
    bool m_flex_match_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateMatchmakingConfigurationInput)

#endif // OAIUpdateMatchmakingConfigurationInput_H
