/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingPolicy::OAIScalingPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingPolicy::OAIScalingPolicy() {
    this->initializeModel();
}

OAIScalingPolicy::~OAIScalingPolicy() {}

void OAIScalingPolicy::initializeModel() {

    m_fleet_id_isSet = false;
    m_fleet_id_isValid = false;

    m_fleet_arn_isSet = false;
    m_fleet_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_scaling_adjustment_isSet = false;
    m_scaling_adjustment_isValid = false;

    m_scaling_adjustment_type_isSet = false;
    m_scaling_adjustment_type_isValid = false;

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_evaluation_periods_isSet = false;
    m_evaluation_periods_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;

    m_target_configuration_isSet = false;
    m_target_configuration_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIScalingPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScalingPolicy::fromJsonObject(QJsonObject json) {

    m_fleet_id_isValid = ::OpenAPI::fromJsonValue(m_fleet_id, json[QString("FleetId")]);
    m_fleet_id_isSet = !json[QString("FleetId")].isNull() && m_fleet_id_isValid;

    m_fleet_arn_isValid = ::OpenAPI::fromJsonValue(m_fleet_arn, json[QString("FleetArn")]);
    m_fleet_arn_isSet = !json[QString("FleetArn")].isNull() && m_fleet_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_scaling_adjustment_isValid = ::OpenAPI::fromJsonValue(m_scaling_adjustment, json[QString("ScalingAdjustment")]);
    m_scaling_adjustment_isSet = !json[QString("ScalingAdjustment")].isNull() && m_scaling_adjustment_isValid;

    m_scaling_adjustment_type_isValid = ::OpenAPI::fromJsonValue(m_scaling_adjustment_type, json[QString("ScalingAdjustmentType")]);
    m_scaling_adjustment_type_isSet = !json[QString("ScalingAdjustmentType")].isNull() && m_scaling_adjustment_type_isValid;

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("ComparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("ComparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;

    m_evaluation_periods_isValid = ::OpenAPI::fromJsonValue(m_evaluation_periods, json[QString("EvaluationPeriods")]);
    m_evaluation_periods_isSet = !json[QString("EvaluationPeriods")].isNull() && m_evaluation_periods_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("PolicyType")]);
    m_policy_type_isSet = !json[QString("PolicyType")].isNull() && m_policy_type_isValid;

    m_target_configuration_isValid = ::OpenAPI::fromJsonValue(m_target_configuration, json[QString("TargetConfiguration")]);
    m_target_configuration_isSet = !json[QString("TargetConfiguration")].isNull() && m_target_configuration_isValid;

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("UpdateStatus")]);
    m_update_status_isSet = !json[QString("UpdateStatus")].isNull() && m_update_status_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;
}

QString OAIScalingPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScalingPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_fleet_id_isSet) {
        obj.insert(QString("FleetId"), ::OpenAPI::toJsonValue(m_fleet_id));
    }
    if (m_fleet_arn_isSet) {
        obj.insert(QString("FleetArn"), ::OpenAPI::toJsonValue(m_fleet_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_scaling_adjustment_isSet) {
        obj.insert(QString("ScalingAdjustment"), ::OpenAPI::toJsonValue(m_scaling_adjustment));
    }
    if (m_scaling_adjustment_type.isSet()) {
        obj.insert(QString("ScalingAdjustmentType"), ::OpenAPI::toJsonValue(m_scaling_adjustment_type));
    }
    if (m_comparison_operator.isSet()) {
        obj.insert(QString("ComparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_evaluation_periods_isSet) {
        obj.insert(QString("EvaluationPeriods"), ::OpenAPI::toJsonValue(m_evaluation_periods));
    }
    if (m_metric_name.isSet()) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_policy_type.isSet()) {
        obj.insert(QString("PolicyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    if (m_target_configuration.isSet()) {
        obj.insert(QString("TargetConfiguration"), ::OpenAPI::toJsonValue(m_target_configuration));
    }
    if (m_update_status.isSet()) {
        obj.insert(QString("UpdateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

QString OAIScalingPolicy::getFleetId() const {
    return m_fleet_id;
}
void OAIScalingPolicy::setFleetId(const QString &fleet_id) {
    m_fleet_id = fleet_id;
    m_fleet_id_isSet = true;
}

bool OAIScalingPolicy::is_fleet_id_Set() const{
    return m_fleet_id_isSet;
}

bool OAIScalingPolicy::is_fleet_id_Valid() const{
    return m_fleet_id_isValid;
}

QString OAIScalingPolicy::getFleetArn() const {
    return m_fleet_arn;
}
void OAIScalingPolicy::setFleetArn(const QString &fleet_arn) {
    m_fleet_arn = fleet_arn;
    m_fleet_arn_isSet = true;
}

bool OAIScalingPolicy::is_fleet_arn_Set() const{
    return m_fleet_arn_isSet;
}

bool OAIScalingPolicy::is_fleet_arn_Valid() const{
    return m_fleet_arn_isValid;
}

QString OAIScalingPolicy::getName() const {
    return m_name;
}
void OAIScalingPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScalingPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScalingPolicy::is_name_Valid() const{
    return m_name_isValid;
}

OAIScalingStatusType OAIScalingPolicy::getStatus() const {
    return m_status;
}
void OAIScalingPolicy::setStatus(const OAIScalingStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScalingPolicy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScalingPolicy::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIScalingPolicy::getScalingAdjustment() const {
    return m_scaling_adjustment;
}
void OAIScalingPolicy::setScalingAdjustment(const qint32 &scaling_adjustment) {
    m_scaling_adjustment = scaling_adjustment;
    m_scaling_adjustment_isSet = true;
}

bool OAIScalingPolicy::is_scaling_adjustment_Set() const{
    return m_scaling_adjustment_isSet;
}

bool OAIScalingPolicy::is_scaling_adjustment_Valid() const{
    return m_scaling_adjustment_isValid;
}

OAIScalingAdjustmentType OAIScalingPolicy::getScalingAdjustmentType() const {
    return m_scaling_adjustment_type;
}
void OAIScalingPolicy::setScalingAdjustmentType(const OAIScalingAdjustmentType &scaling_adjustment_type) {
    m_scaling_adjustment_type = scaling_adjustment_type;
    m_scaling_adjustment_type_isSet = true;
}

bool OAIScalingPolicy::is_scaling_adjustment_type_Set() const{
    return m_scaling_adjustment_type_isSet;
}

bool OAIScalingPolicy::is_scaling_adjustment_type_Valid() const{
    return m_scaling_adjustment_type_isValid;
}

OAIComparisonOperatorType OAIScalingPolicy::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAIScalingPolicy::setComparisonOperator(const OAIComparisonOperatorType &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAIScalingPolicy::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAIScalingPolicy::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

double OAIScalingPolicy::getThreshold() const {
    return m_threshold;
}
void OAIScalingPolicy::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIScalingPolicy::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIScalingPolicy::is_threshold_Valid() const{
    return m_threshold_isValid;
}

qint32 OAIScalingPolicy::getEvaluationPeriods() const {
    return m_evaluation_periods;
}
void OAIScalingPolicy::setEvaluationPeriods(const qint32 &evaluation_periods) {
    m_evaluation_periods = evaluation_periods;
    m_evaluation_periods_isSet = true;
}

bool OAIScalingPolicy::is_evaluation_periods_Set() const{
    return m_evaluation_periods_isSet;
}

bool OAIScalingPolicy::is_evaluation_periods_Valid() const{
    return m_evaluation_periods_isValid;
}

OAIMetricName OAIScalingPolicy::getMetricName() const {
    return m_metric_name;
}
void OAIScalingPolicy::setMetricName(const OAIMetricName &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIScalingPolicy::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIScalingPolicy::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

OAIPolicyType OAIScalingPolicy::getPolicyType() const {
    return m_policy_type;
}
void OAIScalingPolicy::setPolicyType(const OAIPolicyType &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIScalingPolicy::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIScalingPolicy::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

OAIPutScalingPolicyInput_TargetConfiguration OAIScalingPolicy::getTargetConfiguration() const {
    return m_target_configuration;
}
void OAIScalingPolicy::setTargetConfiguration(const OAIPutScalingPolicyInput_TargetConfiguration &target_configuration) {
    m_target_configuration = target_configuration;
    m_target_configuration_isSet = true;
}

bool OAIScalingPolicy::is_target_configuration_Set() const{
    return m_target_configuration_isSet;
}

bool OAIScalingPolicy::is_target_configuration_Valid() const{
    return m_target_configuration_isValid;
}

OAILocationUpdateStatus OAIScalingPolicy::getUpdateStatus() const {
    return m_update_status;
}
void OAIScalingPolicy::setUpdateStatus(const OAILocationUpdateStatus &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIScalingPolicy::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIScalingPolicy::is_update_status_Valid() const{
    return m_update_status_isValid;
}

QString OAIScalingPolicy::getLocation() const {
    return m_location;
}
void OAIScalingPolicy::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIScalingPolicy::is_location_Set() const{
    return m_location_isSet;
}

bool OAIScalingPolicy::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIScalingPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fleet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_adjustment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_adjustment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScalingPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
