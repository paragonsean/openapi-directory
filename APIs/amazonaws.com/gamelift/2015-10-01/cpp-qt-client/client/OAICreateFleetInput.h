/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFleetInput.h
 *
 * 
 */

#ifndef OAICreateFleetInput_H
#define OAICreateFleetInput_H

#include <QJsonObject>

#include "OAIComputeType.h"
#include "OAICreateFleetInput_AnywhereConfiguration.h"
#include "OAICreateFleetInput_CertificateConfiguration.h"
#include "OAICreateFleetInput_ResourceCreationLimitPolicy.h"
#include "OAICreateFleetInput_RuntimeConfiguration.h"
#include "OAIEC2InstanceType.h"
#include "OAIFleetType.h"
#include "OAIProtectionPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateFleetInput_RuntimeConfiguration;
class OAICreateFleetInput_ResourceCreationLimitPolicy;
class OAICreateFleetInput_CertificateConfiguration;
class OAICreateFleetInput_AnywhereConfiguration;

class OAICreateFleetInput : public OAIObject {
public:
    OAICreateFleetInput();
    OAICreateFleetInput(QString json);
    ~OAICreateFleetInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getBuildId() const;
    void setBuildId(const QString &build_id);
    bool is_build_id_Set() const;
    bool is_build_id_Valid() const;

    QString getScriptId() const;
    void setScriptId(const QString &script_id);
    bool is_script_id_Set() const;
    bool is_script_id_Valid() const;

    QString getServerLaunchPath() const;
    void setServerLaunchPath(const QString &server_launch_path);
    bool is_server_launch_path_Set() const;
    bool is_server_launch_path_Valid() const;

    QString getServerLaunchParameters() const;
    void setServerLaunchParameters(const QString &server_launch_parameters);
    bool is_server_launch_parameters_Set() const;
    bool is_server_launch_parameters_Valid() const;

    QList getLogPaths() const;
    void setLogPaths(const QList &log_paths);
    bool is_log_paths_Set() const;
    bool is_log_paths_Valid() const;

    OAIEC2InstanceType getEc2InstanceType() const;
    void setEc2InstanceType(const OAIEC2InstanceType &ec2_instance_type);
    bool is_ec2_instance_type_Set() const;
    bool is_ec2_instance_type_Valid() const;

    QList getEc2InboundPermissions() const;
    void setEc2InboundPermissions(const QList &ec2_inbound_permissions);
    bool is_ec2_inbound_permissions_Set() const;
    bool is_ec2_inbound_permissions_Valid() const;

    OAIProtectionPolicy getNewGameSessionProtectionPolicy() const;
    void setNewGameSessionProtectionPolicy(const OAIProtectionPolicy &new_game_session_protection_policy);
    bool is_new_game_session_protection_policy_Set() const;
    bool is_new_game_session_protection_policy_Valid() const;

    OAICreateFleetInput_RuntimeConfiguration getRuntimeConfiguration() const;
    void setRuntimeConfiguration(const OAICreateFleetInput_RuntimeConfiguration &runtime_configuration);
    bool is_runtime_configuration_Set() const;
    bool is_runtime_configuration_Valid() const;

    OAICreateFleetInput_ResourceCreationLimitPolicy getResourceCreationLimitPolicy() const;
    void setResourceCreationLimitPolicy(const OAICreateFleetInput_ResourceCreationLimitPolicy &resource_creation_limit_policy);
    bool is_resource_creation_limit_policy_Set() const;
    bool is_resource_creation_limit_policy_Valid() const;

    QList getMetricGroups() const;
    void setMetricGroups(const QList &metric_groups);
    bool is_metric_groups_Set() const;
    bool is_metric_groups_Valid() const;

    QString getPeerVpcAwsAccountId() const;
    void setPeerVpcAwsAccountId(const QString &peer_vpc_aws_account_id);
    bool is_peer_vpc_aws_account_id_Set() const;
    bool is_peer_vpc_aws_account_id_Valid() const;

    QString getPeerVpcId() const;
    void setPeerVpcId(const QString &peer_vpc_id);
    bool is_peer_vpc_id_Set() const;
    bool is_peer_vpc_id_Valid() const;

    OAIFleetType getFleetType() const;
    void setFleetType(const OAIFleetType &fleet_type);
    bool is_fleet_type_Set() const;
    bool is_fleet_type_Valid() const;

    QString getInstanceRoleArn() const;
    void setInstanceRoleArn(const QString &instance_role_arn);
    bool is_instance_role_arn_Set() const;
    bool is_instance_role_arn_Valid() const;

    OAICreateFleetInput_CertificateConfiguration getCertificateConfiguration() const;
    void setCertificateConfiguration(const OAICreateFleetInput_CertificateConfiguration &certificate_configuration);
    bool is_certificate_configuration_Set() const;
    bool is_certificate_configuration_Valid() const;

    QList getLocations() const;
    void setLocations(const QList &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIComputeType getComputeType() const;
    void setComputeType(const OAIComputeType &compute_type);
    bool is_compute_type_Set() const;
    bool is_compute_type_Valid() const;

    OAICreateFleetInput_AnywhereConfiguration getAnywhereConfiguration() const;
    void setAnywhereConfiguration(const OAICreateFleetInput_AnywhereConfiguration &anywhere_configuration);
    bool is_anywhere_configuration_Set() const;
    bool is_anywhere_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_build_id;
    bool m_build_id_isSet;
    bool m_build_id_isValid;

    QString m_script_id;
    bool m_script_id_isSet;
    bool m_script_id_isValid;

    QString m_server_launch_path;
    bool m_server_launch_path_isSet;
    bool m_server_launch_path_isValid;

    QString m_server_launch_parameters;
    bool m_server_launch_parameters_isSet;
    bool m_server_launch_parameters_isValid;

    QList m_log_paths;
    bool m_log_paths_isSet;
    bool m_log_paths_isValid;

    OAIEC2InstanceType m_ec2_instance_type;
    bool m_ec2_instance_type_isSet;
    bool m_ec2_instance_type_isValid;

    QList m_ec2_inbound_permissions;
    bool m_ec2_inbound_permissions_isSet;
    bool m_ec2_inbound_permissions_isValid;

    OAIProtectionPolicy m_new_game_session_protection_policy;
    bool m_new_game_session_protection_policy_isSet;
    bool m_new_game_session_protection_policy_isValid;

    OAICreateFleetInput_RuntimeConfiguration m_runtime_configuration;
    bool m_runtime_configuration_isSet;
    bool m_runtime_configuration_isValid;

    OAICreateFleetInput_ResourceCreationLimitPolicy m_resource_creation_limit_policy;
    bool m_resource_creation_limit_policy_isSet;
    bool m_resource_creation_limit_policy_isValid;

    QList m_metric_groups;
    bool m_metric_groups_isSet;
    bool m_metric_groups_isValid;

    QString m_peer_vpc_aws_account_id;
    bool m_peer_vpc_aws_account_id_isSet;
    bool m_peer_vpc_aws_account_id_isValid;

    QString m_peer_vpc_id;
    bool m_peer_vpc_id_isSet;
    bool m_peer_vpc_id_isValid;

    OAIFleetType m_fleet_type;
    bool m_fleet_type_isSet;
    bool m_fleet_type_isValid;

    QString m_instance_role_arn;
    bool m_instance_role_arn_isSet;
    bool m_instance_role_arn_isValid;

    OAICreateFleetInput_CertificateConfiguration m_certificate_configuration;
    bool m_certificate_configuration_isSet;
    bool m_certificate_configuration_isValid;

    QList m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIComputeType m_compute_type;
    bool m_compute_type_isSet;
    bool m_compute_type_isValid;

    OAICreateFleetInput_AnywhereConfiguration m_anywhere_configuration;
    bool m_anywhere_configuration_isSet;
    bool m_anywhere_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFleetInput)

#endif // OAICreateFleetInput_H
