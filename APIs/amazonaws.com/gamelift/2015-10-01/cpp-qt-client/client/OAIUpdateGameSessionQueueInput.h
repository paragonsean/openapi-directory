/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateGameSessionQueueInput.h
 *
 * 
 */

#ifndef OAIUpdateGameSessionQueueInput_H
#define OAIUpdateGameSessionQueueInput_H

#include <QJsonObject>

#include "OAIUpdateGameSessionQueueInput_FilterConfiguration.h"
#include "OAIUpdateGameSessionQueueInput_PriorityConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateGameSessionQueueInput_FilterConfiguration;
class OAIUpdateGameSessionQueueInput_PriorityConfiguration;

class OAIUpdateGameSessionQueueInput : public OAIObject {
public:
    OAIUpdateGameSessionQueueInput();
    OAIUpdateGameSessionQueueInput(QString json);
    ~OAIUpdateGameSessionQueueInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getTimeoutInSeconds() const;
    void setTimeoutInSeconds(const qint32 &timeout_in_seconds);
    bool is_timeout_in_seconds_Set() const;
    bool is_timeout_in_seconds_Valid() const;

    QList getPlayerLatencyPolicies() const;
    void setPlayerLatencyPolicies(const QList &player_latency_policies);
    bool is_player_latency_policies_Set() const;
    bool is_player_latency_policies_Valid() const;

    QList getDestinations() const;
    void setDestinations(const QList &destinations);
    bool is_destinations_Set() const;
    bool is_destinations_Valid() const;

    OAIUpdateGameSessionQueueInput_FilterConfiguration getFilterConfiguration() const;
    void setFilterConfiguration(const OAIUpdateGameSessionQueueInput_FilterConfiguration &filter_configuration);
    bool is_filter_configuration_Set() const;
    bool is_filter_configuration_Valid() const;

    OAIUpdateGameSessionQueueInput_PriorityConfiguration getPriorityConfiguration() const;
    void setPriorityConfiguration(const OAIUpdateGameSessionQueueInput_PriorityConfiguration &priority_configuration);
    bool is_priority_configuration_Set() const;
    bool is_priority_configuration_Valid() const;

    QString getCustomEventData() const;
    void setCustomEventData(const QString &custom_event_data);
    bool is_custom_event_data_Set() const;
    bool is_custom_event_data_Valid() const;

    QString getNotificationTarget() const;
    void setNotificationTarget(const QString &notification_target);
    bool is_notification_target_Set() const;
    bool is_notification_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_timeout_in_seconds;
    bool m_timeout_in_seconds_isSet;
    bool m_timeout_in_seconds_isValid;

    QList m_player_latency_policies;
    bool m_player_latency_policies_isSet;
    bool m_player_latency_policies_isValid;

    QList m_destinations;
    bool m_destinations_isSet;
    bool m_destinations_isValid;

    OAIUpdateGameSessionQueueInput_FilterConfiguration m_filter_configuration;
    bool m_filter_configuration_isSet;
    bool m_filter_configuration_isValid;

    OAIUpdateGameSessionQueueInput_PriorityConfiguration m_priority_configuration;
    bool m_priority_configuration_isSet;
    bool m_priority_configuration_isValid;

    QString m_custom_event_data;
    bool m_custom_event_data_isSet;
    bool m_custom_event_data_isValid;

    QString m_notification_target;
    bool m_notification_target_isSet;
    bool m_notification_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateGameSessionQueueInput)

#endif // OAIUpdateGameSessionQueueInput_H
