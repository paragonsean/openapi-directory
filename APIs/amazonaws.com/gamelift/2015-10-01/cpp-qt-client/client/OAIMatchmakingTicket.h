/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatchmakingTicket.h
 *
 * Ticket generated to track the progress of a matchmaking request. Each ticket is uniquely identified by a ticket ID, supplied by the requester, when creating a matchmaking request.
 */

#ifndef OAIMatchmakingTicket_H
#define OAIMatchmakingTicket_H

#include <QJsonObject>

#include "OAIMatchmakingConfigurationStatus.h"
#include "OAIMatchmakingTicket_GameSessionConnectionInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMatchmakingTicket_GameSessionConnectionInfo;

class OAIMatchmakingTicket : public OAIObject {
public:
    OAIMatchmakingTicket();
    OAIMatchmakingTicket(QString json);
    ~OAIMatchmakingTicket() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTicketId() const;
    void setTicketId(const QString &ticket_id);
    bool is_ticket_id_Set() const;
    bool is_ticket_id_Valid() const;

    QString getConfigurationName() const;
    void setConfigurationName(const QString &configuration_name);
    bool is_configuration_name_Set() const;
    bool is_configuration_name_Valid() const;

    QString getConfigurationArn() const;
    void setConfigurationArn(const QString &configuration_arn);
    bool is_configuration_arn_Set() const;
    bool is_configuration_arn_Valid() const;

    OAIMatchmakingConfigurationStatus getStatus() const;
    void setStatus(const OAIMatchmakingConfigurationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QList getPlayers() const;
    void setPlayers(const QList &players);
    bool is_players_Set() const;
    bool is_players_Valid() const;

    OAIMatchmakingTicket_GameSessionConnectionInfo getGameSessionConnectionInfo() const;
    void setGameSessionConnectionInfo(const OAIMatchmakingTicket_GameSessionConnectionInfo &game_session_connection_info);
    bool is_game_session_connection_info_Set() const;
    bool is_game_session_connection_info_Valid() const;

    qint32 getEstimatedWaitTime() const;
    void setEstimatedWaitTime(const qint32 &estimated_wait_time);
    bool is_estimated_wait_time_Set() const;
    bool is_estimated_wait_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ticket_id;
    bool m_ticket_id_isSet;
    bool m_ticket_id_isValid;

    QString m_configuration_name;
    bool m_configuration_name_isSet;
    bool m_configuration_name_isValid;

    QString m_configuration_arn;
    bool m_configuration_arn_isSet;
    bool m_configuration_arn_isValid;

    OAIMatchmakingConfigurationStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QList m_players;
    bool m_players_isSet;
    bool m_players_isValid;

    OAIMatchmakingTicket_GameSessionConnectionInfo m_game_session_connection_info;
    bool m_game_session_connection_info_isSet;
    bool m_game_session_connection_info_isValid;

    qint32 m_estimated_wait_time;
    bool m_estimated_wait_time_isSet;
    bool m_estimated_wait_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatchmakingTicket)

#endif // OAIMatchmakingTicket_H
