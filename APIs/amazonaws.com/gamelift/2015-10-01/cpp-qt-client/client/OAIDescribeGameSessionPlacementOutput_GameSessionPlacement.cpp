/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeGameSessionPlacementOutput_GameSessionPlacement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::OAIDescribeGameSessionPlacementOutput_GameSessionPlacement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::OAIDescribeGameSessionPlacementOutput_GameSessionPlacement() {
    this->initializeModel();
}

OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::~OAIDescribeGameSessionPlacementOutput_GameSessionPlacement() {}

void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::initializeModel() {

    m_placement_id_isSet = false;
    m_placement_id_isValid = false;

    m_game_session_queue_name_isSet = false;
    m_game_session_queue_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_game_properties_isSet = false;
    m_game_properties_isValid = false;

    m_maximum_player_session_count_isSet = false;
    m_maximum_player_session_count_isValid = false;

    m_game_session_name_isSet = false;
    m_game_session_name_isValid = false;

    m_game_session_id_isSet = false;
    m_game_session_id_isValid = false;

    m_game_session_arn_isSet = false;
    m_game_session_arn_isValid = false;

    m_game_session_region_isSet = false;
    m_game_session_region_isValid = false;

    m_player_latencies_isSet = false;
    m_player_latencies_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_placed_player_sessions_isSet = false;
    m_placed_player_sessions_isValid = false;

    m_game_session_data_isSet = false;
    m_game_session_data_isValid = false;

    m_matchmaker_data_isSet = false;
    m_matchmaker_data_isValid = false;
}

void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::fromJsonObject(QJsonObject json) {

    m_placement_id_isValid = ::OpenAPI::fromJsonValue(m_placement_id, json[QString("PlacementId")]);
    m_placement_id_isSet = !json[QString("PlacementId")].isNull() && m_placement_id_isValid;

    m_game_session_queue_name_isValid = ::OpenAPI::fromJsonValue(m_game_session_queue_name, json[QString("GameSessionQueueName")]);
    m_game_session_queue_name_isSet = !json[QString("GameSessionQueueName")].isNull() && m_game_session_queue_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_game_properties_isValid = ::OpenAPI::fromJsonValue(m_game_properties, json[QString("GameProperties")]);
    m_game_properties_isSet = !json[QString("GameProperties")].isNull() && m_game_properties_isValid;

    m_maximum_player_session_count_isValid = ::OpenAPI::fromJsonValue(m_maximum_player_session_count, json[QString("MaximumPlayerSessionCount")]);
    m_maximum_player_session_count_isSet = !json[QString("MaximumPlayerSessionCount")].isNull() && m_maximum_player_session_count_isValid;

    m_game_session_name_isValid = ::OpenAPI::fromJsonValue(m_game_session_name, json[QString("GameSessionName")]);
    m_game_session_name_isSet = !json[QString("GameSessionName")].isNull() && m_game_session_name_isValid;

    m_game_session_id_isValid = ::OpenAPI::fromJsonValue(m_game_session_id, json[QString("GameSessionId")]);
    m_game_session_id_isSet = !json[QString("GameSessionId")].isNull() && m_game_session_id_isValid;

    m_game_session_arn_isValid = ::OpenAPI::fromJsonValue(m_game_session_arn, json[QString("GameSessionArn")]);
    m_game_session_arn_isSet = !json[QString("GameSessionArn")].isNull() && m_game_session_arn_isValid;

    m_game_session_region_isValid = ::OpenAPI::fromJsonValue(m_game_session_region, json[QString("GameSessionRegion")]);
    m_game_session_region_isSet = !json[QString("GameSessionRegion")].isNull() && m_game_session_region_isValid;

    m_player_latencies_isValid = ::OpenAPI::fromJsonValue(m_player_latencies, json[QString("PlayerLatencies")]);
    m_player_latencies_isSet = !json[QString("PlayerLatencies")].isNull() && m_player_latencies_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DnsName")]);
    m_dns_name_isSet = !json[QString("DnsName")].isNull() && m_dns_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_placed_player_sessions_isValid = ::OpenAPI::fromJsonValue(m_placed_player_sessions, json[QString("PlacedPlayerSessions")]);
    m_placed_player_sessions_isSet = !json[QString("PlacedPlayerSessions")].isNull() && m_placed_player_sessions_isValid;

    m_game_session_data_isValid = ::OpenAPI::fromJsonValue(m_game_session_data, json[QString("GameSessionData")]);
    m_game_session_data_isSet = !json[QString("GameSessionData")].isNull() && m_game_session_data_isValid;

    m_matchmaker_data_isValid = ::OpenAPI::fromJsonValue(m_matchmaker_data, json[QString("MatchmakerData")]);
    m_matchmaker_data_isSet = !json[QString("MatchmakerData")].isNull() && m_matchmaker_data_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::asJsonObject() const {
    QJsonObject obj;
    if (m_placement_id_isSet) {
        obj.insert(QString("PlacementId"), ::OpenAPI::toJsonValue(m_placement_id));
    }
    if (m_game_session_queue_name_isSet) {
        obj.insert(QString("GameSessionQueueName"), ::OpenAPI::toJsonValue(m_game_session_queue_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_game_properties.isSet()) {
        obj.insert(QString("GameProperties"), ::OpenAPI::toJsonValue(m_game_properties));
    }
    if (m_maximum_player_session_count_isSet) {
        obj.insert(QString("MaximumPlayerSessionCount"), ::OpenAPI::toJsonValue(m_maximum_player_session_count));
    }
    if (m_game_session_name_isSet) {
        obj.insert(QString("GameSessionName"), ::OpenAPI::toJsonValue(m_game_session_name));
    }
    if (m_game_session_id_isSet) {
        obj.insert(QString("GameSessionId"), ::OpenAPI::toJsonValue(m_game_session_id));
    }
    if (m_game_session_arn_isSet) {
        obj.insert(QString("GameSessionArn"), ::OpenAPI::toJsonValue(m_game_session_arn));
    }
    if (m_game_session_region_isSet) {
        obj.insert(QString("GameSessionRegion"), ::OpenAPI::toJsonValue(m_game_session_region));
    }
    if (m_player_latencies.isSet()) {
        obj.insert(QString("PlayerLatencies"), ::OpenAPI::toJsonValue(m_player_latencies));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_placed_player_sessions.isSet()) {
        obj.insert(QString("PlacedPlayerSessions"), ::OpenAPI::toJsonValue(m_placed_player_sessions));
    }
    if (m_game_session_data_isSet) {
        obj.insert(QString("GameSessionData"), ::OpenAPI::toJsonValue(m_game_session_data));
    }
    if (m_matchmaker_data_isSet) {
        obj.insert(QString("MatchmakerData"), ::OpenAPI::toJsonValue(m_matchmaker_data));
    }
    return obj;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getPlacementId() const {
    return m_placement_id;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setPlacementId(const QString &placement_id) {
    m_placement_id = placement_id;
    m_placement_id_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_placement_id_Set() const{
    return m_placement_id_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_placement_id_Valid() const{
    return m_placement_id_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameSessionQueueName() const {
    return m_game_session_queue_name;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameSessionQueueName(const QString &game_session_queue_name) {
    m_game_session_queue_name = game_session_queue_name;
    m_game_session_queue_name_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_queue_name_Set() const{
    return m_game_session_queue_name_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_queue_name_Valid() const{
    return m_game_session_queue_name_isValid;
}

OAIGameSessionPlacementState OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getStatus() const {
    return m_status;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setStatus(const OAIGameSessionPlacementState &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameProperties() const {
    return m_game_properties;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameProperties(const QList &game_properties) {
    m_game_properties = game_properties;
    m_game_properties_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_properties_Set() const{
    return m_game_properties_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_properties_Valid() const{
    return m_game_properties_isValid;
}

qint32 OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getMaximumPlayerSessionCount() const {
    return m_maximum_player_session_count;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setMaximumPlayerSessionCount(const qint32 &maximum_player_session_count) {
    m_maximum_player_session_count = maximum_player_session_count;
    m_maximum_player_session_count_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_maximum_player_session_count_Set() const{
    return m_maximum_player_session_count_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_maximum_player_session_count_Valid() const{
    return m_maximum_player_session_count_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameSessionName() const {
    return m_game_session_name;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameSessionName(const QString &game_session_name) {
    m_game_session_name = game_session_name;
    m_game_session_name_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_name_Set() const{
    return m_game_session_name_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_name_Valid() const{
    return m_game_session_name_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameSessionId() const {
    return m_game_session_id;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameSessionId(const QString &game_session_id) {
    m_game_session_id = game_session_id;
    m_game_session_id_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_id_Set() const{
    return m_game_session_id_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_id_Valid() const{
    return m_game_session_id_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameSessionArn() const {
    return m_game_session_arn;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameSessionArn(const QString &game_session_arn) {
    m_game_session_arn = game_session_arn;
    m_game_session_arn_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_arn_Set() const{
    return m_game_session_arn_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_arn_Valid() const{
    return m_game_session_arn_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameSessionRegion() const {
    return m_game_session_region;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameSessionRegion(const QString &game_session_region) {
    m_game_session_region = game_session_region;
    m_game_session_region_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_region_Set() const{
    return m_game_session_region_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_region_Valid() const{
    return m_game_session_region_isValid;
}

QList OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getPlayerLatencies() const {
    return m_player_latencies;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setPlayerLatencies(const QList &player_latencies) {
    m_player_latencies = player_latencies;
    m_player_latencies_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_player_latencies_Set() const{
    return m_player_latencies_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_player_latencies_Valid() const{
    return m_player_latencies_isValid;
}

QDateTime OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getStartTime() const {
    return m_start_time;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getEndTime() const {
    return m_end_time;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getIpAddress() const {
    return m_ip_address;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getDnsName() const {
    return m_dns_name;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

qint32 OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getPort() const {
    return m_port;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_port_Valid() const{
    return m_port_isValid;
}

QList OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getPlacedPlayerSessions() const {
    return m_placed_player_sessions;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setPlacedPlayerSessions(const QList &placed_player_sessions) {
    m_placed_player_sessions = placed_player_sessions;
    m_placed_player_sessions_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_placed_player_sessions_Set() const{
    return m_placed_player_sessions_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_placed_player_sessions_Valid() const{
    return m_placed_player_sessions_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getGameSessionData() const {
    return m_game_session_data;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setGameSessionData(const QString &game_session_data) {
    m_game_session_data = game_session_data;
    m_game_session_data_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_data_Set() const{
    return m_game_session_data_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_game_session_data_Valid() const{
    return m_game_session_data_isValid;
}

QString OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::getMatchmakerData() const {
    return m_matchmaker_data;
}
void OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::setMatchmakerData(const QString &matchmaker_data) {
    m_matchmaker_data = matchmaker_data;
    m_matchmaker_data_isSet = true;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_matchmaker_data_Set() const{
    return m_matchmaker_data_isSet;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::is_matchmaker_data_Valid() const{
    return m_matchmaker_data_isValid;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_placement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_player_session_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_latencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placed_player_sessions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_session_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matchmaker_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeGameSessionPlacementOutput_GameSessionPlacement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
