/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutScalingPolicyInput.h
 *
 * 
 */

#ifndef OAIPutScalingPolicyInput_H
#define OAIPutScalingPolicyInput_H

#include <QJsonObject>

#include "OAIComparisonOperatorType.h"
#include "OAIMetricName.h"
#include "OAIPolicyType.h"
#include "OAIPutScalingPolicyInput_TargetConfiguration.h"
#include "OAIScalingAdjustmentType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutScalingPolicyInput_TargetConfiguration;

class OAIPutScalingPolicyInput : public OAIObject {
public:
    OAIPutScalingPolicyInput();
    OAIPutScalingPolicyInput(QString json);
    ~OAIPutScalingPolicyInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getFleetId() const;
    void setFleetId(const QString &fleet_id);
    bool is_fleet_id_Set() const;
    bool is_fleet_id_Valid() const;

    qint32 getScalingAdjustment() const;
    void setScalingAdjustment(const qint32 &scaling_adjustment);
    bool is_scaling_adjustment_Set() const;
    bool is_scaling_adjustment_Valid() const;

    OAIScalingAdjustmentType getScalingAdjustmentType() const;
    void setScalingAdjustmentType(const OAIScalingAdjustmentType &scaling_adjustment_type);
    bool is_scaling_adjustment_type_Set() const;
    bool is_scaling_adjustment_type_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    OAIComparisonOperatorType getComparisonOperator() const;
    void setComparisonOperator(const OAIComparisonOperatorType &comparison_operator);
    bool is_comparison_operator_Set() const;
    bool is_comparison_operator_Valid() const;

    qint32 getEvaluationPeriods() const;
    void setEvaluationPeriods(const qint32 &evaluation_periods);
    bool is_evaluation_periods_Set() const;
    bool is_evaluation_periods_Valid() const;

    OAIMetricName getMetricName() const;
    void setMetricName(const OAIMetricName &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    OAIPolicyType getPolicyType() const;
    void setPolicyType(const OAIPolicyType &policy_type);
    bool is_policy_type_Set() const;
    bool is_policy_type_Valid() const;

    OAIPutScalingPolicyInput_TargetConfiguration getTargetConfiguration() const;
    void setTargetConfiguration(const OAIPutScalingPolicyInput_TargetConfiguration &target_configuration);
    bool is_target_configuration_Set() const;
    bool is_target_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_fleet_id;
    bool m_fleet_id_isSet;
    bool m_fleet_id_isValid;

    qint32 m_scaling_adjustment;
    bool m_scaling_adjustment_isSet;
    bool m_scaling_adjustment_isValid;

    OAIScalingAdjustmentType m_scaling_adjustment_type;
    bool m_scaling_adjustment_type_isSet;
    bool m_scaling_adjustment_type_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;

    OAIComparisonOperatorType m_comparison_operator;
    bool m_comparison_operator_isSet;
    bool m_comparison_operator_isValid;

    qint32 m_evaluation_periods;
    bool m_evaluation_periods_isSet;
    bool m_evaluation_periods_isValid;

    OAIMetricName m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    OAIPolicyType m_policy_type;
    bool m_policy_type_isSet;
    bool m_policy_type_isValid;

    OAIPutScalingPolicyInput_TargetConfiguration m_target_configuration;
    bool m_target_configuration_isSet;
    bool m_target_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutScalingPolicyInput)

#endif // OAIPutScalingPolicyInput_H
