/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFleetOutput_FleetAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFleetOutput_FleetAttributes::OAICreateFleetOutput_FleetAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFleetOutput_FleetAttributes::OAICreateFleetOutput_FleetAttributes() {
    this->initializeModel();
}

OAICreateFleetOutput_FleetAttributes::~OAICreateFleetOutput_FleetAttributes() {}

void OAICreateFleetOutput_FleetAttributes::initializeModel() {

    m_fleet_id_isSet = false;
    m_fleet_id_isValid = false;

    m_fleet_arn_isSet = false;
    m_fleet_arn_isValid = false;

    m_fleet_type_isSet = false;
    m_fleet_type_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_termination_time_isSet = false;
    m_termination_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_build_arn_isSet = false;
    m_build_arn_isValid = false;

    m_script_id_isSet = false;
    m_script_id_isValid = false;

    m_script_arn_isSet = false;
    m_script_arn_isValid = false;

    m_server_launch_path_isSet = false;
    m_server_launch_path_isValid = false;

    m_server_launch_parameters_isSet = false;
    m_server_launch_parameters_isValid = false;

    m_log_paths_isSet = false;
    m_log_paths_isValid = false;

    m_new_game_session_protection_policy_isSet = false;
    m_new_game_session_protection_policy_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_resource_creation_limit_policy_isSet = false;
    m_resource_creation_limit_policy_isValid = false;

    m_metric_groups_isSet = false;
    m_metric_groups_isValid = false;

    m_stopped_actions_isSet = false;
    m_stopped_actions_isValid = false;

    m_instance_role_arn_isSet = false;
    m_instance_role_arn_isValid = false;

    m_certificate_configuration_isSet = false;
    m_certificate_configuration_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_anywhere_configuration_isSet = false;
    m_anywhere_configuration_isValid = false;
}

void OAICreateFleetOutput_FleetAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFleetOutput_FleetAttributes::fromJsonObject(QJsonObject json) {

    m_fleet_id_isValid = ::OpenAPI::fromJsonValue(m_fleet_id, json[QString("FleetId")]);
    m_fleet_id_isSet = !json[QString("FleetId")].isNull() && m_fleet_id_isValid;

    m_fleet_arn_isValid = ::OpenAPI::fromJsonValue(m_fleet_arn, json[QString("FleetArn")]);
    m_fleet_arn_isSet = !json[QString("FleetArn")].isNull() && m_fleet_arn_isValid;

    m_fleet_type_isValid = ::OpenAPI::fromJsonValue(m_fleet_type, json[QString("FleetType")]);
    m_fleet_type_isSet = !json[QString("FleetType")].isNull() && m_fleet_type_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_termination_time_isValid = ::OpenAPI::fromJsonValue(m_termination_time, json[QString("TerminationTime")]);
    m_termination_time_isSet = !json[QString("TerminationTime")].isNull() && m_termination_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("BuildId")]);
    m_build_id_isSet = !json[QString("BuildId")].isNull() && m_build_id_isValid;

    m_build_arn_isValid = ::OpenAPI::fromJsonValue(m_build_arn, json[QString("BuildArn")]);
    m_build_arn_isSet = !json[QString("BuildArn")].isNull() && m_build_arn_isValid;

    m_script_id_isValid = ::OpenAPI::fromJsonValue(m_script_id, json[QString("ScriptId")]);
    m_script_id_isSet = !json[QString("ScriptId")].isNull() && m_script_id_isValid;

    m_script_arn_isValid = ::OpenAPI::fromJsonValue(m_script_arn, json[QString("ScriptArn")]);
    m_script_arn_isSet = !json[QString("ScriptArn")].isNull() && m_script_arn_isValid;

    m_server_launch_path_isValid = ::OpenAPI::fromJsonValue(m_server_launch_path, json[QString("ServerLaunchPath")]);
    m_server_launch_path_isSet = !json[QString("ServerLaunchPath")].isNull() && m_server_launch_path_isValid;

    m_server_launch_parameters_isValid = ::OpenAPI::fromJsonValue(m_server_launch_parameters, json[QString("ServerLaunchParameters")]);
    m_server_launch_parameters_isSet = !json[QString("ServerLaunchParameters")].isNull() && m_server_launch_parameters_isValid;

    m_log_paths_isValid = ::OpenAPI::fromJsonValue(m_log_paths, json[QString("LogPaths")]);
    m_log_paths_isSet = !json[QString("LogPaths")].isNull() && m_log_paths_isValid;

    m_new_game_session_protection_policy_isValid = ::OpenAPI::fromJsonValue(m_new_game_session_protection_policy, json[QString("NewGameSessionProtectionPolicy")]);
    m_new_game_session_protection_policy_isSet = !json[QString("NewGameSessionProtectionPolicy")].isNull() && m_new_game_session_protection_policy_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("OperatingSystem")]);
    m_operating_system_isSet = !json[QString("OperatingSystem")].isNull() && m_operating_system_isValid;

    m_resource_creation_limit_policy_isValid = ::OpenAPI::fromJsonValue(m_resource_creation_limit_policy, json[QString("ResourceCreationLimitPolicy")]);
    m_resource_creation_limit_policy_isSet = !json[QString("ResourceCreationLimitPolicy")].isNull() && m_resource_creation_limit_policy_isValid;

    m_metric_groups_isValid = ::OpenAPI::fromJsonValue(m_metric_groups, json[QString("MetricGroups")]);
    m_metric_groups_isSet = !json[QString("MetricGroups")].isNull() && m_metric_groups_isValid;

    m_stopped_actions_isValid = ::OpenAPI::fromJsonValue(m_stopped_actions, json[QString("StoppedActions")]);
    m_stopped_actions_isSet = !json[QString("StoppedActions")].isNull() && m_stopped_actions_isValid;

    m_instance_role_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_role_arn, json[QString("InstanceRoleArn")]);
    m_instance_role_arn_isSet = !json[QString("InstanceRoleArn")].isNull() && m_instance_role_arn_isValid;

    m_certificate_configuration_isValid = ::OpenAPI::fromJsonValue(m_certificate_configuration, json[QString("CertificateConfiguration")]);
    m_certificate_configuration_isSet = !json[QString("CertificateConfiguration")].isNull() && m_certificate_configuration_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("ComputeType")]);
    m_compute_type_isSet = !json[QString("ComputeType")].isNull() && m_compute_type_isValid;

    m_anywhere_configuration_isValid = ::OpenAPI::fromJsonValue(m_anywhere_configuration, json[QString("AnywhereConfiguration")]);
    m_anywhere_configuration_isSet = !json[QString("AnywhereConfiguration")].isNull() && m_anywhere_configuration_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFleetOutput_FleetAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_fleet_id_isSet) {
        obj.insert(QString("FleetId"), ::OpenAPI::toJsonValue(m_fleet_id));
    }
    if (m_fleet_arn_isSet) {
        obj.insert(QString("FleetArn"), ::OpenAPI::toJsonValue(m_fleet_arn));
    }
    if (m_fleet_type.isSet()) {
        obj.insert(QString("FleetType"), ::OpenAPI::toJsonValue(m_fleet_type));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_termination_time_isSet) {
        obj.insert(QString("TerminationTime"), ::OpenAPI::toJsonValue(m_termination_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("BuildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_build_arn_isSet) {
        obj.insert(QString("BuildArn"), ::OpenAPI::toJsonValue(m_build_arn));
    }
    if (m_script_id_isSet) {
        obj.insert(QString("ScriptId"), ::OpenAPI::toJsonValue(m_script_id));
    }
    if (m_script_arn_isSet) {
        obj.insert(QString("ScriptArn"), ::OpenAPI::toJsonValue(m_script_arn));
    }
    if (m_server_launch_path_isSet) {
        obj.insert(QString("ServerLaunchPath"), ::OpenAPI::toJsonValue(m_server_launch_path));
    }
    if (m_server_launch_parameters_isSet) {
        obj.insert(QString("ServerLaunchParameters"), ::OpenAPI::toJsonValue(m_server_launch_parameters));
    }
    if (m_log_paths.isSet()) {
        obj.insert(QString("LogPaths"), ::OpenAPI::toJsonValue(m_log_paths));
    }
    if (m_new_game_session_protection_policy.isSet()) {
        obj.insert(QString("NewGameSessionProtectionPolicy"), ::OpenAPI::toJsonValue(m_new_game_session_protection_policy));
    }
    if (m_operating_system.isSet()) {
        obj.insert(QString("OperatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_resource_creation_limit_policy.isSet()) {
        obj.insert(QString("ResourceCreationLimitPolicy"), ::OpenAPI::toJsonValue(m_resource_creation_limit_policy));
    }
    if (m_metric_groups.isSet()) {
        obj.insert(QString("MetricGroups"), ::OpenAPI::toJsonValue(m_metric_groups));
    }
    if (m_stopped_actions.isSet()) {
        obj.insert(QString("StoppedActions"), ::OpenAPI::toJsonValue(m_stopped_actions));
    }
    if (m_instance_role_arn_isSet) {
        obj.insert(QString("InstanceRoleArn"), ::OpenAPI::toJsonValue(m_instance_role_arn));
    }
    if (m_certificate_configuration.isSet()) {
        obj.insert(QString("CertificateConfiguration"), ::OpenAPI::toJsonValue(m_certificate_configuration));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("ComputeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_anywhere_configuration.isSet()) {
        obj.insert(QString("AnywhereConfiguration"), ::OpenAPI::toJsonValue(m_anywhere_configuration));
    }
    return obj;
}

QString OAICreateFleetOutput_FleetAttributes::getFleetId() const {
    return m_fleet_id;
}
void OAICreateFleetOutput_FleetAttributes::setFleetId(const QString &fleet_id) {
    m_fleet_id = fleet_id;
    m_fleet_id_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_fleet_id_Set() const{
    return m_fleet_id_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_fleet_id_Valid() const{
    return m_fleet_id_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getFleetArn() const {
    return m_fleet_arn;
}
void OAICreateFleetOutput_FleetAttributes::setFleetArn(const QString &fleet_arn) {
    m_fleet_arn = fleet_arn;
    m_fleet_arn_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_fleet_arn_Set() const{
    return m_fleet_arn_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_fleet_arn_Valid() const{
    return m_fleet_arn_isValid;
}

OAIFleetType OAICreateFleetOutput_FleetAttributes::getFleetType() const {
    return m_fleet_type;
}
void OAICreateFleetOutput_FleetAttributes::setFleetType(const OAIFleetType &fleet_type) {
    m_fleet_type = fleet_type;
    m_fleet_type_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_fleet_type_Set() const{
    return m_fleet_type_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_fleet_type_Valid() const{
    return m_fleet_type_isValid;
}

OAIEC2InstanceType OAICreateFleetOutput_FleetAttributes::getInstanceType() const {
    return m_instance_type;
}
void OAICreateFleetOutput_FleetAttributes::setInstanceType(const OAIEC2InstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getDescription() const {
    return m_description;
}
void OAICreateFleetOutput_FleetAttributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getName() const {
    return m_name;
}
void OAICreateFleetOutput_FleetAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAICreateFleetOutput_FleetAttributes::getCreationTime() const {
    return m_creation_time;
}
void OAICreateFleetOutput_FleetAttributes::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICreateFleetOutput_FleetAttributes::getTerminationTime() const {
    return m_termination_time;
}
void OAICreateFleetOutput_FleetAttributes::setTerminationTime(const QDateTime &termination_time) {
    m_termination_time = termination_time;
    m_termination_time_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_termination_time_Set() const{
    return m_termination_time_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_termination_time_Valid() const{
    return m_termination_time_isValid;
}

OAIFleetStatus OAICreateFleetOutput_FleetAttributes::getStatus() const {
    return m_status;
}
void OAICreateFleetOutput_FleetAttributes::setStatus(const OAIFleetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getBuildId() const {
    return m_build_id;
}
void OAICreateFleetOutput_FleetAttributes::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getBuildArn() const {
    return m_build_arn;
}
void OAICreateFleetOutput_FleetAttributes::setBuildArn(const QString &build_arn) {
    m_build_arn = build_arn;
    m_build_arn_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_build_arn_Set() const{
    return m_build_arn_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_build_arn_Valid() const{
    return m_build_arn_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getScriptId() const {
    return m_script_id;
}
void OAICreateFleetOutput_FleetAttributes::setScriptId(const QString &script_id) {
    m_script_id = script_id;
    m_script_id_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_script_id_Set() const{
    return m_script_id_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_script_id_Valid() const{
    return m_script_id_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getScriptArn() const {
    return m_script_arn;
}
void OAICreateFleetOutput_FleetAttributes::setScriptArn(const QString &script_arn) {
    m_script_arn = script_arn;
    m_script_arn_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_script_arn_Set() const{
    return m_script_arn_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_script_arn_Valid() const{
    return m_script_arn_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getServerLaunchPath() const {
    return m_server_launch_path;
}
void OAICreateFleetOutput_FleetAttributes::setServerLaunchPath(const QString &server_launch_path) {
    m_server_launch_path = server_launch_path;
    m_server_launch_path_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_server_launch_path_Set() const{
    return m_server_launch_path_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_server_launch_path_Valid() const{
    return m_server_launch_path_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getServerLaunchParameters() const {
    return m_server_launch_parameters;
}
void OAICreateFleetOutput_FleetAttributes::setServerLaunchParameters(const QString &server_launch_parameters) {
    m_server_launch_parameters = server_launch_parameters;
    m_server_launch_parameters_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_server_launch_parameters_Set() const{
    return m_server_launch_parameters_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_server_launch_parameters_Valid() const{
    return m_server_launch_parameters_isValid;
}

QList OAICreateFleetOutput_FleetAttributes::getLogPaths() const {
    return m_log_paths;
}
void OAICreateFleetOutput_FleetAttributes::setLogPaths(const QList &log_paths) {
    m_log_paths = log_paths;
    m_log_paths_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_log_paths_Set() const{
    return m_log_paths_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_log_paths_Valid() const{
    return m_log_paths_isValid;
}

OAIProtectionPolicy OAICreateFleetOutput_FleetAttributes::getNewGameSessionProtectionPolicy() const {
    return m_new_game_session_protection_policy;
}
void OAICreateFleetOutput_FleetAttributes::setNewGameSessionProtectionPolicy(const OAIProtectionPolicy &new_game_session_protection_policy) {
    m_new_game_session_protection_policy = new_game_session_protection_policy;
    m_new_game_session_protection_policy_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_new_game_session_protection_policy_Set() const{
    return m_new_game_session_protection_policy_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_new_game_session_protection_policy_Valid() const{
    return m_new_game_session_protection_policy_isValid;
}

OAIOperatingSystem OAICreateFleetOutput_FleetAttributes::getOperatingSystem() const {
    return m_operating_system;
}
void OAICreateFleetOutput_FleetAttributes::setOperatingSystem(const OAIOperatingSystem &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

OAIResourceCreationLimitPolicy OAICreateFleetOutput_FleetAttributes::getResourceCreationLimitPolicy() const {
    return m_resource_creation_limit_policy;
}
void OAICreateFleetOutput_FleetAttributes::setResourceCreationLimitPolicy(const OAIResourceCreationLimitPolicy &resource_creation_limit_policy) {
    m_resource_creation_limit_policy = resource_creation_limit_policy;
    m_resource_creation_limit_policy_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_resource_creation_limit_policy_Set() const{
    return m_resource_creation_limit_policy_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_resource_creation_limit_policy_Valid() const{
    return m_resource_creation_limit_policy_isValid;
}

QList OAICreateFleetOutput_FleetAttributes::getMetricGroups() const {
    return m_metric_groups;
}
void OAICreateFleetOutput_FleetAttributes::setMetricGroups(const QList &metric_groups) {
    m_metric_groups = metric_groups;
    m_metric_groups_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_metric_groups_Set() const{
    return m_metric_groups_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_metric_groups_Valid() const{
    return m_metric_groups_isValid;
}

QList OAICreateFleetOutput_FleetAttributes::getStoppedActions() const {
    return m_stopped_actions;
}
void OAICreateFleetOutput_FleetAttributes::setStoppedActions(const QList &stopped_actions) {
    m_stopped_actions = stopped_actions;
    m_stopped_actions_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_stopped_actions_Set() const{
    return m_stopped_actions_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_stopped_actions_Valid() const{
    return m_stopped_actions_isValid;
}

QString OAICreateFleetOutput_FleetAttributes::getInstanceRoleArn() const {
    return m_instance_role_arn;
}
void OAICreateFleetOutput_FleetAttributes::setInstanceRoleArn(const QString &instance_role_arn) {
    m_instance_role_arn = instance_role_arn;
    m_instance_role_arn_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_instance_role_arn_Set() const{
    return m_instance_role_arn_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_instance_role_arn_Valid() const{
    return m_instance_role_arn_isValid;
}

OAICertificateConfiguration OAICreateFleetOutput_FleetAttributes::getCertificateConfiguration() const {
    return m_certificate_configuration;
}
void OAICreateFleetOutput_FleetAttributes::setCertificateConfiguration(const OAICertificateConfiguration &certificate_configuration) {
    m_certificate_configuration = certificate_configuration;
    m_certificate_configuration_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_certificate_configuration_Set() const{
    return m_certificate_configuration_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_certificate_configuration_Valid() const{
    return m_certificate_configuration_isValid;
}

OAIComputeType OAICreateFleetOutput_FleetAttributes::getComputeType() const {
    return m_compute_type;
}
void OAICreateFleetOutput_FleetAttributes::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

OAIAnywhereConfiguration OAICreateFleetOutput_FleetAttributes::getAnywhereConfiguration() const {
    return m_anywhere_configuration;
}
void OAICreateFleetOutput_FleetAttributes::setAnywhereConfiguration(const OAIAnywhereConfiguration &anywhere_configuration) {
    m_anywhere_configuration = anywhere_configuration;
    m_anywhere_configuration_isSet = true;
}

bool OAICreateFleetOutput_FleetAttributes::is_anywhere_configuration_Set() const{
    return m_anywhere_configuration_isSet;
}

bool OAICreateFleetOutput_FleetAttributes::is_anywhere_configuration_Valid() const{
    return m_anywhere_configuration_isValid;
}

bool OAICreateFleetOutput_FleetAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fleet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_launch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_launch_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_game_session_protection_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_creation_limit_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anywhere_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFleetOutput_FleetAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
