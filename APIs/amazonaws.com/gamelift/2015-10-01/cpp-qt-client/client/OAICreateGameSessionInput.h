/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateGameSessionInput.h
 *
 * 
 */

#ifndef OAICreateGameSessionInput_H
#define OAICreateGameSessionInput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateGameSessionInput : public OAIObject {
public:
    OAICreateGameSessionInput();
    OAICreateGameSessionInput(QString json);
    ~OAICreateGameSessionInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFleetId() const;
    void setFleetId(const QString &fleet_id);
    bool is_fleet_id_Set() const;
    bool is_fleet_id_Valid() const;

    QString getAliasId() const;
    void setAliasId(const QString &alias_id);
    bool is_alias_id_Set() const;
    bool is_alias_id_Valid() const;

    qint32 getMaximumPlayerSessionCount() const;
    void setMaximumPlayerSessionCount(const qint32 &maximum_player_session_count);
    bool is_maximum_player_session_count_Set() const;
    bool is_maximum_player_session_count_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getGameProperties() const;
    void setGameProperties(const QList &game_properties);
    bool is_game_properties_Set() const;
    bool is_game_properties_Valid() const;

    QString getCreatorId() const;
    void setCreatorId(const QString &creator_id);
    bool is_creator_id_Set() const;
    bool is_creator_id_Valid() const;

    QString getGameSessionId() const;
    void setGameSessionId(const QString &game_session_id);
    bool is_game_session_id_Set() const;
    bool is_game_session_id_Valid() const;

    QString getIdempotencyToken() const;
    void setIdempotencyToken(const QString &idempotency_token);
    bool is_idempotency_token_Set() const;
    bool is_idempotency_token_Valid() const;

    QString getGameSessionData() const;
    void setGameSessionData(const QString &game_session_data);
    bool is_game_session_data_Set() const;
    bool is_game_session_data_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_fleet_id;
    bool m_fleet_id_isSet;
    bool m_fleet_id_isValid;

    QString m_alias_id;
    bool m_alias_id_isSet;
    bool m_alias_id_isValid;

    qint32 m_maximum_player_session_count;
    bool m_maximum_player_session_count_isSet;
    bool m_maximum_player_session_count_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_game_properties;
    bool m_game_properties_isSet;
    bool m_game_properties_isValid;

    QString m_creator_id;
    bool m_creator_id_isSet;
    bool m_creator_id_isValid;

    QString m_game_session_id;
    bool m_game_session_id_isSet;
    bool m_game_session_id_isValid;

    QString m_idempotency_token;
    bool m_idempotency_token_isSet;
    bool m_idempotency_token_isValid;

    QString m_game_session_data;
    bool m_game_session_data_isSet;
    bool m_game_session_data_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateGameSessionInput)

#endif // OAICreateGameSessionInput_H
