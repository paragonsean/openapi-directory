/**
 * Amazon GameLift
 * <p>Amazon GameLift provides solutions for hosting session-based multiplayer game servers in the cloud, including tools for deploying, operating, and scaling game servers. Built on Amazon Web Services global computing infrastructure, GameLift helps you deliver high-performance, high-reliability, low-cost game servers while dynamically scaling your resource usage to meet player demand. </p> <p> <b>About Amazon GameLift solutions</b> </p> <p>Get more information on these Amazon GameLift solutions in the <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/\">Amazon GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed hosting -- Amazon GameLift offers a fully managed service to set up and maintain computing machines for hosting, manage game session and player session life cycle, and handle security, storage, and performance tracking. You can use automatic scaling tools to balance player demand and hosting costs, configure your game session management to minimize player latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed hosting with Realtime Servers -- With Amazon GameLift Realtime Servers, you can quickly configure and set up ready-to-go game servers for your game. Realtime Servers provides a game server framework with core Amazon GameLift infrastructure already built in. Then use the full range of Amazon GameLift managed hosting features, including FlexMatch, for your game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift FleetIQ as a standalone service while hosting your games using EC2 instances and Auto Scaling groups. Amazon GameLift FleetIQ provides optimizations for game hosting, including boosting the viability of low-cost Spot Instances gaming. For a complete solution, pair the Amazon GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li> <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting solution. FlexMatch is a customizable matchmaking service for multiplayer games. Use FlexMatch as integrated with Amazon GameLift managed hosting or incorporate FlexMatch as a standalone service into your own hosting solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This reference guide describes the low-level service API for Amazon GameLift. With each topic in this guide, you can find links to language-specific SDK guides and the Amazon Web Services CLI reference. Useful links:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html\">Amazon GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html\"> Amazon GameLift tools and resources</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResumeGameServerGroupOutput_GameServerGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResumeGameServerGroupOutput_GameServerGroup::OAIResumeGameServerGroupOutput_GameServerGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResumeGameServerGroupOutput_GameServerGroup::OAIResumeGameServerGroupOutput_GameServerGroup() {
    this->initializeModel();
}

OAIResumeGameServerGroupOutput_GameServerGroup::~OAIResumeGameServerGroupOutput_GameServerGroup() {}

void OAIResumeGameServerGroupOutput_GameServerGroup::initializeModel() {

    m_game_server_group_name_isSet = false;
    m_game_server_group_name_isValid = false;

    m_game_server_group_arn_isSet = false;
    m_game_server_group_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_instance_definitions_isSet = false;
    m_instance_definitions_isValid = false;

    m_balancing_strategy_isSet = false;
    m_balancing_strategy_isValid = false;

    m_game_server_protection_policy_isSet = false;
    m_game_server_protection_policy_isValid = false;

    m_auto_scaling_group_arn_isSet = false;
    m_auto_scaling_group_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_suspended_actions_isSet = false;
    m_suspended_actions_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIResumeGameServerGroupOutput_GameServerGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResumeGameServerGroupOutput_GameServerGroup::fromJsonObject(QJsonObject json) {

    m_game_server_group_name_isValid = ::OpenAPI::fromJsonValue(m_game_server_group_name, json[QString("GameServerGroupName")]);
    m_game_server_group_name_isSet = !json[QString("GameServerGroupName")].isNull() && m_game_server_group_name_isValid;

    m_game_server_group_arn_isValid = ::OpenAPI::fromJsonValue(m_game_server_group_arn, json[QString("GameServerGroupArn")]);
    m_game_server_group_arn_isSet = !json[QString("GameServerGroupArn")].isNull() && m_game_server_group_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_instance_definitions_isValid = ::OpenAPI::fromJsonValue(m_instance_definitions, json[QString("InstanceDefinitions")]);
    m_instance_definitions_isSet = !json[QString("InstanceDefinitions")].isNull() && m_instance_definitions_isValid;

    m_balancing_strategy_isValid = ::OpenAPI::fromJsonValue(m_balancing_strategy, json[QString("BalancingStrategy")]);
    m_balancing_strategy_isSet = !json[QString("BalancingStrategy")].isNull() && m_balancing_strategy_isValid;

    m_game_server_protection_policy_isValid = ::OpenAPI::fromJsonValue(m_game_server_protection_policy, json[QString("GameServerProtectionPolicy")]);
    m_game_server_protection_policy_isSet = !json[QString("GameServerProtectionPolicy")].isNull() && m_game_server_protection_policy_isValid;

    m_auto_scaling_group_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group_arn, json[QString("AutoScalingGroupArn")]);
    m_auto_scaling_group_arn_isSet = !json[QString("AutoScalingGroupArn")].isNull() && m_auto_scaling_group_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_suspended_actions_isValid = ::OpenAPI::fromJsonValue(m_suspended_actions, json[QString("SuspendedActions")]);
    m_suspended_actions_isSet = !json[QString("SuspendedActions")].isNull() && m_suspended_actions_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIResumeGameServerGroupOutput_GameServerGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResumeGameServerGroupOutput_GameServerGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_game_server_group_name_isSet) {
        obj.insert(QString("GameServerGroupName"), ::OpenAPI::toJsonValue(m_game_server_group_name));
    }
    if (m_game_server_group_arn_isSet) {
        obj.insert(QString("GameServerGroupArn"), ::OpenAPI::toJsonValue(m_game_server_group_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_instance_definitions.isSet()) {
        obj.insert(QString("InstanceDefinitions"), ::OpenAPI::toJsonValue(m_instance_definitions));
    }
    if (m_balancing_strategy.isSet()) {
        obj.insert(QString("BalancingStrategy"), ::OpenAPI::toJsonValue(m_balancing_strategy));
    }
    if (m_game_server_protection_policy.isSet()) {
        obj.insert(QString("GameServerProtectionPolicy"), ::OpenAPI::toJsonValue(m_game_server_protection_policy));
    }
    if (m_auto_scaling_group_arn_isSet) {
        obj.insert(QString("AutoScalingGroupArn"), ::OpenAPI::toJsonValue(m_auto_scaling_group_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_suspended_actions.isSet()) {
        obj.insert(QString("SuspendedActions"), ::OpenAPI::toJsonValue(m_suspended_actions));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIResumeGameServerGroupOutput_GameServerGroup::getGameServerGroupName() const {
    return m_game_server_group_name;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setGameServerGroupName(const QString &game_server_group_name) {
    m_game_server_group_name = game_server_group_name;
    m_game_server_group_name_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_game_server_group_name_Set() const{
    return m_game_server_group_name_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_game_server_group_name_Valid() const{
    return m_game_server_group_name_isValid;
}

QString OAIResumeGameServerGroupOutput_GameServerGroup::getGameServerGroupArn() const {
    return m_game_server_group_arn;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setGameServerGroupArn(const QString &game_server_group_arn) {
    m_game_server_group_arn = game_server_group_arn;
    m_game_server_group_arn_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_game_server_group_arn_Set() const{
    return m_game_server_group_arn_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_game_server_group_arn_Valid() const{
    return m_game_server_group_arn_isValid;
}

QString OAIResumeGameServerGroupOutput_GameServerGroup::getRoleArn() const {
    return m_role_arn;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIResumeGameServerGroupOutput_GameServerGroup::getInstanceDefinitions() const {
    return m_instance_definitions;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setInstanceDefinitions(const QList &instance_definitions) {
    m_instance_definitions = instance_definitions;
    m_instance_definitions_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_instance_definitions_Set() const{
    return m_instance_definitions_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_instance_definitions_Valid() const{
    return m_instance_definitions_isValid;
}

OAIBalancingStrategy OAIResumeGameServerGroupOutput_GameServerGroup::getBalancingStrategy() const {
    return m_balancing_strategy;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setBalancingStrategy(const OAIBalancingStrategy &balancing_strategy) {
    m_balancing_strategy = balancing_strategy;
    m_balancing_strategy_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_balancing_strategy_Set() const{
    return m_balancing_strategy_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_balancing_strategy_Valid() const{
    return m_balancing_strategy_isValid;
}

OAIGameServerProtectionPolicy OAIResumeGameServerGroupOutput_GameServerGroup::getGameServerProtectionPolicy() const {
    return m_game_server_protection_policy;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setGameServerProtectionPolicy(const OAIGameServerProtectionPolicy &game_server_protection_policy) {
    m_game_server_protection_policy = game_server_protection_policy;
    m_game_server_protection_policy_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_game_server_protection_policy_Set() const{
    return m_game_server_protection_policy_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_game_server_protection_policy_Valid() const{
    return m_game_server_protection_policy_isValid;
}

QString OAIResumeGameServerGroupOutput_GameServerGroup::getAutoScalingGroupArn() const {
    return m_auto_scaling_group_arn;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setAutoScalingGroupArn(const QString &auto_scaling_group_arn) {
    m_auto_scaling_group_arn = auto_scaling_group_arn;
    m_auto_scaling_group_arn_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_auto_scaling_group_arn_Set() const{
    return m_auto_scaling_group_arn_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_auto_scaling_group_arn_Valid() const{
    return m_auto_scaling_group_arn_isValid;
}

OAIGameServerGroupStatus OAIResumeGameServerGroupOutput_GameServerGroup::getStatus() const {
    return m_status;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setStatus(const OAIGameServerGroupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResumeGameServerGroupOutput_GameServerGroup::getStatusReason() const {
    return m_status_reason;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QList OAIResumeGameServerGroupOutput_GameServerGroup::getSuspendedActions() const {
    return m_suspended_actions;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setSuspendedActions(const QList &suspended_actions) {
    m_suspended_actions = suspended_actions;
    m_suspended_actions_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_suspended_actions_Set() const{
    return m_suspended_actions_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_suspended_actions_Valid() const{
    return m_suspended_actions_isValid;
}

QDateTime OAIResumeGameServerGroupOutput_GameServerGroup::getCreationTime() const {
    return m_creation_time;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIResumeGameServerGroupOutput_GameServerGroup::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIResumeGameServerGroupOutput_GameServerGroup::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_server_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_server_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balancing_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_server_protection_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResumeGameServerGroupOutput_GameServerGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
