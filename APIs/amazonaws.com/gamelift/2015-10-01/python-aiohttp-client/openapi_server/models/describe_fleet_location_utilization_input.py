# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeFleetLocationUtilizationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, location: str=None):
        """DescribeFleetLocationUtilizationInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this DescribeFleetLocationUtilizationInput.
        :param location: The location of this DescribeFleetLocationUtilizationInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'location': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'location': 'Location'
        }

        self._fleet_id = fleet_id
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFleetLocationUtilizationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFleetLocationUtilizationInput of this DescribeFleetLocationUtilizationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this DescribeFleetLocationUtilizationInput.


        :return: The fleet_id of this DescribeFleetLocationUtilizationInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this DescribeFleetLocationUtilizationInput.


        :param fleet_id: The fleet_id of this DescribeFleetLocationUtilizationInput.
        :type fleet_id: str
        """
        if fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")

        self._fleet_id = fleet_id

    @property
    def location(self):
        """Gets the location of this DescribeFleetLocationUtilizationInput.


        :return: The location of this DescribeFleetLocationUtilizationInput.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DescribeFleetLocationUtilizationInput.


        :param location: The location of this DescribeFleetLocationUtilizationInput.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location
