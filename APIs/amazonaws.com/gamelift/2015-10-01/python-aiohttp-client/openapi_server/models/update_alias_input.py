# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_alias_input_routing_strategy import UpdateAliasInputRoutingStrategy
from openapi_server import util


class UpdateAliasInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_id: str=None, name: str=None, description: str=None, routing_strategy: UpdateAliasInputRoutingStrategy=None):
        """UpdateAliasInput - a model defined in OpenAPI

        :param alias_id: The alias_id of this UpdateAliasInput.
        :param name: The name of this UpdateAliasInput.
        :param description: The description of this UpdateAliasInput.
        :param routing_strategy: The routing_strategy of this UpdateAliasInput.
        """
        self.openapi_types = {
            'alias_id': str,
            'name': str,
            'description': str,
            'routing_strategy': UpdateAliasInputRoutingStrategy
        }

        self.attribute_map = {
            'alias_id': 'AliasId',
            'name': 'Name',
            'description': 'Description',
            'routing_strategy': 'RoutingStrategy'
        }

        self._alias_id = alias_id
        self._name = name
        self._description = description
        self._routing_strategy = routing_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAliasInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAliasInput of this UpdateAliasInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_id(self):
        """Gets the alias_id of this UpdateAliasInput.


        :return: The alias_id of this UpdateAliasInput.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this UpdateAliasInput.


        :param alias_id: The alias_id of this UpdateAliasInput.
        :type alias_id: str
        """
        if alias_id is None:
            raise ValueError("Invalid value for `alias_id`, must not be `None`")

        self._alias_id = alias_id

    @property
    def name(self):
        """Gets the name of this UpdateAliasInput.


        :return: The name of this UpdateAliasInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAliasInput.


        :param name: The name of this UpdateAliasInput.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateAliasInput.


        :return: The description of this UpdateAliasInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAliasInput.


        :param description: The description of this UpdateAliasInput.
        :type description: str
        """

        self._description = description

    @property
    def routing_strategy(self):
        """Gets the routing_strategy of this UpdateAliasInput.


        :return: The routing_strategy of this UpdateAliasInput.
        :rtype: UpdateAliasInputRoutingStrategy
        """
        return self._routing_strategy

    @routing_strategy.setter
    def routing_strategy(self, routing_strategy):
        """Sets the routing_strategy of this UpdateAliasInput.


        :param routing_strategy: The routing_strategy of this UpdateAliasInput.
        :type routing_strategy: UpdateAliasInputRoutingStrategy
        """

        self._routing_strategy = routing_strategy
