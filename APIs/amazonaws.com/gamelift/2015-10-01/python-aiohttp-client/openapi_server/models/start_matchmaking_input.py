# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartMatchmakingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ticket_id: str=None, configuration_name: str=None, players: List=None):
        """StartMatchmakingInput - a model defined in OpenAPI

        :param ticket_id: The ticket_id of this StartMatchmakingInput.
        :param configuration_name: The configuration_name of this StartMatchmakingInput.
        :param players: The players of this StartMatchmakingInput.
        """
        self.openapi_types = {
            'ticket_id': str,
            'configuration_name': str,
            'players': List
        }

        self.attribute_map = {
            'ticket_id': 'TicketId',
            'configuration_name': 'ConfigurationName',
            'players': 'Players'
        }

        self._ticket_id = ticket_id
        self._configuration_name = configuration_name
        self._players = players

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartMatchmakingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartMatchmakingInput of this StartMatchmakingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ticket_id(self):
        """Gets the ticket_id of this StartMatchmakingInput.


        :return: The ticket_id of this StartMatchmakingInput.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this StartMatchmakingInput.


        :param ticket_id: The ticket_id of this StartMatchmakingInput.
        :type ticket_id: str
        """

        self._ticket_id = ticket_id

    @property
    def configuration_name(self):
        """Gets the configuration_name of this StartMatchmakingInput.


        :return: The configuration_name of this StartMatchmakingInput.
        :rtype: str
        """
        return self._configuration_name

    @configuration_name.setter
    def configuration_name(self, configuration_name):
        """Sets the configuration_name of this StartMatchmakingInput.


        :param configuration_name: The configuration_name of this StartMatchmakingInput.
        :type configuration_name: str
        """
        if configuration_name is None:
            raise ValueError("Invalid value for `configuration_name`, must not be `None`")

        self._configuration_name = configuration_name

    @property
    def players(self):
        """Gets the players of this StartMatchmakingInput.


        :return: The players of this StartMatchmakingInput.
        :rtype: List
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this StartMatchmakingInput.


        :param players: The players of this StartMatchmakingInput.
        :type players: List
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")

        self._players = players
