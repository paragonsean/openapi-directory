# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetTrackingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_value: float=None):
        """TargetTrackingConfiguration - a model defined in OpenAPI

        :param target_value: The target_value of this TargetTrackingConfiguration.
        """
        self.openapi_types = {
            'target_value': float
        }

        self.attribute_map = {
            'target_value': 'TargetValue'
        }

        self._target_value = target_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetTrackingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetTrackingConfiguration of this TargetTrackingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_value(self):
        """Gets the target_value of this TargetTrackingConfiguration.


        :return: The target_value of this TargetTrackingConfiguration.
        :rtype: float
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value):
        """Sets the target_value of this TargetTrackingConfiguration.


        :param target_value: The target_value of this TargetTrackingConfiguration.
        :type target_value: float
        """
        if target_value is None:
            raise ValueError("Invalid value for `target_value`, must not be `None`")

        self._target_value = target_value
