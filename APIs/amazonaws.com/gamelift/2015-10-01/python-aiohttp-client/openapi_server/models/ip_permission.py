# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_protocol import IpProtocol
from openapi_server import util


class IpPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_port: int=None, to_port: int=None, ip_range: str=None, protocol: IpProtocol=None):
        """IpPermission - a model defined in OpenAPI

        :param from_port: The from_port of this IpPermission.
        :param to_port: The to_port of this IpPermission.
        :param ip_range: The ip_range of this IpPermission.
        :param protocol: The protocol of this IpPermission.
        """
        self.openapi_types = {
            'from_port': int,
            'to_port': int,
            'ip_range': str,
            'protocol': IpProtocol
        }

        self.attribute_map = {
            'from_port': 'FromPort',
            'to_port': 'ToPort',
            'ip_range': 'IpRange',
            'protocol': 'Protocol'
        }

        self._from_port = from_port
        self._to_port = to_port
        self._ip_range = ip_range
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpPermission of this IpPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_port(self):
        """Gets the from_port of this IpPermission.


        :return: The from_port of this IpPermission.
        :rtype: int
        """
        return self._from_port

    @from_port.setter
    def from_port(self, from_port):
        """Sets the from_port of this IpPermission.


        :param from_port: The from_port of this IpPermission.
        :type from_port: int
        """
        if from_port is None:
            raise ValueError("Invalid value for `from_port`, must not be `None`")

        self._from_port = from_port

    @property
    def to_port(self):
        """Gets the to_port of this IpPermission.


        :return: The to_port of this IpPermission.
        :rtype: int
        """
        return self._to_port

    @to_port.setter
    def to_port(self, to_port):
        """Sets the to_port of this IpPermission.


        :param to_port: The to_port of this IpPermission.
        :type to_port: int
        """
        if to_port is None:
            raise ValueError("Invalid value for `to_port`, must not be `None`")

        self._to_port = to_port

    @property
    def ip_range(self):
        """Gets the ip_range of this IpPermission.


        :return: The ip_range of this IpPermission.
        :rtype: str
        """
        return self._ip_range

    @ip_range.setter
    def ip_range(self, ip_range):
        """Sets the ip_range of this IpPermission.


        :param ip_range: The ip_range of this IpPermission.
        :type ip_range: str
        """
        if ip_range is None:
            raise ValueError("Invalid value for `ip_range`, must not be `None`")

        self._ip_range = ip_range

    @property
    def protocol(self):
        """Gets the protocol of this IpPermission.


        :return: The protocol of this IpPermission.
        :rtype: IpProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IpPermission.


        :param protocol: The protocol of this IpPermission.
        :type protocol: IpProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol
