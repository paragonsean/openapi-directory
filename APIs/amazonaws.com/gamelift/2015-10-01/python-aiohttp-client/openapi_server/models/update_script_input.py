# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_script_input_storage_location import CreateScriptInputStorageLocation
from openapi_server import util


class UpdateScriptInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, script_id: str=None, name: str=None, version: str=None, storage_location: CreateScriptInputStorageLocation=None, zip_file: str=None):
        """UpdateScriptInput - a model defined in OpenAPI

        :param script_id: The script_id of this UpdateScriptInput.
        :param name: The name of this UpdateScriptInput.
        :param version: The version of this UpdateScriptInput.
        :param storage_location: The storage_location of this UpdateScriptInput.
        :param zip_file: The zip_file of this UpdateScriptInput.
        """
        self.openapi_types = {
            'script_id': str,
            'name': str,
            'version': str,
            'storage_location': CreateScriptInputStorageLocation,
            'zip_file': str
        }

        self.attribute_map = {
            'script_id': 'ScriptId',
            'name': 'Name',
            'version': 'Version',
            'storage_location': 'StorageLocation',
            'zip_file': 'ZipFile'
        }

        self._script_id = script_id
        self._name = name
        self._version = version
        self._storage_location = storage_location
        self._zip_file = zip_file

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateScriptInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateScriptInput of this UpdateScriptInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def script_id(self):
        """Gets the script_id of this UpdateScriptInput.


        :return: The script_id of this UpdateScriptInput.
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this UpdateScriptInput.


        :param script_id: The script_id of this UpdateScriptInput.
        :type script_id: str
        """
        if script_id is None:
            raise ValueError("Invalid value for `script_id`, must not be `None`")

        self._script_id = script_id

    @property
    def name(self):
        """Gets the name of this UpdateScriptInput.


        :return: The name of this UpdateScriptInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateScriptInput.


        :param name: The name of this UpdateScriptInput.
        :type name: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this UpdateScriptInput.


        :return: The version of this UpdateScriptInput.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateScriptInput.


        :param version: The version of this UpdateScriptInput.
        :type version: str
        """

        self._version = version

    @property
    def storage_location(self):
        """Gets the storage_location of this UpdateScriptInput.


        :return: The storage_location of this UpdateScriptInput.
        :rtype: CreateScriptInputStorageLocation
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this UpdateScriptInput.


        :param storage_location: The storage_location of this UpdateScriptInput.
        :type storage_location: CreateScriptInputStorageLocation
        """

        self._storage_location = storage_location

    @property
    def zip_file(self):
        """Gets the zip_file of this UpdateScriptInput.


        :return: The zip_file of this UpdateScriptInput.
        :rtype: str
        """
        return self._zip_file

    @zip_file.setter
    def zip_file(self, zip_file):
        """Sets the zip_file of this UpdateScriptInput.


        :param zip_file: The zip_file of this UpdateScriptInput.
        :type zip_file: str
        """

        self._zip_file = zip_file
