# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balancing_strategy import BalancingStrategy
from openapi_server.models.create_game_server_group_input_auto_scaling_policy import CreateGameServerGroupInputAutoScalingPolicy
from openapi_server.models.create_game_server_group_input_launch_template import CreateGameServerGroupInputLaunchTemplate
from openapi_server.models.game_server_protection_policy import GameServerProtectionPolicy
from openapi_server import util


class CreateGameServerGroupInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_server_group_name: str=None, role_arn: str=None, min_size: int=None, max_size: int=None, launch_template: CreateGameServerGroupInputLaunchTemplate=None, instance_definitions: List=None, auto_scaling_policy: CreateGameServerGroupInputAutoScalingPolicy=None, balancing_strategy: BalancingStrategy=None, game_server_protection_policy: GameServerProtectionPolicy=None, vpc_subnets: List=None, tags: List=None):
        """CreateGameServerGroupInput - a model defined in OpenAPI

        :param game_server_group_name: The game_server_group_name of this CreateGameServerGroupInput.
        :param role_arn: The role_arn of this CreateGameServerGroupInput.
        :param min_size: The min_size of this CreateGameServerGroupInput.
        :param max_size: The max_size of this CreateGameServerGroupInput.
        :param launch_template: The launch_template of this CreateGameServerGroupInput.
        :param instance_definitions: The instance_definitions of this CreateGameServerGroupInput.
        :param auto_scaling_policy: The auto_scaling_policy of this CreateGameServerGroupInput.
        :param balancing_strategy: The balancing_strategy of this CreateGameServerGroupInput.
        :param game_server_protection_policy: The game_server_protection_policy of this CreateGameServerGroupInput.
        :param vpc_subnets: The vpc_subnets of this CreateGameServerGroupInput.
        :param tags: The tags of this CreateGameServerGroupInput.
        """
        self.openapi_types = {
            'game_server_group_name': str,
            'role_arn': str,
            'min_size': int,
            'max_size': int,
            'launch_template': CreateGameServerGroupInputLaunchTemplate,
            'instance_definitions': List,
            'auto_scaling_policy': CreateGameServerGroupInputAutoScalingPolicy,
            'balancing_strategy': BalancingStrategy,
            'game_server_protection_policy': GameServerProtectionPolicy,
            'vpc_subnets': List,
            'tags': List
        }

        self.attribute_map = {
            'game_server_group_name': 'GameServerGroupName',
            'role_arn': 'RoleArn',
            'min_size': 'MinSize',
            'max_size': 'MaxSize',
            'launch_template': 'LaunchTemplate',
            'instance_definitions': 'InstanceDefinitions',
            'auto_scaling_policy': 'AutoScalingPolicy',
            'balancing_strategy': 'BalancingStrategy',
            'game_server_protection_policy': 'GameServerProtectionPolicy',
            'vpc_subnets': 'VpcSubnets',
            'tags': 'Tags'
        }

        self._game_server_group_name = game_server_group_name
        self._role_arn = role_arn
        self._min_size = min_size
        self._max_size = max_size
        self._launch_template = launch_template
        self._instance_definitions = instance_definitions
        self._auto_scaling_policy = auto_scaling_policy
        self._balancing_strategy = balancing_strategy
        self._game_server_protection_policy = game_server_protection_policy
        self._vpc_subnets = vpc_subnets
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGameServerGroupInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGameServerGroupInput of this CreateGameServerGroupInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_server_group_name(self):
        """Gets the game_server_group_name of this CreateGameServerGroupInput.


        :return: The game_server_group_name of this CreateGameServerGroupInput.
        :rtype: str
        """
        return self._game_server_group_name

    @game_server_group_name.setter
    def game_server_group_name(self, game_server_group_name):
        """Sets the game_server_group_name of this CreateGameServerGroupInput.


        :param game_server_group_name: The game_server_group_name of this CreateGameServerGroupInput.
        :type game_server_group_name: str
        """
        if game_server_group_name is None:
            raise ValueError("Invalid value for `game_server_group_name`, must not be `None`")

        self._game_server_group_name = game_server_group_name

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateGameServerGroupInput.


        :return: The role_arn of this CreateGameServerGroupInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateGameServerGroupInput.


        :param role_arn: The role_arn of this CreateGameServerGroupInput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def min_size(self):
        """Gets the min_size of this CreateGameServerGroupInput.


        :return: The min_size of this CreateGameServerGroupInput.
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this CreateGameServerGroupInput.


        :param min_size: The min_size of this CreateGameServerGroupInput.
        :type min_size: int
        """
        if min_size is None:
            raise ValueError("Invalid value for `min_size`, must not be `None`")

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this CreateGameServerGroupInput.


        :return: The max_size of this CreateGameServerGroupInput.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this CreateGameServerGroupInput.


        :param max_size: The max_size of this CreateGameServerGroupInput.
        :type max_size: int
        """
        if max_size is None:
            raise ValueError("Invalid value for `max_size`, must not be `None`")

        self._max_size = max_size

    @property
    def launch_template(self):
        """Gets the launch_template of this CreateGameServerGroupInput.


        :return: The launch_template of this CreateGameServerGroupInput.
        :rtype: CreateGameServerGroupInputLaunchTemplate
        """
        return self._launch_template

    @launch_template.setter
    def launch_template(self, launch_template):
        """Sets the launch_template of this CreateGameServerGroupInput.


        :param launch_template: The launch_template of this CreateGameServerGroupInput.
        :type launch_template: CreateGameServerGroupInputLaunchTemplate
        """
        if launch_template is None:
            raise ValueError("Invalid value for `launch_template`, must not be `None`")

        self._launch_template = launch_template

    @property
    def instance_definitions(self):
        """Gets the instance_definitions of this CreateGameServerGroupInput.


        :return: The instance_definitions of this CreateGameServerGroupInput.
        :rtype: List
        """
        return self._instance_definitions

    @instance_definitions.setter
    def instance_definitions(self, instance_definitions):
        """Sets the instance_definitions of this CreateGameServerGroupInput.


        :param instance_definitions: The instance_definitions of this CreateGameServerGroupInput.
        :type instance_definitions: List
        """
        if instance_definitions is None:
            raise ValueError("Invalid value for `instance_definitions`, must not be `None`")

        self._instance_definitions = instance_definitions

    @property
    def auto_scaling_policy(self):
        """Gets the auto_scaling_policy of this CreateGameServerGroupInput.


        :return: The auto_scaling_policy of this CreateGameServerGroupInput.
        :rtype: CreateGameServerGroupInputAutoScalingPolicy
        """
        return self._auto_scaling_policy

    @auto_scaling_policy.setter
    def auto_scaling_policy(self, auto_scaling_policy):
        """Sets the auto_scaling_policy of this CreateGameServerGroupInput.


        :param auto_scaling_policy: The auto_scaling_policy of this CreateGameServerGroupInput.
        :type auto_scaling_policy: CreateGameServerGroupInputAutoScalingPolicy
        """

        self._auto_scaling_policy = auto_scaling_policy

    @property
    def balancing_strategy(self):
        """Gets the balancing_strategy of this CreateGameServerGroupInput.


        :return: The balancing_strategy of this CreateGameServerGroupInput.
        :rtype: BalancingStrategy
        """
        return self._balancing_strategy

    @balancing_strategy.setter
    def balancing_strategy(self, balancing_strategy):
        """Sets the balancing_strategy of this CreateGameServerGroupInput.


        :param balancing_strategy: The balancing_strategy of this CreateGameServerGroupInput.
        :type balancing_strategy: BalancingStrategy
        """

        self._balancing_strategy = balancing_strategy

    @property
    def game_server_protection_policy(self):
        """Gets the game_server_protection_policy of this CreateGameServerGroupInput.


        :return: The game_server_protection_policy of this CreateGameServerGroupInput.
        :rtype: GameServerProtectionPolicy
        """
        return self._game_server_protection_policy

    @game_server_protection_policy.setter
    def game_server_protection_policy(self, game_server_protection_policy):
        """Sets the game_server_protection_policy of this CreateGameServerGroupInput.


        :param game_server_protection_policy: The game_server_protection_policy of this CreateGameServerGroupInput.
        :type game_server_protection_policy: GameServerProtectionPolicy
        """

        self._game_server_protection_policy = game_server_protection_policy

    @property
    def vpc_subnets(self):
        """Gets the vpc_subnets of this CreateGameServerGroupInput.


        :return: The vpc_subnets of this CreateGameServerGroupInput.
        :rtype: List
        """
        return self._vpc_subnets

    @vpc_subnets.setter
    def vpc_subnets(self, vpc_subnets):
        """Sets the vpc_subnets of this CreateGameServerGroupInput.


        :param vpc_subnets: The vpc_subnets of this CreateGameServerGroupInput.
        :type vpc_subnets: List
        """

        self._vpc_subnets = vpc_subnets

    @property
    def tags(self):
        """Gets the tags of this CreateGameServerGroupInput.


        :return: The tags of this CreateGameServerGroupInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateGameServerGroupInput.


        :param tags: The tags of this CreateGameServerGroupInput.
        :type tags: List
        """

        self._tags = tags
