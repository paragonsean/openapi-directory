# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_code import EventCode
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, resource_id: str=None, event_code: EventCode=None, message: str=None, event_time: datetime=None, pre_signed_log_url: str=None):
        """Event - a model defined in OpenAPI

        :param event_id: The event_id of this Event.
        :param resource_id: The resource_id of this Event.
        :param event_code: The event_code of this Event.
        :param message: The message of this Event.
        :param event_time: The event_time of this Event.
        :param pre_signed_log_url: The pre_signed_log_url of this Event.
        """
        self.openapi_types = {
            'event_id': str,
            'resource_id': str,
            'event_code': EventCode,
            'message': str,
            'event_time': datetime,
            'pre_signed_log_url': str
        }

        self.attribute_map = {
            'event_id': 'EventId',
            'resource_id': 'ResourceId',
            'event_code': 'EventCode',
            'message': 'Message',
            'event_time': 'EventTime',
            'pre_signed_log_url': 'PreSignedLogUrl'
        }

        self._event_id = event_id
        self._resource_id = resource_id
        self._event_code = event_code
        self._message = message
        self._event_time = event_time
        self._pre_signed_log_url = pre_signed_log_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this Event.


        :return: The event_id of this Event.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.


        :param event_id: The event_id of this Event.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def resource_id(self):
        """Gets the resource_id of this Event.


        :return: The resource_id of this Event.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Event.


        :param resource_id: The resource_id of this Event.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def event_code(self):
        """Gets the event_code of this Event.


        :return: The event_code of this Event.
        :rtype: EventCode
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this Event.


        :param event_code: The event_code of this Event.
        :type event_code: EventCode
        """

        self._event_code = event_code

    @property
    def message(self):
        """Gets the message of this Event.


        :return: The message of this Event.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.


        :param message: The message of this Event.
        :type message: str
        """

        self._message = message

    @property
    def event_time(self):
        """Gets the event_time of this Event.


        :return: The event_time of this Event.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this Event.


        :param event_time: The event_time of this Event.
        :type event_time: datetime
        """

        self._event_time = event_time

    @property
    def pre_signed_log_url(self):
        """Gets the pre_signed_log_url of this Event.


        :return: The pre_signed_log_url of this Event.
        :rtype: str
        """
        return self._pre_signed_log_url

    @pre_signed_log_url.setter
    def pre_signed_log_url(self, pre_signed_log_url):
        """Sets the pre_signed_log_url of this Event.


        :param pre_signed_log_url: The pre_signed_log_url of this Event.
        :type pre_signed_log_url: str
        """

        self._pre_signed_log_url = pre_signed_log_url
