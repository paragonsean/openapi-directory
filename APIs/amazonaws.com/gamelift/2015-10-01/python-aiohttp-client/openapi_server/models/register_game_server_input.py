# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterGameServerInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_server_group_name: str=None, game_server_id: str=None, instance_id: str=None, connection_info: str=None, game_server_data: str=None):
        """RegisterGameServerInput - a model defined in OpenAPI

        :param game_server_group_name: The game_server_group_name of this RegisterGameServerInput.
        :param game_server_id: The game_server_id of this RegisterGameServerInput.
        :param instance_id: The instance_id of this RegisterGameServerInput.
        :param connection_info: The connection_info of this RegisterGameServerInput.
        :param game_server_data: The game_server_data of this RegisterGameServerInput.
        """
        self.openapi_types = {
            'game_server_group_name': str,
            'game_server_id': str,
            'instance_id': str,
            'connection_info': str,
            'game_server_data': str
        }

        self.attribute_map = {
            'game_server_group_name': 'GameServerGroupName',
            'game_server_id': 'GameServerId',
            'instance_id': 'InstanceId',
            'connection_info': 'ConnectionInfo',
            'game_server_data': 'GameServerData'
        }

        self._game_server_group_name = game_server_group_name
        self._game_server_id = game_server_id
        self._instance_id = instance_id
        self._connection_info = connection_info
        self._game_server_data = game_server_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterGameServerInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterGameServerInput of this RegisterGameServerInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_server_group_name(self):
        """Gets the game_server_group_name of this RegisterGameServerInput.


        :return: The game_server_group_name of this RegisterGameServerInput.
        :rtype: str
        """
        return self._game_server_group_name

    @game_server_group_name.setter
    def game_server_group_name(self, game_server_group_name):
        """Sets the game_server_group_name of this RegisterGameServerInput.


        :param game_server_group_name: The game_server_group_name of this RegisterGameServerInput.
        :type game_server_group_name: str
        """
        if game_server_group_name is None:
            raise ValueError("Invalid value for `game_server_group_name`, must not be `None`")

        self._game_server_group_name = game_server_group_name

    @property
    def game_server_id(self):
        """Gets the game_server_id of this RegisterGameServerInput.


        :return: The game_server_id of this RegisterGameServerInput.
        :rtype: str
        """
        return self._game_server_id

    @game_server_id.setter
    def game_server_id(self, game_server_id):
        """Sets the game_server_id of this RegisterGameServerInput.


        :param game_server_id: The game_server_id of this RegisterGameServerInput.
        :type game_server_id: str
        """
        if game_server_id is None:
            raise ValueError("Invalid value for `game_server_id`, must not be `None`")

        self._game_server_id = game_server_id

    @property
    def instance_id(self):
        """Gets the instance_id of this RegisterGameServerInput.


        :return: The instance_id of this RegisterGameServerInput.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this RegisterGameServerInput.


        :param instance_id: The instance_id of this RegisterGameServerInput.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def connection_info(self):
        """Gets the connection_info of this RegisterGameServerInput.


        :return: The connection_info of this RegisterGameServerInput.
        :rtype: str
        """
        return self._connection_info

    @connection_info.setter
    def connection_info(self, connection_info):
        """Sets the connection_info of this RegisterGameServerInput.


        :param connection_info: The connection_info of this RegisterGameServerInput.
        :type connection_info: str
        """

        self._connection_info = connection_info

    @property
    def game_server_data(self):
        """Gets the game_server_data of this RegisterGameServerInput.


        :return: The game_server_data of this RegisterGameServerInput.
        :rtype: str
        """
        return self._game_server_data

    @game_server_data.setter
    def game_server_data(self, game_server_data):
        """Sets the game_server_data of this RegisterGameServerInput.


        :param game_server_data: The game_server_data of this RegisterGameServerInput.
        :type game_server_data: str
        """

        self._game_server_data = game_server_data
