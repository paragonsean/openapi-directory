# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerProcess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, launch_path: str=None, parameters: str=None, concurrent_executions: int=None):
        """ServerProcess - a model defined in OpenAPI

        :param launch_path: The launch_path of this ServerProcess.
        :param parameters: The parameters of this ServerProcess.
        :param concurrent_executions: The concurrent_executions of this ServerProcess.
        """
        self.openapi_types = {
            'launch_path': str,
            'parameters': str,
            'concurrent_executions': int
        }

        self.attribute_map = {
            'launch_path': 'LaunchPath',
            'parameters': 'Parameters',
            'concurrent_executions': 'ConcurrentExecutions'
        }

        self._launch_path = launch_path
        self._parameters = parameters
        self._concurrent_executions = concurrent_executions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerProcess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerProcess of this ServerProcess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def launch_path(self):
        """Gets the launch_path of this ServerProcess.


        :return: The launch_path of this ServerProcess.
        :rtype: str
        """
        return self._launch_path

    @launch_path.setter
    def launch_path(self, launch_path):
        """Sets the launch_path of this ServerProcess.


        :param launch_path: The launch_path of this ServerProcess.
        :type launch_path: str
        """
        if launch_path is None:
            raise ValueError("Invalid value for `launch_path`, must not be `None`")

        self._launch_path = launch_path

    @property
    def parameters(self):
        """Gets the parameters of this ServerProcess.


        :return: The parameters of this ServerProcess.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ServerProcess.


        :param parameters: The parameters of this ServerProcess.
        :type parameters: str
        """

        self._parameters = parameters

    @property
    def concurrent_executions(self):
        """Gets the concurrent_executions of this ServerProcess.


        :return: The concurrent_executions of this ServerProcess.
        :rtype: int
        """
        return self._concurrent_executions

    @concurrent_executions.setter
    def concurrent_executions(self, concurrent_executions):
        """Sets the concurrent_executions of this ServerProcess.


        :param concurrent_executions: The concurrent_executions of this ServerProcess.
        :type concurrent_executions: int
        """
        if concurrent_executions is None:
            raise ValueError("Invalid value for `concurrent_executions`, must not be `None`")

        self._concurrent_executions = concurrent_executions
