# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchGameSessionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, alias_id: str=None, location: str=None, filter_expression: str=None, sort_expression: str=None, limit: int=None, next_token: str=None):
        """SearchGameSessionsInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this SearchGameSessionsInput.
        :param alias_id: The alias_id of this SearchGameSessionsInput.
        :param location: The location of this SearchGameSessionsInput.
        :param filter_expression: The filter_expression of this SearchGameSessionsInput.
        :param sort_expression: The sort_expression of this SearchGameSessionsInput.
        :param limit: The limit of this SearchGameSessionsInput.
        :param next_token: The next_token of this SearchGameSessionsInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'alias_id': str,
            'location': str,
            'filter_expression': str,
            'sort_expression': str,
            'limit': int,
            'next_token': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'alias_id': 'AliasId',
            'location': 'Location',
            'filter_expression': 'FilterExpression',
            'sort_expression': 'SortExpression',
            'limit': 'Limit',
            'next_token': 'NextToken'
        }

        self._fleet_id = fleet_id
        self._alias_id = alias_id
        self._location = location
        self._filter_expression = filter_expression
        self._sort_expression = sort_expression
        self._limit = limit
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchGameSessionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchGameSessionsInput of this SearchGameSessionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this SearchGameSessionsInput.


        :return: The fleet_id of this SearchGameSessionsInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this SearchGameSessionsInput.


        :param fleet_id: The fleet_id of this SearchGameSessionsInput.
        :type fleet_id: str
        """

        self._fleet_id = fleet_id

    @property
    def alias_id(self):
        """Gets the alias_id of this SearchGameSessionsInput.


        :return: The alias_id of this SearchGameSessionsInput.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this SearchGameSessionsInput.


        :param alias_id: The alias_id of this SearchGameSessionsInput.
        :type alias_id: str
        """

        self._alias_id = alias_id

    @property
    def location(self):
        """Gets the location of this SearchGameSessionsInput.


        :return: The location of this SearchGameSessionsInput.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SearchGameSessionsInput.


        :param location: The location of this SearchGameSessionsInput.
        :type location: str
        """

        self._location = location

    @property
    def filter_expression(self):
        """Gets the filter_expression of this SearchGameSessionsInput.


        :return: The filter_expression of this SearchGameSessionsInput.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this SearchGameSessionsInput.


        :param filter_expression: The filter_expression of this SearchGameSessionsInput.
        :type filter_expression: str
        """

        self._filter_expression = filter_expression

    @property
    def sort_expression(self):
        """Gets the sort_expression of this SearchGameSessionsInput.


        :return: The sort_expression of this SearchGameSessionsInput.
        :rtype: str
        """
        return self._sort_expression

    @sort_expression.setter
    def sort_expression(self, sort_expression):
        """Sets the sort_expression of this SearchGameSessionsInput.


        :param sort_expression: The sort_expression of this SearchGameSessionsInput.
        :type sort_expression: str
        """

        self._sort_expression = sort_expression

    @property
    def limit(self):
        """Gets the limit of this SearchGameSessionsInput.


        :return: The limit of this SearchGameSessionsInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchGameSessionsInput.


        :param limit: The limit of this SearchGameSessionsInput.
        :type limit: int
        """

        self._limit = limit

    @property
    def next_token(self):
        """Gets the next_token of this SearchGameSessionsInput.


        :return: The next_token of this SearchGameSessionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchGameSessionsInput.


        :param next_token: The next_token of this SearchGameSessionsInput.
        :type next_token: str
        """

        self._next_token = next_token
