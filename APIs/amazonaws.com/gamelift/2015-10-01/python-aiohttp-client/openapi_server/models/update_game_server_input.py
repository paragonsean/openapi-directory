# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.game_server_health_check import GameServerHealthCheck
from openapi_server.models.game_server_utilization_status import GameServerUtilizationStatus
from openapi_server import util


class UpdateGameServerInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_server_group_name: str=None, game_server_id: str=None, game_server_data: str=None, utilization_status: GameServerUtilizationStatus=None, health_check: GameServerHealthCheck=None):
        """UpdateGameServerInput - a model defined in OpenAPI

        :param game_server_group_name: The game_server_group_name of this UpdateGameServerInput.
        :param game_server_id: The game_server_id of this UpdateGameServerInput.
        :param game_server_data: The game_server_data of this UpdateGameServerInput.
        :param utilization_status: The utilization_status of this UpdateGameServerInput.
        :param health_check: The health_check of this UpdateGameServerInput.
        """
        self.openapi_types = {
            'game_server_group_name': str,
            'game_server_id': str,
            'game_server_data': str,
            'utilization_status': GameServerUtilizationStatus,
            'health_check': GameServerHealthCheck
        }

        self.attribute_map = {
            'game_server_group_name': 'GameServerGroupName',
            'game_server_id': 'GameServerId',
            'game_server_data': 'GameServerData',
            'utilization_status': 'UtilizationStatus',
            'health_check': 'HealthCheck'
        }

        self._game_server_group_name = game_server_group_name
        self._game_server_id = game_server_id
        self._game_server_data = game_server_data
        self._utilization_status = utilization_status
        self._health_check = health_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGameServerInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGameServerInput of this UpdateGameServerInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_server_group_name(self):
        """Gets the game_server_group_name of this UpdateGameServerInput.


        :return: The game_server_group_name of this UpdateGameServerInput.
        :rtype: str
        """
        return self._game_server_group_name

    @game_server_group_name.setter
    def game_server_group_name(self, game_server_group_name):
        """Sets the game_server_group_name of this UpdateGameServerInput.


        :param game_server_group_name: The game_server_group_name of this UpdateGameServerInput.
        :type game_server_group_name: str
        """
        if game_server_group_name is None:
            raise ValueError("Invalid value for `game_server_group_name`, must not be `None`")

        self._game_server_group_name = game_server_group_name

    @property
    def game_server_id(self):
        """Gets the game_server_id of this UpdateGameServerInput.


        :return: The game_server_id of this UpdateGameServerInput.
        :rtype: str
        """
        return self._game_server_id

    @game_server_id.setter
    def game_server_id(self, game_server_id):
        """Sets the game_server_id of this UpdateGameServerInput.


        :param game_server_id: The game_server_id of this UpdateGameServerInput.
        :type game_server_id: str
        """
        if game_server_id is None:
            raise ValueError("Invalid value for `game_server_id`, must not be `None`")

        self._game_server_id = game_server_id

    @property
    def game_server_data(self):
        """Gets the game_server_data of this UpdateGameServerInput.


        :return: The game_server_data of this UpdateGameServerInput.
        :rtype: str
        """
        return self._game_server_data

    @game_server_data.setter
    def game_server_data(self, game_server_data):
        """Sets the game_server_data of this UpdateGameServerInput.


        :param game_server_data: The game_server_data of this UpdateGameServerInput.
        :type game_server_data: str
        """

        self._game_server_data = game_server_data

    @property
    def utilization_status(self):
        """Gets the utilization_status of this UpdateGameServerInput.


        :return: The utilization_status of this UpdateGameServerInput.
        :rtype: GameServerUtilizationStatus
        """
        return self._utilization_status

    @utilization_status.setter
    def utilization_status(self, utilization_status):
        """Sets the utilization_status of this UpdateGameServerInput.


        :param utilization_status: The utilization_status of this UpdateGameServerInput.
        :type utilization_status: GameServerUtilizationStatus
        """

        self._utilization_status = utilization_status

    @property
    def health_check(self):
        """Gets the health_check of this UpdateGameServerInput.


        :return: The health_check of this UpdateGameServerInput.
        :rtype: GameServerHealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this UpdateGameServerInput.


        :param health_check: The health_check of this UpdateGameServerInput.
        :type health_check: GameServerHealthCheck
        """

        self._health_check = health_check
