# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_matchmaking_rule_set_output_rule_set import CreateMatchmakingRuleSetOutputRuleSet
from openapi_server import util


class CreateMatchmakingRuleSetOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_set: CreateMatchmakingRuleSetOutputRuleSet=None):
        """CreateMatchmakingRuleSetOutput - a model defined in OpenAPI

        :param rule_set: The rule_set of this CreateMatchmakingRuleSetOutput.
        """
        self.openapi_types = {
            'rule_set': CreateMatchmakingRuleSetOutputRuleSet
        }

        self.attribute_map = {
            'rule_set': 'RuleSet'
        }

        self._rule_set = rule_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMatchmakingRuleSetOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMatchmakingRuleSetOutput of this CreateMatchmakingRuleSetOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_set(self):
        """Gets the rule_set of this CreateMatchmakingRuleSetOutput.


        :return: The rule_set of this CreateMatchmakingRuleSetOutput.
        :rtype: CreateMatchmakingRuleSetOutputRuleSet
        """
        return self._rule_set

    @rule_set.setter
    def rule_set(self, rule_set):
        """Sets the rule_set of this CreateMatchmakingRuleSetOutput.


        :param rule_set: The rule_set of this CreateMatchmakingRuleSetOutput.
        :type rule_set: CreateMatchmakingRuleSetOutputRuleSet
        """
        if rule_set is None:
            raise ValueError("Invalid value for `rule_set`, must not be `None`")

        self._rule_set = rule_set
