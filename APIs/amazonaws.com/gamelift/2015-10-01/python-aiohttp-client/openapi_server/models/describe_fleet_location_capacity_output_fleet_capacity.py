# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ec2_instance_counts import EC2InstanceCounts
from openapi_server.models.ec2_instance_type import EC2InstanceType
from openapi_server import util


class DescribeFleetLocationCapacityOutputFleetCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, fleet_arn: str=None, instance_type: EC2InstanceType=None, instance_counts: EC2InstanceCounts=None, location: str=None):
        """DescribeFleetLocationCapacityOutputFleetCapacity - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :param fleet_arn: The fleet_arn of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :param instance_type: The instance_type of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :param instance_counts: The instance_counts of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :param location: The location of this DescribeFleetLocationCapacityOutputFleetCapacity.
        """
        self.openapi_types = {
            'fleet_id': str,
            'fleet_arn': str,
            'instance_type': EC2InstanceType,
            'instance_counts': EC2InstanceCounts,
            'location': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'fleet_arn': 'FleetArn',
            'instance_type': 'InstanceType',
            'instance_counts': 'InstanceCounts',
            'location': 'Location'
        }

        self._fleet_id = fleet_id
        self._fleet_arn = fleet_arn
        self._instance_type = instance_type
        self._instance_counts = instance_counts
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFleetLocationCapacityOutputFleetCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFleetLocationCapacityOutput_FleetCapacity of this DescribeFleetLocationCapacityOutputFleetCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :return: The fleet_id of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :param fleet_id: The fleet_id of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :type fleet_id: str
        """

        self._fleet_id = fleet_id

    @property
    def fleet_arn(self):
        """Gets the fleet_arn of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :return: The fleet_arn of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :rtype: str
        """
        return self._fleet_arn

    @fleet_arn.setter
    def fleet_arn(self, fleet_arn):
        """Sets the fleet_arn of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :param fleet_arn: The fleet_arn of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :type fleet_arn: str
        """

        self._fleet_arn = fleet_arn

    @property
    def instance_type(self):
        """Gets the instance_type of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :return: The instance_type of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :rtype: EC2InstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :param instance_type: The instance_type of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :type instance_type: EC2InstanceType
        """

        self._instance_type = instance_type

    @property
    def instance_counts(self):
        """Gets the instance_counts of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :return: The instance_counts of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :rtype: EC2InstanceCounts
        """
        return self._instance_counts

    @instance_counts.setter
    def instance_counts(self, instance_counts):
        """Sets the instance_counts of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :param instance_counts: The instance_counts of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :type instance_counts: EC2InstanceCounts
        """

        self._instance_counts = instance_counts

    @property
    def location(self):
        """Gets the location of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :return: The location of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DescribeFleetLocationCapacityOutputFleetCapacity.


        :param location: The location of this DescribeFleetLocationCapacityOutputFleetCapacity.
        :type location: str
        """

        self._location = location
