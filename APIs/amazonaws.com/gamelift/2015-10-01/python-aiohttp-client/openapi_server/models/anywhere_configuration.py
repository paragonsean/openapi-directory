# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnywhereConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: str=None):
        """AnywhereConfiguration - a model defined in OpenAPI

        :param cost: The cost of this AnywhereConfiguration.
        """
        self.openapi_types = {
            'cost': str
        }

        self.attribute_map = {
            'cost': 'Cost'
        }

        self._cost = cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnywhereConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnywhereConfiguration of this AnywhereConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this AnywhereConfiguration.


        :return: The cost of this AnywhereConfiguration.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AnywhereConfiguration.


        :param cost: The cost of this AnywhereConfiguration.
        :type cost: str
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost
