# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePlayerSessionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_session_id: str=None, player_ids: List=None, player_data_map: Dict=None):
        """CreatePlayerSessionsInput - a model defined in OpenAPI

        :param game_session_id: The game_session_id of this CreatePlayerSessionsInput.
        :param player_ids: The player_ids of this CreatePlayerSessionsInput.
        :param player_data_map: The player_data_map of this CreatePlayerSessionsInput.
        """
        self.openapi_types = {
            'game_session_id': str,
            'player_ids': List,
            'player_data_map': Dict
        }

        self.attribute_map = {
            'game_session_id': 'GameSessionId',
            'player_ids': 'PlayerIds',
            'player_data_map': 'PlayerDataMap'
        }

        self._game_session_id = game_session_id
        self._player_ids = player_ids
        self._player_data_map = player_data_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePlayerSessionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePlayerSessionsInput of this CreatePlayerSessionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_session_id(self):
        """Gets the game_session_id of this CreatePlayerSessionsInput.


        :return: The game_session_id of this CreatePlayerSessionsInput.
        :rtype: str
        """
        return self._game_session_id

    @game_session_id.setter
    def game_session_id(self, game_session_id):
        """Sets the game_session_id of this CreatePlayerSessionsInput.


        :param game_session_id: The game_session_id of this CreatePlayerSessionsInput.
        :type game_session_id: str
        """
        if game_session_id is None:
            raise ValueError("Invalid value for `game_session_id`, must not be `None`")

        self._game_session_id = game_session_id

    @property
    def player_ids(self):
        """Gets the player_ids of this CreatePlayerSessionsInput.


        :return: The player_ids of this CreatePlayerSessionsInput.
        :rtype: List
        """
        return self._player_ids

    @player_ids.setter
    def player_ids(self, player_ids):
        """Sets the player_ids of this CreatePlayerSessionsInput.


        :param player_ids: The player_ids of this CreatePlayerSessionsInput.
        :type player_ids: List
        """
        if player_ids is None:
            raise ValueError("Invalid value for `player_ids`, must not be `None`")

        self._player_ids = player_ids

    @property
    def player_data_map(self):
        """Gets the player_data_map of this CreatePlayerSessionsInput.


        :return: The player_data_map of this CreatePlayerSessionsInput.
        :rtype: Dict
        """
        return self._player_data_map

    @player_data_map.setter
    def player_data_map(self, player_data_map):
        """Sets the player_data_map of this CreatePlayerSessionsInput.


        :param player_data_map: The player_data_map of this CreatePlayerSessionsInput.
        :type player_data_map: Dict
        """

        self._player_data_map = player_data_map
