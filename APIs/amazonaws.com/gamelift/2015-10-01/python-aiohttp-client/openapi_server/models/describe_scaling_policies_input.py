# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scaling_status_type import ScalingStatusType
from openapi_server import util


class DescribeScalingPoliciesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, status_filter: ScalingStatusType=None, limit: int=None, next_token: str=None, location: str=None):
        """DescribeScalingPoliciesInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this DescribeScalingPoliciesInput.
        :param status_filter: The status_filter of this DescribeScalingPoliciesInput.
        :param limit: The limit of this DescribeScalingPoliciesInput.
        :param next_token: The next_token of this DescribeScalingPoliciesInput.
        :param location: The location of this DescribeScalingPoliciesInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'status_filter': ScalingStatusType,
            'limit': int,
            'next_token': str,
            'location': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'status_filter': 'StatusFilter',
            'limit': 'Limit',
            'next_token': 'NextToken',
            'location': 'Location'
        }

        self._fleet_id = fleet_id
        self._status_filter = status_filter
        self._limit = limit
        self._next_token = next_token
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeScalingPoliciesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeScalingPoliciesInput of this DescribeScalingPoliciesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this DescribeScalingPoliciesInput.


        :return: The fleet_id of this DescribeScalingPoliciesInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this DescribeScalingPoliciesInput.


        :param fleet_id: The fleet_id of this DescribeScalingPoliciesInput.
        :type fleet_id: str
        """
        if fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")

        self._fleet_id = fleet_id

    @property
    def status_filter(self):
        """Gets the status_filter of this DescribeScalingPoliciesInput.


        :return: The status_filter of this DescribeScalingPoliciesInput.
        :rtype: ScalingStatusType
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """Sets the status_filter of this DescribeScalingPoliciesInput.


        :param status_filter: The status_filter of this DescribeScalingPoliciesInput.
        :type status_filter: ScalingStatusType
        """

        self._status_filter = status_filter

    @property
    def limit(self):
        """Gets the limit of this DescribeScalingPoliciesInput.


        :return: The limit of this DescribeScalingPoliciesInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeScalingPoliciesInput.


        :param limit: The limit of this DescribeScalingPoliciesInput.
        :type limit: int
        """

        self._limit = limit

    @property
    def next_token(self):
        """Gets the next_token of this DescribeScalingPoliciesInput.


        :return: The next_token of this DescribeScalingPoliciesInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeScalingPoliciesInput.


        :param next_token: The next_token of this DescribeScalingPoliciesInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def location(self):
        """Gets the location of this DescribeScalingPoliciesInput.


        :return: The location of this DescribeScalingPoliciesInput.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DescribeScalingPoliciesInput.


        :param location: The location of this DescribeScalingPoliciesInput.
        :type location: str
        """

        self._location = location
