# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acceptance_type import AcceptanceType
from openapi_server import util


class AcceptMatchInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ticket_id: str=None, player_ids: List=None, acceptance_type: AcceptanceType=None):
        """AcceptMatchInput - a model defined in OpenAPI

        :param ticket_id: The ticket_id of this AcceptMatchInput.
        :param player_ids: The player_ids of this AcceptMatchInput.
        :param acceptance_type: The acceptance_type of this AcceptMatchInput.
        """
        self.openapi_types = {
            'ticket_id': str,
            'player_ids': List,
            'acceptance_type': AcceptanceType
        }

        self.attribute_map = {
            'ticket_id': 'TicketId',
            'player_ids': 'PlayerIds',
            'acceptance_type': 'AcceptanceType'
        }

        self._ticket_id = ticket_id
        self._player_ids = player_ids
        self._acceptance_type = acceptance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptMatchInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptMatchInput of this AcceptMatchInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ticket_id(self):
        """Gets the ticket_id of this AcceptMatchInput.


        :return: The ticket_id of this AcceptMatchInput.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this AcceptMatchInput.


        :param ticket_id: The ticket_id of this AcceptMatchInput.
        :type ticket_id: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")

        self._ticket_id = ticket_id

    @property
    def player_ids(self):
        """Gets the player_ids of this AcceptMatchInput.


        :return: The player_ids of this AcceptMatchInput.
        :rtype: List
        """
        return self._player_ids

    @player_ids.setter
    def player_ids(self, player_ids):
        """Sets the player_ids of this AcceptMatchInput.


        :param player_ids: The player_ids of this AcceptMatchInput.
        :type player_ids: List
        """
        if player_ids is None:
            raise ValueError("Invalid value for `player_ids`, must not be `None`")

        self._player_ids = player_ids

    @property
    def acceptance_type(self):
        """Gets the acceptance_type of this AcceptMatchInput.


        :return: The acceptance_type of this AcceptMatchInput.
        :rtype: AcceptanceType
        """
        return self._acceptance_type

    @acceptance_type.setter
    def acceptance_type(self, acceptance_type):
        """Sets the acceptance_type of this AcceptMatchInput.


        :param acceptance_type: The acceptance_type of this AcceptMatchInput.
        :type acceptance_type: AcceptanceType
        """
        if acceptance_type is None:
            raise ValueError("Invalid value for `acceptance_type`, must not be `None`")

        self._acceptance_type = acceptance_type
