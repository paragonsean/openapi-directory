# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateVpcPeeringConnectionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, peer_vpc_aws_account_id: str=None, peer_vpc_id: str=None):
        """CreateVpcPeeringConnectionInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this CreateVpcPeeringConnectionInput.
        :param peer_vpc_aws_account_id: The peer_vpc_aws_account_id of this CreateVpcPeeringConnectionInput.
        :param peer_vpc_id: The peer_vpc_id of this CreateVpcPeeringConnectionInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'peer_vpc_aws_account_id': str,
            'peer_vpc_id': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'peer_vpc_aws_account_id': 'PeerVpcAwsAccountId',
            'peer_vpc_id': 'PeerVpcId'
        }

        self._fleet_id = fleet_id
        self._peer_vpc_aws_account_id = peer_vpc_aws_account_id
        self._peer_vpc_id = peer_vpc_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVpcPeeringConnectionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVpcPeeringConnectionInput of this CreateVpcPeeringConnectionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this CreateVpcPeeringConnectionInput.


        :return: The fleet_id of this CreateVpcPeeringConnectionInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this CreateVpcPeeringConnectionInput.


        :param fleet_id: The fleet_id of this CreateVpcPeeringConnectionInput.
        :type fleet_id: str
        """
        if fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")

        self._fleet_id = fleet_id

    @property
    def peer_vpc_aws_account_id(self):
        """Gets the peer_vpc_aws_account_id of this CreateVpcPeeringConnectionInput.


        :return: The peer_vpc_aws_account_id of this CreateVpcPeeringConnectionInput.
        :rtype: str
        """
        return self._peer_vpc_aws_account_id

    @peer_vpc_aws_account_id.setter
    def peer_vpc_aws_account_id(self, peer_vpc_aws_account_id):
        """Sets the peer_vpc_aws_account_id of this CreateVpcPeeringConnectionInput.


        :param peer_vpc_aws_account_id: The peer_vpc_aws_account_id of this CreateVpcPeeringConnectionInput.
        :type peer_vpc_aws_account_id: str
        """
        if peer_vpc_aws_account_id is None:
            raise ValueError("Invalid value for `peer_vpc_aws_account_id`, must not be `None`")

        self._peer_vpc_aws_account_id = peer_vpc_aws_account_id

    @property
    def peer_vpc_id(self):
        """Gets the peer_vpc_id of this CreateVpcPeeringConnectionInput.


        :return: The peer_vpc_id of this CreateVpcPeeringConnectionInput.
        :rtype: str
        """
        return self._peer_vpc_id

    @peer_vpc_id.setter
    def peer_vpc_id(self, peer_vpc_id):
        """Sets the peer_vpc_id of this CreateVpcPeeringConnectionInput.


        :param peer_vpc_id: The peer_vpc_id of this CreateVpcPeeringConnectionInput.
        :type peer_vpc_id: str
        """
        if peer_vpc_id is None:
            raise ValueError("Invalid value for `peer_vpc_id`, must not be `None`")

        self._peer_vpc_id = peer_vpc_id
