# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterComputeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, compute_name: str=None, certificate_path: str=None, dns_name: str=None, ip_address: str=None, location: str=None):
        """RegisterComputeInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this RegisterComputeInput.
        :param compute_name: The compute_name of this RegisterComputeInput.
        :param certificate_path: The certificate_path of this RegisterComputeInput.
        :param dns_name: The dns_name of this RegisterComputeInput.
        :param ip_address: The ip_address of this RegisterComputeInput.
        :param location: The location of this RegisterComputeInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'compute_name': str,
            'certificate_path': str,
            'dns_name': str,
            'ip_address': str,
            'location': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'compute_name': 'ComputeName',
            'certificate_path': 'CertificatePath',
            'dns_name': 'DnsName',
            'ip_address': 'IpAddress',
            'location': 'Location'
        }

        self._fleet_id = fleet_id
        self._compute_name = compute_name
        self._certificate_path = certificate_path
        self._dns_name = dns_name
        self._ip_address = ip_address
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterComputeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterComputeInput of this RegisterComputeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this RegisterComputeInput.


        :return: The fleet_id of this RegisterComputeInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this RegisterComputeInput.


        :param fleet_id: The fleet_id of this RegisterComputeInput.
        :type fleet_id: str
        """
        if fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")

        self._fleet_id = fleet_id

    @property
    def compute_name(self):
        """Gets the compute_name of this RegisterComputeInput.


        :return: The compute_name of this RegisterComputeInput.
        :rtype: str
        """
        return self._compute_name

    @compute_name.setter
    def compute_name(self, compute_name):
        """Sets the compute_name of this RegisterComputeInput.


        :param compute_name: The compute_name of this RegisterComputeInput.
        :type compute_name: str
        """
        if compute_name is None:
            raise ValueError("Invalid value for `compute_name`, must not be `None`")

        self._compute_name = compute_name

    @property
    def certificate_path(self):
        """Gets the certificate_path of this RegisterComputeInput.


        :return: The certificate_path of this RegisterComputeInput.
        :rtype: str
        """
        return self._certificate_path

    @certificate_path.setter
    def certificate_path(self, certificate_path):
        """Sets the certificate_path of this RegisterComputeInput.


        :param certificate_path: The certificate_path of this RegisterComputeInput.
        :type certificate_path: str
        """

        self._certificate_path = certificate_path

    @property
    def dns_name(self):
        """Gets the dns_name of this RegisterComputeInput.


        :return: The dns_name of this RegisterComputeInput.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this RegisterComputeInput.


        :param dns_name: The dns_name of this RegisterComputeInput.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def ip_address(self):
        """Gets the ip_address of this RegisterComputeInput.


        :return: The ip_address of this RegisterComputeInput.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this RegisterComputeInput.


        :param ip_address: The ip_address of this RegisterComputeInput.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this RegisterComputeInput.


        :return: The location of this RegisterComputeInput.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RegisterComputeInput.


        :param location: The location of this RegisterComputeInput.
        :type location: str
        """

        self._location = location
