# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backfill_mode import BackfillMode
from openapi_server.models.flex_match_mode import FlexMatchMode
from openapi_server import util


class UpdateMatchmakingConfigurationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, game_session_queue_arns: List=None, request_timeout_seconds: int=None, acceptance_timeout_seconds: int=None, acceptance_required: bool=None, rule_set_name: str=None, notification_target: str=None, additional_player_count: int=None, custom_event_data: str=None, game_properties: List=None, game_session_data: str=None, backfill_mode: BackfillMode=None, flex_match_mode: FlexMatchMode=None):
        """UpdateMatchmakingConfigurationInput - a model defined in OpenAPI

        :param name: The name of this UpdateMatchmakingConfigurationInput.
        :param description: The description of this UpdateMatchmakingConfigurationInput.
        :param game_session_queue_arns: The game_session_queue_arns of this UpdateMatchmakingConfigurationInput.
        :param request_timeout_seconds: The request_timeout_seconds of this UpdateMatchmakingConfigurationInput.
        :param acceptance_timeout_seconds: The acceptance_timeout_seconds of this UpdateMatchmakingConfigurationInput.
        :param acceptance_required: The acceptance_required of this UpdateMatchmakingConfigurationInput.
        :param rule_set_name: The rule_set_name of this UpdateMatchmakingConfigurationInput.
        :param notification_target: The notification_target of this UpdateMatchmakingConfigurationInput.
        :param additional_player_count: The additional_player_count of this UpdateMatchmakingConfigurationInput.
        :param custom_event_data: The custom_event_data of this UpdateMatchmakingConfigurationInput.
        :param game_properties: The game_properties of this UpdateMatchmakingConfigurationInput.
        :param game_session_data: The game_session_data of this UpdateMatchmakingConfigurationInput.
        :param backfill_mode: The backfill_mode of this UpdateMatchmakingConfigurationInput.
        :param flex_match_mode: The flex_match_mode of this UpdateMatchmakingConfigurationInput.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'game_session_queue_arns': List,
            'request_timeout_seconds': int,
            'acceptance_timeout_seconds': int,
            'acceptance_required': bool,
            'rule_set_name': str,
            'notification_target': str,
            'additional_player_count': int,
            'custom_event_data': str,
            'game_properties': List,
            'game_session_data': str,
            'backfill_mode': BackfillMode,
            'flex_match_mode': FlexMatchMode
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'game_session_queue_arns': 'GameSessionQueueArns',
            'request_timeout_seconds': 'RequestTimeoutSeconds',
            'acceptance_timeout_seconds': 'AcceptanceTimeoutSeconds',
            'acceptance_required': 'AcceptanceRequired',
            'rule_set_name': 'RuleSetName',
            'notification_target': 'NotificationTarget',
            'additional_player_count': 'AdditionalPlayerCount',
            'custom_event_data': 'CustomEventData',
            'game_properties': 'GameProperties',
            'game_session_data': 'GameSessionData',
            'backfill_mode': 'BackfillMode',
            'flex_match_mode': 'FlexMatchMode'
        }

        self._name = name
        self._description = description
        self._game_session_queue_arns = game_session_queue_arns
        self._request_timeout_seconds = request_timeout_seconds
        self._acceptance_timeout_seconds = acceptance_timeout_seconds
        self._acceptance_required = acceptance_required
        self._rule_set_name = rule_set_name
        self._notification_target = notification_target
        self._additional_player_count = additional_player_count
        self._custom_event_data = custom_event_data
        self._game_properties = game_properties
        self._game_session_data = game_session_data
        self._backfill_mode = backfill_mode
        self._flex_match_mode = flex_match_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMatchmakingConfigurationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMatchmakingConfigurationInput of this UpdateMatchmakingConfigurationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateMatchmakingConfigurationInput.


        :return: The name of this UpdateMatchmakingConfigurationInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateMatchmakingConfigurationInput.


        :param name: The name of this UpdateMatchmakingConfigurationInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateMatchmakingConfigurationInput.


        :return: The description of this UpdateMatchmakingConfigurationInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateMatchmakingConfigurationInput.


        :param description: The description of this UpdateMatchmakingConfigurationInput.
        :type description: str
        """

        self._description = description

    @property
    def game_session_queue_arns(self):
        """Gets the game_session_queue_arns of this UpdateMatchmakingConfigurationInput.


        :return: The game_session_queue_arns of this UpdateMatchmakingConfigurationInput.
        :rtype: List
        """
        return self._game_session_queue_arns

    @game_session_queue_arns.setter
    def game_session_queue_arns(self, game_session_queue_arns):
        """Sets the game_session_queue_arns of this UpdateMatchmakingConfigurationInput.


        :param game_session_queue_arns: The game_session_queue_arns of this UpdateMatchmakingConfigurationInput.
        :type game_session_queue_arns: List
        """

        self._game_session_queue_arns = game_session_queue_arns

    @property
    def request_timeout_seconds(self):
        """Gets the request_timeout_seconds of this UpdateMatchmakingConfigurationInput.


        :return: The request_timeout_seconds of this UpdateMatchmakingConfigurationInput.
        :rtype: int
        """
        return self._request_timeout_seconds

    @request_timeout_seconds.setter
    def request_timeout_seconds(self, request_timeout_seconds):
        """Sets the request_timeout_seconds of this UpdateMatchmakingConfigurationInput.


        :param request_timeout_seconds: The request_timeout_seconds of this UpdateMatchmakingConfigurationInput.
        :type request_timeout_seconds: int
        """

        self._request_timeout_seconds = request_timeout_seconds

    @property
    def acceptance_timeout_seconds(self):
        """Gets the acceptance_timeout_seconds of this UpdateMatchmakingConfigurationInput.


        :return: The acceptance_timeout_seconds of this UpdateMatchmakingConfigurationInput.
        :rtype: int
        """
        return self._acceptance_timeout_seconds

    @acceptance_timeout_seconds.setter
    def acceptance_timeout_seconds(self, acceptance_timeout_seconds):
        """Sets the acceptance_timeout_seconds of this UpdateMatchmakingConfigurationInput.


        :param acceptance_timeout_seconds: The acceptance_timeout_seconds of this UpdateMatchmakingConfigurationInput.
        :type acceptance_timeout_seconds: int
        """

        self._acceptance_timeout_seconds = acceptance_timeout_seconds

    @property
    def acceptance_required(self):
        """Gets the acceptance_required of this UpdateMatchmakingConfigurationInput.


        :return: The acceptance_required of this UpdateMatchmakingConfigurationInput.
        :rtype: bool
        """
        return self._acceptance_required

    @acceptance_required.setter
    def acceptance_required(self, acceptance_required):
        """Sets the acceptance_required of this UpdateMatchmakingConfigurationInput.


        :param acceptance_required: The acceptance_required of this UpdateMatchmakingConfigurationInput.
        :type acceptance_required: bool
        """

        self._acceptance_required = acceptance_required

    @property
    def rule_set_name(self):
        """Gets the rule_set_name of this UpdateMatchmakingConfigurationInput.


        :return: The rule_set_name of this UpdateMatchmakingConfigurationInput.
        :rtype: str
        """
        return self._rule_set_name

    @rule_set_name.setter
    def rule_set_name(self, rule_set_name):
        """Sets the rule_set_name of this UpdateMatchmakingConfigurationInput.


        :param rule_set_name: The rule_set_name of this UpdateMatchmakingConfigurationInput.
        :type rule_set_name: str
        """

        self._rule_set_name = rule_set_name

    @property
    def notification_target(self):
        """Gets the notification_target of this UpdateMatchmakingConfigurationInput.


        :return: The notification_target of this UpdateMatchmakingConfigurationInput.
        :rtype: str
        """
        return self._notification_target

    @notification_target.setter
    def notification_target(self, notification_target):
        """Sets the notification_target of this UpdateMatchmakingConfigurationInput.


        :param notification_target: The notification_target of this UpdateMatchmakingConfigurationInput.
        :type notification_target: str
        """

        self._notification_target = notification_target

    @property
    def additional_player_count(self):
        """Gets the additional_player_count of this UpdateMatchmakingConfigurationInput.


        :return: The additional_player_count of this UpdateMatchmakingConfigurationInput.
        :rtype: int
        """
        return self._additional_player_count

    @additional_player_count.setter
    def additional_player_count(self, additional_player_count):
        """Sets the additional_player_count of this UpdateMatchmakingConfigurationInput.


        :param additional_player_count: The additional_player_count of this UpdateMatchmakingConfigurationInput.
        :type additional_player_count: int
        """

        self._additional_player_count = additional_player_count

    @property
    def custom_event_data(self):
        """Gets the custom_event_data of this UpdateMatchmakingConfigurationInput.


        :return: The custom_event_data of this UpdateMatchmakingConfigurationInput.
        :rtype: str
        """
        return self._custom_event_data

    @custom_event_data.setter
    def custom_event_data(self, custom_event_data):
        """Sets the custom_event_data of this UpdateMatchmakingConfigurationInput.


        :param custom_event_data: The custom_event_data of this UpdateMatchmakingConfigurationInput.
        :type custom_event_data: str
        """

        self._custom_event_data = custom_event_data

    @property
    def game_properties(self):
        """Gets the game_properties of this UpdateMatchmakingConfigurationInput.


        :return: The game_properties of this UpdateMatchmakingConfigurationInput.
        :rtype: List
        """
        return self._game_properties

    @game_properties.setter
    def game_properties(self, game_properties):
        """Sets the game_properties of this UpdateMatchmakingConfigurationInput.


        :param game_properties: The game_properties of this UpdateMatchmakingConfigurationInput.
        :type game_properties: List
        """

        self._game_properties = game_properties

    @property
    def game_session_data(self):
        """Gets the game_session_data of this UpdateMatchmakingConfigurationInput.


        :return: The game_session_data of this UpdateMatchmakingConfigurationInput.
        :rtype: str
        """
        return self._game_session_data

    @game_session_data.setter
    def game_session_data(self, game_session_data):
        """Sets the game_session_data of this UpdateMatchmakingConfigurationInput.


        :param game_session_data: The game_session_data of this UpdateMatchmakingConfigurationInput.
        :type game_session_data: str
        """

        self._game_session_data = game_session_data

    @property
    def backfill_mode(self):
        """Gets the backfill_mode of this UpdateMatchmakingConfigurationInput.


        :return: The backfill_mode of this UpdateMatchmakingConfigurationInput.
        :rtype: BackfillMode
        """
        return self._backfill_mode

    @backfill_mode.setter
    def backfill_mode(self, backfill_mode):
        """Sets the backfill_mode of this UpdateMatchmakingConfigurationInput.


        :param backfill_mode: The backfill_mode of this UpdateMatchmakingConfigurationInput.
        :type backfill_mode: BackfillMode
        """

        self._backfill_mode = backfill_mode

    @property
    def flex_match_mode(self):
        """Gets the flex_match_mode of this UpdateMatchmakingConfigurationInput.


        :return: The flex_match_mode of this UpdateMatchmakingConfigurationInput.
        :rtype: FlexMatchMode
        """
        return self._flex_match_mode

    @flex_match_mode.setter
    def flex_match_mode(self, flex_match_mode):
        """Sets the flex_match_mode of this UpdateMatchmakingConfigurationInput.


        :param flex_match_mode: The flex_match_mode of this UpdateMatchmakingConfigurationInput.
        :type flex_match_mode: FlexMatchMode
        """

        self._flex_match_mode = flex_match_mode
