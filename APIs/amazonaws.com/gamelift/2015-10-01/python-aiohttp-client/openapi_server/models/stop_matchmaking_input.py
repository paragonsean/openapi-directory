# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StopMatchmakingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ticket_id: str=None):
        """StopMatchmakingInput - a model defined in OpenAPI

        :param ticket_id: The ticket_id of this StopMatchmakingInput.
        """
        self.openapi_types = {
            'ticket_id': str
        }

        self.attribute_map = {
            'ticket_id': 'TicketId'
        }

        self._ticket_id = ticket_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopMatchmakingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopMatchmakingInput of this StopMatchmakingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ticket_id(self):
        """Gets the ticket_id of this StopMatchmakingInput.


        :return: The ticket_id of this StopMatchmakingInput.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this StopMatchmakingInput.


        :param ticket_id: The ticket_id of this StopMatchmakingInput.
        :type ticket_id: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")

        self._ticket_id = ticket_id
