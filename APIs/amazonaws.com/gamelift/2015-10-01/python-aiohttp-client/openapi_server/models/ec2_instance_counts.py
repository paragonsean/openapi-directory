# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EC2InstanceCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired: int=None, minimum: int=None, maximum: int=None, pending: int=None, active: int=None, idle: int=None, terminating: int=None):
        """EC2InstanceCounts - a model defined in OpenAPI

        :param desired: The desired of this EC2InstanceCounts.
        :param minimum: The minimum of this EC2InstanceCounts.
        :param maximum: The maximum of this EC2InstanceCounts.
        :param pending: The pending of this EC2InstanceCounts.
        :param active: The active of this EC2InstanceCounts.
        :param idle: The idle of this EC2InstanceCounts.
        :param terminating: The terminating of this EC2InstanceCounts.
        """
        self.openapi_types = {
            'desired': int,
            'minimum': int,
            'maximum': int,
            'pending': int,
            'active': int,
            'idle': int,
            'terminating': int
        }

        self.attribute_map = {
            'desired': 'DESIRED',
            'minimum': 'MINIMUM',
            'maximum': 'MAXIMUM',
            'pending': 'PENDING',
            'active': 'ACTIVE',
            'idle': 'IDLE',
            'terminating': 'TERMINATING'
        }

        self._desired = desired
        self._minimum = minimum
        self._maximum = maximum
        self._pending = pending
        self._active = active
        self._idle = idle
        self._terminating = terminating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EC2InstanceCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EC2InstanceCounts of this EC2InstanceCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired(self):
        """Gets the desired of this EC2InstanceCounts.


        :return: The desired of this EC2InstanceCounts.
        :rtype: int
        """
        return self._desired

    @desired.setter
    def desired(self, desired):
        """Sets the desired of this EC2InstanceCounts.


        :param desired: The desired of this EC2InstanceCounts.
        :type desired: int
        """

        self._desired = desired

    @property
    def minimum(self):
        """Gets the minimum of this EC2InstanceCounts.


        :return: The minimum of this EC2InstanceCounts.
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this EC2InstanceCounts.


        :param minimum: The minimum of this EC2InstanceCounts.
        :type minimum: int
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this EC2InstanceCounts.


        :return: The maximum of this EC2InstanceCounts.
        :rtype: int
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this EC2InstanceCounts.


        :param maximum: The maximum of this EC2InstanceCounts.
        :type maximum: int
        """

        self._maximum = maximum

    @property
    def pending(self):
        """Gets the pending of this EC2InstanceCounts.


        :return: The pending of this EC2InstanceCounts.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this EC2InstanceCounts.


        :param pending: The pending of this EC2InstanceCounts.
        :type pending: int
        """

        self._pending = pending

    @property
    def active(self):
        """Gets the active of this EC2InstanceCounts.


        :return: The active of this EC2InstanceCounts.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EC2InstanceCounts.


        :param active: The active of this EC2InstanceCounts.
        :type active: int
        """

        self._active = active

    @property
    def idle(self):
        """Gets the idle of this EC2InstanceCounts.


        :return: The idle of this EC2InstanceCounts.
        :rtype: int
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this EC2InstanceCounts.


        :param idle: The idle of this EC2InstanceCounts.
        :type idle: int
        """

        self._idle = idle

    @property
    def terminating(self):
        """Gets the terminating of this EC2InstanceCounts.


        :return: The terminating of this EC2InstanceCounts.
        :rtype: int
        """
        return self._terminating

    @terminating.setter
    def terminating(self, terminating):
        """Sets the terminating of this EC2InstanceCounts.


        :param terminating: The terminating of this EC2InstanceCounts.
        :type terminating: int
        """

        self._terminating = terminating
