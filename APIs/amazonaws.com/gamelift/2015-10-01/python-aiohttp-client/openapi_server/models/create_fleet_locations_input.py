# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateFleetLocationsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, locations: List=None):
        """CreateFleetLocationsInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this CreateFleetLocationsInput.
        :param locations: The locations of this CreateFleetLocationsInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'locations': List
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'locations': 'Locations'
        }

        self._fleet_id = fleet_id
        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFleetLocationsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFleetLocationsInput of this CreateFleetLocationsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this CreateFleetLocationsInput.


        :return: The fleet_id of this CreateFleetLocationsInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this CreateFleetLocationsInput.


        :param fleet_id: The fleet_id of this CreateFleetLocationsInput.
        :type fleet_id: str
        """
        if fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")

        self._fleet_id = fleet_id

    @property
    def locations(self):
        """Gets the locations of this CreateFleetLocationsInput.


        :return: The locations of this CreateFleetLocationsInput.
        :rtype: List
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CreateFleetLocationsInput.


        :param locations: The locations of this CreateFleetLocationsInput.
        :type locations: List
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations
