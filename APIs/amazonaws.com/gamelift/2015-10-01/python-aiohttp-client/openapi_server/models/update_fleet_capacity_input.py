# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateFleetCapacityInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_id: str=None, desired_instances: int=None, min_size: int=None, max_size: int=None, location: str=None):
        """UpdateFleetCapacityInput - a model defined in OpenAPI

        :param fleet_id: The fleet_id of this UpdateFleetCapacityInput.
        :param desired_instances: The desired_instances of this UpdateFleetCapacityInput.
        :param min_size: The min_size of this UpdateFleetCapacityInput.
        :param max_size: The max_size of this UpdateFleetCapacityInput.
        :param location: The location of this UpdateFleetCapacityInput.
        """
        self.openapi_types = {
            'fleet_id': str,
            'desired_instances': int,
            'min_size': int,
            'max_size': int,
            'location': str
        }

        self.attribute_map = {
            'fleet_id': 'FleetId',
            'desired_instances': 'DesiredInstances',
            'min_size': 'MinSize',
            'max_size': 'MaxSize',
            'location': 'Location'
        }

        self._fleet_id = fleet_id
        self._desired_instances = desired_instances
        self._min_size = min_size
        self._max_size = max_size
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFleetCapacityInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFleetCapacityInput of this UpdateFleetCapacityInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_id(self):
        """Gets the fleet_id of this UpdateFleetCapacityInput.


        :return: The fleet_id of this UpdateFleetCapacityInput.
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this UpdateFleetCapacityInput.


        :param fleet_id: The fleet_id of this UpdateFleetCapacityInput.
        :type fleet_id: str
        """
        if fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")

        self._fleet_id = fleet_id

    @property
    def desired_instances(self):
        """Gets the desired_instances of this UpdateFleetCapacityInput.


        :return: The desired_instances of this UpdateFleetCapacityInput.
        :rtype: int
        """
        return self._desired_instances

    @desired_instances.setter
    def desired_instances(self, desired_instances):
        """Sets the desired_instances of this UpdateFleetCapacityInput.


        :param desired_instances: The desired_instances of this UpdateFleetCapacityInput.
        :type desired_instances: int
        """

        self._desired_instances = desired_instances

    @property
    def min_size(self):
        """Gets the min_size of this UpdateFleetCapacityInput.


        :return: The min_size of this UpdateFleetCapacityInput.
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this UpdateFleetCapacityInput.


        :param min_size: The min_size of this UpdateFleetCapacityInput.
        :type min_size: int
        """

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this UpdateFleetCapacityInput.


        :return: The max_size of this UpdateFleetCapacityInput.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this UpdateFleetCapacityInput.


        :param max_size: The max_size of this UpdateFleetCapacityInput.
        :type max_size: int
        """

        self._max_size = max_size

    @property
    def location(self):
        """Gets the location of this UpdateFleetCapacityInput.


        :return: The location of this UpdateFleetCapacityInput.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UpdateFleetCapacityInput.


        :param location: The location of this UpdateFleetCapacityInput.
        :type location: str
        """

        self._location = location
