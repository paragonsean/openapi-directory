/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FargateProfileSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFargateProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFargateProfileRequest {
  public static final String SERIALIZED_NAME_FARGATE_PROFILE_NAME = "fargateProfileName";
  @SerializedName(SERIALIZED_NAME_FARGATE_PROFILE_NAME)
  private String fargateProfileName;

  public static final String SERIALIZED_NAME_POD_EXECUTION_ROLE_ARN = "podExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_POD_EXECUTION_ROLE_ARN)
  private String podExecutionRoleArn;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<String> subnets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTORS = "selectors";
  @SerializedName(SERIALIZED_NAME_SELECTORS)
  private List<FargateProfileSelector> selectors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateFargateProfileRequest() {
  }

  public CreateFargateProfileRequest fargateProfileName(String fargateProfileName) {
    this.fargateProfileName = fargateProfileName;
    return this;
  }

  /**
   * The name of the Fargate profile.
   * @return fargateProfileName
   */
  @javax.annotation.Nonnull
  public String getFargateProfileName() {
    return fargateProfileName;
  }

  public void setFargateProfileName(String fargateProfileName) {
    this.fargateProfileName = fargateProfileName;
  }


  public CreateFargateProfileRequest podExecutionRoleArn(String podExecutionRoleArn) {
    this.podExecutionRoleArn = podExecutionRoleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. The pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html\&quot;&gt;Pod Execution Role&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;.
   * @return podExecutionRoleArn
   */
  @javax.annotation.Nonnull
  public String getPodExecutionRoleArn() {
    return podExecutionRoleArn;
  }

  public void setPodExecutionRoleArn(String podExecutionRoleArn) {
    this.podExecutionRoleArn = podExecutionRoleArn;
  }


  public CreateFargateProfileRequest subnets(List<String> subnets) {
    this.subnets = subnets;
    return this;
  }

  public CreateFargateProfileRequest addSubnetsItem(String subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * The IDs of subnets to launch your pods into. At this time, pods running on Fargate are not assigned public IP addresses, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<String> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<String> subnets) {
    this.subnets = subnets;
  }


  public CreateFargateProfileRequest selectors(List<FargateProfileSelector> selectors) {
    this.selectors = selectors;
    return this;
  }

  public CreateFargateProfileRequest addSelectorsItem(FargateProfileSelector selectorsItem) {
    if (this.selectors == null) {
      this.selectors = new ArrayList<>();
    }
    this.selectors.add(selectorsItem);
    return this;
  }

  /**
   * The selectors to match for pods to use this Fargate profile. Each selector must have an associated namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.
   * @return selectors
   */
  @javax.annotation.Nullable
  public List<FargateProfileSelector> getSelectors() {
    return selectors;
  }

  public void setSelectors(List<FargateProfileSelector> selectors) {
    this.selectors = selectors;
  }


  public CreateFargateProfileRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateFargateProfileRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateFargateProfileRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The metadata to apply to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFargateProfileRequest createFargateProfileRequest = (CreateFargateProfileRequest) o;
    return Objects.equals(this.fargateProfileName, createFargateProfileRequest.fargateProfileName) &&
        Objects.equals(this.podExecutionRoleArn, createFargateProfileRequest.podExecutionRoleArn) &&
        Objects.equals(this.subnets, createFargateProfileRequest.subnets) &&
        Objects.equals(this.selectors, createFargateProfileRequest.selectors) &&
        Objects.equals(this.clientRequestToken, createFargateProfileRequest.clientRequestToken) &&
        Objects.equals(this.tags, createFargateProfileRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fargateProfileName, podExecutionRoleArn, subnets, selectors, clientRequestToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFargateProfileRequest {\n");
    sb.append("    fargateProfileName: ").append(toIndentedString(fargateProfileName)).append("\n");
    sb.append("    podExecutionRoleArn: ").append(toIndentedString(podExecutionRoleArn)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    selectors: ").append(toIndentedString(selectors)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fargateProfileName");
    openapiFields.add("podExecutionRoleArn");
    openapiFields.add("subnets");
    openapiFields.add("selectors");
    openapiFields.add("clientRequestToken");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fargateProfileName");
    openapiRequiredFields.add("podExecutionRoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFargateProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFargateProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFargateProfileRequest is not found in the empty JSON string", CreateFargateProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFargateProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFargateProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFargateProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("fargateProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fargateProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fargateProfileName").toString()));
      }
      if (!jsonObj.get("podExecutionRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podExecutionRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podExecutionRoleArn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull() && !jsonObj.get("subnets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
      }
      if (jsonObj.get("selectors") != null && !jsonObj.get("selectors").isJsonNull()) {
        JsonArray jsonArrayselectors = jsonObj.getAsJsonArray("selectors");
        if (jsonArrayselectors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectors` to be an array in the JSON string but got `%s`", jsonObj.get("selectors").toString()));
          }

          // validate the optional field `selectors` (array)
          for (int i = 0; i < jsonArrayselectors.size(); i++) {
            FargateProfileSelector.validateJsonElement(jsonArrayselectors.get(i));
          };
        }
      }
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFargateProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFargateProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFargateProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFargateProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFargateProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateFargateProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFargateProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFargateProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFargateProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateFargateProfileRequest
   */
  public static CreateFargateProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFargateProfileRequest.class);
  }

  /**
   * Convert an instance of CreateFargateProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

