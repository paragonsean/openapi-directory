/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddonInfoMarketplaceInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an add-on.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddonInfo {
  public static final String SERIALIZED_NAME_ADDON_NAME = "addonName";
  @SerializedName(SERIALIZED_NAME_ADDON_NAME)
  private String addonName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ADDON_VERSIONS = "addonVersions";
  @SerializedName(SERIALIZED_NAME_ADDON_VERSIONS)
  private List addonVersions;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_MARKETPLACE_INFORMATION = "marketplaceInformation";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_INFORMATION)
  private AddonInfoMarketplaceInformation marketplaceInformation;

  public AddonInfo() {
  }

  public AddonInfo addonName(String addonName) {
    this.addonName = addonName;
    return this;
  }

  /**
   * Get addonName
   * @return addonName
   */
  @javax.annotation.Nullable
  public String getAddonName() {
    return addonName;
  }

  public void setAddonName(String addonName) {
    this.addonName = addonName;
  }


  public AddonInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AddonInfo addonVersions(List addonVersions) {
    this.addonVersions = addonVersions;
    return this;
  }

  /**
   * Get addonVersions
   * @return addonVersions
   */
  @javax.annotation.Nullable
  public List getAddonVersions() {
    return addonVersions;
  }

  public void setAddonVersions(List addonVersions) {
    this.addonVersions = addonVersions;
  }


  public AddonInfo publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Get publisher
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public AddonInfo owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public AddonInfo marketplaceInformation(AddonInfoMarketplaceInformation marketplaceInformation) {
    this.marketplaceInformation = marketplaceInformation;
    return this;
  }

  /**
   * Get marketplaceInformation
   * @return marketplaceInformation
   */
  @javax.annotation.Nullable
  public AddonInfoMarketplaceInformation getMarketplaceInformation() {
    return marketplaceInformation;
  }

  public void setMarketplaceInformation(AddonInfoMarketplaceInformation marketplaceInformation) {
    this.marketplaceInformation = marketplaceInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddonInfo addonInfo = (AddonInfo) o;
    return Objects.equals(this.addonName, addonInfo.addonName) &&
        Objects.equals(this.type, addonInfo.type) &&
        Objects.equals(this.addonVersions, addonInfo.addonVersions) &&
        Objects.equals(this.publisher, addonInfo.publisher) &&
        Objects.equals(this.owner, addonInfo.owner) &&
        Objects.equals(this.marketplaceInformation, addonInfo.marketplaceInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonName, type, addonVersions, publisher, owner, marketplaceInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddonInfo {\n");
    sb.append("    addonName: ").append(toIndentedString(addonName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    addonVersions: ").append(toIndentedString(addonVersions)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    marketplaceInformation: ").append(toIndentedString(marketplaceInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addonName");
    openapiFields.add("type");
    openapiFields.add("addonVersions");
    openapiFields.add("publisher");
    openapiFields.add("owner");
    openapiFields.add("marketplaceInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddonInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddonInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddonInfo is not found in the empty JSON string", AddonInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddonInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddonInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addonName`
      if (jsonObj.get("addonName") != null && !jsonObj.get("addonName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("addonName"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `addonVersions`
      if (jsonObj.get("addonVersions") != null && !jsonObj.get("addonVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("addonVersions"));
      }
      // validate the optional field `publisher`
      if (jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("publisher"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `marketplaceInformation`
      if (jsonObj.get("marketplaceInformation") != null && !jsonObj.get("marketplaceInformation").isJsonNull()) {
        AddonInfoMarketplaceInformation.validateJsonElement(jsonObj.get("marketplaceInformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddonInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddonInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddonInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddonInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AddonInfo>() {
           @Override
           public void write(JsonWriter out, AddonInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddonInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddonInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddonInfo
   * @throws IOException if the JSON string is invalid with respect to AddonInfo
   */
  public static AddonInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddonInfo.class);
  }

  /**
   * Convert an instance of AddonInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

