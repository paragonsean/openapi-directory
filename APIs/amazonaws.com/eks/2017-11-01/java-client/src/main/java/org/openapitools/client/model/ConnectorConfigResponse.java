/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The full description of your connected cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorConfigResponse {
  public static final String SERIALIZED_NAME_ACTIVATION_ID = "activationId";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_ID)
  private String activationId;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE = "activationCode";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE)
  private String activationCode;

  public static final String SERIALIZED_NAME_ACTIVATION_EXPIRY = "activationExpiry";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_EXPIRY)
  private OffsetDateTime activationExpiry;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public ConnectorConfigResponse() {
  }

  public ConnectorConfigResponse activationId(String activationId) {
    this.activationId = activationId;
    return this;
  }

  /**
   * Get activationId
   * @return activationId
   */
  @javax.annotation.Nullable
  public String getActivationId() {
    return activationId;
  }

  public void setActivationId(String activationId) {
    this.activationId = activationId;
  }


  public ConnectorConfigResponse activationCode(String activationCode) {
    this.activationCode = activationCode;
    return this;
  }

  /**
   * Get activationCode
   * @return activationCode
   */
  @javax.annotation.Nullable
  public String getActivationCode() {
    return activationCode;
  }

  public void setActivationCode(String activationCode) {
    this.activationCode = activationCode;
  }


  public ConnectorConfigResponse activationExpiry(OffsetDateTime activationExpiry) {
    this.activationExpiry = activationExpiry;
    return this;
  }

  /**
   * Get activationExpiry
   * @return activationExpiry
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivationExpiry() {
    return activationExpiry;
  }

  public void setActivationExpiry(OffsetDateTime activationExpiry) {
    this.activationExpiry = activationExpiry;
  }


  public ConnectorConfigResponse provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public ConnectorConfigResponse roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorConfigResponse connectorConfigResponse = (ConnectorConfigResponse) o;
    return Objects.equals(this.activationId, connectorConfigResponse.activationId) &&
        Objects.equals(this.activationCode, connectorConfigResponse.activationCode) &&
        Objects.equals(this.activationExpiry, connectorConfigResponse.activationExpiry) &&
        Objects.equals(this.provider, connectorConfigResponse.provider) &&
        Objects.equals(this.roleArn, connectorConfigResponse.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationId, activationCode, activationExpiry, provider, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorConfigResponse {\n");
    sb.append("    activationId: ").append(toIndentedString(activationId)).append("\n");
    sb.append("    activationCode: ").append(toIndentedString(activationCode)).append("\n");
    sb.append("    activationExpiry: ").append(toIndentedString(activationExpiry)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationId");
    openapiFields.add("activationCode");
    openapiFields.add("activationExpiry");
    openapiFields.add("provider");
    openapiFields.add("roleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorConfigResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorConfigResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorConfigResponse is not found in the empty JSON string", ConnectorConfigResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorConfigResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorConfigResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activationId`
      if (jsonObj.get("activationId") != null && !jsonObj.get("activationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("activationId"));
      }
      // validate the optional field `activationCode`
      if (jsonObj.get("activationCode") != null && !jsonObj.get("activationCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("activationCode"));
      }
      // validate the optional field `activationExpiry`
      if (jsonObj.get("activationExpiry") != null && !jsonObj.get("activationExpiry").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("activationExpiry"));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("provider"));
      }
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorConfigResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorConfigResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorConfigResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorConfigResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorConfigResponse>() {
           @Override
           public void write(JsonWriter out, ConnectorConfigResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorConfigResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorConfigResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorConfigResponse
   * @throws IOException if the JSON string is invalid with respect to ConnectorConfigResponse
   */
  public static ConnectorConfigResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorConfigResponse.class);
  }

  /**
   * Convert an instance of ConnectorConfigResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

