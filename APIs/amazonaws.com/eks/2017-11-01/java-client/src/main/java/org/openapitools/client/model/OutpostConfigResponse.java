/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OutpostConfigResponseControlPlanePlacement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This API isn&#39;t available for Amazon EKS clusters on the Amazon Web Services cloud.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutpostConfigResponse {
  public static final String SERIALIZED_NAME_OUTPOST_ARNS = "outpostArns";
  @SerializedName(SERIALIZED_NAME_OUTPOST_ARNS)
  private List outpostArns;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_INSTANCE_TYPE = "controlPlaneInstanceType";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_INSTANCE_TYPE)
  private String controlPlaneInstanceType;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_PLACEMENT = "controlPlanePlacement";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_PLACEMENT)
  private OutpostConfigResponseControlPlanePlacement controlPlanePlacement;

  public OutpostConfigResponse() {
  }

  public OutpostConfigResponse outpostArns(List outpostArns) {
    this.outpostArns = outpostArns;
    return this;
  }

  /**
   * Get outpostArns
   * @return outpostArns
   */
  @javax.annotation.Nonnull
  public List getOutpostArns() {
    return outpostArns;
  }

  public void setOutpostArns(List outpostArns) {
    this.outpostArns = outpostArns;
  }


  public OutpostConfigResponse controlPlaneInstanceType(String controlPlaneInstanceType) {
    this.controlPlaneInstanceType = controlPlaneInstanceType;
    return this;
  }

  /**
   * Get controlPlaneInstanceType
   * @return controlPlaneInstanceType
   */
  @javax.annotation.Nonnull
  public String getControlPlaneInstanceType() {
    return controlPlaneInstanceType;
  }

  public void setControlPlaneInstanceType(String controlPlaneInstanceType) {
    this.controlPlaneInstanceType = controlPlaneInstanceType;
  }


  public OutpostConfigResponse controlPlanePlacement(OutpostConfigResponseControlPlanePlacement controlPlanePlacement) {
    this.controlPlanePlacement = controlPlanePlacement;
    return this;
  }

  /**
   * Get controlPlanePlacement
   * @return controlPlanePlacement
   */
  @javax.annotation.Nullable
  public OutpostConfigResponseControlPlanePlacement getControlPlanePlacement() {
    return controlPlanePlacement;
  }

  public void setControlPlanePlacement(OutpostConfigResponseControlPlanePlacement controlPlanePlacement) {
    this.controlPlanePlacement = controlPlanePlacement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutpostConfigResponse outpostConfigResponse = (OutpostConfigResponse) o;
    return Objects.equals(this.outpostArns, outpostConfigResponse.outpostArns) &&
        Objects.equals(this.controlPlaneInstanceType, outpostConfigResponse.controlPlaneInstanceType) &&
        Objects.equals(this.controlPlanePlacement, outpostConfigResponse.controlPlanePlacement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outpostArns, controlPlaneInstanceType, controlPlanePlacement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutpostConfigResponse {\n");
    sb.append("    outpostArns: ").append(toIndentedString(outpostArns)).append("\n");
    sb.append("    controlPlaneInstanceType: ").append(toIndentedString(controlPlaneInstanceType)).append("\n");
    sb.append("    controlPlanePlacement: ").append(toIndentedString(controlPlanePlacement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outpostArns");
    openapiFields.add("controlPlaneInstanceType");
    openapiFields.add("controlPlanePlacement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("outpostArns");
    openapiRequiredFields.add("controlPlaneInstanceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutpostConfigResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutpostConfigResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutpostConfigResponse is not found in the empty JSON string", OutpostConfigResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutpostConfigResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutpostConfigResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutpostConfigResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `outpostArns`
      List.validateJsonElement(jsonObj.get("outpostArns"));
      // validate the required field `controlPlaneInstanceType`
      String.validateJsonElement(jsonObj.get("controlPlaneInstanceType"));
      // validate the optional field `controlPlanePlacement`
      if (jsonObj.get("controlPlanePlacement") != null && !jsonObj.get("controlPlanePlacement").isJsonNull()) {
        OutpostConfigResponseControlPlanePlacement.validateJsonElement(jsonObj.get("controlPlanePlacement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutpostConfigResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutpostConfigResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutpostConfigResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutpostConfigResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OutpostConfigResponse>() {
           @Override
           public void write(JsonWriter out, OutpostConfigResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutpostConfigResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutpostConfigResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutpostConfigResponse
   * @throws IOException if the JSON string is invalid with respect to OutpostConfigResponse
   */
  public static OutpostConfigResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutpostConfigResponse.class);
  }

  /**
   * Convert an instance of OutpostConfigResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

