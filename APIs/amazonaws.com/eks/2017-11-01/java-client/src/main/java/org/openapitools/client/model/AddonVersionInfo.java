/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an add-on version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddonVersionInfo {
  public static final String SERIALIZED_NAME_ADDON_VERSION = "addonVersion";
  @SerializedName(SERIALIZED_NAME_ADDON_VERSION)
  private String addonVersion;

  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private List architecture;

  public static final String SERIALIZED_NAME_COMPATIBILITIES = "compatibilities";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITIES)
  private List compatibilities;

  public static final String SERIALIZED_NAME_REQUIRES_CONFIGURATION = "requiresConfiguration";
  @SerializedName(SERIALIZED_NAME_REQUIRES_CONFIGURATION)
  private Boolean requiresConfiguration;

  public AddonVersionInfo() {
  }

  public AddonVersionInfo addonVersion(String addonVersion) {
    this.addonVersion = addonVersion;
    return this;
  }

  /**
   * Get addonVersion
   * @return addonVersion
   */
  @javax.annotation.Nullable
  public String getAddonVersion() {
    return addonVersion;
  }

  public void setAddonVersion(String addonVersion) {
    this.addonVersion = addonVersion;
  }


  public AddonVersionInfo architecture(List architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable
  public List getArchitecture() {
    return architecture;
  }

  public void setArchitecture(List architecture) {
    this.architecture = architecture;
  }


  public AddonVersionInfo compatibilities(List compatibilities) {
    this.compatibilities = compatibilities;
    return this;
  }

  /**
   * Get compatibilities
   * @return compatibilities
   */
  @javax.annotation.Nullable
  public List getCompatibilities() {
    return compatibilities;
  }

  public void setCompatibilities(List compatibilities) {
    this.compatibilities = compatibilities;
  }


  public AddonVersionInfo requiresConfiguration(Boolean requiresConfiguration) {
    this.requiresConfiguration = requiresConfiguration;
    return this;
  }

  /**
   * Get requiresConfiguration
   * @return requiresConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getRequiresConfiguration() {
    return requiresConfiguration;
  }

  public void setRequiresConfiguration(Boolean requiresConfiguration) {
    this.requiresConfiguration = requiresConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddonVersionInfo addonVersionInfo = (AddonVersionInfo) o;
    return Objects.equals(this.addonVersion, addonVersionInfo.addonVersion) &&
        Objects.equals(this.architecture, addonVersionInfo.architecture) &&
        Objects.equals(this.compatibilities, addonVersionInfo.compatibilities) &&
        Objects.equals(this.requiresConfiguration, addonVersionInfo.requiresConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonVersion, architecture, compatibilities, requiresConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddonVersionInfo {\n");
    sb.append("    addonVersion: ").append(toIndentedString(addonVersion)).append("\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    compatibilities: ").append(toIndentedString(compatibilities)).append("\n");
    sb.append("    requiresConfiguration: ").append(toIndentedString(requiresConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addonVersion");
    openapiFields.add("architecture");
    openapiFields.add("compatibilities");
    openapiFields.add("requiresConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddonVersionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddonVersionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddonVersionInfo is not found in the empty JSON string", AddonVersionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddonVersionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddonVersionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addonVersion`
      if (jsonObj.get("addonVersion") != null && !jsonObj.get("addonVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("addonVersion"));
      }
      // validate the optional field `architecture`
      if (jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("architecture"));
      }
      // validate the optional field `compatibilities`
      if (jsonObj.get("compatibilities") != null && !jsonObj.get("compatibilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("compatibilities"));
      }
      // validate the optional field `requiresConfiguration`
      if (jsonObj.get("requiresConfiguration") != null && !jsonObj.get("requiresConfiguration").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("requiresConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddonVersionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddonVersionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddonVersionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddonVersionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AddonVersionInfo>() {
           @Override
           public void write(JsonWriter out, AddonVersionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddonVersionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddonVersionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddonVersionInfo
   * @throws IOException if the JSON string is invalid with respect to AddonVersionInfo
   */
  public static AddonVersionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddonVersionInfo.class);
  }

  /**
   * Convert an instance of AddonVersionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

