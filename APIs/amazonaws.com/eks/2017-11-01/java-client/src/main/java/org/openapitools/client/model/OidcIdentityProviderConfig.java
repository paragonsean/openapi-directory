/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ConfigStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing the configuration for an OpenID Connect (OIDC) identity provider. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OidcIdentityProviderConfig {
  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIG_NAME = "identityProviderConfigName";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIG_NAME)
  private String identityProviderConfigName;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIG_ARN = "identityProviderConfigArn";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIG_ARN)
  private String identityProviderConfigArn;

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "clusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_ISSUER_URL = "issuerUrl";
  @SerializedName(SERIALIZED_NAME_ISSUER_URL)
  private String issuerUrl;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_USERNAME_CLAIM = "usernameClaim";
  @SerializedName(SERIALIZED_NAME_USERNAME_CLAIM)
  private String usernameClaim;

  public static final String SERIALIZED_NAME_USERNAME_PREFIX = "usernamePrefix";
  @SerializedName(SERIALIZED_NAME_USERNAME_PREFIX)
  private String usernamePrefix;

  public static final String SERIALIZED_NAME_GROUPS_CLAIM = "groupsClaim";
  @SerializedName(SERIALIZED_NAME_GROUPS_CLAIM)
  private String groupsClaim;

  public static final String SERIALIZED_NAME_GROUPS_PREFIX = "groupsPrefix";
  @SerializedName(SERIALIZED_NAME_GROUPS_PREFIX)
  private String groupsPrefix;

  public static final String SERIALIZED_NAME_REQUIRED_CLAIMS = "requiredClaims";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CLAIMS)
  private Map requiredClaims;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConfigStatus status;

  public OidcIdentityProviderConfig() {
  }

  public OidcIdentityProviderConfig identityProviderConfigName(String identityProviderConfigName) {
    this.identityProviderConfigName = identityProviderConfigName;
    return this;
  }

  /**
   * Get identityProviderConfigName
   * @return identityProviderConfigName
   */
  @javax.annotation.Nullable
  public String getIdentityProviderConfigName() {
    return identityProviderConfigName;
  }

  public void setIdentityProviderConfigName(String identityProviderConfigName) {
    this.identityProviderConfigName = identityProviderConfigName;
  }


  public OidcIdentityProviderConfig identityProviderConfigArn(String identityProviderConfigArn) {
    this.identityProviderConfigArn = identityProviderConfigArn;
    return this;
  }

  /**
   * Get identityProviderConfigArn
   * @return identityProviderConfigArn
   */
  @javax.annotation.Nullable
  public String getIdentityProviderConfigArn() {
    return identityProviderConfigArn;
  }

  public void setIdentityProviderConfigArn(String identityProviderConfigArn) {
    this.identityProviderConfigArn = identityProviderConfigArn;
  }


  public OidcIdentityProviderConfig clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * Get clusterName
   * @return clusterName
   */
  @javax.annotation.Nullable
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public OidcIdentityProviderConfig issuerUrl(String issuerUrl) {
    this.issuerUrl = issuerUrl;
    return this;
  }

  /**
   * Get issuerUrl
   * @return issuerUrl
   */
  @javax.annotation.Nullable
  public String getIssuerUrl() {
    return issuerUrl;
  }

  public void setIssuerUrl(String issuerUrl) {
    this.issuerUrl = issuerUrl;
  }


  public OidcIdentityProviderConfig clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OidcIdentityProviderConfig usernameClaim(String usernameClaim) {
    this.usernameClaim = usernameClaim;
    return this;
  }

  /**
   * Get usernameClaim
   * @return usernameClaim
   */
  @javax.annotation.Nullable
  public String getUsernameClaim() {
    return usernameClaim;
  }

  public void setUsernameClaim(String usernameClaim) {
    this.usernameClaim = usernameClaim;
  }


  public OidcIdentityProviderConfig usernamePrefix(String usernamePrefix) {
    this.usernamePrefix = usernamePrefix;
    return this;
  }

  /**
   * Get usernamePrefix
   * @return usernamePrefix
   */
  @javax.annotation.Nullable
  public String getUsernamePrefix() {
    return usernamePrefix;
  }

  public void setUsernamePrefix(String usernamePrefix) {
    this.usernamePrefix = usernamePrefix;
  }


  public OidcIdentityProviderConfig groupsClaim(String groupsClaim) {
    this.groupsClaim = groupsClaim;
    return this;
  }

  /**
   * Get groupsClaim
   * @return groupsClaim
   */
  @javax.annotation.Nullable
  public String getGroupsClaim() {
    return groupsClaim;
  }

  public void setGroupsClaim(String groupsClaim) {
    this.groupsClaim = groupsClaim;
  }


  public OidcIdentityProviderConfig groupsPrefix(String groupsPrefix) {
    this.groupsPrefix = groupsPrefix;
    return this;
  }

  /**
   * Get groupsPrefix
   * @return groupsPrefix
   */
  @javax.annotation.Nullable
  public String getGroupsPrefix() {
    return groupsPrefix;
  }

  public void setGroupsPrefix(String groupsPrefix) {
    this.groupsPrefix = groupsPrefix;
  }


  public OidcIdentityProviderConfig requiredClaims(Map requiredClaims) {
    this.requiredClaims = requiredClaims;
    return this;
  }

  /**
   * Get requiredClaims
   * @return requiredClaims
   */
  @javax.annotation.Nullable
  public Map getRequiredClaims() {
    return requiredClaims;
  }

  public void setRequiredClaims(Map requiredClaims) {
    this.requiredClaims = requiredClaims;
  }


  public OidcIdentityProviderConfig tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public OidcIdentityProviderConfig status(ConfigStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ConfigStatus getStatus() {
    return status;
  }

  public void setStatus(ConfigStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OidcIdentityProviderConfig oidcIdentityProviderConfig = (OidcIdentityProviderConfig) o;
    return Objects.equals(this.identityProviderConfigName, oidcIdentityProviderConfig.identityProviderConfigName) &&
        Objects.equals(this.identityProviderConfigArn, oidcIdentityProviderConfig.identityProviderConfigArn) &&
        Objects.equals(this.clusterName, oidcIdentityProviderConfig.clusterName) &&
        Objects.equals(this.issuerUrl, oidcIdentityProviderConfig.issuerUrl) &&
        Objects.equals(this.clientId, oidcIdentityProviderConfig.clientId) &&
        Objects.equals(this.usernameClaim, oidcIdentityProviderConfig.usernameClaim) &&
        Objects.equals(this.usernamePrefix, oidcIdentityProviderConfig.usernamePrefix) &&
        Objects.equals(this.groupsClaim, oidcIdentityProviderConfig.groupsClaim) &&
        Objects.equals(this.groupsPrefix, oidcIdentityProviderConfig.groupsPrefix) &&
        Objects.equals(this.requiredClaims, oidcIdentityProviderConfig.requiredClaims) &&
        Objects.equals(this.tags, oidcIdentityProviderConfig.tags) &&
        Objects.equals(this.status, oidcIdentityProviderConfig.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityProviderConfigName, identityProviderConfigArn, clusterName, issuerUrl, clientId, usernameClaim, usernamePrefix, groupsClaim, groupsPrefix, requiredClaims, tags, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OidcIdentityProviderConfig {\n");
    sb.append("    identityProviderConfigName: ").append(toIndentedString(identityProviderConfigName)).append("\n");
    sb.append("    identityProviderConfigArn: ").append(toIndentedString(identityProviderConfigArn)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    issuerUrl: ").append(toIndentedString(issuerUrl)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    usernameClaim: ").append(toIndentedString(usernameClaim)).append("\n");
    sb.append("    usernamePrefix: ").append(toIndentedString(usernamePrefix)).append("\n");
    sb.append("    groupsClaim: ").append(toIndentedString(groupsClaim)).append("\n");
    sb.append("    groupsPrefix: ").append(toIndentedString(groupsPrefix)).append("\n");
    sb.append("    requiredClaims: ").append(toIndentedString(requiredClaims)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identityProviderConfigName");
    openapiFields.add("identityProviderConfigArn");
    openapiFields.add("clusterName");
    openapiFields.add("issuerUrl");
    openapiFields.add("clientId");
    openapiFields.add("usernameClaim");
    openapiFields.add("usernamePrefix");
    openapiFields.add("groupsClaim");
    openapiFields.add("groupsPrefix");
    openapiFields.add("requiredClaims");
    openapiFields.add("tags");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OidcIdentityProviderConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OidcIdentityProviderConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OidcIdentityProviderConfig is not found in the empty JSON string", OidcIdentityProviderConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OidcIdentityProviderConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OidcIdentityProviderConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `identityProviderConfigName`
      if (jsonObj.get("identityProviderConfigName") != null && !jsonObj.get("identityProviderConfigName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("identityProviderConfigName"));
      }
      // validate the optional field `identityProviderConfigArn`
      if (jsonObj.get("identityProviderConfigArn") != null && !jsonObj.get("identityProviderConfigArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("identityProviderConfigArn"));
      }
      // validate the optional field `clusterName`
      if (jsonObj.get("clusterName") != null && !jsonObj.get("clusterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clusterName"));
      }
      // validate the optional field `issuerUrl`
      if (jsonObj.get("issuerUrl") != null && !jsonObj.get("issuerUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("issuerUrl"));
      }
      // validate the optional field `clientId`
      if (jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientId"));
      }
      // validate the optional field `usernameClaim`
      if (jsonObj.get("usernameClaim") != null && !jsonObj.get("usernameClaim").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("usernameClaim"));
      }
      // validate the optional field `usernamePrefix`
      if (jsonObj.get("usernamePrefix") != null && !jsonObj.get("usernamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("usernamePrefix"));
      }
      // validate the optional field `groupsClaim`
      if (jsonObj.get("groupsClaim") != null && !jsonObj.get("groupsClaim").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groupsClaim"));
      }
      // validate the optional field `groupsPrefix`
      if (jsonObj.get("groupsPrefix") != null && !jsonObj.get("groupsPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groupsPrefix"));
      }
      // validate the optional field `requiredClaims`
      if (jsonObj.get("requiredClaims") != null && !jsonObj.get("requiredClaims").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("requiredClaims"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ConfigStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OidcIdentityProviderConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OidcIdentityProviderConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OidcIdentityProviderConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OidcIdentityProviderConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<OidcIdentityProviderConfig>() {
           @Override
           public void write(JsonWriter out, OidcIdentityProviderConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OidcIdentityProviderConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OidcIdentityProviderConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OidcIdentityProviderConfig
   * @throws IOException if the JSON string is invalid with respect to OidcIdentityProviderConfig
   */
  public static OidcIdentityProviderConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OidcIdentityProviderConfig.class);
  }

  /**
   * Convert an instance of OidcIdentityProviderConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

