/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateIdentityProviderConfigRequestOidc
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateIdentityProviderConfigRequestOidc {
  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIG_NAME = "identityProviderConfigName";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIG_NAME)
  private String identityProviderConfigName;

  public static final String SERIALIZED_NAME_ISSUER_URL = "issuerUrl";
  @SerializedName(SERIALIZED_NAME_ISSUER_URL)
  private String issuerUrl;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_USERNAME_CLAIM = "usernameClaim";
  @SerializedName(SERIALIZED_NAME_USERNAME_CLAIM)
  private String usernameClaim;

  public static final String SERIALIZED_NAME_USERNAME_PREFIX = "usernamePrefix";
  @SerializedName(SERIALIZED_NAME_USERNAME_PREFIX)
  private String usernamePrefix;

  public static final String SERIALIZED_NAME_GROUPS_CLAIM = "groupsClaim";
  @SerializedName(SERIALIZED_NAME_GROUPS_CLAIM)
  private String groupsClaim;

  public static final String SERIALIZED_NAME_GROUPS_PREFIX = "groupsPrefix";
  @SerializedName(SERIALIZED_NAME_GROUPS_PREFIX)
  private String groupsPrefix;

  public static final String SERIALIZED_NAME_REQUIRED_CLAIMS = "requiredClaims";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CLAIMS)
  private Map requiredClaims;

  public AssociateIdentityProviderConfigRequestOidc() {
  }

  public AssociateIdentityProviderConfigRequestOidc identityProviderConfigName(String identityProviderConfigName) {
    this.identityProviderConfigName = identityProviderConfigName;
    return this;
  }

  /**
   * Get identityProviderConfigName
   * @return identityProviderConfigName
   */
  @javax.annotation.Nonnull
  public String getIdentityProviderConfigName() {
    return identityProviderConfigName;
  }

  public void setIdentityProviderConfigName(String identityProviderConfigName) {
    this.identityProviderConfigName = identityProviderConfigName;
  }


  public AssociateIdentityProviderConfigRequestOidc issuerUrl(String issuerUrl) {
    this.issuerUrl = issuerUrl;
    return this;
  }

  /**
   * Get issuerUrl
   * @return issuerUrl
   */
  @javax.annotation.Nonnull
  public String getIssuerUrl() {
    return issuerUrl;
  }

  public void setIssuerUrl(String issuerUrl) {
    this.issuerUrl = issuerUrl;
  }


  public AssociateIdentityProviderConfigRequestOidc clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public AssociateIdentityProviderConfigRequestOidc usernameClaim(String usernameClaim) {
    this.usernameClaim = usernameClaim;
    return this;
  }

  /**
   * Get usernameClaim
   * @return usernameClaim
   */
  @javax.annotation.Nullable
  public String getUsernameClaim() {
    return usernameClaim;
  }

  public void setUsernameClaim(String usernameClaim) {
    this.usernameClaim = usernameClaim;
  }


  public AssociateIdentityProviderConfigRequestOidc usernamePrefix(String usernamePrefix) {
    this.usernamePrefix = usernamePrefix;
    return this;
  }

  /**
   * Get usernamePrefix
   * @return usernamePrefix
   */
  @javax.annotation.Nullable
  public String getUsernamePrefix() {
    return usernamePrefix;
  }

  public void setUsernamePrefix(String usernamePrefix) {
    this.usernamePrefix = usernamePrefix;
  }


  public AssociateIdentityProviderConfigRequestOidc groupsClaim(String groupsClaim) {
    this.groupsClaim = groupsClaim;
    return this;
  }

  /**
   * Get groupsClaim
   * @return groupsClaim
   */
  @javax.annotation.Nullable
  public String getGroupsClaim() {
    return groupsClaim;
  }

  public void setGroupsClaim(String groupsClaim) {
    this.groupsClaim = groupsClaim;
  }


  public AssociateIdentityProviderConfigRequestOidc groupsPrefix(String groupsPrefix) {
    this.groupsPrefix = groupsPrefix;
    return this;
  }

  /**
   * Get groupsPrefix
   * @return groupsPrefix
   */
  @javax.annotation.Nullable
  public String getGroupsPrefix() {
    return groupsPrefix;
  }

  public void setGroupsPrefix(String groupsPrefix) {
    this.groupsPrefix = groupsPrefix;
  }


  public AssociateIdentityProviderConfigRequestOidc requiredClaims(Map requiredClaims) {
    this.requiredClaims = requiredClaims;
    return this;
  }

  /**
   * Get requiredClaims
   * @return requiredClaims
   */
  @javax.annotation.Nullable
  public Map getRequiredClaims() {
    return requiredClaims;
  }

  public void setRequiredClaims(Map requiredClaims) {
    this.requiredClaims = requiredClaims;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateIdentityProviderConfigRequestOidc associateIdentityProviderConfigRequestOidc = (AssociateIdentityProviderConfigRequestOidc) o;
    return Objects.equals(this.identityProviderConfigName, associateIdentityProviderConfigRequestOidc.identityProviderConfigName) &&
        Objects.equals(this.issuerUrl, associateIdentityProviderConfigRequestOidc.issuerUrl) &&
        Objects.equals(this.clientId, associateIdentityProviderConfigRequestOidc.clientId) &&
        Objects.equals(this.usernameClaim, associateIdentityProviderConfigRequestOidc.usernameClaim) &&
        Objects.equals(this.usernamePrefix, associateIdentityProviderConfigRequestOidc.usernamePrefix) &&
        Objects.equals(this.groupsClaim, associateIdentityProviderConfigRequestOidc.groupsClaim) &&
        Objects.equals(this.groupsPrefix, associateIdentityProviderConfigRequestOidc.groupsPrefix) &&
        Objects.equals(this.requiredClaims, associateIdentityProviderConfigRequestOidc.requiredClaims);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityProviderConfigName, issuerUrl, clientId, usernameClaim, usernamePrefix, groupsClaim, groupsPrefix, requiredClaims);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateIdentityProviderConfigRequestOidc {\n");
    sb.append("    identityProviderConfigName: ").append(toIndentedString(identityProviderConfigName)).append("\n");
    sb.append("    issuerUrl: ").append(toIndentedString(issuerUrl)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    usernameClaim: ").append(toIndentedString(usernameClaim)).append("\n");
    sb.append("    usernamePrefix: ").append(toIndentedString(usernamePrefix)).append("\n");
    sb.append("    groupsClaim: ").append(toIndentedString(groupsClaim)).append("\n");
    sb.append("    groupsPrefix: ").append(toIndentedString(groupsPrefix)).append("\n");
    sb.append("    requiredClaims: ").append(toIndentedString(requiredClaims)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identityProviderConfigName");
    openapiFields.add("issuerUrl");
    openapiFields.add("clientId");
    openapiFields.add("usernameClaim");
    openapiFields.add("usernamePrefix");
    openapiFields.add("groupsClaim");
    openapiFields.add("groupsPrefix");
    openapiFields.add("requiredClaims");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identityProviderConfigName");
    openapiRequiredFields.add("issuerUrl");
    openapiRequiredFields.add("clientId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateIdentityProviderConfigRequestOidc
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateIdentityProviderConfigRequestOidc.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateIdentityProviderConfigRequestOidc is not found in the empty JSON string", AssociateIdentityProviderConfigRequestOidc.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateIdentityProviderConfigRequestOidc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateIdentityProviderConfigRequestOidc` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateIdentityProviderConfigRequestOidc.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `identityProviderConfigName`
      String.validateJsonElement(jsonObj.get("identityProviderConfigName"));
      // validate the required field `issuerUrl`
      String.validateJsonElement(jsonObj.get("issuerUrl"));
      // validate the required field `clientId`
      String.validateJsonElement(jsonObj.get("clientId"));
      // validate the optional field `usernameClaim`
      if (jsonObj.get("usernameClaim") != null && !jsonObj.get("usernameClaim").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("usernameClaim"));
      }
      // validate the optional field `usernamePrefix`
      if (jsonObj.get("usernamePrefix") != null && !jsonObj.get("usernamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("usernamePrefix"));
      }
      // validate the optional field `groupsClaim`
      if (jsonObj.get("groupsClaim") != null && !jsonObj.get("groupsClaim").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groupsClaim"));
      }
      // validate the optional field `groupsPrefix`
      if (jsonObj.get("groupsPrefix") != null && !jsonObj.get("groupsPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groupsPrefix"));
      }
      // validate the optional field `requiredClaims`
      if (jsonObj.get("requiredClaims") != null && !jsonObj.get("requiredClaims").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("requiredClaims"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateIdentityProviderConfigRequestOidc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateIdentityProviderConfigRequestOidc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateIdentityProviderConfigRequestOidc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateIdentityProviderConfigRequestOidc.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateIdentityProviderConfigRequestOidc>() {
           @Override
           public void write(JsonWriter out, AssociateIdentityProviderConfigRequestOidc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateIdentityProviderConfigRequestOidc read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateIdentityProviderConfigRequestOidc given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateIdentityProviderConfigRequestOidc
   * @throws IOException if the JSON string is invalid with respect to AssociateIdentityProviderConfigRequestOidc
   */
  public static AssociateIdentityProviderConfigRequestOidc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateIdentityProviderConfigRequestOidc.class);
  }

  /**
   * Convert an instance of AssociateIdentityProviderConfigRequestOidc to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

