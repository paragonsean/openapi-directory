/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNodegroupRequestScalingConfig;
import org.openapitools.client.model.CreateNodegroupRequestUpdateConfig;
import org.openapitools.client.model.UpdateNodegroupConfigRequestLabels;
import org.openapitools.client.model.UpdateNodegroupConfigRequestTaints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNodegroupConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNodegroupConfigRequest {
  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private UpdateNodegroupConfigRequestLabels labels;

  public static final String SERIALIZED_NAME_TAINTS = "taints";
  @SerializedName(SERIALIZED_NAME_TAINTS)
  private UpdateNodegroupConfigRequestTaints taints;

  public static final String SERIALIZED_NAME_SCALING_CONFIG = "scalingConfig";
  @SerializedName(SERIALIZED_NAME_SCALING_CONFIG)
  private CreateNodegroupRequestScalingConfig scalingConfig;

  public static final String SERIALIZED_NAME_UPDATE_CONFIG = "updateConfig";
  @SerializedName(SERIALIZED_NAME_UPDATE_CONFIG)
  private CreateNodegroupRequestUpdateConfig updateConfig;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public UpdateNodegroupConfigRequest() {
  }

  public UpdateNodegroupConfigRequest labels(UpdateNodegroupConfigRequestLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public UpdateNodegroupConfigRequestLabels getLabels() {
    return labels;
  }

  public void setLabels(UpdateNodegroupConfigRequestLabels labels) {
    this.labels = labels;
  }


  public UpdateNodegroupConfigRequest taints(UpdateNodegroupConfigRequestTaints taints) {
    this.taints = taints;
    return this;
  }

  /**
   * Get taints
   * @return taints
   */
  @javax.annotation.Nullable
  public UpdateNodegroupConfigRequestTaints getTaints() {
    return taints;
  }

  public void setTaints(UpdateNodegroupConfigRequestTaints taints) {
    this.taints = taints;
  }


  public UpdateNodegroupConfigRequest scalingConfig(CreateNodegroupRequestScalingConfig scalingConfig) {
    this.scalingConfig = scalingConfig;
    return this;
  }

  /**
   * Get scalingConfig
   * @return scalingConfig
   */
  @javax.annotation.Nullable
  public CreateNodegroupRequestScalingConfig getScalingConfig() {
    return scalingConfig;
  }

  public void setScalingConfig(CreateNodegroupRequestScalingConfig scalingConfig) {
    this.scalingConfig = scalingConfig;
  }


  public UpdateNodegroupConfigRequest updateConfig(CreateNodegroupRequestUpdateConfig updateConfig) {
    this.updateConfig = updateConfig;
    return this;
  }

  /**
   * Get updateConfig
   * @return updateConfig
   */
  @javax.annotation.Nullable
  public CreateNodegroupRequestUpdateConfig getUpdateConfig() {
    return updateConfig;
  }

  public void setUpdateConfig(CreateNodegroupRequestUpdateConfig updateConfig) {
    this.updateConfig = updateConfig;
  }


  public UpdateNodegroupConfigRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNodegroupConfigRequest updateNodegroupConfigRequest = (UpdateNodegroupConfigRequest) o;
    return Objects.equals(this.labels, updateNodegroupConfigRequest.labels) &&
        Objects.equals(this.taints, updateNodegroupConfigRequest.taints) &&
        Objects.equals(this.scalingConfig, updateNodegroupConfigRequest.scalingConfig) &&
        Objects.equals(this.updateConfig, updateNodegroupConfigRequest.updateConfig) &&
        Objects.equals(this.clientRequestToken, updateNodegroupConfigRequest.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labels, taints, scalingConfig, updateConfig, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNodegroupConfigRequest {\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    scalingConfig: ").append(toIndentedString(scalingConfig)).append("\n");
    sb.append("    updateConfig: ").append(toIndentedString(updateConfig)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labels");
    openapiFields.add("taints");
    openapiFields.add("scalingConfig");
    openapiFields.add("updateConfig");
    openapiFields.add("clientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNodegroupConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNodegroupConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNodegroupConfigRequest is not found in the empty JSON string", UpdateNodegroupConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNodegroupConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNodegroupConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        UpdateNodegroupConfigRequestLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // validate the optional field `taints`
      if (jsonObj.get("taints") != null && !jsonObj.get("taints").isJsonNull()) {
        UpdateNodegroupConfigRequestTaints.validateJsonElement(jsonObj.get("taints"));
      }
      // validate the optional field `scalingConfig`
      if (jsonObj.get("scalingConfig") != null && !jsonObj.get("scalingConfig").isJsonNull()) {
        CreateNodegroupRequestScalingConfig.validateJsonElement(jsonObj.get("scalingConfig"));
      }
      // validate the optional field `updateConfig`
      if (jsonObj.get("updateConfig") != null && !jsonObj.get("updateConfig").isJsonNull()) {
        CreateNodegroupRequestUpdateConfig.validateJsonElement(jsonObj.get("updateConfig"));
      }
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNodegroupConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNodegroupConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNodegroupConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNodegroupConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNodegroupConfigRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNodegroupConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNodegroupConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNodegroupConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNodegroupConfigRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNodegroupConfigRequest
   */
  public static UpdateNodegroupConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNodegroupConfigRequest.class);
  }

  /**
   * Convert an instance of UpdateNodegroupConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

