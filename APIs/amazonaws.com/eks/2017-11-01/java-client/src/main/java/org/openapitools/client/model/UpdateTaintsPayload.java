/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing the details of an update to a taints payload. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html\&quot;&gt;Node taints on managed node groups&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTaintsPayload {
  public static final String SERIALIZED_NAME_ADD_OR_UPDATE_TAINTS = "addOrUpdateTaints";
  @SerializedName(SERIALIZED_NAME_ADD_OR_UPDATE_TAINTS)
  private List addOrUpdateTaints;

  public static final String SERIALIZED_NAME_REMOVE_TAINTS = "removeTaints";
  @SerializedName(SERIALIZED_NAME_REMOVE_TAINTS)
  private List removeTaints;

  public UpdateTaintsPayload() {
  }

  public UpdateTaintsPayload addOrUpdateTaints(List addOrUpdateTaints) {
    this.addOrUpdateTaints = addOrUpdateTaints;
    return this;
  }

  /**
   * Get addOrUpdateTaints
   * @return addOrUpdateTaints
   */
  @javax.annotation.Nullable
  public List getAddOrUpdateTaints() {
    return addOrUpdateTaints;
  }

  public void setAddOrUpdateTaints(List addOrUpdateTaints) {
    this.addOrUpdateTaints = addOrUpdateTaints;
  }


  public UpdateTaintsPayload removeTaints(List removeTaints) {
    this.removeTaints = removeTaints;
    return this;
  }

  /**
   * Get removeTaints
   * @return removeTaints
   */
  @javax.annotation.Nullable
  public List getRemoveTaints() {
    return removeTaints;
  }

  public void setRemoveTaints(List removeTaints) {
    this.removeTaints = removeTaints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTaintsPayload updateTaintsPayload = (UpdateTaintsPayload) o;
    return Objects.equals(this.addOrUpdateTaints, updateTaintsPayload.addOrUpdateTaints) &&
        Objects.equals(this.removeTaints, updateTaintsPayload.removeTaints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOrUpdateTaints, removeTaints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTaintsPayload {\n");
    sb.append("    addOrUpdateTaints: ").append(toIndentedString(addOrUpdateTaints)).append("\n");
    sb.append("    removeTaints: ").append(toIndentedString(removeTaints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addOrUpdateTaints");
    openapiFields.add("removeTaints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTaintsPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTaintsPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTaintsPayload is not found in the empty JSON string", UpdateTaintsPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTaintsPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTaintsPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addOrUpdateTaints`
      if (jsonObj.get("addOrUpdateTaints") != null && !jsonObj.get("addOrUpdateTaints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("addOrUpdateTaints"));
      }
      // validate the optional field `removeTaints`
      if (jsonObj.get("removeTaints") != null && !jsonObj.get("removeTaints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("removeTaints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTaintsPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTaintsPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTaintsPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTaintsPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTaintsPayload>() {
           @Override
           public void write(JsonWriter out, UpdateTaintsPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTaintsPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTaintsPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTaintsPayload
   * @throws IOException if the JSON string is invalid with respect to UpdateTaintsPayload
   */
  public static UpdateTaintsPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTaintsPayload.class);
  }

  /**
   * Convert an instance of UpdateTaintsPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

