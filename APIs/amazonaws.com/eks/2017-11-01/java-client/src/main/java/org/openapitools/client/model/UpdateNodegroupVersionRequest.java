/*
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNodegroupRequestLaunchTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNodegroupVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:04.017338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNodegroupVersionRequest {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_RELEASE_VERSION = "releaseVersion";
  @SerializedName(SERIALIZED_NAME_RELEASE_VERSION)
  private String releaseVersion;

  public static final String SERIALIZED_NAME_LAUNCH_TEMPLATE = "launchTemplate";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TEMPLATE)
  private CreateNodegroupRequestLaunchTemplate launchTemplate;

  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private Boolean force;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public UpdateNodegroupVersionRequest() {
  }

  public UpdateNodegroupVersionRequest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster&#39;s Kubernetes version. If you specify &lt;code&gt;launchTemplate&lt;/code&gt;, and your launch template uses a custom AMI, then don&#39;t specify &lt;code&gt;version&lt;/code&gt;, or the node group update will fail. For more information about using launch templates with Amazon EKS, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\&quot;&gt;Launch template support&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public UpdateNodegroupVersionRequest releaseVersion(String releaseVersion) {
    this.releaseVersion = releaseVersion;
    return this;
  }

  /**
   * &lt;p&gt;The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group&#39;s Kubernetes version is used. For information about Linux versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html\&quot;&gt;Amazon EKS optimized Amazon Linux AMI versions&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html\&quot;&gt;Amazon EKS optimized Windows AMI versions&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;launchTemplate&lt;/code&gt;, and your launch template uses a custom AMI, then don&#39;t specify &lt;code&gt;releaseVersion&lt;/code&gt;, or the node group update will fail. For more information about using launch templates with Amazon EKS, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\&quot;&gt;Launch template support&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return releaseVersion
   */
  @javax.annotation.Nullable
  public String getReleaseVersion() {
    return releaseVersion;
  }

  public void setReleaseVersion(String releaseVersion) {
    this.releaseVersion = releaseVersion;
  }


  public UpdateNodegroupVersionRequest launchTemplate(CreateNodegroupRequestLaunchTemplate launchTemplate) {
    this.launchTemplate = launchTemplate;
    return this;
  }

  /**
   * Get launchTemplate
   * @return launchTemplate
   */
  @javax.annotation.Nullable
  public CreateNodegroupRequestLaunchTemplate getLaunchTemplate() {
    return launchTemplate;
  }

  public void setLaunchTemplate(CreateNodegroupRequestLaunchTemplate launchTemplate) {
    this.launchTemplate = launchTemplate;
  }


  public UpdateNodegroupVersionRequest force(Boolean force) {
    this.force = force;
    return this;
  }

  /**
   * Force the update if the existing node group&#39;s pods are unable to be drained due to a pod disruption budget issue. If an update fails because pods could not be drained, you can force the update after it fails to terminate the old node whether or not any pods are running on the node.
   * @return force
   */
  @javax.annotation.Nullable
  public Boolean getForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }


  public UpdateNodegroupVersionRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNodegroupVersionRequest updateNodegroupVersionRequest = (UpdateNodegroupVersionRequest) o;
    return Objects.equals(this.version, updateNodegroupVersionRequest.version) &&
        Objects.equals(this.releaseVersion, updateNodegroupVersionRequest.releaseVersion) &&
        Objects.equals(this.launchTemplate, updateNodegroupVersionRequest.launchTemplate) &&
        Objects.equals(this.force, updateNodegroupVersionRequest.force) &&
        Objects.equals(this.clientRequestToken, updateNodegroupVersionRequest.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, releaseVersion, launchTemplate, force, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNodegroupVersionRequest {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    releaseVersion: ").append(toIndentedString(releaseVersion)).append("\n");
    sb.append("    launchTemplate: ").append(toIndentedString(launchTemplate)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("releaseVersion");
    openapiFields.add("launchTemplate");
    openapiFields.add("force");
    openapiFields.add("clientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNodegroupVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNodegroupVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNodegroupVersionRequest is not found in the empty JSON string", UpdateNodegroupVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNodegroupVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNodegroupVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("releaseVersion") != null && !jsonObj.get("releaseVersion").isJsonNull()) && !jsonObj.get("releaseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseVersion").toString()));
      }
      // validate the optional field `launchTemplate`
      if (jsonObj.get("launchTemplate") != null && !jsonObj.get("launchTemplate").isJsonNull()) {
        CreateNodegroupRequestLaunchTemplate.validateJsonElement(jsonObj.get("launchTemplate"));
      }
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNodegroupVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNodegroupVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNodegroupVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNodegroupVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNodegroupVersionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNodegroupVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNodegroupVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNodegroupVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNodegroupVersionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNodegroupVersionRequest
   */
  public static UpdateNodegroupVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNodegroupVersionRequest.class);
  }

  /**
   * Convert an instance of UpdateNodegroupVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

