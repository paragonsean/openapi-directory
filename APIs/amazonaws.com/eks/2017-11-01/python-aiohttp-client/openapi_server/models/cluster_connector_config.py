# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterConnectorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_id: str=None, activation_code: str=None, activation_expiry: datetime=None, provider: str=None, role_arn: str=None):
        """ClusterConnectorConfig - a model defined in OpenAPI

        :param activation_id: The activation_id of this ClusterConnectorConfig.
        :param activation_code: The activation_code of this ClusterConnectorConfig.
        :param activation_expiry: The activation_expiry of this ClusterConnectorConfig.
        :param provider: The provider of this ClusterConnectorConfig.
        :param role_arn: The role_arn of this ClusterConnectorConfig.
        """
        self.openapi_types = {
            'activation_id': str,
            'activation_code': str,
            'activation_expiry': datetime,
            'provider': str,
            'role_arn': str
        }

        self.attribute_map = {
            'activation_id': 'activationId',
            'activation_code': 'activationCode',
            'activation_expiry': 'activationExpiry',
            'provider': 'provider',
            'role_arn': 'roleArn'
        }

        self._activation_id = activation_id
        self._activation_code = activation_code
        self._activation_expiry = activation_expiry
        self._provider = provider
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterConnectorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster_connectorConfig of this ClusterConnectorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_id(self):
        """Gets the activation_id of this ClusterConnectorConfig.


        :return: The activation_id of this ClusterConnectorConfig.
        :rtype: str
        """
        return self._activation_id

    @activation_id.setter
    def activation_id(self, activation_id):
        """Sets the activation_id of this ClusterConnectorConfig.


        :param activation_id: The activation_id of this ClusterConnectorConfig.
        :type activation_id: str
        """

        self._activation_id = activation_id

    @property
    def activation_code(self):
        """Gets the activation_code of this ClusterConnectorConfig.


        :return: The activation_code of this ClusterConnectorConfig.
        :rtype: str
        """
        return self._activation_code

    @activation_code.setter
    def activation_code(self, activation_code):
        """Sets the activation_code of this ClusterConnectorConfig.


        :param activation_code: The activation_code of this ClusterConnectorConfig.
        :type activation_code: str
        """

        self._activation_code = activation_code

    @property
    def activation_expiry(self):
        """Gets the activation_expiry of this ClusterConnectorConfig.


        :return: The activation_expiry of this ClusterConnectorConfig.
        :rtype: datetime
        """
        return self._activation_expiry

    @activation_expiry.setter
    def activation_expiry(self, activation_expiry):
        """Sets the activation_expiry of this ClusterConnectorConfig.


        :param activation_expiry: The activation_expiry of this ClusterConnectorConfig.
        :type activation_expiry: datetime
        """

        self._activation_expiry = activation_expiry

    @property
    def provider(self):
        """Gets the provider of this ClusterConnectorConfig.


        :return: The provider of this ClusterConnectorConfig.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ClusterConnectorConfig.


        :param provider: The provider of this ClusterConnectorConfig.
        :type provider: str
        """

        self._provider = provider

    @property
    def role_arn(self):
        """Gets the role_arn of this ClusterConnectorConfig.


        :return: The role_arn of this ClusterConnectorConfig.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this ClusterConnectorConfig.


        :param role_arn: The role_arn of this ClusterConnectorConfig.
        :type role_arn: str
        """

        self._role_arn = role_arn
