# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_nodegroup_request_launch_template import CreateNodegroupRequestLaunchTemplate
from openapi_server.models.create_nodegroup_request_remote_access import CreateNodegroupRequestRemoteAccess
from openapi_server.models.create_nodegroup_request_scaling_config import CreateNodegroupRequestScalingConfig
from openapi_server.models.create_nodegroup_request_update_config import CreateNodegroupRequestUpdateConfig
from openapi_server.models.taint import Taint
from openapi_server import util


class CreateNodegroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodegroup_name: str=None, scaling_config: CreateNodegroupRequestScalingConfig=None, disk_size: int=None, subnets: List[str]=None, instance_types: List[str]=None, ami_type: str=None, remote_access: CreateNodegroupRequestRemoteAccess=None, node_role: str=None, labels: Dict[str, str]=None, taints: List[Taint]=None, tags: Dict[str, str]=None, client_request_token: str=None, launch_template: CreateNodegroupRequestLaunchTemplate=None, update_config: CreateNodegroupRequestUpdateConfig=None, capacity_type: str=None, version: str=None, release_version: str=None):
        """CreateNodegroupRequest - a model defined in OpenAPI

        :param nodegroup_name: The nodegroup_name of this CreateNodegroupRequest.
        :param scaling_config: The scaling_config of this CreateNodegroupRequest.
        :param disk_size: The disk_size of this CreateNodegroupRequest.
        :param subnets: The subnets of this CreateNodegroupRequest.
        :param instance_types: The instance_types of this CreateNodegroupRequest.
        :param ami_type: The ami_type of this CreateNodegroupRequest.
        :param remote_access: The remote_access of this CreateNodegroupRequest.
        :param node_role: The node_role of this CreateNodegroupRequest.
        :param labels: The labels of this CreateNodegroupRequest.
        :param taints: The taints of this CreateNodegroupRequest.
        :param tags: The tags of this CreateNodegroupRequest.
        :param client_request_token: The client_request_token of this CreateNodegroupRequest.
        :param launch_template: The launch_template of this CreateNodegroupRequest.
        :param update_config: The update_config of this CreateNodegroupRequest.
        :param capacity_type: The capacity_type of this CreateNodegroupRequest.
        :param version: The version of this CreateNodegroupRequest.
        :param release_version: The release_version of this CreateNodegroupRequest.
        """
        self.openapi_types = {
            'nodegroup_name': str,
            'scaling_config': CreateNodegroupRequestScalingConfig,
            'disk_size': int,
            'subnets': List[str],
            'instance_types': List[str],
            'ami_type': str,
            'remote_access': CreateNodegroupRequestRemoteAccess,
            'node_role': str,
            'labels': Dict[str, str],
            'taints': List[Taint],
            'tags': Dict[str, str],
            'client_request_token': str,
            'launch_template': CreateNodegroupRequestLaunchTemplate,
            'update_config': CreateNodegroupRequestUpdateConfig,
            'capacity_type': str,
            'version': str,
            'release_version': str
        }

        self.attribute_map = {
            'nodegroup_name': 'nodegroupName',
            'scaling_config': 'scalingConfig',
            'disk_size': 'diskSize',
            'subnets': 'subnets',
            'instance_types': 'instanceTypes',
            'ami_type': 'amiType',
            'remote_access': 'remoteAccess',
            'node_role': 'nodeRole',
            'labels': 'labels',
            'taints': 'taints',
            'tags': 'tags',
            'client_request_token': 'clientRequestToken',
            'launch_template': 'launchTemplate',
            'update_config': 'updateConfig',
            'capacity_type': 'capacityType',
            'version': 'version',
            'release_version': 'releaseVersion'
        }

        self._nodegroup_name = nodegroup_name
        self._scaling_config = scaling_config
        self._disk_size = disk_size
        self._subnets = subnets
        self._instance_types = instance_types
        self._ami_type = ami_type
        self._remote_access = remote_access
        self._node_role = node_role
        self._labels = labels
        self._taints = taints
        self._tags = tags
        self._client_request_token = client_request_token
        self._launch_template = launch_template
        self._update_config = update_config
        self._capacity_type = capacity_type
        self._version = version
        self._release_version = release_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNodegroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNodegroup_request of this CreateNodegroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodegroup_name(self):
        """Gets the nodegroup_name of this CreateNodegroupRequest.

        The unique name to give your node group.

        :return: The nodegroup_name of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._nodegroup_name

    @nodegroup_name.setter
    def nodegroup_name(self, nodegroup_name):
        """Sets the nodegroup_name of this CreateNodegroupRequest.

        The unique name to give your node group.

        :param nodegroup_name: The nodegroup_name of this CreateNodegroupRequest.
        :type nodegroup_name: str
        """
        if nodegroup_name is None:
            raise ValueError("Invalid value for `nodegroup_name`, must not be `None`")

        self._nodegroup_name = nodegroup_name

    @property
    def scaling_config(self):
        """Gets the scaling_config of this CreateNodegroupRequest.


        :return: The scaling_config of this CreateNodegroupRequest.
        :rtype: CreateNodegroupRequestScalingConfig
        """
        return self._scaling_config

    @scaling_config.setter
    def scaling_config(self, scaling_config):
        """Sets the scaling_config of this CreateNodegroupRequest.


        :param scaling_config: The scaling_config of this CreateNodegroupRequest.
        :type scaling_config: CreateNodegroupRequestScalingConfig
        """

        self._scaling_config = scaling_config

    @property
    def disk_size(self):
        """Gets the disk_size of this CreateNodegroupRequest.

        The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify <code>launchTemplate</code>, then don't specify <code>diskSize</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The disk_size of this CreateNodegroupRequest.
        :rtype: int
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this CreateNodegroupRequest.

        The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify <code>launchTemplate</code>, then don't specify <code>diskSize</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param disk_size: The disk_size of this CreateNodegroupRequest.
        :type disk_size: int
        """

        self._disk_size = disk_size

    @property
    def subnets(self):
        """Gets the subnets of this CreateNodegroupRequest.

        The subnets to use for the Auto Scaling group that is created for your node group. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html\"> <code>SubnetId</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The subnets of this CreateNodegroupRequest.
        :rtype: List[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateNodegroupRequest.

        The subnets to use for the Auto Scaling group that is created for your node group. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html\"> <code>SubnetId</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param subnets: The subnets of this CreateNodegroupRequest.
        :type subnets: List[str]
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")

        self._subnets = subnets

    @property
    def instance_types(self):
        """Gets the instance_types of this CreateNodegroupRequest.

        Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the <code>amiType</code> parameter. If you specify <code>launchTemplate</code>, then you can specify zero or one instance type in your launch template <i>or</i> you can specify 0-20 instance types for <code>instanceTypes</code>. If however, you specify an instance type in your launch template <i>and</i> specify any <code>instanceTypes</code>, the node group deployment will fail. If you don't specify an instance type in a launch template or for <code>instanceTypes</code>, then <code>t3.medium</code> is used, by default. If you specify <code>Spot</code> for <code>capacityType</code>, then we recommend specifying multiple values for <code>instanceTypes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types\">Managed node group capacity types</a> and <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The instance_types of this CreateNodegroupRequest.
        :rtype: List[str]
        """
        return self._instance_types

    @instance_types.setter
    def instance_types(self, instance_types):
        """Sets the instance_types of this CreateNodegroupRequest.

        Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the <code>amiType</code> parameter. If you specify <code>launchTemplate</code>, then you can specify zero or one instance type in your launch template <i>or</i> you can specify 0-20 instance types for <code>instanceTypes</code>. If however, you specify an instance type in your launch template <i>and</i> specify any <code>instanceTypes</code>, the node group deployment will fail. If you don't specify an instance type in a launch template or for <code>instanceTypes</code>, then <code>t3.medium</code> is used, by default. If you specify <code>Spot</code> for <code>capacityType</code>, then we recommend specifying multiple values for <code>instanceTypes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types\">Managed node group capacity types</a> and <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param instance_types: The instance_types of this CreateNodegroupRequest.
        :type instance_types: List[str]
        """

        self._instance_types = instance_types

    @property
    def ami_type(self):
        """Gets the ami_type of this CreateNodegroupRequest.

        The AMI type for your node group. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>amiType</code>, or the node group deployment will fail. If your launch template uses a Windows custom AMI, then add <code>eks:kube-proxy-windows</code> to your Windows nodes <code>rolearn</code> in the <code>aws-auth</code> <code>ConfigMap</code>. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The ami_type of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._ami_type

    @ami_type.setter
    def ami_type(self, ami_type):
        """Sets the ami_type of this CreateNodegroupRequest.

        The AMI type for your node group. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>amiType</code>, or the node group deployment will fail. If your launch template uses a Windows custom AMI, then add <code>eks:kube-proxy-windows</code> to your Windows nodes <code>rolearn</code> in the <code>aws-auth</code> <code>ConfigMap</code>. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param ami_type: The ami_type of this CreateNodegroupRequest.
        :type ami_type: str
        """
        allowed_values = ["AL2_x86_64", "AL2_x86_64_GPU", "AL2_ARM_64", "CUSTOM", "BOTTLEROCKET_ARM_64", "BOTTLEROCKET_x86_64", "BOTTLEROCKET_ARM_64_NVIDIA", "BOTTLEROCKET_x86_64_NVIDIA", "WINDOWS_CORE_2019_x86_64", "WINDOWS_FULL_2019_x86_64", "WINDOWS_CORE_2022_x86_64", "WINDOWS_FULL_2022_x86_64"]  # noqa: E501
        if ami_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ami_type` ({0}), must be one of {1}"
                .format(ami_type, allowed_values)
            )

        self._ami_type = ami_type

    @property
    def remote_access(self):
        """Gets the remote_access of this CreateNodegroupRequest.


        :return: The remote_access of this CreateNodegroupRequest.
        :rtype: CreateNodegroupRequestRemoteAccess
        """
        return self._remote_access

    @remote_access.setter
    def remote_access(self, remote_access):
        """Sets the remote_access of this CreateNodegroupRequest.


        :param remote_access: The remote_access of this CreateNodegroupRequest.
        :type remote_access: CreateNodegroupRequestRemoteAccess
        """

        self._remote_access = remote_access

    @property
    def node_role(self):
        """Gets the node_role of this CreateNodegroupRequest.

        The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node <code>kubelet</code> daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html\">Amazon EKS node IAM role</a> in the <i> <i>Amazon EKS User Guide</i> </i>. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html\"> <code>IamInstanceProfile</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The node_role of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._node_role

    @node_role.setter
    def node_role(self, node_role):
        """Sets the node_role of this CreateNodegroupRequest.

        The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node <code>kubelet</code> daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html\">Amazon EKS node IAM role</a> in the <i> <i>Amazon EKS User Guide</i> </i>. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html\"> <code>IamInstanceProfile</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param node_role: The node_role of this CreateNodegroupRequest.
        :type node_role: str
        """
        if node_role is None:
            raise ValueError("Invalid value for `node_role`, must not be `None`")

        self._node_role = node_role

    @property
    def labels(self):
        """Gets the labels of this CreateNodegroupRequest.

        The Kubernetes labels to be applied to the nodes in the node group when they are created.

        :return: The labels of this CreateNodegroupRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateNodegroupRequest.

        The Kubernetes labels to be applied to the nodes in the node group when they are created.

        :param labels: The labels of this CreateNodegroupRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def taints(self):
        """Gets the taints of this CreateNodegroupRequest.

        The Kubernetes taints to be applied to the nodes in the node group. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html\">Node taints on managed node groups</a>.

        :return: The taints of this CreateNodegroupRequest.
        :rtype: List[Taint]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this CreateNodegroupRequest.

        The Kubernetes taints to be applied to the nodes in the node group. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html\">Node taints on managed node groups</a>.

        :param taints: The taints of this CreateNodegroupRequest.
        :type taints: List[Taint]
        """

        self._taints = taints

    @property
    def tags(self):
        """Gets the tags of this CreateNodegroupRequest.

        The metadata to apply to the node group to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.

        :return: The tags of this CreateNodegroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateNodegroupRequest.

        The metadata to apply to the node group to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.

        :param tags: The tags of this CreateNodegroupRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateNodegroupRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateNodegroupRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateNodegroupRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def launch_template(self):
        """Gets the launch_template of this CreateNodegroupRequest.


        :return: The launch_template of this CreateNodegroupRequest.
        :rtype: CreateNodegroupRequestLaunchTemplate
        """
        return self._launch_template

    @launch_template.setter
    def launch_template(self, launch_template):
        """Sets the launch_template of this CreateNodegroupRequest.


        :param launch_template: The launch_template of this CreateNodegroupRequest.
        :type launch_template: CreateNodegroupRequestLaunchTemplate
        """

        self._launch_template = launch_template

    @property
    def update_config(self):
        """Gets the update_config of this CreateNodegroupRequest.


        :return: The update_config of this CreateNodegroupRequest.
        :rtype: CreateNodegroupRequestUpdateConfig
        """
        return self._update_config

    @update_config.setter
    def update_config(self, update_config):
        """Sets the update_config of this CreateNodegroupRequest.


        :param update_config: The update_config of this CreateNodegroupRequest.
        :type update_config: CreateNodegroupRequestUpdateConfig
        """

        self._update_config = update_config

    @property
    def capacity_type(self):
        """Gets the capacity_type of this CreateNodegroupRequest.

        The capacity type for your node group.

        :return: The capacity_type of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._capacity_type

    @capacity_type.setter
    def capacity_type(self, capacity_type):
        """Sets the capacity_type of this CreateNodegroupRequest.

        The capacity type for your node group.

        :param capacity_type: The capacity_type of this CreateNodegroupRequest.
        :type capacity_type: str
        """
        allowed_values = ["ON_DEMAND", "SPOT"]  # noqa: E501
        if capacity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `capacity_type` ({0}), must be one of {1}"
                .format(capacity_type, allowed_values)
            )

        self._capacity_type = capacity_type

    @property
    def version(self):
        """Gets the version of this CreateNodegroupRequest.

        The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>version</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The version of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateNodegroupRequest.

        The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>version</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param version: The version of this CreateNodegroupRequest.
        :type version: str
        """

        self._version = version

    @property
    def release_version(self):
        """Gets the release_version of this CreateNodegroupRequest.

        <p>The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html\">Amazon EKS optimized Amazon Linux AMI versions</a> in the <i>Amazon EKS User Guide</i>. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html\">Amazon EKS optimized Windows AMI versions</a> in the <i>Amazon EKS User Guide</i>.</p> <p>If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>releaseVersion</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.</p>

        :return: The release_version of this CreateNodegroupRequest.
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this CreateNodegroupRequest.

        <p>The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html\">Amazon EKS optimized Amazon Linux AMI versions</a> in the <i>Amazon EKS User Guide</i>. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html\">Amazon EKS optimized Windows AMI versions</a> in the <i>Amazon EKS User Guide</i>.</p> <p>If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>releaseVersion</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.</p>

        :param release_version: The release_version of this CreateNodegroupRequest.
        :type release_version: str
        """

        self._release_version = release_version
