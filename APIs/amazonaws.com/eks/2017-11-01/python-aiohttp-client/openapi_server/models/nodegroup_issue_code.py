# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodegroupIssueCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AUTOSCALINGGROUPNOTFOUND = 'AutoScalingGroupNotFound'
    AUTOSCALINGGROUPINVALIDCONFIGURATION = 'AutoScalingGroupInvalidConfiguration'
    EC2SECURITYGROUPNOTFOUND = 'Ec2SecurityGroupNotFound'
    EC2SECURITYGROUPDELETIONFAILURE = 'Ec2SecurityGroupDeletionFailure'
    EC2LAUNCHTEMPLATENOTFOUND = 'Ec2LaunchTemplateNotFound'
    EC2LAUNCHTEMPLATEVERSIONMISMATCH = 'Ec2LaunchTemplateVersionMismatch'
    EC2SUBNETNOTFOUND = 'Ec2SubnetNotFound'
    EC2SUBNETINVALIDCONFIGURATION = 'Ec2SubnetInvalidConfiguration'
    IAMINSTANCEPROFILENOTFOUND = 'IamInstanceProfileNotFound'
    EC2SUBNETMISSINGIPV6ASSIGNMENT = 'Ec2SubnetMissingIpv6Assignment'
    IAMLIMITEXCEEDED = 'IamLimitExceeded'
    IAMNODEROLENOTFOUND = 'IamNodeRoleNotFound'
    NODECREATIONFAILURE = 'NodeCreationFailure'
    ASGINSTANCELAUNCHFAILURES = 'AsgInstanceLaunchFailures'
    INSTANCELIMITEXCEEDED = 'InstanceLimitExceeded'
    INSUFFICIENTFREEADDRESSES = 'InsufficientFreeAddresses'
    ACCESSDENIED = 'AccessDenied'
    INTERNALFAILURE = 'InternalFailure'
    CLUSTERUNREACHABLE = 'ClusterUnreachable'
    AMIIDNOTFOUND = 'AmiIdNotFound'
    AUTOSCALINGGROUPOPTINREQUIRED = 'AutoScalingGroupOptInRequired'
    AUTOSCALINGGROUPRATELIMITEXCEEDED = 'AutoScalingGroupRateLimitExceeded'
    EC2LAUNCHTEMPLATEDELETIONFAILURE = 'Ec2LaunchTemplateDeletionFailure'
    EC2LAUNCHTEMPLATEINVALIDCONFIGURATION = 'Ec2LaunchTemplateInvalidConfiguration'
    EC2LAUNCHTEMPLATEMAXLIMITEXCEEDED = 'Ec2LaunchTemplateMaxLimitExceeded'
    EC2SUBNETLISTTOOLONG = 'Ec2SubnetListTooLong'
    IAMTHROTTLING = 'IamThrottling'
    NODETERMINATIONFAILURE = 'NodeTerminationFailure'
    PODEVICTIONFAILURE = 'PodEvictionFailure'
    SOURCEEC2LAUNCHTEMPLATENOTFOUND = 'SourceEc2LaunchTemplateNotFound'
    LIMITEXCEEDED = 'LimitExceeded'
    UNKNOWN = 'Unknown'
    AUTOSCALINGGROUPINSTANCEREFRESHACTIVE = 'AutoScalingGroupInstanceRefreshActive'

    def __init__(self):
        """NodegroupIssueCode - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodegroupIssueCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodegroupIssueCode of this NodegroupIssueCode.
        """
        return util.deserialize_model(dikt, cls)
