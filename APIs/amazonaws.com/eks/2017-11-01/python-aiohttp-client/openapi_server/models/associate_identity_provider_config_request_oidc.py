# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateIdentityProviderConfigRequestOidc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_provider_config_name: str=None, issuer_url: str=None, client_id: str=None, username_claim: str=None, username_prefix: str=None, groups_claim: str=None, groups_prefix: str=None, required_claims: Dict=None):
        """AssociateIdentityProviderConfigRequestOidc - a model defined in OpenAPI

        :param identity_provider_config_name: The identity_provider_config_name of this AssociateIdentityProviderConfigRequestOidc.
        :param issuer_url: The issuer_url of this AssociateIdentityProviderConfigRequestOidc.
        :param client_id: The client_id of this AssociateIdentityProviderConfigRequestOidc.
        :param username_claim: The username_claim of this AssociateIdentityProviderConfigRequestOidc.
        :param username_prefix: The username_prefix of this AssociateIdentityProviderConfigRequestOidc.
        :param groups_claim: The groups_claim of this AssociateIdentityProviderConfigRequestOidc.
        :param groups_prefix: The groups_prefix of this AssociateIdentityProviderConfigRequestOidc.
        :param required_claims: The required_claims of this AssociateIdentityProviderConfigRequestOidc.
        """
        self.openapi_types = {
            'identity_provider_config_name': str,
            'issuer_url': str,
            'client_id': str,
            'username_claim': str,
            'username_prefix': str,
            'groups_claim': str,
            'groups_prefix': str,
            'required_claims': Dict
        }

        self.attribute_map = {
            'identity_provider_config_name': 'identityProviderConfigName',
            'issuer_url': 'issuerUrl',
            'client_id': 'clientId',
            'username_claim': 'usernameClaim',
            'username_prefix': 'usernamePrefix',
            'groups_claim': 'groupsClaim',
            'groups_prefix': 'groupsPrefix',
            'required_claims': 'requiredClaims'
        }

        self._identity_provider_config_name = identity_provider_config_name
        self._issuer_url = issuer_url
        self._client_id = client_id
        self._username_claim = username_claim
        self._username_prefix = username_prefix
        self._groups_claim = groups_claim
        self._groups_prefix = groups_prefix
        self._required_claims = required_claims

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateIdentityProviderConfigRequestOidc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateIdentityProviderConfigRequest_oidc of this AssociateIdentityProviderConfigRequestOidc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_provider_config_name(self):
        """Gets the identity_provider_config_name of this AssociateIdentityProviderConfigRequestOidc.


        :return: The identity_provider_config_name of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._identity_provider_config_name

    @identity_provider_config_name.setter
    def identity_provider_config_name(self, identity_provider_config_name):
        """Sets the identity_provider_config_name of this AssociateIdentityProviderConfigRequestOidc.


        :param identity_provider_config_name: The identity_provider_config_name of this AssociateIdentityProviderConfigRequestOidc.
        :type identity_provider_config_name: str
        """
        if identity_provider_config_name is None:
            raise ValueError("Invalid value for `identity_provider_config_name`, must not be `None`")

        self._identity_provider_config_name = identity_provider_config_name

    @property
    def issuer_url(self):
        """Gets the issuer_url of this AssociateIdentityProviderConfigRequestOidc.


        :return: The issuer_url of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._issuer_url

    @issuer_url.setter
    def issuer_url(self, issuer_url):
        """Sets the issuer_url of this AssociateIdentityProviderConfigRequestOidc.


        :param issuer_url: The issuer_url of this AssociateIdentityProviderConfigRequestOidc.
        :type issuer_url: str
        """
        if issuer_url is None:
            raise ValueError("Invalid value for `issuer_url`, must not be `None`")

        self._issuer_url = issuer_url

    @property
    def client_id(self):
        """Gets the client_id of this AssociateIdentityProviderConfigRequestOidc.


        :return: The client_id of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AssociateIdentityProviderConfigRequestOidc.


        :param client_id: The client_id of this AssociateIdentityProviderConfigRequestOidc.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def username_claim(self):
        """Gets the username_claim of this AssociateIdentityProviderConfigRequestOidc.


        :return: The username_claim of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._username_claim

    @username_claim.setter
    def username_claim(self, username_claim):
        """Sets the username_claim of this AssociateIdentityProviderConfigRequestOidc.


        :param username_claim: The username_claim of this AssociateIdentityProviderConfigRequestOidc.
        :type username_claim: str
        """

        self._username_claim = username_claim

    @property
    def username_prefix(self):
        """Gets the username_prefix of this AssociateIdentityProviderConfigRequestOidc.


        :return: The username_prefix of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._username_prefix

    @username_prefix.setter
    def username_prefix(self, username_prefix):
        """Sets the username_prefix of this AssociateIdentityProviderConfigRequestOidc.


        :param username_prefix: The username_prefix of this AssociateIdentityProviderConfigRequestOidc.
        :type username_prefix: str
        """

        self._username_prefix = username_prefix

    @property
    def groups_claim(self):
        """Gets the groups_claim of this AssociateIdentityProviderConfigRequestOidc.


        :return: The groups_claim of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._groups_claim

    @groups_claim.setter
    def groups_claim(self, groups_claim):
        """Sets the groups_claim of this AssociateIdentityProviderConfigRequestOidc.


        :param groups_claim: The groups_claim of this AssociateIdentityProviderConfigRequestOidc.
        :type groups_claim: str
        """

        self._groups_claim = groups_claim

    @property
    def groups_prefix(self):
        """Gets the groups_prefix of this AssociateIdentityProviderConfigRequestOidc.


        :return: The groups_prefix of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: str
        """
        return self._groups_prefix

    @groups_prefix.setter
    def groups_prefix(self, groups_prefix):
        """Sets the groups_prefix of this AssociateIdentityProviderConfigRequestOidc.


        :param groups_prefix: The groups_prefix of this AssociateIdentityProviderConfigRequestOidc.
        :type groups_prefix: str
        """

        self._groups_prefix = groups_prefix

    @property
    def required_claims(self):
        """Gets the required_claims of this AssociateIdentityProviderConfigRequestOidc.


        :return: The required_claims of this AssociateIdentityProviderConfigRequestOidc.
        :rtype: Dict
        """
        return self._required_claims

    @required_claims.setter
    def required_claims(self, required_claims):
        """Sets the required_claims of this AssociateIdentityProviderConfigRequestOidc.


        :param required_claims: The required_claims of this AssociateIdentityProviderConfigRequestOidc.
        :type required_claims: Dict
        """

        self._required_claims = required_claims
