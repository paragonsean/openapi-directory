# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fargate_profile_status import FargateProfileStatus
from openapi_server import util


class FargateProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fargate_profile_name: str=None, fargate_profile_arn: str=None, cluster_name: str=None, created_at: datetime=None, pod_execution_role_arn: str=None, subnets: List=None, selectors: List=None, status: FargateProfileStatus=None, tags: Dict=None):
        """FargateProfile - a model defined in OpenAPI

        :param fargate_profile_name: The fargate_profile_name of this FargateProfile.
        :param fargate_profile_arn: The fargate_profile_arn of this FargateProfile.
        :param cluster_name: The cluster_name of this FargateProfile.
        :param created_at: The created_at of this FargateProfile.
        :param pod_execution_role_arn: The pod_execution_role_arn of this FargateProfile.
        :param subnets: The subnets of this FargateProfile.
        :param selectors: The selectors of this FargateProfile.
        :param status: The status of this FargateProfile.
        :param tags: The tags of this FargateProfile.
        """
        self.openapi_types = {
            'fargate_profile_name': str,
            'fargate_profile_arn': str,
            'cluster_name': str,
            'created_at': datetime,
            'pod_execution_role_arn': str,
            'subnets': List,
            'selectors': List,
            'status': FargateProfileStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'fargate_profile_name': 'fargateProfileName',
            'fargate_profile_arn': 'fargateProfileArn',
            'cluster_name': 'clusterName',
            'created_at': 'createdAt',
            'pod_execution_role_arn': 'podExecutionRoleArn',
            'subnets': 'subnets',
            'selectors': 'selectors',
            'status': 'status',
            'tags': 'tags'
        }

        self._fargate_profile_name = fargate_profile_name
        self._fargate_profile_arn = fargate_profile_arn
        self._cluster_name = cluster_name
        self._created_at = created_at
        self._pod_execution_role_arn = pod_execution_role_arn
        self._subnets = subnets
        self._selectors = selectors
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FargateProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FargateProfile of this FargateProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fargate_profile_name(self):
        """Gets the fargate_profile_name of this FargateProfile.


        :return: The fargate_profile_name of this FargateProfile.
        :rtype: str
        """
        return self._fargate_profile_name

    @fargate_profile_name.setter
    def fargate_profile_name(self, fargate_profile_name):
        """Sets the fargate_profile_name of this FargateProfile.


        :param fargate_profile_name: The fargate_profile_name of this FargateProfile.
        :type fargate_profile_name: str
        """

        self._fargate_profile_name = fargate_profile_name

    @property
    def fargate_profile_arn(self):
        """Gets the fargate_profile_arn of this FargateProfile.


        :return: The fargate_profile_arn of this FargateProfile.
        :rtype: str
        """
        return self._fargate_profile_arn

    @fargate_profile_arn.setter
    def fargate_profile_arn(self, fargate_profile_arn):
        """Sets the fargate_profile_arn of this FargateProfile.


        :param fargate_profile_arn: The fargate_profile_arn of this FargateProfile.
        :type fargate_profile_arn: str
        """

        self._fargate_profile_arn = fargate_profile_arn

    @property
    def cluster_name(self):
        """Gets the cluster_name of this FargateProfile.


        :return: The cluster_name of this FargateProfile.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this FargateProfile.


        :param cluster_name: The cluster_name of this FargateProfile.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def created_at(self):
        """Gets the created_at of this FargateProfile.


        :return: The created_at of this FargateProfile.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FargateProfile.


        :param created_at: The created_at of this FargateProfile.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def pod_execution_role_arn(self):
        """Gets the pod_execution_role_arn of this FargateProfile.


        :return: The pod_execution_role_arn of this FargateProfile.
        :rtype: str
        """
        return self._pod_execution_role_arn

    @pod_execution_role_arn.setter
    def pod_execution_role_arn(self, pod_execution_role_arn):
        """Sets the pod_execution_role_arn of this FargateProfile.


        :param pod_execution_role_arn: The pod_execution_role_arn of this FargateProfile.
        :type pod_execution_role_arn: str
        """

        self._pod_execution_role_arn = pod_execution_role_arn

    @property
    def subnets(self):
        """Gets the subnets of this FargateProfile.


        :return: The subnets of this FargateProfile.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this FargateProfile.


        :param subnets: The subnets of this FargateProfile.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def selectors(self):
        """Gets the selectors of this FargateProfile.


        :return: The selectors of this FargateProfile.
        :rtype: List
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this FargateProfile.


        :param selectors: The selectors of this FargateProfile.
        :type selectors: List
        """

        self._selectors = selectors

    @property
    def status(self):
        """Gets the status of this FargateProfile.


        :return: The status of this FargateProfile.
        :rtype: FargateProfileStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FargateProfile.


        :param status: The status of this FargateProfile.
        :type status: FargateProfileStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this FargateProfile.


        :return: The tags of this FargateProfile.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FargateProfile.


        :param tags: The tags of this FargateProfile.
        :type tags: Dict
        """

        self._tags = tags
