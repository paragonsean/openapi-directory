# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ami_types import AMITypes
from openapi_server.models.capacity_types import CapacityTypes
from openapi_server.models.create_nodegroup_request_update_config import CreateNodegroupRequestUpdateConfig
from openapi_server.models.nodegroup_health import NodegroupHealth
from openapi_server.models.nodegroup_launch_template import NodegroupLaunchTemplate
from openapi_server.models.nodegroup_remote_access import NodegroupRemoteAccess
from openapi_server.models.nodegroup_resources import NodegroupResources
from openapi_server.models.nodegroup_scaling_config import NodegroupScalingConfig
from openapi_server.models.nodegroup_status import NodegroupStatus
from openapi_server import util


class DescribeNodegroupResponseNodegroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodegroup_name: str=None, nodegroup_arn: str=None, cluster_name: str=None, version: str=None, release_version: str=None, created_at: datetime=None, modified_at: datetime=None, status: NodegroupStatus=None, capacity_type: CapacityTypes=None, scaling_config: NodegroupScalingConfig=None, instance_types: List=None, subnets: List=None, remote_access: NodegroupRemoteAccess=None, ami_type: AMITypes=None, node_role: str=None, labels: Dict=None, taints: List=None, resources: NodegroupResources=None, disk_size: int=None, health: NodegroupHealth=None, update_config: CreateNodegroupRequestUpdateConfig=None, launch_template: NodegroupLaunchTemplate=None, tags: Dict=None):
        """DescribeNodegroupResponseNodegroup - a model defined in OpenAPI

        :param nodegroup_name: The nodegroup_name of this DescribeNodegroupResponseNodegroup.
        :param nodegroup_arn: The nodegroup_arn of this DescribeNodegroupResponseNodegroup.
        :param cluster_name: The cluster_name of this DescribeNodegroupResponseNodegroup.
        :param version: The version of this DescribeNodegroupResponseNodegroup.
        :param release_version: The release_version of this DescribeNodegroupResponseNodegroup.
        :param created_at: The created_at of this DescribeNodegroupResponseNodegroup.
        :param modified_at: The modified_at of this DescribeNodegroupResponseNodegroup.
        :param status: The status of this DescribeNodegroupResponseNodegroup.
        :param capacity_type: The capacity_type of this DescribeNodegroupResponseNodegroup.
        :param scaling_config: The scaling_config of this DescribeNodegroupResponseNodegroup.
        :param instance_types: The instance_types of this DescribeNodegroupResponseNodegroup.
        :param subnets: The subnets of this DescribeNodegroupResponseNodegroup.
        :param remote_access: The remote_access of this DescribeNodegroupResponseNodegroup.
        :param ami_type: The ami_type of this DescribeNodegroupResponseNodegroup.
        :param node_role: The node_role of this DescribeNodegroupResponseNodegroup.
        :param labels: The labels of this DescribeNodegroupResponseNodegroup.
        :param taints: The taints of this DescribeNodegroupResponseNodegroup.
        :param resources: The resources of this DescribeNodegroupResponseNodegroup.
        :param disk_size: The disk_size of this DescribeNodegroupResponseNodegroup.
        :param health: The health of this DescribeNodegroupResponseNodegroup.
        :param update_config: The update_config of this DescribeNodegroupResponseNodegroup.
        :param launch_template: The launch_template of this DescribeNodegroupResponseNodegroup.
        :param tags: The tags of this DescribeNodegroupResponseNodegroup.
        """
        self.openapi_types = {
            'nodegroup_name': str,
            'nodegroup_arn': str,
            'cluster_name': str,
            'version': str,
            'release_version': str,
            'created_at': datetime,
            'modified_at': datetime,
            'status': NodegroupStatus,
            'capacity_type': CapacityTypes,
            'scaling_config': NodegroupScalingConfig,
            'instance_types': List,
            'subnets': List,
            'remote_access': NodegroupRemoteAccess,
            'ami_type': AMITypes,
            'node_role': str,
            'labels': Dict,
            'taints': List,
            'resources': NodegroupResources,
            'disk_size': int,
            'health': NodegroupHealth,
            'update_config': CreateNodegroupRequestUpdateConfig,
            'launch_template': NodegroupLaunchTemplate,
            'tags': Dict
        }

        self.attribute_map = {
            'nodegroup_name': 'nodegroupName',
            'nodegroup_arn': 'nodegroupArn',
            'cluster_name': 'clusterName',
            'version': 'version',
            'release_version': 'releaseVersion',
            'created_at': 'createdAt',
            'modified_at': 'modifiedAt',
            'status': 'status',
            'capacity_type': 'capacityType',
            'scaling_config': 'scalingConfig',
            'instance_types': 'instanceTypes',
            'subnets': 'subnets',
            'remote_access': 'remoteAccess',
            'ami_type': 'amiType',
            'node_role': 'nodeRole',
            'labels': 'labels',
            'taints': 'taints',
            'resources': 'resources',
            'disk_size': 'diskSize',
            'health': 'health',
            'update_config': 'updateConfig',
            'launch_template': 'launchTemplate',
            'tags': 'tags'
        }

        self._nodegroup_name = nodegroup_name
        self._nodegroup_arn = nodegroup_arn
        self._cluster_name = cluster_name
        self._version = version
        self._release_version = release_version
        self._created_at = created_at
        self._modified_at = modified_at
        self._status = status
        self._capacity_type = capacity_type
        self._scaling_config = scaling_config
        self._instance_types = instance_types
        self._subnets = subnets
        self._remote_access = remote_access
        self._ami_type = ami_type
        self._node_role = node_role
        self._labels = labels
        self._taints = taints
        self._resources = resources
        self._disk_size = disk_size
        self._health = health
        self._update_config = update_config
        self._launch_template = launch_template
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeNodegroupResponseNodegroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeNodegroupResponse_nodegroup of this DescribeNodegroupResponseNodegroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodegroup_name(self):
        """Gets the nodegroup_name of this DescribeNodegroupResponseNodegroup.


        :return: The nodegroup_name of this DescribeNodegroupResponseNodegroup.
        :rtype: str
        """
        return self._nodegroup_name

    @nodegroup_name.setter
    def nodegroup_name(self, nodegroup_name):
        """Sets the nodegroup_name of this DescribeNodegroupResponseNodegroup.


        :param nodegroup_name: The nodegroup_name of this DescribeNodegroupResponseNodegroup.
        :type nodegroup_name: str
        """

        self._nodegroup_name = nodegroup_name

    @property
    def nodegroup_arn(self):
        """Gets the nodegroup_arn of this DescribeNodegroupResponseNodegroup.


        :return: The nodegroup_arn of this DescribeNodegroupResponseNodegroup.
        :rtype: str
        """
        return self._nodegroup_arn

    @nodegroup_arn.setter
    def nodegroup_arn(self, nodegroup_arn):
        """Sets the nodegroup_arn of this DescribeNodegroupResponseNodegroup.


        :param nodegroup_arn: The nodegroup_arn of this DescribeNodegroupResponseNodegroup.
        :type nodegroup_arn: str
        """

        self._nodegroup_arn = nodegroup_arn

    @property
    def cluster_name(self):
        """Gets the cluster_name of this DescribeNodegroupResponseNodegroup.


        :return: The cluster_name of this DescribeNodegroupResponseNodegroup.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this DescribeNodegroupResponseNodegroup.


        :param cluster_name: The cluster_name of this DescribeNodegroupResponseNodegroup.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def version(self):
        """Gets the version of this DescribeNodegroupResponseNodegroup.


        :return: The version of this DescribeNodegroupResponseNodegroup.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DescribeNodegroupResponseNodegroup.


        :param version: The version of this DescribeNodegroupResponseNodegroup.
        :type version: str
        """

        self._version = version

    @property
    def release_version(self):
        """Gets the release_version of this DescribeNodegroupResponseNodegroup.


        :return: The release_version of this DescribeNodegroupResponseNodegroup.
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this DescribeNodegroupResponseNodegroup.


        :param release_version: The release_version of this DescribeNodegroupResponseNodegroup.
        :type release_version: str
        """

        self._release_version = release_version

    @property
    def created_at(self):
        """Gets the created_at of this DescribeNodegroupResponseNodegroup.


        :return: The created_at of this DescribeNodegroupResponseNodegroup.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DescribeNodegroupResponseNodegroup.


        :param created_at: The created_at of this DescribeNodegroupResponseNodegroup.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this DescribeNodegroupResponseNodegroup.


        :return: The modified_at of this DescribeNodegroupResponseNodegroup.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this DescribeNodegroupResponseNodegroup.


        :param modified_at: The modified_at of this DescribeNodegroupResponseNodegroup.
        :type modified_at: datetime
        """

        self._modified_at = modified_at

    @property
    def status(self):
        """Gets the status of this DescribeNodegroupResponseNodegroup.


        :return: The status of this DescribeNodegroupResponseNodegroup.
        :rtype: NodegroupStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeNodegroupResponseNodegroup.


        :param status: The status of this DescribeNodegroupResponseNodegroup.
        :type status: NodegroupStatus
        """

        self._status = status

    @property
    def capacity_type(self):
        """Gets the capacity_type of this DescribeNodegroupResponseNodegroup.


        :return: The capacity_type of this DescribeNodegroupResponseNodegroup.
        :rtype: CapacityTypes
        """
        return self._capacity_type

    @capacity_type.setter
    def capacity_type(self, capacity_type):
        """Sets the capacity_type of this DescribeNodegroupResponseNodegroup.


        :param capacity_type: The capacity_type of this DescribeNodegroupResponseNodegroup.
        :type capacity_type: CapacityTypes
        """

        self._capacity_type = capacity_type

    @property
    def scaling_config(self):
        """Gets the scaling_config of this DescribeNodegroupResponseNodegroup.


        :return: The scaling_config of this DescribeNodegroupResponseNodegroup.
        :rtype: NodegroupScalingConfig
        """
        return self._scaling_config

    @scaling_config.setter
    def scaling_config(self, scaling_config):
        """Sets the scaling_config of this DescribeNodegroupResponseNodegroup.


        :param scaling_config: The scaling_config of this DescribeNodegroupResponseNodegroup.
        :type scaling_config: NodegroupScalingConfig
        """

        self._scaling_config = scaling_config

    @property
    def instance_types(self):
        """Gets the instance_types of this DescribeNodegroupResponseNodegroup.


        :return: The instance_types of this DescribeNodegroupResponseNodegroup.
        :rtype: List
        """
        return self._instance_types

    @instance_types.setter
    def instance_types(self, instance_types):
        """Sets the instance_types of this DescribeNodegroupResponseNodegroup.


        :param instance_types: The instance_types of this DescribeNodegroupResponseNodegroup.
        :type instance_types: List
        """

        self._instance_types = instance_types

    @property
    def subnets(self):
        """Gets the subnets of this DescribeNodegroupResponseNodegroup.


        :return: The subnets of this DescribeNodegroupResponseNodegroup.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this DescribeNodegroupResponseNodegroup.


        :param subnets: The subnets of this DescribeNodegroupResponseNodegroup.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def remote_access(self):
        """Gets the remote_access of this DescribeNodegroupResponseNodegroup.


        :return: The remote_access of this DescribeNodegroupResponseNodegroup.
        :rtype: NodegroupRemoteAccess
        """
        return self._remote_access

    @remote_access.setter
    def remote_access(self, remote_access):
        """Sets the remote_access of this DescribeNodegroupResponseNodegroup.


        :param remote_access: The remote_access of this DescribeNodegroupResponseNodegroup.
        :type remote_access: NodegroupRemoteAccess
        """

        self._remote_access = remote_access

    @property
    def ami_type(self):
        """Gets the ami_type of this DescribeNodegroupResponseNodegroup.


        :return: The ami_type of this DescribeNodegroupResponseNodegroup.
        :rtype: AMITypes
        """
        return self._ami_type

    @ami_type.setter
    def ami_type(self, ami_type):
        """Sets the ami_type of this DescribeNodegroupResponseNodegroup.


        :param ami_type: The ami_type of this DescribeNodegroupResponseNodegroup.
        :type ami_type: AMITypes
        """

        self._ami_type = ami_type

    @property
    def node_role(self):
        """Gets the node_role of this DescribeNodegroupResponseNodegroup.


        :return: The node_role of this DescribeNodegroupResponseNodegroup.
        :rtype: str
        """
        return self._node_role

    @node_role.setter
    def node_role(self, node_role):
        """Sets the node_role of this DescribeNodegroupResponseNodegroup.


        :param node_role: The node_role of this DescribeNodegroupResponseNodegroup.
        :type node_role: str
        """

        self._node_role = node_role

    @property
    def labels(self):
        """Gets the labels of this DescribeNodegroupResponseNodegroup.


        :return: The labels of this DescribeNodegroupResponseNodegroup.
        :rtype: Dict
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DescribeNodegroupResponseNodegroup.


        :param labels: The labels of this DescribeNodegroupResponseNodegroup.
        :type labels: Dict
        """

        self._labels = labels

    @property
    def taints(self):
        """Gets the taints of this DescribeNodegroupResponseNodegroup.


        :return: The taints of this DescribeNodegroupResponseNodegroup.
        :rtype: List
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this DescribeNodegroupResponseNodegroup.


        :param taints: The taints of this DescribeNodegroupResponseNodegroup.
        :type taints: List
        """

        self._taints = taints

    @property
    def resources(self):
        """Gets the resources of this DescribeNodegroupResponseNodegroup.


        :return: The resources of this DescribeNodegroupResponseNodegroup.
        :rtype: NodegroupResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DescribeNodegroupResponseNodegroup.


        :param resources: The resources of this DescribeNodegroupResponseNodegroup.
        :type resources: NodegroupResources
        """

        self._resources = resources

    @property
    def disk_size(self):
        """Gets the disk_size of this DescribeNodegroupResponseNodegroup.


        :return: The disk_size of this DescribeNodegroupResponseNodegroup.
        :rtype: int
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this DescribeNodegroupResponseNodegroup.


        :param disk_size: The disk_size of this DescribeNodegroupResponseNodegroup.
        :type disk_size: int
        """

        self._disk_size = disk_size

    @property
    def health(self):
        """Gets the health of this DescribeNodegroupResponseNodegroup.


        :return: The health of this DescribeNodegroupResponseNodegroup.
        :rtype: NodegroupHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this DescribeNodegroupResponseNodegroup.


        :param health: The health of this DescribeNodegroupResponseNodegroup.
        :type health: NodegroupHealth
        """

        self._health = health

    @property
    def update_config(self):
        """Gets the update_config of this DescribeNodegroupResponseNodegroup.


        :return: The update_config of this DescribeNodegroupResponseNodegroup.
        :rtype: CreateNodegroupRequestUpdateConfig
        """
        return self._update_config

    @update_config.setter
    def update_config(self, update_config):
        """Sets the update_config of this DescribeNodegroupResponseNodegroup.


        :param update_config: The update_config of this DescribeNodegroupResponseNodegroup.
        :type update_config: CreateNodegroupRequestUpdateConfig
        """

        self._update_config = update_config

    @property
    def launch_template(self):
        """Gets the launch_template of this DescribeNodegroupResponseNodegroup.


        :return: The launch_template of this DescribeNodegroupResponseNodegroup.
        :rtype: NodegroupLaunchTemplate
        """
        return self._launch_template

    @launch_template.setter
    def launch_template(self, launch_template):
        """Sets the launch_template of this DescribeNodegroupResponseNodegroup.


        :param launch_template: The launch_template of this DescribeNodegroupResponseNodegroup.
        :type launch_template: NodegroupLaunchTemplate
        """

        self._launch_template = launch_template

    @property
    def tags(self):
        """Gets the tags of this DescribeNodegroupResponseNodegroup.


        :return: The tags of this DescribeNodegroupResponseNodegroup.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeNodegroupResponseNodegroup.


        :param tags: The tags of this DescribeNodegroupResponseNodegroup.
        :type tags: Dict
        """

        self._tags = tags
