# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_request_kubernetes_network_config import CreateClusterRequestKubernetesNetworkConfig
from openapi_server.models.create_cluster_request_logging import CreateClusterRequestLogging
from openapi_server.models.create_cluster_request_outpost_config import CreateClusterRequestOutpostConfig
from openapi_server.models.create_cluster_request_resources_vpc_config import CreateClusterRequestResourcesVpcConfig
from openapi_server.models.encryption_config import EncryptionConfig
import re
from openapi_server import util


class CreateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, version: str=None, role_arn: str=None, resources_vpc_config: CreateClusterRequestResourcesVpcConfig=None, kubernetes_network_config: CreateClusterRequestKubernetesNetworkConfig=None, logging: CreateClusterRequestLogging=None, client_request_token: str=None, tags: Dict[str, str]=None, encryption_config: List[EncryptionConfig]=None, outpost_config: CreateClusterRequestOutpostConfig=None):
        """CreateClusterRequest - a model defined in OpenAPI

        :param name: The name of this CreateClusterRequest.
        :param version: The version of this CreateClusterRequest.
        :param role_arn: The role_arn of this CreateClusterRequest.
        :param resources_vpc_config: The resources_vpc_config of this CreateClusterRequest.
        :param kubernetes_network_config: The kubernetes_network_config of this CreateClusterRequest.
        :param logging: The logging of this CreateClusterRequest.
        :param client_request_token: The client_request_token of this CreateClusterRequest.
        :param tags: The tags of this CreateClusterRequest.
        :param encryption_config: The encryption_config of this CreateClusterRequest.
        :param outpost_config: The outpost_config of this CreateClusterRequest.
        """
        self.openapi_types = {
            'name': str,
            'version': str,
            'role_arn': str,
            'resources_vpc_config': CreateClusterRequestResourcesVpcConfig,
            'kubernetes_network_config': CreateClusterRequestKubernetesNetworkConfig,
            'logging': CreateClusterRequestLogging,
            'client_request_token': str,
            'tags': Dict[str, str],
            'encryption_config': List[EncryptionConfig],
            'outpost_config': CreateClusterRequestOutpostConfig
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version',
            'role_arn': 'roleArn',
            'resources_vpc_config': 'resourcesVpcConfig',
            'kubernetes_network_config': 'kubernetesNetworkConfig',
            'logging': 'logging',
            'client_request_token': 'clientRequestToken',
            'tags': 'tags',
            'encryption_config': 'encryptionConfig',
            'outpost_config': 'outpostConfig'
        }

        self._name = name
        self._version = version
        self._role_arn = role_arn
        self._resources_vpc_config = resources_vpc_config
        self._kubernetes_network_config = kubernetes_network_config
        self._logging = logging
        self._client_request_token = client_request_token
        self._tags = tags
        self._encryption_config = encryption_config
        self._outpost_config = outpost_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCluster_request of this CreateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateClusterRequest.

        The unique name to give to your cluster.

        :return: The name of this CreateClusterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterRequest.

        The unique name to give to your cluster.

        :param name: The name of this CreateClusterRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[0-9A-Za-z][A-Za-z0-9\-_]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[0-9A-Za-z][A-Za-z0-9\-_]*/`")

        self._name = name

    @property
    def version(self):
        """Gets the version of this CreateClusterRequest.

        <p>The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used.</p> <note> <p>The default version might not be the latest version available.</p> </note>

        :return: The version of this CreateClusterRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateClusterRequest.

        <p>The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used.</p> <note> <p>The default version might not be the latest version available.</p> </note>

        :param version: The version of this CreateClusterRequest.
        :type version: str
        """

        self._version = version

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateClusterRequest.

        The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html\">Amazon EKS Service IAM Role</a> in the <i> <i>Amazon EKS User Guide</i> </i>.

        :return: The role_arn of this CreateClusterRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateClusterRequest.

        The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html\">Amazon EKS Service IAM Role</a> in the <i> <i>Amazon EKS User Guide</i> </i>.

        :param role_arn: The role_arn of this CreateClusterRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def resources_vpc_config(self):
        """Gets the resources_vpc_config of this CreateClusterRequest.


        :return: The resources_vpc_config of this CreateClusterRequest.
        :rtype: CreateClusterRequestResourcesVpcConfig
        """
        return self._resources_vpc_config

    @resources_vpc_config.setter
    def resources_vpc_config(self, resources_vpc_config):
        """Sets the resources_vpc_config of this CreateClusterRequest.


        :param resources_vpc_config: The resources_vpc_config of this CreateClusterRequest.
        :type resources_vpc_config: CreateClusterRequestResourcesVpcConfig
        """
        if resources_vpc_config is None:
            raise ValueError("Invalid value for `resources_vpc_config`, must not be `None`")

        self._resources_vpc_config = resources_vpc_config

    @property
    def kubernetes_network_config(self):
        """Gets the kubernetes_network_config of this CreateClusterRequest.


        :return: The kubernetes_network_config of this CreateClusterRequest.
        :rtype: CreateClusterRequestKubernetesNetworkConfig
        """
        return self._kubernetes_network_config

    @kubernetes_network_config.setter
    def kubernetes_network_config(self, kubernetes_network_config):
        """Sets the kubernetes_network_config of this CreateClusterRequest.


        :param kubernetes_network_config: The kubernetes_network_config of this CreateClusterRequest.
        :type kubernetes_network_config: CreateClusterRequestKubernetesNetworkConfig
        """

        self._kubernetes_network_config = kubernetes_network_config

    @property
    def logging(self):
        """Gets the logging of this CreateClusterRequest.


        :return: The logging of this CreateClusterRequest.
        :rtype: CreateClusterRequestLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this CreateClusterRequest.


        :param logging: The logging of this CreateClusterRequest.
        :type logging: CreateClusterRequestLogging
        """

        self._logging = logging

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateClusterRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateClusterRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateClusterRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateClusterRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateClusterRequest.

        The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.

        :return: The tags of this CreateClusterRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateClusterRequest.

        The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.

        :param tags: The tags of this CreateClusterRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def encryption_config(self):
        """Gets the encryption_config of this CreateClusterRequest.

        The encryption configuration for the cluster.

        :return: The encryption_config of this CreateClusterRequest.
        :rtype: List[EncryptionConfig]
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this CreateClusterRequest.

        The encryption configuration for the cluster.

        :param encryption_config: The encryption_config of this CreateClusterRequest.
        :type encryption_config: List[EncryptionConfig]
        """
        if encryption_config is not None and len(encryption_config) > 1:
            raise ValueError("Invalid value for `encryption_config`, number of items must be less than or equal to `1`")

        self._encryption_config = encryption_config

    @property
    def outpost_config(self):
        """Gets the outpost_config of this CreateClusterRequest.


        :return: The outpost_config of this CreateClusterRequest.
        :rtype: CreateClusterRequestOutpostConfig
        """
        return self._outpost_config

    @outpost_config.setter
    def outpost_config(self, outpost_config):
        """Sets the outpost_config of this CreateClusterRequest.


        :param outpost_config: The outpost_config of this CreateClusterRequest.
        :type outpost_config: CreateClusterRequestOutpostConfig
        """

        self._outpost_config = outpost_config
