# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_identity_provider_config_request_oidc import AssociateIdentityProviderConfigRequestOidc
from openapi_server import util


class AssociateIdentityProviderConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, oidc: AssociateIdentityProviderConfigRequestOidc=None, tags: Dict[str, str]=None, client_request_token: str=None):
        """AssociateIdentityProviderConfigRequest - a model defined in OpenAPI

        :param oidc: The oidc of this AssociateIdentityProviderConfigRequest.
        :param tags: The tags of this AssociateIdentityProviderConfigRequest.
        :param client_request_token: The client_request_token of this AssociateIdentityProviderConfigRequest.
        """
        self.openapi_types = {
            'oidc': AssociateIdentityProviderConfigRequestOidc,
            'tags': Dict[str, str],
            'client_request_token': str
        }

        self.attribute_map = {
            'oidc': 'oidc',
            'tags': 'tags',
            'client_request_token': 'clientRequestToken'
        }

        self._oidc = oidc
        self._tags = tags
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateIdentityProviderConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateIdentityProviderConfig_request of this AssociateIdentityProviderConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def oidc(self):
        """Gets the oidc of this AssociateIdentityProviderConfigRequest.


        :return: The oidc of this AssociateIdentityProviderConfigRequest.
        :rtype: AssociateIdentityProviderConfigRequestOidc
        """
        return self._oidc

    @oidc.setter
    def oidc(self, oidc):
        """Sets the oidc of this AssociateIdentityProviderConfigRequest.


        :param oidc: The oidc of this AssociateIdentityProviderConfigRequest.
        :type oidc: AssociateIdentityProviderConfigRequestOidc
        """
        if oidc is None:
            raise ValueError("Invalid value for `oidc`, must not be `None`")

        self._oidc = oidc

    @property
    def tags(self):
        """Gets the tags of this AssociateIdentityProviderConfigRequest.

        The metadata to apply to the configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.

        :return: The tags of this AssociateIdentityProviderConfigRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssociateIdentityProviderConfigRequest.

        The metadata to apply to the configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.

        :param tags: The tags of this AssociateIdentityProviderConfigRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_request_token(self):
        """Gets the client_request_token of this AssociateIdentityProviderConfigRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this AssociateIdentityProviderConfigRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this AssociateIdentityProviderConfigRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this AssociateIdentityProviderConfigRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
