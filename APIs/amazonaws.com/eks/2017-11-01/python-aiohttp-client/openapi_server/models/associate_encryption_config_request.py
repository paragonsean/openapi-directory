# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server import util


class AssociateEncryptionConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_config: List[EncryptionConfig]=None, client_request_token: str=None):
        """AssociateEncryptionConfigRequest - a model defined in OpenAPI

        :param encryption_config: The encryption_config of this AssociateEncryptionConfigRequest.
        :param client_request_token: The client_request_token of this AssociateEncryptionConfigRequest.
        """
        self.openapi_types = {
            'encryption_config': List[EncryptionConfig],
            'client_request_token': str
        }

        self.attribute_map = {
            'encryption_config': 'encryptionConfig',
            'client_request_token': 'clientRequestToken'
        }

        self._encryption_config = encryption_config
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateEncryptionConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateEncryptionConfig_request of this AssociateEncryptionConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_config(self):
        """Gets the encryption_config of this AssociateEncryptionConfigRequest.

        The configuration you are using for encryption.

        :return: The encryption_config of this AssociateEncryptionConfigRequest.
        :rtype: List[EncryptionConfig]
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this AssociateEncryptionConfigRequest.

        The configuration you are using for encryption.

        :param encryption_config: The encryption_config of this AssociateEncryptionConfigRequest.
        :type encryption_config: List[EncryptionConfig]
        """
        if encryption_config is None:
            raise ValueError("Invalid value for `encryption_config`, must not be `None`")
        if encryption_config is not None and len(encryption_config) > 1:
            raise ValueError("Invalid value for `encryption_config`, number of items must be less than or equal to `1`")

        self._encryption_config = encryption_config

    @property
    def client_request_token(self):
        """Gets the client_request_token of this AssociateEncryptionConfigRequest.

        The client request token you are using with the encryption configuration.

        :return: The client_request_token of this AssociateEncryptionConfigRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this AssociateEncryptionConfigRequest.

        The client request token you are using with the encryption configuration.

        :param client_request_token: The client_request_token of this AssociateEncryptionConfigRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
