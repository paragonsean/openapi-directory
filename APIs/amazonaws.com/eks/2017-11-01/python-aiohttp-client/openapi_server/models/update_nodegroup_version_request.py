# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_nodegroup_request_launch_template import CreateNodegroupRequestLaunchTemplate
from openapi_server import util


class UpdateNodegroupVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version: str=None, release_version: str=None, launch_template: CreateNodegroupRequestLaunchTemplate=None, force: bool=None, client_request_token: str=None):
        """UpdateNodegroupVersionRequest - a model defined in OpenAPI

        :param version: The version of this UpdateNodegroupVersionRequest.
        :param release_version: The release_version of this UpdateNodegroupVersionRequest.
        :param launch_template: The launch_template of this UpdateNodegroupVersionRequest.
        :param force: The force of this UpdateNodegroupVersionRequest.
        :param client_request_token: The client_request_token of this UpdateNodegroupVersionRequest.
        """
        self.openapi_types = {
            'version': str,
            'release_version': str,
            'launch_template': CreateNodegroupRequestLaunchTemplate,
            'force': bool,
            'client_request_token': str
        }

        self.attribute_map = {
            'version': 'version',
            'release_version': 'releaseVersion',
            'launch_template': 'launchTemplate',
            'force': 'force',
            'client_request_token': 'clientRequestToken'
        }

        self._version = version
        self._release_version = release_version
        self._launch_template = launch_template
        self._force = force
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNodegroupVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateNodegroupVersion_request of this UpdateNodegroupVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this UpdateNodegroupVersionRequest.

        The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>version</code>, or the node group update will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :return: The version of this UpdateNodegroupVersionRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateNodegroupVersionRequest.

        The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>version</code>, or the node group update will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.

        :param version: The version of this UpdateNodegroupVersionRequest.
        :type version: str
        """

        self._version = version

    @property
    def release_version(self):
        """Gets the release_version of this UpdateNodegroupVersionRequest.

        <p>The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For information about Linux versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html\">Amazon EKS optimized Amazon Linux AMI versions</a> in the <i>Amazon EKS User Guide</i>. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html\">Amazon EKS optimized Windows AMI versions</a> in the <i>Amazon EKS User Guide</i>.</p> <p>If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>releaseVersion</code>, or the node group update will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.</p>

        :return: The release_version of this UpdateNodegroupVersionRequest.
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this UpdateNodegroupVersionRequest.

        <p>The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For information about Linux versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html\">Amazon EKS optimized Amazon Linux AMI versions</a> in the <i>Amazon EKS User Guide</i>. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html\">Amazon EKS optimized Windows AMI versions</a> in the <i>Amazon EKS User Guide</i>.</p> <p>If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>releaseVersion</code>, or the node group update will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.</p>

        :param release_version: The release_version of this UpdateNodegroupVersionRequest.
        :type release_version: str
        """

        self._release_version = release_version

    @property
    def launch_template(self):
        """Gets the launch_template of this UpdateNodegroupVersionRequest.


        :return: The launch_template of this UpdateNodegroupVersionRequest.
        :rtype: CreateNodegroupRequestLaunchTemplate
        """
        return self._launch_template

    @launch_template.setter
    def launch_template(self, launch_template):
        """Sets the launch_template of this UpdateNodegroupVersionRequest.


        :param launch_template: The launch_template of this UpdateNodegroupVersionRequest.
        :type launch_template: CreateNodegroupRequestLaunchTemplate
        """

        self._launch_template = launch_template

    @property
    def force(self):
        """Gets the force of this UpdateNodegroupVersionRequest.

        Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue. If an update fails because pods could not be drained, you can force the update after it fails to terminate the old node whether or not any pods are running on the node.

        :return: The force of this UpdateNodegroupVersionRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this UpdateNodegroupVersionRequest.

        Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue. If an update fails because pods could not be drained, you can force the update after it fails to terminate the old node whether or not any pods are running on the node.

        :param force: The force of this UpdateNodegroupVersionRequest.
        :type force: bool
        """

        self._force = force

    @property
    def client_request_token(self):
        """Gets the client_request_token of this UpdateNodegroupVersionRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this UpdateNodegroupVersionRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this UpdateNodegroupVersionRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this UpdateNodegroupVersionRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
