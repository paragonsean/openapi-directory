# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fargate_profile_selector import FargateProfileSelector
from openapi_server import util


class CreateFargateProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fargate_profile_name: str=None, pod_execution_role_arn: str=None, subnets: List[str]=None, selectors: List[FargateProfileSelector]=None, client_request_token: str=None, tags: Dict[str, str]=None):
        """CreateFargateProfileRequest - a model defined in OpenAPI

        :param fargate_profile_name: The fargate_profile_name of this CreateFargateProfileRequest.
        :param pod_execution_role_arn: The pod_execution_role_arn of this CreateFargateProfileRequest.
        :param subnets: The subnets of this CreateFargateProfileRequest.
        :param selectors: The selectors of this CreateFargateProfileRequest.
        :param client_request_token: The client_request_token of this CreateFargateProfileRequest.
        :param tags: The tags of this CreateFargateProfileRequest.
        """
        self.openapi_types = {
            'fargate_profile_name': str,
            'pod_execution_role_arn': str,
            'subnets': List[str],
            'selectors': List[FargateProfileSelector],
            'client_request_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'fargate_profile_name': 'fargateProfileName',
            'pod_execution_role_arn': 'podExecutionRoleArn',
            'subnets': 'subnets',
            'selectors': 'selectors',
            'client_request_token': 'clientRequestToken',
            'tags': 'tags'
        }

        self._fargate_profile_name = fargate_profile_name
        self._pod_execution_role_arn = pod_execution_role_arn
        self._subnets = subnets
        self._selectors = selectors
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFargateProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFargateProfile_request of this CreateFargateProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fargate_profile_name(self):
        """Gets the fargate_profile_name of this CreateFargateProfileRequest.

        The name of the Fargate profile.

        :return: The fargate_profile_name of this CreateFargateProfileRequest.
        :rtype: str
        """
        return self._fargate_profile_name

    @fargate_profile_name.setter
    def fargate_profile_name(self, fargate_profile_name):
        """Sets the fargate_profile_name of this CreateFargateProfileRequest.

        The name of the Fargate profile.

        :param fargate_profile_name: The fargate_profile_name of this CreateFargateProfileRequest.
        :type fargate_profile_name: str
        """
        if fargate_profile_name is None:
            raise ValueError("Invalid value for `fargate_profile_name`, must not be `None`")

        self._fargate_profile_name = fargate_profile_name

    @property
    def pod_execution_role_arn(self):
        """Gets the pod_execution_role_arn of this CreateFargateProfileRequest.

        The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. The pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html\">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.

        :return: The pod_execution_role_arn of this CreateFargateProfileRequest.
        :rtype: str
        """
        return self._pod_execution_role_arn

    @pod_execution_role_arn.setter
    def pod_execution_role_arn(self, pod_execution_role_arn):
        """Sets the pod_execution_role_arn of this CreateFargateProfileRequest.

        The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. The pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html\">Pod Execution Role</a> in the <i>Amazon EKS User Guide</i>.

        :param pod_execution_role_arn: The pod_execution_role_arn of this CreateFargateProfileRequest.
        :type pod_execution_role_arn: str
        """
        if pod_execution_role_arn is None:
            raise ValueError("Invalid value for `pod_execution_role_arn`, must not be `None`")

        self._pod_execution_role_arn = pod_execution_role_arn

    @property
    def subnets(self):
        """Gets the subnets of this CreateFargateProfileRequest.

        The IDs of subnets to launch your pods into. At this time, pods running on Fargate are not assigned public IP addresses, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.

        :return: The subnets of this CreateFargateProfileRequest.
        :rtype: List[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateFargateProfileRequest.

        The IDs of subnets to launch your pods into. At this time, pods running on Fargate are not assigned public IP addresses, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.

        :param subnets: The subnets of this CreateFargateProfileRequest.
        :type subnets: List[str]
        """

        self._subnets = subnets

    @property
    def selectors(self):
        """Gets the selectors of this CreateFargateProfileRequest.

        The selectors to match for pods to use this Fargate profile. Each selector must have an associated namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.

        :return: The selectors of this CreateFargateProfileRequest.
        :rtype: List[FargateProfileSelector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this CreateFargateProfileRequest.

        The selectors to match for pods to use this Fargate profile. Each selector must have an associated namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.

        :param selectors: The selectors of this CreateFargateProfileRequest.
        :type selectors: List[FargateProfileSelector]
        """

        self._selectors = selectors

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateFargateProfileRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateFargateProfileRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateFargateProfileRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateFargateProfileRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateFargateProfileRequest.

        The metadata to apply to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.

        :return: The tags of this CreateFargateProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFargateProfileRequest.

        The metadata to apply to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.

        :param tags: The tags of this CreateFargateProfileRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
