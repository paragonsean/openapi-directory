# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.register_cluster_request_connector_config import RegisterClusterRequestConnectorConfig
import re
from openapi_server import util


class RegisterClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, connector_config: RegisterClusterRequestConnectorConfig=None, client_request_token: str=None, tags: Dict[str, str]=None):
        """RegisterClusterRequest - a model defined in OpenAPI

        :param name: The name of this RegisterClusterRequest.
        :param connector_config: The connector_config of this RegisterClusterRequest.
        :param client_request_token: The client_request_token of this RegisterClusterRequest.
        :param tags: The tags of this RegisterClusterRequest.
        """
        self.openapi_types = {
            'name': str,
            'connector_config': RegisterClusterRequestConnectorConfig,
            'client_request_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'connector_config': 'connectorConfig',
            'client_request_token': 'clientRequestToken',
            'tags': 'tags'
        }

        self._name = name
        self._connector_config = connector_config
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterCluster_request of this RegisterClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RegisterClusterRequest.

        Define a unique name for this cluster for your Region.

        :return: The name of this RegisterClusterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterClusterRequest.

        Define a unique name for this cluster for your Region.

        :param name: The name of this RegisterClusterRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[0-9A-Za-z][A-Za-z0-9\-_]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[0-9A-Za-z][A-Za-z0-9\-_]*/`")

        self._name = name

    @property
    def connector_config(self):
        """Gets the connector_config of this RegisterClusterRequest.


        :return: The connector_config of this RegisterClusterRequest.
        :rtype: RegisterClusterRequestConnectorConfig
        """
        return self._connector_config

    @connector_config.setter
    def connector_config(self, connector_config):
        """Sets the connector_config of this RegisterClusterRequest.


        :param connector_config: The connector_config of this RegisterClusterRequest.
        :type connector_config: RegisterClusterRequestConnectorConfig
        """
        if connector_config is None:
            raise ValueError("Invalid value for `connector_config`, must not be `None`")

        self._connector_config = connector_config

    @property
    def client_request_token(self):
        """Gets the client_request_token of this RegisterClusterRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this RegisterClusterRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this RegisterClusterRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this RegisterClusterRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this RegisterClusterRequest.

        The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Cluster tags do not propagate to any other resources associated with the cluster.

        :return: The tags of this RegisterClusterRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegisterClusterRequest.

        The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Cluster tags do not propagate to any other resources associated with the cluster.

        :param tags: The tags of this RegisterClusterRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
