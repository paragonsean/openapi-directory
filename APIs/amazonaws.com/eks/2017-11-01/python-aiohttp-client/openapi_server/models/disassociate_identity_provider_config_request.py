# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_identity_provider_config_request_identity_provider_config import DescribeIdentityProviderConfigRequestIdentityProviderConfig
from openapi_server import util


class DisassociateIdentityProviderConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_provider_config: DescribeIdentityProviderConfigRequestIdentityProviderConfig=None, client_request_token: str=None):
        """DisassociateIdentityProviderConfigRequest - a model defined in OpenAPI

        :param identity_provider_config: The identity_provider_config of this DisassociateIdentityProviderConfigRequest.
        :param client_request_token: The client_request_token of this DisassociateIdentityProviderConfigRequest.
        """
        self.openapi_types = {
            'identity_provider_config': DescribeIdentityProviderConfigRequestIdentityProviderConfig,
            'client_request_token': str
        }

        self.attribute_map = {
            'identity_provider_config': 'identityProviderConfig',
            'client_request_token': 'clientRequestToken'
        }

        self._identity_provider_config = identity_provider_config
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateIdentityProviderConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateIdentityProviderConfig_request of this DisassociateIdentityProviderConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_provider_config(self):
        """Gets the identity_provider_config of this DisassociateIdentityProviderConfigRequest.


        :return: The identity_provider_config of this DisassociateIdentityProviderConfigRequest.
        :rtype: DescribeIdentityProviderConfigRequestIdentityProviderConfig
        """
        return self._identity_provider_config

    @identity_provider_config.setter
    def identity_provider_config(self, identity_provider_config):
        """Sets the identity_provider_config of this DisassociateIdentityProviderConfigRequest.


        :param identity_provider_config: The identity_provider_config of this DisassociateIdentityProviderConfigRequest.
        :type identity_provider_config: DescribeIdentityProviderConfigRequestIdentityProviderConfig
        """
        if identity_provider_config is None:
            raise ValueError("Invalid value for `identity_provider_config`, must not be `None`")

        self._identity_provider_config = identity_provider_config

    @property
    def client_request_token(self):
        """Gets the client_request_token of this DisassociateIdentityProviderConfigRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this DisassociateIdentityProviderConfigRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this DisassociateIdentityProviderConfigRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this DisassociateIdentityProviderConfigRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
