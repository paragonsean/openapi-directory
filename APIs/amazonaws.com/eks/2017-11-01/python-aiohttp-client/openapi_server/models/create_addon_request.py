# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAddonRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addon_name: str=None, addon_version: str=None, service_account_role_arn: str=None, resolve_conflicts: str=None, client_request_token: str=None, tags: Dict[str, str]=None, configuration_values: str=None):
        """CreateAddonRequest - a model defined in OpenAPI

        :param addon_name: The addon_name of this CreateAddonRequest.
        :param addon_version: The addon_version of this CreateAddonRequest.
        :param service_account_role_arn: The service_account_role_arn of this CreateAddonRequest.
        :param resolve_conflicts: The resolve_conflicts of this CreateAddonRequest.
        :param client_request_token: The client_request_token of this CreateAddonRequest.
        :param tags: The tags of this CreateAddonRequest.
        :param configuration_values: The configuration_values of this CreateAddonRequest.
        """
        self.openapi_types = {
            'addon_name': str,
            'addon_version': str,
            'service_account_role_arn': str,
            'resolve_conflicts': str,
            'client_request_token': str,
            'tags': Dict[str, str],
            'configuration_values': str
        }

        self.attribute_map = {
            'addon_name': 'addonName',
            'addon_version': 'addonVersion',
            'service_account_role_arn': 'serviceAccountRoleArn',
            'resolve_conflicts': 'resolveConflicts',
            'client_request_token': 'clientRequestToken',
            'tags': 'tags',
            'configuration_values': 'configurationValues'
        }

        self._addon_name = addon_name
        self._addon_version = addon_version
        self._service_account_role_arn = service_account_role_arn
        self._resolve_conflicts = resolve_conflicts
        self._client_request_token = client_request_token
        self._tags = tags
        self._configuration_values = configuration_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAddonRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAddon_request of this CreateAddonRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addon_name(self):
        """Gets the addon_name of this CreateAddonRequest.

        The name of the add-on. The name must match one of the names that <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html\"> <code>DescribeAddonVersions</code> </a> returns.

        :return: The addon_name of this CreateAddonRequest.
        :rtype: str
        """
        return self._addon_name

    @addon_name.setter
    def addon_name(self, addon_name):
        """Sets the addon_name of this CreateAddonRequest.

        The name of the add-on. The name must match one of the names that <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html\"> <code>DescribeAddonVersions</code> </a> returns.

        :param addon_name: The addon_name of this CreateAddonRequest.
        :type addon_name: str
        """
        if addon_name is None:
            raise ValueError("Invalid value for `addon_name`, must not be `None`")

        self._addon_name = addon_name

    @property
    def addon_version(self):
        """Gets the addon_version of this CreateAddonRequest.

        The version of the add-on. The version must match one of the versions returned by <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html\"> <code>DescribeAddonVersions</code> </a>.

        :return: The addon_version of this CreateAddonRequest.
        :rtype: str
        """
        return self._addon_version

    @addon_version.setter
    def addon_version(self, addon_version):
        """Sets the addon_version of this CreateAddonRequest.

        The version of the add-on. The version must match one of the versions returned by <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html\"> <code>DescribeAddonVersions</code> </a>.

        :param addon_version: The addon_version of this CreateAddonRequest.
        :type addon_version: str
        """

        self._addon_version = addon_version

    @property
    def service_account_role_arn(self):
        """Gets the service_account_role_arn of this CreateAddonRequest.

        <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html\">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p> <note> <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html\">Enabling IAM roles for service accounts on your cluster</a> in the <i>Amazon EKS User Guide</i>.</p> </note>

        :return: The service_account_role_arn of this CreateAddonRequest.
        :rtype: str
        """
        return self._service_account_role_arn

    @service_account_role_arn.setter
    def service_account_role_arn(self, service_account_role_arn):
        """Sets the service_account_role_arn of this CreateAddonRequest.

        <p>The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html\">Amazon EKS node IAM role</a> in the <i>Amazon EKS User Guide</i>.</p> <note> <p>To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html\">Enabling IAM roles for service accounts on your cluster</a> in the <i>Amazon EKS User Guide</i>.</p> </note>

        :param service_account_role_arn: The service_account_role_arn of this CreateAddonRequest.
        :type service_account_role_arn: str
        """
        if service_account_role_arn is not None and len(service_account_role_arn) > 255:
            raise ValueError("Invalid value for `service_account_role_arn`, length must be less than or equal to `255`")
        if service_account_role_arn is not None and len(service_account_role_arn) < 1:
            raise ValueError("Invalid value for `service_account_role_arn`, length must be greater than or equal to `1`")

        self._service_account_role_arn = service_account_role_arn

    @property
    def resolve_conflicts(self):
        """Gets the resolve_conflicts of this CreateAddonRequest.

        <p>How to resolve field value conflicts for an Amazon EKS add-on. Conflicts are handled based on the value you choose:</p> <ul> <li> <p> <b>None</b> – If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.</p> </li> <li> <p> <b>Overwrite</b> – If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.</p> </li> <li> <p> <b>Preserve</b> – Not supported. You can set this value when updating an add-on though. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html\">UpdateAddon</a>.</p> </li> </ul> <p>If you don't currently have the self-managed version of the add-on installed on your cluster, the Amazon EKS add-on is installed. Amazon EKS sets all values to default values, regardless of the option that you specify.</p>

        :return: The resolve_conflicts of this CreateAddonRequest.
        :rtype: str
        """
        return self._resolve_conflicts

    @resolve_conflicts.setter
    def resolve_conflicts(self, resolve_conflicts):
        """Sets the resolve_conflicts of this CreateAddonRequest.

        <p>How to resolve field value conflicts for an Amazon EKS add-on. Conflicts are handled based on the value you choose:</p> <ul> <li> <p> <b>None</b> – If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.</p> </li> <li> <p> <b>Overwrite</b> – If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.</p> </li> <li> <p> <b>Preserve</b> – Not supported. You can set this value when updating an add-on though. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html\">UpdateAddon</a>.</p> </li> </ul> <p>If you don't currently have the self-managed version of the add-on installed on your cluster, the Amazon EKS add-on is installed. Amazon EKS sets all values to default values, regardless of the option that you specify.</p>

        :param resolve_conflicts: The resolve_conflicts of this CreateAddonRequest.
        :type resolve_conflicts: str
        """
        allowed_values = ["OVERWRITE", "NONE", "PRESERVE"]  # noqa: E501
        if resolve_conflicts not in allowed_values:
            raise ValueError(
                "Invalid value for `resolve_conflicts` ({0}), must be one of {1}"
                .format(resolve_conflicts, allowed_values)
            )

        self._resolve_conflicts = resolve_conflicts

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateAddonRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_request_token of this CreateAddonRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateAddonRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_request_token: The client_request_token of this CreateAddonRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateAddonRequest.

        The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.

        :return: The tags of this CreateAddonRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAddonRequest.

        The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.

        :param tags: The tags of this CreateAddonRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def configuration_values(self):
        """Gets the configuration_values of this CreateAddonRequest.

        The set of configuration values for the add-on that's created. The values that you provide are validated against the schema in <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonConfiguration.html\"> <code>DescribeAddonConfiguration</code> </a>.

        :return: The configuration_values of this CreateAddonRequest.
        :rtype: str
        """
        return self._configuration_values

    @configuration_values.setter
    def configuration_values(self, configuration_values):
        """Sets the configuration_values of this CreateAddonRequest.

        The set of configuration values for the add-on that's created. The values that you provide are validated against the schema in <a href=\"https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonConfiguration.html\"> <code>DescribeAddonConfiguration</code> </a>.

        :param configuration_values: The configuration_values of this CreateAddonRequest.
        :type configuration_values: str
        """

        self._configuration_values = configuration_values
