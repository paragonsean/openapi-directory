# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddonVersionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addon_version: str=None, architecture: List=None, compatibilities: List=None, requires_configuration: bool=None):
        """AddonVersionInfo - a model defined in OpenAPI

        :param addon_version: The addon_version of this AddonVersionInfo.
        :param architecture: The architecture of this AddonVersionInfo.
        :param compatibilities: The compatibilities of this AddonVersionInfo.
        :param requires_configuration: The requires_configuration of this AddonVersionInfo.
        """
        self.openapi_types = {
            'addon_version': str,
            'architecture': List,
            'compatibilities': List,
            'requires_configuration': bool
        }

        self.attribute_map = {
            'addon_version': 'addonVersion',
            'architecture': 'architecture',
            'compatibilities': 'compatibilities',
            'requires_configuration': 'requiresConfiguration'
        }

        self._addon_version = addon_version
        self._architecture = architecture
        self._compatibilities = compatibilities
        self._requires_configuration = requires_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddonVersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddonVersionInfo of this AddonVersionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addon_version(self):
        """Gets the addon_version of this AddonVersionInfo.


        :return: The addon_version of this AddonVersionInfo.
        :rtype: str
        """
        return self._addon_version

    @addon_version.setter
    def addon_version(self, addon_version):
        """Sets the addon_version of this AddonVersionInfo.


        :param addon_version: The addon_version of this AddonVersionInfo.
        :type addon_version: str
        """

        self._addon_version = addon_version

    @property
    def architecture(self):
        """Gets the architecture of this AddonVersionInfo.


        :return: The architecture of this AddonVersionInfo.
        :rtype: List
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AddonVersionInfo.


        :param architecture: The architecture of this AddonVersionInfo.
        :type architecture: List
        """

        self._architecture = architecture

    @property
    def compatibilities(self):
        """Gets the compatibilities of this AddonVersionInfo.


        :return: The compatibilities of this AddonVersionInfo.
        :rtype: List
        """
        return self._compatibilities

    @compatibilities.setter
    def compatibilities(self, compatibilities):
        """Sets the compatibilities of this AddonVersionInfo.


        :param compatibilities: The compatibilities of this AddonVersionInfo.
        :type compatibilities: List
        """

        self._compatibilities = compatibilities

    @property
    def requires_configuration(self):
        """Gets the requires_configuration of this AddonVersionInfo.


        :return: The requires_configuration of this AddonVersionInfo.
        :rtype: bool
        """
        return self._requires_configuration

    @requires_configuration.setter
    def requires_configuration(self, requires_configuration):
        """Sets the requires_configuration of this AddonVersionInfo.


        :param requires_configuration: The requires_configuration of this AddonVersionInfo.
        :type requires_configuration: bool
        """

        self._requires_configuration = requires_configuration
