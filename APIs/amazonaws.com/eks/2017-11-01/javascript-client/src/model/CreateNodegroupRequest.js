/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateNodegroupRequestLaunchTemplate from './CreateNodegroupRequestLaunchTemplate';
import CreateNodegroupRequestRemoteAccess from './CreateNodegroupRequestRemoteAccess';
import CreateNodegroupRequestScalingConfig from './CreateNodegroupRequestScalingConfig';
import CreateNodegroupRequestUpdateConfig from './CreateNodegroupRequestUpdateConfig';
import Taint from './Taint';

/**
 * The CreateNodegroupRequest model module.
 * @module model/CreateNodegroupRequest
 * @version 2017-11-01
 */
class CreateNodegroupRequest {
    /**
     * Constructs a new <code>CreateNodegroupRequest</code>.
     * @alias module:model/CreateNodegroupRequest
     * @param nodegroupName {String} The unique name to give your node group.
     * @param subnets {Array.<String>} The subnets to use for the Auto Scaling group that is created for your node group. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html\"> <code>SubnetId</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
     * @param nodeRole {String} The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node <code>kubelet</code> daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html\">Amazon EKS node IAM role</a> in the <i> <i>Amazon EKS User Guide</i> </i>. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html\"> <code>IamInstanceProfile</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
     */
    constructor(nodegroupName, subnets, nodeRole) { 
        
        CreateNodegroupRequest.initialize(this, nodegroupName, subnets, nodeRole);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodegroupName, subnets, nodeRole) { 
        obj['nodegroupName'] = nodegroupName;
        obj['subnets'] = subnets;
        obj['nodeRole'] = nodeRole;
    }

    /**
     * Constructs a <code>CreateNodegroupRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNodegroupRequest} obj Optional instance to populate.
     * @return {module:model/CreateNodegroupRequest} The populated <code>CreateNodegroupRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNodegroupRequest();

            if (data.hasOwnProperty('nodegroupName')) {
                obj['nodegroupName'] = ApiClient.convertToType(data['nodegroupName'], 'String');
            }
            if (data.hasOwnProperty('scalingConfig')) {
                obj['scalingConfig'] = CreateNodegroupRequestScalingConfig.constructFromObject(data['scalingConfig']);
            }
            if (data.hasOwnProperty('diskSize')) {
                obj['diskSize'] = ApiClient.convertToType(data['diskSize'], 'Number');
            }
            if (data.hasOwnProperty('subnets')) {
                obj['subnets'] = ApiClient.convertToType(data['subnets'], ['String']);
            }
            if (data.hasOwnProperty('instanceTypes')) {
                obj['instanceTypes'] = ApiClient.convertToType(data['instanceTypes'], ['String']);
            }
            if (data.hasOwnProperty('amiType')) {
                obj['amiType'] = ApiClient.convertToType(data['amiType'], 'String');
            }
            if (data.hasOwnProperty('remoteAccess')) {
                obj['remoteAccess'] = CreateNodegroupRequestRemoteAccess.constructFromObject(data['remoteAccess']);
            }
            if (data.hasOwnProperty('nodeRole')) {
                obj['nodeRole'] = ApiClient.convertToType(data['nodeRole'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('taints')) {
                obj['taints'] = ApiClient.convertToType(data['taints'], [Taint]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('clientRequestToken')) {
                obj['clientRequestToken'] = ApiClient.convertToType(data['clientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('launchTemplate')) {
                obj['launchTemplate'] = CreateNodegroupRequestLaunchTemplate.constructFromObject(data['launchTemplate']);
            }
            if (data.hasOwnProperty('updateConfig')) {
                obj['updateConfig'] = CreateNodegroupRequestUpdateConfig.constructFromObject(data['updateConfig']);
            }
            if (data.hasOwnProperty('capacityType')) {
                obj['capacityType'] = ApiClient.convertToType(data['capacityType'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('releaseVersion')) {
                obj['releaseVersion'] = ApiClient.convertToType(data['releaseVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateNodegroupRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateNodegroupRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateNodegroupRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nodegroupName'] && !(typeof data['nodegroupName'] === 'string' || data['nodegroupName'] instanceof String)) {
            throw new Error("Expected the field `nodegroupName` to be a primitive type in the JSON string but got " + data['nodegroupName']);
        }
        // validate the optional field `scalingConfig`
        if (data['scalingConfig']) { // data not null
          CreateNodegroupRequestScalingConfig.validateJSON(data['scalingConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subnets'])) {
            throw new Error("Expected the field `subnets` to be an array in the JSON data but got " + data['subnets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceTypes'])) {
            throw new Error("Expected the field `instanceTypes` to be an array in the JSON data but got " + data['instanceTypes']);
        }
        // ensure the json data is a string
        if (data['amiType'] && !(typeof data['amiType'] === 'string' || data['amiType'] instanceof String)) {
            throw new Error("Expected the field `amiType` to be a primitive type in the JSON string but got " + data['amiType']);
        }
        // validate the optional field `remoteAccess`
        if (data['remoteAccess']) { // data not null
          CreateNodegroupRequestRemoteAccess.validateJSON(data['remoteAccess']);
        }
        // ensure the json data is a string
        if (data['nodeRole'] && !(typeof data['nodeRole'] === 'string' || data['nodeRole'] instanceof String)) {
            throw new Error("Expected the field `nodeRole` to be a primitive type in the JSON string but got " + data['nodeRole']);
        }
        if (data['taints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taints'])) {
                throw new Error("Expected the field `taints` to be an array in the JSON data but got " + data['taints']);
            }
            // validate the optional field `taints` (array)
            for (const item of data['taints']) {
                Taint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['clientRequestToken'] && !(typeof data['clientRequestToken'] === 'string' || data['clientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got " + data['clientRequestToken']);
        }
        // validate the optional field `launchTemplate`
        if (data['launchTemplate']) { // data not null
          CreateNodegroupRequestLaunchTemplate.validateJSON(data['launchTemplate']);
        }
        // validate the optional field `updateConfig`
        if (data['updateConfig']) { // data not null
          CreateNodegroupRequestUpdateConfig.validateJSON(data['updateConfig']);
        }
        // ensure the json data is a string
        if (data['capacityType'] && !(typeof data['capacityType'] === 'string' || data['capacityType'] instanceof String)) {
            throw new Error("Expected the field `capacityType` to be a primitive type in the JSON string but got " + data['capacityType']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['releaseVersion'] && !(typeof data['releaseVersion'] === 'string' || data['releaseVersion'] instanceof String)) {
            throw new Error("Expected the field `releaseVersion` to be a primitive type in the JSON string but got " + data['releaseVersion']);
        }

        return true;
    }


}

CreateNodegroupRequest.RequiredProperties = ["nodegroupName", "subnets", "nodeRole"];

/**
 * The unique name to give your node group.
 * @member {String} nodegroupName
 */
CreateNodegroupRequest.prototype['nodegroupName'] = undefined;

/**
 * @member {module:model/CreateNodegroupRequestScalingConfig} scalingConfig
 */
CreateNodegroupRequest.prototype['scalingConfig'] = undefined;

/**
 * The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify <code>launchTemplate</code>, then don't specify <code>diskSize</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
 * @member {Number} diskSize
 */
CreateNodegroupRequest.prototype['diskSize'] = undefined;

/**
 * The subnets to use for the Auto Scaling group that is created for your node group. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html\"> <code>SubnetId</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
 * @member {Array.<String>} subnets
 */
CreateNodegroupRequest.prototype['subnets'] = undefined;

/**
 * Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the <code>amiType</code> parameter. If you specify <code>launchTemplate</code>, then you can specify zero or one instance type in your launch template <i>or</i> you can specify 0-20 instance types for <code>instanceTypes</code>. If however, you specify an instance type in your launch template <i>and</i> specify any <code>instanceTypes</code>, the node group deployment will fail. If you don't specify an instance type in a launch template or for <code>instanceTypes</code>, then <code>t3.medium</code> is used, by default. If you specify <code>Spot</code> for <code>capacityType</code>, then we recommend specifying multiple values for <code>instanceTypes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types\">Managed node group capacity types</a> and <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
 * @member {Array.<String>} instanceTypes
 */
CreateNodegroupRequest.prototype['instanceTypes'] = undefined;

/**
 * The AMI type for your node group. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>amiType</code>, or the node group deployment will fail. If your launch template uses a Windows custom AMI, then add <code>eks:kube-proxy-windows</code> to your Windows nodes <code>rolearn</code> in the <code>aws-auth</code> <code>ConfigMap</code>. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
 * @member {module:model/CreateNodegroupRequest.AmiTypeEnum} amiType
 */
CreateNodegroupRequest.prototype['amiType'] = undefined;

/**
 * @member {module:model/CreateNodegroupRequestRemoteAccess} remoteAccess
 */
CreateNodegroupRequest.prototype['remoteAccess'] = undefined;

/**
 * The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node <code>kubelet</code> daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html\">Amazon EKS node IAM role</a> in the <i> <i>Amazon EKS User Guide</i> </i>. If you specify <code>launchTemplate</code>, then don't specify <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html\"> <code>IamInstanceProfile</code> </a> in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
 * @member {String} nodeRole
 */
CreateNodegroupRequest.prototype['nodeRole'] = undefined;

/**
 * The Kubernetes labels to be applied to the nodes in the node group when they are created.
 * @member {Object.<String, String>} labels
 */
CreateNodegroupRequest.prototype['labels'] = undefined;

/**
 * The Kubernetes taints to be applied to the nodes in the node group. For more information, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html\">Node taints on managed node groups</a>.
 * @member {Array.<module:model/Taint>} taints
 */
CreateNodegroupRequest.prototype['taints'] = undefined;

/**
 * The metadata to apply to the node group to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.
 * @member {Object.<String, String>} tags
 */
CreateNodegroupRequest.prototype['tags'] = undefined;

/**
 * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
 * @member {String} clientRequestToken
 */
CreateNodegroupRequest.prototype['clientRequestToken'] = undefined;

/**
 * @member {module:model/CreateNodegroupRequestLaunchTemplate} launchTemplate
 */
CreateNodegroupRequest.prototype['launchTemplate'] = undefined;

/**
 * @member {module:model/CreateNodegroupRequestUpdateConfig} updateConfig
 */
CreateNodegroupRequest.prototype['updateConfig'] = undefined;

/**
 * The capacity type for your node group.
 * @member {module:model/CreateNodegroupRequest.CapacityTypeEnum} capacityType
 */
CreateNodegroupRequest.prototype['capacityType'] = undefined;

/**
 * The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>version</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.
 * @member {String} version
 */
CreateNodegroupRequest.prototype['version'] = undefined;

/**
 * <p>The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html\">Amazon EKS optimized Amazon Linux AMI versions</a> in the <i>Amazon EKS User Guide</i>. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html\">Amazon EKS optimized Windows AMI versions</a> in the <i>Amazon EKS User Guide</i>.</p> <p>If you specify <code>launchTemplate</code>, and your launch template uses a custom AMI, then don't specify <code>releaseVersion</code>, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html\">Launch template support</a> in the <i>Amazon EKS User Guide</i>.</p>
 * @member {String} releaseVersion
 */
CreateNodegroupRequest.prototype['releaseVersion'] = undefined;





/**
 * Allowed values for the <code>amiType</code> property.
 * @enum {String}
 * @readonly
 */
CreateNodegroupRequest['AmiTypeEnum'] = {

    /**
     * value: "AL2_x86_64"
     * @const
     */
    "AL2_x86_64": "AL2_x86_64",

    /**
     * value: "AL2_x86_64_GPU"
     * @const
     */
    "AL2_x86_64_GPU": "AL2_x86_64_GPU",

    /**
     * value: "AL2_ARM_64"
     * @const
     */
    "AL2_ARM_64": "AL2_ARM_64",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM",

    /**
     * value: "BOTTLEROCKET_ARM_64"
     * @const
     */
    "BOTTLEROCKET_ARM_64": "BOTTLEROCKET_ARM_64",

    /**
     * value: "BOTTLEROCKET_x86_64"
     * @const
     */
    "BOTTLEROCKET_x86_64": "BOTTLEROCKET_x86_64",

    /**
     * value: "BOTTLEROCKET_ARM_64_NVIDIA"
     * @const
     */
    "BOTTLEROCKET_ARM_64_NVIDIA": "BOTTLEROCKET_ARM_64_NVIDIA",

    /**
     * value: "BOTTLEROCKET_x86_64_NVIDIA"
     * @const
     */
    "BOTTLEROCKET_x86_64_NVIDIA": "BOTTLEROCKET_x86_64_NVIDIA",

    /**
     * value: "WINDOWS_CORE_2019_x86_64"
     * @const
     */
    "WINDOWS_CORE_2019_x86_64": "WINDOWS_CORE_2019_x86_64",

    /**
     * value: "WINDOWS_FULL_2019_x86_64"
     * @const
     */
    "WINDOWS_FULL_2019_x86_64": "WINDOWS_FULL_2019_x86_64",

    /**
     * value: "WINDOWS_CORE_2022_x86_64"
     * @const
     */
    "WINDOWS_CORE_2022_x86_64": "WINDOWS_CORE_2022_x86_64",

    /**
     * value: "WINDOWS_FULL_2022_x86_64"
     * @const
     */
    "WINDOWS_FULL_2022_x86_64": "WINDOWS_FULL_2022_x86_64"
};


/**
 * Allowed values for the <code>capacityType</code> property.
 * @enum {String}
 * @readonly
 */
CreateNodegroupRequest['CapacityTypeEnum'] = {

    /**
     * value: "ON_DEMAND"
     * @const
     */
    "ON_DEMAND": "ON_DEMAND",

    /**
     * value: "SPOT"
     * @const
     */
    "SPOT": "SPOT"
};



export default CreateNodegroupRequest;

