/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticKubernetesService);
  }
}(this, function(expect, AmazonElasticKubernetesService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticKubernetesService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateEncryptionConfig', function() {
      it('should call associateEncryptionConfig successfully', function(done) {
        //uncomment below and update the code to test associateEncryptionConfig
        //instance.associateEncryptionConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateIdentityProviderConfig', function() {
      it('should call associateIdentityProviderConfig successfully', function(done) {
        //uncomment below and update the code to test associateIdentityProviderConfig
        //instance.associateIdentityProviderConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAddon', function() {
      it('should call createAddon successfully', function(done) {
        //uncomment below and update the code to test createAddon
        //instance.createAddon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCluster', function() {
      it('should call createCluster successfully', function(done) {
        //uncomment below and update the code to test createCluster
        //instance.createCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFargateProfile', function() {
      it('should call createFargateProfile successfully', function(done) {
        //uncomment below and update the code to test createFargateProfile
        //instance.createFargateProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNodegroup', function() {
      it('should call createNodegroup successfully', function(done) {
        //uncomment below and update the code to test createNodegroup
        //instance.createNodegroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAddon', function() {
      it('should call deleteAddon successfully', function(done) {
        //uncomment below and update the code to test deleteAddon
        //instance.deleteAddon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCluster', function() {
      it('should call deleteCluster successfully', function(done) {
        //uncomment below and update the code to test deleteCluster
        //instance.deleteCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFargateProfile', function() {
      it('should call deleteFargateProfile successfully', function(done) {
        //uncomment below and update the code to test deleteFargateProfile
        //instance.deleteFargateProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNodegroup', function() {
      it('should call deleteNodegroup successfully', function(done) {
        //uncomment below and update the code to test deleteNodegroup
        //instance.deleteNodegroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterCluster', function() {
      it('should call deregisterCluster successfully', function(done) {
        //uncomment below and update the code to test deregisterCluster
        //instance.deregisterCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAddon', function() {
      it('should call describeAddon successfully', function(done) {
        //uncomment below and update the code to test describeAddon
        //instance.describeAddon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAddonConfiguration', function() {
      it('should call describeAddonConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeAddonConfiguration
        //instance.describeAddonConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAddonVersions', function() {
      it('should call describeAddonVersions successfully', function(done) {
        //uncomment below and update the code to test describeAddonVersions
        //instance.describeAddonVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCluster', function() {
      it('should call describeCluster successfully', function(done) {
        //uncomment below and update the code to test describeCluster
        //instance.describeCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFargateProfile', function() {
      it('should call describeFargateProfile successfully', function(done) {
        //uncomment below and update the code to test describeFargateProfile
        //instance.describeFargateProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeIdentityProviderConfig', function() {
      it('should call describeIdentityProviderConfig successfully', function(done) {
        //uncomment below and update the code to test describeIdentityProviderConfig
        //instance.describeIdentityProviderConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeNodegroup', function() {
      it('should call describeNodegroup successfully', function(done) {
        //uncomment below and update the code to test describeNodegroup
        //instance.describeNodegroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUpdate', function() {
      it('should call describeUpdate successfully', function(done) {
        //uncomment below and update the code to test describeUpdate
        //instance.describeUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateIdentityProviderConfig', function() {
      it('should call disassociateIdentityProviderConfig successfully', function(done) {
        //uncomment below and update the code to test disassociateIdentityProviderConfig
        //instance.disassociateIdentityProviderConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAddons', function() {
      it('should call listAddons successfully', function(done) {
        //uncomment below and update the code to test listAddons
        //instance.listAddons(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusters', function() {
      it('should call listClusters successfully', function(done) {
        //uncomment below and update the code to test listClusters
        //instance.listClusters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFargateProfiles', function() {
      it('should call listFargateProfiles successfully', function(done) {
        //uncomment below and update the code to test listFargateProfiles
        //instance.listFargateProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentityProviderConfigs', function() {
      it('should call listIdentityProviderConfigs successfully', function(done) {
        //uncomment below and update the code to test listIdentityProviderConfigs
        //instance.listIdentityProviderConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNodegroups', function() {
      it('should call listNodegroups successfully', function(done) {
        //uncomment below and update the code to test listNodegroups
        //instance.listNodegroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUpdates', function() {
      it('should call listUpdates successfully', function(done) {
        //uncomment below and update the code to test listUpdates
        //instance.listUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerCluster', function() {
      it('should call registerCluster successfully', function(done) {
        //uncomment below and update the code to test registerCluster
        //instance.registerCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAddon', function() {
      it('should call updateAddon successfully', function(done) {
        //uncomment below and update the code to test updateAddon
        //instance.updateAddon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClusterConfig', function() {
      it('should call updateClusterConfig successfully', function(done) {
        //uncomment below and update the code to test updateClusterConfig
        //instance.updateClusterConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClusterVersion', function() {
      it('should call updateClusterVersion successfully', function(done) {
        //uncomment below and update the code to test updateClusterVersion
        //instance.updateClusterVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNodegroupConfig', function() {
      it('should call updateNodegroupConfig successfully', function(done) {
        //uncomment below and update the code to test updateNodegroupConfig
        //instance.updateNodegroupConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNodegroupVersion', function() {
      it('should call updateNodegroupVersion successfully', function(done) {
        //uncomment below and update the code to test updateNodegroupVersion
        //instance.updateNodegroupVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
