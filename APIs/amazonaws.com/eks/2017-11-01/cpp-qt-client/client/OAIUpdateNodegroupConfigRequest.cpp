/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNodegroupConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNodegroupConfigRequest::OAIUpdateNodegroupConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNodegroupConfigRequest::OAIUpdateNodegroupConfigRequest() {
    this->initializeModel();
}

OAIUpdateNodegroupConfigRequest::~OAIUpdateNodegroupConfigRequest() {}

void OAIUpdateNodegroupConfigRequest::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_taints_isSet = false;
    m_taints_isValid = false;

    m_scaling_config_isSet = false;
    m_scaling_config_isValid = false;

    m_update_config_isSet = false;
    m_update_config_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIUpdateNodegroupConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNodegroupConfigRequest::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_taints_isValid = ::OpenAPI::fromJsonValue(m_taints, json[QString("taints")]);
    m_taints_isSet = !json[QString("taints")].isNull() && m_taints_isValid;

    m_scaling_config_isValid = ::OpenAPI::fromJsonValue(m_scaling_config, json[QString("scalingConfig")]);
    m_scaling_config_isSet = !json[QString("scalingConfig")].isNull() && m_scaling_config_isValid;

    m_update_config_isValid = ::OpenAPI::fromJsonValue(m_update_config, json[QString("updateConfig")]);
    m_update_config_isSet = !json[QString("updateConfig")].isNull() && m_update_config_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIUpdateNodegroupConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNodegroupConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_taints.isSet()) {
        obj.insert(QString("taints"), ::OpenAPI::toJsonValue(m_taints));
    }
    if (m_scaling_config.isSet()) {
        obj.insert(QString("scalingConfig"), ::OpenAPI::toJsonValue(m_scaling_config));
    }
    if (m_update_config.isSet()) {
        obj.insert(QString("updateConfig"), ::OpenAPI::toJsonValue(m_update_config));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

OAIUpdateNodegroupConfigRequest_labels OAIUpdateNodegroupConfigRequest::getLabels() const {
    return m_labels;
}
void OAIUpdateNodegroupConfigRequest::setLabels(const OAIUpdateNodegroupConfigRequest_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIUpdateNodegroupConfigRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIUpdateNodegroupConfigRequest_taints OAIUpdateNodegroupConfigRequest::getTaints() const {
    return m_taints;
}
void OAIUpdateNodegroupConfigRequest::setTaints(const OAIUpdateNodegroupConfigRequest_taints &taints) {
    m_taints = taints;
    m_taints_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest::is_taints_Set() const{
    return m_taints_isSet;
}

bool OAIUpdateNodegroupConfigRequest::is_taints_Valid() const{
    return m_taints_isValid;
}

OAIUpdateNodegroupConfigRequest_scalingConfig OAIUpdateNodegroupConfigRequest::getScalingConfig() const {
    return m_scaling_config;
}
void OAIUpdateNodegroupConfigRequest::setScalingConfig(const OAIUpdateNodegroupConfigRequest_scalingConfig &scaling_config) {
    m_scaling_config = scaling_config;
    m_scaling_config_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest::is_scaling_config_Set() const{
    return m_scaling_config_isSet;
}

bool OAIUpdateNodegroupConfigRequest::is_scaling_config_Valid() const{
    return m_scaling_config_isValid;
}

OAICreateNodegroupRequest_updateConfig OAIUpdateNodegroupConfigRequest::getUpdateConfig() const {
    return m_update_config;
}
void OAIUpdateNodegroupConfigRequest::setUpdateConfig(const OAICreateNodegroupRequest_updateConfig &update_config) {
    m_update_config = update_config;
    m_update_config_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest::is_update_config_Set() const{
    return m_update_config_isSet;
}

bool OAIUpdateNodegroupConfigRequest::is_update_config_Valid() const{
    return m_update_config_isValid;
}

QString OAIUpdateNodegroupConfigRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateNodegroupConfigRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateNodegroupConfigRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIUpdateNodegroupConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNodegroupConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
