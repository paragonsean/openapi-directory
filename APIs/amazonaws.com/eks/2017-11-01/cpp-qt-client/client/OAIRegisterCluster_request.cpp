/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterCluster_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterCluster_request::OAIRegisterCluster_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterCluster_request::OAIRegisterCluster_request() {
    this->initializeModel();
}

OAIRegisterCluster_request::~OAIRegisterCluster_request() {}

void OAIRegisterCluster_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_connector_config_isSet = false;
    m_connector_config_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRegisterCluster_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterCluster_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_connector_config_isValid = ::OpenAPI::fromJsonValue(m_connector_config, json[QString("connectorConfig")]);
    m_connector_config_isSet = !json[QString("connectorConfig")].isNull() && m_connector_config_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRegisterCluster_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterCluster_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_connector_config.isSet()) {
        obj.insert(QString("connectorConfig"), ::OpenAPI::toJsonValue(m_connector_config));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIRegisterCluster_request::getName() const {
    return m_name;
}
void OAIRegisterCluster_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegisterCluster_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegisterCluster_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIRegisterCluster_request_connectorConfig OAIRegisterCluster_request::getConnectorConfig() const {
    return m_connector_config;
}
void OAIRegisterCluster_request::setConnectorConfig(const OAIRegisterCluster_request_connectorConfig &connector_config) {
    m_connector_config = connector_config;
    m_connector_config_isSet = true;
}

bool OAIRegisterCluster_request::is_connector_config_Set() const{
    return m_connector_config_isSet;
}

bool OAIRegisterCluster_request::is_connector_config_Valid() const{
    return m_connector_config_isValid;
}

QString OAIRegisterCluster_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIRegisterCluster_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIRegisterCluster_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIRegisterCluster_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap<QString, QString> OAIRegisterCluster_request::getTags() const {
    return m_tags;
}
void OAIRegisterCluster_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterCluster_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterCluster_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRegisterCluster_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterCluster_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_connector_config_isValid && true;
}

} // namespace OpenAPI
