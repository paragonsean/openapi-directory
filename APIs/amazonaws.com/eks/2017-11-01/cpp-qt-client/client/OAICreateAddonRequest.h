/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAddonRequest.h
 *
 * 
 */

#ifndef OAICreateAddonRequest_H
#define OAICreateAddonRequest_H

#include <QJsonObject>

#include "OAIResolveConflicts.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateAddonRequest : public OAIObject {
public:
    OAICreateAddonRequest();
    OAICreateAddonRequest(QString json);
    ~OAICreateAddonRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddonName() const;
    void setAddonName(const QString &addon_name);
    bool is_addon_name_Set() const;
    bool is_addon_name_Valid() const;

    QString getAddonVersion() const;
    void setAddonVersion(const QString &addon_version);
    bool is_addon_version_Set() const;
    bool is_addon_version_Valid() const;

    QString getServiceAccountRoleArn() const;
    void setServiceAccountRoleArn(const QString &service_account_role_arn);
    bool is_service_account_role_arn_Set() const;
    bool is_service_account_role_arn_Valid() const;

    OAIResolveConflicts getResolveConflicts() const;
    void setResolveConflicts(const OAIResolveConflicts &resolve_conflicts);
    bool is_resolve_conflicts_Set() const;
    bool is_resolve_conflicts_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getConfigurationValues() const;
    void setConfigurationValues(const QString &configuration_values);
    bool is_configuration_values_Set() const;
    bool is_configuration_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_addon_name;
    bool m_addon_name_isSet;
    bool m_addon_name_isValid;

    QString m_addon_version;
    bool m_addon_version_isSet;
    bool m_addon_version_isValid;

    QString m_service_account_role_arn;
    bool m_service_account_role_arn_isSet;
    bool m_service_account_role_arn_isValid;

    OAIResolveConflicts m_resolve_conflicts;
    bool m_resolve_conflicts_isSet;
    bool m_resolve_conflicts_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_configuration_values;
    bool m_configuration_values_isSet;
    bool m_configuration_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAddonRequest)

#endif // OAICreateAddonRequest_H
