/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster_kubernetesNetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster_kubernetesNetworkConfig::OAICluster_kubernetesNetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster_kubernetesNetworkConfig::OAICluster_kubernetesNetworkConfig() {
    this->initializeModel();
}

OAICluster_kubernetesNetworkConfig::~OAICluster_kubernetesNetworkConfig() {}

void OAICluster_kubernetesNetworkConfig::initializeModel() {

    m_service_ipv4_cidr_isSet = false;
    m_service_ipv4_cidr_isValid = false;

    m_service_ipv6_cidr_isSet = false;
    m_service_ipv6_cidr_isValid = false;

    m_ip_family_isSet = false;
    m_ip_family_isValid = false;
}

void OAICluster_kubernetesNetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster_kubernetesNetworkConfig::fromJsonObject(QJsonObject json) {

    m_service_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_service_ipv4_cidr, json[QString("serviceIpv4Cidr")]);
    m_service_ipv4_cidr_isSet = !json[QString("serviceIpv4Cidr")].isNull() && m_service_ipv4_cidr_isValid;

    m_service_ipv6_cidr_isValid = ::OpenAPI::fromJsonValue(m_service_ipv6_cidr, json[QString("serviceIpv6Cidr")]);
    m_service_ipv6_cidr_isSet = !json[QString("serviceIpv6Cidr")].isNull() && m_service_ipv6_cidr_isValid;

    m_ip_family_isValid = ::OpenAPI::fromJsonValue(m_ip_family, json[QString("ipFamily")]);
    m_ip_family_isSet = !json[QString("ipFamily")].isNull() && m_ip_family_isValid;
}

QString OAICluster_kubernetesNetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster_kubernetesNetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_service_ipv4_cidr_isSet) {
        obj.insert(QString("serviceIpv4Cidr"), ::OpenAPI::toJsonValue(m_service_ipv4_cidr));
    }
    if (m_service_ipv6_cidr_isSet) {
        obj.insert(QString("serviceIpv6Cidr"), ::OpenAPI::toJsonValue(m_service_ipv6_cidr));
    }
    if (m_ip_family.isSet()) {
        obj.insert(QString("ipFamily"), ::OpenAPI::toJsonValue(m_ip_family));
    }
    return obj;
}

QString OAICluster_kubernetesNetworkConfig::getServiceIpv4Cidr() const {
    return m_service_ipv4_cidr;
}
void OAICluster_kubernetesNetworkConfig::setServiceIpv4Cidr(const QString &service_ipv4_cidr) {
    m_service_ipv4_cidr = service_ipv4_cidr;
    m_service_ipv4_cidr_isSet = true;
}

bool OAICluster_kubernetesNetworkConfig::is_service_ipv4_cidr_Set() const{
    return m_service_ipv4_cidr_isSet;
}

bool OAICluster_kubernetesNetworkConfig::is_service_ipv4_cidr_Valid() const{
    return m_service_ipv4_cidr_isValid;
}

QString OAICluster_kubernetesNetworkConfig::getServiceIpv6Cidr() const {
    return m_service_ipv6_cidr;
}
void OAICluster_kubernetesNetworkConfig::setServiceIpv6Cidr(const QString &service_ipv6_cidr) {
    m_service_ipv6_cidr = service_ipv6_cidr;
    m_service_ipv6_cidr_isSet = true;
}

bool OAICluster_kubernetesNetworkConfig::is_service_ipv6_cidr_Set() const{
    return m_service_ipv6_cidr_isSet;
}

bool OAICluster_kubernetesNetworkConfig::is_service_ipv6_cidr_Valid() const{
    return m_service_ipv6_cidr_isValid;
}

OAIIpFamily OAICluster_kubernetesNetworkConfig::getIpFamily() const {
    return m_ip_family;
}
void OAICluster_kubernetesNetworkConfig::setIpFamily(const OAIIpFamily &ip_family) {
    m_ip_family = ip_family;
    m_ip_family_isSet = true;
}

bool OAICluster_kubernetesNetworkConfig::is_ip_family_Set() const{
    return m_ip_family_isSet;
}

bool OAICluster_kubernetesNetworkConfig::is_ip_family_Valid() const{
    return m_ip_family_isValid;
}

bool OAICluster_kubernetesNetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ipv6_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_family.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster_kubernetesNetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
