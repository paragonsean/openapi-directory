/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateIdentityProviderConfigRequest_oidc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateIdentityProviderConfigRequest_oidc::OAIAssociateIdentityProviderConfigRequest_oidc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateIdentityProviderConfigRequest_oidc::OAIAssociateIdentityProviderConfigRequest_oidc() {
    this->initializeModel();
}

OAIAssociateIdentityProviderConfigRequest_oidc::~OAIAssociateIdentityProviderConfigRequest_oidc() {}

void OAIAssociateIdentityProviderConfigRequest_oidc::initializeModel() {

    m_identity_provider_config_name_isSet = false;
    m_identity_provider_config_name_isValid = false;

    m_issuer_url_isSet = false;
    m_issuer_url_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_username_claim_isSet = false;
    m_username_claim_isValid = false;

    m_username_prefix_isSet = false;
    m_username_prefix_isValid = false;

    m_groups_claim_isSet = false;
    m_groups_claim_isValid = false;

    m_groups_prefix_isSet = false;
    m_groups_prefix_isValid = false;

    m_required_claims_isSet = false;
    m_required_claims_isValid = false;
}

void OAIAssociateIdentityProviderConfigRequest_oidc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateIdentityProviderConfigRequest_oidc::fromJsonObject(QJsonObject json) {

    m_identity_provider_config_name_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_config_name, json[QString("identityProviderConfigName")]);
    m_identity_provider_config_name_isSet = !json[QString("identityProviderConfigName")].isNull() && m_identity_provider_config_name_isValid;

    m_issuer_url_isValid = ::OpenAPI::fromJsonValue(m_issuer_url, json[QString("issuerUrl")]);
    m_issuer_url_isSet = !json[QString("issuerUrl")].isNull() && m_issuer_url_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_username_claim_isValid = ::OpenAPI::fromJsonValue(m_username_claim, json[QString("usernameClaim")]);
    m_username_claim_isSet = !json[QString("usernameClaim")].isNull() && m_username_claim_isValid;

    m_username_prefix_isValid = ::OpenAPI::fromJsonValue(m_username_prefix, json[QString("usernamePrefix")]);
    m_username_prefix_isSet = !json[QString("usernamePrefix")].isNull() && m_username_prefix_isValid;

    m_groups_claim_isValid = ::OpenAPI::fromJsonValue(m_groups_claim, json[QString("groupsClaim")]);
    m_groups_claim_isSet = !json[QString("groupsClaim")].isNull() && m_groups_claim_isValid;

    m_groups_prefix_isValid = ::OpenAPI::fromJsonValue(m_groups_prefix, json[QString("groupsPrefix")]);
    m_groups_prefix_isSet = !json[QString("groupsPrefix")].isNull() && m_groups_prefix_isValid;

    m_required_claims_isValid = ::OpenAPI::fromJsonValue(m_required_claims, json[QString("requiredClaims")]);
    m_required_claims_isSet = !json[QString("requiredClaims")].isNull() && m_required_claims_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateIdentityProviderConfigRequest_oidc::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_provider_config_name_isSet) {
        obj.insert(QString("identityProviderConfigName"), ::OpenAPI::toJsonValue(m_identity_provider_config_name));
    }
    if (m_issuer_url_isSet) {
        obj.insert(QString("issuerUrl"), ::OpenAPI::toJsonValue(m_issuer_url));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_username_claim_isSet) {
        obj.insert(QString("usernameClaim"), ::OpenAPI::toJsonValue(m_username_claim));
    }
    if (m_username_prefix_isSet) {
        obj.insert(QString("usernamePrefix"), ::OpenAPI::toJsonValue(m_username_prefix));
    }
    if (m_groups_claim_isSet) {
        obj.insert(QString("groupsClaim"), ::OpenAPI::toJsonValue(m_groups_claim));
    }
    if (m_groups_prefix_isSet) {
        obj.insert(QString("groupsPrefix"), ::OpenAPI::toJsonValue(m_groups_prefix));
    }
    if (m_required_claims.isSet()) {
        obj.insert(QString("requiredClaims"), ::OpenAPI::toJsonValue(m_required_claims));
    }
    return obj;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getIdentityProviderConfigName() const {
    return m_identity_provider_config_name;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setIdentityProviderConfigName(const QString &identity_provider_config_name) {
    m_identity_provider_config_name = identity_provider_config_name;
    m_identity_provider_config_name_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_identity_provider_config_name_Set() const{
    return m_identity_provider_config_name_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_identity_provider_config_name_Valid() const{
    return m_identity_provider_config_name_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getIssuerUrl() const {
    return m_issuer_url;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setIssuerUrl(const QString &issuer_url) {
    m_issuer_url = issuer_url;
    m_issuer_url_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_issuer_url_Set() const{
    return m_issuer_url_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_issuer_url_Valid() const{
    return m_issuer_url_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getClientId() const {
    return m_client_id;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getUsernameClaim() const {
    return m_username_claim;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setUsernameClaim(const QString &username_claim) {
    m_username_claim = username_claim;
    m_username_claim_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_username_claim_Set() const{
    return m_username_claim_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_username_claim_Valid() const{
    return m_username_claim_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getUsernamePrefix() const {
    return m_username_prefix;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setUsernamePrefix(const QString &username_prefix) {
    m_username_prefix = username_prefix;
    m_username_prefix_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_username_prefix_Set() const{
    return m_username_prefix_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_username_prefix_Valid() const{
    return m_username_prefix_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getGroupsClaim() const {
    return m_groups_claim;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setGroupsClaim(const QString &groups_claim) {
    m_groups_claim = groups_claim;
    m_groups_claim_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_groups_claim_Set() const{
    return m_groups_claim_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_groups_claim_Valid() const{
    return m_groups_claim_isValid;
}

QString OAIAssociateIdentityProviderConfigRequest_oidc::getGroupsPrefix() const {
    return m_groups_prefix;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setGroupsPrefix(const QString &groups_prefix) {
    m_groups_prefix = groups_prefix;
    m_groups_prefix_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_groups_prefix_Set() const{
    return m_groups_prefix_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_groups_prefix_Valid() const{
    return m_groups_prefix_isValid;
}

QMap OAIAssociateIdentityProviderConfigRequest_oidc::getRequiredClaims() const {
    return m_required_claims;
}
void OAIAssociateIdentityProviderConfigRequest_oidc::setRequiredClaims(const QMap &required_claims) {
    m_required_claims = required_claims;
    m_required_claims_isSet = true;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_required_claims_Set() const{
    return m_required_claims_isSet;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::is_required_claims_Valid() const{
    return m_required_claims_isValid;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_provider_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateIdentityProviderConfigRequest_oidc::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_provider_config_name_isValid && m_issuer_url_isValid && m_client_id_isValid && true;
}

} // namespace OpenAPI
