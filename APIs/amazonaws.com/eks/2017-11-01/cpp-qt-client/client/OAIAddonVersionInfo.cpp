/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddonVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddonVersionInfo::OAIAddonVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddonVersionInfo::OAIAddonVersionInfo() {
    this->initializeModel();
}

OAIAddonVersionInfo::~OAIAddonVersionInfo() {}

void OAIAddonVersionInfo::initializeModel() {

    m_addon_version_isSet = false;
    m_addon_version_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_compatibilities_isSet = false;
    m_compatibilities_isValid = false;

    m_requires_configuration_isSet = false;
    m_requires_configuration_isValid = false;
}

void OAIAddonVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddonVersionInfo::fromJsonObject(QJsonObject json) {

    m_addon_version_isValid = ::OpenAPI::fromJsonValue(m_addon_version, json[QString("addonVersion")]);
    m_addon_version_isSet = !json[QString("addonVersion")].isNull() && m_addon_version_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_compatibilities_isValid = ::OpenAPI::fromJsonValue(m_compatibilities, json[QString("compatibilities")]);
    m_compatibilities_isSet = !json[QString("compatibilities")].isNull() && m_compatibilities_isValid;

    m_requires_configuration_isValid = ::OpenAPI::fromJsonValue(m_requires_configuration, json[QString("requiresConfiguration")]);
    m_requires_configuration_isSet = !json[QString("requiresConfiguration")].isNull() && m_requires_configuration_isValid;
}

QString OAIAddonVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddonVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_version_isSet) {
        obj.insert(QString("addonVersion"), ::OpenAPI::toJsonValue(m_addon_version));
    }
    if (m_architecture.isSet()) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_compatibilities.isSet()) {
        obj.insert(QString("compatibilities"), ::OpenAPI::toJsonValue(m_compatibilities));
    }
    if (m_requires_configuration_isSet) {
        obj.insert(QString("requiresConfiguration"), ::OpenAPI::toJsonValue(m_requires_configuration));
    }
    return obj;
}

QString OAIAddonVersionInfo::getAddonVersion() const {
    return m_addon_version;
}
void OAIAddonVersionInfo::setAddonVersion(const QString &addon_version) {
    m_addon_version = addon_version;
    m_addon_version_isSet = true;
}

bool OAIAddonVersionInfo::is_addon_version_Set() const{
    return m_addon_version_isSet;
}

bool OAIAddonVersionInfo::is_addon_version_Valid() const{
    return m_addon_version_isValid;
}

QList OAIAddonVersionInfo::getArchitecture() const {
    return m_architecture;
}
void OAIAddonVersionInfo::setArchitecture(const QList &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIAddonVersionInfo::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIAddonVersionInfo::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QList OAIAddonVersionInfo::getCompatibilities() const {
    return m_compatibilities;
}
void OAIAddonVersionInfo::setCompatibilities(const QList &compatibilities) {
    m_compatibilities = compatibilities;
    m_compatibilities_isSet = true;
}

bool OAIAddonVersionInfo::is_compatibilities_Set() const{
    return m_compatibilities_isSet;
}

bool OAIAddonVersionInfo::is_compatibilities_Valid() const{
    return m_compatibilities_isValid;
}

bool OAIAddonVersionInfo::getRequiresConfiguration() const {
    return m_requires_configuration;
}
void OAIAddonVersionInfo::setRequiresConfiguration(const bool &requires_configuration) {
    m_requires_configuration = requires_configuration;
    m_requires_configuration_isSet = true;
}

bool OAIAddonVersionInfo::is_requires_configuration_Set() const{
    return m_requires_configuration_isSet;
}

bool OAIAddonVersionInfo::is_requires_configuration_Valid() const{
    return m_requires_configuration_isValid;
}

bool OAIAddonVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddonVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
