/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNodegroup_request_scalingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNodegroup_request_scalingConfig::OAICreateNodegroup_request_scalingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNodegroup_request_scalingConfig::OAICreateNodegroup_request_scalingConfig() {
    this->initializeModel();
}

OAICreateNodegroup_request_scalingConfig::~OAICreateNodegroup_request_scalingConfig() {}

void OAICreateNodegroup_request_scalingConfig::initializeModel() {

    m_min_size_isSet = false;
    m_min_size_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_desired_size_isSet = false;
    m_desired_size_isValid = false;
}

void OAICreateNodegroup_request_scalingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNodegroup_request_scalingConfig::fromJsonObject(QJsonObject json) {

    m_min_size_isValid = ::OpenAPI::fromJsonValue(m_min_size, json[QString("minSize")]);
    m_min_size_isSet = !json[QString("minSize")].isNull() && m_min_size_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("maxSize")]);
    m_max_size_isSet = !json[QString("maxSize")].isNull() && m_max_size_isValid;

    m_desired_size_isValid = ::OpenAPI::fromJsonValue(m_desired_size, json[QString("desiredSize")]);
    m_desired_size_isSet = !json[QString("desiredSize")].isNull() && m_desired_size_isValid;
}

QString OAICreateNodegroup_request_scalingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNodegroup_request_scalingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_min_size_isSet) {
        obj.insert(QString("minSize"), ::OpenAPI::toJsonValue(m_min_size));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("maxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_desired_size_isSet) {
        obj.insert(QString("desiredSize"), ::OpenAPI::toJsonValue(m_desired_size));
    }
    return obj;
}

qint32 OAICreateNodegroup_request_scalingConfig::getMinSize() const {
    return m_min_size;
}
void OAICreateNodegroup_request_scalingConfig::setMinSize(const qint32 &min_size) {
    m_min_size = min_size;
    m_min_size_isSet = true;
}

bool OAICreateNodegroup_request_scalingConfig::is_min_size_Set() const{
    return m_min_size_isSet;
}

bool OAICreateNodegroup_request_scalingConfig::is_min_size_Valid() const{
    return m_min_size_isValid;
}

qint32 OAICreateNodegroup_request_scalingConfig::getMaxSize() const {
    return m_max_size;
}
void OAICreateNodegroup_request_scalingConfig::setMaxSize(const qint32 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAICreateNodegroup_request_scalingConfig::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAICreateNodegroup_request_scalingConfig::is_max_size_Valid() const{
    return m_max_size_isValid;
}

qint32 OAICreateNodegroup_request_scalingConfig::getDesiredSize() const {
    return m_desired_size;
}
void OAICreateNodegroup_request_scalingConfig::setDesiredSize(const qint32 &desired_size) {
    m_desired_size = desired_size;
    m_desired_size_isSet = true;
}

bool OAICreateNodegroup_request_scalingConfig::is_desired_size_Set() const{
    return m_desired_size_isSet;
}

bool OAICreateNodegroup_request_scalingConfig::is_desired_size_Valid() const{
    return m_desired_size_isValid;
}

bool OAICreateNodegroup_request_scalingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNodegroup_request_scalingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
