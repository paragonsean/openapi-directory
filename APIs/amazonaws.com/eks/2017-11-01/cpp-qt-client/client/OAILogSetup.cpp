/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogSetup::OAILogSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogSetup::OAILogSetup() {
    this->initializeModel();
}

OAILogSetup::~OAILogSetup() {}

void OAILogSetup::initializeModel() {

    m_types_isSet = false;
    m_types_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAILogSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogSetup::fromJsonObject(QJsonObject json) {

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;
}

QString OAILogSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_types.isSet()) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

QList OAILogSetup::getTypes() const {
    return m_types;
}
void OAILogSetup::setTypes(const QList &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAILogSetup::is_types_Set() const{
    return m_types_isSet;
}

bool OAILogSetup::is_types_Valid() const{
    return m_types_isValid;
}

bool OAILogSetup::getEnabled() const {
    return m_enabled;
}
void OAILogSetup::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAILogSetup::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAILogSetup::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAILogSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
