/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCluster_request_kubernetesNetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCluster_request_kubernetesNetworkConfig::OAICreateCluster_request_kubernetesNetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCluster_request_kubernetesNetworkConfig::OAICreateCluster_request_kubernetesNetworkConfig() {
    this->initializeModel();
}

OAICreateCluster_request_kubernetesNetworkConfig::~OAICreateCluster_request_kubernetesNetworkConfig() {}

void OAICreateCluster_request_kubernetesNetworkConfig::initializeModel() {

    m_service_ipv4_cidr_isSet = false;
    m_service_ipv4_cidr_isValid = false;

    m_ip_family_isSet = false;
    m_ip_family_isValid = false;
}

void OAICreateCluster_request_kubernetesNetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCluster_request_kubernetesNetworkConfig::fromJsonObject(QJsonObject json) {

    m_service_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_service_ipv4_cidr, json[QString("serviceIpv4Cidr")]);
    m_service_ipv4_cidr_isSet = !json[QString("serviceIpv4Cidr")].isNull() && m_service_ipv4_cidr_isValid;

    m_ip_family_isValid = ::OpenAPI::fromJsonValue(m_ip_family, json[QString("ipFamily")]);
    m_ip_family_isSet = !json[QString("ipFamily")].isNull() && m_ip_family_isValid;
}

QString OAICreateCluster_request_kubernetesNetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCluster_request_kubernetesNetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_service_ipv4_cidr_isSet) {
        obj.insert(QString("serviceIpv4Cidr"), ::OpenAPI::toJsonValue(m_service_ipv4_cidr));
    }
    if (m_ip_family.isSet()) {
        obj.insert(QString("ipFamily"), ::OpenAPI::toJsonValue(m_ip_family));
    }
    return obj;
}

QString OAICreateCluster_request_kubernetesNetworkConfig::getServiceIpv4Cidr() const {
    return m_service_ipv4_cidr;
}
void OAICreateCluster_request_kubernetesNetworkConfig::setServiceIpv4Cidr(const QString &service_ipv4_cidr) {
    m_service_ipv4_cidr = service_ipv4_cidr;
    m_service_ipv4_cidr_isSet = true;
}

bool OAICreateCluster_request_kubernetesNetworkConfig::is_service_ipv4_cidr_Set() const{
    return m_service_ipv4_cidr_isSet;
}

bool OAICreateCluster_request_kubernetesNetworkConfig::is_service_ipv4_cidr_Valid() const{
    return m_service_ipv4_cidr_isValid;
}

OAIIpFamily OAICreateCluster_request_kubernetesNetworkConfig::getIpFamily() const {
    return m_ip_family;
}
void OAICreateCluster_request_kubernetesNetworkConfig::setIpFamily(const OAIIpFamily &ip_family) {
    m_ip_family = ip_family;
    m_ip_family_isSet = true;
}

bool OAICreateCluster_request_kubernetesNetworkConfig::is_ip_family_Set() const{
    return m_ip_family_isSet;
}

bool OAICreateCluster_request_kubernetesNetworkConfig::is_ip_family_Valid() const{
    return m_ip_family_isValid;
}

bool OAICreateCluster_request_kubernetesNetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_family.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCluster_request_kubernetesNetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
