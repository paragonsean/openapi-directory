/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProviderConfigResponse_oidc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProviderConfigResponse_oidc::OAIIdentityProviderConfigResponse_oidc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProviderConfigResponse_oidc::OAIIdentityProviderConfigResponse_oidc() {
    this->initializeModel();
}

OAIIdentityProviderConfigResponse_oidc::~OAIIdentityProviderConfigResponse_oidc() {}

void OAIIdentityProviderConfigResponse_oidc::initializeModel() {

    m_identity_provider_config_name_isSet = false;
    m_identity_provider_config_name_isValid = false;

    m_identity_provider_config_arn_isSet = false;
    m_identity_provider_config_arn_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_issuer_url_isSet = false;
    m_issuer_url_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_username_claim_isSet = false;
    m_username_claim_isValid = false;

    m_username_prefix_isSet = false;
    m_username_prefix_isValid = false;

    m_groups_claim_isSet = false;
    m_groups_claim_isValid = false;

    m_groups_prefix_isSet = false;
    m_groups_prefix_isValid = false;

    m_required_claims_isSet = false;
    m_required_claims_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIIdentityProviderConfigResponse_oidc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProviderConfigResponse_oidc::fromJsonObject(QJsonObject json) {

    m_identity_provider_config_name_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_config_name, json[QString("identityProviderConfigName")]);
    m_identity_provider_config_name_isSet = !json[QString("identityProviderConfigName")].isNull() && m_identity_provider_config_name_isValid;

    m_identity_provider_config_arn_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_config_arn, json[QString("identityProviderConfigArn")]);
    m_identity_provider_config_arn_isSet = !json[QString("identityProviderConfigArn")].isNull() && m_identity_provider_config_arn_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_issuer_url_isValid = ::OpenAPI::fromJsonValue(m_issuer_url, json[QString("issuerUrl")]);
    m_issuer_url_isSet = !json[QString("issuerUrl")].isNull() && m_issuer_url_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_username_claim_isValid = ::OpenAPI::fromJsonValue(m_username_claim, json[QString("usernameClaim")]);
    m_username_claim_isSet = !json[QString("usernameClaim")].isNull() && m_username_claim_isValid;

    m_username_prefix_isValid = ::OpenAPI::fromJsonValue(m_username_prefix, json[QString("usernamePrefix")]);
    m_username_prefix_isSet = !json[QString("usernamePrefix")].isNull() && m_username_prefix_isValid;

    m_groups_claim_isValid = ::OpenAPI::fromJsonValue(m_groups_claim, json[QString("groupsClaim")]);
    m_groups_claim_isSet = !json[QString("groupsClaim")].isNull() && m_groups_claim_isValid;

    m_groups_prefix_isValid = ::OpenAPI::fromJsonValue(m_groups_prefix, json[QString("groupsPrefix")]);
    m_groups_prefix_isSet = !json[QString("groupsPrefix")].isNull() && m_groups_prefix_isValid;

    m_required_claims_isValid = ::OpenAPI::fromJsonValue(m_required_claims, json[QString("requiredClaims")]);
    m_required_claims_isSet = !json[QString("requiredClaims")].isNull() && m_required_claims_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProviderConfigResponse_oidc::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_provider_config_name_isSet) {
        obj.insert(QString("identityProviderConfigName"), ::OpenAPI::toJsonValue(m_identity_provider_config_name));
    }
    if (m_identity_provider_config_arn_isSet) {
        obj.insert(QString("identityProviderConfigArn"), ::OpenAPI::toJsonValue(m_identity_provider_config_arn));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_issuer_url_isSet) {
        obj.insert(QString("issuerUrl"), ::OpenAPI::toJsonValue(m_issuer_url));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_username_claim_isSet) {
        obj.insert(QString("usernameClaim"), ::OpenAPI::toJsonValue(m_username_claim));
    }
    if (m_username_prefix_isSet) {
        obj.insert(QString("usernamePrefix"), ::OpenAPI::toJsonValue(m_username_prefix));
    }
    if (m_groups_claim_isSet) {
        obj.insert(QString("groupsClaim"), ::OpenAPI::toJsonValue(m_groups_claim));
    }
    if (m_groups_prefix_isSet) {
        obj.insert(QString("groupsPrefix"), ::OpenAPI::toJsonValue(m_groups_prefix));
    }
    if (m_required_claims.isSet()) {
        obj.insert(QString("requiredClaims"), ::OpenAPI::toJsonValue(m_required_claims));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIIdentityProviderConfigResponse_oidc::getIdentityProviderConfigName() const {
    return m_identity_provider_config_name;
}
void OAIIdentityProviderConfigResponse_oidc::setIdentityProviderConfigName(const QString &identity_provider_config_name) {
    m_identity_provider_config_name = identity_provider_config_name;
    m_identity_provider_config_name_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_identity_provider_config_name_Set() const{
    return m_identity_provider_config_name_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_identity_provider_config_name_Valid() const{
    return m_identity_provider_config_name_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getIdentityProviderConfigArn() const {
    return m_identity_provider_config_arn;
}
void OAIIdentityProviderConfigResponse_oidc::setIdentityProviderConfigArn(const QString &identity_provider_config_arn) {
    m_identity_provider_config_arn = identity_provider_config_arn;
    m_identity_provider_config_arn_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_identity_provider_config_arn_Set() const{
    return m_identity_provider_config_arn_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_identity_provider_config_arn_Valid() const{
    return m_identity_provider_config_arn_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getClusterName() const {
    return m_cluster_name;
}
void OAIIdentityProviderConfigResponse_oidc::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getIssuerUrl() const {
    return m_issuer_url;
}
void OAIIdentityProviderConfigResponse_oidc::setIssuerUrl(const QString &issuer_url) {
    m_issuer_url = issuer_url;
    m_issuer_url_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_issuer_url_Set() const{
    return m_issuer_url_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_issuer_url_Valid() const{
    return m_issuer_url_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getClientId() const {
    return m_client_id;
}
void OAIIdentityProviderConfigResponse_oidc::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getUsernameClaim() const {
    return m_username_claim;
}
void OAIIdentityProviderConfigResponse_oidc::setUsernameClaim(const QString &username_claim) {
    m_username_claim = username_claim;
    m_username_claim_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_username_claim_Set() const{
    return m_username_claim_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_username_claim_Valid() const{
    return m_username_claim_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getUsernamePrefix() const {
    return m_username_prefix;
}
void OAIIdentityProviderConfigResponse_oidc::setUsernamePrefix(const QString &username_prefix) {
    m_username_prefix = username_prefix;
    m_username_prefix_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_username_prefix_Set() const{
    return m_username_prefix_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_username_prefix_Valid() const{
    return m_username_prefix_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getGroupsClaim() const {
    return m_groups_claim;
}
void OAIIdentityProviderConfigResponse_oidc::setGroupsClaim(const QString &groups_claim) {
    m_groups_claim = groups_claim;
    m_groups_claim_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_groups_claim_Set() const{
    return m_groups_claim_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_groups_claim_Valid() const{
    return m_groups_claim_isValid;
}

QString OAIIdentityProviderConfigResponse_oidc::getGroupsPrefix() const {
    return m_groups_prefix;
}
void OAIIdentityProviderConfigResponse_oidc::setGroupsPrefix(const QString &groups_prefix) {
    m_groups_prefix = groups_prefix;
    m_groups_prefix_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_groups_prefix_Set() const{
    return m_groups_prefix_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_groups_prefix_Valid() const{
    return m_groups_prefix_isValid;
}

QMap OAIIdentityProviderConfigResponse_oidc::getRequiredClaims() const {
    return m_required_claims;
}
void OAIIdentityProviderConfigResponse_oidc::setRequiredClaims(const QMap &required_claims) {
    m_required_claims = required_claims;
    m_required_claims_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_required_claims_Set() const{
    return m_required_claims_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_required_claims_Valid() const{
    return m_required_claims_isValid;
}

QMap OAIIdentityProviderConfigResponse_oidc::getTags() const {
    return m_tags;
}
void OAIIdentityProviderConfigResponse_oidc::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIConfigStatus OAIIdentityProviderConfigResponse_oidc::getStatus() const {
    return m_status;
}
void OAIIdentityProviderConfigResponse_oidc::setStatus(const OAIConfigStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIdentityProviderConfigResponse_oidc::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIdentityProviderConfigResponse_oidc::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIIdentityProviderConfigResponse_oidc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_provider_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_config_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProviderConfigResponse_oidc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
