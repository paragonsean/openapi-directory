/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFargateProfile_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFargateProfile_request::OAICreateFargateProfile_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFargateProfile_request::OAICreateFargateProfile_request() {
    this->initializeModel();
}

OAICreateFargateProfile_request::~OAICreateFargateProfile_request() {}

void OAICreateFargateProfile_request::initializeModel() {

    m_fargate_profile_name_isSet = false;
    m_fargate_profile_name_isValid = false;

    m_pod_execution_role_arn_isSet = false;
    m_pod_execution_role_arn_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_selectors_isSet = false;
    m_selectors_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateFargateProfile_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFargateProfile_request::fromJsonObject(QJsonObject json) {

    m_fargate_profile_name_isValid = ::OpenAPI::fromJsonValue(m_fargate_profile_name, json[QString("fargateProfileName")]);
    m_fargate_profile_name_isSet = !json[QString("fargateProfileName")].isNull() && m_fargate_profile_name_isValid;

    m_pod_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_pod_execution_role_arn, json[QString("podExecutionRoleArn")]);
    m_pod_execution_role_arn_isSet = !json[QString("podExecutionRoleArn")].isNull() && m_pod_execution_role_arn_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;

    m_selectors_isValid = ::OpenAPI::fromJsonValue(m_selectors, json[QString("selectors")]);
    m_selectors_isSet = !json[QString("selectors")].isNull() && m_selectors_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateFargateProfile_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFargateProfile_request::asJsonObject() const {
    QJsonObject obj;
    if (m_fargate_profile_name_isSet) {
        obj.insert(QString("fargateProfileName"), ::OpenAPI::toJsonValue(m_fargate_profile_name));
    }
    if (m_pod_execution_role_arn_isSet) {
        obj.insert(QString("podExecutionRoleArn"), ::OpenAPI::toJsonValue(m_pod_execution_role_arn));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_selectors.size() > 0) {
        obj.insert(QString("selectors"), ::OpenAPI::toJsonValue(m_selectors));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateFargateProfile_request::getFargateProfileName() const {
    return m_fargate_profile_name;
}
void OAICreateFargateProfile_request::setFargateProfileName(const QString &fargate_profile_name) {
    m_fargate_profile_name = fargate_profile_name;
    m_fargate_profile_name_isSet = true;
}

bool OAICreateFargateProfile_request::is_fargate_profile_name_Set() const{
    return m_fargate_profile_name_isSet;
}

bool OAICreateFargateProfile_request::is_fargate_profile_name_Valid() const{
    return m_fargate_profile_name_isValid;
}

QString OAICreateFargateProfile_request::getPodExecutionRoleArn() const {
    return m_pod_execution_role_arn;
}
void OAICreateFargateProfile_request::setPodExecutionRoleArn(const QString &pod_execution_role_arn) {
    m_pod_execution_role_arn = pod_execution_role_arn;
    m_pod_execution_role_arn_isSet = true;
}

bool OAICreateFargateProfile_request::is_pod_execution_role_arn_Set() const{
    return m_pod_execution_role_arn_isSet;
}

bool OAICreateFargateProfile_request::is_pod_execution_role_arn_Valid() const{
    return m_pod_execution_role_arn_isValid;
}

QList<QString> OAICreateFargateProfile_request::getSubnets() const {
    return m_subnets;
}
void OAICreateFargateProfile_request::setSubnets(const QList<QString> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAICreateFargateProfile_request::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAICreateFargateProfile_request::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList<OAIFargateProfileSelector> OAICreateFargateProfile_request::getSelectors() const {
    return m_selectors;
}
void OAICreateFargateProfile_request::setSelectors(const QList<OAIFargateProfileSelector> &selectors) {
    m_selectors = selectors;
    m_selectors_isSet = true;
}

bool OAICreateFargateProfile_request::is_selectors_Set() const{
    return m_selectors_isSet;
}

bool OAICreateFargateProfile_request::is_selectors_Valid() const{
    return m_selectors_isValid;
}

QString OAICreateFargateProfile_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateFargateProfile_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateFargateProfile_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateFargateProfile_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap<QString, QString> OAICreateFargateProfile_request::getTags() const {
    return m_tags;
}
void OAICreateFargateProfile_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFargateProfile_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFargateProfile_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateFargateProfile_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fargate_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFargateProfile_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fargate_profile_name_isValid && m_pod_execution_role_arn_isValid && true;
}

} // namespace OpenAPI
