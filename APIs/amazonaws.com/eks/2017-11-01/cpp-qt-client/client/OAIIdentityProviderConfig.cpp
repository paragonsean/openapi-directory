/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProviderConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProviderConfig::OAIIdentityProviderConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProviderConfig::OAIIdentityProviderConfig() {
    this->initializeModel();
}

OAIIdentityProviderConfig::~OAIIdentityProviderConfig() {}

void OAIIdentityProviderConfig::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIIdentityProviderConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProviderConfig::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIIdentityProviderConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProviderConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIIdentityProviderConfig::getType() const {
    return m_type;
}
void OAIIdentityProviderConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIdentityProviderConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIdentityProviderConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIIdentityProviderConfig::getName() const {
    return m_name;
}
void OAIIdentityProviderConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIdentityProviderConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIdentityProviderConfig::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIIdentityProviderConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProviderConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
