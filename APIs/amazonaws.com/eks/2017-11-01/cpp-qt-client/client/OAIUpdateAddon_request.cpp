/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAddon_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAddon_request::OAIUpdateAddon_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAddon_request::OAIUpdateAddon_request() {
    this->initializeModel();
}

OAIUpdateAddon_request::~OAIUpdateAddon_request() {}

void OAIUpdateAddon_request::initializeModel() {

    m_addon_version_isSet = false;
    m_addon_version_isValid = false;

    m_service_account_role_arn_isSet = false;
    m_service_account_role_arn_isValid = false;

    m_resolve_conflicts_isSet = false;
    m_resolve_conflicts_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_configuration_values_isSet = false;
    m_configuration_values_isValid = false;
}

void OAIUpdateAddon_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAddon_request::fromJsonObject(QJsonObject json) {

    m_addon_version_isValid = ::OpenAPI::fromJsonValue(m_addon_version, json[QString("addonVersion")]);
    m_addon_version_isSet = !json[QString("addonVersion")].isNull() && m_addon_version_isValid;

    m_service_account_role_arn_isValid = ::OpenAPI::fromJsonValue(m_service_account_role_arn, json[QString("serviceAccountRoleArn")]);
    m_service_account_role_arn_isSet = !json[QString("serviceAccountRoleArn")].isNull() && m_service_account_role_arn_isValid;

    m_resolve_conflicts_isValid = ::OpenAPI::fromJsonValue(m_resolve_conflicts, json[QString("resolveConflicts")]);
    m_resolve_conflicts_isSet = !json[QString("resolveConflicts")].isNull() && m_resolve_conflicts_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_configuration_values_isValid = ::OpenAPI::fromJsonValue(m_configuration_values, json[QString("configurationValues")]);
    m_configuration_values_isSet = !json[QString("configurationValues")].isNull() && m_configuration_values_isValid;
}

QString OAIUpdateAddon_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAddon_request::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_version_isSet) {
        obj.insert(QString("addonVersion"), ::OpenAPI::toJsonValue(m_addon_version));
    }
    if (m_service_account_role_arn_isSet) {
        obj.insert(QString("serviceAccountRoleArn"), ::OpenAPI::toJsonValue(m_service_account_role_arn));
    }
    if (m_resolve_conflicts_isSet) {
        obj.insert(QString("resolveConflicts"), ::OpenAPI::toJsonValue(m_resolve_conflicts));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_configuration_values_isSet) {
        obj.insert(QString("configurationValues"), ::OpenAPI::toJsonValue(m_configuration_values));
    }
    return obj;
}

QString OAIUpdateAddon_request::getAddonVersion() const {
    return m_addon_version;
}
void OAIUpdateAddon_request::setAddonVersion(const QString &addon_version) {
    m_addon_version = addon_version;
    m_addon_version_isSet = true;
}

bool OAIUpdateAddon_request::is_addon_version_Set() const{
    return m_addon_version_isSet;
}

bool OAIUpdateAddon_request::is_addon_version_Valid() const{
    return m_addon_version_isValid;
}

QString OAIUpdateAddon_request::getServiceAccountRoleArn() const {
    return m_service_account_role_arn;
}
void OAIUpdateAddon_request::setServiceAccountRoleArn(const QString &service_account_role_arn) {
    m_service_account_role_arn = service_account_role_arn;
    m_service_account_role_arn_isSet = true;
}

bool OAIUpdateAddon_request::is_service_account_role_arn_Set() const{
    return m_service_account_role_arn_isSet;
}

bool OAIUpdateAddon_request::is_service_account_role_arn_Valid() const{
    return m_service_account_role_arn_isValid;
}

QString OAIUpdateAddon_request::getResolveConflicts() const {
    return m_resolve_conflicts;
}
void OAIUpdateAddon_request::setResolveConflicts(const QString &resolve_conflicts) {
    m_resolve_conflicts = resolve_conflicts;
    m_resolve_conflicts_isSet = true;
}

bool OAIUpdateAddon_request::is_resolve_conflicts_Set() const{
    return m_resolve_conflicts_isSet;
}

bool OAIUpdateAddon_request::is_resolve_conflicts_Valid() const{
    return m_resolve_conflicts_isValid;
}

QString OAIUpdateAddon_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateAddon_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateAddon_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateAddon_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIUpdateAddon_request::getConfigurationValues() const {
    return m_configuration_values;
}
void OAIUpdateAddon_request::setConfigurationValues(const QString &configuration_values) {
    m_configuration_values = configuration_values;
    m_configuration_values_isSet = true;
}

bool OAIUpdateAddon_request::is_configuration_values_Set() const{
    return m_configuration_values_isSet;
}

bool OAIUpdateAddon_request::is_configuration_values_Valid() const{
    return m_configuration_values_isValid;
}

bool OAIUpdateAddon_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolve_conflicts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAddon_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
