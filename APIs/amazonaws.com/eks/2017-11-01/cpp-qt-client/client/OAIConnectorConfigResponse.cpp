/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorConfigResponse::OAIConnectorConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorConfigResponse::OAIConnectorConfigResponse() {
    this->initializeModel();
}

OAIConnectorConfigResponse::~OAIConnectorConfigResponse() {}

void OAIConnectorConfigResponse::initializeModel() {

    m_activation_id_isSet = false;
    m_activation_id_isValid = false;

    m_activation_code_isSet = false;
    m_activation_code_isValid = false;

    m_activation_expiry_isSet = false;
    m_activation_expiry_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIConnectorConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorConfigResponse::fromJsonObject(QJsonObject json) {

    m_activation_id_isValid = ::OpenAPI::fromJsonValue(m_activation_id, json[QString("activationId")]);
    m_activation_id_isSet = !json[QString("activationId")].isNull() && m_activation_id_isValid;

    m_activation_code_isValid = ::OpenAPI::fromJsonValue(m_activation_code, json[QString("activationCode")]);
    m_activation_code_isSet = !json[QString("activationCode")].isNull() && m_activation_code_isValid;

    m_activation_expiry_isValid = ::OpenAPI::fromJsonValue(m_activation_expiry, json[QString("activationExpiry")]);
    m_activation_expiry_isSet = !json[QString("activationExpiry")].isNull() && m_activation_expiry_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;
}

QString OAIConnectorConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_id_isSet) {
        obj.insert(QString("activationId"), ::OpenAPI::toJsonValue(m_activation_id));
    }
    if (m_activation_code_isSet) {
        obj.insert(QString("activationCode"), ::OpenAPI::toJsonValue(m_activation_code));
    }
    if (m_activation_expiry_isSet) {
        obj.insert(QString("activationExpiry"), ::OpenAPI::toJsonValue(m_activation_expiry));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIConnectorConfigResponse::getActivationId() const {
    return m_activation_id;
}
void OAIConnectorConfigResponse::setActivationId(const QString &activation_id) {
    m_activation_id = activation_id;
    m_activation_id_isSet = true;
}

bool OAIConnectorConfigResponse::is_activation_id_Set() const{
    return m_activation_id_isSet;
}

bool OAIConnectorConfigResponse::is_activation_id_Valid() const{
    return m_activation_id_isValid;
}

QString OAIConnectorConfigResponse::getActivationCode() const {
    return m_activation_code;
}
void OAIConnectorConfigResponse::setActivationCode(const QString &activation_code) {
    m_activation_code = activation_code;
    m_activation_code_isSet = true;
}

bool OAIConnectorConfigResponse::is_activation_code_Set() const{
    return m_activation_code_isSet;
}

bool OAIConnectorConfigResponse::is_activation_code_Valid() const{
    return m_activation_code_isValid;
}

QDateTime OAIConnectorConfigResponse::getActivationExpiry() const {
    return m_activation_expiry;
}
void OAIConnectorConfigResponse::setActivationExpiry(const QDateTime &activation_expiry) {
    m_activation_expiry = activation_expiry;
    m_activation_expiry_isSet = true;
}

bool OAIConnectorConfigResponse::is_activation_expiry_Set() const{
    return m_activation_expiry_isSet;
}

bool OAIConnectorConfigResponse::is_activation_expiry_Valid() const{
    return m_activation_expiry_isValid;
}

QString OAIConnectorConfigResponse::getProvider() const {
    return m_provider;
}
void OAIConnectorConfigResponse::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIConnectorConfigResponse::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIConnectorConfigResponse::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIConnectorConfigResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIConnectorConfigResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIConnectorConfigResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIConnectorConfigResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIConnectorConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
