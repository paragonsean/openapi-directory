/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterIssue::OAIClusterIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterIssue::OAIClusterIssue() {
    this->initializeModel();
}

OAIClusterIssue::~OAIClusterIssue() {}

void OAIClusterIssue::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;
}

void OAIClusterIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterIssue::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("resourceIds")]);
    m_resource_ids_isSet = !json[QString("resourceIds")].isNull() && m_resource_ids_isValid;
}

QString OAIClusterIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_resource_ids.isSet()) {
        obj.insert(QString("resourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    return obj;
}

OAIClusterIssueCode OAIClusterIssue::getCode() const {
    return m_code;
}
void OAIClusterIssue::setCode(const OAIClusterIssueCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIClusterIssue::is_code_Set() const{
    return m_code_isSet;
}

bool OAIClusterIssue::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIClusterIssue::getMessage() const {
    return m_message;
}
void OAIClusterIssue::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIClusterIssue::is_message_Set() const{
    return m_message_isSet;
}

bool OAIClusterIssue::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIClusterIssue::getResourceIds() const {
    return m_resource_ids;
}
void OAIClusterIssue::setResourceIds(const QList &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIClusterIssue::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIClusterIssue::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

bool OAIClusterIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
