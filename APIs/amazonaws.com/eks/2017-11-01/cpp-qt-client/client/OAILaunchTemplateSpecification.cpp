/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchTemplateSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchTemplateSpecification::OAILaunchTemplateSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchTemplateSpecification::OAILaunchTemplateSpecification() {
    this->initializeModel();
}

OAILaunchTemplateSpecification::~OAILaunchTemplateSpecification() {}

void OAILaunchTemplateSpecification::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAILaunchTemplateSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchTemplateSpecification::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAILaunchTemplateSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchTemplateSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAILaunchTemplateSpecification::getName() const {
    return m_name;
}
void OAILaunchTemplateSpecification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILaunchTemplateSpecification::is_name_Set() const{
    return m_name_isSet;
}

bool OAILaunchTemplateSpecification::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILaunchTemplateSpecification::getVersion() const {
    return m_version;
}
void OAILaunchTemplateSpecification::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAILaunchTemplateSpecification::is_version_Set() const{
    return m_version_isSet;
}

bool OAILaunchTemplateSpecification::is_version_Valid() const{
    return m_version_isValid;
}

QString OAILaunchTemplateSpecification::getId() const {
    return m_id;
}
void OAILaunchTemplateSpecification::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILaunchTemplateSpecification::is_id_Set() const{
    return m_id_isSet;
}

bool OAILaunchTemplateSpecification::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILaunchTemplateSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchTemplateSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
