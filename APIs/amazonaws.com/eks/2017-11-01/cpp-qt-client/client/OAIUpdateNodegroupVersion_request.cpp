/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNodegroupVersion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNodegroupVersion_request::OAIUpdateNodegroupVersion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNodegroupVersion_request::OAIUpdateNodegroupVersion_request() {
    this->initializeModel();
}

OAIUpdateNodegroupVersion_request::~OAIUpdateNodegroupVersion_request() {}

void OAIUpdateNodegroupVersion_request::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_release_version_isSet = false;
    m_release_version_isValid = false;

    m_launch_template_isSet = false;
    m_launch_template_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIUpdateNodegroupVersion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNodegroupVersion_request::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_release_version_isValid = ::OpenAPI::fromJsonValue(m_release_version, json[QString("releaseVersion")]);
    m_release_version_isSet = !json[QString("releaseVersion")].isNull() && m_release_version_isValid;

    m_launch_template_isValid = ::OpenAPI::fromJsonValue(m_launch_template, json[QString("launchTemplate")]);
    m_launch_template_isSet = !json[QString("launchTemplate")].isNull() && m_launch_template_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIUpdateNodegroupVersion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNodegroupVersion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_release_version_isSet) {
        obj.insert(QString("releaseVersion"), ::OpenAPI::toJsonValue(m_release_version));
    }
    if (m_launch_template.isSet()) {
        obj.insert(QString("launchTemplate"), ::OpenAPI::toJsonValue(m_launch_template));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAIUpdateNodegroupVersion_request::getVersion() const {
    return m_version;
}
void OAIUpdateNodegroupVersion_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpdateNodegroupVersion_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpdateNodegroupVersion_request::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIUpdateNodegroupVersion_request::getReleaseVersion() const {
    return m_release_version;
}
void OAIUpdateNodegroupVersion_request::setReleaseVersion(const QString &release_version) {
    m_release_version = release_version;
    m_release_version_isSet = true;
}

bool OAIUpdateNodegroupVersion_request::is_release_version_Set() const{
    return m_release_version_isSet;
}

bool OAIUpdateNodegroupVersion_request::is_release_version_Valid() const{
    return m_release_version_isValid;
}

OAICreateNodegroup_request_launchTemplate OAIUpdateNodegroupVersion_request::getLaunchTemplate() const {
    return m_launch_template;
}
void OAIUpdateNodegroupVersion_request::setLaunchTemplate(const OAICreateNodegroup_request_launchTemplate &launch_template) {
    m_launch_template = launch_template;
    m_launch_template_isSet = true;
}

bool OAIUpdateNodegroupVersion_request::is_launch_template_Set() const{
    return m_launch_template_isSet;
}

bool OAIUpdateNodegroupVersion_request::is_launch_template_Valid() const{
    return m_launch_template_isValid;
}

bool OAIUpdateNodegroupVersion_request::isForce() const {
    return m_force;
}
void OAIUpdateNodegroupVersion_request::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIUpdateNodegroupVersion_request::is_force_Set() const{
    return m_force_isSet;
}

bool OAIUpdateNodegroupVersion_request::is_force_Valid() const{
    return m_force_isValid;
}

QString OAIUpdateNodegroupVersion_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateNodegroupVersion_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateNodegroupVersion_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateNodegroupVersion_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIUpdateNodegroupVersion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNodegroupVersion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
