/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterClusterRequest_connectorConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterClusterRequest_connectorConfig::OAIRegisterClusterRequest_connectorConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterClusterRequest_connectorConfig::OAIRegisterClusterRequest_connectorConfig() {
    this->initializeModel();
}

OAIRegisterClusterRequest_connectorConfig::~OAIRegisterClusterRequest_connectorConfig() {}

void OAIRegisterClusterRequest_connectorConfig::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIRegisterClusterRequest_connectorConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterClusterRequest_connectorConfig::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIRegisterClusterRequest_connectorConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterClusterRequest_connectorConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIRegisterClusterRequest_connectorConfig::getRoleArn() const {
    return m_role_arn;
}
void OAIRegisterClusterRequest_connectorConfig::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRegisterClusterRequest_connectorConfig::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRegisterClusterRequest_connectorConfig::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIConnectorConfigProvider OAIRegisterClusterRequest_connectorConfig::getProvider() const {
    return m_provider;
}
void OAIRegisterClusterRequest_connectorConfig::setProvider(const OAIConnectorConfigProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIRegisterClusterRequest_connectorConfig::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIRegisterClusterRequest_connectorConfig::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIRegisterClusterRequest_connectorConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterClusterRequest_connectorConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_provider_isValid && true;
}

} // namespace OpenAPI
