/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompatibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompatibility::OAICompatibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompatibility::OAICompatibility() {
    this->initializeModel();
}

OAICompatibility::~OAICompatibility() {}

void OAICompatibility::initializeModel() {

    m_cluster_version_isSet = false;
    m_cluster_version_isValid = false;

    m_platform_versions_isSet = false;
    m_platform_versions_isValid = false;

    m_default_version_isSet = false;
    m_default_version_isValid = false;
}

void OAICompatibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompatibility::fromJsonObject(QJsonObject json) {

    m_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_version, json[QString("clusterVersion")]);
    m_cluster_version_isSet = !json[QString("clusterVersion")].isNull() && m_cluster_version_isValid;

    m_platform_versions_isValid = ::OpenAPI::fromJsonValue(m_platform_versions, json[QString("platformVersions")]);
    m_platform_versions_isSet = !json[QString("platformVersions")].isNull() && m_platform_versions_isValid;

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;
}

QString OAICompatibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompatibility::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_version_isSet) {
        obj.insert(QString("clusterVersion"), ::OpenAPI::toJsonValue(m_cluster_version));
    }
    if (m_platform_versions.isSet()) {
        obj.insert(QString("platformVersions"), ::OpenAPI::toJsonValue(m_platform_versions));
    }
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    return obj;
}

QString OAICompatibility::getClusterVersion() const {
    return m_cluster_version;
}
void OAICompatibility::setClusterVersion(const QString &cluster_version) {
    m_cluster_version = cluster_version;
    m_cluster_version_isSet = true;
}

bool OAICompatibility::is_cluster_version_Set() const{
    return m_cluster_version_isSet;
}

bool OAICompatibility::is_cluster_version_Valid() const{
    return m_cluster_version_isValid;
}

QList OAICompatibility::getPlatformVersions() const {
    return m_platform_versions;
}
void OAICompatibility::setPlatformVersions(const QList &platform_versions) {
    m_platform_versions = platform_versions;
    m_platform_versions_isSet = true;
}

bool OAICompatibility::is_platform_versions_Set() const{
    return m_platform_versions_isSet;
}

bool OAICompatibility::is_platform_versions_Valid() const{
    return m_platform_versions_isValid;
}

bool OAICompatibility::getDefaultVersion() const {
    return m_default_version;
}
void OAICompatibility::setDefaultVersion(const bool &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAICompatibility::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAICompatibility::is_default_version_Valid() const{
    return m_default_version_isValid;
}

bool OAICompatibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompatibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
