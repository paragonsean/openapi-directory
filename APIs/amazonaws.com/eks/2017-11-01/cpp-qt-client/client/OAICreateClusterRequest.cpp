/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterRequest::OAICreateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterRequest::OAICreateClusterRequest() {
    this->initializeModel();
}

OAICreateClusterRequest::~OAICreateClusterRequest() {}

void OAICreateClusterRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_resources_vpc_config_isSet = false;
    m_resources_vpc_config_isValid = false;

    m_kubernetes_network_config_isSet = false;
    m_kubernetes_network_config_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_outpost_config_isSet = false;
    m_outpost_config_isValid = false;
}

void OAICreateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_resources_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_resources_vpc_config, json[QString("resourcesVpcConfig")]);
    m_resources_vpc_config_isSet = !json[QString("resourcesVpcConfig")].isNull() && m_resources_vpc_config_isValid;

    m_kubernetes_network_config_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_network_config, json[QString("kubernetesNetworkConfig")]);
    m_kubernetes_network_config_isSet = !json[QString("kubernetesNetworkConfig")].isNull() && m_kubernetes_network_config_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_outpost_config_isValid = ::OpenAPI::fromJsonValue(m_outpost_config, json[QString("outpostConfig")]);
    m_outpost_config_isSet = !json[QString("outpostConfig")].isNull() && m_outpost_config_isValid;
}

QString OAICreateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_resources_vpc_config.isSet()) {
        obj.insert(QString("resourcesVpcConfig"), ::OpenAPI::toJsonValue(m_resources_vpc_config));
    }
    if (m_kubernetes_network_config.isSet()) {
        obj.insert(QString("kubernetesNetworkConfig"), ::OpenAPI::toJsonValue(m_kubernetes_network_config));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_outpost_config.isSet()) {
        obj.insert(QString("outpostConfig"), ::OpenAPI::toJsonValue(m_outpost_config));
    }
    return obj;
}

QString OAICreateClusterRequest::getName() const {
    return m_name;
}
void OAICreateClusterRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateClusterRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateClusterRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateClusterRequest::getVersion() const {
    return m_version;
}
void OAICreateClusterRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateClusterRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateClusterRequest::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICreateClusterRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateClusterRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateClusterRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateClusterRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAICreateClusterRequest_resourcesVpcConfig OAICreateClusterRequest::getResourcesVpcConfig() const {
    return m_resources_vpc_config;
}
void OAICreateClusterRequest::setResourcesVpcConfig(const OAICreateClusterRequest_resourcesVpcConfig &resources_vpc_config) {
    m_resources_vpc_config = resources_vpc_config;
    m_resources_vpc_config_isSet = true;
}

bool OAICreateClusterRequest::is_resources_vpc_config_Set() const{
    return m_resources_vpc_config_isSet;
}

bool OAICreateClusterRequest::is_resources_vpc_config_Valid() const{
    return m_resources_vpc_config_isValid;
}

OAICreateClusterRequest_kubernetesNetworkConfig OAICreateClusterRequest::getKubernetesNetworkConfig() const {
    return m_kubernetes_network_config;
}
void OAICreateClusterRequest::setKubernetesNetworkConfig(const OAICreateClusterRequest_kubernetesNetworkConfig &kubernetes_network_config) {
    m_kubernetes_network_config = kubernetes_network_config;
    m_kubernetes_network_config_isSet = true;
}

bool OAICreateClusterRequest::is_kubernetes_network_config_Set() const{
    return m_kubernetes_network_config_isSet;
}

bool OAICreateClusterRequest::is_kubernetes_network_config_Valid() const{
    return m_kubernetes_network_config_isValid;
}

OAICreateClusterRequest_logging OAICreateClusterRequest::getLogging() const {
    return m_logging;
}
void OAICreateClusterRequest::setLogging(const OAICreateClusterRequest_logging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAICreateClusterRequest::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAICreateClusterRequest::is_logging_Valid() const{
    return m_logging_isValid;
}

QString OAICreateClusterRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateClusterRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateClusterRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateClusterRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap OAICreateClusterRequest::getTags() const {
    return m_tags;
}
void OAICreateClusterRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClusterRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClusterRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateClusterRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICreateClusterRequest::setEncryptionConfig(const QList &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICreateClusterRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICreateClusterRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAICreateClusterRequest_outpostConfig OAICreateClusterRequest::getOutpostConfig() const {
    return m_outpost_config;
}
void OAICreateClusterRequest::setOutpostConfig(const OAICreateClusterRequest_outpostConfig &outpost_config) {
    m_outpost_config = outpost_config;
    m_outpost_config_isSet = true;
}

bool OAICreateClusterRequest::is_outpost_config_Set() const{
    return m_outpost_config_isSet;
}

bool OAICreateClusterRequest::is_outpost_config_Valid() const{
    return m_outpost_config_isValid;
}

bool OAICreateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outpost_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_role_arn_isValid && m_resources_vpc_config_isValid && true;
}

} // namespace OpenAPI
