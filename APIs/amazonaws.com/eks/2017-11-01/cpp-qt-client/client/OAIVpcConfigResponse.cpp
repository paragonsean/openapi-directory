/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcConfigResponse::OAIVpcConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcConfigResponse::OAIVpcConfigResponse() {
    this->initializeModel();
}

OAIVpcConfigResponse::~OAIVpcConfigResponse() {}

void OAIVpcConfigResponse::initializeModel() {

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_cluster_security_group_id_isSet = false;
    m_cluster_security_group_id_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_endpoint_public_access_isSet = false;
    m_endpoint_public_access_isValid = false;

    m_endpoint_private_access_isSet = false;
    m_endpoint_private_access_isValid = false;

    m_public_access_cidrs_isSet = false;
    m_public_access_cidrs_isValid = false;
}

void OAIVpcConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcConfigResponse::fromJsonObject(QJsonObject json) {

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_cluster_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_security_group_id, json[QString("clusterSecurityGroupId")]);
    m_cluster_security_group_id_isSet = !json[QString("clusterSecurityGroupId")].isNull() && m_cluster_security_group_id_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;

    m_endpoint_public_access_isValid = ::OpenAPI::fromJsonValue(m_endpoint_public_access, json[QString("endpointPublicAccess")]);
    m_endpoint_public_access_isSet = !json[QString("endpointPublicAccess")].isNull() && m_endpoint_public_access_isValid;

    m_endpoint_private_access_isValid = ::OpenAPI::fromJsonValue(m_endpoint_private_access, json[QString("endpointPrivateAccess")]);
    m_endpoint_private_access_isSet = !json[QString("endpointPrivateAccess")].isNull() && m_endpoint_private_access_isValid;

    m_public_access_cidrs_isValid = ::OpenAPI::fromJsonValue(m_public_access_cidrs, json[QString("publicAccessCidrs")]);
    m_public_access_cidrs_isSet = !json[QString("publicAccessCidrs")].isNull() && m_public_access_cidrs_isValid;
}

QString OAIVpcConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_cluster_security_group_id_isSet) {
        obj.insert(QString("clusterSecurityGroupId"), ::OpenAPI::toJsonValue(m_cluster_security_group_id));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_endpoint_public_access_isSet) {
        obj.insert(QString("endpointPublicAccess"), ::OpenAPI::toJsonValue(m_endpoint_public_access));
    }
    if (m_endpoint_private_access_isSet) {
        obj.insert(QString("endpointPrivateAccess"), ::OpenAPI::toJsonValue(m_endpoint_private_access));
    }
    if (m_public_access_cidrs.isSet()) {
        obj.insert(QString("publicAccessCidrs"), ::OpenAPI::toJsonValue(m_public_access_cidrs));
    }
    return obj;
}

QList OAIVpcConfigResponse::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIVpcConfigResponse::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIVpcConfigResponse::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIVpcConfigResponse::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAIVpcConfigResponse::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIVpcConfigResponse::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIVpcConfigResponse::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIVpcConfigResponse::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIVpcConfigResponse::getClusterSecurityGroupId() const {
    return m_cluster_security_group_id;
}
void OAIVpcConfigResponse::setClusterSecurityGroupId(const QString &cluster_security_group_id) {
    m_cluster_security_group_id = cluster_security_group_id;
    m_cluster_security_group_id_isSet = true;
}

bool OAIVpcConfigResponse::is_cluster_security_group_id_Set() const{
    return m_cluster_security_group_id_isSet;
}

bool OAIVpcConfigResponse::is_cluster_security_group_id_Valid() const{
    return m_cluster_security_group_id_isValid;
}

QString OAIVpcConfigResponse::getVpcId() const {
    return m_vpc_id;
}
void OAIVpcConfigResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIVpcConfigResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIVpcConfigResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIVpcConfigResponse::getEndpointPublicAccess() const {
    return m_endpoint_public_access;
}
void OAIVpcConfigResponse::setEndpointPublicAccess(const bool &endpoint_public_access) {
    m_endpoint_public_access = endpoint_public_access;
    m_endpoint_public_access_isSet = true;
}

bool OAIVpcConfigResponse::is_endpoint_public_access_Set() const{
    return m_endpoint_public_access_isSet;
}

bool OAIVpcConfigResponse::is_endpoint_public_access_Valid() const{
    return m_endpoint_public_access_isValid;
}

bool OAIVpcConfigResponse::getEndpointPrivateAccess() const {
    return m_endpoint_private_access;
}
void OAIVpcConfigResponse::setEndpointPrivateAccess(const bool &endpoint_private_access) {
    m_endpoint_private_access = endpoint_private_access;
    m_endpoint_private_access_isSet = true;
}

bool OAIVpcConfigResponse::is_endpoint_private_access_Set() const{
    return m_endpoint_private_access_isSet;
}

bool OAIVpcConfigResponse::is_endpoint_private_access_Valid() const{
    return m_endpoint_private_access_isValid;
}

QList OAIVpcConfigResponse::getPublicAccessCidrs() const {
    return m_public_access_cidrs;
}
void OAIVpcConfigResponse::setPublicAccessCidrs(const QList &public_access_cidrs) {
    m_public_access_cidrs = public_access_cidrs;
    m_public_access_cidrs_isSet = true;
}

bool OAIVpcConfigResponse::is_public_access_cidrs_Set() const{
    return m_public_access_cidrs_isSet;
}

bool OAIVpcConfigResponse::is_public_access_cidrs_Valid() const{
    return m_public_access_cidrs_isValid;
}

bool OAIVpcConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_public_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_private_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access_cidrs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
