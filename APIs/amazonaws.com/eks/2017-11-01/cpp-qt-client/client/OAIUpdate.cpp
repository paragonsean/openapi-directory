/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdate::OAIUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdate::OAIUpdate() {
    this->initializeModel();
}

OAIUpdate::~OAIUpdate() {}

void OAIUpdate::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdate::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAIUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QString OAIUpdate::getId() const {
    return m_id;
}
void OAIUpdate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdate::is_id_Valid() const{
    return m_id_isValid;
}

OAIUpdateStatus OAIUpdate::getStatus() const {
    return m_status;
}
void OAIUpdate::setStatus(const OAIUpdateStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdate::is_status_Valid() const{
    return m_status_isValid;
}

OAIUpdateType OAIUpdate::getType() const {
    return m_type;
}
void OAIUpdate::setType(const OAIUpdateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdate::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIUpdate::getParams() const {
    return m_params;
}
void OAIUpdate::setParams(const QList &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIUpdate::is_params_Set() const{
    return m_params_isSet;
}

bool OAIUpdate::is_params_Valid() const{
    return m_params_isValid;
}

QDateTime OAIUpdate::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdate::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdate::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdate::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList OAIUpdate::getErrors() const {
    return m_errors;
}
void OAIUpdate::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIUpdate::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIUpdate::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
