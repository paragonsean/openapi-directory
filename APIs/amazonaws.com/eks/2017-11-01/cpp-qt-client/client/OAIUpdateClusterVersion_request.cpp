/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterVersion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterVersion_request::OAIUpdateClusterVersion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterVersion_request::OAIUpdateClusterVersion_request() {
    this->initializeModel();
}

OAIUpdateClusterVersion_request::~OAIUpdateClusterVersion_request() {}

void OAIUpdateClusterVersion_request::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIUpdateClusterVersion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterVersion_request::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIUpdateClusterVersion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterVersion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAIUpdateClusterVersion_request::getVersion() const {
    return m_version;
}
void OAIUpdateClusterVersion_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpdateClusterVersion_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpdateClusterVersion_request::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIUpdateClusterVersion_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateClusterVersion_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateClusterVersion_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateClusterVersion_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIUpdateClusterVersion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterVersion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_version_isValid && true;
}

} // namespace OpenAPI
