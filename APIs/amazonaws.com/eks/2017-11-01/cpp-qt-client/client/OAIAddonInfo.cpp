/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddonInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddonInfo::OAIAddonInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddonInfo::OAIAddonInfo() {
    this->initializeModel();
}

OAIAddonInfo::~OAIAddonInfo() {}

void OAIAddonInfo::initializeModel() {

    m_addon_name_isSet = false;
    m_addon_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_addon_versions_isSet = false;
    m_addon_versions_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_marketplace_information_isSet = false;
    m_marketplace_information_isValid = false;
}

void OAIAddonInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddonInfo::fromJsonObject(QJsonObject json) {

    m_addon_name_isValid = ::OpenAPI::fromJsonValue(m_addon_name, json[QString("addonName")]);
    m_addon_name_isSet = !json[QString("addonName")].isNull() && m_addon_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_addon_versions_isValid = ::OpenAPI::fromJsonValue(m_addon_versions, json[QString("addonVersions")]);
    m_addon_versions_isSet = !json[QString("addonVersions")].isNull() && m_addon_versions_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_marketplace_information_isValid = ::OpenAPI::fromJsonValue(m_marketplace_information, json[QString("marketplaceInformation")]);
    m_marketplace_information_isSet = !json[QString("marketplaceInformation")].isNull() && m_marketplace_information_isValid;
}

QString OAIAddonInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddonInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_name_isSet) {
        obj.insert(QString("addonName"), ::OpenAPI::toJsonValue(m_addon_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_addon_versions.isSet()) {
        obj.insert(QString("addonVersions"), ::OpenAPI::toJsonValue(m_addon_versions));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_marketplace_information.isSet()) {
        obj.insert(QString("marketplaceInformation"), ::OpenAPI::toJsonValue(m_marketplace_information));
    }
    return obj;
}

QString OAIAddonInfo::getAddonName() const {
    return m_addon_name;
}
void OAIAddonInfo::setAddonName(const QString &addon_name) {
    m_addon_name = addon_name;
    m_addon_name_isSet = true;
}

bool OAIAddonInfo::is_addon_name_Set() const{
    return m_addon_name_isSet;
}

bool OAIAddonInfo::is_addon_name_Valid() const{
    return m_addon_name_isValid;
}

QString OAIAddonInfo::getType() const {
    return m_type;
}
void OAIAddonInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddonInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddonInfo::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIAddonInfo::getAddonVersions() const {
    return m_addon_versions;
}
void OAIAddonInfo::setAddonVersions(const QList &addon_versions) {
    m_addon_versions = addon_versions;
    m_addon_versions_isSet = true;
}

bool OAIAddonInfo::is_addon_versions_Set() const{
    return m_addon_versions_isSet;
}

bool OAIAddonInfo::is_addon_versions_Valid() const{
    return m_addon_versions_isValid;
}

QString OAIAddonInfo::getPublisher() const {
    return m_publisher;
}
void OAIAddonInfo::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIAddonInfo::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIAddonInfo::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIAddonInfo::getOwner() const {
    return m_owner;
}
void OAIAddonInfo::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAddonInfo::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAddonInfo::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIAddonInfo_marketplaceInformation OAIAddonInfo::getMarketplaceInformation() const {
    return m_marketplace_information;
}
void OAIAddonInfo::setMarketplaceInformation(const OAIAddonInfo_marketplaceInformation &marketplace_information) {
    m_marketplace_information = marketplace_information;
    m_marketplace_information_isSet = true;
}

bool OAIAddonInfo::is_marketplace_information_Set() const{
    return m_marketplace_information_isSet;
}

bool OAIAddonInfo::is_marketplace_information_Valid() const{
    return m_marketplace_information_isValid;
}

bool OAIAddonInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_addon_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_information.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddonInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
