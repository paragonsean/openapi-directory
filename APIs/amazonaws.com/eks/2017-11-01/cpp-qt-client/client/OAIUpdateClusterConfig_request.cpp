/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterConfig_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterConfig_request::OAIUpdateClusterConfig_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterConfig_request::OAIUpdateClusterConfig_request() {
    this->initializeModel();
}

OAIUpdateClusterConfig_request::~OAIUpdateClusterConfig_request() {}

void OAIUpdateClusterConfig_request::initializeModel() {

    m_resources_vpc_config_isSet = false;
    m_resources_vpc_config_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIUpdateClusterConfig_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterConfig_request::fromJsonObject(QJsonObject json) {

    m_resources_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_resources_vpc_config, json[QString("resourcesVpcConfig")]);
    m_resources_vpc_config_isSet = !json[QString("resourcesVpcConfig")].isNull() && m_resources_vpc_config_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIUpdateClusterConfig_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterConfig_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resources_vpc_config.isSet()) {
        obj.insert(QString("resourcesVpcConfig"), ::OpenAPI::toJsonValue(m_resources_vpc_config));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

OAICreateCluster_request_resourcesVpcConfig OAIUpdateClusterConfig_request::getResourcesVpcConfig() const {
    return m_resources_vpc_config;
}
void OAIUpdateClusterConfig_request::setResourcesVpcConfig(const OAICreateCluster_request_resourcesVpcConfig &resources_vpc_config) {
    m_resources_vpc_config = resources_vpc_config;
    m_resources_vpc_config_isSet = true;
}

bool OAIUpdateClusterConfig_request::is_resources_vpc_config_Set() const{
    return m_resources_vpc_config_isSet;
}

bool OAIUpdateClusterConfig_request::is_resources_vpc_config_Valid() const{
    return m_resources_vpc_config_isValid;
}

OAICreateCluster_request_logging OAIUpdateClusterConfig_request::getLogging() const {
    return m_logging;
}
void OAIUpdateClusterConfig_request::setLogging(const OAICreateCluster_request_logging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIUpdateClusterConfig_request::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIUpdateClusterConfig_request::is_logging_Valid() const{
    return m_logging_isValid;
}

QString OAIUpdateClusterConfig_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateClusterConfig_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateClusterConfig_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateClusterConfig_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIUpdateClusterConfig_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterConfig_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
