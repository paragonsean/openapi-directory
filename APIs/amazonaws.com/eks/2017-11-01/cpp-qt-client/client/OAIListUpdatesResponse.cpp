/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUpdatesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUpdatesResponse::OAIListUpdatesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUpdatesResponse::OAIListUpdatesResponse() {
    this->initializeModel();
}

OAIListUpdatesResponse::~OAIListUpdatesResponse() {}

void OAIListUpdatesResponse::initializeModel() {

    m_update_ids_isSet = false;
    m_update_ids_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListUpdatesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUpdatesResponse::fromJsonObject(QJsonObject json) {

    m_update_ids_isValid = ::OpenAPI::fromJsonValue(m_update_ids, json[QString("updateIds")]);
    m_update_ids_isSet = !json[QString("updateIds")].isNull() && m_update_ids_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListUpdatesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUpdatesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_update_ids.isSet()) {
        obj.insert(QString("updateIds"), ::OpenAPI::toJsonValue(m_update_ids));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListUpdatesResponse::getUpdateIds() const {
    return m_update_ids;
}
void OAIListUpdatesResponse::setUpdateIds(const QList &update_ids) {
    m_update_ids = update_ids;
    m_update_ids_isSet = true;
}

bool OAIListUpdatesResponse::is_update_ids_Set() const{
    return m_update_ids_isSet;
}

bool OAIListUpdatesResponse::is_update_ids_Valid() const{
    return m_update_ids_isValid;
}

QString OAIListUpdatesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListUpdatesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListUpdatesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListUpdatesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListUpdatesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUpdatesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
