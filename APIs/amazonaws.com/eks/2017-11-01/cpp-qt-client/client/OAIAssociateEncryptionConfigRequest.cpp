/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateEncryptionConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateEncryptionConfigRequest::OAIAssociateEncryptionConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateEncryptionConfigRequest::OAIAssociateEncryptionConfigRequest() {
    this->initializeModel();
}

OAIAssociateEncryptionConfigRequest::~OAIAssociateEncryptionConfigRequest() {}

void OAIAssociateEncryptionConfigRequest::initializeModel() {

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIAssociateEncryptionConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateEncryptionConfigRequest::fromJsonObject(QJsonObject json) {

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIAssociateEncryptionConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateEncryptionConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QList OAIAssociateEncryptionConfigRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIAssociateEncryptionConfigRequest::setEncryptionConfig(const QList &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIAssociateEncryptionConfigRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIAssociateEncryptionConfigRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIAssociateEncryptionConfigRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIAssociateEncryptionConfigRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIAssociateEncryptionConfigRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIAssociateEncryptionConfigRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIAssociateEncryptionConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateEncryptionConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encryption_config_isValid && true;
}

} // namespace OpenAPI
