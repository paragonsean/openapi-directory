/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateNodegroupResponse_nodegroup.h
 *
 * 
 */

#ifndef OAICreateNodegroupResponse_nodegroup_H
#define OAICreateNodegroupResponse_nodegroup_H

#include <QJsonObject>

#include "OAIAMITypes.h"
#include "OAICapacityTypes.h"
#include "OAICreateNodegroupRequest_updateConfig.h"
#include "OAINodegroupStatus.h"
#include "OAINodegroup_health.h"
#include "OAINodegroup_launchTemplate.h"
#include "OAINodegroup_remoteAccess.h"
#include "OAINodegroup_resources.h"
#include "OAINodegroup_scalingConfig.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINodegroup_scalingConfig;
class OAINodegroup_remoteAccess;
class OAINodegroup_resources;
class OAINodegroup_health;
class OAICreateNodegroupRequest_updateConfig;
class OAINodegroup_launchTemplate;

class OAICreateNodegroupResponse_nodegroup : public OAIObject {
public:
    OAICreateNodegroupResponse_nodegroup();
    OAICreateNodegroupResponse_nodegroup(QString json);
    ~OAICreateNodegroupResponse_nodegroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNodegroupName() const;
    void setNodegroupName(const QString &nodegroup_name);
    bool is_nodegroup_name_Set() const;
    bool is_nodegroup_name_Valid() const;

    QString getNodegroupArn() const;
    void setNodegroupArn(const QString &nodegroup_arn);
    bool is_nodegroup_arn_Set() const;
    bool is_nodegroup_arn_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getReleaseVersion() const;
    void setReleaseVersion(const QString &release_version);
    bool is_release_version_Set() const;
    bool is_release_version_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getModifiedAt() const;
    void setModifiedAt(const QDateTime &modified_at);
    bool is_modified_at_Set() const;
    bool is_modified_at_Valid() const;

    OAINodegroupStatus getStatus() const;
    void setStatus(const OAINodegroupStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICapacityTypes getCapacityType() const;
    void setCapacityType(const OAICapacityTypes &capacity_type);
    bool is_capacity_type_Set() const;
    bool is_capacity_type_Valid() const;

    OAINodegroup_scalingConfig getScalingConfig() const;
    void setScalingConfig(const OAINodegroup_scalingConfig &scaling_config);
    bool is_scaling_config_Set() const;
    bool is_scaling_config_Valid() const;

    QList getInstanceTypes() const;
    void setInstanceTypes(const QList &instance_types);
    bool is_instance_types_Set() const;
    bool is_instance_types_Valid() const;

    QList getSubnets() const;
    void setSubnets(const QList &subnets);
    bool is_subnets_Set() const;
    bool is_subnets_Valid() const;

    OAINodegroup_remoteAccess getRemoteAccess() const;
    void setRemoteAccess(const OAINodegroup_remoteAccess &remote_access);
    bool is_remote_access_Set() const;
    bool is_remote_access_Valid() const;

    OAIAMITypes getAmiType() const;
    void setAmiType(const OAIAMITypes &ami_type);
    bool is_ami_type_Set() const;
    bool is_ami_type_Valid() const;

    QString getNodeRole() const;
    void setNodeRole(const QString &node_role);
    bool is_node_role_Set() const;
    bool is_node_role_Valid() const;

    QMap getLabels() const;
    void setLabels(const QMap &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList getTaints() const;
    void setTaints(const QList &taints);
    bool is_taints_Set() const;
    bool is_taints_Valid() const;

    OAINodegroup_resources getResources() const;
    void setResources(const OAINodegroup_resources &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    qint32 getDiskSize() const;
    void setDiskSize(const qint32 &disk_size);
    bool is_disk_size_Set() const;
    bool is_disk_size_Valid() const;

    OAINodegroup_health getHealth() const;
    void setHealth(const OAINodegroup_health &health);
    bool is_health_Set() const;
    bool is_health_Valid() const;

    OAICreateNodegroupRequest_updateConfig getUpdateConfig() const;
    void setUpdateConfig(const OAICreateNodegroupRequest_updateConfig &update_config);
    bool is_update_config_Set() const;
    bool is_update_config_Valid() const;

    OAINodegroup_launchTemplate getLaunchTemplate() const;
    void setLaunchTemplate(const OAINodegroup_launchTemplate &launch_template);
    bool is_launch_template_Set() const;
    bool is_launch_template_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_nodegroup_name;
    bool m_nodegroup_name_isSet;
    bool m_nodegroup_name_isValid;

    QString m_nodegroup_arn;
    bool m_nodegroup_arn_isSet;
    bool m_nodegroup_arn_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_release_version;
    bool m_release_version_isSet;
    bool m_release_version_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_modified_at;
    bool m_modified_at_isSet;
    bool m_modified_at_isValid;

    OAINodegroupStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICapacityTypes m_capacity_type;
    bool m_capacity_type_isSet;
    bool m_capacity_type_isValid;

    OAINodegroup_scalingConfig m_scaling_config;
    bool m_scaling_config_isSet;
    bool m_scaling_config_isValid;

    QList m_instance_types;
    bool m_instance_types_isSet;
    bool m_instance_types_isValid;

    QList m_subnets;
    bool m_subnets_isSet;
    bool m_subnets_isValid;

    OAINodegroup_remoteAccess m_remote_access;
    bool m_remote_access_isSet;
    bool m_remote_access_isValid;

    OAIAMITypes m_ami_type;
    bool m_ami_type_isSet;
    bool m_ami_type_isValid;

    QString m_node_role;
    bool m_node_role_isSet;
    bool m_node_role_isValid;

    QMap m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList m_taints;
    bool m_taints_isSet;
    bool m_taints_isValid;

    OAINodegroup_resources m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    qint32 m_disk_size;
    bool m_disk_size_isSet;
    bool m_disk_size_isValid;

    OAINodegroup_health m_health;
    bool m_health_isSet;
    bool m_health_isValid;

    OAICreateNodegroupRequest_updateConfig m_update_config;
    bool m_update_config_isSet;
    bool m_update_config_isValid;

    OAINodegroup_launchTemplate m_launch_template;
    bool m_launch_template_isSet;
    bool m_launch_template_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateNodegroupResponse_nodegroup)

#endif // OAICreateNodegroupResponse_nodegroup_H
