/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutpostConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutpostConfigResponse::OAIOutpostConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutpostConfigResponse::OAIOutpostConfigResponse() {
    this->initializeModel();
}

OAIOutpostConfigResponse::~OAIOutpostConfigResponse() {}

void OAIOutpostConfigResponse::initializeModel() {

    m_outpost_arns_isSet = false;
    m_outpost_arns_isValid = false;

    m_control_plane_instance_type_isSet = false;
    m_control_plane_instance_type_isValid = false;

    m_control_plane_placement_isSet = false;
    m_control_plane_placement_isValid = false;
}

void OAIOutpostConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutpostConfigResponse::fromJsonObject(QJsonObject json) {

    m_outpost_arns_isValid = ::OpenAPI::fromJsonValue(m_outpost_arns, json[QString("outpostArns")]);
    m_outpost_arns_isSet = !json[QString("outpostArns")].isNull() && m_outpost_arns_isValid;

    m_control_plane_instance_type_isValid = ::OpenAPI::fromJsonValue(m_control_plane_instance_type, json[QString("controlPlaneInstanceType")]);
    m_control_plane_instance_type_isSet = !json[QString("controlPlaneInstanceType")].isNull() && m_control_plane_instance_type_isValid;

    m_control_plane_placement_isValid = ::OpenAPI::fromJsonValue(m_control_plane_placement, json[QString("controlPlanePlacement")]);
    m_control_plane_placement_isSet = !json[QString("controlPlanePlacement")].isNull() && m_control_plane_placement_isValid;
}

QString OAIOutpostConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutpostConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_outpost_arns.isSet()) {
        obj.insert(QString("outpostArns"), ::OpenAPI::toJsonValue(m_outpost_arns));
    }
    if (m_control_plane_instance_type_isSet) {
        obj.insert(QString("controlPlaneInstanceType"), ::OpenAPI::toJsonValue(m_control_plane_instance_type));
    }
    if (m_control_plane_placement.isSet()) {
        obj.insert(QString("controlPlanePlacement"), ::OpenAPI::toJsonValue(m_control_plane_placement));
    }
    return obj;
}

QList OAIOutpostConfigResponse::getOutpostArns() const {
    return m_outpost_arns;
}
void OAIOutpostConfigResponse::setOutpostArns(const QList &outpost_arns) {
    m_outpost_arns = outpost_arns;
    m_outpost_arns_isSet = true;
}

bool OAIOutpostConfigResponse::is_outpost_arns_Set() const{
    return m_outpost_arns_isSet;
}

bool OAIOutpostConfigResponse::is_outpost_arns_Valid() const{
    return m_outpost_arns_isValid;
}

QString OAIOutpostConfigResponse::getControlPlaneInstanceType() const {
    return m_control_plane_instance_type;
}
void OAIOutpostConfigResponse::setControlPlaneInstanceType(const QString &control_plane_instance_type) {
    m_control_plane_instance_type = control_plane_instance_type;
    m_control_plane_instance_type_isSet = true;
}

bool OAIOutpostConfigResponse::is_control_plane_instance_type_Set() const{
    return m_control_plane_instance_type_isSet;
}

bool OAIOutpostConfigResponse::is_control_plane_instance_type_Valid() const{
    return m_control_plane_instance_type_isValid;
}

OAIOutpostConfigResponse_controlPlanePlacement OAIOutpostConfigResponse::getControlPlanePlacement() const {
    return m_control_plane_placement;
}
void OAIOutpostConfigResponse::setControlPlanePlacement(const OAIOutpostConfigResponse_controlPlanePlacement &control_plane_placement) {
    m_control_plane_placement = control_plane_placement;
    m_control_plane_placement_isSet = true;
}

bool OAIOutpostConfigResponse::is_control_plane_placement_Set() const{
    return m_control_plane_placement_isSet;
}

bool OAIOutpostConfigResponse::is_control_plane_placement_Valid() const{
    return m_control_plane_placement_isValid;
}

bool OAIOutpostConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outpost_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutpostConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_outpost_arns_isValid && m_control_plane_instance_type_isValid && true;
}

} // namespace OpenAPI
