/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNodegroup_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNodegroup_request::OAICreateNodegroup_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNodegroup_request::OAICreateNodegroup_request() {
    this->initializeModel();
}

OAICreateNodegroup_request::~OAICreateNodegroup_request() {}

void OAICreateNodegroup_request::initializeModel() {

    m_nodegroup_name_isSet = false;
    m_nodegroup_name_isValid = false;

    m_scaling_config_isSet = false;
    m_scaling_config_isValid = false;

    m_disk_size_isSet = false;
    m_disk_size_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_instance_types_isSet = false;
    m_instance_types_isValid = false;

    m_ami_type_isSet = false;
    m_ami_type_isValid = false;

    m_remote_access_isSet = false;
    m_remote_access_isValid = false;

    m_node_role_isSet = false;
    m_node_role_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_taints_isSet = false;
    m_taints_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_launch_template_isSet = false;
    m_launch_template_isValid = false;

    m_update_config_isSet = false;
    m_update_config_isValid = false;

    m_capacity_type_isSet = false;
    m_capacity_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_release_version_isSet = false;
    m_release_version_isValid = false;
}

void OAICreateNodegroup_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNodegroup_request::fromJsonObject(QJsonObject json) {

    m_nodegroup_name_isValid = ::OpenAPI::fromJsonValue(m_nodegroup_name, json[QString("nodegroupName")]);
    m_nodegroup_name_isSet = !json[QString("nodegroupName")].isNull() && m_nodegroup_name_isValid;

    m_scaling_config_isValid = ::OpenAPI::fromJsonValue(m_scaling_config, json[QString("scalingConfig")]);
    m_scaling_config_isSet = !json[QString("scalingConfig")].isNull() && m_scaling_config_isValid;

    m_disk_size_isValid = ::OpenAPI::fromJsonValue(m_disk_size, json[QString("diskSize")]);
    m_disk_size_isSet = !json[QString("diskSize")].isNull() && m_disk_size_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;

    m_instance_types_isValid = ::OpenAPI::fromJsonValue(m_instance_types, json[QString("instanceTypes")]);
    m_instance_types_isSet = !json[QString("instanceTypes")].isNull() && m_instance_types_isValid;

    m_ami_type_isValid = ::OpenAPI::fromJsonValue(m_ami_type, json[QString("amiType")]);
    m_ami_type_isSet = !json[QString("amiType")].isNull() && m_ami_type_isValid;

    m_remote_access_isValid = ::OpenAPI::fromJsonValue(m_remote_access, json[QString("remoteAccess")]);
    m_remote_access_isSet = !json[QString("remoteAccess")].isNull() && m_remote_access_isValid;

    m_node_role_isValid = ::OpenAPI::fromJsonValue(m_node_role, json[QString("nodeRole")]);
    m_node_role_isSet = !json[QString("nodeRole")].isNull() && m_node_role_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_taints_isValid = ::OpenAPI::fromJsonValue(m_taints, json[QString("taints")]);
    m_taints_isSet = !json[QString("taints")].isNull() && m_taints_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_launch_template_isValid = ::OpenAPI::fromJsonValue(m_launch_template, json[QString("launchTemplate")]);
    m_launch_template_isSet = !json[QString("launchTemplate")].isNull() && m_launch_template_isValid;

    m_update_config_isValid = ::OpenAPI::fromJsonValue(m_update_config, json[QString("updateConfig")]);
    m_update_config_isSet = !json[QString("updateConfig")].isNull() && m_update_config_isValid;

    m_capacity_type_isValid = ::OpenAPI::fromJsonValue(m_capacity_type, json[QString("capacityType")]);
    m_capacity_type_isSet = !json[QString("capacityType")].isNull() && m_capacity_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_release_version_isValid = ::OpenAPI::fromJsonValue(m_release_version, json[QString("releaseVersion")]);
    m_release_version_isSet = !json[QString("releaseVersion")].isNull() && m_release_version_isValid;
}

QString OAICreateNodegroup_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNodegroup_request::asJsonObject() const {
    QJsonObject obj;
    if (m_nodegroup_name_isSet) {
        obj.insert(QString("nodegroupName"), ::OpenAPI::toJsonValue(m_nodegroup_name));
    }
    if (m_scaling_config.isSet()) {
        obj.insert(QString("scalingConfig"), ::OpenAPI::toJsonValue(m_scaling_config));
    }
    if (m_disk_size_isSet) {
        obj.insert(QString("diskSize"), ::OpenAPI::toJsonValue(m_disk_size));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_instance_types.size() > 0) {
        obj.insert(QString("instanceTypes"), ::OpenAPI::toJsonValue(m_instance_types));
    }
    if (m_ami_type_isSet) {
        obj.insert(QString("amiType"), ::OpenAPI::toJsonValue(m_ami_type));
    }
    if (m_remote_access.isSet()) {
        obj.insert(QString("remoteAccess"), ::OpenAPI::toJsonValue(m_remote_access));
    }
    if (m_node_role_isSet) {
        obj.insert(QString("nodeRole"), ::OpenAPI::toJsonValue(m_node_role));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_taints.size() > 0) {
        obj.insert(QString("taints"), ::OpenAPI::toJsonValue(m_taints));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_launch_template.isSet()) {
        obj.insert(QString("launchTemplate"), ::OpenAPI::toJsonValue(m_launch_template));
    }
    if (m_update_config.isSet()) {
        obj.insert(QString("updateConfig"), ::OpenAPI::toJsonValue(m_update_config));
    }
    if (m_capacity_type_isSet) {
        obj.insert(QString("capacityType"), ::OpenAPI::toJsonValue(m_capacity_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_release_version_isSet) {
        obj.insert(QString("releaseVersion"), ::OpenAPI::toJsonValue(m_release_version));
    }
    return obj;
}

QString OAICreateNodegroup_request::getNodegroupName() const {
    return m_nodegroup_name;
}
void OAICreateNodegroup_request::setNodegroupName(const QString &nodegroup_name) {
    m_nodegroup_name = nodegroup_name;
    m_nodegroup_name_isSet = true;
}

bool OAICreateNodegroup_request::is_nodegroup_name_Set() const{
    return m_nodegroup_name_isSet;
}

bool OAICreateNodegroup_request::is_nodegroup_name_Valid() const{
    return m_nodegroup_name_isValid;
}

OAICreateNodegroup_request_scalingConfig OAICreateNodegroup_request::getScalingConfig() const {
    return m_scaling_config;
}
void OAICreateNodegroup_request::setScalingConfig(const OAICreateNodegroup_request_scalingConfig &scaling_config) {
    m_scaling_config = scaling_config;
    m_scaling_config_isSet = true;
}

bool OAICreateNodegroup_request::is_scaling_config_Set() const{
    return m_scaling_config_isSet;
}

bool OAICreateNodegroup_request::is_scaling_config_Valid() const{
    return m_scaling_config_isValid;
}

qint32 OAICreateNodegroup_request::getDiskSize() const {
    return m_disk_size;
}
void OAICreateNodegroup_request::setDiskSize(const qint32 &disk_size) {
    m_disk_size = disk_size;
    m_disk_size_isSet = true;
}

bool OAICreateNodegroup_request::is_disk_size_Set() const{
    return m_disk_size_isSet;
}

bool OAICreateNodegroup_request::is_disk_size_Valid() const{
    return m_disk_size_isValid;
}

QList<QString> OAICreateNodegroup_request::getSubnets() const {
    return m_subnets;
}
void OAICreateNodegroup_request::setSubnets(const QList<QString> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAICreateNodegroup_request::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAICreateNodegroup_request::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList<QString> OAICreateNodegroup_request::getInstanceTypes() const {
    return m_instance_types;
}
void OAICreateNodegroup_request::setInstanceTypes(const QList<QString> &instance_types) {
    m_instance_types = instance_types;
    m_instance_types_isSet = true;
}

bool OAICreateNodegroup_request::is_instance_types_Set() const{
    return m_instance_types_isSet;
}

bool OAICreateNodegroup_request::is_instance_types_Valid() const{
    return m_instance_types_isValid;
}

QString OAICreateNodegroup_request::getAmiType() const {
    return m_ami_type;
}
void OAICreateNodegroup_request::setAmiType(const QString &ami_type) {
    m_ami_type = ami_type;
    m_ami_type_isSet = true;
}

bool OAICreateNodegroup_request::is_ami_type_Set() const{
    return m_ami_type_isSet;
}

bool OAICreateNodegroup_request::is_ami_type_Valid() const{
    return m_ami_type_isValid;
}

OAICreateNodegroup_request_remoteAccess OAICreateNodegroup_request::getRemoteAccess() const {
    return m_remote_access;
}
void OAICreateNodegroup_request::setRemoteAccess(const OAICreateNodegroup_request_remoteAccess &remote_access) {
    m_remote_access = remote_access;
    m_remote_access_isSet = true;
}

bool OAICreateNodegroup_request::is_remote_access_Set() const{
    return m_remote_access_isSet;
}

bool OAICreateNodegroup_request::is_remote_access_Valid() const{
    return m_remote_access_isValid;
}

QString OAICreateNodegroup_request::getNodeRole() const {
    return m_node_role;
}
void OAICreateNodegroup_request::setNodeRole(const QString &node_role) {
    m_node_role = node_role;
    m_node_role_isSet = true;
}

bool OAICreateNodegroup_request::is_node_role_Set() const{
    return m_node_role_isSet;
}

bool OAICreateNodegroup_request::is_node_role_Valid() const{
    return m_node_role_isValid;
}

QMap<QString, QString> OAICreateNodegroup_request::getLabels() const {
    return m_labels;
}
void OAICreateNodegroup_request::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICreateNodegroup_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICreateNodegroup_request::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAITaint> OAICreateNodegroup_request::getTaints() const {
    return m_taints;
}
void OAICreateNodegroup_request::setTaints(const QList<OAITaint> &taints) {
    m_taints = taints;
    m_taints_isSet = true;
}

bool OAICreateNodegroup_request::is_taints_Set() const{
    return m_taints_isSet;
}

bool OAICreateNodegroup_request::is_taints_Valid() const{
    return m_taints_isValid;
}

QMap<QString, QString> OAICreateNodegroup_request::getTags() const {
    return m_tags;
}
void OAICreateNodegroup_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNodegroup_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNodegroup_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateNodegroup_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateNodegroup_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateNodegroup_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateNodegroup_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAICreateNodegroup_request_launchTemplate OAICreateNodegroup_request::getLaunchTemplate() const {
    return m_launch_template;
}
void OAICreateNodegroup_request::setLaunchTemplate(const OAICreateNodegroup_request_launchTemplate &launch_template) {
    m_launch_template = launch_template;
    m_launch_template_isSet = true;
}

bool OAICreateNodegroup_request::is_launch_template_Set() const{
    return m_launch_template_isSet;
}

bool OAICreateNodegroup_request::is_launch_template_Valid() const{
    return m_launch_template_isValid;
}

OAICreateNodegroup_request_updateConfig OAICreateNodegroup_request::getUpdateConfig() const {
    return m_update_config;
}
void OAICreateNodegroup_request::setUpdateConfig(const OAICreateNodegroup_request_updateConfig &update_config) {
    m_update_config = update_config;
    m_update_config_isSet = true;
}

bool OAICreateNodegroup_request::is_update_config_Set() const{
    return m_update_config_isSet;
}

bool OAICreateNodegroup_request::is_update_config_Valid() const{
    return m_update_config_isValid;
}

QString OAICreateNodegroup_request::getCapacityType() const {
    return m_capacity_type;
}
void OAICreateNodegroup_request::setCapacityType(const QString &capacity_type) {
    m_capacity_type = capacity_type;
    m_capacity_type_isSet = true;
}

bool OAICreateNodegroup_request::is_capacity_type_Set() const{
    return m_capacity_type_isSet;
}

bool OAICreateNodegroup_request::is_capacity_type_Valid() const{
    return m_capacity_type_isValid;
}

QString OAICreateNodegroup_request::getVersion() const {
    return m_version;
}
void OAICreateNodegroup_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateNodegroup_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateNodegroup_request::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICreateNodegroup_request::getReleaseVersion() const {
    return m_release_version;
}
void OAICreateNodegroup_request::setReleaseVersion(const QString &release_version) {
    m_release_version = release_version;
    m_release_version_isSet = true;
}

bool OAICreateNodegroup_request::is_release_version_Set() const{
    return m_release_version_isSet;
}

bool OAICreateNodegroup_request::is_release_version_Valid() const{
    return m_release_version_isValid;
}

bool OAICreateNodegroup_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nodegroup_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNodegroup_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_nodegroup_name_isValid && m_subnets_isValid && m_node_role_isValid && true;
}

} // namespace OpenAPI
