/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaint::OAITaint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaint::OAITaint() {
    this->initializeModel();
}

OAITaint::~OAITaint() {}

void OAITaint::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;
}

void OAITaint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaint::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;
}

QString OAITaint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaint::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_effect.isSet()) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    return obj;
}

QString OAITaint::getKey() const {
    return m_key;
}
void OAITaint::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITaint::is_key_Set() const{
    return m_key_isSet;
}

bool OAITaint::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITaint::getValue() const {
    return m_value;
}
void OAITaint::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITaint::is_value_Set() const{
    return m_value_isSet;
}

bool OAITaint::is_value_Valid() const{
    return m_value_isValid;
}

OAITaintEffect OAITaint::getEffect() const {
    return m_effect;
}
void OAITaint::setEffect(const OAITaintEffect &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAITaint::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAITaint::is_effect_Valid() const{
    return m_effect_isValid;
}

bool OAITaint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
