/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNodegroupConfig_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNodegroupConfig_request::OAIUpdateNodegroupConfig_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNodegroupConfig_request::OAIUpdateNodegroupConfig_request() {
    this->initializeModel();
}

OAIUpdateNodegroupConfig_request::~OAIUpdateNodegroupConfig_request() {}

void OAIUpdateNodegroupConfig_request::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_taints_isSet = false;
    m_taints_isValid = false;

    m_scaling_config_isSet = false;
    m_scaling_config_isValid = false;

    m_update_config_isSet = false;
    m_update_config_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIUpdateNodegroupConfig_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNodegroupConfig_request::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_taints_isValid = ::OpenAPI::fromJsonValue(m_taints, json[QString("taints")]);
    m_taints_isSet = !json[QString("taints")].isNull() && m_taints_isValid;

    m_scaling_config_isValid = ::OpenAPI::fromJsonValue(m_scaling_config, json[QString("scalingConfig")]);
    m_scaling_config_isSet = !json[QString("scalingConfig")].isNull() && m_scaling_config_isValid;

    m_update_config_isValid = ::OpenAPI::fromJsonValue(m_update_config, json[QString("updateConfig")]);
    m_update_config_isSet = !json[QString("updateConfig")].isNull() && m_update_config_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIUpdateNodegroupConfig_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNodegroupConfig_request::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_taints.isSet()) {
        obj.insert(QString("taints"), ::OpenAPI::toJsonValue(m_taints));
    }
    if (m_scaling_config.isSet()) {
        obj.insert(QString("scalingConfig"), ::OpenAPI::toJsonValue(m_scaling_config));
    }
    if (m_update_config.isSet()) {
        obj.insert(QString("updateConfig"), ::OpenAPI::toJsonValue(m_update_config));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

OAIUpdateNodegroupConfig_request_labels OAIUpdateNodegroupConfig_request::getLabels() const {
    return m_labels;
}
void OAIUpdateNodegroupConfig_request::setLabels(const OAIUpdateNodegroupConfig_request_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIUpdateNodegroupConfig_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIUpdateNodegroupConfig_request::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIUpdateNodegroupConfig_request_taints OAIUpdateNodegroupConfig_request::getTaints() const {
    return m_taints;
}
void OAIUpdateNodegroupConfig_request::setTaints(const OAIUpdateNodegroupConfig_request_taints &taints) {
    m_taints = taints;
    m_taints_isSet = true;
}

bool OAIUpdateNodegroupConfig_request::is_taints_Set() const{
    return m_taints_isSet;
}

bool OAIUpdateNodegroupConfig_request::is_taints_Valid() const{
    return m_taints_isValid;
}

OAICreateNodegroup_request_scalingConfig OAIUpdateNodegroupConfig_request::getScalingConfig() const {
    return m_scaling_config;
}
void OAIUpdateNodegroupConfig_request::setScalingConfig(const OAICreateNodegroup_request_scalingConfig &scaling_config) {
    m_scaling_config = scaling_config;
    m_scaling_config_isSet = true;
}

bool OAIUpdateNodegroupConfig_request::is_scaling_config_Set() const{
    return m_scaling_config_isSet;
}

bool OAIUpdateNodegroupConfig_request::is_scaling_config_Valid() const{
    return m_scaling_config_isValid;
}

OAICreateNodegroup_request_updateConfig OAIUpdateNodegroupConfig_request::getUpdateConfig() const {
    return m_update_config;
}
void OAIUpdateNodegroupConfig_request::setUpdateConfig(const OAICreateNodegroup_request_updateConfig &update_config) {
    m_update_config = update_config;
    m_update_config_isSet = true;
}

bool OAIUpdateNodegroupConfig_request::is_update_config_Set() const{
    return m_update_config_isSet;
}

bool OAIUpdateNodegroupConfig_request::is_update_config_Valid() const{
    return m_update_config_isValid;
}

QString OAIUpdateNodegroupConfig_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateNodegroupConfig_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateNodegroupConfig_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateNodegroupConfig_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIUpdateNodegroupConfig_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNodegroupConfig_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
