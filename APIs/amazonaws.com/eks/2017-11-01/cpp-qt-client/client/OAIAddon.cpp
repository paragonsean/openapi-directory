/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddon::OAIAddon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddon::OAIAddon() {
    this->initializeModel();
}

OAIAddon::~OAIAddon() {}

void OAIAddon::initializeModel() {

    m_addon_name_isSet = false;
    m_addon_name_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_addon_version_isSet = false;
    m_addon_version_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_addon_arn_isSet = false;
    m_addon_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_service_account_role_arn_isSet = false;
    m_service_account_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_marketplace_information_isSet = false;
    m_marketplace_information_isValid = false;

    m_configuration_values_isSet = false;
    m_configuration_values_isValid = false;
}

void OAIAddon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddon::fromJsonObject(QJsonObject json) {

    m_addon_name_isValid = ::OpenAPI::fromJsonValue(m_addon_name, json[QString("addonName")]);
    m_addon_name_isSet = !json[QString("addonName")].isNull() && m_addon_name_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_addon_version_isValid = ::OpenAPI::fromJsonValue(m_addon_version, json[QString("addonVersion")]);
    m_addon_version_isSet = !json[QString("addonVersion")].isNull() && m_addon_version_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_addon_arn_isValid = ::OpenAPI::fromJsonValue(m_addon_arn, json[QString("addonArn")]);
    m_addon_arn_isSet = !json[QString("addonArn")].isNull() && m_addon_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modifiedAt")]);
    m_modified_at_isSet = !json[QString("modifiedAt")].isNull() && m_modified_at_isValid;

    m_service_account_role_arn_isValid = ::OpenAPI::fromJsonValue(m_service_account_role_arn, json[QString("serviceAccountRoleArn")]);
    m_service_account_role_arn_isSet = !json[QString("serviceAccountRoleArn")].isNull() && m_service_account_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_marketplace_information_isValid = ::OpenAPI::fromJsonValue(m_marketplace_information, json[QString("marketplaceInformation")]);
    m_marketplace_information_isSet = !json[QString("marketplaceInformation")].isNull() && m_marketplace_information_isValid;

    m_configuration_values_isValid = ::OpenAPI::fromJsonValue(m_configuration_values, json[QString("configurationValues")]);
    m_configuration_values_isSet = !json[QString("configurationValues")].isNull() && m_configuration_values_isValid;
}

QString OAIAddon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddon::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_name_isSet) {
        obj.insert(QString("addonName"), ::OpenAPI::toJsonValue(m_addon_name));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_addon_version_isSet) {
        obj.insert(QString("addonVersion"), ::OpenAPI::toJsonValue(m_addon_version));
    }
    if (m_health.isSet()) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_addon_arn_isSet) {
        obj.insert(QString("addonArn"), ::OpenAPI::toJsonValue(m_addon_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_service_account_role_arn_isSet) {
        obj.insert(QString("serviceAccountRoleArn"), ::OpenAPI::toJsonValue(m_service_account_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_marketplace_information.isSet()) {
        obj.insert(QString("marketplaceInformation"), ::OpenAPI::toJsonValue(m_marketplace_information));
    }
    if (m_configuration_values_isSet) {
        obj.insert(QString("configurationValues"), ::OpenAPI::toJsonValue(m_configuration_values));
    }
    return obj;
}

QString OAIAddon::getAddonName() const {
    return m_addon_name;
}
void OAIAddon::setAddonName(const QString &addon_name) {
    m_addon_name = addon_name;
    m_addon_name_isSet = true;
}

bool OAIAddon::is_addon_name_Set() const{
    return m_addon_name_isSet;
}

bool OAIAddon::is_addon_name_Valid() const{
    return m_addon_name_isValid;
}

QString OAIAddon::getClusterName() const {
    return m_cluster_name;
}
void OAIAddon::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIAddon::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIAddon::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

OAIAddonStatus OAIAddon::getStatus() const {
    return m_status;
}
void OAIAddon::setStatus(const OAIAddonStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAddon::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAddon::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAddon::getAddonVersion() const {
    return m_addon_version;
}
void OAIAddon::setAddonVersion(const QString &addon_version) {
    m_addon_version = addon_version;
    m_addon_version_isSet = true;
}

bool OAIAddon::is_addon_version_Set() const{
    return m_addon_version_isSet;
}

bool OAIAddon::is_addon_version_Valid() const{
    return m_addon_version_isValid;
}

OAIAddon_health OAIAddon::getHealth() const {
    return m_health;
}
void OAIAddon::setHealth(const OAIAddon_health &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIAddon::is_health_Set() const{
    return m_health_isSet;
}

bool OAIAddon::is_health_Valid() const{
    return m_health_isValid;
}

QString OAIAddon::getAddonArn() const {
    return m_addon_arn;
}
void OAIAddon::setAddonArn(const QString &addon_arn) {
    m_addon_arn = addon_arn;
    m_addon_arn_isSet = true;
}

bool OAIAddon::is_addon_arn_Set() const{
    return m_addon_arn_isSet;
}

bool OAIAddon::is_addon_arn_Valid() const{
    return m_addon_arn_isValid;
}

QDateTime OAIAddon::getCreatedAt() const {
    return m_created_at;
}
void OAIAddon::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAddon::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAddon::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIAddon::getModifiedAt() const {
    return m_modified_at;
}
void OAIAddon::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIAddon::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIAddon::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIAddon::getServiceAccountRoleArn() const {
    return m_service_account_role_arn;
}
void OAIAddon::setServiceAccountRoleArn(const QString &service_account_role_arn) {
    m_service_account_role_arn = service_account_role_arn;
    m_service_account_role_arn_isSet = true;
}

bool OAIAddon::is_service_account_role_arn_Set() const{
    return m_service_account_role_arn_isSet;
}

bool OAIAddon::is_service_account_role_arn_Valid() const{
    return m_service_account_role_arn_isValid;
}

QMap OAIAddon::getTags() const {
    return m_tags;
}
void OAIAddon::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAddon::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAddon::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAddon::getPublisher() const {
    return m_publisher;
}
void OAIAddon::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIAddon::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIAddon::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIAddon::getOwner() const {
    return m_owner;
}
void OAIAddon::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAddon::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAddon::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIAddon_marketplaceInformation OAIAddon::getMarketplaceInformation() const {
    return m_marketplace_information;
}
void OAIAddon::setMarketplaceInformation(const OAIAddon_marketplaceInformation &marketplace_information) {
    m_marketplace_information = marketplace_information;
    m_marketplace_information_isSet = true;
}

bool OAIAddon::is_marketplace_information_Set() const{
    return m_marketplace_information_isSet;
}

bool OAIAddon::is_marketplace_information_Valid() const{
    return m_marketplace_information_isValid;
}

QString OAIAddon::getConfigurationValues() const {
    return m_configuration_values;
}
void OAIAddon::setConfigurationValues(const QString &configuration_values) {
    m_configuration_values = configuration_values;
    m_configuration_values_isSet = true;
}

bool OAIAddon::is_configuration_values_Set() const{
    return m_configuration_values_isSet;
}

bool OAIAddon::is_configuration_values_Valid() const{
    return m_configuration_values_isValid;
}

bool OAIAddon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_addon_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_addon_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
