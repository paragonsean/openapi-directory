/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCluster_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCluster_request::OAICreateCluster_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCluster_request::OAICreateCluster_request() {
    this->initializeModel();
}

OAICreateCluster_request::~OAICreateCluster_request() {}

void OAICreateCluster_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_resources_vpc_config_isSet = false;
    m_resources_vpc_config_isValid = false;

    m_kubernetes_network_config_isSet = false;
    m_kubernetes_network_config_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_outpost_config_isSet = false;
    m_outpost_config_isValid = false;
}

void OAICreateCluster_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCluster_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_resources_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_resources_vpc_config, json[QString("resourcesVpcConfig")]);
    m_resources_vpc_config_isSet = !json[QString("resourcesVpcConfig")].isNull() && m_resources_vpc_config_isValid;

    m_kubernetes_network_config_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_network_config, json[QString("kubernetesNetworkConfig")]);
    m_kubernetes_network_config_isSet = !json[QString("kubernetesNetworkConfig")].isNull() && m_kubernetes_network_config_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_outpost_config_isValid = ::OpenAPI::fromJsonValue(m_outpost_config, json[QString("outpostConfig")]);
    m_outpost_config_isSet = !json[QString("outpostConfig")].isNull() && m_outpost_config_isValid;
}

QString OAICreateCluster_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCluster_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_resources_vpc_config.isSet()) {
        obj.insert(QString("resourcesVpcConfig"), ::OpenAPI::toJsonValue(m_resources_vpc_config));
    }
    if (m_kubernetes_network_config.isSet()) {
        obj.insert(QString("kubernetesNetworkConfig"), ::OpenAPI::toJsonValue(m_kubernetes_network_config));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_encryption_config.size() > 0) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_outpost_config.isSet()) {
        obj.insert(QString("outpostConfig"), ::OpenAPI::toJsonValue(m_outpost_config));
    }
    return obj;
}

QString OAICreateCluster_request::getName() const {
    return m_name;
}
void OAICreateCluster_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateCluster_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateCluster_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateCluster_request::getVersion() const {
    return m_version;
}
void OAICreateCluster_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateCluster_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateCluster_request::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICreateCluster_request::getRoleArn() const {
    return m_role_arn;
}
void OAICreateCluster_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateCluster_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateCluster_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAICreateCluster_request_resourcesVpcConfig OAICreateCluster_request::getResourcesVpcConfig() const {
    return m_resources_vpc_config;
}
void OAICreateCluster_request::setResourcesVpcConfig(const OAICreateCluster_request_resourcesVpcConfig &resources_vpc_config) {
    m_resources_vpc_config = resources_vpc_config;
    m_resources_vpc_config_isSet = true;
}

bool OAICreateCluster_request::is_resources_vpc_config_Set() const{
    return m_resources_vpc_config_isSet;
}

bool OAICreateCluster_request::is_resources_vpc_config_Valid() const{
    return m_resources_vpc_config_isValid;
}

OAICreateCluster_request_kubernetesNetworkConfig OAICreateCluster_request::getKubernetesNetworkConfig() const {
    return m_kubernetes_network_config;
}
void OAICreateCluster_request::setKubernetesNetworkConfig(const OAICreateCluster_request_kubernetesNetworkConfig &kubernetes_network_config) {
    m_kubernetes_network_config = kubernetes_network_config;
    m_kubernetes_network_config_isSet = true;
}

bool OAICreateCluster_request::is_kubernetes_network_config_Set() const{
    return m_kubernetes_network_config_isSet;
}

bool OAICreateCluster_request::is_kubernetes_network_config_Valid() const{
    return m_kubernetes_network_config_isValid;
}

OAICreateCluster_request_logging OAICreateCluster_request::getLogging() const {
    return m_logging;
}
void OAICreateCluster_request::setLogging(const OAICreateCluster_request_logging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAICreateCluster_request::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAICreateCluster_request::is_logging_Valid() const{
    return m_logging_isValid;
}

QString OAICreateCluster_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateCluster_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateCluster_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateCluster_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap<QString, QString> OAICreateCluster_request::getTags() const {
    return m_tags;
}
void OAICreateCluster_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCluster_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCluster_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIEncryptionConfig> OAICreateCluster_request::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICreateCluster_request::setEncryptionConfig(const QList<OAIEncryptionConfig> &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICreateCluster_request::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICreateCluster_request::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAICreateCluster_request_outpostConfig OAICreateCluster_request::getOutpostConfig() const {
    return m_outpost_config;
}
void OAICreateCluster_request::setOutpostConfig(const OAICreateCluster_request_outpostConfig &outpost_config) {
    m_outpost_config = outpost_config;
    m_outpost_config_isSet = true;
}

bool OAICreateCluster_request::is_outpost_config_Set() const{
    return m_outpost_config_isSet;
}

bool OAICreateCluster_request::is_outpost_config_Valid() const{
    return m_outpost_config_isValid;
}

bool OAICreateCluster_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outpost_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCluster_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_role_arn_isValid && m_resources_vpc_config_isValid && true;
}

} // namespace OpenAPI
