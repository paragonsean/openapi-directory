/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNodegroupRequest_updateConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNodegroupRequest_updateConfig::OAICreateNodegroupRequest_updateConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNodegroupRequest_updateConfig::OAICreateNodegroupRequest_updateConfig() {
    this->initializeModel();
}

OAICreateNodegroupRequest_updateConfig::~OAICreateNodegroupRequest_updateConfig() {}

void OAICreateNodegroupRequest_updateConfig::initializeModel() {

    m_max_unavailable_isSet = false;
    m_max_unavailable_isValid = false;

    m_max_unavailable_percentage_isSet = false;
    m_max_unavailable_percentage_isValid = false;
}

void OAICreateNodegroupRequest_updateConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNodegroupRequest_updateConfig::fromJsonObject(QJsonObject json) {

    m_max_unavailable_isValid = ::OpenAPI::fromJsonValue(m_max_unavailable, json[QString("maxUnavailable")]);
    m_max_unavailable_isSet = !json[QString("maxUnavailable")].isNull() && m_max_unavailable_isValid;

    m_max_unavailable_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_unavailable_percentage, json[QString("maxUnavailablePercentage")]);
    m_max_unavailable_percentage_isSet = !json[QString("maxUnavailablePercentage")].isNull() && m_max_unavailable_percentage_isValid;
}

QString OAICreateNodegroupRequest_updateConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNodegroupRequest_updateConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_max_unavailable_isSet) {
        obj.insert(QString("maxUnavailable"), ::OpenAPI::toJsonValue(m_max_unavailable));
    }
    if (m_max_unavailable_percentage_isSet) {
        obj.insert(QString("maxUnavailablePercentage"), ::OpenAPI::toJsonValue(m_max_unavailable_percentage));
    }
    return obj;
}

qint32 OAICreateNodegroupRequest_updateConfig::getMaxUnavailable() const {
    return m_max_unavailable;
}
void OAICreateNodegroupRequest_updateConfig::setMaxUnavailable(const qint32 &max_unavailable) {
    m_max_unavailable = max_unavailable;
    m_max_unavailable_isSet = true;
}

bool OAICreateNodegroupRequest_updateConfig::is_max_unavailable_Set() const{
    return m_max_unavailable_isSet;
}

bool OAICreateNodegroupRequest_updateConfig::is_max_unavailable_Valid() const{
    return m_max_unavailable_isValid;
}

qint32 OAICreateNodegroupRequest_updateConfig::getMaxUnavailablePercentage() const {
    return m_max_unavailable_percentage;
}
void OAICreateNodegroupRequest_updateConfig::setMaxUnavailablePercentage(const qint32 &max_unavailable_percentage) {
    m_max_unavailable_percentage = max_unavailable_percentage;
    m_max_unavailable_percentage_isSet = true;
}

bool OAICreateNodegroupRequest_updateConfig::is_max_unavailable_percentage_Set() const{
    return m_max_unavailable_percentage_isSet;
}

bool OAICreateNodegroupRequest_updateConfig::is_max_unavailable_percentage_Valid() const{
    return m_max_unavailable_percentage_isValid;
}

bool OAICreateNodegroupRequest_updateConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_unavailable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_unavailable_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNodegroupRequest_updateConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
