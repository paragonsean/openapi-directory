/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListClustersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListClustersResponse::OAIListClustersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListClustersResponse::OAIListClustersResponse() {
    this->initializeModel();
}

OAIListClustersResponse::~OAIListClustersResponse() {}

void OAIListClustersResponse::initializeModel() {

    m_clusters_isSet = false;
    m_clusters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListClustersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListClustersResponse::fromJsonObject(QJsonObject json) {

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListClustersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListClustersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_clusters.isSet()) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListClustersResponse::getClusters() const {
    return m_clusters;
}
void OAIListClustersResponse::setClusters(const QList &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIListClustersResponse::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIListClustersResponse::is_clusters_Valid() const{
    return m_clusters_isValid;
}

QString OAIListClustersResponse::getNextToken() const {
    return m_next_token;
}
void OAIListClustersResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListClustersResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListClustersResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListClustersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clusters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListClustersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
