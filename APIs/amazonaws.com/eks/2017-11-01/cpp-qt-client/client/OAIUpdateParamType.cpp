/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateParamType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateParamType::OAIUpdateParamType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateParamType::OAIUpdateParamType() {
    this->initializeModel();
}

OAIUpdateParamType::~OAIUpdateParamType() {}

void OAIUpdateParamType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUpdateParamType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUpdateParamType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Version", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::VERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlatformVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::PLATFORMVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EndpointPrivateAccess", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::ENDPOINTPRIVATEACCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EndpointPublicAccess", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::ENDPOINTPUBLICACCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterLogging", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::CLUSTERLOGGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DesiredSize", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::DESIREDSIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LabelsToAdd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::LABELSTOADD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LabelsToRemove", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::LABELSTOREMOVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TaintsToAdd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::TAINTSTOADD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TaintsToRemove", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::TAINTSTOREMOVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxSize", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::MAXSIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MinSize", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::MINSIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReleaseVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::RELEASEVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PublicAccessCidrs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::PUBLICACCESSCIDRS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LaunchTemplateName", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::LAUNCHTEMPLATENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LaunchTemplateVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::LAUNCHTEMPLATEVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IdentityProviderConfig", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::IDENTITYPROVIDERCONFIG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EncryptionConfig", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::ENCRYPTIONCONFIG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AddonVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::ADDONVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceAccountRoleArn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::SERVICEACCOUNTROLEARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ResolveConflicts", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::RESOLVECONFLICTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxUnavailable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::MAXUNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxUnavailablePercentage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpdateParamType::MAXUNAVAILABLEPERCENTAGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUpdateParamType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUpdateParamType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUpdateParamType::VERSION:
            val = "Version";
            break;
        case eOAIUpdateParamType::PLATFORMVERSION:
            val = "PlatformVersion";
            break;
        case eOAIUpdateParamType::ENDPOINTPRIVATEACCESS:
            val = "EndpointPrivateAccess";
            break;
        case eOAIUpdateParamType::ENDPOINTPUBLICACCESS:
            val = "EndpointPublicAccess";
            break;
        case eOAIUpdateParamType::CLUSTERLOGGING:
            val = "ClusterLogging";
            break;
        case eOAIUpdateParamType::DESIREDSIZE:
            val = "DesiredSize";
            break;
        case eOAIUpdateParamType::LABELSTOADD:
            val = "LabelsToAdd";
            break;
        case eOAIUpdateParamType::LABELSTOREMOVE:
            val = "LabelsToRemove";
            break;
        case eOAIUpdateParamType::TAINTSTOADD:
            val = "TaintsToAdd";
            break;
        case eOAIUpdateParamType::TAINTSTOREMOVE:
            val = "TaintsToRemove";
            break;
        case eOAIUpdateParamType::MAXSIZE:
            val = "MaxSize";
            break;
        case eOAIUpdateParamType::MINSIZE:
            val = "MinSize";
            break;
        case eOAIUpdateParamType::RELEASEVERSION:
            val = "ReleaseVersion";
            break;
        case eOAIUpdateParamType::PUBLICACCESSCIDRS:
            val = "PublicAccessCidrs";
            break;
        case eOAIUpdateParamType::LAUNCHTEMPLATENAME:
            val = "LaunchTemplateName";
            break;
        case eOAIUpdateParamType::LAUNCHTEMPLATEVERSION:
            val = "LaunchTemplateVersion";
            break;
        case eOAIUpdateParamType::IDENTITYPROVIDERCONFIG:
            val = "IdentityProviderConfig";
            break;
        case eOAIUpdateParamType::ENCRYPTIONCONFIG:
            val = "EncryptionConfig";
            break;
        case eOAIUpdateParamType::ADDONVERSION:
            val = "AddonVersion";
            break;
        case eOAIUpdateParamType::SERVICEACCOUNTROLEARN:
            val = "ServiceAccountRoleArn";
            break;
        case eOAIUpdateParamType::RESOLVECONFLICTS:
            val = "ResolveConflicts";
            break;
        case eOAIUpdateParamType::MAXUNAVAILABLE:
            val = "MaxUnavailable";
            break;
        case eOAIUpdateParamType::MAXUNAVAILABLEPERCENTAGE:
            val = "MaxUnavailablePercentage";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUpdateParamType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUpdateParamType::eOAIUpdateParamType OAIUpdateParamType::getValue() const {
    return m_value;
}

void OAIUpdateParamType::setValue(const OAIUpdateParamType::eOAIUpdateParamType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUpdateParamType::isSet() const {
    
    return m_value_isSet;
}

bool OAIUpdateParamType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
