/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterClusterRequest::OAIRegisterClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterClusterRequest::OAIRegisterClusterRequest() {
    this->initializeModel();
}

OAIRegisterClusterRequest::~OAIRegisterClusterRequest() {}

void OAIRegisterClusterRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_connector_config_isSet = false;
    m_connector_config_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRegisterClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterClusterRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_connector_config_isValid = ::OpenAPI::fromJsonValue(m_connector_config, json[QString("connectorConfig")]);
    m_connector_config_isSet = !json[QString("connectorConfig")].isNull() && m_connector_config_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRegisterClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_connector_config.isSet()) {
        obj.insert(QString("connectorConfig"), ::OpenAPI::toJsonValue(m_connector_config));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIRegisterClusterRequest::getName() const {
    return m_name;
}
void OAIRegisterClusterRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegisterClusterRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegisterClusterRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIRegisterClusterRequest_connectorConfig OAIRegisterClusterRequest::getConnectorConfig() const {
    return m_connector_config;
}
void OAIRegisterClusterRequest::setConnectorConfig(const OAIRegisterClusterRequest_connectorConfig &connector_config) {
    m_connector_config = connector_config;
    m_connector_config_isSet = true;
}

bool OAIRegisterClusterRequest::is_connector_config_Set() const{
    return m_connector_config_isSet;
}

bool OAIRegisterClusterRequest::is_connector_config_Valid() const{
    return m_connector_config_isValid;
}

QString OAIRegisterClusterRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIRegisterClusterRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIRegisterClusterRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIRegisterClusterRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap OAIRegisterClusterRequest::getTags() const {
    return m_tags;
}
void OAIRegisterClusterRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterClusterRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterClusterRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRegisterClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_connector_config_isValid && true;
}

} // namespace OpenAPI
