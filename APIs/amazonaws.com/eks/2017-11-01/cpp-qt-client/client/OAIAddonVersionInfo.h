/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddonVersionInfo.h
 *
 * Information about an add-on version.
 */

#ifndef OAIAddonVersionInfo_H
#define OAIAddonVersionInfo_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAddonVersionInfo : public OAIObject {
public:
    OAIAddonVersionInfo();
    OAIAddonVersionInfo(QString json);
    ~OAIAddonVersionInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddonVersion() const;
    void setAddonVersion(const QString &addon_version);
    bool is_addon_version_Set() const;
    bool is_addon_version_Valid() const;

    QList getArchitecture() const;
    void setArchitecture(const QList &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QList getCompatibilities() const;
    void setCompatibilities(const QList &compatibilities);
    bool is_compatibilities_Set() const;
    bool is_compatibilities_Valid() const;

    bool getRequiresConfiguration() const;
    void setRequiresConfiguration(const bool &requires_configuration);
    bool is_requires_configuration_Set() const;
    bool is_requires_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_addon_version;
    bool m_addon_version_isSet;
    bool m_addon_version_isValid;

    QList m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QList m_compatibilities;
    bool m_compatibilities_isSet;
    bool m_compatibilities_isValid;

    bool m_requires_configuration;
    bool m_requires_configuration_isSet;
    bool m_requires_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddonVersionInfo)

#endif // OAIAddonVersionInfo_H
