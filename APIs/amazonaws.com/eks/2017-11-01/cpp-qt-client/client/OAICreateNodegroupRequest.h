/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateNodegroupRequest.h
 *
 * 
 */

#ifndef OAICreateNodegroupRequest_H
#define OAICreateNodegroupRequest_H

#include <QJsonObject>

#include "OAIAMITypes.h"
#include "OAICapacityTypes.h"
#include "OAICreateNodegroupRequest_launchTemplate.h"
#include "OAICreateNodegroupRequest_remoteAccess.h"
#include "OAICreateNodegroupRequest_scalingConfig.h"
#include "OAICreateNodegroupRequest_updateConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateNodegroupRequest_scalingConfig;
class OAICreateNodegroupRequest_remoteAccess;
class OAICreateNodegroupRequest_launchTemplate;
class OAICreateNodegroupRequest_updateConfig;

class OAICreateNodegroupRequest : public OAIObject {
public:
    OAICreateNodegroupRequest();
    OAICreateNodegroupRequest(QString json);
    ~OAICreateNodegroupRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNodegroupName() const;
    void setNodegroupName(const QString &nodegroup_name);
    bool is_nodegroup_name_Set() const;
    bool is_nodegroup_name_Valid() const;

    OAICreateNodegroupRequest_scalingConfig getScalingConfig() const;
    void setScalingConfig(const OAICreateNodegroupRequest_scalingConfig &scaling_config);
    bool is_scaling_config_Set() const;
    bool is_scaling_config_Valid() const;

    qint32 getDiskSize() const;
    void setDiskSize(const qint32 &disk_size);
    bool is_disk_size_Set() const;
    bool is_disk_size_Valid() const;

    QList getSubnets() const;
    void setSubnets(const QList &subnets);
    bool is_subnets_Set() const;
    bool is_subnets_Valid() const;

    QList getInstanceTypes() const;
    void setInstanceTypes(const QList &instance_types);
    bool is_instance_types_Set() const;
    bool is_instance_types_Valid() const;

    OAIAMITypes getAmiType() const;
    void setAmiType(const OAIAMITypes &ami_type);
    bool is_ami_type_Set() const;
    bool is_ami_type_Valid() const;

    OAICreateNodegroupRequest_remoteAccess getRemoteAccess() const;
    void setRemoteAccess(const OAICreateNodegroupRequest_remoteAccess &remote_access);
    bool is_remote_access_Set() const;
    bool is_remote_access_Valid() const;

    QString getNodeRole() const;
    void setNodeRole(const QString &node_role);
    bool is_node_role_Set() const;
    bool is_node_role_Valid() const;

    QMap getLabels() const;
    void setLabels(const QMap &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList getTaints() const;
    void setTaints(const QList &taints);
    bool is_taints_Set() const;
    bool is_taints_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    OAICreateNodegroupRequest_launchTemplate getLaunchTemplate() const;
    void setLaunchTemplate(const OAICreateNodegroupRequest_launchTemplate &launch_template);
    bool is_launch_template_Set() const;
    bool is_launch_template_Valid() const;

    OAICreateNodegroupRequest_updateConfig getUpdateConfig() const;
    void setUpdateConfig(const OAICreateNodegroupRequest_updateConfig &update_config);
    bool is_update_config_Set() const;
    bool is_update_config_Valid() const;

    OAICapacityTypes getCapacityType() const;
    void setCapacityType(const OAICapacityTypes &capacity_type);
    bool is_capacity_type_Set() const;
    bool is_capacity_type_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getReleaseVersion() const;
    void setReleaseVersion(const QString &release_version);
    bool is_release_version_Set() const;
    bool is_release_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_nodegroup_name;
    bool m_nodegroup_name_isSet;
    bool m_nodegroup_name_isValid;

    OAICreateNodegroupRequest_scalingConfig m_scaling_config;
    bool m_scaling_config_isSet;
    bool m_scaling_config_isValid;

    qint32 m_disk_size;
    bool m_disk_size_isSet;
    bool m_disk_size_isValid;

    QList m_subnets;
    bool m_subnets_isSet;
    bool m_subnets_isValid;

    QList m_instance_types;
    bool m_instance_types_isSet;
    bool m_instance_types_isValid;

    OAIAMITypes m_ami_type;
    bool m_ami_type_isSet;
    bool m_ami_type_isValid;

    OAICreateNodegroupRequest_remoteAccess m_remote_access;
    bool m_remote_access_isSet;
    bool m_remote_access_isValid;

    QString m_node_role;
    bool m_node_role_isSet;
    bool m_node_role_isValid;

    QMap m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList m_taints;
    bool m_taints_isSet;
    bool m_taints_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    OAICreateNodegroupRequest_launchTemplate m_launch_template;
    bool m_launch_template_isSet;
    bool m_launch_template_isValid;

    OAICreateNodegroupRequest_updateConfig m_update_config;
    bool m_update_config_isSet;
    bool m_update_config_isValid;

    OAICapacityTypes m_capacity_type;
    bool m_capacity_type_isSet;
    bool m_capacity_type_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_release_version;
    bool m_release_version_isSet;
    bool m_release_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateNodegroupRequest)

#endif // OAICreateNodegroupRequest_H
