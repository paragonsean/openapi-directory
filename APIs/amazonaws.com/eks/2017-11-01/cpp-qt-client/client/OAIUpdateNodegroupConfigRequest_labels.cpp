/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNodegroupConfigRequest_labels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNodegroupConfigRequest_labels::OAIUpdateNodegroupConfigRequest_labels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNodegroupConfigRequest_labels::OAIUpdateNodegroupConfigRequest_labels() {
    this->initializeModel();
}

OAIUpdateNodegroupConfigRequest_labels::~OAIUpdateNodegroupConfigRequest_labels() {}

void OAIUpdateNodegroupConfigRequest_labels::initializeModel() {

    m_add_or_update_labels_isSet = false;
    m_add_or_update_labels_isValid = false;

    m_remove_labels_isSet = false;
    m_remove_labels_isValid = false;
}

void OAIUpdateNodegroupConfigRequest_labels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNodegroupConfigRequest_labels::fromJsonObject(QJsonObject json) {

    m_add_or_update_labels_isValid = ::OpenAPI::fromJsonValue(m_add_or_update_labels, json[QString("addOrUpdateLabels")]);
    m_add_or_update_labels_isSet = !json[QString("addOrUpdateLabels")].isNull() && m_add_or_update_labels_isValid;

    m_remove_labels_isValid = ::OpenAPI::fromJsonValue(m_remove_labels, json[QString("removeLabels")]);
    m_remove_labels_isSet = !json[QString("removeLabels")].isNull() && m_remove_labels_isValid;
}

QString OAIUpdateNodegroupConfigRequest_labels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNodegroupConfigRequest_labels::asJsonObject() const {
    QJsonObject obj;
    if (m_add_or_update_labels.isSet()) {
        obj.insert(QString("addOrUpdateLabels"), ::OpenAPI::toJsonValue(m_add_or_update_labels));
    }
    if (m_remove_labels.isSet()) {
        obj.insert(QString("removeLabels"), ::OpenAPI::toJsonValue(m_remove_labels));
    }
    return obj;
}

QMap OAIUpdateNodegroupConfigRequest_labels::getAddOrUpdateLabels() const {
    return m_add_or_update_labels;
}
void OAIUpdateNodegroupConfigRequest_labels::setAddOrUpdateLabels(const QMap &add_or_update_labels) {
    m_add_or_update_labels = add_or_update_labels;
    m_add_or_update_labels_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest_labels::is_add_or_update_labels_Set() const{
    return m_add_or_update_labels_isSet;
}

bool OAIUpdateNodegroupConfigRequest_labels::is_add_or_update_labels_Valid() const{
    return m_add_or_update_labels_isValid;
}

QList OAIUpdateNodegroupConfigRequest_labels::getRemoveLabels() const {
    return m_remove_labels;
}
void OAIUpdateNodegroupConfigRequest_labels::setRemoveLabels(const QList &remove_labels) {
    m_remove_labels = remove_labels;
    m_remove_labels_isSet = true;
}

bool OAIUpdateNodegroupConfigRequest_labels::is_remove_labels_Set() const{
    return m_remove_labels_isSet;
}

bool OAIUpdateNodegroupConfigRequest_labels::is_remove_labels_Valid() const{
    return m_remove_labels_isValid;
}

bool OAIUpdateNodegroupConfigRequest_labels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_or_update_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNodegroupConfigRequest_labels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
