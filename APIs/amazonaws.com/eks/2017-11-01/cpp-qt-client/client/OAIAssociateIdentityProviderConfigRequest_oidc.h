/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssociateIdentityProviderConfigRequest_oidc.h
 *
 * 
 */

#ifndef OAIAssociateIdentityProviderConfigRequest_oidc_H
#define OAIAssociateIdentityProviderConfigRequest_oidc_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssociateIdentityProviderConfigRequest_oidc : public OAIObject {
public:
    OAIAssociateIdentityProviderConfigRequest_oidc();
    OAIAssociateIdentityProviderConfigRequest_oidc(QString json);
    ~OAIAssociateIdentityProviderConfigRequest_oidc() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIdentityProviderConfigName() const;
    void setIdentityProviderConfigName(const QString &identity_provider_config_name);
    bool is_identity_provider_config_name_Set() const;
    bool is_identity_provider_config_name_Valid() const;

    QString getIssuerUrl() const;
    void setIssuerUrl(const QString &issuer_url);
    bool is_issuer_url_Set() const;
    bool is_issuer_url_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getUsernameClaim() const;
    void setUsernameClaim(const QString &username_claim);
    bool is_username_claim_Set() const;
    bool is_username_claim_Valid() const;

    QString getUsernamePrefix() const;
    void setUsernamePrefix(const QString &username_prefix);
    bool is_username_prefix_Set() const;
    bool is_username_prefix_Valid() const;

    QString getGroupsClaim() const;
    void setGroupsClaim(const QString &groups_claim);
    bool is_groups_claim_Set() const;
    bool is_groups_claim_Valid() const;

    QString getGroupsPrefix() const;
    void setGroupsPrefix(const QString &groups_prefix);
    bool is_groups_prefix_Set() const;
    bool is_groups_prefix_Valid() const;

    QMap getRequiredClaims() const;
    void setRequiredClaims(const QMap &required_claims);
    bool is_required_claims_Set() const;
    bool is_required_claims_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_identity_provider_config_name;
    bool m_identity_provider_config_name_isSet;
    bool m_identity_provider_config_name_isValid;

    QString m_issuer_url;
    bool m_issuer_url_isSet;
    bool m_issuer_url_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_username_claim;
    bool m_username_claim_isSet;
    bool m_username_claim_isValid;

    QString m_username_prefix;
    bool m_username_prefix_isSet;
    bool m_username_prefix_isValid;

    QString m_groups_claim;
    bool m_groups_claim_isSet;
    bool m_groups_claim_isValid;

    QString m_groups_prefix;
    bool m_groups_prefix_isSet;
    bool m_groups_prefix_isValid;

    QMap m_required_claims;
    bool m_required_claims_isSet;
    bool m_required_claims_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssociateIdentityProviderConfigRequest_oidc)

#endif // OAIAssociateIdentityProviderConfigRequest_oidc_H
