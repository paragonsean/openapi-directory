/**
 * Amazon Elastic Kubernetes Service
 * <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. </p> <p>Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.</p>
 *
 * The version of the OpenAPI document: 2017-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFargateProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFargateProfile::OAIFargateProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFargateProfile::OAIFargateProfile() {
    this->initializeModel();
}

OAIFargateProfile::~OAIFargateProfile() {}

void OAIFargateProfile::initializeModel() {

    m_fargate_profile_name_isSet = false;
    m_fargate_profile_name_isValid = false;

    m_fargate_profile_arn_isSet = false;
    m_fargate_profile_arn_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_pod_execution_role_arn_isSet = false;
    m_pod_execution_role_arn_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_selectors_isSet = false;
    m_selectors_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFargateProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFargateProfile::fromJsonObject(QJsonObject json) {

    m_fargate_profile_name_isValid = ::OpenAPI::fromJsonValue(m_fargate_profile_name, json[QString("fargateProfileName")]);
    m_fargate_profile_name_isSet = !json[QString("fargateProfileName")].isNull() && m_fargate_profile_name_isValid;

    m_fargate_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_fargate_profile_arn, json[QString("fargateProfileArn")]);
    m_fargate_profile_arn_isSet = !json[QString("fargateProfileArn")].isNull() && m_fargate_profile_arn_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_pod_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_pod_execution_role_arn, json[QString("podExecutionRoleArn")]);
    m_pod_execution_role_arn_isSet = !json[QString("podExecutionRoleArn")].isNull() && m_pod_execution_role_arn_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;

    m_selectors_isValid = ::OpenAPI::fromJsonValue(m_selectors, json[QString("selectors")]);
    m_selectors_isSet = !json[QString("selectors")].isNull() && m_selectors_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIFargateProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFargateProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_fargate_profile_name_isSet) {
        obj.insert(QString("fargateProfileName"), ::OpenAPI::toJsonValue(m_fargate_profile_name));
    }
    if (m_fargate_profile_arn_isSet) {
        obj.insert(QString("fargateProfileArn"), ::OpenAPI::toJsonValue(m_fargate_profile_arn));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_pod_execution_role_arn_isSet) {
        obj.insert(QString("podExecutionRoleArn"), ::OpenAPI::toJsonValue(m_pod_execution_role_arn));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_selectors.isSet()) {
        obj.insert(QString("selectors"), ::OpenAPI::toJsonValue(m_selectors));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIFargateProfile::getFargateProfileName() const {
    return m_fargate_profile_name;
}
void OAIFargateProfile::setFargateProfileName(const QString &fargate_profile_name) {
    m_fargate_profile_name = fargate_profile_name;
    m_fargate_profile_name_isSet = true;
}

bool OAIFargateProfile::is_fargate_profile_name_Set() const{
    return m_fargate_profile_name_isSet;
}

bool OAIFargateProfile::is_fargate_profile_name_Valid() const{
    return m_fargate_profile_name_isValid;
}

QString OAIFargateProfile::getFargateProfileArn() const {
    return m_fargate_profile_arn;
}
void OAIFargateProfile::setFargateProfileArn(const QString &fargate_profile_arn) {
    m_fargate_profile_arn = fargate_profile_arn;
    m_fargate_profile_arn_isSet = true;
}

bool OAIFargateProfile::is_fargate_profile_arn_Set() const{
    return m_fargate_profile_arn_isSet;
}

bool OAIFargateProfile::is_fargate_profile_arn_Valid() const{
    return m_fargate_profile_arn_isValid;
}

QString OAIFargateProfile::getClusterName() const {
    return m_cluster_name;
}
void OAIFargateProfile::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIFargateProfile::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIFargateProfile::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QDateTime OAIFargateProfile::getCreatedAt() const {
    return m_created_at;
}
void OAIFargateProfile::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFargateProfile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFargateProfile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFargateProfile::getPodExecutionRoleArn() const {
    return m_pod_execution_role_arn;
}
void OAIFargateProfile::setPodExecutionRoleArn(const QString &pod_execution_role_arn) {
    m_pod_execution_role_arn = pod_execution_role_arn;
    m_pod_execution_role_arn_isSet = true;
}

bool OAIFargateProfile::is_pod_execution_role_arn_Set() const{
    return m_pod_execution_role_arn_isSet;
}

bool OAIFargateProfile::is_pod_execution_role_arn_Valid() const{
    return m_pod_execution_role_arn_isValid;
}

QList OAIFargateProfile::getSubnets() const {
    return m_subnets;
}
void OAIFargateProfile::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIFargateProfile::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIFargateProfile::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList OAIFargateProfile::getSelectors() const {
    return m_selectors;
}
void OAIFargateProfile::setSelectors(const QList &selectors) {
    m_selectors = selectors;
    m_selectors_isSet = true;
}

bool OAIFargateProfile::is_selectors_Set() const{
    return m_selectors_isSet;
}

bool OAIFargateProfile::is_selectors_Valid() const{
    return m_selectors_isValid;
}

OAIFargateProfileStatus OAIFargateProfile::getStatus() const {
    return m_status;
}
void OAIFargateProfile::setStatus(const OAIFargateProfileStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFargateProfile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFargateProfile::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIFargateProfile::getTags() const {
    return m_tags;
}
void OAIFargateProfile::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFargateProfile::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFargateProfile::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFargateProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fargate_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fargate_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFargateProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
