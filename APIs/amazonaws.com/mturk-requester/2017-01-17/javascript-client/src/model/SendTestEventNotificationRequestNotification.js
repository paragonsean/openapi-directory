/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationSpecification from './NotificationSpecification';
import NotificationTransport from './NotificationTransport';

/**
 * The SendTestEventNotificationRequestNotification model module.
 * @module model/SendTestEventNotificationRequestNotification
 * @version 2017-01-17
 */
class SendTestEventNotificationRequestNotification {
    /**
     * Constructs a new <code>SendTestEventNotificationRequestNotification</code>.
     * @alias module:model/SendTestEventNotificationRequestNotification
     * @implements module:model/NotificationSpecification
     * @param destination {String} 
     * @param transport {module:model/NotificationTransport} 
     * @param version {String} 
     * @param eventTypes {Array} 
     */
    constructor(destination, transport, version, eventTypes) { 
        NotificationSpecification.initialize(this, destination, transport, version, eventTypes);
        SendTestEventNotificationRequestNotification.initialize(this, destination, transport, version, eventTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination, transport, version, eventTypes) { 
        obj['Destination'] = destination;
        obj['Transport'] = transport;
        obj['Version'] = version;
        obj['EventTypes'] = eventTypes;
    }

    /**
     * Constructs a <code>SendTestEventNotificationRequestNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendTestEventNotificationRequestNotification} obj Optional instance to populate.
     * @return {module:model/SendTestEventNotificationRequestNotification} The populated <code>SendTestEventNotificationRequestNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendTestEventNotificationRequestNotification();
            NotificationSpecification.constructFromObject(data, obj);

            if (data.hasOwnProperty('Destination')) {
                obj['Destination'] = ApiClient.convertToType(data['Destination'], 'String');
            }
            if (data.hasOwnProperty('Transport')) {
                obj['Transport'] = ApiClient.convertToType(data['Transport'], NotificationTransport);
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
            if (data.hasOwnProperty('EventTypes')) {
                obj['EventTypes'] = ApiClient.convertToType(data['EventTypes'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendTestEventNotificationRequestNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendTestEventNotificationRequestNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendTestEventNotificationRequestNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Destination`
        if (data['Destination']) { // data not null
          String.validateJSON(data['Destination']);
        }
        // validate the optional field `Transport`
        if (data['Transport']) { // data not null
          NotificationTransport.validateJSON(data['Transport']);
        }
        // validate the optional field `Version`
        if (data['Version']) { // data not null
          String.validateJSON(data['Version']);
        }
        // validate the optional field `EventTypes`
        if (data['EventTypes']) { // data not null
          Array.validateJSON(data['EventTypes']);
        }

        return true;
    }


}

SendTestEventNotificationRequestNotification.RequiredProperties = ["Destination", "Transport", "Version", "EventTypes"];

/**
 * @member {String} Destination
 */
SendTestEventNotificationRequestNotification.prototype['Destination'] = undefined;

/**
 * @member {module:model/NotificationTransport} Transport
 */
SendTestEventNotificationRequestNotification.prototype['Transport'] = undefined;

/**
 * @member {String} Version
 */
SendTestEventNotificationRequestNotification.prototype['Version'] = undefined;

/**
 * @member {Array} EventTypes
 */
SendTestEventNotificationRequestNotification.prototype['EventTypes'] = undefined;


// Implement NotificationSpecification interface:
/**
 * @member {String} Destination
 */
NotificationSpecification.prototype['Destination'] = undefined;
/**
 * @member {module:model/NotificationTransport} Transport
 */
NotificationSpecification.prototype['Transport'] = undefined;
/**
 * @member {String} Version
 */
NotificationSpecification.prototype['Version'] = undefined;
/**
 * @member {Array} EventTypes
 */
NotificationSpecification.prototype['EventTypes'] = undefined;




export default SendTestEventNotificationRequestNotification;

