/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateQualificationTypeRequest.h
 *
 * 
 */

#ifndef OAICreateQualificationTypeRequest_H
#define OAICreateQualificationTypeRequest_H

#include <QJsonObject>

#include "OAIQualificationTypeStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateQualificationTypeRequest : public OAIObject {
public:
    OAICreateQualificationTypeRequest();
    OAICreateQualificationTypeRequest(QString json);
    ~OAICreateQualificationTypeRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getKeywords() const;
    void setKeywords(const QString &keywords);
    bool is_keywords_Set() const;
    bool is_keywords_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIQualificationTypeStatus getQualificationTypeStatus() const;
    void setQualificationTypeStatus(const OAIQualificationTypeStatus &qualification_type_status);
    bool is_qualification_type_status_Set() const;
    bool is_qualification_type_status_Valid() const;

    qint32 getRetryDelayInSeconds() const;
    void setRetryDelayInSeconds(const qint32 &retry_delay_in_seconds);
    bool is_retry_delay_in_seconds_Set() const;
    bool is_retry_delay_in_seconds_Valid() const;

    QString getTest() const;
    void setTest(const QString &test);
    bool is_test_Set() const;
    bool is_test_Valid() const;

    QString getAnswerKey() const;
    void setAnswerKey(const QString &answer_key);
    bool is_answer_key_Set() const;
    bool is_answer_key_Valid() const;

    qint32 getTestDurationInSeconds() const;
    void setTestDurationInSeconds(const qint32 &test_duration_in_seconds);
    bool is_test_duration_in_seconds_Set() const;
    bool is_test_duration_in_seconds_Valid() const;

    bool getAutoGranted() const;
    void setAutoGranted(const bool &auto_granted);
    bool is_auto_granted_Set() const;
    bool is_auto_granted_Valid() const;

    qint32 getAutoGrantedValue() const;
    void setAutoGrantedValue(const qint32 &auto_granted_value);
    bool is_auto_granted_value_Set() const;
    bool is_auto_granted_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_keywords;
    bool m_keywords_isSet;
    bool m_keywords_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIQualificationTypeStatus m_qualification_type_status;
    bool m_qualification_type_status_isSet;
    bool m_qualification_type_status_isValid;

    qint32 m_retry_delay_in_seconds;
    bool m_retry_delay_in_seconds_isSet;
    bool m_retry_delay_in_seconds_isValid;

    QString m_test;
    bool m_test_isSet;
    bool m_test_isValid;

    QString m_answer_key;
    bool m_answer_key_isSet;
    bool m_answer_key_isValid;

    qint32 m_test_duration_in_seconds;
    bool m_test_duration_in_seconds_isSet;
    bool m_test_duration_in_seconds_isValid;

    bool m_auto_granted;
    bool m_auto_granted_isSet;
    bool m_auto_granted_isValid;

    qint32 m_auto_granted_value;
    bool m_auto_granted_value_isSet;
    bool m_auto_granted_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateQualificationTypeRequest)

#endif // OAICreateQualificationTypeRequest_H
