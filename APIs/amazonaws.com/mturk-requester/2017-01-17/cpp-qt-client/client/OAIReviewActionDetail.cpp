/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviewActionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReviewActionDetail::OAIReviewActionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReviewActionDetail::OAIReviewActionDetail() {
    this->initializeModel();
}

OAIReviewActionDetail::~OAIReviewActionDetail() {}

void OAIReviewActionDetail::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_complete_time_isSet = false;
    m_complete_time_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;
}

void OAIReviewActionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReviewActionDetail::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("ActionId")]);
    m_action_id_isSet = !json[QString("ActionId")].isNull() && m_action_id_isValid;

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("ActionName")]);
    m_action_name_isSet = !json[QString("ActionName")].isNull() && m_action_name_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("TargetId")]);
    m_target_id_isSet = !json[QString("TargetId")].isNull() && m_target_id_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("TargetType")]);
    m_target_type_isSet = !json[QString("TargetType")].isNull() && m_target_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_complete_time_isValid = ::OpenAPI::fromJsonValue(m_complete_time, json[QString("CompleteTime")]);
    m_complete_time_isSet = !json[QString("CompleteTime")].isNull() && m_complete_time_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;
}

QString OAIReviewActionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReviewActionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("ActionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_action_name_isSet) {
        obj.insert(QString("ActionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("TargetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("TargetType"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_complete_time_isSet) {
        obj.insert(QString("CompleteTime"), ::OpenAPI::toJsonValue(m_complete_time));
    }
    if (m_result_isSet) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    return obj;
}

QString OAIReviewActionDetail::getActionId() const {
    return m_action_id;
}
void OAIReviewActionDetail::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIReviewActionDetail::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIReviewActionDetail::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIReviewActionDetail::getActionName() const {
    return m_action_name;
}
void OAIReviewActionDetail::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIReviewActionDetail::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIReviewActionDetail::is_action_name_Valid() const{
    return m_action_name_isValid;
}

QString OAIReviewActionDetail::getTargetId() const {
    return m_target_id;
}
void OAIReviewActionDetail::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIReviewActionDetail::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIReviewActionDetail::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIReviewActionDetail::getTargetType() const {
    return m_target_type;
}
void OAIReviewActionDetail::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIReviewActionDetail::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIReviewActionDetail::is_target_type_Valid() const{
    return m_target_type_isValid;
}

OAIReviewActionStatus OAIReviewActionDetail::getStatus() const {
    return m_status;
}
void OAIReviewActionDetail::setStatus(const OAIReviewActionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReviewActionDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReviewActionDetail::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIReviewActionDetail::getCompleteTime() const {
    return m_complete_time;
}
void OAIReviewActionDetail::setCompleteTime(const QDateTime &complete_time) {
    m_complete_time = complete_time;
    m_complete_time_isSet = true;
}

bool OAIReviewActionDetail::is_complete_time_Set() const{
    return m_complete_time_isSet;
}

bool OAIReviewActionDetail::is_complete_time_Valid() const{
    return m_complete_time_isValid;
}

QString OAIReviewActionDetail::getResult() const {
    return m_result;
}
void OAIReviewActionDetail::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIReviewActionDetail::is_result_Set() const{
    return m_result_isSet;
}

bool OAIReviewActionDetail::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIReviewActionDetail::getErrorCode() const {
    return m_error_code;
}
void OAIReviewActionDetail::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIReviewActionDetail::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIReviewActionDetail::is_error_code_Valid() const{
    return m_error_code_isValid;
}

bool OAIReviewActionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReviewActionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
