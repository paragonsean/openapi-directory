/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->initializeModel();
}

OAIEventType::~OAIEventType() {}

void OAIEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AssignmentAccepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ASSIGNMENTACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AssignmentAbandoned", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ASSIGNMENTABANDONED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AssignmentReturned", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ASSIGNMENTRETURNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AssignmentSubmitted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ASSIGNMENTSUBMITTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AssignmentRejected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ASSIGNMENTREJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AssignmentApproved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ASSIGNMENTAPPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HITCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::HITCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HITExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::HITEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HITReviewable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::HITREVIEWABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HITExtended", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::HITEXTENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HITDisposed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::HITDISPOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::PING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventType::ASSIGNMENTACCEPTED:
            val = "AssignmentAccepted";
            break;
        case eOAIEventType::ASSIGNMENTABANDONED:
            val = "AssignmentAbandoned";
            break;
        case eOAIEventType::ASSIGNMENTRETURNED:
            val = "AssignmentReturned";
            break;
        case eOAIEventType::ASSIGNMENTSUBMITTED:
            val = "AssignmentSubmitted";
            break;
        case eOAIEventType::ASSIGNMENTREJECTED:
            val = "AssignmentRejected";
            break;
        case eOAIEventType::ASSIGNMENTAPPROVED:
            val = "AssignmentApproved";
            break;
        case eOAIEventType::HITCREATED:
            val = "HITCreated";
            break;
        case eOAIEventType::HITEXPIRED:
            val = "HITExpired";
            break;
        case eOAIEventType::HITREVIEWABLE:
            val = "HITReviewable";
            break;
        case eOAIEventType::HITEXTENDED:
            val = "HITExtended";
            break;
        case eOAIEventType::HITDISPOSED:
            val = "HITDisposed";
            break;
        case eOAIEventType::PING:
            val = "Ping";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventType::eOAIEventType OAIEventType::getValue() const {
    return m_value;
}

void OAIEventType::setValue(const OAIEventType::eOAIEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
