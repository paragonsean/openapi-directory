/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQualification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQualification::OAIQualification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQualification::OAIQualification() {
    this->initializeModel();
}

OAIQualification::~OAIQualification() {}

void OAIQualification::initializeModel() {

    m_qualification_type_id_isSet = false;
    m_qualification_type_id_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;

    m_grant_time_isSet = false;
    m_grant_time_isValid = false;

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_locale_value_isSet = false;
    m_locale_value_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIQualification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQualification::fromJsonObject(QJsonObject json) {

    m_qualification_type_id_isValid = ::OpenAPI::fromJsonValue(m_qualification_type_id, json[QString("QualificationTypeId")]);
    m_qualification_type_id_isSet = !json[QString("QualificationTypeId")].isNull() && m_qualification_type_id_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("WorkerId")]);
    m_worker_id_isSet = !json[QString("WorkerId")].isNull() && m_worker_id_isValid;

    m_grant_time_isValid = ::OpenAPI::fromJsonValue(m_grant_time, json[QString("GrantTime")]);
    m_grant_time_isSet = !json[QString("GrantTime")].isNull() && m_grant_time_isValid;

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("IntegerValue")]);
    m_integer_value_isSet = !json[QString("IntegerValue")].isNull() && m_integer_value_isValid;

    m_locale_value_isValid = ::OpenAPI::fromJsonValue(m_locale_value, json[QString("LocaleValue")]);
    m_locale_value_isSet = !json[QString("LocaleValue")].isNull() && m_locale_value_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIQualification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQualification::asJsonObject() const {
    QJsonObject obj;
    if (m_qualification_type_id_isSet) {
        obj.insert(QString("QualificationTypeId"), ::OpenAPI::toJsonValue(m_qualification_type_id));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("WorkerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    if (m_grant_time_isSet) {
        obj.insert(QString("GrantTime"), ::OpenAPI::toJsonValue(m_grant_time));
    }
    if (m_integer_value_isSet) {
        obj.insert(QString("IntegerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_locale_value.isSet()) {
        obj.insert(QString("LocaleValue"), ::OpenAPI::toJsonValue(m_locale_value));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIQualification::getQualificationTypeId() const {
    return m_qualification_type_id;
}
void OAIQualification::setQualificationTypeId(const QString &qualification_type_id) {
    m_qualification_type_id = qualification_type_id;
    m_qualification_type_id_isSet = true;
}

bool OAIQualification::is_qualification_type_id_Set() const{
    return m_qualification_type_id_isSet;
}

bool OAIQualification::is_qualification_type_id_Valid() const{
    return m_qualification_type_id_isValid;
}

QString OAIQualification::getWorkerId() const {
    return m_worker_id;
}
void OAIQualification::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAIQualification::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAIQualification::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

QDateTime OAIQualification::getGrantTime() const {
    return m_grant_time;
}
void OAIQualification::setGrantTime(const QDateTime &grant_time) {
    m_grant_time = grant_time;
    m_grant_time_isSet = true;
}

bool OAIQualification::is_grant_time_Set() const{
    return m_grant_time_isSet;
}

bool OAIQualification::is_grant_time_Valid() const{
    return m_grant_time_isValid;
}

qint32 OAIQualification::getIntegerValue() const {
    return m_integer_value;
}
void OAIQualification::setIntegerValue(const qint32 &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIQualification::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIQualification::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

OAILocale OAIQualification::getLocaleValue() const {
    return m_locale_value;
}
void OAIQualification::setLocaleValue(const OAILocale &locale_value) {
    m_locale_value = locale_value;
    m_locale_value_isSet = true;
}

bool OAIQualification::is_locale_value_Set() const{
    return m_locale_value_isSet;
}

bool OAIQualification::is_locale_value_Valid() const{
    return m_locale_value_isValid;
}

OAIQualificationStatus OAIQualification::getStatus() const {
    return m_status;
}
void OAIQualification::setStatus(const OAIQualificationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQualification::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQualification::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIQualification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_qualification_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQualification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
