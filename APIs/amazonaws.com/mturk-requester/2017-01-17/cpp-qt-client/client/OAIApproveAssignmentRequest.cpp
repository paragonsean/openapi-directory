/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApproveAssignmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApproveAssignmentRequest::OAIApproveAssignmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApproveAssignmentRequest::OAIApproveAssignmentRequest() {
    this->initializeModel();
}

OAIApproveAssignmentRequest::~OAIApproveAssignmentRequest() {}

void OAIApproveAssignmentRequest::initializeModel() {

    m_assignment_id_isSet = false;
    m_assignment_id_isValid = false;

    m_requester_feedback_isSet = false;
    m_requester_feedback_isValid = false;

    m_override_rejection_isSet = false;
    m_override_rejection_isValid = false;
}

void OAIApproveAssignmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApproveAssignmentRequest::fromJsonObject(QJsonObject json) {

    m_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_assignment_id, json[QString("AssignmentId")]);
    m_assignment_id_isSet = !json[QString("AssignmentId")].isNull() && m_assignment_id_isValid;

    m_requester_feedback_isValid = ::OpenAPI::fromJsonValue(m_requester_feedback, json[QString("RequesterFeedback")]);
    m_requester_feedback_isSet = !json[QString("RequesterFeedback")].isNull() && m_requester_feedback_isValid;

    m_override_rejection_isValid = ::OpenAPI::fromJsonValue(m_override_rejection, json[QString("OverrideRejection")]);
    m_override_rejection_isSet = !json[QString("OverrideRejection")].isNull() && m_override_rejection_isValid;
}

QString OAIApproveAssignmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApproveAssignmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_id_isSet) {
        obj.insert(QString("AssignmentId"), ::OpenAPI::toJsonValue(m_assignment_id));
    }
    if (m_requester_feedback_isSet) {
        obj.insert(QString("RequesterFeedback"), ::OpenAPI::toJsonValue(m_requester_feedback));
    }
    if (m_override_rejection_isSet) {
        obj.insert(QString("OverrideRejection"), ::OpenAPI::toJsonValue(m_override_rejection));
    }
    return obj;
}

QString OAIApproveAssignmentRequest::getAssignmentId() const {
    return m_assignment_id;
}
void OAIApproveAssignmentRequest::setAssignmentId(const QString &assignment_id) {
    m_assignment_id = assignment_id;
    m_assignment_id_isSet = true;
}

bool OAIApproveAssignmentRequest::is_assignment_id_Set() const{
    return m_assignment_id_isSet;
}

bool OAIApproveAssignmentRequest::is_assignment_id_Valid() const{
    return m_assignment_id_isValid;
}

QString OAIApproveAssignmentRequest::getRequesterFeedback() const {
    return m_requester_feedback;
}
void OAIApproveAssignmentRequest::setRequesterFeedback(const QString &requester_feedback) {
    m_requester_feedback = requester_feedback;
    m_requester_feedback_isSet = true;
}

bool OAIApproveAssignmentRequest::is_requester_feedback_Set() const{
    return m_requester_feedback_isSet;
}

bool OAIApproveAssignmentRequest::is_requester_feedback_Valid() const{
    return m_requester_feedback_isValid;
}

bool OAIApproveAssignmentRequest::getOverrideRejection() const {
    return m_override_rejection;
}
void OAIApproveAssignmentRequest::setOverrideRejection(const bool &override_rejection) {
    m_override_rejection = override_rejection;
    m_override_rejection_isSet = true;
}

bool OAIApproveAssignmentRequest::is_override_rejection_Set() const{
    return m_override_rejection_isSet;
}

bool OAIApproveAssignmentRequest::is_override_rejection_Valid() const{
    return m_override_rejection_isValid;
}

bool OAIApproveAssignmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_rejection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApproveAssignmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assignment_id_isValid && true;
}

} // namespace OpenAPI
