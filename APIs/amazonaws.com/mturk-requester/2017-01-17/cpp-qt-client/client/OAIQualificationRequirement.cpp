/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQualificationRequirement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQualificationRequirement::OAIQualificationRequirement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQualificationRequirement::OAIQualificationRequirement() {
    this->initializeModel();
}

OAIQualificationRequirement::~OAIQualificationRequirement() {}

void OAIQualificationRequirement::initializeModel() {

    m_qualification_type_id_isSet = false;
    m_qualification_type_id_isValid = false;

    m_comparator_isSet = false;
    m_comparator_isValid = false;

    m_integer_values_isSet = false;
    m_integer_values_isValid = false;

    m_locale_values_isSet = false;
    m_locale_values_isValid = false;

    m_required_to_preview_isSet = false;
    m_required_to_preview_isValid = false;

    m_actions_guarded_isSet = false;
    m_actions_guarded_isValid = false;
}

void OAIQualificationRequirement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQualificationRequirement::fromJsonObject(QJsonObject json) {

    m_qualification_type_id_isValid = ::OpenAPI::fromJsonValue(m_qualification_type_id, json[QString("QualificationTypeId")]);
    m_qualification_type_id_isSet = !json[QString("QualificationTypeId")].isNull() && m_qualification_type_id_isValid;

    m_comparator_isValid = ::OpenAPI::fromJsonValue(m_comparator, json[QString("Comparator")]);
    m_comparator_isSet = !json[QString("Comparator")].isNull() && m_comparator_isValid;

    m_integer_values_isValid = ::OpenAPI::fromJsonValue(m_integer_values, json[QString("IntegerValues")]);
    m_integer_values_isSet = !json[QString("IntegerValues")].isNull() && m_integer_values_isValid;

    m_locale_values_isValid = ::OpenAPI::fromJsonValue(m_locale_values, json[QString("LocaleValues")]);
    m_locale_values_isSet = !json[QString("LocaleValues")].isNull() && m_locale_values_isValid;

    m_required_to_preview_isValid = ::OpenAPI::fromJsonValue(m_required_to_preview, json[QString("RequiredToPreview")]);
    m_required_to_preview_isSet = !json[QString("RequiredToPreview")].isNull() && m_required_to_preview_isValid;

    m_actions_guarded_isValid = ::OpenAPI::fromJsonValue(m_actions_guarded, json[QString("ActionsGuarded")]);
    m_actions_guarded_isSet = !json[QString("ActionsGuarded")].isNull() && m_actions_guarded_isValid;
}

QString OAIQualificationRequirement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQualificationRequirement::asJsonObject() const {
    QJsonObject obj;
    if (m_qualification_type_id_isSet) {
        obj.insert(QString("QualificationTypeId"), ::OpenAPI::toJsonValue(m_qualification_type_id));
    }
    if (m_comparator.isSet()) {
        obj.insert(QString("Comparator"), ::OpenAPI::toJsonValue(m_comparator));
    }
    if (m_integer_values.isSet()) {
        obj.insert(QString("IntegerValues"), ::OpenAPI::toJsonValue(m_integer_values));
    }
    if (m_locale_values.isSet()) {
        obj.insert(QString("LocaleValues"), ::OpenAPI::toJsonValue(m_locale_values));
    }
    if (m_required_to_preview_isSet) {
        obj.insert(QString("RequiredToPreview"), ::OpenAPI::toJsonValue(m_required_to_preview));
    }
    if (m_actions_guarded.isSet()) {
        obj.insert(QString("ActionsGuarded"), ::OpenAPI::toJsonValue(m_actions_guarded));
    }
    return obj;
}

QString OAIQualificationRequirement::getQualificationTypeId() const {
    return m_qualification_type_id;
}
void OAIQualificationRequirement::setQualificationTypeId(const QString &qualification_type_id) {
    m_qualification_type_id = qualification_type_id;
    m_qualification_type_id_isSet = true;
}

bool OAIQualificationRequirement::is_qualification_type_id_Set() const{
    return m_qualification_type_id_isSet;
}

bool OAIQualificationRequirement::is_qualification_type_id_Valid() const{
    return m_qualification_type_id_isValid;
}

OAIComparator OAIQualificationRequirement::getComparator() const {
    return m_comparator;
}
void OAIQualificationRequirement::setComparator(const OAIComparator &comparator) {
    m_comparator = comparator;
    m_comparator_isSet = true;
}

bool OAIQualificationRequirement::is_comparator_Set() const{
    return m_comparator_isSet;
}

bool OAIQualificationRequirement::is_comparator_Valid() const{
    return m_comparator_isValid;
}

QList OAIQualificationRequirement::getIntegerValues() const {
    return m_integer_values;
}
void OAIQualificationRequirement::setIntegerValues(const QList &integer_values) {
    m_integer_values = integer_values;
    m_integer_values_isSet = true;
}

bool OAIQualificationRequirement::is_integer_values_Set() const{
    return m_integer_values_isSet;
}

bool OAIQualificationRequirement::is_integer_values_Valid() const{
    return m_integer_values_isValid;
}

QList OAIQualificationRequirement::getLocaleValues() const {
    return m_locale_values;
}
void OAIQualificationRequirement::setLocaleValues(const QList &locale_values) {
    m_locale_values = locale_values;
    m_locale_values_isSet = true;
}

bool OAIQualificationRequirement::is_locale_values_Set() const{
    return m_locale_values_isSet;
}

bool OAIQualificationRequirement::is_locale_values_Valid() const{
    return m_locale_values_isValid;
}

bool OAIQualificationRequirement::getRequiredToPreview() const {
    return m_required_to_preview;
}
void OAIQualificationRequirement::setRequiredToPreview(const bool &required_to_preview) {
    m_required_to_preview = required_to_preview;
    m_required_to_preview_isSet = true;
}

bool OAIQualificationRequirement::is_required_to_preview_Set() const{
    return m_required_to_preview_isSet;
}

bool OAIQualificationRequirement::is_required_to_preview_Valid() const{
    return m_required_to_preview_isValid;
}

OAIHITAccessActions OAIQualificationRequirement::getActionsGuarded() const {
    return m_actions_guarded;
}
void OAIQualificationRequirement::setActionsGuarded(const OAIHITAccessActions &actions_guarded) {
    m_actions_guarded = actions_guarded;
    m_actions_guarded_isSet = true;
}

bool OAIQualificationRequirement::is_actions_guarded_Set() const{
    return m_actions_guarded_isSet;
}

bool OAIQualificationRequirement::is_actions_guarded_Valid() const{
    return m_actions_guarded_isValid;
}

bool OAIQualificationRequirement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_qualification_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_to_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_guarded.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQualificationRequirement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_qualification_type_id_isValid && m_comparator_isValid && true;
}

} // namespace OpenAPI
