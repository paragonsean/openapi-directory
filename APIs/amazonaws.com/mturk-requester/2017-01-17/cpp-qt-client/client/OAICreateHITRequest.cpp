/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateHITRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateHITRequest::OAICreateHITRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateHITRequest::OAICreateHITRequest() {
    this->initializeModel();
}

OAICreateHITRequest::~OAICreateHITRequest() {}

void OAICreateHITRequest::initializeModel() {

    m_max_assignments_isSet = false;
    m_max_assignments_isValid = false;

    m_auto_approval_delay_in_seconds_isSet = false;
    m_auto_approval_delay_in_seconds_isValid = false;

    m_lifetime_in_seconds_isSet = false;
    m_lifetime_in_seconds_isValid = false;

    m_assignment_duration_in_seconds_isSet = false;
    m_assignment_duration_in_seconds_isValid = false;

    m_reward_isSet = false;
    m_reward_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_requester_annotation_isSet = false;
    m_requester_annotation_isValid = false;

    m_qualification_requirements_isSet = false;
    m_qualification_requirements_isValid = false;

    m_unique_request_token_isSet = false;
    m_unique_request_token_isValid = false;

    m_assignment_review_policy_isSet = false;
    m_assignment_review_policy_isValid = false;

    m_hit_review_policy_isSet = false;
    m_hit_review_policy_isValid = false;

    m_hit_layout_id_isSet = false;
    m_hit_layout_id_isValid = false;

    m_hit_layout_parameters_isSet = false;
    m_hit_layout_parameters_isValid = false;
}

void OAICreateHITRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateHITRequest::fromJsonObject(QJsonObject json) {

    m_max_assignments_isValid = ::OpenAPI::fromJsonValue(m_max_assignments, json[QString("MaxAssignments")]);
    m_max_assignments_isSet = !json[QString("MaxAssignments")].isNull() && m_max_assignments_isValid;

    m_auto_approval_delay_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_auto_approval_delay_in_seconds, json[QString("AutoApprovalDelayInSeconds")]);
    m_auto_approval_delay_in_seconds_isSet = !json[QString("AutoApprovalDelayInSeconds")].isNull() && m_auto_approval_delay_in_seconds_isValid;

    m_lifetime_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_lifetime_in_seconds, json[QString("LifetimeInSeconds")]);
    m_lifetime_in_seconds_isSet = !json[QString("LifetimeInSeconds")].isNull() && m_lifetime_in_seconds_isValid;

    m_assignment_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_assignment_duration_in_seconds, json[QString("AssignmentDurationInSeconds")]);
    m_assignment_duration_in_seconds_isSet = !json[QString("AssignmentDurationInSeconds")].isNull() && m_assignment_duration_in_seconds_isValid;

    m_reward_isValid = ::OpenAPI::fromJsonValue(m_reward, json[QString("Reward")]);
    m_reward_isSet = !json[QString("Reward")].isNull() && m_reward_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("Question")]);
    m_question_isSet = !json[QString("Question")].isNull() && m_question_isValid;

    m_requester_annotation_isValid = ::OpenAPI::fromJsonValue(m_requester_annotation, json[QString("RequesterAnnotation")]);
    m_requester_annotation_isSet = !json[QString("RequesterAnnotation")].isNull() && m_requester_annotation_isValid;

    m_qualification_requirements_isValid = ::OpenAPI::fromJsonValue(m_qualification_requirements, json[QString("QualificationRequirements")]);
    m_qualification_requirements_isSet = !json[QString("QualificationRequirements")].isNull() && m_qualification_requirements_isValid;

    m_unique_request_token_isValid = ::OpenAPI::fromJsonValue(m_unique_request_token, json[QString("UniqueRequestToken")]);
    m_unique_request_token_isSet = !json[QString("UniqueRequestToken")].isNull() && m_unique_request_token_isValid;

    m_assignment_review_policy_isValid = ::OpenAPI::fromJsonValue(m_assignment_review_policy, json[QString("AssignmentReviewPolicy")]);
    m_assignment_review_policy_isSet = !json[QString("AssignmentReviewPolicy")].isNull() && m_assignment_review_policy_isValid;

    m_hit_review_policy_isValid = ::OpenAPI::fromJsonValue(m_hit_review_policy, json[QString("HITReviewPolicy")]);
    m_hit_review_policy_isSet = !json[QString("HITReviewPolicy")].isNull() && m_hit_review_policy_isValid;

    m_hit_layout_id_isValid = ::OpenAPI::fromJsonValue(m_hit_layout_id, json[QString("HITLayoutId")]);
    m_hit_layout_id_isSet = !json[QString("HITLayoutId")].isNull() && m_hit_layout_id_isValid;

    m_hit_layout_parameters_isValid = ::OpenAPI::fromJsonValue(m_hit_layout_parameters, json[QString("HITLayoutParameters")]);
    m_hit_layout_parameters_isSet = !json[QString("HITLayoutParameters")].isNull() && m_hit_layout_parameters_isValid;
}

QString OAICreateHITRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateHITRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_assignments_isSet) {
        obj.insert(QString("MaxAssignments"), ::OpenAPI::toJsonValue(m_max_assignments));
    }
    if (m_auto_approval_delay_in_seconds_isSet) {
        obj.insert(QString("AutoApprovalDelayInSeconds"), ::OpenAPI::toJsonValue(m_auto_approval_delay_in_seconds));
    }
    if (m_lifetime_in_seconds_isSet) {
        obj.insert(QString("LifetimeInSeconds"), ::OpenAPI::toJsonValue(m_lifetime_in_seconds));
    }
    if (m_assignment_duration_in_seconds_isSet) {
        obj.insert(QString("AssignmentDurationInSeconds"), ::OpenAPI::toJsonValue(m_assignment_duration_in_seconds));
    }
    if (m_reward_isSet) {
        obj.insert(QString("Reward"), ::OpenAPI::toJsonValue(m_reward));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_question_isSet) {
        obj.insert(QString("Question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_requester_annotation_isSet) {
        obj.insert(QString("RequesterAnnotation"), ::OpenAPI::toJsonValue(m_requester_annotation));
    }
    if (m_qualification_requirements.isSet()) {
        obj.insert(QString("QualificationRequirements"), ::OpenAPI::toJsonValue(m_qualification_requirements));
    }
    if (m_unique_request_token_isSet) {
        obj.insert(QString("UniqueRequestToken"), ::OpenAPI::toJsonValue(m_unique_request_token));
    }
    if (m_assignment_review_policy.isSet()) {
        obj.insert(QString("AssignmentReviewPolicy"), ::OpenAPI::toJsonValue(m_assignment_review_policy));
    }
    if (m_hit_review_policy.isSet()) {
        obj.insert(QString("HITReviewPolicy"), ::OpenAPI::toJsonValue(m_hit_review_policy));
    }
    if (m_hit_layout_id_isSet) {
        obj.insert(QString("HITLayoutId"), ::OpenAPI::toJsonValue(m_hit_layout_id));
    }
    if (m_hit_layout_parameters.isSet()) {
        obj.insert(QString("HITLayoutParameters"), ::OpenAPI::toJsonValue(m_hit_layout_parameters));
    }
    return obj;
}

qint32 OAICreateHITRequest::getMaxAssignments() const {
    return m_max_assignments;
}
void OAICreateHITRequest::setMaxAssignments(const qint32 &max_assignments) {
    m_max_assignments = max_assignments;
    m_max_assignments_isSet = true;
}

bool OAICreateHITRequest::is_max_assignments_Set() const{
    return m_max_assignments_isSet;
}

bool OAICreateHITRequest::is_max_assignments_Valid() const{
    return m_max_assignments_isValid;
}

qint32 OAICreateHITRequest::getAutoApprovalDelayInSeconds() const {
    return m_auto_approval_delay_in_seconds;
}
void OAICreateHITRequest::setAutoApprovalDelayInSeconds(const qint32 &auto_approval_delay_in_seconds) {
    m_auto_approval_delay_in_seconds = auto_approval_delay_in_seconds;
    m_auto_approval_delay_in_seconds_isSet = true;
}

bool OAICreateHITRequest::is_auto_approval_delay_in_seconds_Set() const{
    return m_auto_approval_delay_in_seconds_isSet;
}

bool OAICreateHITRequest::is_auto_approval_delay_in_seconds_Valid() const{
    return m_auto_approval_delay_in_seconds_isValid;
}

qint32 OAICreateHITRequest::getLifetimeInSeconds() const {
    return m_lifetime_in_seconds;
}
void OAICreateHITRequest::setLifetimeInSeconds(const qint32 &lifetime_in_seconds) {
    m_lifetime_in_seconds = lifetime_in_seconds;
    m_lifetime_in_seconds_isSet = true;
}

bool OAICreateHITRequest::is_lifetime_in_seconds_Set() const{
    return m_lifetime_in_seconds_isSet;
}

bool OAICreateHITRequest::is_lifetime_in_seconds_Valid() const{
    return m_lifetime_in_seconds_isValid;
}

qint32 OAICreateHITRequest::getAssignmentDurationInSeconds() const {
    return m_assignment_duration_in_seconds;
}
void OAICreateHITRequest::setAssignmentDurationInSeconds(const qint32 &assignment_duration_in_seconds) {
    m_assignment_duration_in_seconds = assignment_duration_in_seconds;
    m_assignment_duration_in_seconds_isSet = true;
}

bool OAICreateHITRequest::is_assignment_duration_in_seconds_Set() const{
    return m_assignment_duration_in_seconds_isSet;
}

bool OAICreateHITRequest::is_assignment_duration_in_seconds_Valid() const{
    return m_assignment_duration_in_seconds_isValid;
}

QString OAICreateHITRequest::getReward() const {
    return m_reward;
}
void OAICreateHITRequest::setReward(const QString &reward) {
    m_reward = reward;
    m_reward_isSet = true;
}

bool OAICreateHITRequest::is_reward_Set() const{
    return m_reward_isSet;
}

bool OAICreateHITRequest::is_reward_Valid() const{
    return m_reward_isValid;
}

QString OAICreateHITRequest::getTitle() const {
    return m_title;
}
void OAICreateHITRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateHITRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateHITRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICreateHITRequest::getKeywords() const {
    return m_keywords;
}
void OAICreateHITRequest::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICreateHITRequest::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICreateHITRequest::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAICreateHITRequest::getDescription() const {
    return m_description;
}
void OAICreateHITRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateHITRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateHITRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateHITRequest::getQuestion() const {
    return m_question;
}
void OAICreateHITRequest::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAICreateHITRequest::is_question_Set() const{
    return m_question_isSet;
}

bool OAICreateHITRequest::is_question_Valid() const{
    return m_question_isValid;
}

QString OAICreateHITRequest::getRequesterAnnotation() const {
    return m_requester_annotation;
}
void OAICreateHITRequest::setRequesterAnnotation(const QString &requester_annotation) {
    m_requester_annotation = requester_annotation;
    m_requester_annotation_isSet = true;
}

bool OAICreateHITRequest::is_requester_annotation_Set() const{
    return m_requester_annotation_isSet;
}

bool OAICreateHITRequest::is_requester_annotation_Valid() const{
    return m_requester_annotation_isValid;
}

QList OAICreateHITRequest::getQualificationRequirements() const {
    return m_qualification_requirements;
}
void OAICreateHITRequest::setQualificationRequirements(const QList &qualification_requirements) {
    m_qualification_requirements = qualification_requirements;
    m_qualification_requirements_isSet = true;
}

bool OAICreateHITRequest::is_qualification_requirements_Set() const{
    return m_qualification_requirements_isSet;
}

bool OAICreateHITRequest::is_qualification_requirements_Valid() const{
    return m_qualification_requirements_isValid;
}

QString OAICreateHITRequest::getUniqueRequestToken() const {
    return m_unique_request_token;
}
void OAICreateHITRequest::setUniqueRequestToken(const QString &unique_request_token) {
    m_unique_request_token = unique_request_token;
    m_unique_request_token_isSet = true;
}

bool OAICreateHITRequest::is_unique_request_token_Set() const{
    return m_unique_request_token_isSet;
}

bool OAICreateHITRequest::is_unique_request_token_Valid() const{
    return m_unique_request_token_isValid;
}

OAICreateHITRequest_AssignmentReviewPolicy OAICreateHITRequest::getAssignmentReviewPolicy() const {
    return m_assignment_review_policy;
}
void OAICreateHITRequest::setAssignmentReviewPolicy(const OAICreateHITRequest_AssignmentReviewPolicy &assignment_review_policy) {
    m_assignment_review_policy = assignment_review_policy;
    m_assignment_review_policy_isSet = true;
}

bool OAICreateHITRequest::is_assignment_review_policy_Set() const{
    return m_assignment_review_policy_isSet;
}

bool OAICreateHITRequest::is_assignment_review_policy_Valid() const{
    return m_assignment_review_policy_isValid;
}

OAICreateHITRequest_HITReviewPolicy OAICreateHITRequest::getHitReviewPolicy() const {
    return m_hit_review_policy;
}
void OAICreateHITRequest::setHitReviewPolicy(const OAICreateHITRequest_HITReviewPolicy &hit_review_policy) {
    m_hit_review_policy = hit_review_policy;
    m_hit_review_policy_isSet = true;
}

bool OAICreateHITRequest::is_hit_review_policy_Set() const{
    return m_hit_review_policy_isSet;
}

bool OAICreateHITRequest::is_hit_review_policy_Valid() const{
    return m_hit_review_policy_isValid;
}

QString OAICreateHITRequest::getHitLayoutId() const {
    return m_hit_layout_id;
}
void OAICreateHITRequest::setHitLayoutId(const QString &hit_layout_id) {
    m_hit_layout_id = hit_layout_id;
    m_hit_layout_id_isSet = true;
}

bool OAICreateHITRequest::is_hit_layout_id_Set() const{
    return m_hit_layout_id_isSet;
}

bool OAICreateHITRequest::is_hit_layout_id_Valid() const{
    return m_hit_layout_id_isValid;
}

QList OAICreateHITRequest::getHitLayoutParameters() const {
    return m_hit_layout_parameters;
}
void OAICreateHITRequest::setHitLayoutParameters(const QList &hit_layout_parameters) {
    m_hit_layout_parameters = hit_layout_parameters;
    m_hit_layout_parameters_isSet = true;
}

bool OAICreateHITRequest::is_hit_layout_parameters_Set() const{
    return m_hit_layout_parameters_isSet;
}

bool OAICreateHITRequest::is_hit_layout_parameters_Valid() const{
    return m_hit_layout_parameters_isValid;
}

bool OAICreateHITRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_assignments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_approval_delay_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualification_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_review_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_review_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_layout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_layout_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateHITRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lifetime_in_seconds_isValid && m_assignment_duration_in_seconds_isValid && m_reward_isValid && m_title_isValid && m_description_isValid && true;
}

} // namespace OpenAPI
