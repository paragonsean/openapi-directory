/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyParameter::OAIPolicyParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyParameter::OAIPolicyParameter() {
    this->initializeModel();
}

OAIPolicyParameter::~OAIPolicyParameter() {}

void OAIPolicyParameter::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_map_entries_isSet = false;
    m_map_entries_isValid = false;
}

void OAIPolicyParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyParameter::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_map_entries_isValid = ::OpenAPI::fromJsonValue(m_map_entries, json[QString("MapEntries")]);
    m_map_entries_isSet = !json[QString("MapEntries")].isNull() && m_map_entries_isValid;
}

QString OAIPolicyParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_map_entries.isSet()) {
        obj.insert(QString("MapEntries"), ::OpenAPI::toJsonValue(m_map_entries));
    }
    return obj;
}

QString OAIPolicyParameter::getKey() const {
    return m_key;
}
void OAIPolicyParameter::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPolicyParameter::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPolicyParameter::is_key_Valid() const{
    return m_key_isValid;
}

QList OAIPolicyParameter::getValues() const {
    return m_values;
}
void OAIPolicyParameter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPolicyParameter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPolicyParameter::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIPolicyParameter::getMapEntries() const {
    return m_map_entries;
}
void OAIPolicyParameter::setMapEntries(const QList &map_entries) {
    m_map_entries = map_entries;
    m_map_entries_isSet = true;
}

bool OAIPolicyParameter::is_map_entries_Set() const{
    return m_map_entries_isSet;
}

bool OAIPolicyParameter::is_map_entries_Valid() const{
    return m_map_entries_isValid;
}

bool OAIPolicyParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
