/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListQualificationTypesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListQualificationTypesRequest::OAIListQualificationTypesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListQualificationTypesRequest::OAIListQualificationTypesRequest() {
    this->initializeModel();
}

OAIListQualificationTypesRequest::~OAIListQualificationTypesRequest() {}

void OAIListQualificationTypesRequest::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;

    m_must_be_requestable_isSet = false;
    m_must_be_requestable_isValid = false;

    m_must_be_owned_by_caller_isSet = false;
    m_must_be_owned_by_caller_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListQualificationTypesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListQualificationTypesRequest::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("Query")]);
    m_query_isSet = !json[QString("Query")].isNull() && m_query_isValid;

    m_must_be_requestable_isValid = ::OpenAPI::fromJsonValue(m_must_be_requestable, json[QString("MustBeRequestable")]);
    m_must_be_requestable_isSet = !json[QString("MustBeRequestable")].isNull() && m_must_be_requestable_isValid;

    m_must_be_owned_by_caller_isValid = ::OpenAPI::fromJsonValue(m_must_be_owned_by_caller, json[QString("MustBeOwnedByCaller")]);
    m_must_be_owned_by_caller_isSet = !json[QString("MustBeOwnedByCaller")].isNull() && m_must_be_owned_by_caller_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListQualificationTypesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListQualificationTypesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_query_isSet) {
        obj.insert(QString("Query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_must_be_requestable_isSet) {
        obj.insert(QString("MustBeRequestable"), ::OpenAPI::toJsonValue(m_must_be_requestable));
    }
    if (m_must_be_owned_by_caller_isSet) {
        obj.insert(QString("MustBeOwnedByCaller"), ::OpenAPI::toJsonValue(m_must_be_owned_by_caller));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListQualificationTypesRequest::getQuery() const {
    return m_query;
}
void OAIListQualificationTypesRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIListQualificationTypesRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIListQualificationTypesRequest::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIListQualificationTypesRequest::getMustBeRequestable() const {
    return m_must_be_requestable;
}
void OAIListQualificationTypesRequest::setMustBeRequestable(const bool &must_be_requestable) {
    m_must_be_requestable = must_be_requestable;
    m_must_be_requestable_isSet = true;
}

bool OAIListQualificationTypesRequest::is_must_be_requestable_Set() const{
    return m_must_be_requestable_isSet;
}

bool OAIListQualificationTypesRequest::is_must_be_requestable_Valid() const{
    return m_must_be_requestable_isValid;
}

bool OAIListQualificationTypesRequest::getMustBeOwnedByCaller() const {
    return m_must_be_owned_by_caller;
}
void OAIListQualificationTypesRequest::setMustBeOwnedByCaller(const bool &must_be_owned_by_caller) {
    m_must_be_owned_by_caller = must_be_owned_by_caller;
    m_must_be_owned_by_caller_isSet = true;
}

bool OAIListQualificationTypesRequest::is_must_be_owned_by_caller_Set() const{
    return m_must_be_owned_by_caller_isSet;
}

bool OAIListQualificationTypesRequest::is_must_be_owned_by_caller_Valid() const{
    return m_must_be_owned_by_caller_isValid;
}

QString OAIListQualificationTypesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListQualificationTypesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListQualificationTypesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListQualificationTypesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListQualificationTypesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListQualificationTypesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListQualificationTypesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListQualificationTypesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListQualificationTypesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_be_requestable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_be_owned_by_caller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListQualificationTypesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_must_be_requestable_isValid && true;
}

} // namespace OpenAPI
