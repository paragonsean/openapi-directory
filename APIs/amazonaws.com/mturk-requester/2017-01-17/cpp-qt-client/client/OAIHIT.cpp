/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHIT.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHIT::OAIHIT(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHIT::OAIHIT() {
    this->initializeModel();
}

OAIHIT::~OAIHIT() {}

void OAIHIT::initializeModel() {

    m_hitid_isSet = false;
    m_hitid_isValid = false;

    m_hit_type_id_isSet = false;
    m_hit_type_id_isValid = false;

    m_hit_group_id_isSet = false;
    m_hit_group_id_isValid = false;

    m_hit_layout_id_isSet = false;
    m_hit_layout_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_hit_status_isSet = false;
    m_hit_status_isValid = false;

    m_max_assignments_isSet = false;
    m_max_assignments_isValid = false;

    m_reward_isSet = false;
    m_reward_isValid = false;

    m_auto_approval_delay_in_seconds_isSet = false;
    m_auto_approval_delay_in_seconds_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_assignment_duration_in_seconds_isSet = false;
    m_assignment_duration_in_seconds_isValid = false;

    m_requester_annotation_isSet = false;
    m_requester_annotation_isValid = false;

    m_qualification_requirements_isSet = false;
    m_qualification_requirements_isValid = false;

    m_hit_review_status_isSet = false;
    m_hit_review_status_isValid = false;

    m_number_of_assignments_pending_isSet = false;
    m_number_of_assignments_pending_isValid = false;

    m_number_of_assignments_available_isSet = false;
    m_number_of_assignments_available_isValid = false;

    m_number_of_assignments_completed_isSet = false;
    m_number_of_assignments_completed_isValid = false;
}

void OAIHIT::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHIT::fromJsonObject(QJsonObject json) {

    m_hitid_isValid = ::OpenAPI::fromJsonValue(m_hitid, json[QString("HITId")]);
    m_hitid_isSet = !json[QString("HITId")].isNull() && m_hitid_isValid;

    m_hit_type_id_isValid = ::OpenAPI::fromJsonValue(m_hit_type_id, json[QString("HITTypeId")]);
    m_hit_type_id_isSet = !json[QString("HITTypeId")].isNull() && m_hit_type_id_isValid;

    m_hit_group_id_isValid = ::OpenAPI::fromJsonValue(m_hit_group_id, json[QString("HITGroupId")]);
    m_hit_group_id_isSet = !json[QString("HITGroupId")].isNull() && m_hit_group_id_isValid;

    m_hit_layout_id_isValid = ::OpenAPI::fromJsonValue(m_hit_layout_id, json[QString("HITLayoutId")]);
    m_hit_layout_id_isSet = !json[QString("HITLayoutId")].isNull() && m_hit_layout_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("Question")]);
    m_question_isSet = !json[QString("Question")].isNull() && m_question_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_hit_status_isValid = ::OpenAPI::fromJsonValue(m_hit_status, json[QString("HITStatus")]);
    m_hit_status_isSet = !json[QString("HITStatus")].isNull() && m_hit_status_isValid;

    m_max_assignments_isValid = ::OpenAPI::fromJsonValue(m_max_assignments, json[QString("MaxAssignments")]);
    m_max_assignments_isSet = !json[QString("MaxAssignments")].isNull() && m_max_assignments_isValid;

    m_reward_isValid = ::OpenAPI::fromJsonValue(m_reward, json[QString("Reward")]);
    m_reward_isSet = !json[QString("Reward")].isNull() && m_reward_isValid;

    m_auto_approval_delay_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_auto_approval_delay_in_seconds, json[QString("AutoApprovalDelayInSeconds")]);
    m_auto_approval_delay_in_seconds_isSet = !json[QString("AutoApprovalDelayInSeconds")].isNull() && m_auto_approval_delay_in_seconds_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("Expiration")]);
    m_expiration_isSet = !json[QString("Expiration")].isNull() && m_expiration_isValid;

    m_assignment_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_assignment_duration_in_seconds, json[QString("AssignmentDurationInSeconds")]);
    m_assignment_duration_in_seconds_isSet = !json[QString("AssignmentDurationInSeconds")].isNull() && m_assignment_duration_in_seconds_isValid;

    m_requester_annotation_isValid = ::OpenAPI::fromJsonValue(m_requester_annotation, json[QString("RequesterAnnotation")]);
    m_requester_annotation_isSet = !json[QString("RequesterAnnotation")].isNull() && m_requester_annotation_isValid;

    m_qualification_requirements_isValid = ::OpenAPI::fromJsonValue(m_qualification_requirements, json[QString("QualificationRequirements")]);
    m_qualification_requirements_isSet = !json[QString("QualificationRequirements")].isNull() && m_qualification_requirements_isValid;

    m_hit_review_status_isValid = ::OpenAPI::fromJsonValue(m_hit_review_status, json[QString("HITReviewStatus")]);
    m_hit_review_status_isSet = !json[QString("HITReviewStatus")].isNull() && m_hit_review_status_isValid;

    m_number_of_assignments_pending_isValid = ::OpenAPI::fromJsonValue(m_number_of_assignments_pending, json[QString("NumberOfAssignmentsPending")]);
    m_number_of_assignments_pending_isSet = !json[QString("NumberOfAssignmentsPending")].isNull() && m_number_of_assignments_pending_isValid;

    m_number_of_assignments_available_isValid = ::OpenAPI::fromJsonValue(m_number_of_assignments_available, json[QString("NumberOfAssignmentsAvailable")]);
    m_number_of_assignments_available_isSet = !json[QString("NumberOfAssignmentsAvailable")].isNull() && m_number_of_assignments_available_isValid;

    m_number_of_assignments_completed_isValid = ::OpenAPI::fromJsonValue(m_number_of_assignments_completed, json[QString("NumberOfAssignmentsCompleted")]);
    m_number_of_assignments_completed_isSet = !json[QString("NumberOfAssignmentsCompleted")].isNull() && m_number_of_assignments_completed_isValid;
}

QString OAIHIT::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHIT::asJsonObject() const {
    QJsonObject obj;
    if (m_hitid_isSet) {
        obj.insert(QString("HITId"), ::OpenAPI::toJsonValue(m_hitid));
    }
    if (m_hit_type_id_isSet) {
        obj.insert(QString("HITTypeId"), ::OpenAPI::toJsonValue(m_hit_type_id));
    }
    if (m_hit_group_id_isSet) {
        obj.insert(QString("HITGroupId"), ::OpenAPI::toJsonValue(m_hit_group_id));
    }
    if (m_hit_layout_id_isSet) {
        obj.insert(QString("HITLayoutId"), ::OpenAPI::toJsonValue(m_hit_layout_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_question_isSet) {
        obj.insert(QString("Question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_hit_status.isSet()) {
        obj.insert(QString("HITStatus"), ::OpenAPI::toJsonValue(m_hit_status));
    }
    if (m_max_assignments_isSet) {
        obj.insert(QString("MaxAssignments"), ::OpenAPI::toJsonValue(m_max_assignments));
    }
    if (m_reward_isSet) {
        obj.insert(QString("Reward"), ::OpenAPI::toJsonValue(m_reward));
    }
    if (m_auto_approval_delay_in_seconds_isSet) {
        obj.insert(QString("AutoApprovalDelayInSeconds"), ::OpenAPI::toJsonValue(m_auto_approval_delay_in_seconds));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("Expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_assignment_duration_in_seconds_isSet) {
        obj.insert(QString("AssignmentDurationInSeconds"), ::OpenAPI::toJsonValue(m_assignment_duration_in_seconds));
    }
    if (m_requester_annotation_isSet) {
        obj.insert(QString("RequesterAnnotation"), ::OpenAPI::toJsonValue(m_requester_annotation));
    }
    if (m_qualification_requirements.isSet()) {
        obj.insert(QString("QualificationRequirements"), ::OpenAPI::toJsonValue(m_qualification_requirements));
    }
    if (m_hit_review_status.isSet()) {
        obj.insert(QString("HITReviewStatus"), ::OpenAPI::toJsonValue(m_hit_review_status));
    }
    if (m_number_of_assignments_pending_isSet) {
        obj.insert(QString("NumberOfAssignmentsPending"), ::OpenAPI::toJsonValue(m_number_of_assignments_pending));
    }
    if (m_number_of_assignments_available_isSet) {
        obj.insert(QString("NumberOfAssignmentsAvailable"), ::OpenAPI::toJsonValue(m_number_of_assignments_available));
    }
    if (m_number_of_assignments_completed_isSet) {
        obj.insert(QString("NumberOfAssignmentsCompleted"), ::OpenAPI::toJsonValue(m_number_of_assignments_completed));
    }
    return obj;
}

QString OAIHIT::getHitid() const {
    return m_hitid;
}
void OAIHIT::setHitid(const QString &hitid) {
    m_hitid = hitid;
    m_hitid_isSet = true;
}

bool OAIHIT::is_hitid_Set() const{
    return m_hitid_isSet;
}

bool OAIHIT::is_hitid_Valid() const{
    return m_hitid_isValid;
}

QString OAIHIT::getHitTypeId() const {
    return m_hit_type_id;
}
void OAIHIT::setHitTypeId(const QString &hit_type_id) {
    m_hit_type_id = hit_type_id;
    m_hit_type_id_isSet = true;
}

bool OAIHIT::is_hit_type_id_Set() const{
    return m_hit_type_id_isSet;
}

bool OAIHIT::is_hit_type_id_Valid() const{
    return m_hit_type_id_isValid;
}

QString OAIHIT::getHitGroupId() const {
    return m_hit_group_id;
}
void OAIHIT::setHitGroupId(const QString &hit_group_id) {
    m_hit_group_id = hit_group_id;
    m_hit_group_id_isSet = true;
}

bool OAIHIT::is_hit_group_id_Set() const{
    return m_hit_group_id_isSet;
}

bool OAIHIT::is_hit_group_id_Valid() const{
    return m_hit_group_id_isValid;
}

QString OAIHIT::getHitLayoutId() const {
    return m_hit_layout_id;
}
void OAIHIT::setHitLayoutId(const QString &hit_layout_id) {
    m_hit_layout_id = hit_layout_id;
    m_hit_layout_id_isSet = true;
}

bool OAIHIT::is_hit_layout_id_Set() const{
    return m_hit_layout_id_isSet;
}

bool OAIHIT::is_hit_layout_id_Valid() const{
    return m_hit_layout_id_isValid;
}

QDateTime OAIHIT::getCreationTime() const {
    return m_creation_time;
}
void OAIHIT::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIHIT::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIHIT::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIHIT::getTitle() const {
    return m_title;
}
void OAIHIT::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIHIT::is_title_Set() const{
    return m_title_isSet;
}

bool OAIHIT::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIHIT::getDescription() const {
    return m_description;
}
void OAIHIT::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHIT::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHIT::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIHIT::getQuestion() const {
    return m_question;
}
void OAIHIT::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIHIT::is_question_Set() const{
    return m_question_isSet;
}

bool OAIHIT::is_question_Valid() const{
    return m_question_isValid;
}

QString OAIHIT::getKeywords() const {
    return m_keywords;
}
void OAIHIT::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIHIT::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIHIT::is_keywords_Valid() const{
    return m_keywords_isValid;
}

OAIHITStatus OAIHIT::getHitStatus() const {
    return m_hit_status;
}
void OAIHIT::setHitStatus(const OAIHITStatus &hit_status) {
    m_hit_status = hit_status;
    m_hit_status_isSet = true;
}

bool OAIHIT::is_hit_status_Set() const{
    return m_hit_status_isSet;
}

bool OAIHIT::is_hit_status_Valid() const{
    return m_hit_status_isValid;
}

qint32 OAIHIT::getMaxAssignments() const {
    return m_max_assignments;
}
void OAIHIT::setMaxAssignments(const qint32 &max_assignments) {
    m_max_assignments = max_assignments;
    m_max_assignments_isSet = true;
}

bool OAIHIT::is_max_assignments_Set() const{
    return m_max_assignments_isSet;
}

bool OAIHIT::is_max_assignments_Valid() const{
    return m_max_assignments_isValid;
}

QString OAIHIT::getReward() const {
    return m_reward;
}
void OAIHIT::setReward(const QString &reward) {
    m_reward = reward;
    m_reward_isSet = true;
}

bool OAIHIT::is_reward_Set() const{
    return m_reward_isSet;
}

bool OAIHIT::is_reward_Valid() const{
    return m_reward_isValid;
}

qint32 OAIHIT::getAutoApprovalDelayInSeconds() const {
    return m_auto_approval_delay_in_seconds;
}
void OAIHIT::setAutoApprovalDelayInSeconds(const qint32 &auto_approval_delay_in_seconds) {
    m_auto_approval_delay_in_seconds = auto_approval_delay_in_seconds;
    m_auto_approval_delay_in_seconds_isSet = true;
}

bool OAIHIT::is_auto_approval_delay_in_seconds_Set() const{
    return m_auto_approval_delay_in_seconds_isSet;
}

bool OAIHIT::is_auto_approval_delay_in_seconds_Valid() const{
    return m_auto_approval_delay_in_seconds_isValid;
}

QDateTime OAIHIT::getExpiration() const {
    return m_expiration;
}
void OAIHIT::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIHIT::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIHIT::is_expiration_Valid() const{
    return m_expiration_isValid;
}

qint32 OAIHIT::getAssignmentDurationInSeconds() const {
    return m_assignment_duration_in_seconds;
}
void OAIHIT::setAssignmentDurationInSeconds(const qint32 &assignment_duration_in_seconds) {
    m_assignment_duration_in_seconds = assignment_duration_in_seconds;
    m_assignment_duration_in_seconds_isSet = true;
}

bool OAIHIT::is_assignment_duration_in_seconds_Set() const{
    return m_assignment_duration_in_seconds_isSet;
}

bool OAIHIT::is_assignment_duration_in_seconds_Valid() const{
    return m_assignment_duration_in_seconds_isValid;
}

QString OAIHIT::getRequesterAnnotation() const {
    return m_requester_annotation;
}
void OAIHIT::setRequesterAnnotation(const QString &requester_annotation) {
    m_requester_annotation = requester_annotation;
    m_requester_annotation_isSet = true;
}

bool OAIHIT::is_requester_annotation_Set() const{
    return m_requester_annotation_isSet;
}

bool OAIHIT::is_requester_annotation_Valid() const{
    return m_requester_annotation_isValid;
}

QList OAIHIT::getQualificationRequirements() const {
    return m_qualification_requirements;
}
void OAIHIT::setQualificationRequirements(const QList &qualification_requirements) {
    m_qualification_requirements = qualification_requirements;
    m_qualification_requirements_isSet = true;
}

bool OAIHIT::is_qualification_requirements_Set() const{
    return m_qualification_requirements_isSet;
}

bool OAIHIT::is_qualification_requirements_Valid() const{
    return m_qualification_requirements_isValid;
}

OAIHITReviewStatus OAIHIT::getHitReviewStatus() const {
    return m_hit_review_status;
}
void OAIHIT::setHitReviewStatus(const OAIHITReviewStatus &hit_review_status) {
    m_hit_review_status = hit_review_status;
    m_hit_review_status_isSet = true;
}

bool OAIHIT::is_hit_review_status_Set() const{
    return m_hit_review_status_isSet;
}

bool OAIHIT::is_hit_review_status_Valid() const{
    return m_hit_review_status_isValid;
}

qint32 OAIHIT::getNumberOfAssignmentsPending() const {
    return m_number_of_assignments_pending;
}
void OAIHIT::setNumberOfAssignmentsPending(const qint32 &number_of_assignments_pending) {
    m_number_of_assignments_pending = number_of_assignments_pending;
    m_number_of_assignments_pending_isSet = true;
}

bool OAIHIT::is_number_of_assignments_pending_Set() const{
    return m_number_of_assignments_pending_isSet;
}

bool OAIHIT::is_number_of_assignments_pending_Valid() const{
    return m_number_of_assignments_pending_isValid;
}

qint32 OAIHIT::getNumberOfAssignmentsAvailable() const {
    return m_number_of_assignments_available;
}
void OAIHIT::setNumberOfAssignmentsAvailable(const qint32 &number_of_assignments_available) {
    m_number_of_assignments_available = number_of_assignments_available;
    m_number_of_assignments_available_isSet = true;
}

bool OAIHIT::is_number_of_assignments_available_Set() const{
    return m_number_of_assignments_available_isSet;
}

bool OAIHIT::is_number_of_assignments_available_Valid() const{
    return m_number_of_assignments_available_isValid;
}

qint32 OAIHIT::getNumberOfAssignmentsCompleted() const {
    return m_number_of_assignments_completed;
}
void OAIHIT::setNumberOfAssignmentsCompleted(const qint32 &number_of_assignments_completed) {
    m_number_of_assignments_completed = number_of_assignments_completed;
    m_number_of_assignments_completed_isSet = true;
}

bool OAIHIT::is_number_of_assignments_completed_Set() const{
    return m_number_of_assignments_completed_isSet;
}

bool OAIHIT::is_number_of_assignments_completed_Valid() const{
    return m_number_of_assignments_completed_isValid;
}

bool OAIHIT::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hitid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_layout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_assignments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_approval_delay_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualification_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_review_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_assignments_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_assignments_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_assignments_completed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHIT::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
