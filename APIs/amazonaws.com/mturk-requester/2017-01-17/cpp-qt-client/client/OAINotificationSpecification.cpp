/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationSpecification::OAINotificationSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationSpecification::OAINotificationSpecification() {
    this->initializeModel();
}

OAINotificationSpecification::~OAINotificationSpecification() {}

void OAINotificationSpecification::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;
}

void OAINotificationSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationSpecification::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("Transport")]);
    m_transport_isSet = !json[QString("Transport")].isNull() && m_transport_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("EventTypes")]);
    m_event_types_isSet = !json[QString("EventTypes")].isNull() && m_event_types_isValid;
}

QString OAINotificationSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_transport.isSet()) {
        obj.insert(QString("Transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_event_types.isSet()) {
        obj.insert(QString("EventTypes"), ::OpenAPI::toJsonValue(m_event_types));
    }
    return obj;
}

QString OAINotificationSpecification::getDestination() const {
    return m_destination;
}
void OAINotificationSpecification::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAINotificationSpecification::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAINotificationSpecification::is_destination_Valid() const{
    return m_destination_isValid;
}

OAINotificationTransport OAINotificationSpecification::getTransport() const {
    return m_transport;
}
void OAINotificationSpecification::setTransport(const OAINotificationTransport &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAINotificationSpecification::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAINotificationSpecification::is_transport_Valid() const{
    return m_transport_isValid;
}

QString OAINotificationSpecification::getVersion() const {
    return m_version;
}
void OAINotificationSpecification::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINotificationSpecification::is_version_Set() const{
    return m_version_isSet;
}

bool OAINotificationSpecification::is_version_Valid() const{
    return m_version_isValid;
}

QList OAINotificationSpecification::getEventTypes() const {
    return m_event_types;
}
void OAINotificationSpecification::setEventTypes(const QList &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAINotificationSpecification::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAINotificationSpecification::is_event_types_Valid() const{
    return m_event_types_isValid;
}

bool OAINotificationSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && m_transport_isValid && m_version_isValid && m_event_types_isValid && true;
}

} // namespace OpenAPI
