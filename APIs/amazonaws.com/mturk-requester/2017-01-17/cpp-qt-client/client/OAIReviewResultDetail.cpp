/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviewResultDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReviewResultDetail::OAIReviewResultDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReviewResultDetail::OAIReviewResultDetail() {
    this->initializeModel();
}

OAIReviewResultDetail::~OAIReviewResultDetail() {}

void OAIReviewResultDetail::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_type_isSet = false;
    m_subject_type_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIReviewResultDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReviewResultDetail::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("ActionId")]);
    m_action_id_isSet = !json[QString("ActionId")].isNull() && m_action_id_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("SubjectId")]);
    m_subject_id_isSet = !json[QString("SubjectId")].isNull() && m_subject_id_isValid;

    m_subject_type_isValid = ::OpenAPI::fromJsonValue(m_subject_type, json[QString("SubjectType")]);
    m_subject_type_isSet = !json[QString("SubjectType")].isNull() && m_subject_type_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIReviewResultDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReviewResultDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("ActionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("SubjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_type_isSet) {
        obj.insert(QString("SubjectType"), ::OpenAPI::toJsonValue(m_subject_type));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIReviewResultDetail::getActionId() const {
    return m_action_id;
}
void OAIReviewResultDetail::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIReviewResultDetail::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIReviewResultDetail::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIReviewResultDetail::getSubjectId() const {
    return m_subject_id;
}
void OAIReviewResultDetail::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIReviewResultDetail::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIReviewResultDetail::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIReviewResultDetail::getSubjectType() const {
    return m_subject_type;
}
void OAIReviewResultDetail::setSubjectType(const QString &subject_type) {
    m_subject_type = subject_type;
    m_subject_type_isSet = true;
}

bool OAIReviewResultDetail::is_subject_type_Set() const{
    return m_subject_type_isSet;
}

bool OAIReviewResultDetail::is_subject_type_Valid() const{
    return m_subject_type_isValid;
}

QString OAIReviewResultDetail::getQuestionId() const {
    return m_question_id;
}
void OAIReviewResultDetail::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIReviewResultDetail::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIReviewResultDetail::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIReviewResultDetail::getKey() const {
    return m_key;
}
void OAIReviewResultDetail::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIReviewResultDetail::is_key_Set() const{
    return m_key_isSet;
}

bool OAIReviewResultDetail::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIReviewResultDetail::getValue() const {
    return m_value;
}
void OAIReviewResultDetail::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIReviewResultDetail::is_value_Set() const{
    return m_value_isSet;
}

bool OAIReviewResultDetail::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIReviewResultDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReviewResultDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
