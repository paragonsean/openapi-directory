/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListQualificationTypesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListQualificationTypesResponse::OAIListQualificationTypesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListQualificationTypesResponse::OAIListQualificationTypesResponse() {
    this->initializeModel();
}

OAIListQualificationTypesResponse::~OAIListQualificationTypesResponse() {}

void OAIListQualificationTypesResponse::initializeModel() {

    m_num_results_isSet = false;
    m_num_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_qualification_types_isSet = false;
    m_qualification_types_isValid = false;
}

void OAIListQualificationTypesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListQualificationTypesResponse::fromJsonObject(QJsonObject json) {

    m_num_results_isValid = ::OpenAPI::fromJsonValue(m_num_results, json[QString("NumResults")]);
    m_num_results_isSet = !json[QString("NumResults")].isNull() && m_num_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_qualification_types_isValid = ::OpenAPI::fromJsonValue(m_qualification_types, json[QString("QualificationTypes")]);
    m_qualification_types_isSet = !json[QString("QualificationTypes")].isNull() && m_qualification_types_isValid;
}

QString OAIListQualificationTypesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListQualificationTypesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_num_results_isSet) {
        obj.insert(QString("NumResults"), ::OpenAPI::toJsonValue(m_num_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_qualification_types.isSet()) {
        obj.insert(QString("QualificationTypes"), ::OpenAPI::toJsonValue(m_qualification_types));
    }
    return obj;
}

qint32 OAIListQualificationTypesResponse::getNumResults() const {
    return m_num_results;
}
void OAIListQualificationTypesResponse::setNumResults(const qint32 &num_results) {
    m_num_results = num_results;
    m_num_results_isSet = true;
}

bool OAIListQualificationTypesResponse::is_num_results_Set() const{
    return m_num_results_isSet;
}

bool OAIListQualificationTypesResponse::is_num_results_Valid() const{
    return m_num_results_isValid;
}

QString OAIListQualificationTypesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListQualificationTypesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListQualificationTypesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListQualificationTypesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListQualificationTypesResponse::getQualificationTypes() const {
    return m_qualification_types;
}
void OAIListQualificationTypesResponse::setQualificationTypes(const QList &qualification_types) {
    m_qualification_types = qualification_types;
    m_qualification_types_isSet = true;
}

bool OAIListQualificationTypesResponse::is_qualification_types_Set() const{
    return m_qualification_types_isSet;
}

bool OAIListQualificationTypesResponse::is_qualification_types_Valid() const{
    return m_qualification_types_isValid;
}

bool OAIListQualificationTypesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualification_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListQualificationTypesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
