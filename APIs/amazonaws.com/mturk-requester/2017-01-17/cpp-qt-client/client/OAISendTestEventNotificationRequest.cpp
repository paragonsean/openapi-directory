/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendTestEventNotificationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendTestEventNotificationRequest::OAISendTestEventNotificationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendTestEventNotificationRequest::OAISendTestEventNotificationRequest() {
    this->initializeModel();
}

OAISendTestEventNotificationRequest::~OAISendTestEventNotificationRequest() {}

void OAISendTestEventNotificationRequest::initializeModel() {

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_test_event_type_isSet = false;
    m_test_event_type_isValid = false;
}

void OAISendTestEventNotificationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendTestEventNotificationRequest::fromJsonObject(QJsonObject json) {

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_test_event_type_isValid = ::OpenAPI::fromJsonValue(m_test_event_type, json[QString("TestEventType")]);
    m_test_event_type_isSet = !json[QString("TestEventType")].isNull() && m_test_event_type_isValid;
}

QString OAISendTestEventNotificationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendTestEventNotificationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_test_event_type.isSet()) {
        obj.insert(QString("TestEventType"), ::OpenAPI::toJsonValue(m_test_event_type));
    }
    return obj;
}

OAISendTestEventNotificationRequest_Notification OAISendTestEventNotificationRequest::getNotification() const {
    return m_notification;
}
void OAISendTestEventNotificationRequest::setNotification(const OAISendTestEventNotificationRequest_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAISendTestEventNotificationRequest::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAISendTestEventNotificationRequest::is_notification_Valid() const{
    return m_notification_isValid;
}

OAIEventType OAISendTestEventNotificationRequest::getTestEventType() const {
    return m_test_event_type;
}
void OAISendTestEventNotificationRequest::setTestEventType(const OAIEventType &test_event_type) {
    m_test_event_type = test_event_type;
    m_test_event_type_isSet = true;
}

bool OAISendTestEventNotificationRequest::is_test_event_type_Set() const{
    return m_test_event_type_isSet;
}

bool OAISendTestEventNotificationRequest::is_test_event_type_Valid() const{
    return m_test_event_type_isValid;
}

bool OAISendTestEventNotificationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendTestEventNotificationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notification_isValid && m_test_event_type_isValid && true;
}

} // namespace OpenAPI
