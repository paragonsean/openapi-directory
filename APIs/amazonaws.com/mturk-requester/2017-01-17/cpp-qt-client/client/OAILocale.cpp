/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocale::OAILocale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocale::OAILocale() {
    this->initializeModel();
}

OAILocale::~OAILocale() {}

void OAILocale::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_subdivision_isSet = false;
    m_subdivision_isValid = false;
}

void OAILocale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocale::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_subdivision_isValid = ::OpenAPI::fromJsonValue(m_subdivision, json[QString("Subdivision")]);
    m_subdivision_isSet = !json[QString("Subdivision")].isNull() && m_subdivision_isValid;
}

QString OAILocale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocale::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_subdivision_isSet) {
        obj.insert(QString("Subdivision"), ::OpenAPI::toJsonValue(m_subdivision));
    }
    return obj;
}

QString OAILocale::getCountry() const {
    return m_country;
}
void OAILocale::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocale::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocale::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocale::getSubdivision() const {
    return m_subdivision;
}
void OAILocale::setSubdivision(const QString &subdivision) {
    m_subdivision = subdivision;
    m_subdivision_isSet = true;
}

bool OAILocale::is_subdivision_Set() const{
    return m_subdivision_isSet;
}

bool OAILocale::is_subdivision_Valid() const{
    return m_subdivision_isValid;
}

bool OAILocale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocale::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
