/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWorkersWithQualificationTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWorkersWithQualificationTypeRequest::OAIListWorkersWithQualificationTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWorkersWithQualificationTypeRequest::OAIListWorkersWithQualificationTypeRequest() {
    this->initializeModel();
}

OAIListWorkersWithQualificationTypeRequest::~OAIListWorkersWithQualificationTypeRequest() {}

void OAIListWorkersWithQualificationTypeRequest::initializeModel() {

    m_qualification_type_id_isSet = false;
    m_qualification_type_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListWorkersWithQualificationTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWorkersWithQualificationTypeRequest::fromJsonObject(QJsonObject json) {

    m_qualification_type_id_isValid = ::OpenAPI::fromJsonValue(m_qualification_type_id, json[QString("QualificationTypeId")]);
    m_qualification_type_id_isSet = !json[QString("QualificationTypeId")].isNull() && m_qualification_type_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListWorkersWithQualificationTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWorkersWithQualificationTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_qualification_type_id_isSet) {
        obj.insert(QString("QualificationTypeId"), ::OpenAPI::toJsonValue(m_qualification_type_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListWorkersWithQualificationTypeRequest::getQualificationTypeId() const {
    return m_qualification_type_id;
}
void OAIListWorkersWithQualificationTypeRequest::setQualificationTypeId(const QString &qualification_type_id) {
    m_qualification_type_id = qualification_type_id;
    m_qualification_type_id_isSet = true;
}

bool OAIListWorkersWithQualificationTypeRequest::is_qualification_type_id_Set() const{
    return m_qualification_type_id_isSet;
}

bool OAIListWorkersWithQualificationTypeRequest::is_qualification_type_id_Valid() const{
    return m_qualification_type_id_isValid;
}

OAIQualificationStatus OAIListWorkersWithQualificationTypeRequest::getStatus() const {
    return m_status;
}
void OAIListWorkersWithQualificationTypeRequest::setStatus(const OAIQualificationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListWorkersWithQualificationTypeRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListWorkersWithQualificationTypeRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListWorkersWithQualificationTypeRequest::getNextToken() const {
    return m_next_token;
}
void OAIListWorkersWithQualificationTypeRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListWorkersWithQualificationTypeRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListWorkersWithQualificationTypeRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListWorkersWithQualificationTypeRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListWorkersWithQualificationTypeRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListWorkersWithQualificationTypeRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListWorkersWithQualificationTypeRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListWorkersWithQualificationTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_qualification_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWorkersWithQualificationTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_qualification_type_id_isValid && true;
}

} // namespace OpenAPI
