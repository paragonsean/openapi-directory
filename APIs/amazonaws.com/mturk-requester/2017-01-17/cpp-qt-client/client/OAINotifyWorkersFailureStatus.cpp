/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyWorkersFailureStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyWorkersFailureStatus::OAINotifyWorkersFailureStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyWorkersFailureStatus::OAINotifyWorkersFailureStatus() {
    this->initializeModel();
}

OAINotifyWorkersFailureStatus::~OAINotifyWorkersFailureStatus() {}

void OAINotifyWorkersFailureStatus::initializeModel() {

    m_notify_workers_failure_code_isSet = false;
    m_notify_workers_failure_code_isValid = false;

    m_notify_workers_failure_message_isSet = false;
    m_notify_workers_failure_message_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAINotifyWorkersFailureStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyWorkersFailureStatus::fromJsonObject(QJsonObject json) {

    m_notify_workers_failure_code_isValid = ::OpenAPI::fromJsonValue(m_notify_workers_failure_code, json[QString("NotifyWorkersFailureCode")]);
    m_notify_workers_failure_code_isSet = !json[QString("NotifyWorkersFailureCode")].isNull() && m_notify_workers_failure_code_isValid;

    m_notify_workers_failure_message_isValid = ::OpenAPI::fromJsonValue(m_notify_workers_failure_message, json[QString("NotifyWorkersFailureMessage")]);
    m_notify_workers_failure_message_isSet = !json[QString("NotifyWorkersFailureMessage")].isNull() && m_notify_workers_failure_message_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("WorkerId")]);
    m_worker_id_isSet = !json[QString("WorkerId")].isNull() && m_worker_id_isValid;
}

QString OAINotifyWorkersFailureStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyWorkersFailureStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_notify_workers_failure_code.isSet()) {
        obj.insert(QString("NotifyWorkersFailureCode"), ::OpenAPI::toJsonValue(m_notify_workers_failure_code));
    }
    if (m_notify_workers_failure_message_isSet) {
        obj.insert(QString("NotifyWorkersFailureMessage"), ::OpenAPI::toJsonValue(m_notify_workers_failure_message));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("WorkerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

OAINotifyWorkersFailureCode OAINotifyWorkersFailureStatus::getNotifyWorkersFailureCode() const {
    return m_notify_workers_failure_code;
}
void OAINotifyWorkersFailureStatus::setNotifyWorkersFailureCode(const OAINotifyWorkersFailureCode &notify_workers_failure_code) {
    m_notify_workers_failure_code = notify_workers_failure_code;
    m_notify_workers_failure_code_isSet = true;
}

bool OAINotifyWorkersFailureStatus::is_notify_workers_failure_code_Set() const{
    return m_notify_workers_failure_code_isSet;
}

bool OAINotifyWorkersFailureStatus::is_notify_workers_failure_code_Valid() const{
    return m_notify_workers_failure_code_isValid;
}

QString OAINotifyWorkersFailureStatus::getNotifyWorkersFailureMessage() const {
    return m_notify_workers_failure_message;
}
void OAINotifyWorkersFailureStatus::setNotifyWorkersFailureMessage(const QString &notify_workers_failure_message) {
    m_notify_workers_failure_message = notify_workers_failure_message;
    m_notify_workers_failure_message_isSet = true;
}

bool OAINotifyWorkersFailureStatus::is_notify_workers_failure_message_Set() const{
    return m_notify_workers_failure_message_isSet;
}

bool OAINotifyWorkersFailureStatus::is_notify_workers_failure_message_Valid() const{
    return m_notify_workers_failure_message_isValid;
}

QString OAINotifyWorkersFailureStatus::getWorkerId() const {
    return m_worker_id;
}
void OAINotifyWorkersFailureStatus::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAINotifyWorkersFailureStatus::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAINotifyWorkersFailureStatus::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAINotifyWorkersFailureStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notify_workers_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_workers_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyWorkersFailureStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
