/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComparator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComparator::OAIComparator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComparator::OAIComparator() {
    this->initializeModel();
}

OAIComparator::~OAIComparator() {}

void OAIComparator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIComparator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIComparator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LessThan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::LESSTHAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LessThanOrEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::LESSTHANOREQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::GREATERTHAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThanOrEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::GREATERTHANOREQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::EQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::NOTEQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exists", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::DOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("In", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotIn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComparator::NOTIN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIComparator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIComparator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIComparator::LESSTHAN:
            val = "LessThan";
            break;
        case eOAIComparator::LESSTHANOREQUALTO:
            val = "LessThanOrEqualTo";
            break;
        case eOAIComparator::GREATERTHAN:
            val = "GreaterThan";
            break;
        case eOAIComparator::GREATERTHANOREQUALTO:
            val = "GreaterThanOrEqualTo";
            break;
        case eOAIComparator::EQUALTO:
            val = "EqualTo";
            break;
        case eOAIComparator::NOTEQUALTO:
            val = "NotEqualTo";
            break;
        case eOAIComparator::EXISTS:
            val = "Exists";
            break;
        case eOAIComparator::DOESNOTEXIST:
            val = "DoesNotExist";
            break;
        case eOAIComparator::IN:
            val = "In";
            break;
        case eOAIComparator::NOTIN:
            val = "NotIn";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIComparator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIComparator::eOAIComparator OAIComparator::getValue() const {
    return m_value;
}

void OAIComparator::setValue(const OAIComparator::eOAIComparator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIComparator::isSet() const {
    
    return m_value_isSet;
}

bool OAIComparator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
