/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateHITTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateHITTypeRequest::OAICreateHITTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateHITTypeRequest::OAICreateHITTypeRequest() {
    this->initializeModel();
}

OAICreateHITTypeRequest::~OAICreateHITTypeRequest() {}

void OAICreateHITTypeRequest::initializeModel() {

    m_auto_approval_delay_in_seconds_isSet = false;
    m_auto_approval_delay_in_seconds_isValid = false;

    m_assignment_duration_in_seconds_isSet = false;
    m_assignment_duration_in_seconds_isValid = false;

    m_reward_isSet = false;
    m_reward_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_qualification_requirements_isSet = false;
    m_qualification_requirements_isValid = false;
}

void OAICreateHITTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateHITTypeRequest::fromJsonObject(QJsonObject json) {

    m_auto_approval_delay_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_auto_approval_delay_in_seconds, json[QString("AutoApprovalDelayInSeconds")]);
    m_auto_approval_delay_in_seconds_isSet = !json[QString("AutoApprovalDelayInSeconds")].isNull() && m_auto_approval_delay_in_seconds_isValid;

    m_assignment_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_assignment_duration_in_seconds, json[QString("AssignmentDurationInSeconds")]);
    m_assignment_duration_in_seconds_isSet = !json[QString("AssignmentDurationInSeconds")].isNull() && m_assignment_duration_in_seconds_isValid;

    m_reward_isValid = ::OpenAPI::fromJsonValue(m_reward, json[QString("Reward")]);
    m_reward_isSet = !json[QString("Reward")].isNull() && m_reward_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_qualification_requirements_isValid = ::OpenAPI::fromJsonValue(m_qualification_requirements, json[QString("QualificationRequirements")]);
    m_qualification_requirements_isSet = !json[QString("QualificationRequirements")].isNull() && m_qualification_requirements_isValid;
}

QString OAICreateHITTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateHITTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_approval_delay_in_seconds_isSet) {
        obj.insert(QString("AutoApprovalDelayInSeconds"), ::OpenAPI::toJsonValue(m_auto_approval_delay_in_seconds));
    }
    if (m_assignment_duration_in_seconds_isSet) {
        obj.insert(QString("AssignmentDurationInSeconds"), ::OpenAPI::toJsonValue(m_assignment_duration_in_seconds));
    }
    if (m_reward_isSet) {
        obj.insert(QString("Reward"), ::OpenAPI::toJsonValue(m_reward));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_qualification_requirements.isSet()) {
        obj.insert(QString("QualificationRequirements"), ::OpenAPI::toJsonValue(m_qualification_requirements));
    }
    return obj;
}

qint32 OAICreateHITTypeRequest::getAutoApprovalDelayInSeconds() const {
    return m_auto_approval_delay_in_seconds;
}
void OAICreateHITTypeRequest::setAutoApprovalDelayInSeconds(const qint32 &auto_approval_delay_in_seconds) {
    m_auto_approval_delay_in_seconds = auto_approval_delay_in_seconds;
    m_auto_approval_delay_in_seconds_isSet = true;
}

bool OAICreateHITTypeRequest::is_auto_approval_delay_in_seconds_Set() const{
    return m_auto_approval_delay_in_seconds_isSet;
}

bool OAICreateHITTypeRequest::is_auto_approval_delay_in_seconds_Valid() const{
    return m_auto_approval_delay_in_seconds_isValid;
}

qint32 OAICreateHITTypeRequest::getAssignmentDurationInSeconds() const {
    return m_assignment_duration_in_seconds;
}
void OAICreateHITTypeRequest::setAssignmentDurationInSeconds(const qint32 &assignment_duration_in_seconds) {
    m_assignment_duration_in_seconds = assignment_duration_in_seconds;
    m_assignment_duration_in_seconds_isSet = true;
}

bool OAICreateHITTypeRequest::is_assignment_duration_in_seconds_Set() const{
    return m_assignment_duration_in_seconds_isSet;
}

bool OAICreateHITTypeRequest::is_assignment_duration_in_seconds_Valid() const{
    return m_assignment_duration_in_seconds_isValid;
}

QString OAICreateHITTypeRequest::getReward() const {
    return m_reward;
}
void OAICreateHITTypeRequest::setReward(const QString &reward) {
    m_reward = reward;
    m_reward_isSet = true;
}

bool OAICreateHITTypeRequest::is_reward_Set() const{
    return m_reward_isSet;
}

bool OAICreateHITTypeRequest::is_reward_Valid() const{
    return m_reward_isValid;
}

QString OAICreateHITTypeRequest::getTitle() const {
    return m_title;
}
void OAICreateHITTypeRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateHITTypeRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateHITTypeRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICreateHITTypeRequest::getKeywords() const {
    return m_keywords;
}
void OAICreateHITTypeRequest::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICreateHITTypeRequest::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICreateHITTypeRequest::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAICreateHITTypeRequest::getDescription() const {
    return m_description;
}
void OAICreateHITTypeRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateHITTypeRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateHITTypeRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateHITTypeRequest::getQualificationRequirements() const {
    return m_qualification_requirements;
}
void OAICreateHITTypeRequest::setQualificationRequirements(const QList &qualification_requirements) {
    m_qualification_requirements = qualification_requirements;
    m_qualification_requirements_isSet = true;
}

bool OAICreateHITTypeRequest::is_qualification_requirements_Set() const{
    return m_qualification_requirements_isSet;
}

bool OAICreateHITTypeRequest::is_qualification_requirements_Valid() const{
    return m_qualification_requirements_isValid;
}

bool OAICreateHITTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_approval_delay_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualification_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateHITTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assignment_duration_in_seconds_isValid && m_reward_isValid && m_title_isValid && m_description_isValid && true;
}

} // namespace OpenAPI
