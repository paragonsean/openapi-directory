/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateQualificationTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateQualificationTypeRequest::OAIUpdateQualificationTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateQualificationTypeRequest::OAIUpdateQualificationTypeRequest() {
    this->initializeModel();
}

OAIUpdateQualificationTypeRequest::~OAIUpdateQualificationTypeRequest() {}

void OAIUpdateQualificationTypeRequest::initializeModel() {

    m_qualification_type_id_isSet = false;
    m_qualification_type_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_qualification_type_status_isSet = false;
    m_qualification_type_status_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_answer_key_isSet = false;
    m_answer_key_isValid = false;

    m_test_duration_in_seconds_isSet = false;
    m_test_duration_in_seconds_isValid = false;

    m_retry_delay_in_seconds_isSet = false;
    m_retry_delay_in_seconds_isValid = false;

    m_auto_granted_isSet = false;
    m_auto_granted_isValid = false;

    m_auto_granted_value_isSet = false;
    m_auto_granted_value_isValid = false;
}

void OAIUpdateQualificationTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateQualificationTypeRequest::fromJsonObject(QJsonObject json) {

    m_qualification_type_id_isValid = ::OpenAPI::fromJsonValue(m_qualification_type_id, json[QString("QualificationTypeId")]);
    m_qualification_type_id_isSet = !json[QString("QualificationTypeId")].isNull() && m_qualification_type_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_qualification_type_status_isValid = ::OpenAPI::fromJsonValue(m_qualification_type_status, json[QString("QualificationTypeStatus")]);
    m_qualification_type_status_isSet = !json[QString("QualificationTypeStatus")].isNull() && m_qualification_type_status_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("Test")]);
    m_test_isSet = !json[QString("Test")].isNull() && m_test_isValid;

    m_answer_key_isValid = ::OpenAPI::fromJsonValue(m_answer_key, json[QString("AnswerKey")]);
    m_answer_key_isSet = !json[QString("AnswerKey")].isNull() && m_answer_key_isValid;

    m_test_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_test_duration_in_seconds, json[QString("TestDurationInSeconds")]);
    m_test_duration_in_seconds_isSet = !json[QString("TestDurationInSeconds")].isNull() && m_test_duration_in_seconds_isValid;

    m_retry_delay_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_retry_delay_in_seconds, json[QString("RetryDelayInSeconds")]);
    m_retry_delay_in_seconds_isSet = !json[QString("RetryDelayInSeconds")].isNull() && m_retry_delay_in_seconds_isValid;

    m_auto_granted_isValid = ::OpenAPI::fromJsonValue(m_auto_granted, json[QString("AutoGranted")]);
    m_auto_granted_isSet = !json[QString("AutoGranted")].isNull() && m_auto_granted_isValid;

    m_auto_granted_value_isValid = ::OpenAPI::fromJsonValue(m_auto_granted_value, json[QString("AutoGrantedValue")]);
    m_auto_granted_value_isSet = !json[QString("AutoGrantedValue")].isNull() && m_auto_granted_value_isValid;
}

QString OAIUpdateQualificationTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateQualificationTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_qualification_type_id_isSet) {
        obj.insert(QString("QualificationTypeId"), ::OpenAPI::toJsonValue(m_qualification_type_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_qualification_type_status.isSet()) {
        obj.insert(QString("QualificationTypeStatus"), ::OpenAPI::toJsonValue(m_qualification_type_status));
    }
    if (m_test_isSet) {
        obj.insert(QString("Test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_answer_key_isSet) {
        obj.insert(QString("AnswerKey"), ::OpenAPI::toJsonValue(m_answer_key));
    }
    if (m_test_duration_in_seconds_isSet) {
        obj.insert(QString("TestDurationInSeconds"), ::OpenAPI::toJsonValue(m_test_duration_in_seconds));
    }
    if (m_retry_delay_in_seconds_isSet) {
        obj.insert(QString("RetryDelayInSeconds"), ::OpenAPI::toJsonValue(m_retry_delay_in_seconds));
    }
    if (m_auto_granted_isSet) {
        obj.insert(QString("AutoGranted"), ::OpenAPI::toJsonValue(m_auto_granted));
    }
    if (m_auto_granted_value_isSet) {
        obj.insert(QString("AutoGrantedValue"), ::OpenAPI::toJsonValue(m_auto_granted_value));
    }
    return obj;
}

QString OAIUpdateQualificationTypeRequest::getQualificationTypeId() const {
    return m_qualification_type_id;
}
void OAIUpdateQualificationTypeRequest::setQualificationTypeId(const QString &qualification_type_id) {
    m_qualification_type_id = qualification_type_id;
    m_qualification_type_id_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_qualification_type_id_Set() const{
    return m_qualification_type_id_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_qualification_type_id_Valid() const{
    return m_qualification_type_id_isValid;
}

QString OAIUpdateQualificationTypeRequest::getDescription() const {
    return m_description;
}
void OAIUpdateQualificationTypeRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIQualificationTypeStatus OAIUpdateQualificationTypeRequest::getQualificationTypeStatus() const {
    return m_qualification_type_status;
}
void OAIUpdateQualificationTypeRequest::setQualificationTypeStatus(const OAIQualificationTypeStatus &qualification_type_status) {
    m_qualification_type_status = qualification_type_status;
    m_qualification_type_status_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_qualification_type_status_Set() const{
    return m_qualification_type_status_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_qualification_type_status_Valid() const{
    return m_qualification_type_status_isValid;
}

QString OAIUpdateQualificationTypeRequest::getTest() const {
    return m_test;
}
void OAIUpdateQualificationTypeRequest::setTest(const QString &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_test_Set() const{
    return m_test_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIUpdateQualificationTypeRequest::getAnswerKey() const {
    return m_answer_key;
}
void OAIUpdateQualificationTypeRequest::setAnswerKey(const QString &answer_key) {
    m_answer_key = answer_key;
    m_answer_key_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_answer_key_Set() const{
    return m_answer_key_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_answer_key_Valid() const{
    return m_answer_key_isValid;
}

qint32 OAIUpdateQualificationTypeRequest::getTestDurationInSeconds() const {
    return m_test_duration_in_seconds;
}
void OAIUpdateQualificationTypeRequest::setTestDurationInSeconds(const qint32 &test_duration_in_seconds) {
    m_test_duration_in_seconds = test_duration_in_seconds;
    m_test_duration_in_seconds_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_test_duration_in_seconds_Set() const{
    return m_test_duration_in_seconds_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_test_duration_in_seconds_Valid() const{
    return m_test_duration_in_seconds_isValid;
}

qint32 OAIUpdateQualificationTypeRequest::getRetryDelayInSeconds() const {
    return m_retry_delay_in_seconds;
}
void OAIUpdateQualificationTypeRequest::setRetryDelayInSeconds(const qint32 &retry_delay_in_seconds) {
    m_retry_delay_in_seconds = retry_delay_in_seconds;
    m_retry_delay_in_seconds_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_retry_delay_in_seconds_Set() const{
    return m_retry_delay_in_seconds_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_retry_delay_in_seconds_Valid() const{
    return m_retry_delay_in_seconds_isValid;
}

bool OAIUpdateQualificationTypeRequest::getAutoGranted() const {
    return m_auto_granted;
}
void OAIUpdateQualificationTypeRequest::setAutoGranted(const bool &auto_granted) {
    m_auto_granted = auto_granted;
    m_auto_granted_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_auto_granted_Set() const{
    return m_auto_granted_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_auto_granted_Valid() const{
    return m_auto_granted_isValid;
}

qint32 OAIUpdateQualificationTypeRequest::getAutoGrantedValue() const {
    return m_auto_granted_value;
}
void OAIUpdateQualificationTypeRequest::setAutoGrantedValue(const qint32 &auto_granted_value) {
    m_auto_granted_value = auto_granted_value;
    m_auto_granted_value_isSet = true;
}

bool OAIUpdateQualificationTypeRequest::is_auto_granted_value_Set() const{
    return m_auto_granted_value_isSet;
}

bool OAIUpdateQualificationTypeRequest::is_auto_granted_value_Valid() const{
    return m_auto_granted_value_isValid;
}

bool OAIUpdateQualificationTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_qualification_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualification_type_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_delay_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_granted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_granted_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateQualificationTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_qualification_type_id_isValid && true;
}

} // namespace OpenAPI
