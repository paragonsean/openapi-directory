/**
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHITReviewStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHITReviewStatus::OAIHITReviewStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHITReviewStatus::OAIHITReviewStatus() {
    this->initializeModel();
}

OAIHITReviewStatus::~OAIHITReviewStatus() {}

void OAIHITReviewStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHITReviewStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHITReviewStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotReviewed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHITReviewStatus::NOTREVIEWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MarkedForReview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHITReviewStatus::MARKEDFORREVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReviewedAppropriate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHITReviewStatus::REVIEWEDAPPROPRIATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReviewedInappropriate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHITReviewStatus::REVIEWEDINAPPROPRIATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHITReviewStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHITReviewStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHITReviewStatus::NOTREVIEWED:
            val = "NotReviewed";
            break;
        case eOAIHITReviewStatus::MARKEDFORREVIEW:
            val = "MarkedForReview";
            break;
        case eOAIHITReviewStatus::REVIEWEDAPPROPRIATE:
            val = "ReviewedAppropriate";
            break;
        case eOAIHITReviewStatus::REVIEWEDINAPPROPRIATE:
            val = "ReviewedInappropriate";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHITReviewStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHITReviewStatus::eOAIHITReviewStatus OAIHITReviewStatus::getValue() const {
    return m_value;
}

void OAIHITReviewStatus::setValue(const OAIHITReviewStatus::eOAIHITReviewStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHITReviewStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIHITReviewStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
