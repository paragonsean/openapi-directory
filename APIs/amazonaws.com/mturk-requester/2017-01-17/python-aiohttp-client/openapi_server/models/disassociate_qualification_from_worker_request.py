# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisassociateQualificationFromWorkerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, worker_id: str=None, qualification_type_id: str=None, reason: str=None):
        """DisassociateQualificationFromWorkerRequest - a model defined in OpenAPI

        :param worker_id: The worker_id of this DisassociateQualificationFromWorkerRequest.
        :param qualification_type_id: The qualification_type_id of this DisassociateQualificationFromWorkerRequest.
        :param reason: The reason of this DisassociateQualificationFromWorkerRequest.
        """
        self.openapi_types = {
            'worker_id': str,
            'qualification_type_id': str,
            'reason': str
        }

        self.attribute_map = {
            'worker_id': 'WorkerId',
            'qualification_type_id': 'QualificationTypeId',
            'reason': 'Reason'
        }

        self._worker_id = worker_id
        self._qualification_type_id = qualification_type_id
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateQualificationFromWorkerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateQualificationFromWorkerRequest of this DisassociateQualificationFromWorkerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def worker_id(self):
        """Gets the worker_id of this DisassociateQualificationFromWorkerRequest.


        :return: The worker_id of this DisassociateQualificationFromWorkerRequest.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this DisassociateQualificationFromWorkerRequest.


        :param worker_id: The worker_id of this DisassociateQualificationFromWorkerRequest.
        :type worker_id: str
        """
        if worker_id is None:
            raise ValueError("Invalid value for `worker_id`, must not be `None`")

        self._worker_id = worker_id

    @property
    def qualification_type_id(self):
        """Gets the qualification_type_id of this DisassociateQualificationFromWorkerRequest.


        :return: The qualification_type_id of this DisassociateQualificationFromWorkerRequest.
        :rtype: str
        """
        return self._qualification_type_id

    @qualification_type_id.setter
    def qualification_type_id(self, qualification_type_id):
        """Sets the qualification_type_id of this DisassociateQualificationFromWorkerRequest.


        :param qualification_type_id: The qualification_type_id of this DisassociateQualificationFromWorkerRequest.
        :type qualification_type_id: str
        """
        if qualification_type_id is None:
            raise ValueError("Invalid value for `qualification_type_id`, must not be `None`")

        self._qualification_type_id = qualification_type_id

    @property
    def reason(self):
        """Gets the reason of this DisassociateQualificationFromWorkerRequest.


        :return: The reason of this DisassociateQualificationFromWorkerRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DisassociateQualificationFromWorkerRequest.


        :param reason: The reason of this DisassociateQualificationFromWorkerRequest.
        :type reason: str
        """

        self._reason = reason
