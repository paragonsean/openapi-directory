# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApproveAssignmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment_id: str=None, requester_feedback: str=None, override_rejection: bool=None):
        """ApproveAssignmentRequest - a model defined in OpenAPI

        :param assignment_id: The assignment_id of this ApproveAssignmentRequest.
        :param requester_feedback: The requester_feedback of this ApproveAssignmentRequest.
        :param override_rejection: The override_rejection of this ApproveAssignmentRequest.
        """
        self.openapi_types = {
            'assignment_id': str,
            'requester_feedback': str,
            'override_rejection': bool
        }

        self.attribute_map = {
            'assignment_id': 'AssignmentId',
            'requester_feedback': 'RequesterFeedback',
            'override_rejection': 'OverrideRejection'
        }

        self._assignment_id = assignment_id
        self._requester_feedback = requester_feedback
        self._override_rejection = override_rejection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApproveAssignmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApproveAssignmentRequest of this ApproveAssignmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment_id(self):
        """Gets the assignment_id of this ApproveAssignmentRequest.


        :return: The assignment_id of this ApproveAssignmentRequest.
        :rtype: str
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this ApproveAssignmentRequest.


        :param assignment_id: The assignment_id of this ApproveAssignmentRequest.
        :type assignment_id: str
        """
        if assignment_id is None:
            raise ValueError("Invalid value for `assignment_id`, must not be `None`")

        self._assignment_id = assignment_id

    @property
    def requester_feedback(self):
        """Gets the requester_feedback of this ApproveAssignmentRequest.


        :return: The requester_feedback of this ApproveAssignmentRequest.
        :rtype: str
        """
        return self._requester_feedback

    @requester_feedback.setter
    def requester_feedback(self, requester_feedback):
        """Sets the requester_feedback of this ApproveAssignmentRequest.


        :param requester_feedback: The requester_feedback of this ApproveAssignmentRequest.
        :type requester_feedback: str
        """

        self._requester_feedback = requester_feedback

    @property
    def override_rejection(self):
        """Gets the override_rejection of this ApproveAssignmentRequest.


        :return: The override_rejection of this ApproveAssignmentRequest.
        :rtype: bool
        """
        return self._override_rejection

    @override_rejection.setter
    def override_rejection(self, override_rejection):
        """Sets the override_rejection of this ApproveAssignmentRequest.


        :param override_rejection: The override_rejection of this ApproveAssignmentRequest.
        :type override_rejection: bool
        """

        self._override_rejection = override_rejection
