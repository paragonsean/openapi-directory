# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_type import EventType
from openapi_server.models.send_test_event_notification_request_notification import SendTestEventNotificationRequestNotification
from openapi_server import util


class SendTestEventNotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification: SendTestEventNotificationRequestNotification=None, test_event_type: EventType=None):
        """SendTestEventNotificationRequest - a model defined in OpenAPI

        :param notification: The notification of this SendTestEventNotificationRequest.
        :param test_event_type: The test_event_type of this SendTestEventNotificationRequest.
        """
        self.openapi_types = {
            'notification': SendTestEventNotificationRequestNotification,
            'test_event_type': EventType
        }

        self.attribute_map = {
            'notification': 'Notification',
            'test_event_type': 'TestEventType'
        }

        self._notification = notification
        self._test_event_type = test_event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendTestEventNotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendTestEventNotificationRequest of this SendTestEventNotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification(self):
        """Gets the notification of this SendTestEventNotificationRequest.


        :return: The notification of this SendTestEventNotificationRequest.
        :rtype: SendTestEventNotificationRequestNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this SendTestEventNotificationRequest.


        :param notification: The notification of this SendTestEventNotificationRequest.
        :type notification: SendTestEventNotificationRequestNotification
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")

        self._notification = notification

    @property
    def test_event_type(self):
        """Gets the test_event_type of this SendTestEventNotificationRequest.


        :return: The test_event_type of this SendTestEventNotificationRequest.
        :rtype: EventType
        """
        return self._test_event_type

    @test_event_type.setter
    def test_event_type(self, test_event_type):
        """Sets the test_event_type of this SendTestEventNotificationRequest.


        :param test_event_type: The test_event_type of this SendTestEventNotificationRequest.
        :type test_event_type: EventType
        """
        if test_event_type is None:
            raise ValueError("Invalid value for `test_event_type`, must not be `None`")

        self._test_event_type = test_event_type
