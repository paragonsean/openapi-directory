# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListQualificationTypesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query: str=None, must_be_requestable: bool=None, must_be_owned_by_caller: bool=None, next_token: str=None, max_results: int=None):
        """ListQualificationTypesRequest - a model defined in OpenAPI

        :param query: The query of this ListQualificationTypesRequest.
        :param must_be_requestable: The must_be_requestable of this ListQualificationTypesRequest.
        :param must_be_owned_by_caller: The must_be_owned_by_caller of this ListQualificationTypesRequest.
        :param next_token: The next_token of this ListQualificationTypesRequest.
        :param max_results: The max_results of this ListQualificationTypesRequest.
        """
        self.openapi_types = {
            'query': str,
            'must_be_requestable': bool,
            'must_be_owned_by_caller': bool,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'query': 'Query',
            'must_be_requestable': 'MustBeRequestable',
            'must_be_owned_by_caller': 'MustBeOwnedByCaller',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._query = query
        self._must_be_requestable = must_be_requestable
        self._must_be_owned_by_caller = must_be_owned_by_caller
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListQualificationTypesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListQualificationTypesRequest of this ListQualificationTypesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self):
        """Gets the query of this ListQualificationTypesRequest.


        :return: The query of this ListQualificationTypesRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ListQualificationTypesRequest.


        :param query: The query of this ListQualificationTypesRequest.
        :type query: str
        """

        self._query = query

    @property
    def must_be_requestable(self):
        """Gets the must_be_requestable of this ListQualificationTypesRequest.


        :return: The must_be_requestable of this ListQualificationTypesRequest.
        :rtype: bool
        """
        return self._must_be_requestable

    @must_be_requestable.setter
    def must_be_requestable(self, must_be_requestable):
        """Sets the must_be_requestable of this ListQualificationTypesRequest.


        :param must_be_requestable: The must_be_requestable of this ListQualificationTypesRequest.
        :type must_be_requestable: bool
        """
        if must_be_requestable is None:
            raise ValueError("Invalid value for `must_be_requestable`, must not be `None`")

        self._must_be_requestable = must_be_requestable

    @property
    def must_be_owned_by_caller(self):
        """Gets the must_be_owned_by_caller of this ListQualificationTypesRequest.


        :return: The must_be_owned_by_caller of this ListQualificationTypesRequest.
        :rtype: bool
        """
        return self._must_be_owned_by_caller

    @must_be_owned_by_caller.setter
    def must_be_owned_by_caller(self, must_be_owned_by_caller):
        """Sets the must_be_owned_by_caller of this ListQualificationTypesRequest.


        :param must_be_owned_by_caller: The must_be_owned_by_caller of this ListQualificationTypesRequest.
        :type must_be_owned_by_caller: bool
        """

        self._must_be_owned_by_caller = must_be_owned_by_caller

    @property
    def next_token(self):
        """Gets the next_token of this ListQualificationTypesRequest.

        If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. 

        :return: The next_token of this ListQualificationTypesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListQualificationTypesRequest.

        If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. 

        :param next_token: The next_token of this ListQualificationTypesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 255:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `255`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListQualificationTypesRequest.


        :return: The max_results of this ListQualificationTypesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListQualificationTypesRequest.


        :param max_results: The max_results of this ListQualificationTypesRequest.
        :type max_results: int
        """

        self._max_results = max_results
