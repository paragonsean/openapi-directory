# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RejectQualificationRequestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qualification_request_id: str=None, reason: str=None):
        """RejectQualificationRequestRequest - a model defined in OpenAPI

        :param qualification_request_id: The qualification_request_id of this RejectQualificationRequestRequest.
        :param reason: The reason of this RejectQualificationRequestRequest.
        """
        self.openapi_types = {
            'qualification_request_id': str,
            'reason': str
        }

        self.attribute_map = {
            'qualification_request_id': 'QualificationRequestId',
            'reason': 'Reason'
        }

        self._qualification_request_id = qualification_request_id
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RejectQualificationRequestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RejectQualificationRequestRequest of this RejectQualificationRequestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qualification_request_id(self):
        """Gets the qualification_request_id of this RejectQualificationRequestRequest.


        :return: The qualification_request_id of this RejectQualificationRequestRequest.
        :rtype: str
        """
        return self._qualification_request_id

    @qualification_request_id.setter
    def qualification_request_id(self, qualification_request_id):
        """Sets the qualification_request_id of this RejectQualificationRequestRequest.


        :param qualification_request_id: The qualification_request_id of this RejectQualificationRequestRequest.
        :type qualification_request_id: str
        """
        if qualification_request_id is None:
            raise ValueError("Invalid value for `qualification_request_id`, must not be `None`")

        self._qualification_request_id = qualification_request_id

    @property
    def reason(self):
        """Gets the reason of this RejectQualificationRequestRequest.


        :return: The reason of this RejectQualificationRequestRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RejectQualificationRequestRequest.


        :param reason: The reason of this RejectQualificationRequestRequest.
        :type reason: str
        """

        self._reason = reason
