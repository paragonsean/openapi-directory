# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateHITTypeOfHITRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hitid: str=None, hit_type_id: str=None):
        """UpdateHITTypeOfHITRequest - a model defined in OpenAPI

        :param hitid: The hitid of this UpdateHITTypeOfHITRequest.
        :param hit_type_id: The hit_type_id of this UpdateHITTypeOfHITRequest.
        """
        self.openapi_types = {
            'hitid': str,
            'hit_type_id': str
        }

        self.attribute_map = {
            'hitid': 'HITId',
            'hit_type_id': 'HITTypeId'
        }

        self._hitid = hitid
        self._hit_type_id = hit_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateHITTypeOfHITRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateHITTypeOfHITRequest of this UpdateHITTypeOfHITRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hitid(self):
        """Gets the hitid of this UpdateHITTypeOfHITRequest.


        :return: The hitid of this UpdateHITTypeOfHITRequest.
        :rtype: str
        """
        return self._hitid

    @hitid.setter
    def hitid(self, hitid):
        """Sets the hitid of this UpdateHITTypeOfHITRequest.


        :param hitid: The hitid of this UpdateHITTypeOfHITRequest.
        :type hitid: str
        """
        if hitid is None:
            raise ValueError("Invalid value for `hitid`, must not be `None`")

        self._hitid = hitid

    @property
    def hit_type_id(self):
        """Gets the hit_type_id of this UpdateHITTypeOfHITRequest.


        :return: The hit_type_id of this UpdateHITTypeOfHITRequest.
        :rtype: str
        """
        return self._hit_type_id

    @hit_type_id.setter
    def hit_type_id(self, hit_type_id):
        """Sets the hit_type_id of this UpdateHITTypeOfHITRequest.


        :param hit_type_id: The hit_type_id of this UpdateHITTypeOfHITRequest.
        :type hit_type_id: str
        """
        if hit_type_id is None:
            raise ValueError("Invalid value for `hit_type_id`, must not be `None`")

        self._hit_type_id = hit_type_id
