# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_transport import NotificationTransport
from openapi_server import util


class NotificationSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, transport: NotificationTransport=None, version: str=None, event_types: List=None):
        """NotificationSpecification - a model defined in OpenAPI

        :param destination: The destination of this NotificationSpecification.
        :param transport: The transport of this NotificationSpecification.
        :param version: The version of this NotificationSpecification.
        :param event_types: The event_types of this NotificationSpecification.
        """
        self.openapi_types = {
            'destination': str,
            'transport': NotificationTransport,
            'version': str,
            'event_types': List
        }

        self.attribute_map = {
            'destination': 'Destination',
            'transport': 'Transport',
            'version': 'Version',
            'event_types': 'EventTypes'
        }

        self._destination = destination
        self._transport = transport
        self._version = version
        self._event_types = event_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSpecification of this NotificationSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this NotificationSpecification.


        :return: The destination of this NotificationSpecification.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this NotificationSpecification.


        :param destination: The destination of this NotificationSpecification.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def transport(self):
        """Gets the transport of this NotificationSpecification.


        :return: The transport of this NotificationSpecification.
        :rtype: NotificationTransport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this NotificationSpecification.


        :param transport: The transport of this NotificationSpecification.
        :type transport: NotificationTransport
        """
        if transport is None:
            raise ValueError("Invalid value for `transport`, must not be `None`")

        self._transport = transport

    @property
    def version(self):
        """Gets the version of this NotificationSpecification.


        :return: The version of this NotificationSpecification.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NotificationSpecification.


        :param version: The version of this NotificationSpecification.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def event_types(self):
        """Gets the event_types of this NotificationSpecification.


        :return: The event_types of this NotificationSpecification.
        :rtype: List
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this NotificationSpecification.


        :param event_types: The event_types of this NotificationSpecification.
        :type event_types: List
        """
        if event_types is None:
            raise ValueError("Invalid value for `event_types`, must not be `None`")

        self._event_types = event_types
