# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Locale(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, subdivision: str=None):
        """Locale - a model defined in OpenAPI

        :param country: The country of this Locale.
        :param subdivision: The subdivision of this Locale.
        """
        self.openapi_types = {
            'country': str,
            'subdivision': str
        }

        self.attribute_map = {
            'country': 'Country',
            'subdivision': 'Subdivision'
        }

        self._country = country
        self._subdivision = subdivision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Locale':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Locale of this Locale.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Locale.


        :return: The country of this Locale.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Locale.


        :param country: The country of this Locale.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def subdivision(self):
        """Gets the subdivision of this Locale.


        :return: The subdivision of this Locale.
        :rtype: str
        """
        return self._subdivision

    @subdivision.setter
    def subdivision(self, subdivision):
        """Sets the subdivision of this Locale.


        :param subdivision: The subdivision of this Locale.
        :type subdivision: str
        """

        self._subdivision = subdivision
