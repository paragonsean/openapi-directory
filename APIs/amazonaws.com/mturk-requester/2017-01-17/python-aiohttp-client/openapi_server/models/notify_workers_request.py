# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotifyWorkersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject: str=None, message_text: str=None, worker_ids: List=None):
        """NotifyWorkersRequest - a model defined in OpenAPI

        :param subject: The subject of this NotifyWorkersRequest.
        :param message_text: The message_text of this NotifyWorkersRequest.
        :param worker_ids: The worker_ids of this NotifyWorkersRequest.
        """
        self.openapi_types = {
            'subject': str,
            'message_text': str,
            'worker_ids': List
        }

        self.attribute_map = {
            'subject': 'Subject',
            'message_text': 'MessageText',
            'worker_ids': 'WorkerIds'
        }

        self._subject = subject
        self._message_text = message_text
        self._worker_ids = worker_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyWorkersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyWorkersRequest of this NotifyWorkersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self):
        """Gets the subject of this NotifyWorkersRequest.


        :return: The subject of this NotifyWorkersRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NotifyWorkersRequest.


        :param subject: The subject of this NotifyWorkersRequest.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def message_text(self):
        """Gets the message_text of this NotifyWorkersRequest.


        :return: The message_text of this NotifyWorkersRequest.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this NotifyWorkersRequest.


        :param message_text: The message_text of this NotifyWorkersRequest.
        :type message_text: str
        """
        if message_text is None:
            raise ValueError("Invalid value for `message_text`, must not be `None`")

        self._message_text = message_text

    @property
    def worker_ids(self):
        """Gets the worker_ids of this NotifyWorkersRequest.


        :return: The worker_ids of this NotifyWorkersRequest.
        :rtype: List
        """
        return self._worker_ids

    @worker_ids.setter
    def worker_ids(self, worker_ids):
        """Sets the worker_ids of this NotifyWorkersRequest.


        :param worker_ids: The worker_ids of this NotifyWorkersRequest.
        :type worker_ids: List
        """
        if worker_ids is None:
            raise ValueError("Invalid value for `worker_ids`, must not be `None`")

        self._worker_ids = worker_ids
