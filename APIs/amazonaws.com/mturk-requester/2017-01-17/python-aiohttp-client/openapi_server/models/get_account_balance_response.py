# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetAccountBalanceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_balance: str=None, on_hold_balance: str=None):
        """GetAccountBalanceResponse - a model defined in OpenAPI

        :param available_balance: The available_balance of this GetAccountBalanceResponse.
        :param on_hold_balance: The on_hold_balance of this GetAccountBalanceResponse.
        """
        self.openapi_types = {
            'available_balance': str,
            'on_hold_balance': str
        }

        self.attribute_map = {
            'available_balance': 'AvailableBalance',
            'on_hold_balance': 'OnHoldBalance'
        }

        self._available_balance = available_balance
        self._on_hold_balance = on_hold_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAccountBalanceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAccountBalanceResponse of this GetAccountBalanceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_balance(self):
        """Gets the available_balance of this GetAccountBalanceResponse.

        A string representing a currency amount.

        :return: The available_balance of this GetAccountBalanceResponse.
        :rtype: str
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this GetAccountBalanceResponse.

        A string representing a currency amount.

        :param available_balance: The available_balance of this GetAccountBalanceResponse.
        :type available_balance: str
        """
        if available_balance is not None and not re.search(r'^[0-9]+(\.)?[0-9]{0,2}$', available_balance):
            raise ValueError("Invalid value for `available_balance`, must be a follow pattern or equal to `/^[0-9]+(\.)?[0-9]{0,2}$/`")

        self._available_balance = available_balance

    @property
    def on_hold_balance(self):
        """Gets the on_hold_balance of this GetAccountBalanceResponse.

        A string representing a currency amount.

        :return: The on_hold_balance of this GetAccountBalanceResponse.
        :rtype: str
        """
        return self._on_hold_balance

    @on_hold_balance.setter
    def on_hold_balance(self, on_hold_balance):
        """Sets the on_hold_balance of this GetAccountBalanceResponse.

        A string representing a currency amount.

        :param on_hold_balance: The on_hold_balance of this GetAccountBalanceResponse.
        :type on_hold_balance: str
        """
        if on_hold_balance is not None and not re.search(r'^[0-9]+(\.)?[0-9]{0,2}$', on_hold_balance):
            raise ValueError("Invalid value for `on_hold_balance`, must be a follow pattern or equal to `/^[0-9]+(\.)?[0-9]{0,2}$/`")

        self._on_hold_balance = on_hold_balance
