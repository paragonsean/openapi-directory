/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateHITRequestAssignmentReviewPolicy;
import org.openapitools.client.model.CreateHITRequestHITReviewPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateHITWithHITTypeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateHITWithHITTypeRequest {
  public static final String SERIALIZED_NAME_HI_T_TYPE_ID = "HITTypeId";
  @SerializedName(SERIALIZED_NAME_HI_T_TYPE_ID)
  private String hiTTypeId;

  public static final String SERIALIZED_NAME_MAX_ASSIGNMENTS = "MaxAssignments";
  @SerializedName(SERIALIZED_NAME_MAX_ASSIGNMENTS)
  private Integer maxAssignments;

  public static final String SERIALIZED_NAME_LIFETIME_IN_SECONDS = "LifetimeInSeconds";
  @SerializedName(SERIALIZED_NAME_LIFETIME_IN_SECONDS)
  private Integer lifetimeInSeconds;

  public static final String SERIALIZED_NAME_QUESTION = "Question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_REQUESTER_ANNOTATION = "RequesterAnnotation";
  @SerializedName(SERIALIZED_NAME_REQUESTER_ANNOTATION)
  private String requesterAnnotation;

  public static final String SERIALIZED_NAME_UNIQUE_REQUEST_TOKEN = "UniqueRequestToken";
  @SerializedName(SERIALIZED_NAME_UNIQUE_REQUEST_TOKEN)
  private String uniqueRequestToken;

  public static final String SERIALIZED_NAME_ASSIGNMENT_REVIEW_POLICY = "AssignmentReviewPolicy";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_REVIEW_POLICY)
  private CreateHITRequestAssignmentReviewPolicy assignmentReviewPolicy;

  public static final String SERIALIZED_NAME_HI_T_REVIEW_POLICY = "HITReviewPolicy";
  @SerializedName(SERIALIZED_NAME_HI_T_REVIEW_POLICY)
  private CreateHITRequestHITReviewPolicy hiTReviewPolicy;

  public static final String SERIALIZED_NAME_HI_T_LAYOUT_ID = "HITLayoutId";
  @SerializedName(SERIALIZED_NAME_HI_T_LAYOUT_ID)
  private String hiTLayoutId;

  public static final String SERIALIZED_NAME_HI_T_LAYOUT_PARAMETERS = "HITLayoutParameters";
  @SerializedName(SERIALIZED_NAME_HI_T_LAYOUT_PARAMETERS)
  private List hiTLayoutParameters;

  public CreateHITWithHITTypeRequest() {
  }

  public CreateHITWithHITTypeRequest hiTTypeId(String hiTTypeId) {
    this.hiTTypeId = hiTTypeId;
    return this;
  }

  /**
   * Get hiTTypeId
   * @return hiTTypeId
   */
  @javax.annotation.Nonnull
  public String getHiTTypeId() {
    return hiTTypeId;
  }

  public void setHiTTypeId(String hiTTypeId) {
    this.hiTTypeId = hiTTypeId;
  }


  public CreateHITWithHITTypeRequest maxAssignments(Integer maxAssignments) {
    this.maxAssignments = maxAssignments;
    return this;
  }

  /**
   * Get maxAssignments
   * @return maxAssignments
   */
  @javax.annotation.Nullable
  public Integer getMaxAssignments() {
    return maxAssignments;
  }

  public void setMaxAssignments(Integer maxAssignments) {
    this.maxAssignments = maxAssignments;
  }


  public CreateHITWithHITTypeRequest lifetimeInSeconds(Integer lifetimeInSeconds) {
    this.lifetimeInSeconds = lifetimeInSeconds;
    return this;
  }

  /**
   * Get lifetimeInSeconds
   * @return lifetimeInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getLifetimeInSeconds() {
    return lifetimeInSeconds;
  }

  public void setLifetimeInSeconds(Integer lifetimeInSeconds) {
    this.lifetimeInSeconds = lifetimeInSeconds;
  }


  public CreateHITWithHITTypeRequest question(String question) {
    this.question = question;
    return this;
  }

  /**
   * Get question
   * @return question
   */
  @javax.annotation.Nullable
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }


  public CreateHITWithHITTypeRequest requesterAnnotation(String requesterAnnotation) {
    this.requesterAnnotation = requesterAnnotation;
    return this;
  }

  /**
   * Get requesterAnnotation
   * @return requesterAnnotation
   */
  @javax.annotation.Nullable
  public String getRequesterAnnotation() {
    return requesterAnnotation;
  }

  public void setRequesterAnnotation(String requesterAnnotation) {
    this.requesterAnnotation = requesterAnnotation;
  }


  public CreateHITWithHITTypeRequest uniqueRequestToken(String uniqueRequestToken) {
    this.uniqueRequestToken = uniqueRequestToken;
    return this;
  }

  /**
   * Get uniqueRequestToken
   * @return uniqueRequestToken
   */
  @javax.annotation.Nullable
  public String getUniqueRequestToken() {
    return uniqueRequestToken;
  }

  public void setUniqueRequestToken(String uniqueRequestToken) {
    this.uniqueRequestToken = uniqueRequestToken;
  }


  public CreateHITWithHITTypeRequest assignmentReviewPolicy(CreateHITRequestAssignmentReviewPolicy assignmentReviewPolicy) {
    this.assignmentReviewPolicy = assignmentReviewPolicy;
    return this;
  }

  /**
   * Get assignmentReviewPolicy
   * @return assignmentReviewPolicy
   */
  @javax.annotation.Nullable
  public CreateHITRequestAssignmentReviewPolicy getAssignmentReviewPolicy() {
    return assignmentReviewPolicy;
  }

  public void setAssignmentReviewPolicy(CreateHITRequestAssignmentReviewPolicy assignmentReviewPolicy) {
    this.assignmentReviewPolicy = assignmentReviewPolicy;
  }


  public CreateHITWithHITTypeRequest hiTReviewPolicy(CreateHITRequestHITReviewPolicy hiTReviewPolicy) {
    this.hiTReviewPolicy = hiTReviewPolicy;
    return this;
  }

  /**
   * Get hiTReviewPolicy
   * @return hiTReviewPolicy
   */
  @javax.annotation.Nullable
  public CreateHITRequestHITReviewPolicy getHiTReviewPolicy() {
    return hiTReviewPolicy;
  }

  public void setHiTReviewPolicy(CreateHITRequestHITReviewPolicy hiTReviewPolicy) {
    this.hiTReviewPolicy = hiTReviewPolicy;
  }


  public CreateHITWithHITTypeRequest hiTLayoutId(String hiTLayoutId) {
    this.hiTLayoutId = hiTLayoutId;
    return this;
  }

  /**
   * Get hiTLayoutId
   * @return hiTLayoutId
   */
  @javax.annotation.Nullable
  public String getHiTLayoutId() {
    return hiTLayoutId;
  }

  public void setHiTLayoutId(String hiTLayoutId) {
    this.hiTLayoutId = hiTLayoutId;
  }


  public CreateHITWithHITTypeRequest hiTLayoutParameters(List hiTLayoutParameters) {
    this.hiTLayoutParameters = hiTLayoutParameters;
    return this;
  }

  /**
   * Get hiTLayoutParameters
   * @return hiTLayoutParameters
   */
  @javax.annotation.Nullable
  public List getHiTLayoutParameters() {
    return hiTLayoutParameters;
  }

  public void setHiTLayoutParameters(List hiTLayoutParameters) {
    this.hiTLayoutParameters = hiTLayoutParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHITWithHITTypeRequest createHITWithHITTypeRequest = (CreateHITWithHITTypeRequest) o;
    return Objects.equals(this.hiTTypeId, createHITWithHITTypeRequest.hiTTypeId) &&
        Objects.equals(this.maxAssignments, createHITWithHITTypeRequest.maxAssignments) &&
        Objects.equals(this.lifetimeInSeconds, createHITWithHITTypeRequest.lifetimeInSeconds) &&
        Objects.equals(this.question, createHITWithHITTypeRequest.question) &&
        Objects.equals(this.requesterAnnotation, createHITWithHITTypeRequest.requesterAnnotation) &&
        Objects.equals(this.uniqueRequestToken, createHITWithHITTypeRequest.uniqueRequestToken) &&
        Objects.equals(this.assignmentReviewPolicy, createHITWithHITTypeRequest.assignmentReviewPolicy) &&
        Objects.equals(this.hiTReviewPolicy, createHITWithHITTypeRequest.hiTReviewPolicy) &&
        Objects.equals(this.hiTLayoutId, createHITWithHITTypeRequest.hiTLayoutId) &&
        Objects.equals(this.hiTLayoutParameters, createHITWithHITTypeRequest.hiTLayoutParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hiTTypeId, maxAssignments, lifetimeInSeconds, question, requesterAnnotation, uniqueRequestToken, assignmentReviewPolicy, hiTReviewPolicy, hiTLayoutId, hiTLayoutParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHITWithHITTypeRequest {\n");
    sb.append("    hiTTypeId: ").append(toIndentedString(hiTTypeId)).append("\n");
    sb.append("    maxAssignments: ").append(toIndentedString(maxAssignments)).append("\n");
    sb.append("    lifetimeInSeconds: ").append(toIndentedString(lifetimeInSeconds)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    requesterAnnotation: ").append(toIndentedString(requesterAnnotation)).append("\n");
    sb.append("    uniqueRequestToken: ").append(toIndentedString(uniqueRequestToken)).append("\n");
    sb.append("    assignmentReviewPolicy: ").append(toIndentedString(assignmentReviewPolicy)).append("\n");
    sb.append("    hiTReviewPolicy: ").append(toIndentedString(hiTReviewPolicy)).append("\n");
    sb.append("    hiTLayoutId: ").append(toIndentedString(hiTLayoutId)).append("\n");
    sb.append("    hiTLayoutParameters: ").append(toIndentedString(hiTLayoutParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HITTypeId");
    openapiFields.add("MaxAssignments");
    openapiFields.add("LifetimeInSeconds");
    openapiFields.add("Question");
    openapiFields.add("RequesterAnnotation");
    openapiFields.add("UniqueRequestToken");
    openapiFields.add("AssignmentReviewPolicy");
    openapiFields.add("HITReviewPolicy");
    openapiFields.add("HITLayoutId");
    openapiFields.add("HITLayoutParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HITTypeId");
    openapiRequiredFields.add("LifetimeInSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateHITWithHITTypeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateHITWithHITTypeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateHITWithHITTypeRequest is not found in the empty JSON string", CreateHITWithHITTypeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateHITWithHITTypeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateHITWithHITTypeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateHITWithHITTypeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `HITTypeId`
      String.validateJsonElement(jsonObj.get("HITTypeId"));
      // validate the optional field `MaxAssignments`
      if (jsonObj.get("MaxAssignments") != null && !jsonObj.get("MaxAssignments").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAssignments"));
      }
      // validate the required field `LifetimeInSeconds`
      Integer.validateJsonElement(jsonObj.get("LifetimeInSeconds"));
      // validate the optional field `Question`
      if (jsonObj.get("Question") != null && !jsonObj.get("Question").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Question"));
      }
      // validate the optional field `RequesterAnnotation`
      if (jsonObj.get("RequesterAnnotation") != null && !jsonObj.get("RequesterAnnotation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RequesterAnnotation"));
      }
      // validate the optional field `UniqueRequestToken`
      if (jsonObj.get("UniqueRequestToken") != null && !jsonObj.get("UniqueRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UniqueRequestToken"));
      }
      // validate the optional field `AssignmentReviewPolicy`
      if (jsonObj.get("AssignmentReviewPolicy") != null && !jsonObj.get("AssignmentReviewPolicy").isJsonNull()) {
        CreateHITRequestAssignmentReviewPolicy.validateJsonElement(jsonObj.get("AssignmentReviewPolicy"));
      }
      // validate the optional field `HITReviewPolicy`
      if (jsonObj.get("HITReviewPolicy") != null && !jsonObj.get("HITReviewPolicy").isJsonNull()) {
        CreateHITRequestHITReviewPolicy.validateJsonElement(jsonObj.get("HITReviewPolicy"));
      }
      // validate the optional field `HITLayoutId`
      if (jsonObj.get("HITLayoutId") != null && !jsonObj.get("HITLayoutId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HITLayoutId"));
      }
      // validate the optional field `HITLayoutParameters`
      if (jsonObj.get("HITLayoutParameters") != null && !jsonObj.get("HITLayoutParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HITLayoutParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateHITWithHITTypeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateHITWithHITTypeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateHITWithHITTypeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateHITWithHITTypeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateHITWithHITTypeRequest>() {
           @Override
           public void write(JsonWriter out, CreateHITWithHITTypeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateHITWithHITTypeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateHITWithHITTypeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateHITWithHITTypeRequest
   * @throws IOException if the JSON string is invalid with respect to CreateHITWithHITTypeRequest
   */
  public static CreateHITWithHITTypeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateHITWithHITTypeRequest.class);
  }

  /**
   * Convert an instance of CreateHITWithHITTypeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

