/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateHITRequestAssignmentReviewPolicy;
import org.openapitools.client.model.CreateHITRequestHITReviewPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateHITRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateHITRequest {
  public static final String SERIALIZED_NAME_MAX_ASSIGNMENTS = "MaxAssignments";
  @SerializedName(SERIALIZED_NAME_MAX_ASSIGNMENTS)
  private Integer maxAssignments;

  public static final String SERIALIZED_NAME_AUTO_APPROVAL_DELAY_IN_SECONDS = "AutoApprovalDelayInSeconds";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVAL_DELAY_IN_SECONDS)
  private Integer autoApprovalDelayInSeconds;

  public static final String SERIALIZED_NAME_LIFETIME_IN_SECONDS = "LifetimeInSeconds";
  @SerializedName(SERIALIZED_NAME_LIFETIME_IN_SECONDS)
  private Integer lifetimeInSeconds;

  public static final String SERIALIZED_NAME_ASSIGNMENT_DURATION_IN_SECONDS = "AssignmentDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_DURATION_IN_SECONDS)
  private Integer assignmentDurationInSeconds;

  public static final String SERIALIZED_NAME_REWARD = "Reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private String reward;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_KEYWORDS = "Keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private String keywords;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_QUESTION = "Question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_REQUESTER_ANNOTATION = "RequesterAnnotation";
  @SerializedName(SERIALIZED_NAME_REQUESTER_ANNOTATION)
  private String requesterAnnotation;

  public static final String SERIALIZED_NAME_QUALIFICATION_REQUIREMENTS = "QualificationRequirements";
  @SerializedName(SERIALIZED_NAME_QUALIFICATION_REQUIREMENTS)
  private List qualificationRequirements;

  public static final String SERIALIZED_NAME_UNIQUE_REQUEST_TOKEN = "UniqueRequestToken";
  @SerializedName(SERIALIZED_NAME_UNIQUE_REQUEST_TOKEN)
  private String uniqueRequestToken;

  public static final String SERIALIZED_NAME_ASSIGNMENT_REVIEW_POLICY = "AssignmentReviewPolicy";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_REVIEW_POLICY)
  private CreateHITRequestAssignmentReviewPolicy assignmentReviewPolicy;

  public static final String SERIALIZED_NAME_HI_T_REVIEW_POLICY = "HITReviewPolicy";
  @SerializedName(SERIALIZED_NAME_HI_T_REVIEW_POLICY)
  private CreateHITRequestHITReviewPolicy hiTReviewPolicy;

  public static final String SERIALIZED_NAME_HI_T_LAYOUT_ID = "HITLayoutId";
  @SerializedName(SERIALIZED_NAME_HI_T_LAYOUT_ID)
  private String hiTLayoutId;

  public static final String SERIALIZED_NAME_HI_T_LAYOUT_PARAMETERS = "HITLayoutParameters";
  @SerializedName(SERIALIZED_NAME_HI_T_LAYOUT_PARAMETERS)
  private List hiTLayoutParameters;

  public CreateHITRequest() {
  }

  public CreateHITRequest maxAssignments(Integer maxAssignments) {
    this.maxAssignments = maxAssignments;
    return this;
  }

  /**
   * Get maxAssignments
   * @return maxAssignments
   */
  @javax.annotation.Nullable
  public Integer getMaxAssignments() {
    return maxAssignments;
  }

  public void setMaxAssignments(Integer maxAssignments) {
    this.maxAssignments = maxAssignments;
  }


  public CreateHITRequest autoApprovalDelayInSeconds(Integer autoApprovalDelayInSeconds) {
    this.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds;
    return this;
  }

  /**
   * Get autoApprovalDelayInSeconds
   * @return autoApprovalDelayInSeconds
   */
  @javax.annotation.Nullable
  public Integer getAutoApprovalDelayInSeconds() {
    return autoApprovalDelayInSeconds;
  }

  public void setAutoApprovalDelayInSeconds(Integer autoApprovalDelayInSeconds) {
    this.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds;
  }


  public CreateHITRequest lifetimeInSeconds(Integer lifetimeInSeconds) {
    this.lifetimeInSeconds = lifetimeInSeconds;
    return this;
  }

  /**
   * Get lifetimeInSeconds
   * @return lifetimeInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getLifetimeInSeconds() {
    return lifetimeInSeconds;
  }

  public void setLifetimeInSeconds(Integer lifetimeInSeconds) {
    this.lifetimeInSeconds = lifetimeInSeconds;
  }


  public CreateHITRequest assignmentDurationInSeconds(Integer assignmentDurationInSeconds) {
    this.assignmentDurationInSeconds = assignmentDurationInSeconds;
    return this;
  }

  /**
   * Get assignmentDurationInSeconds
   * @return assignmentDurationInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getAssignmentDurationInSeconds() {
    return assignmentDurationInSeconds;
  }

  public void setAssignmentDurationInSeconds(Integer assignmentDurationInSeconds) {
    this.assignmentDurationInSeconds = assignmentDurationInSeconds;
  }


  public CreateHITRequest reward(String reward) {
    this.reward = reward;
    return this;
  }

  /**
   * Get reward
   * @return reward
   */
  @javax.annotation.Nonnull
  public String getReward() {
    return reward;
  }

  public void setReward(String reward) {
    this.reward = reward;
  }


  public CreateHITRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateHITRequest keywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public String getKeywords() {
    return keywords;
  }

  public void setKeywords(String keywords) {
    this.keywords = keywords;
  }


  public CreateHITRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateHITRequest question(String question) {
    this.question = question;
    return this;
  }

  /**
   * Get question
   * @return question
   */
  @javax.annotation.Nullable
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }


  public CreateHITRequest requesterAnnotation(String requesterAnnotation) {
    this.requesterAnnotation = requesterAnnotation;
    return this;
  }

  /**
   * Get requesterAnnotation
   * @return requesterAnnotation
   */
  @javax.annotation.Nullable
  public String getRequesterAnnotation() {
    return requesterAnnotation;
  }

  public void setRequesterAnnotation(String requesterAnnotation) {
    this.requesterAnnotation = requesterAnnotation;
  }


  public CreateHITRequest qualificationRequirements(List qualificationRequirements) {
    this.qualificationRequirements = qualificationRequirements;
    return this;
  }

  /**
   * Get qualificationRequirements
   * @return qualificationRequirements
   */
  @javax.annotation.Nullable
  public List getQualificationRequirements() {
    return qualificationRequirements;
  }

  public void setQualificationRequirements(List qualificationRequirements) {
    this.qualificationRequirements = qualificationRequirements;
  }


  public CreateHITRequest uniqueRequestToken(String uniqueRequestToken) {
    this.uniqueRequestToken = uniqueRequestToken;
    return this;
  }

  /**
   * Get uniqueRequestToken
   * @return uniqueRequestToken
   */
  @javax.annotation.Nullable
  public String getUniqueRequestToken() {
    return uniqueRequestToken;
  }

  public void setUniqueRequestToken(String uniqueRequestToken) {
    this.uniqueRequestToken = uniqueRequestToken;
  }


  public CreateHITRequest assignmentReviewPolicy(CreateHITRequestAssignmentReviewPolicy assignmentReviewPolicy) {
    this.assignmentReviewPolicy = assignmentReviewPolicy;
    return this;
  }

  /**
   * Get assignmentReviewPolicy
   * @return assignmentReviewPolicy
   */
  @javax.annotation.Nullable
  public CreateHITRequestAssignmentReviewPolicy getAssignmentReviewPolicy() {
    return assignmentReviewPolicy;
  }

  public void setAssignmentReviewPolicy(CreateHITRequestAssignmentReviewPolicy assignmentReviewPolicy) {
    this.assignmentReviewPolicy = assignmentReviewPolicy;
  }


  public CreateHITRequest hiTReviewPolicy(CreateHITRequestHITReviewPolicy hiTReviewPolicy) {
    this.hiTReviewPolicy = hiTReviewPolicy;
    return this;
  }

  /**
   * Get hiTReviewPolicy
   * @return hiTReviewPolicy
   */
  @javax.annotation.Nullable
  public CreateHITRequestHITReviewPolicy getHiTReviewPolicy() {
    return hiTReviewPolicy;
  }

  public void setHiTReviewPolicy(CreateHITRequestHITReviewPolicy hiTReviewPolicy) {
    this.hiTReviewPolicy = hiTReviewPolicy;
  }


  public CreateHITRequest hiTLayoutId(String hiTLayoutId) {
    this.hiTLayoutId = hiTLayoutId;
    return this;
  }

  /**
   * Get hiTLayoutId
   * @return hiTLayoutId
   */
  @javax.annotation.Nullable
  public String getHiTLayoutId() {
    return hiTLayoutId;
  }

  public void setHiTLayoutId(String hiTLayoutId) {
    this.hiTLayoutId = hiTLayoutId;
  }


  public CreateHITRequest hiTLayoutParameters(List hiTLayoutParameters) {
    this.hiTLayoutParameters = hiTLayoutParameters;
    return this;
  }

  /**
   * Get hiTLayoutParameters
   * @return hiTLayoutParameters
   */
  @javax.annotation.Nullable
  public List getHiTLayoutParameters() {
    return hiTLayoutParameters;
  }

  public void setHiTLayoutParameters(List hiTLayoutParameters) {
    this.hiTLayoutParameters = hiTLayoutParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHITRequest createHITRequest = (CreateHITRequest) o;
    return Objects.equals(this.maxAssignments, createHITRequest.maxAssignments) &&
        Objects.equals(this.autoApprovalDelayInSeconds, createHITRequest.autoApprovalDelayInSeconds) &&
        Objects.equals(this.lifetimeInSeconds, createHITRequest.lifetimeInSeconds) &&
        Objects.equals(this.assignmentDurationInSeconds, createHITRequest.assignmentDurationInSeconds) &&
        Objects.equals(this.reward, createHITRequest.reward) &&
        Objects.equals(this.title, createHITRequest.title) &&
        Objects.equals(this.keywords, createHITRequest.keywords) &&
        Objects.equals(this.description, createHITRequest.description) &&
        Objects.equals(this.question, createHITRequest.question) &&
        Objects.equals(this.requesterAnnotation, createHITRequest.requesterAnnotation) &&
        Objects.equals(this.qualificationRequirements, createHITRequest.qualificationRequirements) &&
        Objects.equals(this.uniqueRequestToken, createHITRequest.uniqueRequestToken) &&
        Objects.equals(this.assignmentReviewPolicy, createHITRequest.assignmentReviewPolicy) &&
        Objects.equals(this.hiTReviewPolicy, createHITRequest.hiTReviewPolicy) &&
        Objects.equals(this.hiTLayoutId, createHITRequest.hiTLayoutId) &&
        Objects.equals(this.hiTLayoutParameters, createHITRequest.hiTLayoutParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxAssignments, autoApprovalDelayInSeconds, lifetimeInSeconds, assignmentDurationInSeconds, reward, title, keywords, description, question, requesterAnnotation, qualificationRequirements, uniqueRequestToken, assignmentReviewPolicy, hiTReviewPolicy, hiTLayoutId, hiTLayoutParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateHITRequest {\n");
    sb.append("    maxAssignments: ").append(toIndentedString(maxAssignments)).append("\n");
    sb.append("    autoApprovalDelayInSeconds: ").append(toIndentedString(autoApprovalDelayInSeconds)).append("\n");
    sb.append("    lifetimeInSeconds: ").append(toIndentedString(lifetimeInSeconds)).append("\n");
    sb.append("    assignmentDurationInSeconds: ").append(toIndentedString(assignmentDurationInSeconds)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    requesterAnnotation: ").append(toIndentedString(requesterAnnotation)).append("\n");
    sb.append("    qualificationRequirements: ").append(toIndentedString(qualificationRequirements)).append("\n");
    sb.append("    uniqueRequestToken: ").append(toIndentedString(uniqueRequestToken)).append("\n");
    sb.append("    assignmentReviewPolicy: ").append(toIndentedString(assignmentReviewPolicy)).append("\n");
    sb.append("    hiTReviewPolicy: ").append(toIndentedString(hiTReviewPolicy)).append("\n");
    sb.append("    hiTLayoutId: ").append(toIndentedString(hiTLayoutId)).append("\n");
    sb.append("    hiTLayoutParameters: ").append(toIndentedString(hiTLayoutParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxAssignments");
    openapiFields.add("AutoApprovalDelayInSeconds");
    openapiFields.add("LifetimeInSeconds");
    openapiFields.add("AssignmentDurationInSeconds");
    openapiFields.add("Reward");
    openapiFields.add("Title");
    openapiFields.add("Keywords");
    openapiFields.add("Description");
    openapiFields.add("Question");
    openapiFields.add("RequesterAnnotation");
    openapiFields.add("QualificationRequirements");
    openapiFields.add("UniqueRequestToken");
    openapiFields.add("AssignmentReviewPolicy");
    openapiFields.add("HITReviewPolicy");
    openapiFields.add("HITLayoutId");
    openapiFields.add("HITLayoutParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LifetimeInSeconds");
    openapiRequiredFields.add("AssignmentDurationInSeconds");
    openapiRequiredFields.add("Reward");
    openapiRequiredFields.add("Title");
    openapiRequiredFields.add("Description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateHITRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateHITRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateHITRequest is not found in the empty JSON string", CreateHITRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateHITRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateHITRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateHITRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MaxAssignments`
      if (jsonObj.get("MaxAssignments") != null && !jsonObj.get("MaxAssignments").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAssignments"));
      }
      // validate the optional field `AutoApprovalDelayInSeconds`
      if (jsonObj.get("AutoApprovalDelayInSeconds") != null && !jsonObj.get("AutoApprovalDelayInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AutoApprovalDelayInSeconds"));
      }
      // validate the required field `LifetimeInSeconds`
      Integer.validateJsonElement(jsonObj.get("LifetimeInSeconds"));
      // validate the required field `AssignmentDurationInSeconds`
      Integer.validateJsonElement(jsonObj.get("AssignmentDurationInSeconds"));
      // validate the required field `Reward`
      String.validateJsonElement(jsonObj.get("Reward"));
      // validate the required field `Title`
      String.validateJsonElement(jsonObj.get("Title"));
      // validate the optional field `Keywords`
      if (jsonObj.get("Keywords") != null && !jsonObj.get("Keywords").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Keywords"));
      }
      // validate the required field `Description`
      String.validateJsonElement(jsonObj.get("Description"));
      // validate the optional field `Question`
      if (jsonObj.get("Question") != null && !jsonObj.get("Question").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Question"));
      }
      // validate the optional field `RequesterAnnotation`
      if (jsonObj.get("RequesterAnnotation") != null && !jsonObj.get("RequesterAnnotation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RequesterAnnotation"));
      }
      // validate the optional field `QualificationRequirements`
      if (jsonObj.get("QualificationRequirements") != null && !jsonObj.get("QualificationRequirements").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("QualificationRequirements"));
      }
      // validate the optional field `UniqueRequestToken`
      if (jsonObj.get("UniqueRequestToken") != null && !jsonObj.get("UniqueRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UniqueRequestToken"));
      }
      // validate the optional field `AssignmentReviewPolicy`
      if (jsonObj.get("AssignmentReviewPolicy") != null && !jsonObj.get("AssignmentReviewPolicy").isJsonNull()) {
        CreateHITRequestAssignmentReviewPolicy.validateJsonElement(jsonObj.get("AssignmentReviewPolicy"));
      }
      // validate the optional field `HITReviewPolicy`
      if (jsonObj.get("HITReviewPolicy") != null && !jsonObj.get("HITReviewPolicy").isJsonNull()) {
        CreateHITRequestHITReviewPolicy.validateJsonElement(jsonObj.get("HITReviewPolicy"));
      }
      // validate the optional field `HITLayoutId`
      if (jsonObj.get("HITLayoutId") != null && !jsonObj.get("HITLayoutId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HITLayoutId"));
      }
      // validate the optional field `HITLayoutParameters`
      if (jsonObj.get("HITLayoutParameters") != null && !jsonObj.get("HITLayoutParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HITLayoutParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateHITRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateHITRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateHITRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateHITRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateHITRequest>() {
           @Override
           public void write(JsonWriter out, CreateHITRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateHITRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateHITRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateHITRequest
   * @throws IOException if the JSON string is invalid with respect to CreateHITRequest
   */
  public static CreateHITRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateHITRequest.class);
  }

  /**
   * Convert an instance of CreateHITRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

