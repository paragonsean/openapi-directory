/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListReviewPolicyResultsForHITRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListReviewPolicyResultsForHITRequest {
  public static final String SERIALIZED_NAME_HI_T_ID = "HITId";
  @SerializedName(SERIALIZED_NAME_HI_T_ID)
  private String hiTId;

  public static final String SERIALIZED_NAME_POLICY_LEVELS = "PolicyLevels";
  @SerializedName(SERIALIZED_NAME_POLICY_LEVELS)
  private List policyLevels;

  public static final String SERIALIZED_NAME_RETRIEVE_ACTIONS = "RetrieveActions";
  @SerializedName(SERIALIZED_NAME_RETRIEVE_ACTIONS)
  private Boolean retrieveActions;

  public static final String SERIALIZED_NAME_RETRIEVE_RESULTS = "RetrieveResults";
  @SerializedName(SERIALIZED_NAME_RETRIEVE_RESULTS)
  private Boolean retrieveResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListReviewPolicyResultsForHITRequest() {
  }

  public ListReviewPolicyResultsForHITRequest hiTId(String hiTId) {
    this.hiTId = hiTId;
    return this;
  }

  /**
   * Get hiTId
   * @return hiTId
   */
  @javax.annotation.Nonnull
  public String getHiTId() {
    return hiTId;
  }

  public void setHiTId(String hiTId) {
    this.hiTId = hiTId;
  }


  public ListReviewPolicyResultsForHITRequest policyLevels(List policyLevels) {
    this.policyLevels = policyLevels;
    return this;
  }

  /**
   * Get policyLevels
   * @return policyLevels
   */
  @javax.annotation.Nullable
  public List getPolicyLevels() {
    return policyLevels;
  }

  public void setPolicyLevels(List policyLevels) {
    this.policyLevels = policyLevels;
  }


  public ListReviewPolicyResultsForHITRequest retrieveActions(Boolean retrieveActions) {
    this.retrieveActions = retrieveActions;
    return this;
  }

  /**
   * Get retrieveActions
   * @return retrieveActions
   */
  @javax.annotation.Nullable
  public Boolean getRetrieveActions() {
    return retrieveActions;
  }

  public void setRetrieveActions(Boolean retrieveActions) {
    this.retrieveActions = retrieveActions;
  }


  public ListReviewPolicyResultsForHITRequest retrieveResults(Boolean retrieveResults) {
    this.retrieveResults = retrieveResults;
    return this;
  }

  /**
   * Get retrieveResults
   * @return retrieveResults
   */
  @javax.annotation.Nullable
  public Boolean getRetrieveResults() {
    return retrieveResults;
  }

  public void setRetrieveResults(Boolean retrieveResults) {
    this.retrieveResults = retrieveResults;
  }


  public ListReviewPolicyResultsForHITRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListReviewPolicyResultsForHITRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListReviewPolicyResultsForHITRequest listReviewPolicyResultsForHITRequest = (ListReviewPolicyResultsForHITRequest) o;
    return Objects.equals(this.hiTId, listReviewPolicyResultsForHITRequest.hiTId) &&
        Objects.equals(this.policyLevels, listReviewPolicyResultsForHITRequest.policyLevels) &&
        Objects.equals(this.retrieveActions, listReviewPolicyResultsForHITRequest.retrieveActions) &&
        Objects.equals(this.retrieveResults, listReviewPolicyResultsForHITRequest.retrieveResults) &&
        Objects.equals(this.nextToken, listReviewPolicyResultsForHITRequest.nextToken) &&
        Objects.equals(this.maxResults, listReviewPolicyResultsForHITRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hiTId, policyLevels, retrieveActions, retrieveResults, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListReviewPolicyResultsForHITRequest {\n");
    sb.append("    hiTId: ").append(toIndentedString(hiTId)).append("\n");
    sb.append("    policyLevels: ").append(toIndentedString(policyLevels)).append("\n");
    sb.append("    retrieveActions: ").append(toIndentedString(retrieveActions)).append("\n");
    sb.append("    retrieveResults: ").append(toIndentedString(retrieveResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HITId");
    openapiFields.add("PolicyLevels");
    openapiFields.add("RetrieveActions");
    openapiFields.add("RetrieveResults");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HITId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListReviewPolicyResultsForHITRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListReviewPolicyResultsForHITRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListReviewPolicyResultsForHITRequest is not found in the empty JSON string", ListReviewPolicyResultsForHITRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListReviewPolicyResultsForHITRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListReviewPolicyResultsForHITRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListReviewPolicyResultsForHITRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `HITId`
      String.validateJsonElement(jsonObj.get("HITId"));
      // validate the optional field `PolicyLevels`
      if (jsonObj.get("PolicyLevels") != null && !jsonObj.get("PolicyLevels").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PolicyLevels"));
      }
      // validate the optional field `RetrieveActions`
      if (jsonObj.get("RetrieveActions") != null && !jsonObj.get("RetrieveActions").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RetrieveActions"));
      }
      // validate the optional field `RetrieveResults`
      if (jsonObj.get("RetrieveResults") != null && !jsonObj.get("RetrieveResults").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RetrieveResults"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListReviewPolicyResultsForHITRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListReviewPolicyResultsForHITRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListReviewPolicyResultsForHITRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListReviewPolicyResultsForHITRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListReviewPolicyResultsForHITRequest>() {
           @Override
           public void write(JsonWriter out, ListReviewPolicyResultsForHITRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListReviewPolicyResultsForHITRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListReviewPolicyResultsForHITRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListReviewPolicyResultsForHITRequest
   * @throws IOException if the JSON string is invalid with respect to ListReviewPolicyResultsForHITRequest
   */
  public static ListReviewPolicyResultsForHITRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListReviewPolicyResultsForHITRequest.class);
  }

  /**
   * Convert an instance of ListReviewPolicyResultsForHITRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

