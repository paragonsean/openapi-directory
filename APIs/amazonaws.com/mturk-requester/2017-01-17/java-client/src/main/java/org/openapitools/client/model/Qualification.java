/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Locale;
import org.openapitools.client.model.QualificationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Qualification data structure represents a Qualification assigned to a user, including the Qualification type and the value (score).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Qualification {
  public static final String SERIALIZED_NAME_QUALIFICATION_TYPE_ID = "QualificationTypeId";
  @SerializedName(SERIALIZED_NAME_QUALIFICATION_TYPE_ID)
  private String qualificationTypeId;

  public static final String SERIALIZED_NAME_WORKER_ID = "WorkerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public static final String SERIALIZED_NAME_GRANT_TIME = "GrantTime";
  @SerializedName(SERIALIZED_NAME_GRANT_TIME)
  private OffsetDateTime grantTime;

  public static final String SERIALIZED_NAME_INTEGER_VALUE = "IntegerValue";
  @SerializedName(SERIALIZED_NAME_INTEGER_VALUE)
  private Integer integerValue;

  public static final String SERIALIZED_NAME_LOCALE_VALUE = "LocaleValue";
  @SerializedName(SERIALIZED_NAME_LOCALE_VALUE)
  private Locale localeValue;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private QualificationStatus status;

  public Qualification() {
  }

  public Qualification qualificationTypeId(String qualificationTypeId) {
    this.qualificationTypeId = qualificationTypeId;
    return this;
  }

  /**
   * Get qualificationTypeId
   * @return qualificationTypeId
   */
  @javax.annotation.Nullable
  public String getQualificationTypeId() {
    return qualificationTypeId;
  }

  public void setQualificationTypeId(String qualificationTypeId) {
    this.qualificationTypeId = qualificationTypeId;
  }


  public Qualification workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * Get workerId
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }


  public Qualification grantTime(OffsetDateTime grantTime) {
    this.grantTime = grantTime;
    return this;
  }

  /**
   * Get grantTime
   * @return grantTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGrantTime() {
    return grantTime;
  }

  public void setGrantTime(OffsetDateTime grantTime) {
    this.grantTime = grantTime;
  }


  public Qualification integerValue(Integer integerValue) {
    this.integerValue = integerValue;
    return this;
  }

  /**
   * Get integerValue
   * @return integerValue
   */
  @javax.annotation.Nullable
  public Integer getIntegerValue() {
    return integerValue;
  }

  public void setIntegerValue(Integer integerValue) {
    this.integerValue = integerValue;
  }


  public Qualification localeValue(Locale localeValue) {
    this.localeValue = localeValue;
    return this;
  }

  /**
   * Get localeValue
   * @return localeValue
   */
  @javax.annotation.Nullable
  public Locale getLocaleValue() {
    return localeValue;
  }

  public void setLocaleValue(Locale localeValue) {
    this.localeValue = localeValue;
  }


  public Qualification status(QualificationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public QualificationStatus getStatus() {
    return status;
  }

  public void setStatus(QualificationStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Qualification qualification = (Qualification) o;
    return Objects.equals(this.qualificationTypeId, qualification.qualificationTypeId) &&
        Objects.equals(this.workerId, qualification.workerId) &&
        Objects.equals(this.grantTime, qualification.grantTime) &&
        Objects.equals(this.integerValue, qualification.integerValue) &&
        Objects.equals(this.localeValue, qualification.localeValue) &&
        Objects.equals(this.status, qualification.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qualificationTypeId, workerId, grantTime, integerValue, localeValue, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Qualification {\n");
    sb.append("    qualificationTypeId: ").append(toIndentedString(qualificationTypeId)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    grantTime: ").append(toIndentedString(grantTime)).append("\n");
    sb.append("    integerValue: ").append(toIndentedString(integerValue)).append("\n");
    sb.append("    localeValue: ").append(toIndentedString(localeValue)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QualificationTypeId");
    openapiFields.add("WorkerId");
    openapiFields.add("GrantTime");
    openapiFields.add("IntegerValue");
    openapiFields.add("LocaleValue");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Qualification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Qualification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Qualification is not found in the empty JSON string", Qualification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Qualification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Qualification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `QualificationTypeId`
      if (jsonObj.get("QualificationTypeId") != null && !jsonObj.get("QualificationTypeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QualificationTypeId"));
      }
      // validate the optional field `WorkerId`
      if (jsonObj.get("WorkerId") != null && !jsonObj.get("WorkerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkerId"));
      }
      // validate the optional field `GrantTime`
      if (jsonObj.get("GrantTime") != null && !jsonObj.get("GrantTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("GrantTime"));
      }
      // validate the optional field `IntegerValue`
      if (jsonObj.get("IntegerValue") != null && !jsonObj.get("IntegerValue").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IntegerValue"));
      }
      // validate the optional field `LocaleValue`
      if (jsonObj.get("LocaleValue") != null && !jsonObj.get("LocaleValue").isJsonNull()) {
        Locale.validateJsonElement(jsonObj.get("LocaleValue"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        QualificationStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Qualification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Qualification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Qualification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Qualification.class));

       return (TypeAdapter<T>) new TypeAdapter<Qualification>() {
           @Override
           public void write(JsonWriter out, Qualification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Qualification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Qualification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Qualification
   * @throws IOException if the JSON string is invalid with respect to Qualification
   */
  public static Qualification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Qualification.class);
  }

  /**
   * Convert an instance of Qualification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

