/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Comparator;
import org.openapitools.client.model.HITAccessActions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The QualificationRequirement data structure describes a Qualification that a Worker must have before the Worker is allowed to accept a HIT. A requirement may optionally state that a Worker must have the Qualification in order to preview the HIT, or see the HIT in search results. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QualificationRequirement {
  public static final String SERIALIZED_NAME_QUALIFICATION_TYPE_ID = "QualificationTypeId";
  @SerializedName(SERIALIZED_NAME_QUALIFICATION_TYPE_ID)
  private String qualificationTypeId;

  public static final String SERIALIZED_NAME_COMPARATOR = "Comparator";
  @SerializedName(SERIALIZED_NAME_COMPARATOR)
  private Comparator comparator;

  public static final String SERIALIZED_NAME_INTEGER_VALUES = "IntegerValues";
  @SerializedName(SERIALIZED_NAME_INTEGER_VALUES)
  private List integerValues;

  public static final String SERIALIZED_NAME_LOCALE_VALUES = "LocaleValues";
  @SerializedName(SERIALIZED_NAME_LOCALE_VALUES)
  private List localeValues;

  public static final String SERIALIZED_NAME_REQUIRED_TO_PREVIEW = "RequiredToPreview";
  @SerializedName(SERIALIZED_NAME_REQUIRED_TO_PREVIEW)
  private Boolean requiredToPreview;

  public static final String SERIALIZED_NAME_ACTIONS_GUARDED = "ActionsGuarded";
  @SerializedName(SERIALIZED_NAME_ACTIONS_GUARDED)
  private HITAccessActions actionsGuarded;

  public QualificationRequirement() {
  }

  public QualificationRequirement qualificationTypeId(String qualificationTypeId) {
    this.qualificationTypeId = qualificationTypeId;
    return this;
  }

  /**
   * Get qualificationTypeId
   * @return qualificationTypeId
   */
  @javax.annotation.Nonnull
  public String getQualificationTypeId() {
    return qualificationTypeId;
  }

  public void setQualificationTypeId(String qualificationTypeId) {
    this.qualificationTypeId = qualificationTypeId;
  }


  public QualificationRequirement comparator(Comparator comparator) {
    this.comparator = comparator;
    return this;
  }

  /**
   * Get comparator
   * @return comparator
   */
  @javax.annotation.Nonnull
  public Comparator getComparator() {
    return comparator;
  }

  public void setComparator(Comparator comparator) {
    this.comparator = comparator;
  }


  public QualificationRequirement integerValues(List integerValues) {
    this.integerValues = integerValues;
    return this;
  }

  /**
   * Get integerValues
   * @return integerValues
   */
  @javax.annotation.Nullable
  public List getIntegerValues() {
    return integerValues;
  }

  public void setIntegerValues(List integerValues) {
    this.integerValues = integerValues;
  }


  public QualificationRequirement localeValues(List localeValues) {
    this.localeValues = localeValues;
    return this;
  }

  /**
   * Get localeValues
   * @return localeValues
   */
  @javax.annotation.Nullable
  public List getLocaleValues() {
    return localeValues;
  }

  public void setLocaleValues(List localeValues) {
    this.localeValues = localeValues;
  }


  public QualificationRequirement requiredToPreview(Boolean requiredToPreview) {
    this.requiredToPreview = requiredToPreview;
    return this;
  }

  /**
   * Get requiredToPreview
   * @return requiredToPreview
   */
  @javax.annotation.Nullable
  public Boolean getRequiredToPreview() {
    return requiredToPreview;
  }

  public void setRequiredToPreview(Boolean requiredToPreview) {
    this.requiredToPreview = requiredToPreview;
  }


  public QualificationRequirement actionsGuarded(HITAccessActions actionsGuarded) {
    this.actionsGuarded = actionsGuarded;
    return this;
  }

  /**
   * Get actionsGuarded
   * @return actionsGuarded
   */
  @javax.annotation.Nullable
  public HITAccessActions getActionsGuarded() {
    return actionsGuarded;
  }

  public void setActionsGuarded(HITAccessActions actionsGuarded) {
    this.actionsGuarded = actionsGuarded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QualificationRequirement qualificationRequirement = (QualificationRequirement) o;
    return Objects.equals(this.qualificationTypeId, qualificationRequirement.qualificationTypeId) &&
        Objects.equals(this.comparator, qualificationRequirement.comparator) &&
        Objects.equals(this.integerValues, qualificationRequirement.integerValues) &&
        Objects.equals(this.localeValues, qualificationRequirement.localeValues) &&
        Objects.equals(this.requiredToPreview, qualificationRequirement.requiredToPreview) &&
        Objects.equals(this.actionsGuarded, qualificationRequirement.actionsGuarded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qualificationTypeId, comparator, integerValues, localeValues, requiredToPreview, actionsGuarded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QualificationRequirement {\n");
    sb.append("    qualificationTypeId: ").append(toIndentedString(qualificationTypeId)).append("\n");
    sb.append("    comparator: ").append(toIndentedString(comparator)).append("\n");
    sb.append("    integerValues: ").append(toIndentedString(integerValues)).append("\n");
    sb.append("    localeValues: ").append(toIndentedString(localeValues)).append("\n");
    sb.append("    requiredToPreview: ").append(toIndentedString(requiredToPreview)).append("\n");
    sb.append("    actionsGuarded: ").append(toIndentedString(actionsGuarded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QualificationTypeId");
    openapiFields.add("Comparator");
    openapiFields.add("IntegerValues");
    openapiFields.add("LocaleValues");
    openapiFields.add("RequiredToPreview");
    openapiFields.add("ActionsGuarded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("QualificationTypeId");
    openapiRequiredFields.add("Comparator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QualificationRequirement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QualificationRequirement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QualificationRequirement is not found in the empty JSON string", QualificationRequirement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QualificationRequirement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QualificationRequirement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QualificationRequirement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `QualificationTypeId`
      String.validateJsonElement(jsonObj.get("QualificationTypeId"));
      // validate the required field `Comparator`
      Comparator.validateJsonElement(jsonObj.get("Comparator"));
      // validate the optional field `IntegerValues`
      if (jsonObj.get("IntegerValues") != null && !jsonObj.get("IntegerValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IntegerValues"));
      }
      // validate the optional field `LocaleValues`
      if (jsonObj.get("LocaleValues") != null && !jsonObj.get("LocaleValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LocaleValues"));
      }
      // validate the optional field `RequiredToPreview`
      if (jsonObj.get("RequiredToPreview") != null && !jsonObj.get("RequiredToPreview").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RequiredToPreview"));
      }
      // validate the optional field `ActionsGuarded`
      if (jsonObj.get("ActionsGuarded") != null && !jsonObj.get("ActionsGuarded").isJsonNull()) {
        HITAccessActions.validateJsonElement(jsonObj.get("ActionsGuarded"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QualificationRequirement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QualificationRequirement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QualificationRequirement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QualificationRequirement.class));

       return (TypeAdapter<T>) new TypeAdapter<QualificationRequirement>() {
           @Override
           public void write(JsonWriter out, QualificationRequirement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QualificationRequirement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QualificationRequirement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QualificationRequirement
   * @throws IOException if the JSON string is invalid with respect to QualificationRequirement
   */
  public static QualificationRequirement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QualificationRequirement.class);
  }

  /**
   * Convert an instance of QualificationRequirement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

