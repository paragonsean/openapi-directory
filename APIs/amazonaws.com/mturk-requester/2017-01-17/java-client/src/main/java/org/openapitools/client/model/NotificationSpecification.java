/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NotificationTransport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The NotificationSpecification data structure describes a HIT event notification for a HIT type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationSpecification {
  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_TRANSPORT = "Transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private NotificationTransport transport;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_EVENT_TYPES = "EventTypes";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  private List eventTypes;

  public NotificationSpecification() {
  }

  public NotificationSpecification destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public NotificationSpecification transport(NotificationTransport transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   */
  @javax.annotation.Nonnull
  public NotificationTransport getTransport() {
    return transport;
  }

  public void setTransport(NotificationTransport transport) {
    this.transport = transport;
  }


  public NotificationSpecification version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public NotificationSpecification eventTypes(List eventTypes) {
    this.eventTypes = eventTypes;
    return this;
  }

  /**
   * Get eventTypes
   * @return eventTypes
   */
  @javax.annotation.Nonnull
  public List getEventTypes() {
    return eventTypes;
  }

  public void setEventTypes(List eventTypes) {
    this.eventTypes = eventTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationSpecification notificationSpecification = (NotificationSpecification) o;
    return Objects.equals(this.destination, notificationSpecification.destination) &&
        Objects.equals(this.transport, notificationSpecification.transport) &&
        Objects.equals(this.version, notificationSpecification.version) &&
        Objects.equals(this.eventTypes, notificationSpecification.eventTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, transport, version, eventTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationSpecification {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Destination");
    openapiFields.add("Transport");
    openapiFields.add("Version");
    openapiFields.add("EventTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Destination");
    openapiRequiredFields.add("Transport");
    openapiRequiredFields.add("Version");
    openapiRequiredFields.add("EventTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationSpecification is not found in the empty JSON string", NotificationSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Destination`
      String.validateJsonElement(jsonObj.get("Destination"));
      // validate the required field `Transport`
      NotificationTransport.validateJsonElement(jsonObj.get("Transport"));
      // validate the required field `Version`
      String.validateJsonElement(jsonObj.get("Version"));
      // validate the required field `EventTypes`
      List.validateJsonElement(jsonObj.get("EventTypes"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationSpecification>() {
           @Override
           public void write(JsonWriter out, NotificationSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationSpecification
   * @throws IOException if the JSON string is invalid with respect to NotificationSpecification
   */
  public static NotificationSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationSpecification.class);
  }

  /**
   * Convert an instance of NotificationSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

