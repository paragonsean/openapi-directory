/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReviewActionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Both the AssignmentReviewReport and the HITReviewReport elements contains the ReviewActionDetail data structure. This structure is returned multiple times for each action specified in the Review Policy. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReviewActionDetail {
  public static final String SERIALIZED_NAME_ACTION_ID = "ActionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private String actionId;

  public static final String SERIALIZED_NAME_ACTION_NAME = "ActionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  public static final String SERIALIZED_NAME_TARGET_ID = "TargetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_TARGET_TYPE = "TargetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private String targetType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReviewActionStatus status;

  public static final String SERIALIZED_NAME_COMPLETE_TIME = "CompleteTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_TIME)
  private OffsetDateTime completeTime;

  public static final String SERIALIZED_NAME_RESULT = "Result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public ReviewActionDetail() {
  }

  public ReviewActionDetail actionId(String actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * @return actionId
   */
  @javax.annotation.Nullable
  public String getActionId() {
    return actionId;
  }

  public void setActionId(String actionId) {
    this.actionId = actionId;
  }


  public ReviewActionDetail actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Get actionName
   * @return actionName
   */
  @javax.annotation.Nullable
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public ReviewActionDetail targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Get targetId
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public ReviewActionDetail targetType(String targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Get targetType
   * @return targetType
   */
  @javax.annotation.Nullable
  public String getTargetType() {
    return targetType;
  }

  public void setTargetType(String targetType) {
    this.targetType = targetType;
  }


  public ReviewActionDetail status(ReviewActionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ReviewActionStatus getStatus() {
    return status;
  }

  public void setStatus(ReviewActionStatus status) {
    this.status = status;
  }


  public ReviewActionDetail completeTime(OffsetDateTime completeTime) {
    this.completeTime = completeTime;
    return this;
  }

  /**
   * Get completeTime
   * @return completeTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompleteTime() {
    return completeTime;
  }

  public void setCompleteTime(OffsetDateTime completeTime) {
    this.completeTime = completeTime;
  }


  public ReviewActionDetail result(String result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public ReviewActionDetail errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReviewActionDetail reviewActionDetail = (ReviewActionDetail) o;
    return Objects.equals(this.actionId, reviewActionDetail.actionId) &&
        Objects.equals(this.actionName, reviewActionDetail.actionName) &&
        Objects.equals(this.targetId, reviewActionDetail.targetId) &&
        Objects.equals(this.targetType, reviewActionDetail.targetType) &&
        Objects.equals(this.status, reviewActionDetail.status) &&
        Objects.equals(this.completeTime, reviewActionDetail.completeTime) &&
        Objects.equals(this.result, reviewActionDetail.result) &&
        Objects.equals(this.errorCode, reviewActionDetail.errorCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, actionName, targetId, targetType, status, completeTime, result, errorCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReviewActionDetail {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    completeTime: ").append(toIndentedString(completeTime)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionId");
    openapiFields.add("ActionName");
    openapiFields.add("TargetId");
    openapiFields.add("TargetType");
    openapiFields.add("Status");
    openapiFields.add("CompleteTime");
    openapiFields.add("Result");
    openapiFields.add("ErrorCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReviewActionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReviewActionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReviewActionDetail is not found in the empty JSON string", ReviewActionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReviewActionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReviewActionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActionId`
      if (jsonObj.get("ActionId") != null && !jsonObj.get("ActionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionId"));
      }
      // validate the optional field `ActionName`
      if (jsonObj.get("ActionName") != null && !jsonObj.get("ActionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionName"));
      }
      // validate the optional field `TargetId`
      if (jsonObj.get("TargetId") != null && !jsonObj.get("TargetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetId"));
      }
      // validate the optional field `TargetType`
      if (jsonObj.get("TargetType") != null && !jsonObj.get("TargetType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ReviewActionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CompleteTime`
      if (jsonObj.get("CompleteTime") != null && !jsonObj.get("CompleteTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompleteTime"));
      }
      // validate the optional field `Result`
      if (jsonObj.get("Result") != null && !jsonObj.get("Result").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Result"));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReviewActionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReviewActionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReviewActionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReviewActionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ReviewActionDetail>() {
           @Override
           public void write(JsonWriter out, ReviewActionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReviewActionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReviewActionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReviewActionDetail
   * @throws IOException if the JSON string is invalid with respect to ReviewActionDetail
   */
  public static ReviewActionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReviewActionDetail.class);
  }

  /**
   * Convert an instance of ReviewActionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

