/*
 * Amazon Mechanical Turk
 * <fullname>Amazon Mechanical Turk API Reference</fullname>
 *
 * The version of the OpenAPI document: 2017-01-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AssignmentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The Assignment data structure represents a single assignment of a HIT to a Worker. The assignment tracks the Worker&#39;s efforts to complete the HIT, and contains the results for later retrieval. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:46.282490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Assignment {
  public static final String SERIALIZED_NAME_ASSIGNMENT_ID = "AssignmentId";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_ID)
  private String assignmentId;

  public static final String SERIALIZED_NAME_WORKER_ID = "WorkerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public static final String SERIALIZED_NAME_HI_T_ID = "HITId";
  @SerializedName(SERIALIZED_NAME_HI_T_ID)
  private String hiTId;

  public static final String SERIALIZED_NAME_ASSIGNMENT_STATUS = "AssignmentStatus";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_STATUS)
  private AssignmentStatus assignmentStatus;

  public static final String SERIALIZED_NAME_AUTO_APPROVAL_TIME = "AutoApprovalTime";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVAL_TIME)
  private OffsetDateTime autoApprovalTime;

  public static final String SERIALIZED_NAME_ACCEPT_TIME = "AcceptTime";
  @SerializedName(SERIALIZED_NAME_ACCEPT_TIME)
  private OffsetDateTime acceptTime;

  public static final String SERIALIZED_NAME_SUBMIT_TIME = "SubmitTime";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME)
  private OffsetDateTime submitTime;

  public static final String SERIALIZED_NAME_APPROVAL_TIME = "ApprovalTime";
  @SerializedName(SERIALIZED_NAME_APPROVAL_TIME)
  private OffsetDateTime approvalTime;

  public static final String SERIALIZED_NAME_REJECTION_TIME = "RejectionTime";
  @SerializedName(SERIALIZED_NAME_REJECTION_TIME)
  private OffsetDateTime rejectionTime;

  public static final String SERIALIZED_NAME_DEADLINE = "Deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private OffsetDateTime deadline;

  public static final String SERIALIZED_NAME_ANSWER = "Answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private String answer;

  public static final String SERIALIZED_NAME_REQUESTER_FEEDBACK = "RequesterFeedback";
  @SerializedName(SERIALIZED_NAME_REQUESTER_FEEDBACK)
  private String requesterFeedback;

  public Assignment() {
  }

  public Assignment assignmentId(String assignmentId) {
    this.assignmentId = assignmentId;
    return this;
  }

  /**
   * Get assignmentId
   * @return assignmentId
   */
  @javax.annotation.Nullable
  public String getAssignmentId() {
    return assignmentId;
  }

  public void setAssignmentId(String assignmentId) {
    this.assignmentId = assignmentId;
  }


  public Assignment workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * Get workerId
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }


  public Assignment hiTId(String hiTId) {
    this.hiTId = hiTId;
    return this;
  }

  /**
   * Get hiTId
   * @return hiTId
   */
  @javax.annotation.Nullable
  public String getHiTId() {
    return hiTId;
  }

  public void setHiTId(String hiTId) {
    this.hiTId = hiTId;
  }


  public Assignment assignmentStatus(AssignmentStatus assignmentStatus) {
    this.assignmentStatus = assignmentStatus;
    return this;
  }

  /**
   * Get assignmentStatus
   * @return assignmentStatus
   */
  @javax.annotation.Nullable
  public AssignmentStatus getAssignmentStatus() {
    return assignmentStatus;
  }

  public void setAssignmentStatus(AssignmentStatus assignmentStatus) {
    this.assignmentStatus = assignmentStatus;
  }


  public Assignment autoApprovalTime(OffsetDateTime autoApprovalTime) {
    this.autoApprovalTime = autoApprovalTime;
    return this;
  }

  /**
   * Get autoApprovalTime
   * @return autoApprovalTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAutoApprovalTime() {
    return autoApprovalTime;
  }

  public void setAutoApprovalTime(OffsetDateTime autoApprovalTime) {
    this.autoApprovalTime = autoApprovalTime;
  }


  public Assignment acceptTime(OffsetDateTime acceptTime) {
    this.acceptTime = acceptTime;
    return this;
  }

  /**
   * Get acceptTime
   * @return acceptTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAcceptTime() {
    return acceptTime;
  }

  public void setAcceptTime(OffsetDateTime acceptTime) {
    this.acceptTime = acceptTime;
  }


  public Assignment submitTime(OffsetDateTime submitTime) {
    this.submitTime = submitTime;
    return this;
  }

  /**
   * Get submitTime
   * @return submitTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmitTime() {
    return submitTime;
  }

  public void setSubmitTime(OffsetDateTime submitTime) {
    this.submitTime = submitTime;
  }


  public Assignment approvalTime(OffsetDateTime approvalTime) {
    this.approvalTime = approvalTime;
    return this;
  }

  /**
   * Get approvalTime
   * @return approvalTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApprovalTime() {
    return approvalTime;
  }

  public void setApprovalTime(OffsetDateTime approvalTime) {
    this.approvalTime = approvalTime;
  }


  public Assignment rejectionTime(OffsetDateTime rejectionTime) {
    this.rejectionTime = rejectionTime;
    return this;
  }

  /**
   * Get rejectionTime
   * @return rejectionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRejectionTime() {
    return rejectionTime;
  }

  public void setRejectionTime(OffsetDateTime rejectionTime) {
    this.rejectionTime = rejectionTime;
  }


  public Assignment deadline(OffsetDateTime deadline) {
    this.deadline = deadline;
    return this;
  }

  /**
   * Get deadline
   * @return deadline
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeadline() {
    return deadline;
  }

  public void setDeadline(OffsetDateTime deadline) {
    this.deadline = deadline;
  }


  public Assignment answer(String answer) {
    this.answer = answer;
    return this;
  }

  /**
   * Get answer
   * @return answer
   */
  @javax.annotation.Nullable
  public String getAnswer() {
    return answer;
  }

  public void setAnswer(String answer) {
    this.answer = answer;
  }


  public Assignment requesterFeedback(String requesterFeedback) {
    this.requesterFeedback = requesterFeedback;
    return this;
  }

  /**
   * Get requesterFeedback
   * @return requesterFeedback
   */
  @javax.annotation.Nullable
  public String getRequesterFeedback() {
    return requesterFeedback;
  }

  public void setRequesterFeedback(String requesterFeedback) {
    this.requesterFeedback = requesterFeedback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assignment assignment = (Assignment) o;
    return Objects.equals(this.assignmentId, assignment.assignmentId) &&
        Objects.equals(this.workerId, assignment.workerId) &&
        Objects.equals(this.hiTId, assignment.hiTId) &&
        Objects.equals(this.assignmentStatus, assignment.assignmentStatus) &&
        Objects.equals(this.autoApprovalTime, assignment.autoApprovalTime) &&
        Objects.equals(this.acceptTime, assignment.acceptTime) &&
        Objects.equals(this.submitTime, assignment.submitTime) &&
        Objects.equals(this.approvalTime, assignment.approvalTime) &&
        Objects.equals(this.rejectionTime, assignment.rejectionTime) &&
        Objects.equals(this.deadline, assignment.deadline) &&
        Objects.equals(this.answer, assignment.answer) &&
        Objects.equals(this.requesterFeedback, assignment.requesterFeedback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignmentId, workerId, hiTId, assignmentStatus, autoApprovalTime, acceptTime, submitTime, approvalTime, rejectionTime, deadline, answer, requesterFeedback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assignment {\n");
    sb.append("    assignmentId: ").append(toIndentedString(assignmentId)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("    hiTId: ").append(toIndentedString(hiTId)).append("\n");
    sb.append("    assignmentStatus: ").append(toIndentedString(assignmentStatus)).append("\n");
    sb.append("    autoApprovalTime: ").append(toIndentedString(autoApprovalTime)).append("\n");
    sb.append("    acceptTime: ").append(toIndentedString(acceptTime)).append("\n");
    sb.append("    submitTime: ").append(toIndentedString(submitTime)).append("\n");
    sb.append("    approvalTime: ").append(toIndentedString(approvalTime)).append("\n");
    sb.append("    rejectionTime: ").append(toIndentedString(rejectionTime)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    requesterFeedback: ").append(toIndentedString(requesterFeedback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssignmentId");
    openapiFields.add("WorkerId");
    openapiFields.add("HITId");
    openapiFields.add("AssignmentStatus");
    openapiFields.add("AutoApprovalTime");
    openapiFields.add("AcceptTime");
    openapiFields.add("SubmitTime");
    openapiFields.add("ApprovalTime");
    openapiFields.add("RejectionTime");
    openapiFields.add("Deadline");
    openapiFields.add("Answer");
    openapiFields.add("RequesterFeedback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Assignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assignment is not found in the empty JSON string", Assignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssignmentId`
      if (jsonObj.get("AssignmentId") != null && !jsonObj.get("AssignmentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssignmentId"));
      }
      // validate the optional field `WorkerId`
      if (jsonObj.get("WorkerId") != null && !jsonObj.get("WorkerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkerId"));
      }
      // validate the optional field `HITId`
      if (jsonObj.get("HITId") != null && !jsonObj.get("HITId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HITId"));
      }
      // validate the optional field `AssignmentStatus`
      if (jsonObj.get("AssignmentStatus") != null && !jsonObj.get("AssignmentStatus").isJsonNull()) {
        AssignmentStatus.validateJsonElement(jsonObj.get("AssignmentStatus"));
      }
      // validate the optional field `AutoApprovalTime`
      if (jsonObj.get("AutoApprovalTime") != null && !jsonObj.get("AutoApprovalTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AutoApprovalTime"));
      }
      // validate the optional field `AcceptTime`
      if (jsonObj.get("AcceptTime") != null && !jsonObj.get("AcceptTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AcceptTime"));
      }
      // validate the optional field `SubmitTime`
      if (jsonObj.get("SubmitTime") != null && !jsonObj.get("SubmitTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmitTime"));
      }
      // validate the optional field `ApprovalTime`
      if (jsonObj.get("ApprovalTime") != null && !jsonObj.get("ApprovalTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ApprovalTime"));
      }
      // validate the optional field `RejectionTime`
      if (jsonObj.get("RejectionTime") != null && !jsonObj.get("RejectionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RejectionTime"));
      }
      // validate the optional field `Deadline`
      if (jsonObj.get("Deadline") != null && !jsonObj.get("Deadline").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Deadline"));
      }
      // validate the optional field `Answer`
      if (jsonObj.get("Answer") != null && !jsonObj.get("Answer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Answer"));
      }
      // validate the optional field `RequesterFeedback`
      if (jsonObj.get("RequesterFeedback") != null && !jsonObj.get("RequesterFeedback").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RequesterFeedback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assignment.class));

       return (TypeAdapter<T>) new TypeAdapter<Assignment>() {
           @Override
           public void write(JsonWriter out, Assignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Assignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Assignment
   * @throws IOException if the JSON string is invalid with respect to Assignment
   */
  public static Assignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assignment.class);
  }

  /**
   * Convert an instance of Assignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

