/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendationSummary.h
 *
 * Information about recommendations.
 */

#ifndef OAIRecommendationSummary_H
#define OAIRecommendationSummary_H

#include <QJsonObject>

#include "OAIRecommendationCategory.h"
#include "OAIRecommendationSummary_RuleMetadata.h"
#include "OAISeverity.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecommendationSummary_RuleMetadata;

class OAIRecommendationSummary : public OAIObject {
public:
    OAIRecommendationSummary();
    OAIRecommendationSummary(QString json);
    ~OAIRecommendationSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilePath() const;
    void setFilePath(const QString &file_path);
    bool is_file_path_Set() const;
    bool is_file_path_Valid() const;

    QString getRecommendationId() const;
    void setRecommendationId(const QString &recommendation_id);
    bool is_recommendation_id_Set() const;
    bool is_recommendation_id_Valid() const;

    qint32 getStartLine() const;
    void setStartLine(const qint32 &start_line);
    bool is_start_line_Set() const;
    bool is_start_line_Valid() const;

    qint32 getEndLine() const;
    void setEndLine(const qint32 &end_line);
    bool is_end_line_Set() const;
    bool is_end_line_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIRecommendationCategory getRecommendationCategory() const;
    void setRecommendationCategory(const OAIRecommendationCategory &recommendation_category);
    bool is_recommendation_category_Set() const;
    bool is_recommendation_category_Valid() const;

    OAIRecommendationSummary_RuleMetadata getRuleMetadata() const;
    void setRuleMetadata(const OAIRecommendationSummary_RuleMetadata &rule_metadata);
    bool is_rule_metadata_Set() const;
    bool is_rule_metadata_Valid() const;

    OAISeverity getSeverity() const;
    void setSeverity(const OAISeverity &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_path;
    bool m_file_path_isSet;
    bool m_file_path_isValid;

    QString m_recommendation_id;
    bool m_recommendation_id_isSet;
    bool m_recommendation_id_isValid;

    qint32 m_start_line;
    bool m_start_line_isSet;
    bool m_start_line_isValid;

    qint32 m_end_line;
    bool m_end_line_isSet;
    bool m_end_line_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIRecommendationCategory m_recommendation_category;
    bool m_recommendation_category_isSet;
    bool m_recommendation_category_isValid;

    OAIRecommendationSummary_RuleMetadata m_rule_metadata;
    bool m_rule_metadata_isSet;
    bool m_rule_metadata_isValid;

    OAISeverity m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendationSummary)

#endif // OAIRecommendationSummary_H
