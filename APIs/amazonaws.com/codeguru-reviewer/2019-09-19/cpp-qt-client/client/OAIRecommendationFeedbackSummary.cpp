/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationFeedbackSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationFeedbackSummary::OAIRecommendationFeedbackSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationFeedbackSummary::OAIRecommendationFeedbackSummary() {
    this->initializeModel();
}

OAIRecommendationFeedbackSummary::~OAIRecommendationFeedbackSummary() {}

void OAIRecommendationFeedbackSummary::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIRecommendationFeedbackSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationFeedbackSummary::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("Reactions")]);
    m_reactions_isSet = !json[QString("Reactions")].isNull() && m_reactions_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIRecommendationFeedbackSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationFeedbackSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_reactions.isSet()) {
        obj.insert(QString("Reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIRecommendationFeedbackSummary::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRecommendationFeedbackSummary::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRecommendationFeedbackSummary::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRecommendationFeedbackSummary::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QList OAIRecommendationFeedbackSummary::getReactions() const {
    return m_reactions;
}
void OAIRecommendationFeedbackSummary::setReactions(const QList &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIRecommendationFeedbackSummary::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIRecommendationFeedbackSummary::is_reactions_Valid() const{
    return m_reactions_isValid;
}

QString OAIRecommendationFeedbackSummary::getUserId() const {
    return m_user_id;
}
void OAIRecommendationFeedbackSummary::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIRecommendationFeedbackSummary::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRecommendationFeedbackSummary::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIRecommendationFeedbackSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationFeedbackSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
