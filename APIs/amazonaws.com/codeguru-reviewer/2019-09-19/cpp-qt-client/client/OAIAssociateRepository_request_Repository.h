/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssociateRepository_request_Repository.h
 *
 * Information about an associated Amazon Web Services CodeCommit repository or an associated repository that is managed by Amazon Web Services CodeStar Connections (for example, Bitbucket). This &lt;code&gt;Repository&lt;/code&gt; object is not used if your source code is in an associated GitHub repository.
 */

#ifndef OAIAssociateRepository_request_Repository_H
#define OAIAssociateRepository_request_Repository_H

#include <QJsonObject>

#include "OAIAssociateRepository_request_Repository_Bitbucket.h"
#include "OAIAssociateRepository_request_Repository_CodeCommit.h"
#include "OAIAssociateRepository_request_Repository_GitHubEnterpriseServer.h"
#include "OAIS3Repository.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssociateRepository_request_Repository_CodeCommit;
class OAIAssociateRepository_request_Repository_Bitbucket;
class OAIAssociateRepository_request_Repository_GitHubEnterpriseServer;
class OAIS3Repository;

class OAIAssociateRepository_request_Repository : public OAIObject {
public:
    OAIAssociateRepository_request_Repository();
    OAIAssociateRepository_request_Repository(QString json);
    ~OAIAssociateRepository_request_Repository() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAssociateRepository_request_Repository_CodeCommit getCodeCommit() const;
    void setCodeCommit(const OAIAssociateRepository_request_Repository_CodeCommit &code_commit);
    bool is_code_commit_Set() const;
    bool is_code_commit_Valid() const;

    OAIAssociateRepository_request_Repository_Bitbucket getBitbucket() const;
    void setBitbucket(const OAIAssociateRepository_request_Repository_Bitbucket &bitbucket);
    bool is_bitbucket_Set() const;
    bool is_bitbucket_Valid() const;

    OAIAssociateRepository_request_Repository_GitHubEnterpriseServer getGitHubEnterpriseServer() const;
    void setGitHubEnterpriseServer(const OAIAssociateRepository_request_Repository_GitHubEnterpriseServer &git_hub_enterprise_server);
    bool is_git_hub_enterprise_server_Set() const;
    bool is_git_hub_enterprise_server_Valid() const;

    OAIS3Repository getS3Bucket() const;
    void setS3Bucket(const OAIS3Repository &s3_bucket);
    bool is_s3_bucket_Set() const;
    bool is_s3_bucket_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAssociateRepository_request_Repository_CodeCommit m_code_commit;
    bool m_code_commit_isSet;
    bool m_code_commit_isValid;

    OAIAssociateRepository_request_Repository_Bitbucket m_bitbucket;
    bool m_bitbucket_isSet;
    bool m_bitbucket_isValid;

    OAIAssociateRepository_request_Repository_GitHubEnterpriseServer m_git_hub_enterprise_server;
    bool m_git_hub_enterprise_server_isSet;
    bool m_git_hub_enterprise_server_isValid;

    OAIS3Repository m_s3_bucket;
    bool m_s3_bucket_isSet;
    bool m_s3_bucket_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssociateRepository_request_Repository)

#endif // OAIAssociateRepository_request_Repository_H
