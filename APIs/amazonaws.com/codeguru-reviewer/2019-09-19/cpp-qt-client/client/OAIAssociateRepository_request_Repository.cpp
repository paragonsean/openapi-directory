/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateRepository_request_Repository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateRepository_request_Repository::OAIAssociateRepository_request_Repository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateRepository_request_Repository::OAIAssociateRepository_request_Repository() {
    this->initializeModel();
}

OAIAssociateRepository_request_Repository::~OAIAssociateRepository_request_Repository() {}

void OAIAssociateRepository_request_Repository::initializeModel() {

    m_code_commit_isSet = false;
    m_code_commit_isValid = false;

    m_bitbucket_isSet = false;
    m_bitbucket_isValid = false;

    m_git_hub_enterprise_server_isSet = false;
    m_git_hub_enterprise_server_isValid = false;

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;
}

void OAIAssociateRepository_request_Repository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateRepository_request_Repository::fromJsonObject(QJsonObject json) {

    m_code_commit_isValid = ::OpenAPI::fromJsonValue(m_code_commit, json[QString("CodeCommit")]);
    m_code_commit_isSet = !json[QString("CodeCommit")].isNull() && m_code_commit_isValid;

    m_bitbucket_isValid = ::OpenAPI::fromJsonValue(m_bitbucket, json[QString("Bitbucket")]);
    m_bitbucket_isSet = !json[QString("Bitbucket")].isNull() && m_bitbucket_isValid;

    m_git_hub_enterprise_server_isValid = ::OpenAPI::fromJsonValue(m_git_hub_enterprise_server, json[QString("GitHubEnterpriseServer")]);
    m_git_hub_enterprise_server_isSet = !json[QString("GitHubEnterpriseServer")].isNull() && m_git_hub_enterprise_server_isValid;

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("S3Bucket")]);
    m_s3_bucket_isSet = !json[QString("S3Bucket")].isNull() && m_s3_bucket_isValid;
}

QString OAIAssociateRepository_request_Repository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateRepository_request_Repository::asJsonObject() const {
    QJsonObject obj;
    if (m_code_commit.isSet()) {
        obj.insert(QString("CodeCommit"), ::OpenAPI::toJsonValue(m_code_commit));
    }
    if (m_bitbucket.isSet()) {
        obj.insert(QString("Bitbucket"), ::OpenAPI::toJsonValue(m_bitbucket));
    }
    if (m_git_hub_enterprise_server.isSet()) {
        obj.insert(QString("GitHubEnterpriseServer"), ::OpenAPI::toJsonValue(m_git_hub_enterprise_server));
    }
    if (m_s3_bucket.isSet()) {
        obj.insert(QString("S3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    return obj;
}

OAIAssociateRepository_request_Repository_CodeCommit OAIAssociateRepository_request_Repository::getCodeCommit() const {
    return m_code_commit;
}
void OAIAssociateRepository_request_Repository::setCodeCommit(const OAIAssociateRepository_request_Repository_CodeCommit &code_commit) {
    m_code_commit = code_commit;
    m_code_commit_isSet = true;
}

bool OAIAssociateRepository_request_Repository::is_code_commit_Set() const{
    return m_code_commit_isSet;
}

bool OAIAssociateRepository_request_Repository::is_code_commit_Valid() const{
    return m_code_commit_isValid;
}

OAIAssociateRepository_request_Repository_Bitbucket OAIAssociateRepository_request_Repository::getBitbucket() const {
    return m_bitbucket;
}
void OAIAssociateRepository_request_Repository::setBitbucket(const OAIAssociateRepository_request_Repository_Bitbucket &bitbucket) {
    m_bitbucket = bitbucket;
    m_bitbucket_isSet = true;
}

bool OAIAssociateRepository_request_Repository::is_bitbucket_Set() const{
    return m_bitbucket_isSet;
}

bool OAIAssociateRepository_request_Repository::is_bitbucket_Valid() const{
    return m_bitbucket_isValid;
}

OAIAssociateRepository_request_Repository_GitHubEnterpriseServer OAIAssociateRepository_request_Repository::getGitHubEnterpriseServer() const {
    return m_git_hub_enterprise_server;
}
void OAIAssociateRepository_request_Repository::setGitHubEnterpriseServer(const OAIAssociateRepository_request_Repository_GitHubEnterpriseServer &git_hub_enterprise_server) {
    m_git_hub_enterprise_server = git_hub_enterprise_server;
    m_git_hub_enterprise_server_isSet = true;
}

bool OAIAssociateRepository_request_Repository::is_git_hub_enterprise_server_Set() const{
    return m_git_hub_enterprise_server_isSet;
}

bool OAIAssociateRepository_request_Repository::is_git_hub_enterprise_server_Valid() const{
    return m_git_hub_enterprise_server_isValid;
}

OAIS3Repository OAIAssociateRepository_request_Repository::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIAssociateRepository_request_Repository::setS3Bucket(const OAIS3Repository &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIAssociateRepository_request_Repository::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIAssociateRepository_request_Repository::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

bool OAIAssociateRepository_request_Repository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitbucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_enterprise_server.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateRepository_request_Repository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
