/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeReview::OAICodeReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeReview::OAICodeReview() {
    this->initializeModel();
}

OAICodeReview::~OAICodeReview() {}

void OAICodeReview::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_code_review_arn_isSet = false;
    m_code_review_arn_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_created_time_stamp_isSet = false;
    m_created_time_stamp_isValid = false;

    m_last_updated_time_stamp_isSet = false;
    m_last_updated_time_stamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_pull_request_id_isSet = false;
    m_pull_request_id_isValid = false;

    m_source_code_type_isSet = false;
    m_source_code_type_isValid = false;

    m_association_arn_isSet = false;
    m_association_arn_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_analysis_types_isSet = false;
    m_analysis_types_isValid = false;

    m_config_file_state_isSet = false;
    m_config_file_state_isValid = false;
}

void OAICodeReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeReview::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_code_review_arn_isValid = ::OpenAPI::fromJsonValue(m_code_review_arn, json[QString("CodeReviewArn")]);
    m_code_review_arn_isSet = !json[QString("CodeReviewArn")].isNull() && m_code_review_arn_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("RepositoryName")]);
    m_repository_name_isSet = !json[QString("RepositoryName")].isNull() && m_repository_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("ProviderType")]);
    m_provider_type_isSet = !json[QString("ProviderType")].isNull() && m_provider_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_created_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_created_time_stamp, json[QString("CreatedTimeStamp")]);
    m_created_time_stamp_isSet = !json[QString("CreatedTimeStamp")].isNull() && m_created_time_stamp_isValid;

    m_last_updated_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time_stamp, json[QString("LastUpdatedTimeStamp")]);
    m_last_updated_time_stamp_isSet = !json[QString("LastUpdatedTimeStamp")].isNull() && m_last_updated_time_stamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_pull_request_id_isValid = ::OpenAPI::fromJsonValue(m_pull_request_id, json[QString("PullRequestId")]);
    m_pull_request_id_isSet = !json[QString("PullRequestId")].isNull() && m_pull_request_id_isValid;

    m_source_code_type_isValid = ::OpenAPI::fromJsonValue(m_source_code_type, json[QString("SourceCodeType")]);
    m_source_code_type_isSet = !json[QString("SourceCodeType")].isNull() && m_source_code_type_isValid;

    m_association_arn_isValid = ::OpenAPI::fromJsonValue(m_association_arn, json[QString("AssociationArn")]);
    m_association_arn_isSet = !json[QString("AssociationArn")].isNull() && m_association_arn_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_analysis_types_isValid = ::OpenAPI::fromJsonValue(m_analysis_types, json[QString("AnalysisTypes")]);
    m_analysis_types_isSet = !json[QString("AnalysisTypes")].isNull() && m_analysis_types_isValid;

    m_config_file_state_isValid = ::OpenAPI::fromJsonValue(m_config_file_state, json[QString("ConfigFileState")]);
    m_config_file_state_isSet = !json[QString("ConfigFileState")].isNull() && m_config_file_state_isValid;
}

QString OAICodeReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeReview::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_code_review_arn_isSet) {
        obj.insert(QString("CodeReviewArn"), ::OpenAPI::toJsonValue(m_code_review_arn));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("RepositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_provider_type.isSet()) {
        obj.insert(QString("ProviderType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_created_time_stamp_isSet) {
        obj.insert(QString("CreatedTimeStamp"), ::OpenAPI::toJsonValue(m_created_time_stamp));
    }
    if (m_last_updated_time_stamp_isSet) {
        obj.insert(QString("LastUpdatedTimeStamp"), ::OpenAPI::toJsonValue(m_last_updated_time_stamp));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_pull_request_id_isSet) {
        obj.insert(QString("PullRequestId"), ::OpenAPI::toJsonValue(m_pull_request_id));
    }
    if (m_source_code_type.isSet()) {
        obj.insert(QString("SourceCodeType"), ::OpenAPI::toJsonValue(m_source_code_type));
    }
    if (m_association_arn_isSet) {
        obj.insert(QString("AssociationArn"), ::OpenAPI::toJsonValue(m_association_arn));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_analysis_types.isSet()) {
        obj.insert(QString("AnalysisTypes"), ::OpenAPI::toJsonValue(m_analysis_types));
    }
    if (m_config_file_state.isSet()) {
        obj.insert(QString("ConfigFileState"), ::OpenAPI::toJsonValue(m_config_file_state));
    }
    return obj;
}

QString OAICodeReview::getName() const {
    return m_name;
}
void OAICodeReview::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICodeReview::is_name_Set() const{
    return m_name_isSet;
}

bool OAICodeReview::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICodeReview::getCodeReviewArn() const {
    return m_code_review_arn;
}
void OAICodeReview::setCodeReviewArn(const QString &code_review_arn) {
    m_code_review_arn = code_review_arn;
    m_code_review_arn_isSet = true;
}

bool OAICodeReview::is_code_review_arn_Set() const{
    return m_code_review_arn_isSet;
}

bool OAICodeReview::is_code_review_arn_Valid() const{
    return m_code_review_arn_isValid;
}

QString OAICodeReview::getRepositoryName() const {
    return m_repository_name;
}
void OAICodeReview::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAICodeReview::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAICodeReview::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAICodeReview::getOwner() const {
    return m_owner;
}
void OAICodeReview::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICodeReview::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICodeReview::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIProviderType OAICodeReview::getProviderType() const {
    return m_provider_type;
}
void OAICodeReview::setProviderType(const OAIProviderType &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAICodeReview::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAICodeReview::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

OAIJobState OAICodeReview::getState() const {
    return m_state;
}
void OAICodeReview::setState(const OAIJobState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICodeReview::is_state_Set() const{
    return m_state_isSet;
}

bool OAICodeReview::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICodeReview::getStateReason() const {
    return m_state_reason;
}
void OAICodeReview::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAICodeReview::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAICodeReview::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QDateTime OAICodeReview::getCreatedTimeStamp() const {
    return m_created_time_stamp;
}
void OAICodeReview::setCreatedTimeStamp(const QDateTime &created_time_stamp) {
    m_created_time_stamp = created_time_stamp;
    m_created_time_stamp_isSet = true;
}

bool OAICodeReview::is_created_time_stamp_Set() const{
    return m_created_time_stamp_isSet;
}

bool OAICodeReview::is_created_time_stamp_Valid() const{
    return m_created_time_stamp_isValid;
}

QDateTime OAICodeReview::getLastUpdatedTimeStamp() const {
    return m_last_updated_time_stamp;
}
void OAICodeReview::setLastUpdatedTimeStamp(const QDateTime &last_updated_time_stamp) {
    m_last_updated_time_stamp = last_updated_time_stamp;
    m_last_updated_time_stamp_isSet = true;
}

bool OAICodeReview::is_last_updated_time_stamp_Set() const{
    return m_last_updated_time_stamp_isSet;
}

bool OAICodeReview::is_last_updated_time_stamp_Valid() const{
    return m_last_updated_time_stamp_isValid;
}

OAIType OAICodeReview::getType() const {
    return m_type;
}
void OAICodeReview::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICodeReview::is_type_Set() const{
    return m_type_isSet;
}

bool OAICodeReview::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICodeReview::getPullRequestId() const {
    return m_pull_request_id;
}
void OAICodeReview::setPullRequestId(const QString &pull_request_id) {
    m_pull_request_id = pull_request_id;
    m_pull_request_id_isSet = true;
}

bool OAICodeReview::is_pull_request_id_Set() const{
    return m_pull_request_id_isSet;
}

bool OAICodeReview::is_pull_request_id_Valid() const{
    return m_pull_request_id_isValid;
}

OAICodeReview_SourceCodeType OAICodeReview::getSourceCodeType() const {
    return m_source_code_type;
}
void OAICodeReview::setSourceCodeType(const OAICodeReview_SourceCodeType &source_code_type) {
    m_source_code_type = source_code_type;
    m_source_code_type_isSet = true;
}

bool OAICodeReview::is_source_code_type_Set() const{
    return m_source_code_type_isSet;
}

bool OAICodeReview::is_source_code_type_Valid() const{
    return m_source_code_type_isValid;
}

QString OAICodeReview::getAssociationArn() const {
    return m_association_arn;
}
void OAICodeReview::setAssociationArn(const QString &association_arn) {
    m_association_arn = association_arn;
    m_association_arn_isSet = true;
}

bool OAICodeReview::is_association_arn_Set() const{
    return m_association_arn_isSet;
}

bool OAICodeReview::is_association_arn_Valid() const{
    return m_association_arn_isValid;
}

OAICodeReview_Metrics OAICodeReview::getMetrics() const {
    return m_metrics;
}
void OAICodeReview::setMetrics(const OAICodeReview_Metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAICodeReview::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAICodeReview::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList OAICodeReview::getAnalysisTypes() const {
    return m_analysis_types;
}
void OAICodeReview::setAnalysisTypes(const QList &analysis_types) {
    m_analysis_types = analysis_types;
    m_analysis_types_isSet = true;
}

bool OAICodeReview::is_analysis_types_Set() const{
    return m_analysis_types_isSet;
}

bool OAICodeReview::is_analysis_types_Valid() const{
    return m_analysis_types_isValid;
}

OAIConfigFileState OAICodeReview::getConfigFileState() const {
    return m_config_file_state;
}
void OAICodeReview::setConfigFileState(const OAIConfigFileState &config_file_state) {
    m_config_file_state = config_file_state;
    m_config_file_state_isSet = true;
}

bool OAICodeReview::is_config_file_state_Set() const{
    return m_config_file_state_isSet;
}

bool OAICodeReview::is_config_file_state_Valid() const{
    return m_config_file_state_isValid;
}

bool OAICodeReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_review_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_file_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
