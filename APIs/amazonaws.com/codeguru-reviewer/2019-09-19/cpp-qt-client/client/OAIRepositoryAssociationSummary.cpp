/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryAssociationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryAssociationSummary::OAIRepositoryAssociationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryAssociationSummary::OAIRepositoryAssociationSummary() {
    this->initializeModel();
}

OAIRepositoryAssociationSummary::~OAIRepositoryAssociationSummary() {}

void OAIRepositoryAssociationSummary::initializeModel() {

    m_association_arn_isSet = false;
    m_association_arn_isValid = false;

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_last_updated_time_stamp_isSet = false;
    m_last_updated_time_stamp_isValid = false;

    m_association_id_isSet = false;
    m_association_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIRepositoryAssociationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryAssociationSummary::fromJsonObject(QJsonObject json) {

    m_association_arn_isValid = ::OpenAPI::fromJsonValue(m_association_arn, json[QString("AssociationArn")]);
    m_association_arn_isSet = !json[QString("AssociationArn")].isNull() && m_association_arn_isValid;

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_last_updated_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time_stamp, json[QString("LastUpdatedTimeStamp")]);
    m_last_updated_time_stamp_isSet = !json[QString("LastUpdatedTimeStamp")].isNull() && m_last_updated_time_stamp_isValid;

    m_association_id_isValid = ::OpenAPI::fromJsonValue(m_association_id, json[QString("AssociationId")]);
    m_association_id_isSet = !json[QString("AssociationId")].isNull() && m_association_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("ProviderType")]);
    m_provider_type_isSet = !json[QString("ProviderType")].isNull() && m_provider_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIRepositoryAssociationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryAssociationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_association_arn_isSet) {
        obj.insert(QString("AssociationArn"), ::OpenAPI::toJsonValue(m_association_arn));
    }
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_last_updated_time_stamp_isSet) {
        obj.insert(QString("LastUpdatedTimeStamp"), ::OpenAPI::toJsonValue(m_last_updated_time_stamp));
    }
    if (m_association_id_isSet) {
        obj.insert(QString("AssociationId"), ::OpenAPI::toJsonValue(m_association_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_provider_type.isSet()) {
        obj.insert(QString("ProviderType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIRepositoryAssociationSummary::getAssociationArn() const {
    return m_association_arn;
}
void OAIRepositoryAssociationSummary::setAssociationArn(const QString &association_arn) {
    m_association_arn = association_arn;
    m_association_arn_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_association_arn_Set() const{
    return m_association_arn_isSet;
}

bool OAIRepositoryAssociationSummary::is_association_arn_Valid() const{
    return m_association_arn_isValid;
}

QString OAIRepositoryAssociationSummary::getConnectionArn() const {
    return m_connection_arn;
}
void OAIRepositoryAssociationSummary::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAIRepositoryAssociationSummary::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

QDateTime OAIRepositoryAssociationSummary::getLastUpdatedTimeStamp() const {
    return m_last_updated_time_stamp;
}
void OAIRepositoryAssociationSummary::setLastUpdatedTimeStamp(const QDateTime &last_updated_time_stamp) {
    m_last_updated_time_stamp = last_updated_time_stamp;
    m_last_updated_time_stamp_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_last_updated_time_stamp_Set() const{
    return m_last_updated_time_stamp_isSet;
}

bool OAIRepositoryAssociationSummary::is_last_updated_time_stamp_Valid() const{
    return m_last_updated_time_stamp_isValid;
}

QString OAIRepositoryAssociationSummary::getAssociationId() const {
    return m_association_id;
}
void OAIRepositoryAssociationSummary::setAssociationId(const QString &association_id) {
    m_association_id = association_id;
    m_association_id_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_association_id_Set() const{
    return m_association_id_isSet;
}

bool OAIRepositoryAssociationSummary::is_association_id_Valid() const{
    return m_association_id_isValid;
}

QString OAIRepositoryAssociationSummary::getName() const {
    return m_name;
}
void OAIRepositoryAssociationSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepositoryAssociationSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepositoryAssociationSummary::getOwner() const {
    return m_owner;
}
void OAIRepositoryAssociationSummary::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRepositoryAssociationSummary::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIProviderType OAIRepositoryAssociationSummary::getProviderType() const {
    return m_provider_type;
}
void OAIRepositoryAssociationSummary::setProviderType(const OAIProviderType &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAIRepositoryAssociationSummary::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

OAIRepositoryAssociationState OAIRepositoryAssociationSummary::getState() const {
    return m_state;
}
void OAIRepositoryAssociationSummary::setState(const OAIRepositoryAssociationState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRepositoryAssociationSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRepositoryAssociationSummary::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIRepositoryAssociationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryAssociationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
