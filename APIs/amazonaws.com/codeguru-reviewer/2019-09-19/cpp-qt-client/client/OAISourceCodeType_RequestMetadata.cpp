/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceCodeType_RequestMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceCodeType_RequestMetadata::OAISourceCodeType_RequestMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceCodeType_RequestMetadata::OAISourceCodeType_RequestMetadata() {
    this->initializeModel();
}

OAISourceCodeType_RequestMetadata::~OAISourceCodeType_RequestMetadata() {}

void OAISourceCodeType_RequestMetadata::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;

    m_event_info_isSet = false;
    m_event_info_isValid = false;

    m_vendor_name_isSet = false;
    m_vendor_name_isValid = false;
}

void OAISourceCodeType_RequestMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceCodeType_RequestMetadata::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("Requester")]);
    m_requester_isSet = !json[QString("Requester")].isNull() && m_requester_isValid;

    m_event_info_isValid = ::OpenAPI::fromJsonValue(m_event_info, json[QString("EventInfo")]);
    m_event_info_isSet = !json[QString("EventInfo")].isNull() && m_event_info_isValid;

    m_vendor_name_isValid = ::OpenAPI::fromJsonValue(m_vendor_name, json[QString("VendorName")]);
    m_vendor_name_isSet = !json[QString("VendorName")].isNull() && m_vendor_name_isValid;
}

QString OAISourceCodeType_RequestMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceCodeType_RequestMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_requester_isSet) {
        obj.insert(QString("Requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    if (m_event_info.isSet()) {
        obj.insert(QString("EventInfo"), ::OpenAPI::toJsonValue(m_event_info));
    }
    if (m_vendor_name.isSet()) {
        obj.insert(QString("VendorName"), ::OpenAPI::toJsonValue(m_vendor_name));
    }
    return obj;
}

QString OAISourceCodeType_RequestMetadata::getRequestId() const {
    return m_request_id;
}
void OAISourceCodeType_RequestMetadata::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISourceCodeType_RequestMetadata::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISourceCodeType_RequestMetadata::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAISourceCodeType_RequestMetadata::getRequester() const {
    return m_requester;
}
void OAISourceCodeType_RequestMetadata::setRequester(const QString &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAISourceCodeType_RequestMetadata::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAISourceCodeType_RequestMetadata::is_requester_Valid() const{
    return m_requester_isValid;
}

OAIRequestMetadata_EventInfo OAISourceCodeType_RequestMetadata::getEventInfo() const {
    return m_event_info;
}
void OAISourceCodeType_RequestMetadata::setEventInfo(const OAIRequestMetadata_EventInfo &event_info) {
    m_event_info = event_info;
    m_event_info_isSet = true;
}

bool OAISourceCodeType_RequestMetadata::is_event_info_Set() const{
    return m_event_info_isSet;
}

bool OAISourceCodeType_RequestMetadata::is_event_info_Valid() const{
    return m_event_info_isValid;
}

OAIVendorName OAISourceCodeType_RequestMetadata::getVendorName() const {
    return m_vendor_name;
}
void OAISourceCodeType_RequestMetadata::setVendorName(const OAIVendorName &vendor_name) {
    m_vendor_name = vendor_name;
    m_vendor_name_isSet = true;
}

bool OAISourceCodeType_RequestMetadata::is_vendor_name_Set() const{
    return m_vendor_name_isSet;
}

bool OAISourceCodeType_RequestMetadata::is_vendor_name_Valid() const{
    return m_vendor_name_isValid;
}

bool OAISourceCodeType_RequestMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceCodeType_RequestMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
