/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeReviewSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeReviewSummary::OAICodeReviewSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeReviewSummary::OAICodeReviewSummary() {
    this->initializeModel();
}

OAICodeReviewSummary::~OAICodeReviewSummary() {}

void OAICodeReviewSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_code_review_arn_isSet = false;
    m_code_review_arn_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_created_time_stamp_isSet = false;
    m_created_time_stamp_isValid = false;

    m_last_updated_time_stamp_isSet = false;
    m_last_updated_time_stamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_pull_request_id_isSet = false;
    m_pull_request_id_isValid = false;

    m_metrics_summary_isSet = false;
    m_metrics_summary_isValid = false;

    m_source_code_type_isSet = false;
    m_source_code_type_isValid = false;
}

void OAICodeReviewSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeReviewSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_code_review_arn_isValid = ::OpenAPI::fromJsonValue(m_code_review_arn, json[QString("CodeReviewArn")]);
    m_code_review_arn_isSet = !json[QString("CodeReviewArn")].isNull() && m_code_review_arn_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("RepositoryName")]);
    m_repository_name_isSet = !json[QString("RepositoryName")].isNull() && m_repository_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("ProviderType")]);
    m_provider_type_isSet = !json[QString("ProviderType")].isNull() && m_provider_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_created_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_created_time_stamp, json[QString("CreatedTimeStamp")]);
    m_created_time_stamp_isSet = !json[QString("CreatedTimeStamp")].isNull() && m_created_time_stamp_isValid;

    m_last_updated_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time_stamp, json[QString("LastUpdatedTimeStamp")]);
    m_last_updated_time_stamp_isSet = !json[QString("LastUpdatedTimeStamp")].isNull() && m_last_updated_time_stamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_pull_request_id_isValid = ::OpenAPI::fromJsonValue(m_pull_request_id, json[QString("PullRequestId")]);
    m_pull_request_id_isSet = !json[QString("PullRequestId")].isNull() && m_pull_request_id_isValid;

    m_metrics_summary_isValid = ::OpenAPI::fromJsonValue(m_metrics_summary, json[QString("MetricsSummary")]);
    m_metrics_summary_isSet = !json[QString("MetricsSummary")].isNull() && m_metrics_summary_isValid;

    m_source_code_type_isValid = ::OpenAPI::fromJsonValue(m_source_code_type, json[QString("SourceCodeType")]);
    m_source_code_type_isSet = !json[QString("SourceCodeType")].isNull() && m_source_code_type_isValid;
}

QString OAICodeReviewSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeReviewSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_code_review_arn_isSet) {
        obj.insert(QString("CodeReviewArn"), ::OpenAPI::toJsonValue(m_code_review_arn));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("RepositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_provider_type.isSet()) {
        obj.insert(QString("ProviderType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_created_time_stamp_isSet) {
        obj.insert(QString("CreatedTimeStamp"), ::OpenAPI::toJsonValue(m_created_time_stamp));
    }
    if (m_last_updated_time_stamp_isSet) {
        obj.insert(QString("LastUpdatedTimeStamp"), ::OpenAPI::toJsonValue(m_last_updated_time_stamp));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_pull_request_id_isSet) {
        obj.insert(QString("PullRequestId"), ::OpenAPI::toJsonValue(m_pull_request_id));
    }
    if (m_metrics_summary.isSet()) {
        obj.insert(QString("MetricsSummary"), ::OpenAPI::toJsonValue(m_metrics_summary));
    }
    if (m_source_code_type.isSet()) {
        obj.insert(QString("SourceCodeType"), ::OpenAPI::toJsonValue(m_source_code_type));
    }
    return obj;
}

QString OAICodeReviewSummary::getName() const {
    return m_name;
}
void OAICodeReviewSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICodeReviewSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAICodeReviewSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICodeReviewSummary::getCodeReviewArn() const {
    return m_code_review_arn;
}
void OAICodeReviewSummary::setCodeReviewArn(const QString &code_review_arn) {
    m_code_review_arn = code_review_arn;
    m_code_review_arn_isSet = true;
}

bool OAICodeReviewSummary::is_code_review_arn_Set() const{
    return m_code_review_arn_isSet;
}

bool OAICodeReviewSummary::is_code_review_arn_Valid() const{
    return m_code_review_arn_isValid;
}

QString OAICodeReviewSummary::getRepositoryName() const {
    return m_repository_name;
}
void OAICodeReviewSummary::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAICodeReviewSummary::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAICodeReviewSummary::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAICodeReviewSummary::getOwner() const {
    return m_owner;
}
void OAICodeReviewSummary::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICodeReviewSummary::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICodeReviewSummary::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIProviderType OAICodeReviewSummary::getProviderType() const {
    return m_provider_type;
}
void OAICodeReviewSummary::setProviderType(const OAIProviderType &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAICodeReviewSummary::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAICodeReviewSummary::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

OAIJobState OAICodeReviewSummary::getState() const {
    return m_state;
}
void OAICodeReviewSummary::setState(const OAIJobState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICodeReviewSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAICodeReviewSummary::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICodeReviewSummary::getCreatedTimeStamp() const {
    return m_created_time_stamp;
}
void OAICodeReviewSummary::setCreatedTimeStamp(const QDateTime &created_time_stamp) {
    m_created_time_stamp = created_time_stamp;
    m_created_time_stamp_isSet = true;
}

bool OAICodeReviewSummary::is_created_time_stamp_Set() const{
    return m_created_time_stamp_isSet;
}

bool OAICodeReviewSummary::is_created_time_stamp_Valid() const{
    return m_created_time_stamp_isValid;
}

QDateTime OAICodeReviewSummary::getLastUpdatedTimeStamp() const {
    return m_last_updated_time_stamp;
}
void OAICodeReviewSummary::setLastUpdatedTimeStamp(const QDateTime &last_updated_time_stamp) {
    m_last_updated_time_stamp = last_updated_time_stamp;
    m_last_updated_time_stamp_isSet = true;
}

bool OAICodeReviewSummary::is_last_updated_time_stamp_Set() const{
    return m_last_updated_time_stamp_isSet;
}

bool OAICodeReviewSummary::is_last_updated_time_stamp_Valid() const{
    return m_last_updated_time_stamp_isValid;
}

OAIType OAICodeReviewSummary::getType() const {
    return m_type;
}
void OAICodeReviewSummary::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICodeReviewSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAICodeReviewSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICodeReviewSummary::getPullRequestId() const {
    return m_pull_request_id;
}
void OAICodeReviewSummary::setPullRequestId(const QString &pull_request_id) {
    m_pull_request_id = pull_request_id;
    m_pull_request_id_isSet = true;
}

bool OAICodeReviewSummary::is_pull_request_id_Set() const{
    return m_pull_request_id_isSet;
}

bool OAICodeReviewSummary::is_pull_request_id_Valid() const{
    return m_pull_request_id_isValid;
}

OAICodeReviewSummary_MetricsSummary OAICodeReviewSummary::getMetricsSummary() const {
    return m_metrics_summary;
}
void OAICodeReviewSummary::setMetricsSummary(const OAICodeReviewSummary_MetricsSummary &metrics_summary) {
    m_metrics_summary = metrics_summary;
    m_metrics_summary_isSet = true;
}

bool OAICodeReviewSummary::is_metrics_summary_Set() const{
    return m_metrics_summary_isSet;
}

bool OAICodeReviewSummary::is_metrics_summary_Valid() const{
    return m_metrics_summary_isValid;
}

OAISourceCodeType OAICodeReviewSummary::getSourceCodeType() const {
    return m_source_code_type;
}
void OAICodeReviewSummary::setSourceCodeType(const OAISourceCodeType &source_code_type) {
    m_source_code_type = source_code_type;
    m_source_code_type_isSet = true;
}

bool OAICodeReviewSummary::is_source_code_type_Set() const{
    return m_source_code_type_isSet;
}

bool OAICodeReviewSummary::is_source_code_type_Valid() const{
    return m_source_code_type_isValid;
}

bool OAICodeReviewSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_review_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeReviewSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
