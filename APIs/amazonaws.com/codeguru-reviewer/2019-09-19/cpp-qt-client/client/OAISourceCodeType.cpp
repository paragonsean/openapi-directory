/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceCodeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceCodeType::OAISourceCodeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceCodeType::OAISourceCodeType() {
    this->initializeModel();
}

OAISourceCodeType::~OAISourceCodeType() {}

void OAISourceCodeType::initializeModel() {

    m_commit_diff_isSet = false;
    m_commit_diff_isValid = false;

    m_repository_head_isSet = false;
    m_repository_head_isValid = false;

    m_branch_diff_isSet = false;
    m_branch_diff_isValid = false;

    m_s3_bucket_repository_isSet = false;
    m_s3_bucket_repository_isValid = false;

    m_request_metadata_isSet = false;
    m_request_metadata_isValid = false;
}

void OAISourceCodeType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceCodeType::fromJsonObject(QJsonObject json) {

    m_commit_diff_isValid = ::OpenAPI::fromJsonValue(m_commit_diff, json[QString("CommitDiff")]);
    m_commit_diff_isSet = !json[QString("CommitDiff")].isNull() && m_commit_diff_isValid;

    m_repository_head_isValid = ::OpenAPI::fromJsonValue(m_repository_head, json[QString("RepositoryHead")]);
    m_repository_head_isSet = !json[QString("RepositoryHead")].isNull() && m_repository_head_isValid;

    m_branch_diff_isValid = ::OpenAPI::fromJsonValue(m_branch_diff, json[QString("BranchDiff")]);
    m_branch_diff_isSet = !json[QString("BranchDiff")].isNull() && m_branch_diff_isValid;

    m_s3_bucket_repository_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_repository, json[QString("S3BucketRepository")]);
    m_s3_bucket_repository_isSet = !json[QString("S3BucketRepository")].isNull() && m_s3_bucket_repository_isValid;

    m_request_metadata_isValid = ::OpenAPI::fromJsonValue(m_request_metadata, json[QString("RequestMetadata")]);
    m_request_metadata_isSet = !json[QString("RequestMetadata")].isNull() && m_request_metadata_isValid;
}

QString OAISourceCodeType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceCodeType::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_diff.isSet()) {
        obj.insert(QString("CommitDiff"), ::OpenAPI::toJsonValue(m_commit_diff));
    }
    if (m_repository_head.isSet()) {
        obj.insert(QString("RepositoryHead"), ::OpenAPI::toJsonValue(m_repository_head));
    }
    if (m_branch_diff.isSet()) {
        obj.insert(QString("BranchDiff"), ::OpenAPI::toJsonValue(m_branch_diff));
    }
    if (m_s3_bucket_repository.isSet()) {
        obj.insert(QString("S3BucketRepository"), ::OpenAPI::toJsonValue(m_s3_bucket_repository));
    }
    if (m_request_metadata.isSet()) {
        obj.insert(QString("RequestMetadata"), ::OpenAPI::toJsonValue(m_request_metadata));
    }
    return obj;
}

OAISourceCodeType_CommitDiff OAISourceCodeType::getCommitDiff() const {
    return m_commit_diff;
}
void OAISourceCodeType::setCommitDiff(const OAISourceCodeType_CommitDiff &commit_diff) {
    m_commit_diff = commit_diff;
    m_commit_diff_isSet = true;
}

bool OAISourceCodeType::is_commit_diff_Set() const{
    return m_commit_diff_isSet;
}

bool OAISourceCodeType::is_commit_diff_Valid() const{
    return m_commit_diff_isValid;
}

OAIRepositoryHeadSourceCodeType OAISourceCodeType::getRepositoryHead() const {
    return m_repository_head;
}
void OAISourceCodeType::setRepositoryHead(const OAIRepositoryHeadSourceCodeType &repository_head) {
    m_repository_head = repository_head;
    m_repository_head_isSet = true;
}

bool OAISourceCodeType::is_repository_head_Set() const{
    return m_repository_head_isSet;
}

bool OAISourceCodeType::is_repository_head_Valid() const{
    return m_repository_head_isValid;
}

OAISourceCodeType_BranchDiff OAISourceCodeType::getBranchDiff() const {
    return m_branch_diff;
}
void OAISourceCodeType::setBranchDiff(const OAISourceCodeType_BranchDiff &branch_diff) {
    m_branch_diff = branch_diff;
    m_branch_diff_isSet = true;
}

bool OAISourceCodeType::is_branch_diff_Set() const{
    return m_branch_diff_isSet;
}

bool OAISourceCodeType::is_branch_diff_Valid() const{
    return m_branch_diff_isValid;
}

OAISourceCodeType_S3BucketRepository OAISourceCodeType::getS3BucketRepository() const {
    return m_s3_bucket_repository;
}
void OAISourceCodeType::setS3BucketRepository(const OAISourceCodeType_S3BucketRepository &s3_bucket_repository) {
    m_s3_bucket_repository = s3_bucket_repository;
    m_s3_bucket_repository_isSet = true;
}

bool OAISourceCodeType::is_s3_bucket_repository_Set() const{
    return m_s3_bucket_repository_isSet;
}

bool OAISourceCodeType::is_s3_bucket_repository_Valid() const{
    return m_s3_bucket_repository_isValid;
}

OAISourceCodeType_RequestMetadata OAISourceCodeType::getRequestMetadata() const {
    return m_request_metadata;
}
void OAISourceCodeType::setRequestMetadata(const OAISourceCodeType_RequestMetadata &request_metadata) {
    m_request_metadata = request_metadata;
    m_request_metadata_isSet = true;
}

bool OAISourceCodeType::is_request_metadata_Set() const{
    return m_request_metadata_isSet;
}

bool OAISourceCodeType::is_request_metadata_Valid() const{
    return m_request_metadata_isValid;
}

bool OAISourceCodeType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_head.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceCodeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
