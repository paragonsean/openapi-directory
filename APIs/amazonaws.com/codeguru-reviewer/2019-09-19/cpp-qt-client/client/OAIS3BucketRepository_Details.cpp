/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketRepository_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketRepository_Details::OAIS3BucketRepository_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketRepository_Details::OAIS3BucketRepository_Details() {
    this->initializeModel();
}

OAIS3BucketRepository_Details::~OAIS3BucketRepository_Details() {}

void OAIS3BucketRepository_Details::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_code_artifacts_isSet = false;
    m_code_artifacts_isValid = false;
}

void OAIS3BucketRepository_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketRepository_Details::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_code_artifacts_isValid = ::OpenAPI::fromJsonValue(m_code_artifacts, json[QString("CodeArtifacts")]);
    m_code_artifacts_isSet = !json[QString("CodeArtifacts")].isNull() && m_code_artifacts_isValid;
}

QString OAIS3BucketRepository_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketRepository_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_code_artifacts.isSet()) {
        obj.insert(QString("CodeArtifacts"), ::OpenAPI::toJsonValue(m_code_artifacts));
    }
    return obj;
}

QString OAIS3BucketRepository_Details::getBucketName() const {
    return m_bucket_name;
}
void OAIS3BucketRepository_Details::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIS3BucketRepository_Details::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIS3BucketRepository_Details::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

OAIS3RepositoryDetails_CodeArtifacts OAIS3BucketRepository_Details::getCodeArtifacts() const {
    return m_code_artifacts;
}
void OAIS3BucketRepository_Details::setCodeArtifacts(const OAIS3RepositoryDetails_CodeArtifacts &code_artifacts) {
    m_code_artifacts = code_artifacts;
    m_code_artifacts_isSet = true;
}

bool OAIS3BucketRepository_Details::is_code_artifacts_Set() const{
    return m_code_artifacts_isSet;
}

bool OAIS3BucketRepository_Details::is_code_artifacts_Valid() const{
    return m_code_artifacts_isValid;
}

bool OAIS3BucketRepository_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketRepository_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
