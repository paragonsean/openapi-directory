/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationSummary_RuleMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationSummary_RuleMetadata::OAIRecommendationSummary_RuleMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationSummary_RuleMetadata::OAIRecommendationSummary_RuleMetadata() {
    this->initializeModel();
}

OAIRecommendationSummary_RuleMetadata::~OAIRecommendationSummary_RuleMetadata() {}

void OAIRecommendationSummary_RuleMetadata::initializeModel() {

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_rule_tags_isSet = false;
    m_rule_tags_isValid = false;
}

void OAIRecommendationSummary_RuleMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationSummary_RuleMetadata::fromJsonObject(QJsonObject json) {

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("ShortDescription")]);
    m_short_description_isSet = !json[QString("ShortDescription")].isNull() && m_short_description_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("LongDescription")]);
    m_long_description_isSet = !json[QString("LongDescription")].isNull() && m_long_description_isValid;

    m_rule_tags_isValid = ::OpenAPI::fromJsonValue(m_rule_tags, json[QString("RuleTags")]);
    m_rule_tags_isSet = !json[QString("RuleTags")].isNull() && m_rule_tags_isValid;
}

QString OAIRecommendationSummary_RuleMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationSummary_RuleMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("ShortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("LongDescription"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_rule_tags.isSet()) {
        obj.insert(QString("RuleTags"), ::OpenAPI::toJsonValue(m_rule_tags));
    }
    return obj;
}

QString OAIRecommendationSummary_RuleMetadata::getRuleId() const {
    return m_rule_id;
}
void OAIRecommendationSummary_RuleMetadata::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIRecommendationSummary_RuleMetadata::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIRecommendationSummary_RuleMetadata::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIRecommendationSummary_RuleMetadata::getRuleName() const {
    return m_rule_name;
}
void OAIRecommendationSummary_RuleMetadata::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIRecommendationSummary_RuleMetadata::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIRecommendationSummary_RuleMetadata::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QString OAIRecommendationSummary_RuleMetadata::getShortDescription() const {
    return m_short_description;
}
void OAIRecommendationSummary_RuleMetadata::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIRecommendationSummary_RuleMetadata::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIRecommendationSummary_RuleMetadata::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAIRecommendationSummary_RuleMetadata::getLongDescription() const {
    return m_long_description;
}
void OAIRecommendationSummary_RuleMetadata::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAIRecommendationSummary_RuleMetadata::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAIRecommendationSummary_RuleMetadata::is_long_description_Valid() const{
    return m_long_description_isValid;
}

QList OAIRecommendationSummary_RuleMetadata::getRuleTags() const {
    return m_rule_tags;
}
void OAIRecommendationSummary_RuleMetadata::setRuleTags(const QList &rule_tags) {
    m_rule_tags = rule_tags;
    m_rule_tags_isSet = true;
}

bool OAIRecommendationSummary_RuleMetadata::is_rule_tags_Set() const{
    return m_rule_tags_isSet;
}

bool OAIRecommendationSummary_RuleMetadata::is_rule_tags_Valid() const{
    return m_rule_tags_isValid;
}

bool OAIRecommendationSummary_RuleMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationSummary_RuleMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
