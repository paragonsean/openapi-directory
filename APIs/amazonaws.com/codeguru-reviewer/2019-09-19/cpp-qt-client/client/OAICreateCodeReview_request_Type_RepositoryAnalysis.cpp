/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCodeReview_request_Type_RepositoryAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCodeReview_request_Type_RepositoryAnalysis::OAICreateCodeReview_request_Type_RepositoryAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCodeReview_request_Type_RepositoryAnalysis::OAICreateCodeReview_request_Type_RepositoryAnalysis() {
    this->initializeModel();
}

OAICreateCodeReview_request_Type_RepositoryAnalysis::~OAICreateCodeReview_request_Type_RepositoryAnalysis() {}

void OAICreateCodeReview_request_Type_RepositoryAnalysis::initializeModel() {

    m_repository_head_isSet = false;
    m_repository_head_isValid = false;

    m_source_code_type_isSet = false;
    m_source_code_type_isValid = false;
}

void OAICreateCodeReview_request_Type_RepositoryAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCodeReview_request_Type_RepositoryAnalysis::fromJsonObject(QJsonObject json) {

    m_repository_head_isValid = ::OpenAPI::fromJsonValue(m_repository_head, json[QString("RepositoryHead")]);
    m_repository_head_isSet = !json[QString("RepositoryHead")].isNull() && m_repository_head_isValid;

    m_source_code_type_isValid = ::OpenAPI::fromJsonValue(m_source_code_type, json[QString("SourceCodeType")]);
    m_source_code_type_isSet = !json[QString("SourceCodeType")].isNull() && m_source_code_type_isValid;
}

QString OAICreateCodeReview_request_Type_RepositoryAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCodeReview_request_Type_RepositoryAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_head.isSet()) {
        obj.insert(QString("RepositoryHead"), ::OpenAPI::toJsonValue(m_repository_head));
    }
    if (m_source_code_type.isSet()) {
        obj.insert(QString("SourceCodeType"), ::OpenAPI::toJsonValue(m_source_code_type));
    }
    return obj;
}

OAIRepositoryAnalysis_RepositoryHead OAICreateCodeReview_request_Type_RepositoryAnalysis::getRepositoryHead() const {
    return m_repository_head;
}
void OAICreateCodeReview_request_Type_RepositoryAnalysis::setRepositoryHead(const OAIRepositoryAnalysis_RepositoryHead &repository_head) {
    m_repository_head = repository_head;
    m_repository_head_isSet = true;
}

bool OAICreateCodeReview_request_Type_RepositoryAnalysis::is_repository_head_Set() const{
    return m_repository_head_isSet;
}

bool OAICreateCodeReview_request_Type_RepositoryAnalysis::is_repository_head_Valid() const{
    return m_repository_head_isValid;
}

OAISourceCodeType OAICreateCodeReview_request_Type_RepositoryAnalysis::getSourceCodeType() const {
    return m_source_code_type;
}
void OAICreateCodeReview_request_Type_RepositoryAnalysis::setSourceCodeType(const OAISourceCodeType &source_code_type) {
    m_source_code_type = source_code_type;
    m_source_code_type_isSet = true;
}

bool OAICreateCodeReview_request_Type_RepositoryAnalysis::is_source_code_type_Set() const{
    return m_source_code_type_isSet;
}

bool OAICreateCodeReview_request_Type_RepositoryAnalysis::is_source_code_type_Valid() const{
    return m_source_code_type_isValid;
}

bool OAICreateCodeReview_request_Type_RepositoryAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_head.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCodeReview_request_Type_RepositoryAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
