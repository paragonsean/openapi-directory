/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationSummary::OAIRecommendationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationSummary::OAIRecommendationSummary() {
    this->initializeModel();
}

OAIRecommendationSummary::~OAIRecommendationSummary() {}

void OAIRecommendationSummary::initializeModel() {

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_recommendation_category_isSet = false;
    m_recommendation_category_isValid = false;

    m_rule_metadata_isSet = false;
    m_rule_metadata_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIRecommendationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationSummary::fromJsonObject(QJsonObject json) {

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("FilePath")]);
    m_file_path_isSet = !json[QString("FilePath")].isNull() && m_file_path_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("StartLine")]);
    m_start_line_isSet = !json[QString("StartLine")].isNull() && m_start_line_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("EndLine")]);
    m_end_line_isSet = !json[QString("EndLine")].isNull() && m_end_line_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_recommendation_category_isValid = ::OpenAPI::fromJsonValue(m_recommendation_category, json[QString("RecommendationCategory")]);
    m_recommendation_category_isSet = !json[QString("RecommendationCategory")].isNull() && m_recommendation_category_isValid;

    m_rule_metadata_isValid = ::OpenAPI::fromJsonValue(m_rule_metadata, json[QString("RuleMetadata")]);
    m_rule_metadata_isSet = !json[QString("RuleMetadata")].isNull() && m_rule_metadata_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;
}

QString OAIRecommendationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_file_path_isSet) {
        obj.insert(QString("FilePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("StartLine"), ::OpenAPI::toJsonValue(m_start_line));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("EndLine"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_recommendation_category.isSet()) {
        obj.insert(QString("RecommendationCategory"), ::OpenAPI::toJsonValue(m_recommendation_category));
    }
    if (m_rule_metadata.isSet()) {
        obj.insert(QString("RuleMetadata"), ::OpenAPI::toJsonValue(m_rule_metadata));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIRecommendationSummary::getFilePath() const {
    return m_file_path;
}
void OAIRecommendationSummary::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIRecommendationSummary::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIRecommendationSummary::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIRecommendationSummary::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRecommendationSummary::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRecommendationSummary::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRecommendationSummary::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

qint32 OAIRecommendationSummary::getStartLine() const {
    return m_start_line;
}
void OAIRecommendationSummary::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAIRecommendationSummary::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAIRecommendationSummary::is_start_line_Valid() const{
    return m_start_line_isValid;
}

qint32 OAIRecommendationSummary::getEndLine() const {
    return m_end_line;
}
void OAIRecommendationSummary::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAIRecommendationSummary::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAIRecommendationSummary::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAIRecommendationSummary::getDescription() const {
    return m_description;
}
void OAIRecommendationSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecommendationSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecommendationSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIRecommendationCategory OAIRecommendationSummary::getRecommendationCategory() const {
    return m_recommendation_category;
}
void OAIRecommendationSummary::setRecommendationCategory(const OAIRecommendationCategory &recommendation_category) {
    m_recommendation_category = recommendation_category;
    m_recommendation_category_isSet = true;
}

bool OAIRecommendationSummary::is_recommendation_category_Set() const{
    return m_recommendation_category_isSet;
}

bool OAIRecommendationSummary::is_recommendation_category_Valid() const{
    return m_recommendation_category_isValid;
}

OAIRecommendationSummary_RuleMetadata OAIRecommendationSummary::getRuleMetadata() const {
    return m_rule_metadata;
}
void OAIRecommendationSummary::setRuleMetadata(const OAIRecommendationSummary_RuleMetadata &rule_metadata) {
    m_rule_metadata = rule_metadata;
    m_rule_metadata_isSet = true;
}

bool OAIRecommendationSummary::is_rule_metadata_Set() const{
    return m_rule_metadata_isSet;
}

bool OAIRecommendationSummary::is_rule_metadata_Valid() const{
    return m_rule_metadata_isValid;
}

OAISeverity OAIRecommendationSummary::getSeverity() const {
    return m_severity;
}
void OAIRecommendationSummary::setSeverity(const OAISeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIRecommendationSummary::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIRecommendationSummary::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIRecommendationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
