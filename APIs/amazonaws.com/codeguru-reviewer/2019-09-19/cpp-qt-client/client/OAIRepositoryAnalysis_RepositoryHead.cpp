/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryAnalysis_RepositoryHead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryAnalysis_RepositoryHead::OAIRepositoryAnalysis_RepositoryHead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryAnalysis_RepositoryHead::OAIRepositoryAnalysis_RepositoryHead() {
    this->initializeModel();
}

OAIRepositoryAnalysis_RepositoryHead::~OAIRepositoryAnalysis_RepositoryHead() {}

void OAIRepositoryAnalysis_RepositoryHead::initializeModel() {

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;
}

void OAIRepositoryAnalysis_RepositoryHead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryAnalysis_RepositoryHead::fromJsonObject(QJsonObject json) {

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("BranchName")]);
    m_branch_name_isSet = !json[QString("BranchName")].isNull() && m_branch_name_isValid;
}

QString OAIRepositoryAnalysis_RepositoryHead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryAnalysis_RepositoryHead::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_name_isSet) {
        obj.insert(QString("BranchName"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    return obj;
}

QString OAIRepositoryAnalysis_RepositoryHead::getBranchName() const {
    return m_branch_name;
}
void OAIRepositoryAnalysis_RepositoryHead::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIRepositoryAnalysis_RepositoryHead::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIRepositoryAnalysis_RepositoryHead::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

bool OAIRepositoryAnalysis_RepositoryHead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryAnalysis_RepositoryHead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_branch_name_isValid && true;
}

} // namespace OpenAPI
