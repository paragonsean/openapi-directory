/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateRepository_request_Repository_Bitbucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateRepository_request_Repository_Bitbucket::OAIAssociateRepository_request_Repository_Bitbucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateRepository_request_Repository_Bitbucket::OAIAssociateRepository_request_Repository_Bitbucket() {
    this->initializeModel();
}

OAIAssociateRepository_request_Repository_Bitbucket::~OAIAssociateRepository_request_Repository_Bitbucket() {}

void OAIAssociateRepository_request_Repository_Bitbucket::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;
}

void OAIAssociateRepository_request_Repository_Bitbucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateRepository_request_Repository_Bitbucket::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;
}

QString OAIAssociateRepository_request_Repository_Bitbucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateRepository_request_Repository_Bitbucket::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    return obj;
}

QString OAIAssociateRepository_request_Repository_Bitbucket::getName() const {
    return m_name;
}
void OAIAssociateRepository_request_Repository_Bitbucket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssociateRepository_request_Repository_Bitbucket::getConnectionArn() const {
    return m_connection_arn;
}
void OAIAssociateRepository_request_Repository_Bitbucket::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

QString OAIAssociateRepository_request_Repository_Bitbucket::getOwner() const {
    return m_owner;
}
void OAIAssociateRepository_request_Repository_Bitbucket::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateRepository_request_Repository_Bitbucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_connection_arn_isValid && m_owner_isValid && true;
}

} // namespace OpenAPI
