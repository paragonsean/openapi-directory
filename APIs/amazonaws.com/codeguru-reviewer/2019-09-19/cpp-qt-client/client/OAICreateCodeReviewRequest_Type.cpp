/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCodeReviewRequest_Type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCodeReviewRequest_Type::OAICreateCodeReviewRequest_Type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCodeReviewRequest_Type::OAICreateCodeReviewRequest_Type() {
    this->initializeModel();
}

OAICreateCodeReviewRequest_Type::~OAICreateCodeReviewRequest_Type() {}

void OAICreateCodeReviewRequest_Type::initializeModel() {

    m_repository_analysis_isSet = false;
    m_repository_analysis_isValid = false;

    m_analysis_types_isSet = false;
    m_analysis_types_isValid = false;
}

void OAICreateCodeReviewRequest_Type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCodeReviewRequest_Type::fromJsonObject(QJsonObject json) {

    m_repository_analysis_isValid = ::OpenAPI::fromJsonValue(m_repository_analysis, json[QString("RepositoryAnalysis")]);
    m_repository_analysis_isSet = !json[QString("RepositoryAnalysis")].isNull() && m_repository_analysis_isValid;

    m_analysis_types_isValid = ::OpenAPI::fromJsonValue(m_analysis_types, json[QString("AnalysisTypes")]);
    m_analysis_types_isSet = !json[QString("AnalysisTypes")].isNull() && m_analysis_types_isValid;
}

QString OAICreateCodeReviewRequest_Type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCodeReviewRequest_Type::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_analysis.isSet()) {
        obj.insert(QString("RepositoryAnalysis"), ::OpenAPI::toJsonValue(m_repository_analysis));
    }
    if (m_analysis_types.isSet()) {
        obj.insert(QString("AnalysisTypes"), ::OpenAPI::toJsonValue(m_analysis_types));
    }
    return obj;
}

OAICreateCodeReview_request_Type_RepositoryAnalysis OAICreateCodeReviewRequest_Type::getRepositoryAnalysis() const {
    return m_repository_analysis;
}
void OAICreateCodeReviewRequest_Type::setRepositoryAnalysis(const OAICreateCodeReview_request_Type_RepositoryAnalysis &repository_analysis) {
    m_repository_analysis = repository_analysis;
    m_repository_analysis_isSet = true;
}

bool OAICreateCodeReviewRequest_Type::is_repository_analysis_Set() const{
    return m_repository_analysis_isSet;
}

bool OAICreateCodeReviewRequest_Type::is_repository_analysis_Valid() const{
    return m_repository_analysis_isValid;
}

QList OAICreateCodeReviewRequest_Type::getAnalysisTypes() const {
    return m_analysis_types;
}
void OAICreateCodeReviewRequest_Type::setAnalysisTypes(const QList &analysis_types) {
    m_analysis_types = analysis_types;
    m_analysis_types_isSet = true;
}

bool OAICreateCodeReviewRequest_Type::is_analysis_types_Set() const{
    return m_analysis_types_isSet;
}

bool OAICreateCodeReviewRequest_Type::is_analysis_types_Valid() const{
    return m_analysis_types_isValid;
}

bool OAICreateCodeReviewRequest_Type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCodeReviewRequest_Type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_analysis_isValid && true;
}

} // namespace OpenAPI
