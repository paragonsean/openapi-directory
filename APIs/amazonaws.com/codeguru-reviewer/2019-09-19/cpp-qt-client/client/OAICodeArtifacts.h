/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICodeArtifacts.h
 *
 * &lt;p&gt;Code artifacts are source code artifacts and build artifacts used in a repository analysis or a pull request review.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Source code artifacts are source code files in a Git repository that are compressed into a .zip file.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Build artifacts are .jar or .class files that are compressed in a .zip file.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAICodeArtifacts_H
#define OAICodeArtifacts_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICodeArtifacts : public OAIObject {
public:
    OAICodeArtifacts();
    OAICodeArtifacts(QString json);
    ~OAICodeArtifacts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSourceCodeArtifactsObjectKey() const;
    void setSourceCodeArtifactsObjectKey(const QString &source_code_artifacts_object_key);
    bool is_source_code_artifacts_object_key_Set() const;
    bool is_source_code_artifacts_object_key_Valid() const;

    QString getBuildArtifactsObjectKey() const;
    void setBuildArtifactsObjectKey(const QString &build_artifacts_object_key);
    bool is_build_artifacts_object_key_Set() const;
    bool is_build_artifacts_object_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_source_code_artifacts_object_key;
    bool m_source_code_artifacts_object_key_isSet;
    bool m_source_code_artifacts_object_key_isValid;

    QString m_build_artifacts_object_key;
    bool m_build_artifacts_object_key_isSet;
    bool m_build_artifacts_object_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICodeArtifacts)

#endif // OAICodeArtifacts_H
