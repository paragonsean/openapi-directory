/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCodeGuruReviewer);
  }
}(this, function(expect, AmazonCodeGuruReviewer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCodeGuruReviewer.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateRepository', function() {
      it('should call associateRepository successfully', function(done) {
        //uncomment below and update the code to test associateRepository
        //instance.associateRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCodeReview', function() {
      it('should call createCodeReview successfully', function(done) {
        //uncomment below and update the code to test createCodeReview
        //instance.createCodeReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCodeReview', function() {
      it('should call describeCodeReview successfully', function(done) {
        //uncomment below and update the code to test describeCodeReview
        //instance.describeCodeReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRecommendationFeedback', function() {
      it('should call describeRecommendationFeedback successfully', function(done) {
        //uncomment below and update the code to test describeRecommendationFeedback
        //instance.describeRecommendationFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRepositoryAssociation', function() {
      it('should call describeRepositoryAssociation successfully', function(done) {
        //uncomment below and update the code to test describeRepositoryAssociation
        //instance.describeRepositoryAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateRepository', function() {
      it('should call disassociateRepository successfully', function(done) {
        //uncomment below and update the code to test disassociateRepository
        //instance.disassociateRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCodeReviews', function() {
      it('should call listCodeReviews successfully', function(done) {
        //uncomment below and update the code to test listCodeReviews
        //instance.listCodeReviews(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRecommendationFeedback', function() {
      it('should call listRecommendationFeedback successfully', function(done) {
        //uncomment below and update the code to test listRecommendationFeedback
        //instance.listRecommendationFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRecommendations', function() {
      it('should call listRecommendations successfully', function(done) {
        //uncomment below and update the code to test listRecommendations
        //instance.listRecommendations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRepositoryAssociations', function() {
      it('should call listRepositoryAssociations successfully', function(done) {
        //uncomment below and update the code to test listRepositoryAssociations
        //instance.listRepositoryAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRecommendationFeedback', function() {
      it('should call putRecommendationFeedback successfully', function(done) {
        //uncomment below and update the code to test putRecommendationFeedback
        //instance.putRecommendationFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
