/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCodeGuruReviewer);
  }
}(this, function(expect, AmazonCodeGuruReviewer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCodeGuruReviewer.Repository();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Repository', function() {
    it('should create an instance of Repository', function() {
      // uncomment below and update the code to test Repository
      //var instance = new AmazonCodeGuruReviewer.Repository();
      //expect(instance).to.be.a(AmazonCodeGuruReviewer.Repository);
    });

    it('should have the property codeCommit (base name: "CodeCommit")', function() {
      // uncomment below and update the code to test the property codeCommit
      //var instance = new AmazonCodeGuruReviewer.Repository();
      //expect(instance).to.be();
    });

    it('should have the property bitbucket (base name: "Bitbucket")', function() {
      // uncomment below and update the code to test the property bitbucket
      //var instance = new AmazonCodeGuruReviewer.Repository();
      //expect(instance).to.be();
    });

    it('should have the property gitHubEnterpriseServer (base name: "GitHubEnterpriseServer")', function() {
      // uncomment below and update the code to test the property gitHubEnterpriseServer
      //var instance = new AmazonCodeGuruReviewer.Repository();
      //expect(instance).to.be();
    });

    it('should have the property s3Bucket (base name: "S3Bucket")', function() {
      // uncomment below and update the code to test the property s3Bucket
      //var instance = new AmazonCodeGuruReviewer.Repository();
      //expect(instance).to.be();
    });

  });

}));
