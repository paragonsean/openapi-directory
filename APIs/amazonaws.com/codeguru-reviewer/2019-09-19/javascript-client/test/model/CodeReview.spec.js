/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCodeGuruReviewer);
  }
}(this, function(expect, AmazonCodeGuruReviewer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCodeGuruReviewer.CodeReview();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CodeReview', function() {
    it('should create an instance of CodeReview', function() {
      // uncomment below and update the code to test CodeReview
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be.a(AmazonCodeGuruReviewer.CodeReview);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property codeReviewArn (base name: "CodeReviewArn")', function() {
      // uncomment below and update the code to test the property codeReviewArn
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property repositoryName (base name: "RepositoryName")', function() {
      // uncomment below and update the code to test the property repositoryName
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "Owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property providerType (base name: "ProviderType")', function() {
      // uncomment below and update the code to test the property providerType
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property stateReason (base name: "StateReason")', function() {
      // uncomment below and update the code to test the property stateReason
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property createdTimeStamp (base name: "CreatedTimeStamp")', function() {
      // uncomment below and update the code to test the property createdTimeStamp
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdatedTimeStamp (base name: "LastUpdatedTimeStamp")', function() {
      // uncomment below and update the code to test the property lastUpdatedTimeStamp
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property pullRequestId (base name: "PullRequestId")', function() {
      // uncomment below and update the code to test the property pullRequestId
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property sourceCodeType (base name: "SourceCodeType")', function() {
      // uncomment below and update the code to test the property sourceCodeType
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property associationArn (base name: "AssociationArn")', function() {
      // uncomment below and update the code to test the property associationArn
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "Metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property analysisTypes (base name: "AnalysisTypes")', function() {
      // uncomment below and update the code to test the property analysisTypes
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

    it('should have the property configFileState (base name: "ConfigFileState")', function() {
      // uncomment below and update the code to test the property configFileState
      //var instance = new AmazonCodeGuruReviewer.CodeReview();
      //expect(instance).to.be();
    });

  });

}));
