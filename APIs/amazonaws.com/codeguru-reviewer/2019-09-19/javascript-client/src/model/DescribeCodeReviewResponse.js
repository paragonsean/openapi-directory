/**
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeCodeReviewResponseCodeReview from './DescribeCodeReviewResponseCodeReview';

/**
 * The DescribeCodeReviewResponse model module.
 * @module model/DescribeCodeReviewResponse
 * @version 2019-09-19
 */
class DescribeCodeReviewResponse {
    /**
     * Constructs a new <code>DescribeCodeReviewResponse</code>.
     * @alias module:model/DescribeCodeReviewResponse
     */
    constructor() { 
        
        DescribeCodeReviewResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeCodeReviewResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeCodeReviewResponse} obj Optional instance to populate.
     * @return {module:model/DescribeCodeReviewResponse} The populated <code>DescribeCodeReviewResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeCodeReviewResponse();

            if (data.hasOwnProperty('CodeReview')) {
                obj['CodeReview'] = DescribeCodeReviewResponseCodeReview.constructFromObject(data['CodeReview']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeCodeReviewResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeCodeReviewResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CodeReview`
        if (data['CodeReview']) { // data not null
          DescribeCodeReviewResponseCodeReview.validateJSON(data['CodeReview']);
        }

        return true;
    }


}



/**
 * @member {module:model/DescribeCodeReviewResponseCodeReview} CodeReview
 */
DescribeCodeReviewResponse.prototype['CodeReview'] = undefined;






export default DescribeCodeReviewResponse;

