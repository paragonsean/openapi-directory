/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CodeReviewSummaryMetricsSummary;
import org.openapitools.client.model.JobState;
import org.openapitools.client.model.ProviderType;
import org.openapitools.client.model.SourceCodeType;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the summary of the code review.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeReviewSummary {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE_REVIEW_ARN = "CodeReviewArn";
  @SerializedName(SERIALIZED_NAME_CODE_REVIEW_ARN)
  private String codeReviewArn;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "RepositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "ProviderType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderType providerType;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private JobState state;

  public static final String SERIALIZED_NAME_CREATED_TIME_STAMP = "CreatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME_STAMP)
  private OffsetDateTime createdTimeStamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP = "LastUpdatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP)
  private OffsetDateTime lastUpdatedTimeStamp;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public static final String SERIALIZED_NAME_PULL_REQUEST_ID = "PullRequestId";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_ID)
  private String pullRequestId;

  public static final String SERIALIZED_NAME_METRICS_SUMMARY = "MetricsSummary";
  @SerializedName(SERIALIZED_NAME_METRICS_SUMMARY)
  private CodeReviewSummaryMetricsSummary metricsSummary;

  public static final String SERIALIZED_NAME_SOURCE_CODE_TYPE = "SourceCodeType";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_TYPE)
  private SourceCodeType sourceCodeType;

  public CodeReviewSummary() {
  }

  public CodeReviewSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CodeReviewSummary codeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
    return this;
  }

  /**
   * Get codeReviewArn
   * @return codeReviewArn
   */
  @javax.annotation.Nullable
  public String getCodeReviewArn() {
    return codeReviewArn;
  }

  public void setCodeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
  }


  public CodeReviewSummary repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public CodeReviewSummary owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public CodeReviewSummary providerType(ProviderType providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public ProviderType getProviderType() {
    return providerType;
  }

  public void setProviderType(ProviderType providerType) {
    this.providerType = providerType;
  }


  public CodeReviewSummary state(JobState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public JobState getState() {
    return state;
  }

  public void setState(JobState state) {
    this.state = state;
  }


  public CodeReviewSummary createdTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
    return this;
  }

  /**
   * Get createdTimeStamp
   * @return createdTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimeStamp() {
    return createdTimeStamp;
  }

  public void setCreatedTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
  }


  public CodeReviewSummary lastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
    return this;
  }

  /**
   * Get lastUpdatedTimeStamp
   * @return lastUpdatedTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimeStamp() {
    return lastUpdatedTimeStamp;
  }

  public void setLastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
  }


  public CodeReviewSummary type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }


  public CodeReviewSummary pullRequestId(String pullRequestId) {
    this.pullRequestId = pullRequestId;
    return this;
  }

  /**
   * Get pullRequestId
   * @return pullRequestId
   */
  @javax.annotation.Nullable
  public String getPullRequestId() {
    return pullRequestId;
  }

  public void setPullRequestId(String pullRequestId) {
    this.pullRequestId = pullRequestId;
  }


  public CodeReviewSummary metricsSummary(CodeReviewSummaryMetricsSummary metricsSummary) {
    this.metricsSummary = metricsSummary;
    return this;
  }

  /**
   * Get metricsSummary
   * @return metricsSummary
   */
  @javax.annotation.Nullable
  public CodeReviewSummaryMetricsSummary getMetricsSummary() {
    return metricsSummary;
  }

  public void setMetricsSummary(CodeReviewSummaryMetricsSummary metricsSummary) {
    this.metricsSummary = metricsSummary;
  }


  public CodeReviewSummary sourceCodeType(SourceCodeType sourceCodeType) {
    this.sourceCodeType = sourceCodeType;
    return this;
  }

  /**
   * Get sourceCodeType
   * @return sourceCodeType
   */
  @javax.annotation.Nullable
  public SourceCodeType getSourceCodeType() {
    return sourceCodeType;
  }

  public void setSourceCodeType(SourceCodeType sourceCodeType) {
    this.sourceCodeType = sourceCodeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeReviewSummary codeReviewSummary = (CodeReviewSummary) o;
    return Objects.equals(this.name, codeReviewSummary.name) &&
        Objects.equals(this.codeReviewArn, codeReviewSummary.codeReviewArn) &&
        Objects.equals(this.repositoryName, codeReviewSummary.repositoryName) &&
        Objects.equals(this.owner, codeReviewSummary.owner) &&
        Objects.equals(this.providerType, codeReviewSummary.providerType) &&
        Objects.equals(this.state, codeReviewSummary.state) &&
        Objects.equals(this.createdTimeStamp, codeReviewSummary.createdTimeStamp) &&
        Objects.equals(this.lastUpdatedTimeStamp, codeReviewSummary.lastUpdatedTimeStamp) &&
        Objects.equals(this.type, codeReviewSummary.type) &&
        Objects.equals(this.pullRequestId, codeReviewSummary.pullRequestId) &&
        Objects.equals(this.metricsSummary, codeReviewSummary.metricsSummary) &&
        Objects.equals(this.sourceCodeType, codeReviewSummary.sourceCodeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, codeReviewArn, repositoryName, owner, providerType, state, createdTimeStamp, lastUpdatedTimeStamp, type, pullRequestId, metricsSummary, sourceCodeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeReviewSummary {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    codeReviewArn: ").append(toIndentedString(codeReviewArn)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    createdTimeStamp: ").append(toIndentedString(createdTimeStamp)).append("\n");
    sb.append("    lastUpdatedTimeStamp: ").append(toIndentedString(lastUpdatedTimeStamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pullRequestId: ").append(toIndentedString(pullRequestId)).append("\n");
    sb.append("    metricsSummary: ").append(toIndentedString(metricsSummary)).append("\n");
    sb.append("    sourceCodeType: ").append(toIndentedString(sourceCodeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("CodeReviewArn");
    openapiFields.add("RepositoryName");
    openapiFields.add("Owner");
    openapiFields.add("ProviderType");
    openapiFields.add("State");
    openapiFields.add("CreatedTimeStamp");
    openapiFields.add("LastUpdatedTimeStamp");
    openapiFields.add("Type");
    openapiFields.add("PullRequestId");
    openapiFields.add("MetricsSummary");
    openapiFields.add("SourceCodeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeReviewSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeReviewSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeReviewSummary is not found in the empty JSON string", CodeReviewSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeReviewSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeReviewSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `CodeReviewArn`
      if (jsonObj.get("CodeReviewArn") != null && !jsonObj.get("CodeReviewArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CodeReviewArn"));
      }
      // validate the optional field `RepositoryName`
      if (jsonObj.get("RepositoryName") != null && !jsonObj.get("RepositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RepositoryName"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `ProviderType`
      if (jsonObj.get("ProviderType") != null && !jsonObj.get("ProviderType").isJsonNull()) {
        ProviderType.validateJsonElement(jsonObj.get("ProviderType"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        JobState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `CreatedTimeStamp`
      if (jsonObj.get("CreatedTimeStamp") != null && !jsonObj.get("CreatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimeStamp"));
      }
      // validate the optional field `LastUpdatedTimeStamp`
      if (jsonObj.get("LastUpdatedTimeStamp") != null && !jsonObj.get("LastUpdatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimeStamp"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `PullRequestId`
      if (jsonObj.get("PullRequestId") != null && !jsonObj.get("PullRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PullRequestId"));
      }
      // validate the optional field `MetricsSummary`
      if (jsonObj.get("MetricsSummary") != null && !jsonObj.get("MetricsSummary").isJsonNull()) {
        CodeReviewSummaryMetricsSummary.validateJsonElement(jsonObj.get("MetricsSummary"));
      }
      // validate the optional field `SourceCodeType`
      if (jsonObj.get("SourceCodeType") != null && !jsonObj.get("SourceCodeType").isJsonNull()) {
        SourceCodeType.validateJsonElement(jsonObj.get("SourceCodeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeReviewSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeReviewSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeReviewSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeReviewSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeReviewSummary>() {
           @Override
           public void write(JsonWriter out, CodeReviewSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeReviewSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeReviewSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeReviewSummary
   * @throws IOException if the JSON string is invalid with respect to CodeReviewSummary
   */
  public static CodeReviewSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeReviewSummary.class);
  }

  /**
   * Convert an instance of CodeReviewSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

