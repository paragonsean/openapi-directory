/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RequestMetadataEventInfo;
import org.openapitools.client.model.VendorName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata that is associated with a code review. This applies to both pull request and repository analysis code reviews.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestMetadata {
  public static final String SERIALIZED_NAME_REQUEST_ID = "RequestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUESTER = "Requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private String requester;

  public static final String SERIALIZED_NAME_EVENT_INFO = "EventInfo";
  @SerializedName(SERIALIZED_NAME_EVENT_INFO)
  private RequestMetadataEventInfo eventInfo;

  public static final String SERIALIZED_NAME_VENDOR_NAME = "VendorName";
  @SerializedName(SERIALIZED_NAME_VENDOR_NAME)
  private VendorName vendorName;

  public RequestMetadata() {
  }

  public RequestMetadata requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public RequestMetadata requester(String requester) {
    this.requester = requester;
    return this;
  }

  /**
   * Get requester
   * @return requester
   */
  @javax.annotation.Nullable
  public String getRequester() {
    return requester;
  }

  public void setRequester(String requester) {
    this.requester = requester;
  }


  public RequestMetadata eventInfo(RequestMetadataEventInfo eventInfo) {
    this.eventInfo = eventInfo;
    return this;
  }

  /**
   * Get eventInfo
   * @return eventInfo
   */
  @javax.annotation.Nullable
  public RequestMetadataEventInfo getEventInfo() {
    return eventInfo;
  }

  public void setEventInfo(RequestMetadataEventInfo eventInfo) {
    this.eventInfo = eventInfo;
  }


  public RequestMetadata vendorName(VendorName vendorName) {
    this.vendorName = vendorName;
    return this;
  }

  /**
   * Get vendorName
   * @return vendorName
   */
  @javax.annotation.Nullable
  public VendorName getVendorName() {
    return vendorName;
  }

  public void setVendorName(VendorName vendorName) {
    this.vendorName = vendorName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestMetadata requestMetadata = (RequestMetadata) o;
    return Objects.equals(this.requestId, requestMetadata.requestId) &&
        Objects.equals(this.requester, requestMetadata.requester) &&
        Objects.equals(this.eventInfo, requestMetadata.eventInfo) &&
        Objects.equals(this.vendorName, requestMetadata.vendorName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, requester, eventInfo, vendorName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestMetadata {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    eventInfo: ").append(toIndentedString(eventInfo)).append("\n");
    sb.append("    vendorName: ").append(toIndentedString(vendorName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RequestId");
    openapiFields.add("Requester");
    openapiFields.add("EventInfo");
    openapiFields.add("VendorName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestMetadata is not found in the empty JSON string", RequestMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RequestId`
      if (jsonObj.get("RequestId") != null && !jsonObj.get("RequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RequestId"));
      }
      // validate the optional field `Requester`
      if (jsonObj.get("Requester") != null && !jsonObj.get("Requester").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Requester"));
      }
      // validate the optional field `EventInfo`
      if (jsonObj.get("EventInfo") != null && !jsonObj.get("EventInfo").isJsonNull()) {
        RequestMetadataEventInfo.validateJsonElement(jsonObj.get("EventInfo"));
      }
      // validate the optional field `VendorName`
      if (jsonObj.get("VendorName") != null && !jsonObj.get("VendorName").isJsonNull()) {
        VendorName.validateJsonElement(jsonObj.get("VendorName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestMetadata>() {
           @Override
           public void write(JsonWriter out, RequestMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestMetadata
   * @throws IOException if the JSON string is invalid with respect to RequestMetadata
   */
  public static RequestMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestMetadata.class);
  }

  /**
   * Convert an instance of RequestMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

