/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AssociateRepositoryRequestKMSKeyDetails;
import org.openapitools.client.model.AssociateRepositoryRequestRepository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateRepositoryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateRepositoryRequest {
  public static final String SERIALIZED_NAME_REPOSITORY = "Repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private AssociateRepositoryRequestRepository repository;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_KM_S_KEY_DETAILS = "KMSKeyDetails";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY_DETAILS)
  private AssociateRepositoryRequestKMSKeyDetails kmSKeyDetails;

  public AssociateRepositoryRequest() {
  }

  public AssociateRepositoryRequest repository(AssociateRepositoryRequestRepository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nonnull
  public AssociateRepositoryRequestRepository getRepository() {
    return repository;
  }

  public void setRepository(AssociateRepositoryRequestRepository repository) {
    this.repository = repository;
  }


  public AssociateRepositoryRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public AssociateRepositoryRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public AssociateRepositoryRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;i&gt;tag key&lt;/i&gt; (for example, &lt;code&gt;CostCenter&lt;/code&gt;, &lt;code&gt;Environment&lt;/code&gt;, &lt;code&gt;Project&lt;/code&gt;, or &lt;code&gt;Secret&lt;/code&gt;). Tag keys are case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An optional field known as a &lt;i&gt;tag value&lt;/i&gt; (for example, &lt;code&gt;111122223333&lt;/code&gt;, &lt;code&gt;Production&lt;/code&gt;, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public AssociateRepositoryRequest kmSKeyDetails(AssociateRepositoryRequestKMSKeyDetails kmSKeyDetails) {
    this.kmSKeyDetails = kmSKeyDetails;
    return this;
  }

  /**
   * Get kmSKeyDetails
   * @return kmSKeyDetails
   */
  @javax.annotation.Nullable
  public AssociateRepositoryRequestKMSKeyDetails getKmSKeyDetails() {
    return kmSKeyDetails;
  }

  public void setKmSKeyDetails(AssociateRepositoryRequestKMSKeyDetails kmSKeyDetails) {
    this.kmSKeyDetails = kmSKeyDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateRepositoryRequest associateRepositoryRequest = (AssociateRepositoryRequest) o;
    return Objects.equals(this.repository, associateRepositoryRequest.repository) &&
        Objects.equals(this.clientRequestToken, associateRepositoryRequest.clientRequestToken) &&
        Objects.equals(this.tags, associateRepositoryRequest.tags) &&
        Objects.equals(this.kmSKeyDetails, associateRepositoryRequest.kmSKeyDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repository, clientRequestToken, tags, kmSKeyDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateRepositoryRequest {\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    kmSKeyDetails: ").append(toIndentedString(kmSKeyDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Repository");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("Tags");
    openapiFields.add("KMSKeyDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Repository");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateRepositoryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateRepositoryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateRepositoryRequest is not found in the empty JSON string", AssociateRepositoryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateRepositoryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateRepositoryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateRepositoryRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Repository`
      AssociateRepositoryRequestRepository.validateJsonElement(jsonObj.get("Repository"));
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      // validate the optional field `KMSKeyDetails`
      if (jsonObj.get("KMSKeyDetails") != null && !jsonObj.get("KMSKeyDetails").isJsonNull()) {
        AssociateRepositoryRequestKMSKeyDetails.validateJsonElement(jsonObj.get("KMSKeyDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateRepositoryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateRepositoryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateRepositoryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateRepositoryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateRepositoryRequest>() {
           @Override
           public void write(JsonWriter out, AssociateRepositoryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateRepositoryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateRepositoryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateRepositoryRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateRepositoryRequest
   */
  public static AssociateRepositoryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateRepositoryRequest.class);
  }

  /**
   * Convert an instance of AssociateRepositoryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

