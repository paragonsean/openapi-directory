/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3RepositoryDetailsCodeArtifacts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the name of an S3 bucket and a &lt;code&gt;CodeArtifacts&lt;/code&gt; object that contains the S3 object keys for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3RepositoryDetails {
  public static final String SERIALIZED_NAME_BUCKET_NAME = "BucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_CODE_ARTIFACTS = "CodeArtifacts";
  @SerializedName(SERIALIZED_NAME_CODE_ARTIFACTS)
  private S3RepositoryDetailsCodeArtifacts codeArtifacts;

  public S3RepositoryDetails() {
  }

  public S3RepositoryDetails bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Get bucketName
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public S3RepositoryDetails codeArtifacts(S3RepositoryDetailsCodeArtifacts codeArtifacts) {
    this.codeArtifacts = codeArtifacts;
    return this;
  }

  /**
   * Get codeArtifacts
   * @return codeArtifacts
   */
  @javax.annotation.Nullable
  public S3RepositoryDetailsCodeArtifacts getCodeArtifacts() {
    return codeArtifacts;
  }

  public void setCodeArtifacts(S3RepositoryDetailsCodeArtifacts codeArtifacts) {
    this.codeArtifacts = codeArtifacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3RepositoryDetails s3RepositoryDetails = (S3RepositoryDetails) o;
    return Objects.equals(this.bucketName, s3RepositoryDetails.bucketName) &&
        Objects.equals(this.codeArtifacts, s3RepositoryDetails.codeArtifacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketName, codeArtifacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3RepositoryDetails {\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    codeArtifacts: ").append(toIndentedString(codeArtifacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BucketName");
    openapiFields.add("CodeArtifacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3RepositoryDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3RepositoryDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3RepositoryDetails is not found in the empty JSON string", S3RepositoryDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3RepositoryDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3RepositoryDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BucketName`
      if (jsonObj.get("BucketName") != null && !jsonObj.get("BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketName"));
      }
      // validate the optional field `CodeArtifacts`
      if (jsonObj.get("CodeArtifacts") != null && !jsonObj.get("CodeArtifacts").isJsonNull()) {
        S3RepositoryDetailsCodeArtifacts.validateJsonElement(jsonObj.get("CodeArtifacts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3RepositoryDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3RepositoryDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3RepositoryDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3RepositoryDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<S3RepositoryDetails>() {
           @Override
           public void write(JsonWriter out, S3RepositoryDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3RepositoryDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3RepositoryDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3RepositoryDetails
   * @throws IOException if the JSON string is invalid with respect to S3RepositoryDetails
   */
  public static S3RepositoryDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3RepositoryDetails.class);
  }

  /**
   * Convert an instance of S3RepositoryDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

