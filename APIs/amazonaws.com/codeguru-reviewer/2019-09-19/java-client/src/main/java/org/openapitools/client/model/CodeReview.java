/*
 * Amazon CodeGuru Reviewer
 * <p>This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.</p> <p>By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the <i> <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html\">Amazon CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an <i>interface VPC endpoint</i>. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html\">CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a> in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-09-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodeReviewMetrics;
import org.openapitools.client.model.CodeReviewSourceCodeType;
import org.openapitools.client.model.ConfigFileState;
import org.openapitools.client.model.JobState;
import org.openapitools.client.model.ProviderType;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a code review. A code review belongs to the associated repository that contains the reviewed code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:00.218645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeReview {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE_REVIEW_ARN = "CodeReviewArn";
  @SerializedName(SERIALIZED_NAME_CODE_REVIEW_ARN)
  private String codeReviewArn;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "RepositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "ProviderType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderType providerType;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private JobState state;

  public static final String SERIALIZED_NAME_STATE_REASON = "StateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_CREATED_TIME_STAMP = "CreatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME_STAMP)
  private OffsetDateTime createdTimeStamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP = "LastUpdatedTimeStamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME_STAMP)
  private OffsetDateTime lastUpdatedTimeStamp;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public static final String SERIALIZED_NAME_PULL_REQUEST_ID = "PullRequestId";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_ID)
  private String pullRequestId;

  public static final String SERIALIZED_NAME_SOURCE_CODE_TYPE = "SourceCodeType";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_TYPE)
  private CodeReviewSourceCodeType sourceCodeType;

  public static final String SERIALIZED_NAME_ASSOCIATION_ARN = "AssociationArn";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ARN)
  private String associationArn;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private CodeReviewMetrics metrics;

  public static final String SERIALIZED_NAME_ANALYSIS_TYPES = "AnalysisTypes";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TYPES)
  private List analysisTypes;

  public static final String SERIALIZED_NAME_CONFIG_FILE_STATE = "ConfigFileState";
  @SerializedName(SERIALIZED_NAME_CONFIG_FILE_STATE)
  private ConfigFileState configFileState;

  public CodeReview() {
  }

  public CodeReview name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CodeReview codeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
    return this;
  }

  /**
   * Get codeReviewArn
   * @return codeReviewArn
   */
  @javax.annotation.Nullable
  public String getCodeReviewArn() {
    return codeReviewArn;
  }

  public void setCodeReviewArn(String codeReviewArn) {
    this.codeReviewArn = codeReviewArn;
  }


  public CodeReview repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public CodeReview owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public CodeReview providerType(ProviderType providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public ProviderType getProviderType() {
    return providerType;
  }

  public void setProviderType(ProviderType providerType) {
    this.providerType = providerType;
  }


  public CodeReview state(JobState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public JobState getState() {
    return state;
  }

  public void setState(JobState state) {
    this.state = state;
  }


  public CodeReview stateReason(String stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * Get stateReason
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }

  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public CodeReview createdTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
    return this;
  }

  /**
   * Get createdTimeStamp
   * @return createdTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimeStamp() {
    return createdTimeStamp;
  }

  public void setCreatedTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
  }


  public CodeReview lastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
    return this;
  }

  /**
   * Get lastUpdatedTimeStamp
   * @return lastUpdatedTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimeStamp() {
    return lastUpdatedTimeStamp;
  }

  public void setLastUpdatedTimeStamp(OffsetDateTime lastUpdatedTimeStamp) {
    this.lastUpdatedTimeStamp = lastUpdatedTimeStamp;
  }


  public CodeReview type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }


  public CodeReview pullRequestId(String pullRequestId) {
    this.pullRequestId = pullRequestId;
    return this;
  }

  /**
   * Get pullRequestId
   * @return pullRequestId
   */
  @javax.annotation.Nullable
  public String getPullRequestId() {
    return pullRequestId;
  }

  public void setPullRequestId(String pullRequestId) {
    this.pullRequestId = pullRequestId;
  }


  public CodeReview sourceCodeType(CodeReviewSourceCodeType sourceCodeType) {
    this.sourceCodeType = sourceCodeType;
    return this;
  }

  /**
   * Get sourceCodeType
   * @return sourceCodeType
   */
  @javax.annotation.Nullable
  public CodeReviewSourceCodeType getSourceCodeType() {
    return sourceCodeType;
  }

  public void setSourceCodeType(CodeReviewSourceCodeType sourceCodeType) {
    this.sourceCodeType = sourceCodeType;
  }


  public CodeReview associationArn(String associationArn) {
    this.associationArn = associationArn;
    return this;
  }

  /**
   * Get associationArn
   * @return associationArn
   */
  @javax.annotation.Nullable
  public String getAssociationArn() {
    return associationArn;
  }

  public void setAssociationArn(String associationArn) {
    this.associationArn = associationArn;
  }


  public CodeReview metrics(CodeReviewMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public CodeReviewMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(CodeReviewMetrics metrics) {
    this.metrics = metrics;
  }


  public CodeReview analysisTypes(List analysisTypes) {
    this.analysisTypes = analysisTypes;
    return this;
  }

  /**
   * Get analysisTypes
   * @return analysisTypes
   */
  @javax.annotation.Nullable
  public List getAnalysisTypes() {
    return analysisTypes;
  }

  public void setAnalysisTypes(List analysisTypes) {
    this.analysisTypes = analysisTypes;
  }


  public CodeReview configFileState(ConfigFileState configFileState) {
    this.configFileState = configFileState;
    return this;
  }

  /**
   * Get configFileState
   * @return configFileState
   */
  @javax.annotation.Nullable
  public ConfigFileState getConfigFileState() {
    return configFileState;
  }

  public void setConfigFileState(ConfigFileState configFileState) {
    this.configFileState = configFileState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeReview codeReview = (CodeReview) o;
    return Objects.equals(this.name, codeReview.name) &&
        Objects.equals(this.codeReviewArn, codeReview.codeReviewArn) &&
        Objects.equals(this.repositoryName, codeReview.repositoryName) &&
        Objects.equals(this.owner, codeReview.owner) &&
        Objects.equals(this.providerType, codeReview.providerType) &&
        Objects.equals(this.state, codeReview.state) &&
        Objects.equals(this.stateReason, codeReview.stateReason) &&
        Objects.equals(this.createdTimeStamp, codeReview.createdTimeStamp) &&
        Objects.equals(this.lastUpdatedTimeStamp, codeReview.lastUpdatedTimeStamp) &&
        Objects.equals(this.type, codeReview.type) &&
        Objects.equals(this.pullRequestId, codeReview.pullRequestId) &&
        Objects.equals(this.sourceCodeType, codeReview.sourceCodeType) &&
        Objects.equals(this.associationArn, codeReview.associationArn) &&
        Objects.equals(this.metrics, codeReview.metrics) &&
        Objects.equals(this.analysisTypes, codeReview.analysisTypes) &&
        Objects.equals(this.configFileState, codeReview.configFileState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, codeReviewArn, repositoryName, owner, providerType, state, stateReason, createdTimeStamp, lastUpdatedTimeStamp, type, pullRequestId, sourceCodeType, associationArn, metrics, analysisTypes, configFileState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeReview {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    codeReviewArn: ").append(toIndentedString(codeReviewArn)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    createdTimeStamp: ").append(toIndentedString(createdTimeStamp)).append("\n");
    sb.append("    lastUpdatedTimeStamp: ").append(toIndentedString(lastUpdatedTimeStamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pullRequestId: ").append(toIndentedString(pullRequestId)).append("\n");
    sb.append("    sourceCodeType: ").append(toIndentedString(sourceCodeType)).append("\n");
    sb.append("    associationArn: ").append(toIndentedString(associationArn)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    analysisTypes: ").append(toIndentedString(analysisTypes)).append("\n");
    sb.append("    configFileState: ").append(toIndentedString(configFileState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("CodeReviewArn");
    openapiFields.add("RepositoryName");
    openapiFields.add("Owner");
    openapiFields.add("ProviderType");
    openapiFields.add("State");
    openapiFields.add("StateReason");
    openapiFields.add("CreatedTimeStamp");
    openapiFields.add("LastUpdatedTimeStamp");
    openapiFields.add("Type");
    openapiFields.add("PullRequestId");
    openapiFields.add("SourceCodeType");
    openapiFields.add("AssociationArn");
    openapiFields.add("Metrics");
    openapiFields.add("AnalysisTypes");
    openapiFields.add("ConfigFileState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeReview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeReview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeReview is not found in the empty JSON string", CodeReview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeReview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeReview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `CodeReviewArn`
      if (jsonObj.get("CodeReviewArn") != null && !jsonObj.get("CodeReviewArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CodeReviewArn"));
      }
      // validate the optional field `RepositoryName`
      if (jsonObj.get("RepositoryName") != null && !jsonObj.get("RepositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RepositoryName"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `ProviderType`
      if (jsonObj.get("ProviderType") != null && !jsonObj.get("ProviderType").isJsonNull()) {
        ProviderType.validateJsonElement(jsonObj.get("ProviderType"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        JobState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StateReason`
      if (jsonObj.get("StateReason") != null && !jsonObj.get("StateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReason"));
      }
      // validate the optional field `CreatedTimeStamp`
      if (jsonObj.get("CreatedTimeStamp") != null && !jsonObj.get("CreatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimeStamp"));
      }
      // validate the optional field `LastUpdatedTimeStamp`
      if (jsonObj.get("LastUpdatedTimeStamp") != null && !jsonObj.get("LastUpdatedTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimeStamp"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `PullRequestId`
      if (jsonObj.get("PullRequestId") != null && !jsonObj.get("PullRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PullRequestId"));
      }
      // validate the optional field `SourceCodeType`
      if (jsonObj.get("SourceCodeType") != null && !jsonObj.get("SourceCodeType").isJsonNull()) {
        CodeReviewSourceCodeType.validateJsonElement(jsonObj.get("SourceCodeType"));
      }
      // validate the optional field `AssociationArn`
      if (jsonObj.get("AssociationArn") != null && !jsonObj.get("AssociationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationArn"));
      }
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        CodeReviewMetrics.validateJsonElement(jsonObj.get("Metrics"));
      }
      // validate the optional field `AnalysisTypes`
      if (jsonObj.get("AnalysisTypes") != null && !jsonObj.get("AnalysisTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AnalysisTypes"));
      }
      // validate the optional field `ConfigFileState`
      if (jsonObj.get("ConfigFileState") != null && !jsonObj.get("ConfigFileState").isJsonNull()) {
        ConfigFileState.validateJsonElement(jsonObj.get("ConfigFileState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeReview.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeReview>() {
           @Override
           public void write(JsonWriter out, CodeReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeReview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeReview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeReview
   * @throws IOException if the JSON string is invalid with respect to CodeReview
   */
  public static CodeReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeReview.class);
  }

  /**
   * Convert an instance of CodeReview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

